// Generated from MySQLParser.g4 by ANTLR 4.13.0


/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-useless-escape, no-lone-blocks */

/* cspell: disable */

import { SqlMode } from "./MySQLRecognizerCommon.js";


import {
    DFA, ParserATNSimulator, PredictionContextCache, RuleContext, Token, SerializedATNView, ATN,
    ATNDeserializer, StringVector, Vocabulary, ParserRuleContext as PRC, TokenStream, FailedPredicateException,
    RecognitionException, NoViableAltException, TerminalNode, Vector
} from "../../../../src/antlr4-runtime.js";

import MySQLParserListener from "./MySQLParserListener.js";
import MySQLParserVisitor from "./MySQLParserVisitor.js";

const ParserRuleContext = PRC.extend<PRC>("PRC", {});
type ParserRuleContext = InstanceType<typeof ParserRuleContext>;

import MySQLBaseRecognizer from "./MySQLBaseRecognizer.js";

export default class MySQLParser extends MySQLBaseRecognizer {
    public static readonly ACCESSIBLE_SYMBOL = 1;
    public static readonly ACCOUNT_SYMBOL = 2;
    public static readonly ACTION_SYMBOL = 3;
    public static readonly ADD_SYMBOL = 4;
    public static readonly ADDDATE_SYMBOL = 5;
    public static readonly AFTER_SYMBOL = 6;
    public static readonly AGAINST_SYMBOL = 7;
    public static readonly AGGREGATE_SYMBOL = 8;
    public static readonly ALGORITHM_SYMBOL = 9;
    public static readonly ALL_SYMBOL = 10;
    public static readonly ALTER_SYMBOL = 11;
    public static readonly ALWAYS_SYMBOL = 12;
    public static readonly ANALYSE_SYMBOL = 13;
    public static readonly ANALYZE_SYMBOL = 14;
    public static readonly AND_SYMBOL = 15;
    public static readonly ANY_SYMBOL = 16;
    public static readonly AS_SYMBOL = 17;
    public static readonly ASC_SYMBOL = 18;
    public static readonly ASCII_SYMBOL = 19;
    public static readonly ASENSITIVE_SYMBOL = 20;
    public static readonly AT_SYMBOL = 21;
    public static readonly AUTHORS_SYMBOL = 22;
    public static readonly AUTOEXTEND_SIZE_SYMBOL = 23;
    public static readonly AUTO_INCREMENT_SYMBOL = 24;
    public static readonly AVG_ROW_LENGTH_SYMBOL = 25;
    public static readonly AVG_SYMBOL = 26;
    public static readonly BACKUP_SYMBOL = 27;
    public static readonly BEFORE_SYMBOL = 28;
    public static readonly BEGIN_SYMBOL = 29;
    public static readonly BETWEEN_SYMBOL = 30;
    public static readonly BIGINT_SYMBOL = 31;
    public static readonly BINARY_SYMBOL = 32;
    public static readonly BINLOG_SYMBOL = 33;
    public static readonly BIN_NUM_SYMBOL = 34;
    public static readonly BIT_AND_SYMBOL = 35;
    public static readonly BIT_OR_SYMBOL = 36;
    public static readonly BIT_SYMBOL = 37;
    public static readonly BIT_XOR_SYMBOL = 38;
    public static readonly BLOB_SYMBOL = 39;
    public static readonly BLOCK_SYMBOL = 40;
    public static readonly BOOLEAN_SYMBOL = 41;
    public static readonly BOOL_SYMBOL = 42;
    public static readonly BOTH_SYMBOL = 43;
    public static readonly BTREE_SYMBOL = 44;
    public static readonly BY_SYMBOL = 45;
    public static readonly BYTE_SYMBOL = 46;
    public static readonly CACHE_SYMBOL = 47;
    public static readonly CALL_SYMBOL = 48;
    public static readonly CASCADE_SYMBOL = 49;
    public static readonly CASCADED_SYMBOL = 50;
    public static readonly CASE_SYMBOL = 51;
    public static readonly CAST_SYMBOL = 52;
    public static readonly CATALOG_NAME_SYMBOL = 53;
    public static readonly CHAIN_SYMBOL = 54;
    public static readonly CHANGE_SYMBOL = 55;
    public static readonly CHANGED_SYMBOL = 56;
    public static readonly CHANNEL_SYMBOL = 57;
    public static readonly CHARSET_SYMBOL = 58;
    public static readonly CHARACTER_SYMBOL = 59;
    public static readonly CHAR_SYMBOL = 60;
    public static readonly CHECKSUM_SYMBOL = 61;
    public static readonly CHECK_SYMBOL = 62;
    public static readonly CIPHER_SYMBOL = 63;
    public static readonly CLASS_ORIGIN_SYMBOL = 64;
    public static readonly CLIENT_SYMBOL = 65;
    public static readonly CLOSE_SYMBOL = 66;
    public static readonly COALESCE_SYMBOL = 67;
    public static readonly CODE_SYMBOL = 68;
    public static readonly COLLATE_SYMBOL = 69;
    public static readonly COLLATION_SYMBOL = 70;
    public static readonly COLUMNS_SYMBOL = 71;
    public static readonly COLUMN_SYMBOL = 72;
    public static readonly COLUMN_NAME_SYMBOL = 73;
    public static readonly COLUMN_FORMAT_SYMBOL = 74;
    public static readonly COMMENT_SYMBOL = 75;
    public static readonly COMMITTED_SYMBOL = 76;
    public static readonly COMMIT_SYMBOL = 77;
    public static readonly COMPACT_SYMBOL = 78;
    public static readonly COMPLETION_SYMBOL = 79;
    public static readonly COMPRESSED_SYMBOL = 80;
    public static readonly COMPRESSION_SYMBOL = 81;
    public static readonly CONCURRENT_SYMBOL = 82;
    public static readonly CONDITION_SYMBOL = 83;
    public static readonly CONNECTION_SYMBOL = 84;
    public static readonly CONSISTENT_SYMBOL = 85;
    public static readonly CONSTRAINT_SYMBOL = 86;
    public static readonly CONSTRAINT_CATALOG_SYMBOL = 87;
    public static readonly CONSTRAINT_NAME_SYMBOL = 88;
    public static readonly CONSTRAINT_SCHEMA_SYMBOL = 89;
    public static readonly CONTAINS_SYMBOL = 90;
    public static readonly CONTEXT_SYMBOL = 91;
    public static readonly CONTINUE_SYMBOL = 92;
    public static readonly CONTRIBUTORS_SYMBOL = 93;
    public static readonly CONVERT_SYMBOL = 94;
    public static readonly COUNT_SYMBOL = 95;
    public static readonly CPU_SYMBOL = 96;
    public static readonly CREATE_SYMBOL = 97;
    public static readonly CROSS_SYMBOL = 98;
    public static readonly CUBE_SYMBOL = 99;
    public static readonly CURDATE_SYMBOL = 100;
    public static readonly CURRENT_SYMBOL = 101;
    public static readonly CURRENT_DATE_SYMBOL = 102;
    public static readonly CURRENT_TIME_SYMBOL = 103;
    public static readonly CURRENT_TIMESTAMP_SYMBOL = 104;
    public static readonly CURRENT_USER_SYMBOL = 105;
    public static readonly CURSOR_SYMBOL = 106;
    public static readonly CURSOR_NAME_SYMBOL = 107;
    public static readonly CURTIME_SYMBOL = 108;
    public static readonly DATABASE_SYMBOL = 109;
    public static readonly DATABASES_SYMBOL = 110;
    public static readonly DATAFILE_SYMBOL = 111;
    public static readonly DATA_SYMBOL = 112;
    public static readonly DATETIME_SYMBOL = 113;
    public static readonly DATE_ADD_SYMBOL = 114;
    public static readonly DATE_SUB_SYMBOL = 115;
    public static readonly DATE_SYMBOL = 116;
    public static readonly DAYOFMONTH_SYMBOL = 117;
    public static readonly DAY_HOUR_SYMBOL = 118;
    public static readonly DAY_MICROSECOND_SYMBOL = 119;
    public static readonly DAY_MINUTE_SYMBOL = 120;
    public static readonly DAY_SECOND_SYMBOL = 121;
    public static readonly DAY_SYMBOL = 122;
    public static readonly DEALLOCATE_SYMBOL = 123;
    public static readonly DEC_SYMBOL = 124;
    public static readonly DECIMAL_NUM_SYMBOL = 125;
    public static readonly DECIMAL_SYMBOL = 126;
    public static readonly DECLARE_SYMBOL = 127;
    public static readonly DEFAULT_SYMBOL = 128;
    public static readonly DEFAULT_AUTH_SYMBOL = 129;
    public static readonly DEFINER_SYMBOL = 130;
    public static readonly DELAYED_SYMBOL = 131;
    public static readonly DELAY_KEY_WRITE_SYMBOL = 132;
    public static readonly DELETE_SYMBOL = 133;
    public static readonly DESC_SYMBOL = 134;
    public static readonly DESCRIBE_SYMBOL = 135;
    public static readonly DES_KEY_FILE_SYMBOL = 136;
    public static readonly DETERMINISTIC_SYMBOL = 137;
    public static readonly DIAGNOSTICS_SYMBOL = 138;
    public static readonly DIRECTORY_SYMBOL = 139;
    public static readonly DISABLE_SYMBOL = 140;
    public static readonly DISCARD_SYMBOL = 141;
    public static readonly DISK_SYMBOL = 142;
    public static readonly DISTINCT_SYMBOL = 143;
    public static readonly DISTINCTROW_SYMBOL = 144;
    public static readonly DIV_SYMBOL = 145;
    public static readonly DOUBLE_SYMBOL = 146;
    public static readonly DO_SYMBOL = 147;
    public static readonly DROP_SYMBOL = 148;
    public static readonly DUAL_SYMBOL = 149;
    public static readonly DUMPFILE_SYMBOL = 150;
    public static readonly DUPLICATE_SYMBOL = 151;
    public static readonly DYNAMIC_SYMBOL = 152;
    public static readonly EACH_SYMBOL = 153;
    public static readonly ELSE_SYMBOL = 154;
    public static readonly ELSEIF_SYMBOL = 155;
    public static readonly ENABLE_SYMBOL = 156;
    public static readonly ENCLOSED_SYMBOL = 157;
    public static readonly ENCRYPTION_SYMBOL = 158;
    public static readonly END_SYMBOL = 159;
    public static readonly ENDS_SYMBOL = 160;
    public static readonly END_OF_INPUT_SYMBOL = 161;
    public static readonly ENGINES_SYMBOL = 162;
    public static readonly ENGINE_SYMBOL = 163;
    public static readonly ENUM_SYMBOL = 164;
    public static readonly ERROR_SYMBOL = 165;
    public static readonly ERRORS_SYMBOL = 166;
    public static readonly ESCAPED_SYMBOL = 167;
    public static readonly ESCAPE_SYMBOL = 168;
    public static readonly EVENTS_SYMBOL = 169;
    public static readonly EVENT_SYMBOL = 170;
    public static readonly EVERY_SYMBOL = 171;
    public static readonly EXCHANGE_SYMBOL = 172;
    public static readonly EXECUTE_SYMBOL = 173;
    public static readonly EXISTS_SYMBOL = 174;
    public static readonly EXIT_SYMBOL = 175;
    public static readonly EXPANSION_SYMBOL = 176;
    public static readonly EXPIRE_SYMBOL = 177;
    public static readonly EXPLAIN_SYMBOL = 178;
    public static readonly EXPORT_SYMBOL = 179;
    public static readonly EXTENDED_SYMBOL = 180;
    public static readonly EXTENT_SIZE_SYMBOL = 181;
    public static readonly EXTRACT_SYMBOL = 182;
    public static readonly FALSE_SYMBOL = 183;
    public static readonly FAST_SYMBOL = 184;
    public static readonly FAULTS_SYMBOL = 185;
    public static readonly FETCH_SYMBOL = 186;
    public static readonly FIELDS_SYMBOL = 187;
    public static readonly FILE_SYMBOL = 188;
    public static readonly FILE_BLOCK_SIZE_SYMBOL = 189;
    public static readonly FILTER_SYMBOL = 190;
    public static readonly FIRST_SYMBOL = 191;
    public static readonly FIXED_SYMBOL = 192;
    public static readonly FLOAT4_SYMBOL = 193;
    public static readonly FLOAT8_SYMBOL = 194;
    public static readonly FLOAT_SYMBOL = 195;
    public static readonly FLUSH_SYMBOL = 196;
    public static readonly FOLLOWS_SYMBOL = 197;
    public static readonly FORCE_SYMBOL = 198;
    public static readonly FOREIGN_SYMBOL = 199;
    public static readonly FOR_SYMBOL = 200;
    public static readonly FORMAT_SYMBOL = 201;
    public static readonly FOUND_SYMBOL = 202;
    public static readonly FROM_SYMBOL = 203;
    public static readonly FULL_SYMBOL = 204;
    public static readonly FULLTEXT_SYMBOL = 205;
    public static readonly FUNCTION_SYMBOL = 206;
    public static readonly GET_SYMBOL = 207;
    public static readonly GENERAL_SYMBOL = 208;
    public static readonly GENERATED_SYMBOL = 209;
    public static readonly GROUP_REPLICATION_SYMBOL = 210;
    public static readonly GEOMETRYCOLLECTION_SYMBOL = 211;
    public static readonly GEOMETRY_SYMBOL = 212;
    public static readonly GET_FORMAT_SYMBOL = 213;
    public static readonly GLOBAL_SYMBOL = 214;
    public static readonly GRANT_SYMBOL = 215;
    public static readonly GRANTS_SYMBOL = 216;
    public static readonly GROUP_SYMBOL = 217;
    public static readonly GROUP_CONCAT_SYMBOL = 218;
    public static readonly HANDLER_SYMBOL = 219;
    public static readonly HASH_SYMBOL = 220;
    public static readonly HAVING_SYMBOL = 221;
    public static readonly HELP_SYMBOL = 222;
    public static readonly HIGH_PRIORITY_SYMBOL = 223;
    public static readonly HOST_SYMBOL = 224;
    public static readonly HOSTS_SYMBOL = 225;
    public static readonly HOUR_MICROSECOND_SYMBOL = 226;
    public static readonly HOUR_MINUTE_SYMBOL = 227;
    public static readonly HOUR_SECOND_SYMBOL = 228;
    public static readonly HOUR_SYMBOL = 229;
    public static readonly IDENTIFIED_SYMBOL = 230;
    public static readonly IF_SYMBOL = 231;
    public static readonly IGNORE_SYMBOL = 232;
    public static readonly IGNORE_SERVER_IDS_SYMBOL = 233;
    public static readonly IMPORT_SYMBOL = 234;
    public static readonly INDEXES_SYMBOL = 235;
    public static readonly INDEX_SYMBOL = 236;
    public static readonly INFILE_SYMBOL = 237;
    public static readonly INITIAL_SIZE_SYMBOL = 238;
    public static readonly INNER_SYMBOL = 239;
    public static readonly INOUT_SYMBOL = 240;
    public static readonly INSENSITIVE_SYMBOL = 241;
    public static readonly INSERT_SYMBOL = 242;
    public static readonly INSERT_METHOD_SYMBOL = 243;
    public static readonly INSTANCE_SYMBOL = 244;
    public static readonly INSTALL_SYMBOL = 245;
    public static readonly INTEGER_SYMBOL = 246;
    public static readonly INTERVAL_SYMBOL = 247;
    public static readonly INTO_SYMBOL = 248;
    public static readonly INT_SYMBOL = 249;
    public static readonly INVOKER_SYMBOL = 250;
    public static readonly IN_SYMBOL = 251;
    public static readonly IO_AFTER_GTIDS_SYMBOL = 252;
    public static readonly IO_BEFORE_GTIDS_SYMBOL = 253;
    public static readonly IO_THREAD_SYMBOL = 254;
    public static readonly IO_SYMBOL = 255;
    public static readonly IPC_SYMBOL = 256;
    public static readonly IS_SYMBOL = 257;
    public static readonly ISOLATION_SYMBOL = 258;
    public static readonly ISSUER_SYMBOL = 259;
    public static readonly ITERATE_SYMBOL = 260;
    public static readonly JOIN_SYMBOL = 261;
    public static readonly JSON_SYMBOL = 262;
    public static readonly KEYS_SYMBOL = 263;
    public static readonly KEY_BLOCK_SIZE_SYMBOL = 264;
    public static readonly KEY_SYMBOL = 265;
    public static readonly KILL_SYMBOL = 266;
    public static readonly LANGUAGE_SYMBOL = 267;
    public static readonly LAST_SYMBOL = 268;
    public static readonly LEADING_SYMBOL = 269;
    public static readonly LEAVES_SYMBOL = 270;
    public static readonly LEAVE_SYMBOL = 271;
    public static readonly LEFT_SYMBOL = 272;
    public static readonly LESS_SYMBOL = 273;
    public static readonly LEVEL_SYMBOL = 274;
    public static readonly LIKE_SYMBOL = 275;
    public static readonly LIMIT_SYMBOL = 276;
    public static readonly LINEAR_SYMBOL = 277;
    public static readonly LINES_SYMBOL = 278;
    public static readonly LINESTRING_SYMBOL = 279;
    public static readonly LIST_SYMBOL = 280;
    public static readonly LOAD_SYMBOL = 281;
    public static readonly LOCALTIME_SYMBOL = 282;
    public static readonly LOCALTIMESTAMP_SYMBOL = 283;
    public static readonly LOCAL_SYMBOL = 284;
    public static readonly LOCATOR_SYMBOL = 285;
    public static readonly LOCKS_SYMBOL = 286;
    public static readonly LOCK_SYMBOL = 287;
    public static readonly LOGFILE_SYMBOL = 288;
    public static readonly LOGS_SYMBOL = 289;
    public static readonly LONGBLOB_SYMBOL = 290;
    public static readonly LONGTEXT_SYMBOL = 291;
    public static readonly LONG_NUM_SYMBOL = 292;
    public static readonly LONG_SYMBOL = 293;
    public static readonly LOOP_SYMBOL = 294;
    public static readonly LOW_PRIORITY_SYMBOL = 295;
    public static readonly MASTER_AUTO_POSITION_SYMBOL = 296;
    public static readonly MASTER_BIND_SYMBOL = 297;
    public static readonly MASTER_CONNECT_RETRY_SYMBOL = 298;
    public static readonly MASTER_DELAY_SYMBOL = 299;
    public static readonly MASTER_HOST_SYMBOL = 300;
    public static readonly MASTER_LOG_FILE_SYMBOL = 301;
    public static readonly MASTER_LOG_POS_SYMBOL = 302;
    public static readonly MASTER_PASSWORD_SYMBOL = 303;
    public static readonly MASTER_PORT_SYMBOL = 304;
    public static readonly MASTER_RETRY_COUNT_SYMBOL = 305;
    public static readonly MASTER_SERVER_ID_SYMBOL = 306;
    public static readonly MASTER_SSL_CAPATH_SYMBOL = 307;
    public static readonly MASTER_SSL_CA_SYMBOL = 308;
    public static readonly MASTER_SSL_CERT_SYMBOL = 309;
    public static readonly MASTER_SSL_CIPHER_SYMBOL = 310;
    public static readonly MASTER_SSL_CRL_SYMBOL = 311;
    public static readonly MASTER_SSL_CRLPATH_SYMBOL = 312;
    public static readonly MASTER_SSL_KEY_SYMBOL = 313;
    public static readonly MASTER_SSL_SYMBOL = 314;
    public static readonly MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 315;
    public static readonly MASTER_SYMBOL = 316;
    public static readonly MASTER_TLS_VERSION_SYMBOL = 317;
    public static readonly MASTER_USER_SYMBOL = 318;
    public static readonly MASTER_HEARTBEAT_PERIOD_SYMBOL = 319;
    public static readonly MATCH_SYMBOL = 320;
    public static readonly MAX_CONNECTIONS_PER_HOUR_SYMBOL = 321;
    public static readonly MAX_QUERIES_PER_HOUR_SYMBOL = 322;
    public static readonly MAX_ROWS_SYMBOL = 323;
    public static readonly MAX_SIZE_SYMBOL = 324;
    public static readonly MAX_STATEMENT_TIME_SYMBOL = 325;
    public static readonly MAX_SYMBOL = 326;
    public static readonly MAX_UPDATES_PER_HOUR_SYMBOL = 327;
    public static readonly MAX_USER_CONNECTIONS_SYMBOL = 328;
    public static readonly MAXVALUE_SYMBOL = 329;
    public static readonly MEDIUMBLOB_SYMBOL = 330;
    public static readonly MEDIUMINT_SYMBOL = 331;
    public static readonly MEDIUMTEXT_SYMBOL = 332;
    public static readonly MEDIUM_SYMBOL = 333;
    public static readonly MEMORY_SYMBOL = 334;
    public static readonly MERGE_SYMBOL = 335;
    public static readonly MESSAGE_TEXT_SYMBOL = 336;
    public static readonly MICROSECOND_SYMBOL = 337;
    public static readonly MID_SYMBOL = 338;
    public static readonly MIDDLEINT_SYMBOL = 339;
    public static readonly MIGRATE_SYMBOL = 340;
    public static readonly MINUTE_MICROSECOND_SYMBOL = 341;
    public static readonly MINUTE_SECOND_SYMBOL = 342;
    public static readonly MINUTE_SYMBOL = 343;
    public static readonly MIN_ROWS_SYMBOL = 344;
    public static readonly MIN_SYMBOL = 345;
    public static readonly MODE_SYMBOL = 346;
    public static readonly MODIFIES_SYMBOL = 347;
    public static readonly MODIFY_SYMBOL = 348;
    public static readonly MOD_SYMBOL = 349;
    public static readonly MONTH_SYMBOL = 350;
    public static readonly MULTILINESTRING_SYMBOL = 351;
    public static readonly MULTIPOINT_SYMBOL = 352;
    public static readonly MULTIPOLYGON_SYMBOL = 353;
    public static readonly MUTEX_SYMBOL = 354;
    public static readonly MYSQL_ERRNO_SYMBOL = 355;
    public static readonly NAMES_SYMBOL = 356;
    public static readonly NAME_SYMBOL = 357;
    public static readonly NATIONAL_SYMBOL = 358;
    public static readonly NATURAL_SYMBOL = 359;
    public static readonly NCHAR_STRING_SYMBOL = 360;
    public static readonly NCHAR_SYMBOL = 361;
    public static readonly NDB_SYMBOL = 362;
    public static readonly NDBCLUSTER_SYMBOL = 363;
    public static readonly NEG_SYMBOL = 364;
    public static readonly NEVER_SYMBOL = 365;
    public static readonly NEW_SYMBOL = 366;
    public static readonly NEXT_SYMBOL = 367;
    public static readonly NODEGROUP_SYMBOL = 368;
    public static readonly NONE_SYMBOL = 369;
    public static readonly NONBLOCKING_SYMBOL = 370;
    public static readonly NOT_SYMBOL = 371;
    public static readonly NOW_SYMBOL = 372;
    public static readonly NO_SYMBOL = 373;
    public static readonly NO_WAIT_SYMBOL = 374;
    public static readonly NO_WRITE_TO_BINLOG_SYMBOL = 375;
    public static readonly NULL_SYMBOL = 376;
    public static readonly NUMBER_SYMBOL = 377;
    public static readonly NUMERIC_SYMBOL = 378;
    public static readonly NVARCHAR_SYMBOL = 379;
    public static readonly OFFLINE_SYMBOL = 380;
    public static readonly OFFSET_SYMBOL = 381;
    public static readonly OLD_PASSWORD_SYMBOL = 382;
    public static readonly ON_SYMBOL = 383;
    public static readonly ONE_SYMBOL = 384;
    public static readonly ONLINE_SYMBOL = 385;
    public static readonly ONLY_SYMBOL = 386;
    public static readonly OPEN_SYMBOL = 387;
    public static readonly OPTIMIZE_SYMBOL = 388;
    public static readonly OPTIMIZER_COSTS_SYMBOL = 389;
    public static readonly OPTIONS_SYMBOL = 390;
    public static readonly OPTION_SYMBOL = 391;
    public static readonly OPTIONALLY_SYMBOL = 392;
    public static readonly ORDER_SYMBOL = 393;
    public static readonly OR_SYMBOL = 394;
    public static readonly OUTER_SYMBOL = 395;
    public static readonly OUTFILE_SYMBOL = 396;
    public static readonly OUT_SYMBOL = 397;
    public static readonly OWNER_SYMBOL = 398;
    public static readonly PACK_KEYS_SYMBOL = 399;
    public static readonly PAGE_SYMBOL = 400;
    public static readonly PARSER_SYMBOL = 401;
    public static readonly PARTIAL_SYMBOL = 402;
    public static readonly PARTITIONING_SYMBOL = 403;
    public static readonly PARTITIONS_SYMBOL = 404;
    public static readonly PARTITION_SYMBOL = 405;
    public static readonly PASSWORD_SYMBOL = 406;
    public static readonly PHASE_SYMBOL = 407;
    public static readonly PLUGINS_SYMBOL = 408;
    public static readonly PLUGIN_DIR_SYMBOL = 409;
    public static readonly PLUGIN_SYMBOL = 410;
    public static readonly POINT_SYMBOL = 411;
    public static readonly POLYGON_SYMBOL = 412;
    public static readonly PORT_SYMBOL = 413;
    public static readonly POSITION_SYMBOL = 414;
    public static readonly PRECEDES_SYMBOL = 415;
    public static readonly PRECISION_SYMBOL = 416;
    public static readonly PREPARE_SYMBOL = 417;
    public static readonly PRESERVE_SYMBOL = 418;
    public static readonly PREV_SYMBOL = 419;
    public static readonly PRIMARY_SYMBOL = 420;
    public static readonly PRIVILEGES_SYMBOL = 421;
    public static readonly PROCEDURE_SYMBOL = 422;
    public static readonly PROCESS_SYMBOL = 423;
    public static readonly PROCESSLIST_SYMBOL = 424;
    public static readonly PROFILE_SYMBOL = 425;
    public static readonly PROFILES_SYMBOL = 426;
    public static readonly PROXY_SYMBOL = 427;
    public static readonly PURGE_SYMBOL = 428;
    public static readonly QUARTER_SYMBOL = 429;
    public static readonly QUERY_SYMBOL = 430;
    public static readonly QUICK_SYMBOL = 431;
    public static readonly RANGE_SYMBOL = 432;
    public static readonly READS_SYMBOL = 433;
    public static readonly READ_ONLY_SYMBOL = 434;
    public static readonly READ_SYMBOL = 435;
    public static readonly READ_WRITE_SYMBOL = 436;
    public static readonly REAL_SYMBOL = 437;
    public static readonly REBUILD_SYMBOL = 438;
    public static readonly RECOVER_SYMBOL = 439;
    public static readonly REDOFILE_SYMBOL = 440;
    public static readonly REDO_BUFFER_SIZE_SYMBOL = 441;
    public static readonly REDUNDANT_SYMBOL = 442;
    public static readonly REFERENCES_SYMBOL = 443;
    public static readonly REGEXP_SYMBOL = 444;
    public static readonly RELAY_SYMBOL = 445;
    public static readonly RELAYLOG_SYMBOL = 446;
    public static readonly RELAY_LOG_FILE_SYMBOL = 447;
    public static readonly RELAY_LOG_POS_SYMBOL = 448;
    public static readonly RELAY_THREAD_SYMBOL = 449;
    public static readonly RELEASE_SYMBOL = 450;
    public static readonly RELOAD_SYMBOL = 451;
    public static readonly REMOVE_SYMBOL = 452;
    public static readonly RENAME_SYMBOL = 453;
    public static readonly REORGANIZE_SYMBOL = 454;
    public static readonly REPAIR_SYMBOL = 455;
    public static readonly REPEATABLE_SYMBOL = 456;
    public static readonly REPEAT_SYMBOL = 457;
    public static readonly REPLACE_SYMBOL = 458;
    public static readonly REPLICATION_SYMBOL = 459;
    public static readonly REPLICATE_DO_DB_SYMBOL = 460;
    public static readonly REPLICATE_IGNORE_DB_SYMBOL = 461;
    public static readonly REPLICATE_DO_TABLE_SYMBOL = 462;
    public static readonly REPLICATE_IGNORE_TABLE_SYMBOL = 463;
    public static readonly REPLICATE_WILD_DO_TABLE_SYMBOL = 464;
    public static readonly REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 465;
    public static readonly REPLICATE_REWRITE_DB_SYMBOL = 466;
    public static readonly REQUIRE_SYMBOL = 467;
    public static readonly RESET_SYMBOL = 468;
    public static readonly RESIGNAL_SYMBOL = 469;
    public static readonly RESTORE_SYMBOL = 470;
    public static readonly RESTRICT_SYMBOL = 471;
    public static readonly RESUME_SYMBOL = 472;
    public static readonly RETURNED_SQLSTATE_SYMBOL = 473;
    public static readonly RETURNS_SYMBOL = 474;
    public static readonly RETURN_SYMBOL = 475;
    public static readonly REVERSE_SYMBOL = 476;
    public static readonly REVOKE_SYMBOL = 477;
    public static readonly RIGHT_SYMBOL = 478;
    public static readonly RLIKE_SYMBOL = 479;
    public static readonly ROLLBACK_SYMBOL = 480;
    public static readonly ROLLUP_SYMBOL = 481;
    public static readonly ROTATE_SYMBOL = 482;
    public static readonly ROUTINE_SYMBOL = 483;
    public static readonly ROWS_SYMBOL = 484;
    public static readonly ROW_COUNT_SYMBOL = 485;
    public static readonly ROW_FORMAT_SYMBOL = 486;
    public static readonly ROW_SYMBOL = 487;
    public static readonly RTREE_SYMBOL = 488;
    public static readonly SAVEPOINT_SYMBOL = 489;
    public static readonly SCHEDULE_SYMBOL = 490;
    public static readonly SCHEMA_SYMBOL = 491;
    public static readonly SCHEMA_NAME_SYMBOL = 492;
    public static readonly SCHEMAS_SYMBOL = 493;
    public static readonly SECOND_MICROSECOND_SYMBOL = 494;
    public static readonly SECOND_SYMBOL = 495;
    public static readonly SECURITY_SYMBOL = 496;
    public static readonly SELECT_SYMBOL = 497;
    public static readonly SENSITIVE_SYMBOL = 498;
    public static readonly SEPARATOR_SYMBOL = 499;
    public static readonly SERIALIZABLE_SYMBOL = 500;
    public static readonly SERIAL_SYMBOL = 501;
    public static readonly SESSION_SYMBOL = 502;
    public static readonly SERVER_SYMBOL = 503;
    public static readonly SERVER_OPTIONS_SYMBOL = 504;
    public static readonly SESSION_USER_SYMBOL = 505;
    public static readonly SET_SYMBOL = 506;
    public static readonly SET_VAR_SYMBOL = 507;
    public static readonly SHARE_SYMBOL = 508;
    public static readonly SHOW_SYMBOL = 509;
    public static readonly SHUTDOWN_SYMBOL = 510;
    public static readonly SIGNAL_SYMBOL = 511;
    public static readonly SIGNED_SYMBOL = 512;
    public static readonly SIMPLE_SYMBOL = 513;
    public static readonly SLAVE_SYMBOL = 514;
    public static readonly SLOW_SYMBOL = 515;
    public static readonly SMALLINT_SYMBOL = 516;
    public static readonly SNAPSHOT_SYMBOL = 517;
    public static readonly SOME_SYMBOL = 518;
    public static readonly SOCKET_SYMBOL = 519;
    public static readonly SONAME_SYMBOL = 520;
    public static readonly SOUNDS_SYMBOL = 521;
    public static readonly SOURCE_SYMBOL = 522;
    public static readonly SPATIAL_SYMBOL = 523;
    public static readonly SPECIFIC_SYMBOL = 524;
    public static readonly SQLEXCEPTION_SYMBOL = 525;
    public static readonly SQLSTATE_SYMBOL = 526;
    public static readonly SQLWARNING_SYMBOL = 527;
    public static readonly SQL_AFTER_GTIDS_SYMBOL = 528;
    public static readonly SQL_AFTER_MTS_GAPS_SYMBOL = 529;
    public static readonly SQL_BEFORE_GTIDS_SYMBOL = 530;
    public static readonly SQL_BIG_RESULT_SYMBOL = 531;
    public static readonly SQL_BUFFER_RESULT_SYMBOL = 532;
    public static readonly SQL_CACHE_SYMBOL = 533;
    public static readonly SQL_CALC_FOUND_ROWS_SYMBOL = 534;
    public static readonly SQL_NO_CACHE_SYMBOL = 535;
    public static readonly SQL_SMALL_RESULT_SYMBOL = 536;
    public static readonly SQL_SYMBOL = 537;
    public static readonly SQL_THREAD_SYMBOL = 538;
    public static readonly SSL_SYMBOL = 539;
    public static readonly STACKED_SYMBOL = 540;
    public static readonly STARTING_SYMBOL = 541;
    public static readonly STARTS_SYMBOL = 542;
    public static readonly START_SYMBOL = 543;
    public static readonly STATS_AUTO_RECALC_SYMBOL = 544;
    public static readonly STATS_PERSISTENT_SYMBOL = 545;
    public static readonly STATS_SAMPLE_PAGES_SYMBOL = 546;
    public static readonly STATUS_SYMBOL = 547;
    public static readonly STDDEV_SAMP_SYMBOL = 548;
    public static readonly STDDEV_SYMBOL = 549;
    public static readonly STDDEV_POP_SYMBOL = 550;
    public static readonly STD_SYMBOL = 551;
    public static readonly STOP_SYMBOL = 552;
    public static readonly STORAGE_SYMBOL = 553;
    public static readonly STORED_SYMBOL = 554;
    public static readonly STRAIGHT_JOIN_SYMBOL = 555;
    public static readonly STRING_SYMBOL = 556;
    public static readonly SUBCLASS_ORIGIN_SYMBOL = 557;
    public static readonly SUBDATE_SYMBOL = 558;
    public static readonly SUBJECT_SYMBOL = 559;
    public static readonly SUBPARTITIONS_SYMBOL = 560;
    public static readonly SUBPARTITION_SYMBOL = 561;
    public static readonly SUBSTR_SYMBOL = 562;
    public static readonly SUBSTRING_SYMBOL = 563;
    public static readonly SUM_SYMBOL = 564;
    public static readonly SUPER_SYMBOL = 565;
    public static readonly SUSPEND_SYMBOL = 566;
    public static readonly SWAPS_SYMBOL = 567;
    public static readonly SWITCHES_SYMBOL = 568;
    public static readonly SYSDATE_SYMBOL = 569;
    public static readonly SYSTEM_USER_SYMBOL = 570;
    public static readonly TABLES_SYMBOL = 571;
    public static readonly TABLESPACE_SYMBOL = 572;
    public static readonly TABLE_REF_PRIORITY_SYMBOL = 573;
    public static readonly TABLE_SYMBOL = 574;
    public static readonly TABLE_CHECKSUM_SYMBOL = 575;
    public static readonly TABLE_NAME_SYMBOL = 576;
    public static readonly TEMPORARY_SYMBOL = 577;
    public static readonly TEMPTABLE_SYMBOL = 578;
    public static readonly TERMINATED_SYMBOL = 579;
    public static readonly TEXT_SYMBOL = 580;
    public static readonly THAN_SYMBOL = 581;
    public static readonly THEN_SYMBOL = 582;
    public static readonly TIMESTAMP_SYMBOL = 583;
    public static readonly TIMESTAMP_ADD_SYMBOL = 584;
    public static readonly TIMESTAMP_DIFF_SYMBOL = 585;
    public static readonly TIME_SYMBOL = 586;
    public static readonly TINYBLOB_SYMBOL = 587;
    public static readonly TINYINT_SYMBOL = 588;
    public static readonly TINYTEXT_SYMBOL = 589;
    public static readonly TO_SYMBOL = 590;
    public static readonly TRAILING_SYMBOL = 591;
    public static readonly TRANSACTION_SYMBOL = 592;
    public static readonly TRIGGERS_SYMBOL = 593;
    public static readonly TRIGGER_SYMBOL = 594;
    public static readonly TRIM_SYMBOL = 595;
    public static readonly TRUE_SYMBOL = 596;
    public static readonly TRUNCATE_SYMBOL = 597;
    public static readonly TYPES_SYMBOL = 598;
    public static readonly TYPE_SYMBOL = 599;
    public static readonly UDF_RETURNS_SYMBOL = 600;
    public static readonly UNCOMMITTED_SYMBOL = 601;
    public static readonly UNDEFINED_SYMBOL = 602;
    public static readonly UNDOFILE_SYMBOL = 603;
    public static readonly UNDO_BUFFER_SIZE_SYMBOL = 604;
    public static readonly UNDO_SYMBOL = 605;
    public static readonly UNICODE_SYMBOL = 606;
    public static readonly UNINSTALL_SYMBOL = 607;
    public static readonly UNION_SYMBOL = 608;
    public static readonly UNIQUE_SYMBOL = 609;
    public static readonly UNKNOWN_SYMBOL = 610;
    public static readonly UNLOCK_SYMBOL = 611;
    public static readonly UNSIGNED_SYMBOL = 612;
    public static readonly UNTIL_SYMBOL = 613;
    public static readonly UPDATE_SYMBOL = 614;
    public static readonly UPGRADE_SYMBOL = 615;
    public static readonly USAGE_SYMBOL = 616;
    public static readonly USER_RESOURCES_SYMBOL = 617;
    public static readonly USER_SYMBOL = 618;
    public static readonly USE_FRM_SYMBOL = 619;
    public static readonly USE_SYMBOL = 620;
    public static readonly USING_SYMBOL = 621;
    public static readonly UTC_DATE_SYMBOL = 622;
    public static readonly UTC_TIMESTAMP_SYMBOL = 623;
    public static readonly UTC_TIME_SYMBOL = 624;
    public static readonly VALIDATION_SYMBOL = 625;
    public static readonly VALUES_SYMBOL = 626;
    public static readonly VALUE_SYMBOL = 627;
    public static readonly VARBINARY_SYMBOL = 628;
    public static readonly VARCHAR_SYMBOL = 629;
    public static readonly VARCHARACTER_SYMBOL = 630;
    public static readonly VARIABLES_SYMBOL = 631;
    public static readonly VARIANCE_SYMBOL = 632;
    public static readonly VARYING_SYMBOL = 633;
    public static readonly VAR_POP_SYMBOL = 634;
    public static readonly VAR_SAMP_SYMBOL = 635;
    public static readonly VIEW_SYMBOL = 636;
    public static readonly VIRTUAL_SYMBOL = 637;
    public static readonly WAIT_SYMBOL = 638;
    public static readonly WARNINGS_SYMBOL = 639;
    public static readonly WEEK_SYMBOL = 640;
    public static readonly WEIGHT_STRING_SYMBOL = 641;
    public static readonly WHEN_SYMBOL = 642;
    public static readonly WHERE_SYMBOL = 643;
    public static readonly WHILE_SYMBOL = 644;
    public static readonly WITH_SYMBOL = 645;
    public static readonly WITHOUT_SYMBOL = 646;
    public static readonly WORK_SYMBOL = 647;
    public static readonly WRAPPER_SYMBOL = 648;
    public static readonly WRITE_SYMBOL = 649;
    public static readonly X509_SYMBOL = 650;
    public static readonly XA_SYMBOL = 651;
    public static readonly XID_SYMBOL = 652;
    public static readonly XML_SYMBOL = 653;
    public static readonly XOR_SYMBOL = 654;
    public static readonly YEAR_MONTH_SYMBOL = 655;
    public static readonly YEAR_SYMBOL = 656;
    public static readonly ZEROFILL_SYMBOL = 657;
    public static readonly PERSIST_SYMBOL = 658;
    public static readonly ROLE_SYMBOL = 659;
    public static readonly ADMIN_SYMBOL = 660;
    public static readonly INVISIBLE_SYMBOL = 661;
    public static readonly VISIBLE_SYMBOL = 662;
    public static readonly EXCEPT_SYMBOL = 663;
    public static readonly COMPONENT_SYMBOL = 664;
    public static readonly RECURSIVE_SYMBOL = 665;
    public static readonly JSON_OBJECTAGG_SYMBOL = 666;
    public static readonly JSON_ARRAYAGG_SYMBOL = 667;
    public static readonly OF_SYMBOL = 668;
    public static readonly SKIP_SYMBOL = 669;
    public static readonly LOCKED_SYMBOL = 670;
    public static readonly NOWAIT_SYMBOL = 671;
    public static readonly GROUPING_SYMBOL = 672;
    public static readonly PERSIST_ONLY_SYMBOL = 673;
    public static readonly HISTOGRAM_SYMBOL = 674;
    public static readonly BUCKETS_SYMBOL = 675;
    public static readonly REMOTE_SYMBOL = 676;
    public static readonly CLONE_SYMBOL = 677;
    public static readonly CUME_DIST_SYMBOL = 678;
    public static readonly DENSE_RANK_SYMBOL = 679;
    public static readonly EXCLUDE_SYMBOL = 680;
    public static readonly FIRST_VALUE_SYMBOL = 681;
    public static readonly FOLLOWING_SYMBOL = 682;
    public static readonly GROUPS_SYMBOL = 683;
    public static readonly LAG_SYMBOL = 684;
    public static readonly LAST_VALUE_SYMBOL = 685;
    public static readonly LEAD_SYMBOL = 686;
    public static readonly NTH_VALUE_SYMBOL = 687;
    public static readonly NTILE_SYMBOL = 688;
    public static readonly NULLS_SYMBOL = 689;
    public static readonly OTHERS_SYMBOL = 690;
    public static readonly OVER_SYMBOL = 691;
    public static readonly PERCENT_RANK_SYMBOL = 692;
    public static readonly PRECEDING_SYMBOL = 693;
    public static readonly RANK_SYMBOL = 694;
    public static readonly RESPECT_SYMBOL = 695;
    public static readonly ROW_NUMBER_SYMBOL = 696;
    public static readonly TIES_SYMBOL = 697;
    public static readonly UNBOUNDED_SYMBOL = 698;
    public static readonly WINDOW_SYMBOL = 699;
    public static readonly EMPTY_SYMBOL = 700;
    public static readonly JSON_TABLE_SYMBOL = 701;
    public static readonly NESTED_SYMBOL = 702;
    public static readonly ORDINALITY_SYMBOL = 703;
    public static readonly PATH_SYMBOL = 704;
    public static readonly HISTORY_SYMBOL = 705;
    public static readonly REUSE_SYMBOL = 706;
    public static readonly SRID_SYMBOL = 707;
    public static readonly THREAD_PRIORITY_SYMBOL = 708;
    public static readonly RESOURCE_SYMBOL = 709;
    public static readonly SYSTEM_SYMBOL = 710;
    public static readonly VCPU_SYMBOL = 711;
    public static readonly MASTER_PUBLIC_KEY_PATH_SYMBOL = 712;
    public static readonly GET_MASTER_PUBLIC_KEY_SYMBOL = 713;
    public static readonly RESTART_SYMBOL = 714;
    public static readonly DEFINITION_SYMBOL = 715;
    public static readonly DESCRIPTION_SYMBOL = 716;
    public static readonly ORGANIZATION_SYMBOL = 717;
    public static readonly REFERENCE_SYMBOL = 718;
    public static readonly OPTIONAL_SYMBOL = 719;
    public static readonly SECONDARY_SYMBOL = 720;
    public static readonly SECONDARY_ENGINE_SYMBOL = 721;
    public static readonly SECONDARY_LOAD_SYMBOL = 722;
    public static readonly SECONDARY_UNLOAD_SYMBOL = 723;
    public static readonly ACTIVE_SYMBOL = 724;
    public static readonly INACTIVE_SYMBOL = 725;
    public static readonly LATERAL_SYMBOL = 726;
    public static readonly RETAIN_SYMBOL = 727;
    public static readonly OLD_SYMBOL = 728;
    public static readonly NETWORK_NAMESPACE_SYMBOL = 729;
    public static readonly ENFORCED_SYMBOL = 730;
    public static readonly ARRAY_SYMBOL = 731;
    public static readonly OJ_SYMBOL = 732;
    public static readonly MEMBER_SYMBOL = 733;
    public static readonly RANDOM_SYMBOL = 734;
    public static readonly MASTER_COMPRESSION_ALGORITHM_SYMBOL = 735;
    public static readonly MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 736;
    public static readonly PRIVILEGE_CHECKS_USER_SYMBOL = 737;
    public static readonly MASTER_TLS_CIPHERSUITES_SYMBOL = 738;
    public static readonly REQUIRE_ROW_FORMAT_SYMBOL = 739;
    public static readonly PASSWORD_LOCK_TIME_SYMBOL = 740;
    public static readonly FAILED_LOGIN_ATTEMPTS_SYMBOL = 741;
    public static readonly REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL = 742;
    public static readonly STREAM_SYMBOL = 743;
    public static readonly OFF_SYMBOL = 744;
    public static readonly NOT2_SYMBOL = 745;
    public static readonly CONCAT_PIPES_SYMBOL = 746;
    public static readonly INT_NUMBER = 747;
    public static readonly LONG_NUMBER = 748;
    public static readonly ULONGLONG_NUMBER = 749;
    public static readonly EQUAL_OPERATOR = 750;
    public static readonly ASSIGN_OPERATOR = 751;
    public static readonly NULL_SAFE_EQUAL_OPERATOR = 752;
    public static readonly GREATER_OR_EQUAL_OPERATOR = 753;
    public static readonly GREATER_THAN_OPERATOR = 754;
    public static readonly LESS_OR_EQUAL_OPERATOR = 755;
    public static readonly LESS_THAN_OPERATOR = 756;
    public static readonly NOT_EQUAL_OPERATOR = 757;
    public static readonly PLUS_OPERATOR = 758;
    public static readonly MINUS_OPERATOR = 759;
    public static readonly MULT_OPERATOR = 760;
    public static readonly DIV_OPERATOR = 761;
    public static readonly MOD_OPERATOR = 762;
    public static readonly LOGICAL_NOT_OPERATOR = 763;
    public static readonly BITWISE_NOT_OPERATOR = 764;
    public static readonly SHIFT_LEFT_OPERATOR = 765;
    public static readonly SHIFT_RIGHT_OPERATOR = 766;
    public static readonly LOGICAL_AND_OPERATOR = 767;
    public static readonly BITWISE_AND_OPERATOR = 768;
    public static readonly BITWISE_XOR_OPERATOR = 769;
    public static readonly LOGICAL_OR_OPERATOR = 770;
    public static readonly BITWISE_OR_OPERATOR = 771;
    public static readonly DOT_SYMBOL = 772;
    public static readonly COMMA_SYMBOL = 773;
    public static readonly SEMICOLON_SYMBOL = 774;
    public static readonly COLON_SYMBOL = 775;
    public static readonly OPEN_PAR_SYMBOL = 776;
    public static readonly CLOSE_PAR_SYMBOL = 777;
    public static readonly OPEN_CURLY_SYMBOL = 778;
    public static readonly CLOSE_CURLY_SYMBOL = 779;
    public static readonly UNDERLINE_SYMBOL = 780;
    public static readonly JSON_SEPARATOR_SYMBOL = 781;
    public static readonly JSON_UNQUOTED_SEPARATOR_SYMBOL = 782;
    public static readonly AT_SIGN_SYMBOL = 783;
    public static readonly AT_TEXT_SUFFIX = 784;
    public static readonly AT_AT_SIGN_SYMBOL = 785;
    public static readonly NULL2_SYMBOL = 786;
    public static readonly PARAM_MARKER = 787;
    public static readonly HEX_NUMBER = 788;
    public static readonly BIN_NUMBER = 789;
    public static readonly DECIMAL_NUMBER = 790;
    public static readonly FLOAT_NUMBER = 791;
    public static readonly TIMESTAMPADD_SYMBOL = 792;
    public static readonly TIMESTAMPDIFF_SYMBOL = 793;
    public static readonly RETURNING_SYMBOL = 794;
    public static readonly JSON_VALUE_SYMBOL = 795;
    public static readonly TLS_SYMBOL = 796;
    public static readonly ATTRIBUTE_SYMBOL = 797;
    public static readonly ENGINE_ATTRIBUTE_SYMBOL = 798;
    public static readonly SECONDARY_ENGINE_ATTRIBUTE_SYMBOL = 799;
    public static readonly SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL = 800;
    public static readonly ZONE_SYMBOL = 801;
    public static readonly GRAMMAR_SELECTOR_DERIVED_EXPR = 802;
    public static readonly REPLICA_SYMBOL = 803;
    public static readonly REPLICAS_SYMBOL = 804;
    public static readonly ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL = 805;
    public static readonly GET_SOURCE_PUBLIC_KEY_SYMBOL = 806;
    public static readonly SOURCE_AUTO_POSITION_SYMBOL = 807;
    public static readonly SOURCE_BIND_SYMBOL = 808;
    public static readonly SOURCE_COMPRESSION_ALGORITHM_SYMBOL = 809;
    public static readonly SOURCE_CONNECT_RETRY_SYMBOL = 810;
    public static readonly SOURCE_DELAY_SYMBOL = 811;
    public static readonly SOURCE_HEARTBEAT_PERIOD_SYMBOL = 812;
    public static readonly SOURCE_HOST_SYMBOL = 813;
    public static readonly SOURCE_LOG_FILE_SYMBOL = 814;
    public static readonly SOURCE_LOG_POS_SYMBOL = 815;
    public static readonly SOURCE_PASSWORD_SYMBOL = 816;
    public static readonly SOURCE_PORT_SYMBOL = 817;
    public static readonly SOURCE_PUBLIC_KEY_PATH_SYMBOL = 818;
    public static readonly SOURCE_RETRY_COUNT_SYMBOL = 819;
    public static readonly SOURCE_SSL_SYMBOL = 820;
    public static readonly SOURCE_SSL_CA_SYMBOL = 821;
    public static readonly SOURCE_SSL_CAPATH_SYMBOL = 822;
    public static readonly SOURCE_SSL_CERT_SYMBOL = 823;
    public static readonly SOURCE_SSL_CIPHER_SYMBOL = 824;
    public static readonly SOURCE_SSL_CRL_SYMBOL = 825;
    public static readonly SOURCE_SSL_CRLPATH_SYMBOL = 826;
    public static readonly SOURCE_SSL_KEY_SYMBOL = 827;
    public static readonly SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL = 828;
    public static readonly SOURCE_TLS_CIPHERSUITES_SYMBOL = 829;
    public static readonly SOURCE_TLS_VERSION_SYMBOL = 830;
    public static readonly SOURCE_USER_SYMBOL = 831;
    public static readonly SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL = 832;
    public static readonly ST_COLLECT_SYMBOL = 833;
    public static readonly KEYRING_SYMBOL = 834;
    public static readonly AUTHENTICATION_SYMBOL = 835;
    public static readonly FACTOR_SYMBOL = 836;
    public static readonly FINISH_SYMBOL = 837;
    public static readonly INITIATE_SYMBOL = 838;
    public static readonly REGISTRATION_SYMBOL = 839;
    public static readonly UNREGISTER_SYMBOL = 840;
    public static readonly INITIAL_SYMBOL = 841;
    public static readonly CHALLENGE_RESPONSE_SYMBOL = 842;
    public static readonly GTID_ONLY_SYMBOL = 843;
    public static readonly INTERSECT_SYMBOL = 844;
    public static readonly WHITESPACE = 845;
    public static readonly INVALID_INPUT = 846;
    public static readonly UNDERSCORE_CHARSET = 847;
    public static readonly IDENTIFIER = 848;
    public static readonly NCHAR_TEXT = 849;
    public static readonly BACK_TICK_QUOTED_ID = 850;
    public static readonly DOUBLE_QUOTED_TEXT = 851;
    public static readonly SINGLE_QUOTED_TEXT = 852;
    public static readonly VERSION_COMMENT_START = 853;
    public static readonly MYSQL_COMMENT_START = 854;
    public static readonly VERSION_COMMENT_END = 855;
    public static readonly BLOCK_COMMENT = 856;
    public static readonly INVALID_BLOCK_COMMENT = 857;
    public static readonly POUND_COMMENT = 858;
    public static readonly DASHDASH_COMMENT = 859;
    public static readonly NOT_EQUAL2_OPERATOR = 860;
    public static readonly EOF = Token.EOF;
    public static readonly RULE_query = 0;
    public static readonly RULE_simpleStatement = 1;
    public static readonly RULE_alterStatement = 2;
    public static readonly RULE_alterDatabase = 3;
    public static readonly RULE_alterDatabaseOption = 4;
    public static readonly RULE_alterEvent = 5;
    public static readonly RULE_alterLogfileGroup = 6;
    public static readonly RULE_alterLogfileGroupOptions = 7;
    public static readonly RULE_alterLogfileGroupOption = 8;
    public static readonly RULE_alterServer = 9;
    public static readonly RULE_alterTable = 10;
    public static readonly RULE_alterTableActions = 11;
    public static readonly RULE_alterCommandList = 12;
    public static readonly RULE_alterCommandsModifierList = 13;
    public static readonly RULE_standaloneAlterCommands = 14;
    public static readonly RULE_alterPartition = 15;
    public static readonly RULE_alterList = 16;
    public static readonly RULE_alterCommandsModifier = 17;
    public static readonly RULE_alterListItem = 18;
    public static readonly RULE_place = 19;
    public static readonly RULE_restrict = 20;
    public static readonly RULE_alterOrderList = 21;
    public static readonly RULE_alterAlgorithmOption = 22;
    public static readonly RULE_alterLockOption = 23;
    public static readonly RULE_indexLockAndAlgorithm = 24;
    public static readonly RULE_withValidation = 25;
    public static readonly RULE_removePartitioning = 26;
    public static readonly RULE_allOrPartitionNameList = 27;
    public static readonly RULE_alterTablespace = 28;
    public static readonly RULE_alterUndoTablespace = 29;
    public static readonly RULE_undoTableSpaceOptions = 30;
    public static readonly RULE_undoTableSpaceOption = 31;
    public static readonly RULE_alterTablespaceOptions = 32;
    public static readonly RULE_alterTablespaceOption = 33;
    public static readonly RULE_changeTablespaceOption = 34;
    public static readonly RULE_alterView = 35;
    public static readonly RULE_viewTail = 36;
    public static readonly RULE_viewQueryBlock = 37;
    public static readonly RULE_viewCheckOption = 38;
    public static readonly RULE_alterInstanceStatement = 39;
    public static readonly RULE_createStatement = 40;
    public static readonly RULE_createDatabase = 41;
    public static readonly RULE_createDatabaseOption = 42;
    public static readonly RULE_createTable = 43;
    public static readonly RULE_tableElementList = 44;
    public static readonly RULE_tableElement = 45;
    public static readonly RULE_duplicateAsQe = 46;
    public static readonly RULE_asCreateQueryExpression = 47;
    public static readonly RULE_queryExpressionOrParens = 48;
    public static readonly RULE_queryExpressionWithOptLockingClauses = 49;
    public static readonly RULE_createRoutine = 50;
    public static readonly RULE_createProcedure = 51;
    public static readonly RULE_createFunction = 52;
    public static readonly RULE_createUdf = 53;
    public static readonly RULE_routineCreateOption = 54;
    public static readonly RULE_routineAlterOptions = 55;
    public static readonly RULE_routineOption = 56;
    public static readonly RULE_createIndex = 57;
    public static readonly RULE_indexNameAndType = 58;
    public static readonly RULE_createIndexTarget = 59;
    public static readonly RULE_createLogfileGroup = 60;
    public static readonly RULE_logfileGroupOptions = 61;
    public static readonly RULE_logfileGroupOption = 62;
    public static readonly RULE_createServer = 63;
    public static readonly RULE_serverOptions = 64;
    public static readonly RULE_serverOption = 65;
    public static readonly RULE_createTablespace = 66;
    public static readonly RULE_createUndoTablespace = 67;
    public static readonly RULE_tsDataFileName = 68;
    public static readonly RULE_tsDataFile = 69;
    public static readonly RULE_tablespaceOptions = 70;
    public static readonly RULE_tablespaceOption = 71;
    public static readonly RULE_tsOptionInitialSize = 72;
    public static readonly RULE_tsOptionUndoRedoBufferSize = 73;
    public static readonly RULE_tsOptionAutoextendSize = 74;
    public static readonly RULE_tsOptionMaxSize = 75;
    public static readonly RULE_tsOptionExtentSize = 76;
    public static readonly RULE_tsOptionNodegroup = 77;
    public static readonly RULE_tsOptionEngine = 78;
    public static readonly RULE_tsOptionWait = 79;
    public static readonly RULE_tsOptionComment = 80;
    public static readonly RULE_tsOptionFileblockSize = 81;
    public static readonly RULE_tsOptionEncryption = 82;
    public static readonly RULE_tsOptionEngineAttribute = 83;
    public static readonly RULE_createView = 84;
    public static readonly RULE_viewReplaceOrAlgorithm = 85;
    public static readonly RULE_viewAlgorithm = 86;
    public static readonly RULE_viewSuid = 87;
    public static readonly RULE_createTrigger = 88;
    public static readonly RULE_triggerFollowsPrecedesClause = 89;
    public static readonly RULE_createEvent = 90;
    public static readonly RULE_createRole = 91;
    public static readonly RULE_createSpatialReference = 92;
    public static readonly RULE_srsAttribute = 93;
    public static readonly RULE_dropStatement = 94;
    public static readonly RULE_dropDatabase = 95;
    public static readonly RULE_dropEvent = 96;
    public static readonly RULE_dropFunction = 97;
    public static readonly RULE_dropProcedure = 98;
    public static readonly RULE_dropIndex = 99;
    public static readonly RULE_dropLogfileGroup = 100;
    public static readonly RULE_dropLogfileGroupOption = 101;
    public static readonly RULE_dropServer = 102;
    public static readonly RULE_dropTable = 103;
    public static readonly RULE_dropTableSpace = 104;
    public static readonly RULE_dropTrigger = 105;
    public static readonly RULE_dropView = 106;
    public static readonly RULE_dropRole = 107;
    public static readonly RULE_dropSpatialReference = 108;
    public static readonly RULE_dropUndoTablespace = 109;
    public static readonly RULE_renameTableStatement = 110;
    public static readonly RULE_renamePair = 111;
    public static readonly RULE_truncateTableStatement = 112;
    public static readonly RULE_importStatement = 113;
    public static readonly RULE_callStatement = 114;
    public static readonly RULE_deleteStatement = 115;
    public static readonly RULE_partitionDelete = 116;
    public static readonly RULE_deleteStatementOption = 117;
    public static readonly RULE_doStatement = 118;
    public static readonly RULE_handlerStatement = 119;
    public static readonly RULE_handlerReadOrScan = 120;
    public static readonly RULE_insertStatement = 121;
    public static readonly RULE_insertLockOption = 122;
    public static readonly RULE_insertFromConstructor = 123;
    public static readonly RULE_fields = 124;
    public static readonly RULE_insertValues = 125;
    public static readonly RULE_insertQueryExpression = 126;
    public static readonly RULE_valueList = 127;
    public static readonly RULE_values = 128;
    public static readonly RULE_valuesReference = 129;
    public static readonly RULE_insertUpdateList = 130;
    public static readonly RULE_loadStatement = 131;
    public static readonly RULE_dataOrXml = 132;
    public static readonly RULE_xmlRowsIdentifiedBy = 133;
    public static readonly RULE_loadDataFileTail = 134;
    public static readonly RULE_loadDataFileTargetList = 135;
    public static readonly RULE_fieldOrVariableList = 136;
    public static readonly RULE_replaceStatement = 137;
    public static readonly RULE_selectStatement = 138;
    public static readonly RULE_selectStatementWithInto = 139;
    public static readonly RULE_queryExpression = 140;
    public static readonly RULE_queryExpressionBody = 141;
    public static readonly RULE_queryExpressionParens = 142;
    public static readonly RULE_queryPrimary = 143;
    public static readonly RULE_querySpecification = 144;
    public static readonly RULE_subquery = 145;
    public static readonly RULE_querySpecOption = 146;
    public static readonly RULE_limitClause = 147;
    public static readonly RULE_simpleLimitClause = 148;
    public static readonly RULE_limitOptions = 149;
    public static readonly RULE_limitOption = 150;
    public static readonly RULE_intoClause = 151;
    public static readonly RULE_procedureAnalyseClause = 152;
    public static readonly RULE_havingClause = 153;
    public static readonly RULE_windowClause = 154;
    public static readonly RULE_windowDefinition = 155;
    public static readonly RULE_windowSpec = 156;
    public static readonly RULE_windowSpecDetails = 157;
    public static readonly RULE_windowFrameClause = 158;
    public static readonly RULE_windowFrameUnits = 159;
    public static readonly RULE_windowFrameExtent = 160;
    public static readonly RULE_windowFrameStart = 161;
    public static readonly RULE_windowFrameBetween = 162;
    public static readonly RULE_windowFrameBound = 163;
    public static readonly RULE_windowFrameExclusion = 164;
    public static readonly RULE_withClause = 165;
    public static readonly RULE_commonTableExpression = 166;
    public static readonly RULE_groupByClause = 167;
    public static readonly RULE_olapOption = 168;
    public static readonly RULE_orderClause = 169;
    public static readonly RULE_direction = 170;
    public static readonly RULE_fromClause = 171;
    public static readonly RULE_tableReferenceList = 172;
    public static readonly RULE_tableValueConstructor = 173;
    public static readonly RULE_explicitTable = 174;
    public static readonly RULE_rowValueExplicit = 175;
    public static readonly RULE_selectOption = 176;
    public static readonly RULE_lockingClauseList = 177;
    public static readonly RULE_lockingClause = 178;
    public static readonly RULE_lockStrengh = 179;
    public static readonly RULE_lockedRowAction = 180;
    public static readonly RULE_selectItemList = 181;
    public static readonly RULE_selectItem = 182;
    public static readonly RULE_selectAlias = 183;
    public static readonly RULE_whereClause = 184;
    public static readonly RULE_tableReference = 185;
    public static readonly RULE_escapedTableReference = 186;
    public static readonly RULE_joinedTable = 187;
    public static readonly RULE_naturalJoinType = 188;
    public static readonly RULE_innerJoinType = 189;
    public static readonly RULE_outerJoinType = 190;
    public static readonly RULE_tableFactor = 191;
    public static readonly RULE_singleTable = 192;
    public static readonly RULE_singleTableParens = 193;
    public static readonly RULE_derivedTable = 194;
    public static readonly RULE_tableReferenceListParens = 195;
    public static readonly RULE_tableFunction = 196;
    public static readonly RULE_columnsClause = 197;
    public static readonly RULE_jtColumn = 198;
    public static readonly RULE_onEmptyOrError = 199;
    public static readonly RULE_onEmptyOrErrorJsonTable = 200;
    public static readonly RULE_onEmpty = 201;
    public static readonly RULE_onError = 202;
    public static readonly RULE_jsonOnResponse = 203;
    public static readonly RULE_unionOption = 204;
    public static readonly RULE_tableAlias = 205;
    public static readonly RULE_indexHintList = 206;
    public static readonly RULE_indexHint = 207;
    public static readonly RULE_indexHintType = 208;
    public static readonly RULE_keyOrIndex = 209;
    public static readonly RULE_constraintKeyType = 210;
    public static readonly RULE_indexHintClause = 211;
    public static readonly RULE_indexList = 212;
    public static readonly RULE_indexListElement = 213;
    public static readonly RULE_updateStatement = 214;
    public static readonly RULE_transactionOrLockingStatement = 215;
    public static readonly RULE_transactionStatement = 216;
    public static readonly RULE_beginWork = 217;
    public static readonly RULE_startTransactionOptionList = 218;
    public static readonly RULE_savepointStatement = 219;
    public static readonly RULE_lockStatement = 220;
    public static readonly RULE_lockItem = 221;
    public static readonly RULE_lockOption = 222;
    public static readonly RULE_xaStatement = 223;
    public static readonly RULE_xaConvert = 224;
    public static readonly RULE_xid = 225;
    public static readonly RULE_replicationStatement = 226;
    public static readonly RULE_resetOption = 227;
    public static readonly RULE_sourceResetOptions = 228;
    public static readonly RULE_replicationLoad = 229;
    public static readonly RULE_changeReplicationSource = 230;
    public static readonly RULE_changeSource = 231;
    public static readonly RULE_sourceDefinitions = 232;
    public static readonly RULE_sourceDefinition = 233;
    public static readonly RULE_changeReplicationSourceAutoPosition = 234;
    public static readonly RULE_changeReplicationSourceHost = 235;
    public static readonly RULE_changeReplicationSourceBind = 236;
    public static readonly RULE_changeReplicationSourceUser = 237;
    public static readonly RULE_changeReplicationSourcePassword = 238;
    public static readonly RULE_changeReplicationSourcePort = 239;
    public static readonly RULE_changeReplicationSourceConnectRetry = 240;
    public static readonly RULE_changeReplicationSourceRetryCount = 241;
    public static readonly RULE_changeReplicationSourceDelay = 242;
    public static readonly RULE_changeReplicationSourceSSL = 243;
    public static readonly RULE_changeReplicationSourceSSLCA = 244;
    public static readonly RULE_changeReplicationSourceSSLCApath = 245;
    public static readonly RULE_changeReplicationSourceSSLCipher = 246;
    public static readonly RULE_changeReplicationSourceSSLCLR = 247;
    public static readonly RULE_changeReplicationSourceSSLCLRpath = 248;
    public static readonly RULE_changeReplicationSourceSSLKey = 249;
    public static readonly RULE_changeReplicationSourceSSLVerifyServerCert = 250;
    public static readonly RULE_changeReplicationSourceTLSVersion = 251;
    public static readonly RULE_changeReplicationSourceTLSCiphersuites = 252;
    public static readonly RULE_changeReplicationSourceSSLCert = 253;
    public static readonly RULE_changeReplicationSourcePublicKey = 254;
    public static readonly RULE_changeReplicationSourceGetSourcePublicKey = 255;
    public static readonly RULE_changeReplicationSourceHeartbeatPeriod = 256;
    public static readonly RULE_changeReplicationSourceCompressionAlgorithm = 257;
    public static readonly RULE_changeReplicationSourceZstdCompressionLevel = 258;
    public static readonly RULE_privilegeCheckDef = 259;
    public static readonly RULE_tablePrimaryKeyCheckDef = 260;
    public static readonly RULE_assignGtidsToAnonymousTransactionsDefinition = 261;
    public static readonly RULE_sourceTlsCiphersuitesDef = 262;
    public static readonly RULE_sourceFileDef = 263;
    public static readonly RULE_sourceLogFile = 264;
    public static readonly RULE_sourceLogPos = 265;
    public static readonly RULE_serverIdList = 266;
    public static readonly RULE_changeReplication = 267;
    public static readonly RULE_filterDefinition = 268;
    public static readonly RULE_filterDbList = 269;
    public static readonly RULE_filterTableList = 270;
    public static readonly RULE_filterStringList = 271;
    public static readonly RULE_filterWildDbTableString = 272;
    public static readonly RULE_filterDbPairList = 273;
    public static readonly RULE_startReplicaStatement = 274;
    public static readonly RULE_stopReplicaStatement = 275;
    public static readonly RULE_replicaUntil = 276;
    public static readonly RULE_userOption = 277;
    public static readonly RULE_passwordOption = 278;
    public static readonly RULE_defaultAuthOption = 279;
    public static readonly RULE_pluginDirOption = 280;
    public static readonly RULE_replicaThreadOptions = 281;
    public static readonly RULE_replicaThreadOption = 282;
    public static readonly RULE_groupReplication = 283;
    public static readonly RULE_groupReplicationStartOptions = 284;
    public static readonly RULE_groupReplicationStartOption = 285;
    public static readonly RULE_groupReplicationUser = 286;
    public static readonly RULE_groupReplicationPassword = 287;
    public static readonly RULE_groupReplicationPluginAuth = 288;
    public static readonly RULE_replica = 289;
    public static readonly RULE_preparedStatement = 290;
    public static readonly RULE_executeStatement = 291;
    public static readonly RULE_executeVarList = 292;
    public static readonly RULE_cloneStatement = 293;
    public static readonly RULE_dataDirSSL = 294;
    public static readonly RULE_ssl = 295;
    public static readonly RULE_accountManagementStatement = 296;
    public static readonly RULE_alterUserStatement = 297;
    public static readonly RULE_alterUserList = 298;
    public static readonly RULE_alterUser = 299;
    public static readonly RULE_oldAlterUser = 300;
    public static readonly RULE_userFunction = 301;
    public static readonly RULE_createUserStatement = 302;
    public static readonly RULE_createUserTail = 303;
    public static readonly RULE_userAttributes = 304;
    public static readonly RULE_defaultRoleClause = 305;
    public static readonly RULE_requireClause = 306;
    public static readonly RULE_connectOptions = 307;
    public static readonly RULE_accountLockPasswordExpireOptions = 308;
    public static readonly RULE_userAttribute = 309;
    public static readonly RULE_dropUserStatement = 310;
    public static readonly RULE_grantStatement = 311;
    public static readonly RULE_grantTargetList = 312;
    public static readonly RULE_grantOptions = 313;
    public static readonly RULE_exceptRoleList = 314;
    public static readonly RULE_withRoles = 315;
    public static readonly RULE_grantAs = 316;
    public static readonly RULE_versionedRequireClause = 317;
    public static readonly RULE_renameUserStatement = 318;
    public static readonly RULE_revokeStatement = 319;
    public static readonly RULE_aclType = 320;
    public static readonly RULE_roleOrPrivilegesList = 321;
    public static readonly RULE_roleOrPrivilege = 322;
    public static readonly RULE_grantIdentifier = 323;
    public static readonly RULE_requireList = 324;
    public static readonly RULE_requireListElement = 325;
    public static readonly RULE_grantOption = 326;
    public static readonly RULE_setRoleStatement = 327;
    public static readonly RULE_roleList = 328;
    public static readonly RULE_role = 329;
    public static readonly RULE_tableAdministrationStatement = 330;
    public static readonly RULE_histogram = 331;
    public static readonly RULE_checkOption = 332;
    public static readonly RULE_repairType = 333;
    public static readonly RULE_installUninstallStatement = 334;
    public static readonly RULE_setStatement = 335;
    public static readonly RULE_startOptionValueList = 336;
    public static readonly RULE_transactionCharacteristics = 337;
    public static readonly RULE_transactionAccessMode = 338;
    public static readonly RULE_isolationLevel = 339;
    public static readonly RULE_optionValueListContinued = 340;
    public static readonly RULE_optionValueNoOptionType = 341;
    public static readonly RULE_optionValue = 342;
    public static readonly RULE_setSystemVariable = 343;
    public static readonly RULE_startOptionValueListFollowingOptionType = 344;
    public static readonly RULE_optionValueFollowingOptionType = 345;
    public static readonly RULE_setExprOrDefault = 346;
    public static readonly RULE_showDatabasesStatement = 347;
    public static readonly RULE_showTablesStatement = 348;
    public static readonly RULE_showTriggersStatement = 349;
    public static readonly RULE_showEventsStatement = 350;
    public static readonly RULE_showTableStatusStatement = 351;
    public static readonly RULE_showOpenTablesStatement = 352;
    public static readonly RULE_showPluginsStatement = 353;
    public static readonly RULE_showEngineLogsStatement = 354;
    public static readonly RULE_showEngineMutexStatement = 355;
    public static readonly RULE_showEngineStatusStatement = 356;
    public static readonly RULE_showColumnsStatement = 357;
    public static readonly RULE_showBinaryLogsStatement = 358;
    public static readonly RULE_showReplicasStatement = 359;
    public static readonly RULE_showBinlogEventsStatement = 360;
    public static readonly RULE_showRelaylogEventsStatement = 361;
    public static readonly RULE_showKeysStatement = 362;
    public static readonly RULE_showEnginesStatement = 363;
    public static readonly RULE_showCountWarningsStatement = 364;
    public static readonly RULE_showCountErrorsStatement = 365;
    public static readonly RULE_showWarningsStatement = 366;
    public static readonly RULE_showErrorsStatement = 367;
    public static readonly RULE_showProfilesStatement = 368;
    public static readonly RULE_showProfileStatement = 369;
    public static readonly RULE_showStatusStatement = 370;
    public static readonly RULE_showProcessListStatement = 371;
    public static readonly RULE_showVariablesStatement = 372;
    public static readonly RULE_showCharacterSetStatement = 373;
    public static readonly RULE_showCollationStatement = 374;
    public static readonly RULE_showPrivilegesStatement = 375;
    public static readonly RULE_showGrantsStatement = 376;
    public static readonly RULE_showCreateDatabaseStatement = 377;
    public static readonly RULE_showCreateTableStatement = 378;
    public static readonly RULE_showCreateViewStatement = 379;
    public static readonly RULE_showMasterStatusStatement = 380;
    public static readonly RULE_showReplicaStatusStatement = 381;
    public static readonly RULE_showCreateProcedureStatement = 382;
    public static readonly RULE_showCreateFunctionStatement = 383;
    public static readonly RULE_showCreateTriggerStatement = 384;
    public static readonly RULE_showCreateProcedureStatusStatement = 385;
    public static readonly RULE_showCreateFunctionStatusStatement = 386;
    public static readonly RULE_showCreateProcedureCodeStatement = 387;
    public static readonly RULE_showCreateFunctionCodeStatement = 388;
    public static readonly RULE_showCreateEventStatement = 389;
    public static readonly RULE_showCreateUserStatement = 390;
    public static readonly RULE_showCommandType = 391;
    public static readonly RULE_engineOrAll = 392;
    public static readonly RULE_fromOrIn = 393;
    public static readonly RULE_inDb = 394;
    public static readonly RULE_profileDefinitions = 395;
    public static readonly RULE_profileDefinition = 396;
    public static readonly RULE_otherAdministrativeStatement = 397;
    public static readonly RULE_keyCacheListOrParts = 398;
    public static readonly RULE_keyCacheList = 399;
    public static readonly RULE_assignToKeycache = 400;
    public static readonly RULE_assignToKeycachePartition = 401;
    public static readonly RULE_cacheKeyList = 402;
    public static readonly RULE_keyUsageElement = 403;
    public static readonly RULE_keyUsageList = 404;
    public static readonly RULE_flushOption = 405;
    public static readonly RULE_logType = 406;
    public static readonly RULE_flushTables = 407;
    public static readonly RULE_flushTablesOptions = 408;
    public static readonly RULE_preloadTail = 409;
    public static readonly RULE_preloadList = 410;
    public static readonly RULE_preloadKeys = 411;
    public static readonly RULE_adminPartition = 412;
    public static readonly RULE_resourceGroupManagement = 413;
    public static readonly RULE_createResourceGroup = 414;
    public static readonly RULE_resourceGroupVcpuList = 415;
    public static readonly RULE_vcpuNumOrRange = 416;
    public static readonly RULE_resourceGroupPriority = 417;
    public static readonly RULE_resourceGroupEnableDisable = 418;
    public static readonly RULE_alterResourceGroup = 419;
    public static readonly RULE_setResourceGroup = 420;
    public static readonly RULE_threadIdList = 421;
    public static readonly RULE_dropResourceGroup = 422;
    public static readonly RULE_utilityStatement = 423;
    public static readonly RULE_describeStatement = 424;
    public static readonly RULE_explainStatement = 425;
    public static readonly RULE_explainableStatement = 426;
    public static readonly RULE_helpCommand = 427;
    public static readonly RULE_useCommand = 428;
    public static readonly RULE_restartServer = 429;
    public static readonly RULE_expr = 430;
    public static readonly RULE_boolPri = 431;
    public static readonly RULE_compOp = 432;
    public static readonly RULE_predicate = 433;
    public static readonly RULE_predicateOperations = 434;
    public static readonly RULE_bitExpr = 435;
    public static readonly RULE_simpleExpr = 436;
    public static readonly RULE_arrayCast = 437;
    public static readonly RULE_jsonOperator = 438;
    public static readonly RULE_sumExpr = 439;
    public static readonly RULE_groupingOperation = 440;
    public static readonly RULE_windowFunctionCall = 441;
    public static readonly RULE_windowingClause = 442;
    public static readonly RULE_leadLagInfo = 443;
    public static readonly RULE_stableInteger = 444;
    public static readonly RULE_paramOrVar = 445;
    public static readonly RULE_nullTreatment = 446;
    public static readonly RULE_jsonFunction = 447;
    public static readonly RULE_inSumExpr = 448;
    public static readonly RULE_identListArg = 449;
    public static readonly RULE_identList = 450;
    public static readonly RULE_fulltextOptions = 451;
    public static readonly RULE_runtimeFunctionCall = 452;
    public static readonly RULE_returningType = 453;
    public static readonly RULE_geometryFunction = 454;
    public static readonly RULE_timeFunctionParameters = 455;
    public static readonly RULE_fractionalPrecision = 456;
    public static readonly RULE_weightStringLevels = 457;
    public static readonly RULE_weightStringLevelListItem = 458;
    public static readonly RULE_dateTimeTtype = 459;
    public static readonly RULE_trimFunction = 460;
    public static readonly RULE_substringFunction = 461;
    public static readonly RULE_functionCall = 462;
    public static readonly RULE_udfExprList = 463;
    public static readonly RULE_udfExpr = 464;
    public static readonly RULE_userVariable = 465;
    public static readonly RULE_inExpressionUserVariableAssignment = 466;
    public static readonly RULE_rvalueSystemOrUserVariable = 467;
    public static readonly RULE_lvalueVariable = 468;
    public static readonly RULE_rvalueSystemVariable = 469;
    public static readonly RULE_whenExpression = 470;
    public static readonly RULE_thenExpression = 471;
    public static readonly RULE_elseExpression = 472;
    public static readonly RULE_castType = 473;
    public static readonly RULE_exprList = 474;
    public static readonly RULE_charset = 475;
    public static readonly RULE_notRule = 476;
    public static readonly RULE_not2Rule = 477;
    public static readonly RULE_interval = 478;
    public static readonly RULE_intervalTimeStamp = 479;
    public static readonly RULE_exprListWithParentheses = 480;
    public static readonly RULE_exprWithParentheses = 481;
    public static readonly RULE_simpleExprWithParentheses = 482;
    public static readonly RULE_orderList = 483;
    public static readonly RULE_orderExpression = 484;
    public static readonly RULE_groupList = 485;
    public static readonly RULE_groupingExpression = 486;
    public static readonly RULE_channel = 487;
    public static readonly RULE_compoundStatement = 488;
    public static readonly RULE_returnStatement = 489;
    public static readonly RULE_ifStatement = 490;
    public static readonly RULE_ifBody = 491;
    public static readonly RULE_thenStatement = 492;
    public static readonly RULE_compoundStatementList = 493;
    public static readonly RULE_caseStatement = 494;
    public static readonly RULE_elseStatement = 495;
    public static readonly RULE_labeledBlock = 496;
    public static readonly RULE_unlabeledBlock = 497;
    public static readonly RULE_label = 498;
    public static readonly RULE_beginEndBlock = 499;
    public static readonly RULE_labeledControl = 500;
    public static readonly RULE_unlabeledControl = 501;
    public static readonly RULE_loopBlock = 502;
    public static readonly RULE_whileDoBlock = 503;
    public static readonly RULE_repeatUntilBlock = 504;
    public static readonly RULE_spDeclarations = 505;
    public static readonly RULE_spDeclaration = 506;
    public static readonly RULE_variableDeclaration = 507;
    public static readonly RULE_conditionDeclaration = 508;
    public static readonly RULE_spCondition = 509;
    public static readonly RULE_sqlstate = 510;
    public static readonly RULE_handlerDeclaration = 511;
    public static readonly RULE_handlerCondition = 512;
    public static readonly RULE_cursorDeclaration = 513;
    public static readonly RULE_iterateStatement = 514;
    public static readonly RULE_leaveStatement = 515;
    public static readonly RULE_getDiagnosticsStatement = 516;
    public static readonly RULE_signalAllowedExpr = 517;
    public static readonly RULE_statementInformationItem = 518;
    public static readonly RULE_conditionInformationItem = 519;
    public static readonly RULE_signalInformationItemName = 520;
    public static readonly RULE_signalStatement = 521;
    public static readonly RULE_resignalStatement = 522;
    public static readonly RULE_signalInformationItem = 523;
    public static readonly RULE_cursorOpen = 524;
    public static readonly RULE_cursorClose = 525;
    public static readonly RULE_cursorFetch = 526;
    public static readonly RULE_schedule = 527;
    public static readonly RULE_columnDefinition = 528;
    public static readonly RULE_checkOrReferences = 529;
    public static readonly RULE_checkConstraint = 530;
    public static readonly RULE_constraintEnforcement = 531;
    public static readonly RULE_tableConstraintDef = 532;
    public static readonly RULE_constraintName = 533;
    public static readonly RULE_fieldDefinition = 534;
    public static readonly RULE_columnAttribute = 535;
    public static readonly RULE_columnFormat = 536;
    public static readonly RULE_storageMedia = 537;
    public static readonly RULE_now = 538;
    public static readonly RULE_nowOrSignedLiteral = 539;
    public static readonly RULE_gcolAttribute = 540;
    public static readonly RULE_references = 541;
    public static readonly RULE_deleteOption = 542;
    public static readonly RULE_keyList = 543;
    public static readonly RULE_keyPart = 544;
    public static readonly RULE_keyListWithExpression = 545;
    public static readonly RULE_keyPartOrExpression = 546;
    public static readonly RULE_indexType = 547;
    public static readonly RULE_indexOption = 548;
    public static readonly RULE_commonIndexOption = 549;
    public static readonly RULE_visibility = 550;
    public static readonly RULE_indexTypeClause = 551;
    public static readonly RULE_fulltextIndexOption = 552;
    public static readonly RULE_spatialIndexOption = 553;
    public static readonly RULE_dataTypeDefinition = 554;
    public static readonly RULE_dataType = 555;
    public static readonly RULE_nchar = 556;
    public static readonly RULE_realType = 557;
    public static readonly RULE_fieldLength = 558;
    public static readonly RULE_fieldOptions = 559;
    public static readonly RULE_charsetWithOptBinary = 560;
    public static readonly RULE_ascii = 561;
    public static readonly RULE_unicode = 562;
    public static readonly RULE_wsNumCodepoints = 563;
    public static readonly RULE_typeDatetimePrecision = 564;
    public static readonly RULE_functionDatetimePrecision = 565;
    public static readonly RULE_charsetName = 566;
    public static readonly RULE_collationName = 567;
    public static readonly RULE_createTableOptions = 568;
    public static readonly RULE_createTableOptionsEtc = 569;
    public static readonly RULE_createPartitioningEtc = 570;
    public static readonly RULE_createTableOptionsSpaceSeparated = 571;
    public static readonly RULE_createTableOption = 572;
    public static readonly RULE_ternaryOption = 573;
    public static readonly RULE_defaultCollation = 574;
    public static readonly RULE_defaultEncryption = 575;
    public static readonly RULE_defaultCharset = 576;
    public static readonly RULE_partitionClause = 577;
    public static readonly RULE_partitionTypeDef = 578;
    public static readonly RULE_subPartitions = 579;
    public static readonly RULE_partitionKeyAlgorithm = 580;
    public static readonly RULE_partitionDefinitions = 581;
    public static readonly RULE_partitionDefinition = 582;
    public static readonly RULE_partitionValuesIn = 583;
    public static readonly RULE_partitionOption = 584;
    public static readonly RULE_subpartitionDefinition = 585;
    public static readonly RULE_partitionValueItemListParen = 586;
    public static readonly RULE_partitionValueItem = 587;
    public static readonly RULE_definerClause = 588;
    public static readonly RULE_ifExists = 589;
    public static readonly RULE_ifNotExists = 590;
    public static readonly RULE_ignoreUnknownUser = 591;
    public static readonly RULE_procedureParameter = 592;
    public static readonly RULE_functionParameter = 593;
    public static readonly RULE_collate = 594;
    public static readonly RULE_typeWithOptCollate = 595;
    public static readonly RULE_schemaIdentifierPair = 596;
    public static readonly RULE_viewRefList = 597;
    public static readonly RULE_updateList = 598;
    public static readonly RULE_updateElement = 599;
    public static readonly RULE_charsetClause = 600;
    public static readonly RULE_fieldsClause = 601;
    public static readonly RULE_fieldTerm = 602;
    public static readonly RULE_linesClause = 603;
    public static readonly RULE_lineTerm = 604;
    public static readonly RULE_userList = 605;
    public static readonly RULE_createUserList = 606;
    public static readonly RULE_createUser = 607;
    public static readonly RULE_createUserWithMfa = 608;
    public static readonly RULE_identification = 609;
    public static readonly RULE_identifiedByPassword = 610;
    public static readonly RULE_identifiedByRandomPassword = 611;
    public static readonly RULE_identifiedWithPlugin = 612;
    public static readonly RULE_identifiedWithPluginAsAuth = 613;
    public static readonly RULE_identifiedWithPluginByPassword = 614;
    public static readonly RULE_identifiedWithPluginByRandomPassword = 615;
    public static readonly RULE_initialAuth = 616;
    public static readonly RULE_retainCurrentPassword = 617;
    public static readonly RULE_discardOldPassword = 618;
    public static readonly RULE_userRegistration = 619;
    public static readonly RULE_factor = 620;
    public static readonly RULE_replacePassword = 621;
    public static readonly RULE_userIdentifierOrText = 622;
    public static readonly RULE_user = 623;
    public static readonly RULE_likeClause = 624;
    public static readonly RULE_likeOrWhere = 625;
    public static readonly RULE_onlineOption = 626;
    public static readonly RULE_noWriteToBinLog = 627;
    public static readonly RULE_usePartition = 628;
    public static readonly RULE_fieldIdentifier = 629;
    public static readonly RULE_columnName = 630;
    public static readonly RULE_columnInternalRef = 631;
    public static readonly RULE_columnInternalRefList = 632;
    public static readonly RULE_columnRef = 633;
    public static readonly RULE_insertIdentifier = 634;
    public static readonly RULE_indexName = 635;
    public static readonly RULE_indexRef = 636;
    public static readonly RULE_tableWild = 637;
    public static readonly RULE_schemaName = 638;
    public static readonly RULE_schemaRef = 639;
    public static readonly RULE_procedureName = 640;
    public static readonly RULE_procedureRef = 641;
    public static readonly RULE_functionName = 642;
    public static readonly RULE_functionRef = 643;
    public static readonly RULE_triggerName = 644;
    public static readonly RULE_triggerRef = 645;
    public static readonly RULE_viewName = 646;
    public static readonly RULE_viewRef = 647;
    public static readonly RULE_tablespaceName = 648;
    public static readonly RULE_tablespaceRef = 649;
    public static readonly RULE_logfileGroupName = 650;
    public static readonly RULE_logfileGroupRef = 651;
    public static readonly RULE_eventName = 652;
    public static readonly RULE_eventRef = 653;
    public static readonly RULE_udfName = 654;
    public static readonly RULE_serverName = 655;
    public static readonly RULE_serverRef = 656;
    public static readonly RULE_engineRef = 657;
    public static readonly RULE_tableName = 658;
    public static readonly RULE_filterTableRef = 659;
    public static readonly RULE_tableRefWithWildcard = 660;
    public static readonly RULE_tableRef = 661;
    public static readonly RULE_tableRefList = 662;
    public static readonly RULE_tableAliasRefList = 663;
    public static readonly RULE_parameterName = 664;
    public static readonly RULE_labelIdentifier = 665;
    public static readonly RULE_labelRef = 666;
    public static readonly RULE_roleIdentifier = 667;
    public static readonly RULE_pluginRef = 668;
    public static readonly RULE_componentRef = 669;
    public static readonly RULE_resourceGroupRef = 670;
    public static readonly RULE_windowName = 671;
    public static readonly RULE_pureIdentifier = 672;
    public static readonly RULE_identifier = 673;
    public static readonly RULE_identifierList = 674;
    public static readonly RULE_identifierListWithParentheses = 675;
    public static readonly RULE_qualifiedIdentifier = 676;
    public static readonly RULE_simpleIdentifier = 677;
    public static readonly RULE_dotIdentifier = 678;
    public static readonly RULE_ulong_number = 679;
    public static readonly RULE_real_ulong_number = 680;
    public static readonly RULE_ulonglong_number = 681;
    public static readonly RULE_real_ulonglong_number = 682;
    public static readonly RULE_signedLiteral = 683;
    public static readonly RULE_signedLiteralOrNull = 684;
    public static readonly RULE_literal = 685;
    public static readonly RULE_literalOrNull = 686;
    public static readonly RULE_nullAsLiteral = 687;
    public static readonly RULE_stringList = 688;
    public static readonly RULE_textStringLiteral = 689;
    public static readonly RULE_textString = 690;
    public static readonly RULE_textStringHash = 691;
    public static readonly RULE_textLiteral = 692;
    public static readonly RULE_textStringNoLinebreak = 693;
    public static readonly RULE_textStringLiteralList = 694;
    public static readonly RULE_numLiteral = 695;
    public static readonly RULE_boolLiteral = 696;
    public static readonly RULE_nullLiteral = 697;
    public static readonly RULE_int64Literal = 698;
    public static readonly RULE_temporalLiteral = 699;
    public static readonly RULE_floatOptions = 700;
    public static readonly RULE_standardFloatOptions = 701;
    public static readonly RULE_precision = 702;
    public static readonly RULE_textOrIdentifier = 703;
    public static readonly RULE_lValueIdentifier = 704;
    public static readonly RULE_roleIdentifierOrText = 705;
    public static readonly RULE_sizeNumber = 706;
    public static readonly RULE_parentheses = 707;
    public static readonly RULE_equal = 708;
    public static readonly RULE_optionType = 709;
    public static readonly RULE_rvalueSystemVariableType = 710;
    public static readonly RULE_setVarIdentType = 711;
    public static readonly RULE_jsonAttribute = 712;
    public static readonly RULE_identifierKeyword = 713;
    public static readonly RULE_identifierKeywordsAmbiguous1RolesAndLabels = 714;
    public static readonly RULE_identifierKeywordsAmbiguous2Labels = 715;
    public static readonly RULE_labelKeyword = 716;
    public static readonly RULE_identifierKeywordsAmbiguous3Roles = 717;
    public static readonly RULE_identifierKeywordsUnambiguous = 718;
    public static readonly RULE_roleKeyword = 719;
    public static readonly RULE_lValueKeyword = 720;
    public static readonly RULE_identifierKeywordsAmbiguous4SystemVariables = 721;
    public static readonly RULE_roleOrIdentifierKeyword = 722;
    public static readonly RULE_roleOrLabelKeyword = 723;
    public static readonly literalNames: string[] = [
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'='", "':='", 
        "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
        "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", "'^'", 
        "'||'", "'|'", "'.'", "','", "';'", "':'", "'('", "')'", "'{'", 
        "'}'", "'_'", "'->'", "'->>'", "'@'", "", "'@@'", "'\\N'", "'?'", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "'<>'"
    ];
    public static readonly symbolicNames: string[] = [
        "", "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", "ACTION_SYMBOL", "ADD_SYMBOL", 
        "ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
        "ALGORITHM_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", 
        "ANALYSE_SYMBOL", "ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", 
        "AS_SYMBOL", "ASC_SYMBOL", "ASCII_SYMBOL", "ASENSITIVE_SYMBOL", 
        "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", "AUTO_INCREMENT_SYMBOL", 
        "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL", "BEFORE_SYMBOL", 
        "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
        "BINLOG_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", 
        "BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", 
        "BOOL_SYMBOL", "BOTH_SYMBOL", "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", 
        "CACHE_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", 
        "CASE_SYMBOL", "CAST_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", 
        "CHANGE_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", 
        "CHARACTER_SYMBOL", "CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", 
        "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", "CLIENT_SYMBOL", "CLOSE_SYMBOL", 
        "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATE_SYMBOL", "COLLATION_SYMBOL", 
        "COLUMNS_SYMBOL", "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", 
        "COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", "COMPACT_SYMBOL", 
        "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
        "CONCURRENT_SYMBOL", "CONDITION_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
        "CONSTRAINT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
        "CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", 
        "CONTINUE_SYMBOL", "CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", 
        "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", "CUBE_SYMBOL", "CURDATE_SYMBOL", 
        "CURRENT_SYMBOL", "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", 
        "CURRENT_TIMESTAMP_SYMBOL", "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", 
        "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL", "DATABASE_SYMBOL", "DATABASES_SYMBOL", 
        "DATAFILE_SYMBOL", "DATA_SYMBOL", "DATETIME_SYMBOL", "DATE_ADD_SYMBOL", 
        "DATE_SUB_SYMBOL", "DATE_SYMBOL", "DAYOFMONTH_SYMBOL", "DAY_HOUR_SYMBOL", 
        "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", 
        "DAY_SYMBOL", "DEALLOCATE_SYMBOL", "DEC_SYMBOL", "DECIMAL_NUM_SYMBOL", 
        "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", "DEFAULT_AUTH_SYMBOL", 
        "DEFINER_SYMBOL", "DELAYED_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", 
        "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", "DETERMINISTIC_SYMBOL", 
        "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", 
        "DISK_SYMBOL", "DISTINCT_SYMBOL", "DISTINCTROW_SYMBOL", "DIV_SYMBOL", 
        "DOUBLE_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", "DUMPFILE_SYMBOL", 
        "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", "ELSE_SYMBOL", 
        "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", 
        "END_SYMBOL", "ENDS_SYMBOL", "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", 
        "ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", 
        "ESCAPED_SYMBOL", "ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", 
        "EVERY_SYMBOL", "EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", "EXISTS_SYMBOL", 
        "EXIT_SYMBOL", "EXPANSION_SYMBOL", "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", 
        "EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", 
        "FALSE_SYMBOL", "FAST_SYMBOL", "FAULTS_SYMBOL", "FETCH_SYMBOL", 
        "FIELDS_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", 
        "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT4_SYMBOL", "FLOAT8_SYMBOL", 
        "FLOAT_SYMBOL", "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", "FORCE_SYMBOL", 
        "FOREIGN_SYMBOL", "FOR_SYMBOL", "FORMAT_SYMBOL", "FOUND_SYMBOL", 
        "FROM_SYMBOL", "FULL_SYMBOL", "FULLTEXT_SYMBOL", "FUNCTION_SYMBOL", 
        "GET_SYMBOL", "GENERAL_SYMBOL", "GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", 
        "GEOMETRYCOLLECTION_SYMBOL", "GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", 
        "GLOBAL_SYMBOL", "GRANT_SYMBOL", "GRANTS_SYMBOL", "GROUP_SYMBOL", 
        "GROUP_CONCAT_SYMBOL", "HANDLER_SYMBOL", "HASH_SYMBOL", "HAVING_SYMBOL", 
        "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOST_SYMBOL", "HOSTS_SYMBOL", 
        "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", "HOUR_SECOND_SYMBOL", 
        "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", "IGNORE_SYMBOL", 
        "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL", "INDEX_SYMBOL", 
        "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", "INOUT_SYMBOL", 
        "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL", "INSTANCE_SYMBOL", 
        "INSTALL_SYMBOL", "INTEGER_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
        "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
        "IO_BEFORE_GTIDS_SYMBOL", "IO_THREAD_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", 
        "IS_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "ITERATE_SYMBOL", 
        "JOIN_SYMBOL", "JSON_SYMBOL", "KEYS_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", 
        "KEY_SYMBOL", "KILL_SYMBOL", "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", 
        "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL", "LESS_SYMBOL", "LEVEL_SYMBOL", 
        "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", 
        "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOAD_SYMBOL", "LOCALTIME_SYMBOL", 
        "LOCALTIMESTAMP_SYMBOL", "LOCAL_SYMBOL", "LOCATOR_SYMBOL", "LOCKS_SYMBOL", 
        "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL", 
        "LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", 
        "LOW_PRIORITY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", 
        "MASTER_CONNECT_RETRY_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", 
        "MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", 
        "MASTER_PORT_SYMBOL", "MASTER_RETRY_COUNT_SYMBOL", "MASTER_SERVER_ID_SYMBOL", 
        "MASTER_SSL_CAPATH_SYMBOL", "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", 
        "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", "MASTER_SSL_CRLPATH_SYMBOL", 
        "MASTER_SSL_KEY_SYMBOL", "MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", 
        "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", 
        "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL", "MAX_CONNECTIONS_PER_HOUR_SYMBOL", 
        "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", 
        "MAX_STATEMENT_TIME_SYMBOL", "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", 
        "MAX_USER_CONNECTIONS_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", 
        "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", "MEMORY_SYMBOL", 
        "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", "MID_SYMBOL", 
        "MIDDLEINT_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", 
        "MINUTE_SECOND_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", 
        "MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", "MOD_SYMBOL", 
        "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", 
        "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", 
        "NATIONAL_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", "NCHAR_SYMBOL", 
        "NDB_SYMBOL", "NDBCLUSTER_SYMBOL", "NEG_SYMBOL", "NEVER_SYMBOL", 
        "NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", "NONE_SYMBOL", 
        "NONBLOCKING_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", 
        "NO_WRITE_TO_BINLOG_SYMBOL", "NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", 
        "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
        "ON_SYMBOL", "ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", "OPEN_SYMBOL", 
        "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", "OPTION_SYMBOL", 
        "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", 
        "OUTFILE_SYMBOL", "OUT_SYMBOL", "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", 
        "PAGE_SYMBOL", "PARSER_SYMBOL", "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", 
        "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
        "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "POINT_SYMBOL", 
        "POLYGON_SYMBOL", "PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", 
        "PRECISION_SYMBOL", "PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", 
        "PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", 
        "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", 
        "PURGE_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", 
        "RANGE_SYMBOL", "READS_SYMBOL", "READ_ONLY_SYMBOL", "READ_SYMBOL", 
        "READ_WRITE_SYMBOL", "REAL_SYMBOL", "REBUILD_SYMBOL", "RECOVER_SYMBOL", 
        "REDOFILE_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", 
        "REFERENCES_SYMBOL", "REGEXP_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", 
        "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
        "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", "RENAME_SYMBOL", 
        "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL", "REPEAT_SYMBOL", 
        "REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
        "REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
        "REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
        "REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", 
        "RESIGNAL_SYMBOL", "RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", 
        "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", "RETURN_SYMBOL", "REVERSE_SYMBOL", 
        "REVOKE_SYMBOL", "RIGHT_SYMBOL", "RLIKE_SYMBOL", "ROLLBACK_SYMBOL", 
        "ROLLUP_SYMBOL", "ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", 
        "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", 
        "SAVEPOINT_SYMBOL", "SCHEDULE_SYMBOL", "SCHEMA_SYMBOL", "SCHEMA_NAME_SYMBOL", 
        "SCHEMAS_SYMBOL", "SECOND_MICROSECOND_SYMBOL", "SECOND_SYMBOL", 
        "SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", 
        "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", "SESSION_SYMBOL", "SERVER_SYMBOL", 
        "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL", "SET_VAR_SYMBOL", 
        "SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", 
        "SIGNED_SYMBOL", "SIMPLE_SYMBOL", "SLAVE_SYMBOL", "SLOW_SYMBOL", 
        "SMALLINT_SYMBOL", "SNAPSHOT_SYMBOL", "SOME_SYMBOL", "SOCKET_SYMBOL", 
        "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SPATIAL_SYMBOL", 
        "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", 
        "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL", 
        "SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", "SQL_CACHE_SYMBOL", 
        "SQL_CALC_FOUND_ROWS_SYMBOL", "SQL_NO_CACHE_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", 
        "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", "STACKED_SYMBOL", 
        "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", "STATS_AUTO_RECALC_SYMBOL", 
        "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", "STATUS_SYMBOL", 
        "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", "STD_SYMBOL", 
        "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", 
        "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", 
        "SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", 
        "SUBSTRING_SYMBOL", "SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", 
        "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", 
        "TABLES_SYMBOL", "TABLESPACE_SYMBOL", "TABLE_REF_PRIORITY_SYMBOL", 
        "TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL", 
        "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", 
        "THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", "TIMESTAMP_DIFF_SYMBOL", 
        "TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", 
        "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL", 
        "TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", 
        "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
        "UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", 
        "UNDO_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", "UNION_SYMBOL", 
        "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", 
        "UNTIL_SYMBOL", "UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", 
        "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", "USE_SYMBOL", 
        "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
        "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VALUE_SYMBOL", "VARBINARY_SYMBOL", 
        "VARCHAR_SYMBOL", "VARCHARACTER_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL", 
        "VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", "VIEW_SYMBOL", 
        "VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", "WEEK_SYMBOL", 
        "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", 
        "WITH_SYMBOL", "WITHOUT_SYMBOL", "WORK_SYMBOL", "WRAPPER_SYMBOL", 
        "WRITE_SYMBOL", "X509_SYMBOL", "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", 
        "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", "ZEROFILL_SYMBOL", 
        "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", 
        "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", 
        "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", 
        "LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", 
        "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", 
        "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", 
        "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL", 
        "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", 
        "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", 
        "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", 
        "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
        "NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", 
        "REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", 
        "SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", 
        "GET_MASTER_PUBLIC_KEY_SYMBOL", "RESTART_SYMBOL", "DEFINITION_SYMBOL", 
        "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", "REFERENCE_SYMBOL", 
        "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
        "SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", 
        "INACTIVE_SYMBOL", "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", 
        "NETWORK_NAMESPACE_SYMBOL", "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", 
        "MEMBER_SYMBOL", "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
        "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
        "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", "PASSWORD_LOCK_TIME_SYMBOL", 
        "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", 
        "STREAM_SYMBOL", "OFF_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
        "INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", 
        "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
        "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", 
        "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", 
        "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
        "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
        "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
        "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", 
        "COLON_SYMBOL", "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", 
        "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", 
        "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", 
        "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", 
        "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "TIMESTAMPADD_SYMBOL", 
        "TIMESTAMPDIFF_SYMBOL", "RETURNING_SYMBOL", "JSON_VALUE_SYMBOL", 
        "TLS_SYMBOL", "ATTRIBUTE_SYMBOL", "ENGINE_ATTRIBUTE_SYMBOL", "SECONDARY_ENGINE_ATTRIBUTE_SYMBOL", 
        "SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL", "ZONE_SYMBOL", "GRAMMAR_SELECTOR_DERIVED_EXPR", 
        "REPLICA_SYMBOL", "REPLICAS_SYMBOL", "ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL", 
        "GET_SOURCE_PUBLIC_KEY_SYMBOL", "SOURCE_AUTO_POSITION_SYMBOL", "SOURCE_BIND_SYMBOL", 
        "SOURCE_COMPRESSION_ALGORITHM_SYMBOL", "SOURCE_CONNECT_RETRY_SYMBOL", 
        "SOURCE_DELAY_SYMBOL", "SOURCE_HEARTBEAT_PERIOD_SYMBOL", "SOURCE_HOST_SYMBOL", 
        "SOURCE_LOG_FILE_SYMBOL", "SOURCE_LOG_POS_SYMBOL", "SOURCE_PASSWORD_SYMBOL", 
        "SOURCE_PORT_SYMBOL", "SOURCE_PUBLIC_KEY_PATH_SYMBOL", "SOURCE_RETRY_COUNT_SYMBOL", 
        "SOURCE_SSL_SYMBOL", "SOURCE_SSL_CA_SYMBOL", "SOURCE_SSL_CAPATH_SYMBOL", 
        "SOURCE_SSL_CERT_SYMBOL", "SOURCE_SSL_CIPHER_SYMBOL", "SOURCE_SSL_CRL_SYMBOL", 
        "SOURCE_SSL_CRLPATH_SYMBOL", "SOURCE_SSL_KEY_SYMBOL", "SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL", 
        "SOURCE_TLS_CIPHERSUITES_SYMBOL", "SOURCE_TLS_VERSION_SYMBOL", "SOURCE_USER_SYMBOL", 
        "SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL", "ST_COLLECT_SYMBOL", "KEYRING_SYMBOL", 
        "AUTHENTICATION_SYMBOL", "FACTOR_SYMBOL", "FINISH_SYMBOL", "INITIATE_SYMBOL", 
        "REGISTRATION_SYMBOL", "UNREGISTER_SYMBOL", "INITIAL_SYMBOL", "CHALLENGE_RESPONSE_SYMBOL", 
        "GTID_ONLY_SYMBOL", "INTERSECT_SYMBOL", "WHITESPACE", "INVALID_INPUT", 
        "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
        "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", 
        "MYSQL_COMMENT_START", "VERSION_COMMENT_END", "BLOCK_COMMENT", "INVALID_BLOCK_COMMENT", 
        "POUND_COMMENT", "DASHDASH_COMMENT", "NOT_EQUAL2_OPERATOR"
    ];

    public static readonly ruleNames: string[] = [
        "query", "simpleStatement", "alterStatement", "alterDatabase", "alterDatabaseOption", 
        "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
        "alterServer", "alterTable", "alterTableActions", "alterCommandList", 
        "alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
        "alterList", "alterCommandsModifier", "alterListItem", "place", 
        "restrict", "alterOrderList", "alterAlgorithmOption", "alterLockOption", 
        "indexLockAndAlgorithm", "withValidation", "removePartitioning", 
        "allOrPartitionNameList", "alterTablespace", "alterUndoTablespace", 
        "undoTableSpaceOptions", "undoTableSpaceOption", "alterTablespaceOptions", 
        "alterTablespaceOption", "changeTablespaceOption", "alterView", 
        "viewTail", "viewQueryBlock", "viewCheckOption", "alterInstanceStatement", 
        "createStatement", "createDatabase", "createDatabaseOption", "createTable", 
        "tableElementList", "tableElement", "duplicateAsQe", "asCreateQueryExpression", 
        "queryExpressionOrParens", "queryExpressionWithOptLockingClauses", 
        "createRoutine", "createProcedure", "createFunction", "createUdf", 
        "routineCreateOption", "routineAlterOptions", "routineOption", "createIndex", 
        "indexNameAndType", "createIndexTarget", "createLogfileGroup", "logfileGroupOptions", 
        "logfileGroupOption", "createServer", "serverOptions", "serverOption", 
        "createTablespace", "createUndoTablespace", "tsDataFileName", "tsDataFile", 
        "tablespaceOptions", "tablespaceOption", "tsOptionInitialSize", 
        "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", "tsOptionMaxSize", 
        "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", "tsOptionWait", 
        "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", 
        "tsOptionEngineAttribute", "createView", "viewReplaceOrAlgorithm", 
        "viewAlgorithm", "viewSuid", "createTrigger", "triggerFollowsPrecedesClause", 
        "createEvent", "createRole", "createSpatialReference", "srsAttribute", 
        "dropStatement", "dropDatabase", "dropEvent", "dropFunction", "dropProcedure", 
        "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", "dropServer", 
        "dropTable", "dropTableSpace", "dropTrigger", "dropView", "dropRole", 
        "dropSpatialReference", "dropUndoTablespace", "renameTableStatement", 
        "renamePair", "truncateTableStatement", "importStatement", "callStatement", 
        "deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement", 
        "handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption", 
        "insertFromConstructor", "fields", "insertValues", "insertQueryExpression", 
        "valueList", "values", "valuesReference", "insertUpdateList", "loadStatement", 
        "dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
        "fieldOrVariableList", "replaceStatement", "selectStatement", "selectStatementWithInto", 
        "queryExpression", "queryExpressionBody", "queryExpressionParens", 
        "queryPrimary", "querySpecification", "subquery", "querySpecOption", 
        "limitClause", "simpleLimitClause", "limitOptions", "limitOption", 
        "intoClause", "procedureAnalyseClause", "havingClause", "windowClause", 
        "windowDefinition", "windowSpec", "windowSpecDetails", "windowFrameClause", 
        "windowFrameUnits", "windowFrameExtent", "windowFrameStart", "windowFrameBetween", 
        "windowFrameBound", "windowFrameExclusion", "withClause", "commonTableExpression", 
        "groupByClause", "olapOption", "orderClause", "direction", "fromClause", 
        "tableReferenceList", "tableValueConstructor", "explicitTable", 
        "rowValueExplicit", "selectOption", "lockingClauseList", "lockingClause", 
        "lockStrengh", "lockedRowAction", "selectItemList", "selectItem", 
        "selectAlias", "whereClause", "tableReference", "escapedTableReference", 
        "joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", 
        "tableFactor", "singleTable", "singleTableParens", "derivedTable", 
        "tableReferenceListParens", "tableFunction", "columnsClause", "jtColumn", 
        "onEmptyOrError", "onEmptyOrErrorJsonTable", "onEmpty", "onError", 
        "jsonOnResponse", "unionOption", "tableAlias", "indexHintList", 
        "indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", 
        "indexHintClause", "indexList", "indexListElement", "updateStatement", 
        "transactionOrLockingStatement", "transactionStatement", "beginWork", 
        "startTransactionOptionList", "savepointStatement", "lockStatement", 
        "lockItem", "lockOption", "xaStatement", "xaConvert", "xid", "replicationStatement", 
        "resetOption", "sourceResetOptions", "replicationLoad", "changeReplicationSource", 
        "changeSource", "sourceDefinitions", "sourceDefinition", "changeReplicationSourceAutoPosition", 
        "changeReplicationSourceHost", "changeReplicationSourceBind", "changeReplicationSourceUser", 
        "changeReplicationSourcePassword", "changeReplicationSourcePort", 
        "changeReplicationSourceConnectRetry", "changeReplicationSourceRetryCount", 
        "changeReplicationSourceDelay", "changeReplicationSourceSSL", "changeReplicationSourceSSLCA", 
        "changeReplicationSourceSSLCApath", "changeReplicationSourceSSLCipher", 
        "changeReplicationSourceSSLCLR", "changeReplicationSourceSSLCLRpath", 
        "changeReplicationSourceSSLKey", "changeReplicationSourceSSLVerifyServerCert", 
        "changeReplicationSourceTLSVersion", "changeReplicationSourceTLSCiphersuites", 
        "changeReplicationSourceSSLCert", "changeReplicationSourcePublicKey", 
        "changeReplicationSourceGetSourcePublicKey", "changeReplicationSourceHeartbeatPeriod", 
        "changeReplicationSourceCompressionAlgorithm", "changeReplicationSourceZstdCompressionLevel", 
        "privilegeCheckDef", "tablePrimaryKeyCheckDef", "assignGtidsToAnonymousTransactionsDefinition", 
        "sourceTlsCiphersuitesDef", "sourceFileDef", "sourceLogFile", "sourceLogPos", 
        "serverIdList", "changeReplication", "filterDefinition", "filterDbList", 
        "filterTableList", "filterStringList", "filterWildDbTableString", 
        "filterDbPairList", "startReplicaStatement", "stopReplicaStatement", 
        "replicaUntil", "userOption", "passwordOption", "defaultAuthOption", 
        "pluginDirOption", "replicaThreadOptions", "replicaThreadOption", 
        "groupReplication", "groupReplicationStartOptions", "groupReplicationStartOption", 
        "groupReplicationUser", "groupReplicationPassword", "groupReplicationPluginAuth", 
        "replica", "preparedStatement", "executeStatement", "executeVarList", 
        "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
        "alterUserStatement", "alterUserList", "alterUser", "oldAlterUser", 
        "userFunction", "createUserStatement", "createUserTail", "userAttributes", 
        "defaultRoleClause", "requireClause", "connectOptions", "accountLockPasswordExpireOptions", 
        "userAttribute", "dropUserStatement", "grantStatement", "grantTargetList", 
        "grantOptions", "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause", 
        "renameUserStatement", "revokeStatement", "aclType", "roleOrPrivilegesList", 
        "roleOrPrivilege", "grantIdentifier", "requireList", "requireListElement", 
        "grantOption", "setRoleStatement", "roleList", "role", "tableAdministrationStatement", 
        "histogram", "checkOption", "repairType", "installUninstallStatement", 
        "setStatement", "startOptionValueList", "transactionCharacteristics", 
        "transactionAccessMode", "isolationLevel", "optionValueListContinued", 
        "optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
        "optionValueFollowingOptionType", "setExprOrDefault", "showDatabasesStatement", 
        "showTablesStatement", "showTriggersStatement", "showEventsStatement", 
        "showTableStatusStatement", "showOpenTablesStatement", "showPluginsStatement", 
        "showEngineLogsStatement", "showEngineMutexStatement", "showEngineStatusStatement", 
        "showColumnsStatement", "showBinaryLogsStatement", "showReplicasStatement", 
        "showBinlogEventsStatement", "showRelaylogEventsStatement", "showKeysStatement", 
        "showEnginesStatement", "showCountWarningsStatement", "showCountErrorsStatement", 
        "showWarningsStatement", "showErrorsStatement", "showProfilesStatement", 
        "showProfileStatement", "showStatusStatement", "showProcessListStatement", 
        "showVariablesStatement", "showCharacterSetStatement", "showCollationStatement", 
        "showPrivilegesStatement", "showGrantsStatement", "showCreateDatabaseStatement", 
        "showCreateTableStatement", "showCreateViewStatement", "showMasterStatusStatement", 
        "showReplicaStatusStatement", "showCreateProcedureStatement", "showCreateFunctionStatement", 
        "showCreateTriggerStatement", "showCreateProcedureStatusStatement", 
        "showCreateFunctionStatusStatement", "showCreateProcedureCodeStatement", 
        "showCreateFunctionCodeStatement", "showCreateEventStatement", "showCreateUserStatement", 
        "showCommandType", "engineOrAll", "fromOrIn", "inDb", "profileDefinitions", 
        "profileDefinition", "otherAdministrativeStatement", "keyCacheListOrParts", 
        "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
        "cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", 
        "logType", "flushTables", "flushTablesOptions", "preloadTail", "preloadList", 
        "preloadKeys", "adminPartition", "resourceGroupManagement", "createResourceGroup", 
        "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
        "resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
        "threadIdList", "dropResourceGroup", "utilityStatement", "describeStatement", 
        "explainStatement", "explainableStatement", "helpCommand", "useCommand", 
        "restartServer", "expr", "boolPri", "compOp", "predicate", "predicateOperations", 
        "bitExpr", "simpleExpr", "arrayCast", "jsonOperator", "sumExpr", 
        "groupingOperation", "windowFunctionCall", "windowingClause", "leadLagInfo", 
        "stableInteger", "paramOrVar", "nullTreatment", "jsonFunction", 
        "inSumExpr", "identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
        "returningType", "geometryFunction", "timeFunctionParameters", "fractionalPrecision", 
        "weightStringLevels", "weightStringLevelListItem", "dateTimeTtype", 
        "trimFunction", "substringFunction", "functionCall", "udfExprList", 
        "udfExpr", "userVariable", "inExpressionUserVariableAssignment", 
        "rvalueSystemOrUserVariable", "lvalueVariable", "rvalueSystemVariable", 
        "whenExpression", "thenExpression", "elseExpression", "castType", 
        "exprList", "charset", "notRule", "not2Rule", "interval", "intervalTimeStamp", 
        "exprListWithParentheses", "exprWithParentheses", "simpleExprWithParentheses", 
        "orderList", "orderExpression", "groupList", "groupingExpression", 
        "channel", "compoundStatement", "returnStatement", "ifStatement", 
        "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
        "elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
        "labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", 
        "repeatUntilBlock", "spDeclarations", "spDeclaration", "variableDeclaration", 
        "conditionDeclaration", "spCondition", "sqlstate", "handlerDeclaration", 
        "handlerCondition", "cursorDeclaration", "iterateStatement", "leaveStatement", 
        "getDiagnosticsStatement", "signalAllowedExpr", "statementInformationItem", 
        "conditionInformationItem", "signalInformationItemName", "signalStatement", 
        "resignalStatement", "signalInformationItem", "cursorOpen", "cursorClose", 
        "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
        "checkConstraint", "constraintEnforcement", "tableConstraintDef", 
        "constraintName", "fieldDefinition", "columnAttribute", "columnFormat", 
        "storageMedia", "now", "nowOrSignedLiteral", "gcolAttribute", "references", 
        "deleteOption", "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
        "indexType", "indexOption", "commonIndexOption", "visibility", "indexTypeClause", 
        "fulltextIndexOption", "spatialIndexOption", "dataTypeDefinition", 
        "dataType", "nchar", "realType", "fieldLength", "fieldOptions", 
        "charsetWithOptBinary", "ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", 
        "functionDatetimePrecision", "charsetName", "collationName", "createTableOptions", 
        "createTableOptionsEtc", "createPartitioningEtc", "createTableOptionsSpaceSeparated", 
        "createTableOption", "ternaryOption", "defaultCollation", "defaultEncryption", 
        "defaultCharset", "partitionClause", "partitionTypeDef", "subPartitions", 
        "partitionKeyAlgorithm", "partitionDefinitions", "partitionDefinition", 
        "partitionValuesIn", "partitionOption", "subpartitionDefinition", 
        "partitionValueItemListParen", "partitionValueItem", "definerClause", 
        "ifExists", "ifNotExists", "ignoreUnknownUser", "procedureParameter", 
        "functionParameter", "collate", "typeWithOptCollate", "schemaIdentifierPair", 
        "viewRefList", "updateList", "updateElement", "charsetClause", "fieldsClause", 
        "fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
        "createUser", "createUserWithMfa", "identification", "identifiedByPassword", 
        "identifiedByRandomPassword", "identifiedWithPlugin", "identifiedWithPluginAsAuth", 
        "identifiedWithPluginByPassword", "identifiedWithPluginByRandomPassword", 
        "initialAuth", "retainCurrentPassword", "discardOldPassword", "userRegistration", 
        "factor", "replacePassword", "userIdentifierOrText", "user", "likeClause", 
        "likeOrWhere", "onlineOption", "noWriteToBinLog", "usePartition", 
        "fieldIdentifier", "columnName", "columnInternalRef", "columnInternalRefList", 
        "columnRef", "insertIdentifier", "indexName", "indexRef", "tableWild", 
        "schemaName", "schemaRef", "procedureName", "procedureRef", "functionName", 
        "functionRef", "triggerName", "triggerRef", "viewName", "viewRef", 
        "tablespaceName", "tablespaceRef", "logfileGroupName", "logfileGroupRef", 
        "eventName", "eventRef", "udfName", "serverName", "serverRef", "engineRef", 
        "tableName", "filterTableRef", "tableRefWithWildcard", "tableRef", 
        "tableRefList", "tableAliasRefList", "parameterName", "labelIdentifier", 
        "labelRef", "roleIdentifier", "pluginRef", "componentRef", "resourceGroupRef", 
        "windowName", "pureIdentifier", "identifier", "identifierList", 
        "identifierListWithParentheses", "qualifiedIdentifier", "simpleIdentifier", 
        "dotIdentifier", "ulong_number", "real_ulong_number", "ulonglong_number", 
        "real_ulonglong_number", "signedLiteral", "signedLiteralOrNull", 
        "literal", "literalOrNull", "nullAsLiteral", "stringList", "textStringLiteral", 
        "textString", "textStringHash", "textLiteral", "textStringNoLinebreak", 
        "textStringLiteralList", "numLiteral", "boolLiteral", "nullLiteral", 
        "int64Literal", "temporalLiteral", "floatOptions", "standardFloatOptions", 
        "precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
        "sizeNumber", "parentheses", "equal", "optionType", "rvalueSystemVariableType", 
        "setVarIdentType", "jsonAttribute", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", 
        "identifierKeywordsAmbiguous2Labels", "labelKeyword", "identifierKeywordsAmbiguous3Roles", 
        "identifierKeywordsUnambiguous", "roleKeyword", "lValueKeyword", 
        "identifierKeywordsAmbiguous4SystemVariables", "roleOrIdentifierKeyword", 
        "roleOrLabelKeyword",
    ];
    public getGrammarFileName(): string { return "MySQLParser.g4"; }
    public getLiteralNames(): string[] { return MySQLParser.literalNames; }
    public getSymbolicNames(): string[] { return MySQLParser.symbolicNames; }

    public override getRuleNames(): StringVector {
        const result = new StringVector();
        MySQLParser.ruleNames.forEach((ruleName) => { result.push_back(ruleName); });

        return result;
    }

    public override getSerializedATN(): SerializedATNView { return MySQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
        if (predicate === undefined) {
            return new FailedPredicateException(this);
        } else if (message === undefined) {
            return new FailedPredicateException(this, predicate);
        }

        return new FailedPredicateException(this, predicate, message);
    }

    constructor(input: TokenStream) {
        super(input);

        const atn = this.getATN();
        const decisionsToDFA: DFA[] = [];
        const vector = atn.decisionToState;
        for (let i = 0; i < vector.size(); i++) {
            decisionsToDFA.push(new DFA(vector.get(i), i));
        }

        this.setInterpreter(new ParserATNSimulator(this, atn, decisionsToDFA, new PredictionContextCache()));
    }
    public query(): QueryContext {
        let localctx = new QueryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 0, MySQLParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1455);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 2, this.getContext())) {
                case 1:
                    {
                    this.setState(1450);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 0, this.getContext())) {
                        case 1:
                            {
                            this.setState(1448);
                            this.simpleStatement();
                            }
                            break;
                        case 2:
                            {
                            this.setState(1449);
                            this.beginWork();
                            }
                            break;
                    }
                    this.setState(1453);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 774) {
                        {
                        this.setState(1452);
                        this.match(MySQLParser.SEMICOLON_SYMBOL);
                        }
                    }

                    }
                    break;
            }
            this.setState(1457);
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public simpleStatement(): SimpleStatementContext {
        let localctx = new SimpleStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 2, MySQLParser.RULE_simpleStatement);
        try {
            this.setState(1532);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 3, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1459);
                    this.alterStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1460);
                    this.createStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(1461);
                    this.dropStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(1462);
                    this.renameTableStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(1463);
                    this.truncateTableStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(1464);
                    this.importStatement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(1465);
                    this.callStatement();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(1466);
                    this.deleteStatement();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(1467);
                    this.doStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(1468);
                    this.handlerStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(1469);
                    this.insertStatement();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(1470);
                    this.loadStatement();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(1471);
                    this.replaceStatement();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(1472);
                    this.selectStatement();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(1473);
                    this.updateStatement();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(1474);
                    this.transactionOrLockingStatement();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(1475);
                    this.replicationStatement();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(1476);
                    this.preparedStatement();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(1477);
                    this.cloneStatement();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(1478);
                    this.accountManagementStatement();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(1479);
                    this.tableAdministrationStatement();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(1480);
                    this.installUninstallStatement();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(1481);
                    this.setStatement();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(1482);
                    this.showDatabasesStatement();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(1483);
                    this.showTablesStatement();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(1484);
                    this.showTriggersStatement();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(1485);
                    this.showEventsStatement();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(1486);
                    this.showTableStatusStatement();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(1487);
                    this.showOpenTablesStatement();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                    this.setState(1488);
                    this.showPluginsStatement();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                    this.setState(1489);
                    this.showEngineLogsStatement();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                    this.setState(1490);
                    this.showEngineMutexStatement();
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                    this.setState(1491);
                    this.showEngineStatusStatement();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                    this.setState(1492);
                    this.showColumnsStatement();
                    }
                    break;
                case 35:
                    this.enterOuterAlt(localctx, 35);
                    {
                    this.setState(1493);
                    this.showBinaryLogsStatement();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(localctx, 36);
                    {
                    this.setState(1494);
                    this.showReplicasStatement();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(localctx, 37);
                    {
                    this.setState(1495);
                    this.showBinlogEventsStatement();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(localctx, 38);
                    {
                    this.setState(1496);
                    this.showRelaylogEventsStatement();
                    }
                    break;
                case 39:
                    this.enterOuterAlt(localctx, 39);
                    {
                    this.setState(1497);
                    this.showKeysStatement();
                    }
                    break;
                case 40:
                    this.enterOuterAlt(localctx, 40);
                    {
                    this.setState(1498);
                    this.showEnginesStatement();
                    }
                    break;
                case 41:
                    this.enterOuterAlt(localctx, 41);
                    {
                    this.setState(1499);
                    this.showCountWarningsStatement();
                    }
                    break;
                case 42:
                    this.enterOuterAlt(localctx, 42);
                    {
                    this.setState(1500);
                    this.showCountErrorsStatement();
                    }
                    break;
                case 43:
                    this.enterOuterAlt(localctx, 43);
                    {
                    this.setState(1501);
                    this.showWarningsStatement();
                    }
                    break;
                case 44:
                    this.enterOuterAlt(localctx, 44);
                    {
                    this.setState(1502);
                    this.showErrorsStatement();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(localctx, 45);
                    {
                    this.setState(1503);
                    this.showProfilesStatement();
                    }
                    break;
                case 46:
                    this.enterOuterAlt(localctx, 46);
                    {
                    this.setState(1504);
                    this.showProfileStatement();
                    }
                    break;
                case 47:
                    this.enterOuterAlt(localctx, 47);
                    {
                    this.setState(1505);
                    this.showStatusStatement();
                    }
                    break;
                case 48:
                    this.enterOuterAlt(localctx, 48);
                    {
                    this.setState(1506);
                    this.showProcessListStatement();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(localctx, 49);
                    {
                    this.setState(1507);
                    this.showVariablesStatement();
                    }
                    break;
                case 50:
                    this.enterOuterAlt(localctx, 50);
                    {
                    this.setState(1508);
                    this.showCharacterSetStatement();
                    }
                    break;
                case 51:
                    this.enterOuterAlt(localctx, 51);
                    {
                    this.setState(1509);
                    this.showCollationStatement();
                    }
                    break;
                case 52:
                    this.enterOuterAlt(localctx, 52);
                    {
                    this.setState(1510);
                    this.showPrivilegesStatement();
                    }
                    break;
                case 53:
                    this.enterOuterAlt(localctx, 53);
                    {
                    this.setState(1511);
                    this.showGrantsStatement();
                    }
                    break;
                case 54:
                    this.enterOuterAlt(localctx, 54);
                    {
                    this.setState(1512);
                    this.showCreateDatabaseStatement();
                    }
                    break;
                case 55:
                    this.enterOuterAlt(localctx, 55);
                    {
                    this.setState(1513);
                    this.showCreateTableStatement();
                    }
                    break;
                case 56:
                    this.enterOuterAlt(localctx, 56);
                    {
                    this.setState(1514);
                    this.showCreateViewStatement();
                    }
                    break;
                case 57:
                    this.enterOuterAlt(localctx, 57);
                    {
                    this.setState(1515);
                    this.showMasterStatusStatement();
                    }
                    break;
                case 58:
                    this.enterOuterAlt(localctx, 58);
                    {
                    this.setState(1516);
                    this.showReplicaStatusStatement();
                    }
                    break;
                case 59:
                    this.enterOuterAlt(localctx, 59);
                    {
                    this.setState(1517);
                    this.showCreateProcedureStatement();
                    }
                    break;
                case 60:
                    this.enterOuterAlt(localctx, 60);
                    {
                    this.setState(1518);
                    this.showCreateFunctionStatement();
                    }
                    break;
                case 61:
                    this.enterOuterAlt(localctx, 61);
                    {
                    this.setState(1519);
                    this.showCreateTriggerStatement();
                    }
                    break;
                case 62:
                    this.enterOuterAlt(localctx, 62);
                    {
                    this.setState(1520);
                    this.showCreateProcedureStatusStatement();
                    }
                    break;
                case 63:
                    this.enterOuterAlt(localctx, 63);
                    {
                    this.setState(1521);
                    this.showCreateFunctionStatusStatement();
                    }
                    break;
                case 64:
                    this.enterOuterAlt(localctx, 64);
                    {
                    this.setState(1522);
                    this.showCreateProcedureCodeStatement();
                    }
                    break;
                case 65:
                    this.enterOuterAlt(localctx, 65);
                    {
                    this.setState(1523);
                    this.showCreateFunctionCodeStatement();
                    }
                    break;
                case 66:
                    this.enterOuterAlt(localctx, 66);
                    {
                    this.setState(1524);
                    this.showCreateEventStatement();
                    }
                    break;
                case 67:
                    this.enterOuterAlt(localctx, 67);
                    {
                    this.setState(1525);
                    this.showCreateUserStatement();
                    }
                    break;
                case 68:
                    this.enterOuterAlt(localctx, 68);
                    {
                    this.setState(1526);
                    this.resourceGroupManagement();
                    }
                    break;
                case 69:
                    this.enterOuterAlt(localctx, 69);
                    {
                    this.setState(1527);
                    this.otherAdministrativeStatement();
                    }
                    break;
                case 70:
                    this.enterOuterAlt(localctx, 70);
                    {
                    this.setState(1528);
                    this.utilityStatement();
                    }
                    break;
                case 71:
                    this.enterOuterAlt(localctx, 71);
                    {
                    this.setState(1529);
                    this.getDiagnosticsStatement();
                    }
                    break;
                case 72:
                    this.enterOuterAlt(localctx, 72);
                    {
                    this.setState(1530);
                    this.signalStatement();
                    }
                    break;
                case 73:
                    this.enterOuterAlt(localctx, 73);
                    {
                    this.setState(1531);
                    this.resignalStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterStatement(): AlterStatementContext {
        let localctx = new AlterStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 4, MySQLParser.RULE_alterStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1534);
            this.match(MySQLParser.ALTER_SYMBOL);
            this.setState(1555);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 6, this.getContext())) {
                case 1:
                    {
                    this.setState(1535);
                    this.alterTable();
                    }
                    break;
                case 2:
                    {
                    this.setState(1536);
                    this.alterDatabase();
                    }
                    break;
                case 3:
                    {
                    this.setState(1537);
                    this.match(MySQLParser.PROCEDURE_SYMBOL);
                    this.setState(1538);
                    this.procedureRef();
                    this.setState(1540);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 75 || _la === 90 || _la === 137 || _la === 267 || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la === 433 || _la === 537) {
                        {
                        this.setState(1539);
                        this.routineAlterOptions();
                        }
                    }

                    }
                    break;
                case 4:
                    {
                    this.setState(1542);
                    this.match(MySQLParser.FUNCTION_SYMBOL);
                    this.setState(1543);
                    this.functionRef();
                    this.setState(1545);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 75 || _la === 90 || _la === 137 || _la === 267 || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la === 433 || _la === 537) {
                        {
                        this.setState(1544);
                        this.routineAlterOptions();
                        }
                    }

                    }
                    break;
                case 5:
                    {
                    this.setState(1547);
                    this.alterView();
                    }
                    break;
                case 6:
                    {
                    this.setState(1548);
                    this.alterEvent();
                    }
                    break;
                case 7:
                    {
                    this.setState(1549);
                    this.alterTablespace();
                    }
                    break;
                case 8:
                    {
                    this.setState(1550);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(1551);
                    this.alterUndoTablespace();
                    }
                    break;
                case 9:
                    {
                    this.setState(1552);
                    this.alterLogfileGroup();
                    }
                    break;
                case 10:
                    {
                    this.setState(1553);
                    this.alterServer();
                    }
                    break;
                case 11:
                    {
                    this.setState(1554);
                    this.alterInstanceStatement();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterDatabase(): AlterDatabaseContext {
        let localctx = new AlterDatabaseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 6, MySQLParser.RULE_alterDatabase);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1557);
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.setState(1558);
            this.schemaRef();
            this.setState(1560);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(1559);
                            this.alterDatabaseOption();
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(1562);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 7, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterDatabaseOption(): AlterDatabaseOptionContext {
        let localctx = new AlterDatabaseOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 8, MySQLParser.RULE_alterDatabaseOption);
        let _la: number;
        try {
            this.setState(1571);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 9, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1564);
                    this.createDatabaseOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1565);
                    this.match(MySQLParser.READ_SYMBOL);
                    this.setState(1566);
                    this.match(MySQLParser.ONLY_SYMBOL);
                    this.setState(1568);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(1567);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(1570);
                    this.ternaryOption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterEvent(): AlterEventContext {
        let localctx = new AlterEventContext(this.getContext(), this.getState());
        this.enterRule(localctx, 10, MySQLParser.RULE_alterEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1574);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 130) {
                {
                this.setState(1573);
                this.definerClause();
                }
            }

            this.setState(1576);
            this.match(MySQLParser.EVENT_SYMBOL);
            this.setState(1577);
            this.eventRef();
            this.setState(1581);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 11, this.getContext())) {
                case 1:
                    {
                    this.setState(1578);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(1579);
                    this.match(MySQLParser.SCHEDULE_SYMBOL);
                    this.setState(1580);
                    this.schedule();
                    }
                    break;
            }
            this.setState(1589);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 383) {
                {
                this.setState(1583);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(1584);
                this.match(MySQLParser.COMPLETION_SYMBOL);
                this.setState(1586);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 371) {
                    {
                    this.setState(1585);
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.setState(1588);
                this.match(MySQLParser.PRESERVE_SYMBOL);
                }
            }

            this.setState(1594);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 453) {
                {
                this.setState(1591);
                this.match(MySQLParser.RENAME_SYMBOL);
                this.setState(1592);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(1593);
                this.identifier();
                }
            }

            this.setState(1602);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ENABLE_SYMBOL:
                {
                this.setState(1596);
                this.match(MySQLParser.ENABLE_SYMBOL);
                }
                break;
            case MySQLParser.DISABLE_SYMBOL:
                {
                this.setState(1597);
                this.match(MySQLParser.DISABLE_SYMBOL);
                this.setState(1600);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 383) {
                    {
                    this.setState(1598);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(1599);
                    this.replica();
                    }
                }

                }
                break;
            case MySQLParser.EOF:
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.DO_SYMBOL:
            case MySQLParser.SEMICOLON_SYMBOL:
                break;
            default:
                break;
            }
            this.setState(1606);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 75) {
                {
                this.setState(1604);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(1605);
                this.textLiteral();
                }
            }

            this.setState(1610);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 147) {
                {
                this.setState(1608);
                this.match(MySQLParser.DO_SYMBOL);
                this.setState(1609);
                this.compoundStatement();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterLogfileGroup(): AlterLogfileGroupContext {
        let localctx = new AlterLogfileGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 12, MySQLParser.RULE_alterLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1612);
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.setState(1613);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(1614);
            this.logfileGroupRef();
            this.setState(1615);
            this.match(MySQLParser.ADD_SYMBOL);
            this.setState(1616);
            this.match(MySQLParser.UNDOFILE_SYMBOL);
            this.setState(1617);
            this.textLiteral();
            this.setState(1619);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 163 || _la === 238 || _la === 374 || _la === 553 || _la === 638) {
                {
                this.setState(1618);
                this.alterLogfileGroupOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext {
        let localctx = new AlterLogfileGroupOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 14, MySQLParser.RULE_alterLogfileGroupOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1621);
            this.alterLogfileGroupOption();
            this.setState(1628);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 163 || _la === 238 || _la === 374 || _la === 553 || _la === 638 || _la === 773) {
                {
                {
                this.setState(1623);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(1622);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(1625);
                this.alterLogfileGroupOption();
                }
                }
                this.setState(1630);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterLogfileGroupOption(): AlterLogfileGroupOptionContext {
        let localctx = new AlterLogfileGroupOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 16, MySQLParser.RULE_alterLogfileGroupOption);
        try {
            this.setState(1634);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(1631);
                this.tsOptionInitialSize();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(1632);
                this.tsOptionEngine();
                }
                break;
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(1633);
                this.tsOptionWait();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterServer(): AlterServerContext {
        let localctx = new AlterServerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 18, MySQLParser.RULE_alterServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1636);
            this.match(MySQLParser.SERVER_SYMBOL);
            this.setState(1637);
            this.serverRef();
            this.setState(1638);
            this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTable(): AlterTableContext {
        let localctx = new AlterTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 20, MySQLParser.RULE_alterTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1641);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 380 || _la === 385) {
                {
                this.setState(1640);
                this.onlineOption();
                }
            }

            this.setState(1643);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(1644);
            this.tableRef();
            this.setState(1646);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 24, this.getContext())) {
                case 1:
                    {
                    this.setState(1645);
                    this.alterTableActions();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTableActions(): AlterTableActionsContext {
        let localctx = new AlterTableActionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 22, MySQLParser.RULE_alterTableActions);
        try {
            this.setState(1661);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 27, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1648);
                    this.alterCommandList();
                    this.setState(1651);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.PARTITION_SYMBOL:
                        {
                        this.setState(1649);
                        this.partitionClause();
                        }
                        break;
                    case MySQLParser.REMOVE_SYMBOL:
                        {
                        this.setState(1650);
                        this.removePartitioning();
                        }
                        break;
                    case MySQLParser.EOF:
                    case MySQLParser.SEMICOLON_SYMBOL:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1653);
                    this.partitionClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(1654);
                    this.removePartitioning();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(1658);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 26, this.getContext())) {
                        case 1:
                            {
                            this.setState(1655);
                            this.alterCommandsModifierList();
                            this.setState(1656);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1660);
                    this.standaloneAlterCommands();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterCommandList(): AlterCommandListContext {
        let localctx = new AlterCommandListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 24, MySQLParser.RULE_alterCommandList);
        try {
            this.setState(1670);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 29, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1663);
                    this.alterCommandsModifierList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1667);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 28, this.getContext())) {
                        case 1:
                            {
                            this.setState(1664);
                            this.alterCommandsModifierList();
                            this.setState(1665);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1669);
                    this.alterList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext {
        let localctx = new AlterCommandsModifierListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 26, MySQLParser.RULE_alterCommandsModifierList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1672);
            this.alterCommandsModifier();
            this.setState(1677);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 30, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(1673);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(1674);
                    this.alterCommandsModifier();
                    }
                    }
                }
                this.setState(1679);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 30, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public standaloneAlterCommands(): StandaloneAlterCommandsContext {
        let localctx = new StandaloneAlterCommandsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 28, MySQLParser.RULE_standaloneAlterCommands);
        let _la: number;
        try {
            this.setState(1687);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 31, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1680);
                    this.match(MySQLParser.DISCARD_SYMBOL);
                    this.setState(1681);
                    this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1682);
                    this.match(MySQLParser.IMPORT_SYMBOL);
                    this.setState(1683);
                    this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(1684);
                    this.alterPartition();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(1685);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(1686);
                    _la = this.input().LA(1);
                    if(!(_la === 722 || _la === 723)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterPartition(): AlterPartitionContext {
        let localctx = new AlterPartitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 30, MySQLParser.RULE_alterPartition);
        let _la: number;
        try {
            this.setState(1783);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ADD_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(1689);
                this.match(MySQLParser.ADD_SYMBOL);
                this.setState(1690);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1692);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284 || _la === 375) {
                    {
                    this.setState(1691);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(1697);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.OPEN_PAR_SYMBOL:
                    {
                    this.setState(1694);
                    this.partitionDefinitions();
                    }
                    break;
                case MySQLParser.PARTITIONS_SYMBOL:
                    {
                    this.setState(1695);
                    this.match(MySQLParser.PARTITIONS_SYMBOL);
                    this.setState(1696);
                    this.real_ulong_number();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(1699);
                this.match(MySQLParser.DROP_SYMBOL);
                this.setState(1700);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1701);
                this.identifierList();
                }
                break;
            case MySQLParser.REBUILD_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(1702);
                this.match(MySQLParser.REBUILD_SYMBOL);
                this.setState(1703);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1705);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 34, this.getContext())) {
                    case 1:
                        {
                        this.setState(1704);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1707);
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.OPTIMIZE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(1708);
                this.match(MySQLParser.OPTIMIZE_SYMBOL);
                this.setState(1709);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1711);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 35, this.getContext())) {
                    case 1:
                        {
                        this.setState(1710);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1713);
                this.allOrPartitionNameList();
                this.setState(1715);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284 || _la === 375) {
                    {
                    this.setState(1714);
                    this.noWriteToBinLog();
                    }
                }

                }
                break;
            case MySQLParser.ANALYZE_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(1717);
                this.match(MySQLParser.ANALYZE_SYMBOL);
                this.setState(1718);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1720);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 37, this.getContext())) {
                    case 1:
                        {
                        this.setState(1719);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1722);
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.CHECK_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(1723);
                this.match(MySQLParser.CHECK_SYMBOL);
                this.setState(1724);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1725);
                this.allOrPartitionNameList();
                this.setState(1729);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 56 || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 1048593) !== 0) || _la === 333 || _la === 431) {
                    {
                    {
                    this.setState(1726);
                    this.checkOption();
                    }
                    }
                    this.setState(1731);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.REPAIR_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(1732);
                this.match(MySQLParser.REPAIR_SYMBOL);
                this.setState(1733);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1735);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 39, this.getContext())) {
                    case 1:
                        {
                        this.setState(1734);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1737);
                this.allOrPartitionNameList();
                this.setState(1741);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 180 || _la === 431 || _la === 619) {
                    {
                    {
                    this.setState(1738);
                    this.repairType();
                    }
                    }
                    this.setState(1743);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.COALESCE_SYMBOL:
                this.enterOuterAlt(localctx, 8);
                {
                this.setState(1744);
                this.match(MySQLParser.COALESCE_SYMBOL);
                this.setState(1745);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1747);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284 || _la === 375) {
                    {
                    this.setState(1746);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(1749);
                this.real_ulong_number();
                }
                break;
            case MySQLParser.TRUNCATE_SYMBOL:
                this.enterOuterAlt(localctx, 9);
                {
                this.setState(1750);
                this.match(MySQLParser.TRUNCATE_SYMBOL);
                this.setState(1751);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1752);
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.REORGANIZE_SYMBOL:
                this.enterOuterAlt(localctx, 10);
                {
                this.setState(1753);
                this.match(MySQLParser.REORGANIZE_SYMBOL);
                this.setState(1754);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1756);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 42, this.getContext())) {
                    case 1:
                        {
                        this.setState(1755);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1762);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 43, this.getContext())) {
                    case 1:
                        {
                        this.setState(1758);
                        this.identifierList();
                        this.setState(1759);
                        this.match(MySQLParser.INTO_SYMBOL);
                        this.setState(1760);
                        this.partitionDefinitions();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.EXCHANGE_SYMBOL:
                this.enterOuterAlt(localctx, 11);
                {
                this.setState(1764);
                this.match(MySQLParser.EXCHANGE_SYMBOL);
                this.setState(1765);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1766);
                this.identifier();
                this.setState(1767);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(1768);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(1769);
                this.tableRef();
                this.setState(1771);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 645 || _la === 646) {
                    {
                    this.setState(1770);
                    this.withValidation();
                    }
                }

                }
                break;
            case MySQLParser.DISCARD_SYMBOL:
                this.enterOuterAlt(localctx, 12);
                {
                this.setState(1773);
                this.match(MySQLParser.DISCARD_SYMBOL);
                this.setState(1774);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1775);
                this.allOrPartitionNameList();
                this.setState(1776);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                }
                break;
            case MySQLParser.IMPORT_SYMBOL:
                this.enterOuterAlt(localctx, 13);
                {
                this.setState(1778);
                this.match(MySQLParser.IMPORT_SYMBOL);
                this.setState(1779);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1780);
                this.allOrPartitionNameList();
                this.setState(1781);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterList(): AlterListContext {
        let localctx = new AlterListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 32, MySQLParser.RULE_alterList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1787);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 46, this.getContext())) {
                case 1:
                    {
                    this.setState(1785);
                    this.alterListItem();
                    }
                    break;
                case 2:
                    {
                    this.setState(1786);
                    this.createTableOptionsSpaceSeparated();
                    }
                    break;
            }
            this.setState(1797);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(1789);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(1793);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 47, this.getContext())) {
                    case 1:
                        {
                        this.setState(1790);
                        this.alterListItem();
                        }
                        break;
                    case 2:
                        {
                        this.setState(1791);
                        this.alterCommandsModifier();
                        }
                        break;
                    case 3:
                        {
                        this.setState(1792);
                        this.createTableOptionsSpaceSeparated();
                        }
                        break;
                }
                }
                }
                this.setState(1799);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterCommandsModifier(): AlterCommandsModifierContext {
        let localctx = new AlterCommandsModifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 34, MySQLParser.RULE_alterCommandsModifier);
        try {
            this.setState(1803);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(1800);
                this.alterAlgorithmOption();
                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(1801);
                this.alterLockOption();
                }
                break;
            case MySQLParser.WITH_SYMBOL:
            case MySQLParser.WITHOUT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(1802);
                this.withValidation();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterListItem(): AlterListItemContext {
        let localctx = new AlterListItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 36, MySQLParser.RULE_alterListItem);
        let _la: number;
        try {
            this.setState(1940);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 67, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1805);
                    this.match(MySQLParser.ADD_SYMBOL);
                    this.setState(1807);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 50, this.getContext())) {
                        case 1:
                            {
                            this.setState(1806);
                            this.match(MySQLParser.COLUMN_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1821);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 53, this.getContext())) {
                        case 1:
                            {
                            this.setState(1809);
                            this.identifier();
                            this.setState(1810);
                            this.fieldDefinition();
                            this.setState(1812);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 51, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(1811);
                                    this.checkOrReferences();
                                    }
                                    break;
                            }
                            this.setState(1815);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 6 || _la === 191) {
                                {
                                this.setState(1814);
                                this.place();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(1817);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(1818);
                            this.tableElementList();
                            this.setState(1819);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1823);
                    this.match(MySQLParser.ADD_SYMBOL);
                    this.setState(1824);
                    this.tableConstraintDef();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(1825);
                    this.match(MySQLParser.CHANGE_SYMBOL);
                    this.setState(1827);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 54, this.getContext())) {
                        case 1:
                            {
                            this.setState(1826);
                            this.match(MySQLParser.COLUMN_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1829);
                    this.columnInternalRef();
                    this.setState(1830);
                    this.identifier();
                    this.setState(1831);
                    this.fieldDefinition();
                    this.setState(1833);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6 || _la === 191) {
                        {
                        this.setState(1832);
                        this.place();
                        }
                    }

                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(1835);
                    this.match(MySQLParser.MODIFY_SYMBOL);
                    this.setState(1837);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 56, this.getContext())) {
                        case 1:
                            {
                            this.setState(1836);
                            this.match(MySQLParser.COLUMN_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1839);
                    this.columnInternalRef();
                    this.setState(1840);
                    this.fieldDefinition();
                    this.setState(1842);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6 || _la === 191) {
                        {
                        this.setState(1841);
                        this.place();
                        }
                    }

                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(1844);
                    this.match(MySQLParser.DROP_SYMBOL);
                    this.setState(1866);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 60, this.getContext())) {
                        case 1:
                            {
                            this.setState(1846);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 58, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(1845);
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                    }
                                    break;
                            }
                            this.setState(1848);
                            this.columnInternalRef();
                            this.setState(1850);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 49 || _la === 471) {
                                {
                                this.setState(1849);
                                this.restrict();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(1852);
                            this.match(MySQLParser.FOREIGN_SYMBOL);
                            this.setState(1853);
                            this.match(MySQLParser.KEY_SYMBOL);
                            this.setState(1854);
                            this.columnInternalRef();
                            }
                            break;
                        case 3:
                            {
                            this.setState(1855);
                            this.match(MySQLParser.PRIMARY_SYMBOL);
                            this.setState(1856);
                            this.match(MySQLParser.KEY_SYMBOL);
                            }
                            break;
                        case 4:
                            {
                            this.setState(1857);
                            this.keyOrIndex();
                            this.setState(1858);
                            this.indexRef();
                            }
                            break;
                        case 5:
                            {
                            this.setState(1860);
                            if (!(this.serverVersion >= 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80017");
                            }
                            this.setState(1861);
                            this.match(MySQLParser.CHECK_SYMBOL);
                            this.setState(1862);
                            this.identifier();
                            }
                            break;
                        case 6:
                            {
                            this.setState(1863);
                            if (!(this.serverVersion >= 80019)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80019");
                            }
                            this.setState(1864);
                            this.match(MySQLParser.CONSTRAINT_SYMBOL);
                            this.setState(1865);
                            this.identifier();
                            }
                            break;
                    }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(1868);
                    this.match(MySQLParser.DISABLE_SYMBOL);
                    this.setState(1869);
                    this.match(MySQLParser.KEYS_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(1870);
                    this.match(MySQLParser.ENABLE_SYMBOL);
                    this.setState(1871);
                    this.match(MySQLParser.KEYS_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(1872);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(1874);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 61, this.getContext())) {
                        case 1:
                            {
                            this.setState(1873);
                            this.match(MySQLParser.COLUMN_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1876);
                    this.columnInternalRef();
                    this.setState(1889);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 63, this.getContext())) {
                        case 1:
                            {
                            this.setState(1877);
                            this.match(MySQLParser.SET_SYMBOL);
                            this.setState(1878);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            this.setState(1882);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 62, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(1879);
                                    if (!(this.serverVersion >= 80014)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                                    }
                                    this.setState(1880);
                                    this.exprWithParentheses();
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(1881);
                                    this.signedLiteralOrNull();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(1884);
                            this.match(MySQLParser.DROP_SYMBOL);
                            this.setState(1885);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                        case 3:
                            {
                            this.setState(1886);
                            if (!(this.serverVersion >= 80024)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80024");
                            }
                            this.setState(1887);
                            this.match(MySQLParser.SET_SYMBOL);
                            this.setState(1888);
                            this.visibility();
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(1891);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(1892);
                    this.match(MySQLParser.INDEX_SYMBOL);
                    this.setState(1893);
                    this.indexRef();
                    this.setState(1894);
                    this.visibility();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(1896);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(1897);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(1898);
                    this.match(MySQLParser.CHECK_SYMBOL);
                    this.setState(1899);
                    this.identifier();
                    this.setState(1900);
                    this.constraintEnforcement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(1902);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(1903);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(1904);
                    this.match(MySQLParser.CONSTRAINT_SYMBOL);
                    this.setState(1905);
                    this.identifier();
                    this.setState(1906);
                    this.constraintEnforcement();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(1908);
                    this.match(MySQLParser.RENAME_SYMBOL);
                    this.setState(1909);
                    this.match(MySQLParser.COLUMN_SYMBOL);
                    this.setState(1910);
                    this.columnInternalRef();
                    this.setState(1911);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(1912);
                    this.identifier();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(1914);
                    this.match(MySQLParser.RENAME_SYMBOL);
                    this.setState(1916);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 64, this.getContext())) {
                        case 1:
                            {
                            this.setState(1915);
                            _la = this.input().LA(1);
                            if(!(_la === 17 || _la === 590)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                    }
                    this.setState(1918);
                    this.tableName();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(1919);
                    this.match(MySQLParser.RENAME_SYMBOL);
                    this.setState(1920);
                    this.keyOrIndex();
                    this.setState(1921);
                    this.indexRef();
                    this.setState(1922);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(1923);
                    this.indexName();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(1925);
                    this.match(MySQLParser.CONVERT_SYMBOL);
                    this.setState(1926);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(1927);
                    this.charset();
                    this.setState(1931);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 65, this.getContext())) {
                        case 1:
                            {
                            this.setState(1928);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(1929);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(1930);
                            this.charsetName();
                            }
                            break;
                    }
                    this.setState(1934);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 69) {
                        {
                        this.setState(1933);
                        this.collate();
                        }
                    }

                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(1936);
                    this.match(MySQLParser.FORCE_SYMBOL);
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(1937);
                    this.match(MySQLParser.ORDER_SYMBOL);
                    this.setState(1938);
                    this.match(MySQLParser.BY_SYMBOL);
                    this.setState(1939);
                    this.alterOrderList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public place(): PlaceContext {
        let localctx = new PlaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 38, MySQLParser.RULE_place);
        try {
            this.setState(1945);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.AFTER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(1942);
                this.match(MySQLParser.AFTER_SYMBOL);
                this.setState(1943);
                this.identifier();
                }
                break;
            case MySQLParser.FIRST_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(1944);
                this.match(MySQLParser.FIRST_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public restrict(): RestrictContext {
        let localctx = new RestrictContext(this.getContext(), this.getState());
        this.enterRule(localctx, 40, MySQLParser.RULE_restrict);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1947);
            _la = this.input().LA(1);
            if(!(_la === 49 || _la === 471)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterOrderList(): AlterOrderListContext {
        let localctx = new AlterOrderListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 42, MySQLParser.RULE_alterOrderList);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1949);
            this.identifier();
            this.setState(1951);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 18 || _la === 134) {
                {
                this.setState(1950);
                this.direction();
                }
            }

            this.setState(1960);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 71, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(1953);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(1954);
                    this.identifier();
                    this.setState(1956);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 18 || _la === 134) {
                        {
                        this.setState(1955);
                        this.direction();
                        }
                    }

                    }
                    }
                }
                this.setState(1962);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 71, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext {
        let localctx = new AlterAlgorithmOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 44, MySQLParser.RULE_alterAlgorithmOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1963);
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.setState(1965);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 72, this.getContext())) {
                case 1:
                    {
                    this.setState(1964);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(1969);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 73, this.getContext())) {
                case 1:
                    {
                    this.setState(1967);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(1968);
                    this.identifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterLockOption(): AlterLockOptionContext {
        let localctx = new AlterLockOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 46, MySQLParser.RULE_alterLockOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1971);
            this.match(MySQLParser.LOCK_SYMBOL);
            this.setState(1973);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 74, this.getContext())) {
                case 1:
                    {
                    this.setState(1972);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(1977);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 75, this.getContext())) {
                case 1:
                    {
                    this.setState(1975);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(1976);
                    this.identifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
        let localctx = new IndexLockAndAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 48, MySQLParser.RULE_indexLockAndAlgorithm);
        let _la: number;
        try {
            this.setState(1987);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(1979);
                this.alterAlgorithmOption();
                this.setState(1981);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 287) {
                    {
                    this.setState(1980);
                    this.alterLockOption();
                    }
                }

                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(1983);
                this.alterLockOption();
                this.setState(1985);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 9) {
                    {
                    this.setState(1984);
                    this.alterAlgorithmOption();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public withValidation(): WithValidationContext {
        let localctx = new WithValidationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 50, MySQLParser.RULE_withValidation);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1989);
            _la = this.input().LA(1);
            if(!(_la === 645 || _la === 646)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(1990);
            this.match(MySQLParser.VALIDATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public removePartitioning(): RemovePartitioningContext {
        let localctx = new RemovePartitioningContext(this.getContext(), this.getState());
        this.enterRule(localctx, 52, MySQLParser.RULE_removePartitioning);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1992);
            this.match(MySQLParser.REMOVE_SYMBOL);
            this.setState(1993);
            this.match(MySQLParser.PARTITIONING_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        let localctx = new AllOrPartitionNameListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 54, MySQLParser.RULE_allOrPartitionNameList);
        try {
            this.setState(1997);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 79, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1995);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1996);
                    this.identifierList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTablespace(): AlterTablespaceContext {
        let localctx = new AlterTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 56, MySQLParser.RULE_alterTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1999);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2000);
            this.tablespaceRef();
            this.setState(2012);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 81, this.getContext())) {
                case 1:
                    {
                    this.setState(2001);
                    _la = this.input().LA(1);
                    if(!(_la === 4 || _la === 148)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(2002);
                    this.match(MySQLParser.DATAFILE_SYMBOL);
                    this.setState(2003);
                    this.textLiteral();
                    this.setState(2005);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 80, this.getContext())) {
                        case 1:
                            {
                            this.setState(2004);
                            this.alterTablespaceOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(2007);
                    this.match(MySQLParser.RENAME_SYMBOL);
                    this.setState(2008);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(2009);
                    this.identifier();
                    }
                    break;
                case 3:
                    {
                    this.setState(2010);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2011);
                    this.alterTablespaceOptions();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterUndoTablespace(): AlterUndoTablespaceContext {
        let localctx = new AlterUndoTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 58, MySQLParser.RULE_alterUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2014);
            this.match(MySQLParser.UNDO_SYMBOL);
            this.setState(2015);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2016);
            this.tablespaceRef();
            this.setState(2017);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(2018);
            _la = this.input().LA(1);
            if(!(_la === 724 || _la === 725)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2020);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 163 || _la === 553) {
                {
                this.setState(2019);
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
        let localctx = new UndoTableSpaceOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 60, MySQLParser.RULE_undoTableSpaceOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2022);
            this.undoTableSpaceOption();
            this.setState(2029);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 163 || _la === 553 || _la === 773) {
                {
                {
                this.setState(2024);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(2023);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(2026);
                this.undoTableSpaceOption();
                }
                }
                this.setState(2031);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public undoTableSpaceOption(): UndoTableSpaceOptionContext {
        let localctx = new UndoTableSpaceOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 62, MySQLParser.RULE_undoTableSpaceOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2032);
            this.tsOptionEngine();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTablespaceOptions(): AlterTablespaceOptionsContext {
        let localctx = new AlterTablespaceOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 64, MySQLParser.RULE_alterTablespaceOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2034);
            this.alterTablespaceOption();
            this.setState(2041);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 86, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2036);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 85, this.getContext())) {
                        case 1:
                            {
                            this.setState(2035);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(2038);
                    this.alterTablespaceOption();
                    }
                    }
                }
                this.setState(2043);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 86, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTablespaceOption(): AlterTablespaceOptionContext {
        let localctx = new AlterTablespaceOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 66, MySQLParser.RULE_alterTablespaceOption);
        try {
            this.setState(2056);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 88, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2044);
                    this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                    this.setState(2046);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 87, this.getContext())) {
                        case 1:
                            {
                            this.setState(2045);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(2048);
                    this.sizeNumber();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2049);
                    this.tsOptionAutoextendSize();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(2050);
                    this.tsOptionMaxSize();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(2051);
                    this.tsOptionEngine();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(2052);
                    this.tsOptionWait();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(2053);
                    this.tsOptionEncryption();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(2054);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(2055);
                    this.tsOptionEngineAttribute();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeTablespaceOption(): ChangeTablespaceOptionContext {
        let localctx = new ChangeTablespaceOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 68, MySQLParser.RULE_changeTablespaceOption);
        try {
            this.setState(2065);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2058);
                this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                this.setState(2060);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 89, this.getContext())) {
                    case 1:
                        {
                        this.setState(2059);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2062);
                this.sizeNumber();
                }
                break;
            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2063);
                this.tsOptionAutoextendSize();
                }
                break;
            case MySQLParser.MAX_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2064);
                this.tsOptionMaxSize();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterView(): AlterViewContext {
        let localctx = new AlterViewContext(this.getContext(), this.getState());
        this.enterRule(localctx, 70, MySQLParser.RULE_alterView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2068);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 9) {
                {
                this.setState(2067);
                this.viewAlgorithm();
                }
            }

            this.setState(2071);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 130) {
                {
                this.setState(2070);
                this.definerClause();
                }
            }

            this.setState(2074);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 537) {
                {
                this.setState(2073);
                this.viewSuid();
                }
            }

            this.setState(2076);
            this.match(MySQLParser.VIEW_SYMBOL);
            this.setState(2077);
            this.viewRef();
            this.setState(2078);
            this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewTail(): ViewTailContext {
        let localctx = new ViewTailContext(this.getContext(), this.getState());
        this.enterRule(localctx, 72, MySQLParser.RULE_viewTail);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2081);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(2080);
                this.columnInternalRefList();
                }
            }

            this.setState(2083);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(2084);
            this.viewQueryBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewQueryBlock(): ViewQueryBlockContext {
        let localctx = new ViewQueryBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 74, MySQLParser.RULE_viewQueryBlock);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2086);
            this.queryExpressionWithOptLockingClauses();
            this.setState(2088);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 645) {
                {
                this.setState(2087);
                this.viewCheckOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewCheckOption(): ViewCheckOptionContext {
        let localctx = new ViewCheckOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 76, MySQLParser.RULE_viewCheckOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2090);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(2092);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 50 || _la === 284) {
                {
                this.setState(2091);
                _la = this.input().LA(1);
                if(!(_la === 50 || _la === 284)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(2094);
            this.match(MySQLParser.CHECK_SYMBOL);
            this.setState(2095);
            this.match(MySQLParser.OPTION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterInstanceStatement(): AlterInstanceStatementContext {
        let localctx = new AlterInstanceStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 78, MySQLParser.RULE_alterInstanceStatement);
        let _la: number;
        try {
            this.setState(2129);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 100, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2097);
                    this.match(MySQLParser.INSTANCE_SYMBOL);
                    this.setState(2098);
                    this.match(MySQLParser.ROTATE_SYMBOL);
                    this.setState(2099);
                    this.textOrIdentifier();
                    this.setState(2100);
                    this.match(MySQLParser.MASTER_SYMBOL);
                    this.setState(2101);
                    this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2103);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(2127);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 99, this.getContext())) {
                        case 1:
                            {
                            this.setState(2104);
                            this.match(MySQLParser.RELOAD_SYMBOL);
                            this.setState(2105);
                            this.match(MySQLParser.TLS_SYMBOL);
                            this.setState(2119);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                            case MySQLParser.NO_SYMBOL:
                                {
                                this.setState(2106);
                                this.match(MySQLParser.NO_SYMBOL);
                                this.setState(2107);
                                this.match(MySQLParser.ROLLBACK_SYMBOL);
                                this.setState(2108);
                                this.match(MySQLParser.ON_SYMBOL);
                                this.setState(2109);
                                this.match(MySQLParser.ERROR_SYMBOL);
                                }
                                break;
                            case MySQLParser.FOR_SYMBOL:
                                {
                                this.setState(2110);
                                this.match(MySQLParser.FOR_SYMBOL);
                                this.setState(2111);
                                this.match(MySQLParser.CHANNEL_SYMBOL);
                                this.setState(2112);
                                this.identifier();
                                this.setState(2117);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                                if (_la === 373) {
                                    {
                                    this.setState(2113);
                                    this.match(MySQLParser.NO_SYMBOL);
                                    this.setState(2114);
                                    this.match(MySQLParser.ROLLBACK_SYMBOL);
                                    this.setState(2115);
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.setState(2116);
                                    this.match(MySQLParser.ERROR_SYMBOL);
                                    }
                                }

                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(2121);
                            _la = this.input().LA(1);
                            if(!(_la === 140 || _la === 156)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(2122);
                            this.identifier();
                            this.setState(2123);
                            this.identifier();
                            }
                            break;
                        case 3:
                            {
                            this.setState(2125);
                            this.match(MySQLParser.RELOAD_SYMBOL);
                            this.setState(2126);
                            this.match(MySQLParser.KEYRING_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createStatement(): CreateStatementContext {
        let localctx = new CreateStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 80, MySQLParser.RULE_createStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2131);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(2149);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 101, this.getContext())) {
                case 1:
                    {
                    this.setState(2132);
                    this.createDatabase();
                    }
                    break;
                case 2:
                    {
                    this.setState(2133);
                    this.createTable();
                    }
                    break;
                case 3:
                    {
                    this.setState(2134);
                    this.createFunction();
                    }
                    break;
                case 4:
                    {
                    this.setState(2135);
                    this.createProcedure();
                    }
                    break;
                case 5:
                    {
                    this.setState(2136);
                    this.createUdf();
                    }
                    break;
                case 6:
                    {
                    this.setState(2137);
                    this.createLogfileGroup();
                    }
                    break;
                case 7:
                    {
                    this.setState(2138);
                    this.createView();
                    }
                    break;
                case 8:
                    {
                    this.setState(2139);
                    this.createTrigger();
                    }
                    break;
                case 9:
                    {
                    this.setState(2140);
                    this.createIndex();
                    }
                    break;
                case 10:
                    {
                    this.setState(2141);
                    this.createServer();
                    }
                    break;
                case 11:
                    {
                    this.setState(2142);
                    this.createTablespace();
                    }
                    break;
                case 12:
                    {
                    this.setState(2143);
                    this.createEvent();
                    }
                    break;
                case 13:
                    {
                    this.setState(2144);
                    this.createRole();
                    }
                    break;
                case 14:
                    {
                    this.setState(2145);
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.setState(2146);
                    this.createSpatialReference();
                    }
                    break;
                case 15:
                    {
                    this.setState(2147);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2148);
                    this.createUndoTablespace();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createDatabase(): CreateDatabaseContext {
        let localctx = new CreateDatabaseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 82, MySQLParser.RULE_createDatabase);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2151);
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.setState(2153);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 102, this.getContext())) {
                case 1:
                    {
                    this.setState(2152);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2155);
            this.schemaName();
            this.setState(2159);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 103, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2156);
                    this.createDatabaseOption();
                    }
                    }
                }
                this.setState(2161);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 103, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createDatabaseOption(): CreateDatabaseOptionContext {
        let localctx = new CreateDatabaseOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 84, MySQLParser.RULE_createDatabaseOption);
        try {
            this.setState(2166);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 104, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2162);
                    this.defaultCharset();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2163);
                    this.defaultCollation();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(2164);
                    if (!(this.serverVersion >= 80016)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80016");
                    }
                    this.setState(2165);
                    this.defaultEncryption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTable(): CreateTableContext {
        let localctx = new CreateTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 86, MySQLParser.RULE_createTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2169);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 577) {
                {
                this.setState(2168);
                this.match(MySQLParser.TEMPORARY_SYMBOL);
                }
            }

            this.setState(2171);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(2173);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 106, this.getContext())) {
                case 1:
                    {
                    this.setState(2172);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2175);
            this.tableName();
            this.setState(2192);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 109, this.getContext())) {
                case 1:
                    {
                    this.setState(2180);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 107, this.getContext())) {
                        case 1:
                            {
                            this.setState(2176);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(2177);
                            this.tableElementList();
                            this.setState(2178);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                            break;
                    }
                    this.setState(2183);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 108, this.getContext())) {
                        case 1:
                            {
                            this.setState(2182);
                            this.createTableOptionsEtc();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(2185);
                    this.match(MySQLParser.LIKE_SYMBOL);
                    this.setState(2186);
                    this.tableRef();
                    }
                    break;
                case 3:
                    {
                    this.setState(2187);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(2188);
                    this.match(MySQLParser.LIKE_SYMBOL);
                    this.setState(2189);
                    this.tableRef();
                    this.setState(2190);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableElementList(): TableElementListContext {
        let localctx = new TableElementListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 88, MySQLParser.RULE_tableElementList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2194);
            this.tableElement();
            this.setState(2199);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(2195);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(2196);
                this.tableElement();
                }
                }
                this.setState(2201);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableElement(): TableElementContext {
        let localctx = new TableElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 90, MySQLParser.RULE_tableElement);
        try {
            this.setState(2204);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 111, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2202);
                    this.columnDefinition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2203);
                    this.tableConstraintDef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public duplicateAsQe(): DuplicateAsQeContext {
        let localctx = new DuplicateAsQeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 92, MySQLParser.RULE_duplicateAsQe);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2207);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 112, this.getContext())) {
                case 1:
                    {
                    this.setState(2206);
                    _la = this.input().LA(1);
                    if(!(_la === 232 || _la === 458)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
            this.setState(2209);
            this.asCreateQueryExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public asCreateQueryExpression(): AsCreateQueryExpressionContext {
        let localctx = new AsCreateQueryExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 94, MySQLParser.RULE_asCreateQueryExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2212);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 113, this.getContext())) {
                case 1:
                    {
                    this.setState(2211);
                    this.match(MySQLParser.AS_SYMBOL);
                    }
                    break;
            }
            this.setState(2214);
            this.queryExpressionWithOptLockingClauses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpressionOrParens(): QueryExpressionOrParensContext {
        let localctx = new QueryExpressionOrParensContext(this.getContext(), this.getState());
        this.enterRule(localctx, 96, MySQLParser.RULE_queryExpressionOrParens);
        try {
            this.setState(2222);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 115, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2216);
                    this.queryExpression();
                    this.setState(2219);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 114, this.getContext())) {
                        case 1:
                            {
                            this.setState(2217);
                            if (!(this.serverVersion >= 80031)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80031");
                            }
                            this.setState(2218);
                            this.lockingClauseList();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2221);
                    this.queryExpressionParens();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        let localctx = new QueryExpressionWithOptLockingClausesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 98, MySQLParser.RULE_queryExpressionWithOptLockingClauses);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2224);
            this.queryExpression();
            this.setState(2226);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200 || _la === 287) {
                {
                this.setState(2225);
                this.lockingClauseList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createRoutine(): CreateRoutineContext {
        let localctx = new CreateRoutineContext(this.getContext(), this.getState());
        this.enterRule(localctx, 100, MySQLParser.RULE_createRoutine);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2228);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(2232);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 117, this.getContext())) {
                case 1:
                    {
                    this.setState(2229);
                    this.createProcedure();
                    }
                    break;
                case 2:
                    {
                    this.setState(2230);
                    this.createFunction();
                    }
                    break;
                case 3:
                    {
                    this.setState(2231);
                    this.createUdf();
                    }
                    break;
            }
            this.setState(2235);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 774) {
                {
                this.setState(2234);
                this.match(MySQLParser.SEMICOLON_SYMBOL);
                }
            }

            this.setState(2237);
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createProcedure(): CreateProcedureContext {
        let localctx = new CreateProcedureContext(this.getContext(), this.getState());
        this.enterRule(localctx, 102, MySQLParser.RULE_createProcedure);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2240);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 130) {
                {
                this.setState(2239);
                this.definerClause();
                }
            }

            this.setState(2242);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(2244);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 120, this.getContext())) {
                case 1:
                    {
                    this.setState(2243);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2246);
            this.procedureName();
            this.setState(2247);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(2256);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 122, this.getContext())) {
                case 1:
                    {
                    this.setState(2248);
                    this.procedureParameter();
                    this.setState(2253);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(2249);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(2250);
                        this.procedureParameter();
                        }
                        }
                        this.setState(2255);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
            this.setState(2258);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(2262);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 123, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2259);
                    this.routineCreateOption();
                    }
                    }
                }
                this.setState(2264);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 123, this.getContext());
            }
            this.setState(2265);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createFunction(): CreateFunctionContext {
        let localctx = new CreateFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 104, MySQLParser.RULE_createFunction);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2268);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 130) {
                {
                this.setState(2267);
                this.definerClause();
                }
            }

            this.setState(2270);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(2272);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 125, this.getContext())) {
                case 1:
                    {
                    this.setState(2271);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2274);
            this.functionName();
            this.setState(2275);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(2284);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 127, this.getContext())) {
                case 1:
                    {
                    this.setState(2276);
                    this.functionParameter();
                    this.setState(2281);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(2277);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(2278);
                        this.functionParameter();
                        }
                        }
                        this.setState(2283);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
            this.setState(2286);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(2287);
            this.match(MySQLParser.RETURNS_SYMBOL);
            this.setState(2288);
            this.typeWithOptCollate();
            this.setState(2292);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 128, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2289);
                    this.routineCreateOption();
                    }
                    }
                }
                this.setState(2294);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 128, this.getContext());
            }
            this.setState(2295);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUdf(): CreateUdfContext {
        let localctx = new CreateUdfContext(this.getContext(), this.getState());
        this.enterRule(localctx, 106, MySQLParser.RULE_createUdf);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2298);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 8) {
                {
                this.setState(2297);
                this.match(MySQLParser.AGGREGATE_SYMBOL);
                }
            }

            this.setState(2300);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(2302);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 130, this.getContext())) {
                case 1:
                    {
                    this.setState(2301);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2304);
            this.udfName();
            this.setState(2305);
            this.match(MySQLParser.RETURNS_SYMBOL);
            this.setState(2306);
            localctx._type_ = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 126 || _la === 249 || _la === 437 || _la === 556)) {
                localctx._type_ = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2307);
            this.match(MySQLParser.SONAME_SYMBOL);
            this.setState(2308);
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public routineCreateOption(): RoutineCreateOptionContext {
        let localctx = new RoutineCreateOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 108, MySQLParser.RULE_routineCreateOption);
        let _la: number;
        try {
            this.setState(2315);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.CONTAINS_SYMBOL:
            case MySQLParser.LANGUAGE_SYMBOL:
            case MySQLParser.MODIFIES_SYMBOL:
            case MySQLParser.NO_SYMBOL:
            case MySQLParser.READS_SYMBOL:
            case MySQLParser.SQL_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2310);
                this.routineOption();
                }
                break;
            case MySQLParser.DETERMINISTIC_SYMBOL:
            case MySQLParser.NOT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2312);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 371) {
                    {
                    this.setState(2311);
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.setState(2314);
                this.match(MySQLParser.DETERMINISTIC_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public routineAlterOptions(): RoutineAlterOptionsContext {
        let localctx = new RoutineAlterOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 110, MySQLParser.RULE_routineAlterOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2318);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            do {
                {
                {
                this.setState(2317);
                this.routineCreateOption();
                }
                }
                this.setState(2320);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            } while (_la === 75 || _la === 90 || _la === 137 || _la === 267 || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la === 433 || _la === 537);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public routineOption(): RoutineOptionContext {
        let localctx = new RoutineOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 112, MySQLParser.RULE_routineOption);
        let _la: number;
        try {
            this.setState(2339);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2322);
                localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(2323);
                this.textLiteral();
                }
                break;
            case MySQLParser.LANGUAGE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2324);
                localctx._option = this.match(MySQLParser.LANGUAGE_SYMBOL);
                this.setState(2325);
                this.match(MySQLParser.SQL_SYMBOL);
                }
                break;
            case MySQLParser.NO_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2326);
                localctx._option = this.match(MySQLParser.NO_SYMBOL);
                this.setState(2327);
                this.match(MySQLParser.SQL_SYMBOL);
                }
                break;
            case MySQLParser.CONTAINS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(2328);
                localctx._option = this.match(MySQLParser.CONTAINS_SYMBOL);
                this.setState(2329);
                this.match(MySQLParser.SQL_SYMBOL);
                }
                break;
            case MySQLParser.READS_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(2330);
                localctx._option = this.match(MySQLParser.READS_SYMBOL);
                this.setState(2331);
                this.match(MySQLParser.SQL_SYMBOL);
                this.setState(2332);
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.MODIFIES_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(2333);
                localctx._option = this.match(MySQLParser.MODIFIES_SYMBOL);
                this.setState(2334);
                this.match(MySQLParser.SQL_SYMBOL);
                this.setState(2335);
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.SQL_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(2336);
                localctx._option = this.match(MySQLParser.SQL_SYMBOL);
                this.setState(2337);
                this.match(MySQLParser.SECURITY_SYMBOL);
                this.setState(2338);
                localctx._security = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 130 || _la === 250)) {
                    localctx._security = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createIndex(): CreateIndexContext {
        let localctx = new CreateIndexContext(this.getContext(), this.getState());
        this.enterRule(localctx, 114, MySQLParser.RULE_createIndex);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2342);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 380 || _la === 385) {
                {
                this.setState(2341);
                this.onlineOption();
                }
            }

            this.setState(2379);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INDEX_SYMBOL:
            case MySQLParser.UNIQUE_SYMBOL:
                {
                this.setState(2345);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 609) {
                    {
                    this.setState(2344);
                    this.match(MySQLParser.UNIQUE_SYMBOL);
                    }
                }

                this.setState(2347);
                localctx._type_ = this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(2348);
                this.indexName();
                this.setState(2350);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 599 || _la === 621) {
                    {
                    this.setState(2349);
                    this.indexTypeClause();
                    }
                }

                this.setState(2352);
                this.createIndexTarget();
                this.setState(2356);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 138, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(2353);
                        this.indexOption();
                        }
                        }
                    }
                    this.setState(2358);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 138, this.getContext());
                }
                }
                break;
            case MySQLParser.FULLTEXT_SYMBOL:
                {
                this.setState(2359);
                localctx._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
                this.setState(2360);
                this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(2361);
                this.indexName();
                this.setState(2362);
                this.createIndexTarget();
                this.setState(2366);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 139, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(2363);
                        this.fulltextIndexOption();
                        }
                        }
                    }
                    this.setState(2368);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 139, this.getContext());
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                {
                this.setState(2369);
                localctx._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(2370);
                this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(2371);
                this.indexName();
                this.setState(2372);
                this.createIndexTarget();
                this.setState(2376);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 140, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(2373);
                        this.spatialIndexOption();
                        }
                        }
                    }
                    this.setState(2378);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 140, this.getContext());
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(2382);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 9 || _la === 287) {
                {
                this.setState(2381);
                this.indexLockAndAlgorithm();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexNameAndType(): IndexNameAndTypeContext {
        let localctx = new IndexNameAndTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 116, MySQLParser.RULE_indexNameAndType);
        try {
            this.setState(2394);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 144, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2384);
                    this.indexName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2386);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 143, this.getContext())) {
                        case 1:
                            {
                            this.setState(2385);
                            this.indexName();
                            }
                            break;
                    }
                    this.setState(2388);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(2389);
                    this.indexType();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(2390);
                    this.indexName();
                    this.setState(2391);
                    this.match(MySQLParser.TYPE_SYMBOL);
                    this.setState(2392);
                    this.indexType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createIndexTarget(): CreateIndexTargetContext {
        let localctx = new CreateIndexTargetContext(this.getContext(), this.getState());
        this.enterRule(localctx, 118, MySQLParser.RULE_createIndexTarget);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2396);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(2397);
            this.tableRef();
            this.setState(2398);
            this.keyListWithExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createLogfileGroup(): CreateLogfileGroupContext {
        let localctx = new CreateLogfileGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 120, MySQLParser.RULE_createLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2400);
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.setState(2401);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(2402);
            this.logfileGroupName();
            this.setState(2403);
            this.match(MySQLParser.ADD_SYMBOL);
            this.setState(2404);
            this.match(MySQLParser.UNDOFILE_SYMBOL);
            this.setState(2405);
            this.textLiteral();
            this.setState(2407);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 75 || _la === 163 || _la === 238 || _la === 368 || _la === 374 || _la === 441 || _la === 553 || _la === 604 || _la === 638) {
                {
                this.setState(2406);
                this.logfileGroupOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logfileGroupOptions(): LogfileGroupOptionsContext {
        let localctx = new LogfileGroupOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 122, MySQLParser.RULE_logfileGroupOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2409);
            this.logfileGroupOption();
            this.setState(2416);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 75 || _la === 163 || _la === 238 || _la === 368 || _la === 374 || _la === 441 || _la === 553 || _la === 604 || _la === 638 || _la === 773) {
                {
                {
                this.setState(2411);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(2410);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(2413);
                this.logfileGroupOption();
                }
                }
                this.setState(2418);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logfileGroupOption(): LogfileGroupOptionContext {
        let localctx = new LogfileGroupOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 124, MySQLParser.RULE_logfileGroupOption);
        try {
            this.setState(2425);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2419);
                this.tsOptionInitialSize();
                }
                break;
            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2420);
                this.tsOptionUndoRedoBufferSize();
                }
                break;
            case MySQLParser.NODEGROUP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2421);
                this.tsOptionNodegroup();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(2422);
                this.tsOptionEngine();
                }
                break;
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(2423);
                this.tsOptionWait();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(2424);
                this.tsOptionComment();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createServer(): CreateServerContext {
        let localctx = new CreateServerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 126, MySQLParser.RULE_createServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2427);
            this.match(MySQLParser.SERVER_SYMBOL);
            this.setState(2428);
            this.serverName();
            this.setState(2429);
            this.match(MySQLParser.FOREIGN_SYMBOL);
            this.setState(2430);
            this.match(MySQLParser.DATA_SYMBOL);
            this.setState(2431);
            this.match(MySQLParser.WRAPPER_SYMBOL);
            this.setState(2432);
            this.textOrIdentifier();
            this.setState(2433);
            this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverOptions(): ServerOptionsContext {
        let localctx = new ServerOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 128, MySQLParser.RULE_serverOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2435);
            this.match(MySQLParser.OPTIONS_SYMBOL);
            this.setState(2436);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(2437);
            this.serverOption();
            this.setState(2442);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(2438);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(2439);
                this.serverOption();
                }
                }
                this.setState(2444);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(2445);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverOption(): ServerOptionContext {
        let localctx = new ServerOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 130, MySQLParser.RULE_serverOption);
        try {
            this.setState(2461);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.HOST_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2447);
                localctx._option = this.match(MySQLParser.HOST_SYMBOL);
                this.setState(2448);
                this.textLiteral();
                }
                break;
            case MySQLParser.DATABASE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2449);
                localctx._option = this.match(MySQLParser.DATABASE_SYMBOL);
                this.setState(2450);
                this.textLiteral();
                }
                break;
            case MySQLParser.USER_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2451);
                localctx._option = this.match(MySQLParser.USER_SYMBOL);
                this.setState(2452);
                this.textLiteral();
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(2453);
                localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                this.setState(2454);
                this.textLiteral();
                }
                break;
            case MySQLParser.SOCKET_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(2455);
                localctx._option = this.match(MySQLParser.SOCKET_SYMBOL);
                this.setState(2456);
                this.textLiteral();
                }
                break;
            case MySQLParser.OWNER_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(2457);
                localctx._option = this.match(MySQLParser.OWNER_SYMBOL);
                this.setState(2458);
                this.textLiteral();
                }
                break;
            case MySQLParser.PORT_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(2459);
                localctx._option = this.match(MySQLParser.PORT_SYMBOL);
                this.setState(2460);
                this.ulong_number();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTablespace(): CreateTablespaceContext {
        let localctx = new CreateTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 132, MySQLParser.RULE_createTablespace);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2463);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2464);
            this.tablespaceName();
            this.setState(2465);
            this.tsDataFileName();
            this.setState(2470);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 151, this.getContext())) {
                case 1:
                    {
                    this.setState(2466);
                    this.match(MySQLParser.USE_SYMBOL);
                    this.setState(2467);
                    this.match(MySQLParser.LOGFILE_SYMBOL);
                    this.setState(2468);
                    this.match(MySQLParser.GROUP_SYMBOL);
                    this.setState(2469);
                    this.logfileGroupRef();
                    }
                    break;
            }
            this.setState(2473);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 152, this.getContext())) {
                case 1:
                    {
                    this.setState(2472);
                    this.tablespaceOptions();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUndoTablespace(): CreateUndoTablespaceContext {
        let localctx = new CreateUndoTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 134, MySQLParser.RULE_createUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2475);
            this.match(MySQLParser.UNDO_SYMBOL);
            this.setState(2476);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2477);
            this.tablespaceName();
            this.setState(2478);
            this.match(MySQLParser.ADD_SYMBOL);
            this.setState(2479);
            this.tsDataFile();
            this.setState(2481);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 163 || _la === 553) {
                {
                this.setState(2480);
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsDataFileName(): TsDataFileNameContext {
        let localctx = new TsDataFileNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 136, MySQLParser.RULE_tsDataFileName);
        try {
            this.setState(2490);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 155, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2483);
                    this.match(MySQLParser.ADD_SYMBOL);
                    this.setState(2484);
                    this.tsDataFile();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2485);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2488);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 154, this.getContext())) {
                        case 1:
                            {
                            this.setState(2486);
                            this.match(MySQLParser.ADD_SYMBOL);
                            this.setState(2487);
                            this.tsDataFile();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsDataFile(): TsDataFileContext {
        let localctx = new TsDataFileContext(this.getContext(), this.getState());
        this.enterRule(localctx, 138, MySQLParser.RULE_tsDataFile);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2492);
            this.match(MySQLParser.DATAFILE_SYMBOL);
            this.setState(2493);
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablespaceOptions(): TablespaceOptionsContext {
        let localctx = new TablespaceOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 140, MySQLParser.RULE_tablespaceOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2495);
            this.tablespaceOption();
            this.setState(2502);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 157, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2497);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 156, this.getContext())) {
                        case 1:
                            {
                            this.setState(2496);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(2499);
                    this.tablespaceOption();
                    }
                    }
                }
                this.setState(2504);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 157, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablespaceOption(): TablespaceOptionContext {
        let localctx = new TablespaceOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 142, MySQLParser.RULE_tablespaceOption);
        try {
            this.setState(2516);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 158, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2505);
                    this.tsOptionInitialSize();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2506);
                    this.tsOptionAutoextendSize();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(2507);
                    this.tsOptionMaxSize();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(2508);
                    this.tsOptionExtentSize();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(2509);
                    this.tsOptionNodegroup();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(2510);
                    this.tsOptionEngine();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(2511);
                    this.tsOptionWait();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(2512);
                    this.tsOptionComment();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(2513);
                    this.tsOptionFileblockSize();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(2514);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2515);
                    this.tsOptionEncryption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext {
        let localctx = new TsOptionInitialSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 144, MySQLParser.RULE_tsOptionInitialSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2518);
            this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
            this.setState(2520);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 159, this.getContext())) {
                case 1:
                    {
                    this.setState(2519);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2522);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext {
        let localctx = new TsOptionUndoRedoBufferSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 146, MySQLParser.RULE_tsOptionUndoRedoBufferSize);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2524);
            _la = this.input().LA(1);
            if(!(_la === 441 || _la === 604)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2526);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 160, this.getContext())) {
                case 1:
                    {
                    this.setState(2525);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2528);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
        let localctx = new TsOptionAutoextendSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 148, MySQLParser.RULE_tsOptionAutoextendSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2530);
            this.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL);
            this.setState(2532);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 161, this.getContext())) {
                case 1:
                    {
                    this.setState(2531);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2534);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext {
        let localctx = new TsOptionMaxSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 150, MySQLParser.RULE_tsOptionMaxSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2536);
            this.match(MySQLParser.MAX_SIZE_SYMBOL);
            this.setState(2538);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 162, this.getContext())) {
                case 1:
                    {
                    this.setState(2537);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2540);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionExtentSize(): TsOptionExtentSizeContext {
        let localctx = new TsOptionExtentSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 152, MySQLParser.RULE_tsOptionExtentSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2542);
            this.match(MySQLParser.EXTENT_SIZE_SYMBOL);
            this.setState(2544);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 163, this.getContext())) {
                case 1:
                    {
                    this.setState(2543);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2546);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext {
        let localctx = new TsOptionNodegroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 154, MySQLParser.RULE_tsOptionNodegroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2548);
            this.match(MySQLParser.NODEGROUP_SYMBOL);
            this.setState(2550);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 750) {
                {
                this.setState(2549);
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
            }

            this.setState(2552);
            this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionEngine(): TsOptionEngineContext {
        let localctx = new TsOptionEngineContext(this.getContext(), this.getState());
        this.enterRule(localctx, 156, MySQLParser.RULE_tsOptionEngine);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2555);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 553) {
                {
                this.setState(2554);
                this.match(MySQLParser.STORAGE_SYMBOL);
                }
            }

            this.setState(2557);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(2559);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 166, this.getContext())) {
                case 1:
                    {
                    this.setState(2558);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2561);
            this.engineRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionWait(): TsOptionWaitContext {
        let localctx = new TsOptionWaitContext(this.getContext(), this.getState());
        this.enterRule(localctx, 158, MySQLParser.RULE_tsOptionWait);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2563);
            _la = this.input().LA(1);
            if(!(_la === 374 || _la === 638)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionComment(): TsOptionCommentContext {
        let localctx = new TsOptionCommentContext(this.getContext(), this.getState());
        this.enterRule(localctx, 160, MySQLParser.RULE_tsOptionComment);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2565);
            this.match(MySQLParser.COMMENT_SYMBOL);
            this.setState(2567);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 167, this.getContext())) {
                case 1:
                    {
                    this.setState(2566);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2569);
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionFileblockSize(): TsOptionFileblockSizeContext {
        let localctx = new TsOptionFileblockSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 162, MySQLParser.RULE_tsOptionFileblockSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2571);
            this.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL);
            this.setState(2573);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 168, this.getContext())) {
                case 1:
                    {
                    this.setState(2572);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2575);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionEncryption(): TsOptionEncryptionContext {
        let localctx = new TsOptionEncryptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 164, MySQLParser.RULE_tsOptionEncryption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2577);
            this.match(MySQLParser.ENCRYPTION_SYMBOL);
            this.setState(2579);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 169, this.getContext())) {
                case 1:
                    {
                    this.setState(2578);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2581);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionEngineAttribute(): TsOptionEngineAttributeContext {
        let localctx = new TsOptionEngineAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 166, MySQLParser.RULE_tsOptionEngineAttribute);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2583);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(2585);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 170, this.getContext())) {
                case 1:
                    {
                    this.setState(2584);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2587);
            this.jsonAttribute();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createView(): CreateViewContext {
        let localctx = new CreateViewContext(this.getContext(), this.getState());
        this.enterRule(localctx, 168, MySQLParser.RULE_createView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2590);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 9 || _la === 394) {
                {
                this.setState(2589);
                this.viewReplaceOrAlgorithm();
                }
            }

            this.setState(2593);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 130) {
                {
                this.setState(2592);
                this.definerClause();
                }
            }

            this.setState(2596);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 537) {
                {
                this.setState(2595);
                this.viewSuid();
                }
            }

            this.setState(2598);
            this.match(MySQLParser.VIEW_SYMBOL);
            this.setState(2599);
            this.viewName();
            this.setState(2600);
            this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext {
        let localctx = new ViewReplaceOrAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 170, MySQLParser.RULE_viewReplaceOrAlgorithm);
        let _la: number;
        try {
            this.setState(2608);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.OR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2602);
                this.match(MySQLParser.OR_SYMBOL);
                this.setState(2603);
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.setState(2605);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 9) {
                    {
                    this.setState(2604);
                    this.viewAlgorithm();
                    }
                }

                }
                break;
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2607);
                this.viewAlgorithm();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewAlgorithm(): ViewAlgorithmContext {
        let localctx = new ViewAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 172, MySQLParser.RULE_viewAlgorithm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2610);
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.setState(2611);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(2612);
            localctx._algorithm = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 335 || _la === 578 || _la === 602)) {
                localctx._algorithm = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewSuid(): ViewSuidContext {
        let localctx = new ViewSuidContext(this.getContext(), this.getState());
        this.enterRule(localctx, 174, MySQLParser.RULE_viewSuid);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2614);
            this.match(MySQLParser.SQL_SYMBOL);
            this.setState(2615);
            this.match(MySQLParser.SECURITY_SYMBOL);
            this.setState(2616);
            _la = this.input().LA(1);
            if(!(_la === 130 || _la === 250)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTrigger(): CreateTriggerContext {
        let localctx = new CreateTriggerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 176, MySQLParser.RULE_createTrigger);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2619);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 130) {
                {
                this.setState(2618);
                this.definerClause();
                }
            }

            this.setState(2621);
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.setState(2623);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 177, this.getContext())) {
                case 1:
                    {
                    this.setState(2622);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2625);
            this.triggerName();
            this.setState(2626);
            localctx._timing = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 6 || _la === 28)) {
                localctx._timing = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2627);
            localctx._event = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 133 || _la === 242 || _la === 614)) {
                localctx._event = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2628);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(2629);
            this.tableRef();
            this.setState(2630);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(2631);
            this.match(MySQLParser.EACH_SYMBOL);
            this.setState(2632);
            this.match(MySQLParser.ROW_SYMBOL);
            this.setState(2634);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 178, this.getContext())) {
                case 1:
                    {
                    this.setState(2633);
                    this.triggerFollowsPrecedesClause();
                    }
                    break;
            }
            this.setState(2636);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext {
        let localctx = new TriggerFollowsPrecedesClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 178, MySQLParser.RULE_triggerFollowsPrecedesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2638);
            localctx._ordering = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 197 || _la === 415)) {
                localctx._ordering = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2639);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createEvent(): CreateEventContext {
        let localctx = new CreateEventContext(this.getContext(), this.getState());
        this.enterRule(localctx, 180, MySQLParser.RULE_createEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2642);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 130) {
                {
                this.setState(2641);
                this.definerClause();
                }
            }

            this.setState(2644);
            this.match(MySQLParser.EVENT_SYMBOL);
            this.setState(2646);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 180, this.getContext())) {
                case 1:
                    {
                    this.setState(2645);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2648);
            this.eventName();
            this.setState(2649);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(2650);
            this.match(MySQLParser.SCHEDULE_SYMBOL);
            this.setState(2651);
            this.schedule();
            this.setState(2658);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 383) {
                {
                this.setState(2652);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(2653);
                this.match(MySQLParser.COMPLETION_SYMBOL);
                this.setState(2655);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 371) {
                    {
                    this.setState(2654);
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.setState(2657);
                this.match(MySQLParser.PRESERVE_SYMBOL);
                }
            }

            this.setState(2666);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ENABLE_SYMBOL:
                {
                this.setState(2660);
                this.match(MySQLParser.ENABLE_SYMBOL);
                }
                break;
            case MySQLParser.DISABLE_SYMBOL:
                {
                this.setState(2661);
                this.match(MySQLParser.DISABLE_SYMBOL);
                this.setState(2664);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 383) {
                    {
                    this.setState(2662);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(2663);
                    this.replica();
                    }
                }

                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.DO_SYMBOL:
                break;
            default:
                break;
            }
            this.setState(2670);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 75) {
                {
                this.setState(2668);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(2669);
                this.textLiteral();
                }
            }

            this.setState(2672);
            this.match(MySQLParser.DO_SYMBOL);
            this.setState(2673);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createRole(): CreateRoleContext {
        let localctx = new CreateRoleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 182, MySQLParser.RULE_createRole);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2675);
            this.match(MySQLParser.ROLE_SYMBOL);
            this.setState(2677);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 186, this.getContext())) {
                case 1:
                    {
                    this.setState(2676);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2679);
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createSpatialReference(): CreateSpatialReferenceContext {
        let localctx = new CreateSpatialReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 184, MySQLParser.RULE_createSpatialReference);
        let _la: number;
        try {
            this.setState(2706);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.OR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2681);
                this.match(MySQLParser.OR_SYMBOL);
                this.setState(2682);
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.setState(2683);
                this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(2684);
                this.match(MySQLParser.REFERENCE_SYMBOL);
                this.setState(2685);
                this.match(MySQLParser.SYSTEM_SYMBOL);
                this.setState(2686);
                this.real_ulonglong_number();
                this.setState(2690);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 357 || ((((_la - 715)) & ~0x1F) === 0 && ((1 << (_la - 715)) & 7) !== 0)) {
                    {
                    {
                    this.setState(2687);
                    this.srsAttribute();
                    }
                    }
                    this.setState(2692);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2693);
                this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(2694);
                this.match(MySQLParser.REFERENCE_SYMBOL);
                this.setState(2695);
                this.match(MySQLParser.SYSTEM_SYMBOL);
                this.setState(2697);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 188, this.getContext())) {
                    case 1:
                        {
                        this.setState(2696);
                        this.ifNotExists();
                        }
                        break;
                }
                this.setState(2699);
                this.real_ulonglong_number();
                this.setState(2703);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 357 || ((((_la - 715)) & ~0x1F) === 0 && ((1 << (_la - 715)) & 7) !== 0)) {
                    {
                    {
                    this.setState(2700);
                    this.srsAttribute();
                    }
                    }
                    this.setState(2705);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public srsAttribute(): SrsAttributeContext {
        let localctx = new SrsAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 186, MySQLParser.RULE_srsAttribute);
        try {
            this.setState(2723);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.NAME_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2708);
                this.match(MySQLParser.NAME_SYMBOL);
                this.setState(2709);
                this.match(MySQLParser.TEXT_SYMBOL);
                this.setState(2710);
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.DEFINITION_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2711);
                this.match(MySQLParser.DEFINITION_SYMBOL);
                this.setState(2712);
                this.match(MySQLParser.TEXT_SYMBOL);
                this.setState(2713);
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.ORGANIZATION_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2714);
                this.match(MySQLParser.ORGANIZATION_SYMBOL);
                this.setState(2715);
                this.textStringNoLinebreak();
                this.setState(2716);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(2717);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(2718);
                this.real_ulonglong_number();
                }
                break;
            case MySQLParser.DESCRIPTION_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(2720);
                this.match(MySQLParser.DESCRIPTION_SYMBOL);
                this.setState(2721);
                this.match(MySQLParser.TEXT_SYMBOL);
                this.setState(2722);
                this.textStringNoLinebreak();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropStatement(): DropStatementContext {
        let localctx = new DropStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 188, MySQLParser.RULE_dropStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2725);
            this.match(MySQLParser.DROP_SYMBOL);
            this.setState(2742);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 192, this.getContext())) {
                case 1:
                    {
                    this.setState(2726);
                    this.dropDatabase();
                    }
                    break;
                case 2:
                    {
                    this.setState(2727);
                    this.dropEvent();
                    }
                    break;
                case 3:
                    {
                    this.setState(2728);
                    this.dropFunction();
                    }
                    break;
                case 4:
                    {
                    this.setState(2729);
                    this.dropProcedure();
                    }
                    break;
                case 5:
                    {
                    this.setState(2730);
                    this.dropIndex();
                    }
                    break;
                case 6:
                    {
                    this.setState(2731);
                    this.dropLogfileGroup();
                    }
                    break;
                case 7:
                    {
                    this.setState(2732);
                    this.dropServer();
                    }
                    break;
                case 8:
                    {
                    this.setState(2733);
                    this.dropTable();
                    }
                    break;
                case 9:
                    {
                    this.setState(2734);
                    this.dropTableSpace();
                    }
                    break;
                case 10:
                    {
                    this.setState(2735);
                    this.dropTrigger();
                    }
                    break;
                case 11:
                    {
                    this.setState(2736);
                    this.dropView();
                    }
                    break;
                case 12:
                    {
                    this.setState(2737);
                    this.dropRole();
                    }
                    break;
                case 13:
                    {
                    this.setState(2738);
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.setState(2739);
                    this.dropSpatialReference();
                    }
                    break;
                case 14:
                    {
                    this.setState(2740);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2741);
                    this.dropUndoTablespace();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropDatabase(): DropDatabaseContext {
        let localctx = new DropDatabaseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 190, MySQLParser.RULE_dropDatabase);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2744);
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.setState(2746);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 193, this.getContext())) {
                case 1:
                    {
                    this.setState(2745);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2748);
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropEvent(): DropEventContext {
        let localctx = new DropEventContext(this.getContext(), this.getState());
        this.enterRule(localctx, 192, MySQLParser.RULE_dropEvent);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2750);
            this.match(MySQLParser.EVENT_SYMBOL);
            this.setState(2752);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 194, this.getContext())) {
                case 1:
                    {
                    this.setState(2751);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2754);
            this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropFunction(): DropFunctionContext {
        let localctx = new DropFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 194, MySQLParser.RULE_dropFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2756);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(2758);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 195, this.getContext())) {
                case 1:
                    {
                    this.setState(2757);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2760);
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropProcedure(): DropProcedureContext {
        let localctx = new DropProcedureContext(this.getContext(), this.getState());
        this.enterRule(localctx, 196, MySQLParser.RULE_dropProcedure);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2762);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(2764);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 196, this.getContext())) {
                case 1:
                    {
                    this.setState(2763);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2766);
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropIndex(): DropIndexContext {
        let localctx = new DropIndexContext(this.getContext(), this.getState());
        this.enterRule(localctx, 198, MySQLParser.RULE_dropIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2769);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 380 || _la === 385) {
                {
                this.setState(2768);
                this.onlineOption();
                }
            }

            this.setState(2771);
            localctx._type_ = this.match(MySQLParser.INDEX_SYMBOL);
            this.setState(2772);
            this.indexRef();
            this.setState(2773);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(2774);
            this.tableRef();
            this.setState(2776);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 9 || _la === 287) {
                {
                this.setState(2775);
                this.indexLockAndAlgorithm();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropLogfileGroup(): DropLogfileGroupContext {
        let localctx = new DropLogfileGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 200, MySQLParser.RULE_dropLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2778);
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.setState(2779);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(2780);
            this.logfileGroupRef();
            this.setState(2791);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 163 || _la === 374 || _la === 553 || _la === 638) {
                {
                this.setState(2781);
                this.dropLogfileGroupOption();
                this.setState(2788);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 163 || _la === 374 || _la === 553 || _la === 638 || _la === 773) {
                    {
                    {
                    this.setState(2783);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 773) {
                        {
                        this.setState(2782);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                    }

                    this.setState(2785);
                    this.dropLogfileGroupOption();
                    }
                    }
                    this.setState(2790);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropLogfileGroupOption(): DropLogfileGroupOptionContext {
        let localctx = new DropLogfileGroupOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 202, MySQLParser.RULE_dropLogfileGroupOption);
        try {
            this.setState(2795);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2793);
                this.tsOptionWait();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2794);
                this.tsOptionEngine();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropServer(): DropServerContext {
        let localctx = new DropServerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 204, MySQLParser.RULE_dropServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2797);
            this.match(MySQLParser.SERVER_SYMBOL);
            this.setState(2799);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 203, this.getContext())) {
                case 1:
                    {
                    this.setState(2798);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2801);
            this.serverRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropTable(): DropTableContext {
        let localctx = new DropTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 206, MySQLParser.RULE_dropTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2804);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 577) {
                {
                this.setState(2803);
                this.match(MySQLParser.TEMPORARY_SYMBOL);
                }
            }

            this.setState(2806);
            localctx._type_ = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 571 || _la === 574)) {
                localctx._type_ = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2808);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 205, this.getContext())) {
                case 1:
                    {
                    this.setState(2807);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2810);
            this.tableRefList();
            this.setState(2812);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 49 || _la === 471) {
                {
                this.setState(2811);
                _la = this.input().LA(1);
                if(!(_la === 49 || _la === 471)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropTableSpace(): DropTableSpaceContext {
        let localctx = new DropTableSpaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 208, MySQLParser.RULE_dropTableSpace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2814);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2815);
            this.tablespaceRef();
            this.setState(2826);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 163 || _la === 374 || _la === 553 || _la === 638) {
                {
                this.setState(2816);
                this.dropLogfileGroupOption();
                this.setState(2823);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 163 || _la === 374 || _la === 553 || _la === 638 || _la === 773) {
                    {
                    {
                    this.setState(2818);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 773) {
                        {
                        this.setState(2817);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                    }

                    this.setState(2820);
                    this.dropLogfileGroupOption();
                    }
                    }
                    this.setState(2825);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropTrigger(): DropTriggerContext {
        let localctx = new DropTriggerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 210, MySQLParser.RULE_dropTrigger);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2828);
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.setState(2830);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 210, this.getContext())) {
                case 1:
                    {
                    this.setState(2829);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2832);
            this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropView(): DropViewContext {
        let localctx = new DropViewContext(this.getContext(), this.getState());
        this.enterRule(localctx, 212, MySQLParser.RULE_dropView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2834);
            this.match(MySQLParser.VIEW_SYMBOL);
            this.setState(2836);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 211, this.getContext())) {
                case 1:
                    {
                    this.setState(2835);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2838);
            this.viewRefList();
            this.setState(2840);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 49 || _la === 471) {
                {
                this.setState(2839);
                _la = this.input().LA(1);
                if(!(_la === 49 || _la === 471)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropRole(): DropRoleContext {
        let localctx = new DropRoleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 214, MySQLParser.RULE_dropRole);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2842);
            this.match(MySQLParser.ROLE_SYMBOL);
            this.setState(2844);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 213, this.getContext())) {
                case 1:
                    {
                    this.setState(2843);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2846);
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropSpatialReference(): DropSpatialReferenceContext {
        let localctx = new DropSpatialReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 216, MySQLParser.RULE_dropSpatialReference);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2848);
            this.match(MySQLParser.SPATIAL_SYMBOL);
            this.setState(2849);
            this.match(MySQLParser.REFERENCE_SYMBOL);
            this.setState(2850);
            this.match(MySQLParser.SYSTEM_SYMBOL);
            this.setState(2852);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 214, this.getContext())) {
                case 1:
                    {
                    this.setState(2851);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2854);
            this.real_ulonglong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropUndoTablespace(): DropUndoTablespaceContext {
        let localctx = new DropUndoTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 218, MySQLParser.RULE_dropUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2856);
            this.match(MySQLParser.UNDO_SYMBOL);
            this.setState(2857);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2858);
            this.tablespaceRef();
            this.setState(2860);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 163 || _la === 553) {
                {
                this.setState(2859);
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public renameTableStatement(): RenameTableStatementContext {
        let localctx = new RenameTableStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 220, MySQLParser.RULE_renameTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2862);
            this.match(MySQLParser.RENAME_SYMBOL);
            this.setState(2863);
            _la = this.input().LA(1);
            if(!(_la === 571 || _la === 574)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2864);
            this.renamePair();
            this.setState(2869);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(2865);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(2866);
                this.renamePair();
                }
                }
                this.setState(2871);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public renamePair(): RenamePairContext {
        let localctx = new RenamePairContext(this.getContext(), this.getState());
        this.enterRule(localctx, 222, MySQLParser.RULE_renamePair);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2872);
            this.tableRef();
            this.setState(2873);
            this.match(MySQLParser.TO_SYMBOL);
            this.setState(2874);
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public truncateTableStatement(): TruncateTableStatementContext {
        let localctx = new TruncateTableStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 224, MySQLParser.RULE_truncateTableStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2876);
            this.match(MySQLParser.TRUNCATE_SYMBOL);
            this.setState(2878);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 217, this.getContext())) {
                case 1:
                    {
                    this.setState(2877);
                    this.match(MySQLParser.TABLE_SYMBOL);
                    }
                    break;
            }
            this.setState(2880);
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public importStatement(): ImportStatementContext {
        let localctx = new ImportStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 226, MySQLParser.RULE_importStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2882);
            this.match(MySQLParser.IMPORT_SYMBOL);
            this.setState(2883);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(2884);
            this.match(MySQLParser.FROM_SYMBOL);
            this.setState(2885);
            this.textStringLiteralList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public callStatement(): CallStatementContext {
        let localctx = new CallStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 228, MySQLParser.RULE_callStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2887);
            this.match(MySQLParser.CALL_SYMBOL);
            this.setState(2888);
            this.procedureRef();
            this.setState(2894);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(2889);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(2891);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 218, this.getContext())) {
                    case 1:
                        {
                        this.setState(2890);
                        this.exprList();
                        }
                        break;
                }
                this.setState(2893);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public deleteStatement(): DeleteStatementContext {
        let localctx = new DeleteStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 230, MySQLParser.RULE_deleteStatement);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2897);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 645) {
                {
                this.setState(2896);
                this.withClause();
                }
            }

            this.setState(2899);
            this.match(MySQLParser.DELETE_SYMBOL);
            this.setState(2903);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 221, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2900);
                    this.deleteStatementOption();
                    }
                    }
                }
                this.setState(2905);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 221, this.getContext());
            }
            this.setState(2938);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 230, this.getContext())) {
                case 1:
                    {
                    this.setState(2906);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(2930);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 228, this.getContext())) {
                        case 1:
                            {
                            this.setState(2907);
                            this.tableAliasRefList();
                            this.setState(2908);
                            this.match(MySQLParser.USING_SYMBOL);
                            this.setState(2909);
                            this.tableReferenceList();
                            this.setState(2911);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 643) {
                                {
                                this.setState(2910);
                                this.whereClause();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(2913);
                            this.tableRef();
                            this.setState(2916);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 223, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(2914);
                                    if (!(this.serverVersion >= 80017)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                                    }
                                    this.setState(2915);
                                    this.tableAlias();
                                    }
                                    break;
                            }
                            this.setState(2919);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 405) {
                                {
                                this.setState(2918);
                                this.partitionDelete();
                                }
                            }

                            this.setState(2922);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 643) {
                                {
                                this.setState(2921);
                                this.whereClause();
                                }
                            }

                            this.setState(2925);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 393) {
                                {
                                this.setState(2924);
                                this.orderClause();
                                }
                            }

                            this.setState(2928);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 276) {
                                {
                                this.setState(2927);
                                this.simpleLimitClause();
                                }
                            }

                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(2932);
                    this.tableAliasRefList();
                    this.setState(2933);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(2934);
                    this.tableReferenceList();
                    this.setState(2936);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 643) {
                        {
                        this.setState(2935);
                        this.whereClause();
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionDelete(): PartitionDeleteContext {
        let localctx = new PartitionDeleteContext(this.getContext(), this.getState());
        this.enterRule(localctx, 232, MySQLParser.RULE_partitionDelete);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2940);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(2941);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(2942);
            this.identifierList();
            this.setState(2943);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public deleteStatementOption(): DeleteStatementOptionContext {
        let localctx = new DeleteStatementOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 234, MySQLParser.RULE_deleteStatementOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2945);
            _la = this.input().LA(1);
            if(!(_la === 232 || _la === 295 || _la === 431)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public doStatement(): DoStatementContext {
        let localctx = new DoStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 236, MySQLParser.RULE_doStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2947);
            this.match(MySQLParser.DO_SYMBOL);
            this.setState(2948);
            this.selectItemList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public handlerStatement(): HandlerStatementContext {
        let localctx = new HandlerStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 238, MySQLParser.RULE_handlerStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2950);
            this.match(MySQLParser.HANDLER_SYMBOL);
            this.setState(2968);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 235, this.getContext())) {
                case 1:
                    {
                    this.setState(2951);
                    this.tableRef();
                    this.setState(2952);
                    this.match(MySQLParser.OPEN_SYMBOL);
                    this.setState(2954);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 231, this.getContext())) {
                        case 1:
                            {
                            this.setState(2953);
                            this.tableAlias();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(2956);
                    this.identifier();
                    this.setState(2966);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.CLOSE_SYMBOL:
                        {
                        this.setState(2957);
                        this.match(MySQLParser.CLOSE_SYMBOL);
                        }
                        break;
                    case MySQLParser.READ_SYMBOL:
                        {
                        this.setState(2958);
                        this.match(MySQLParser.READ_SYMBOL);
                        this.setState(2959);
                        this.handlerReadOrScan();
                        this.setState(2961);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 643) {
                            {
                            this.setState(2960);
                            this.whereClause();
                            }
                        }

                        this.setState(2964);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 276) {
                            {
                            this.setState(2963);
                            this.limitClause();
                            }
                        }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public handlerReadOrScan(): HandlerReadOrScanContext {
        let localctx = new HandlerReadOrScanContext(this.getContext(), this.getState());
        this.enterRule(localctx, 240, MySQLParser.RULE_handlerReadOrScan);
        let _la: number;
        try {
            this.setState(2980);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 237, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2970);
                    _la = this.input().LA(1);
                    if(!(_la === 191 || _la === 367)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2971);
                    this.identifier();
                    this.setState(2978);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.FIRST_SYMBOL:
                    case MySQLParser.LAST_SYMBOL:
                    case MySQLParser.NEXT_SYMBOL:
                    case MySQLParser.PREV_SYMBOL:
                        {
                        this.setState(2972);
                        _la = this.input().LA(1);
                        if(!(_la === 191 || _la === 268 || _la === 367 || _la === 419)) {
                        this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    case MySQLParser.EQUAL_OPERATOR:
                    case MySQLParser.GREATER_OR_EQUAL_OPERATOR:
                    case MySQLParser.GREATER_THAN_OPERATOR:
                    case MySQLParser.LESS_OR_EQUAL_OPERATOR:
                    case MySQLParser.LESS_THAN_OPERATOR:
                        {
                        this.setState(2973);
                        _la = this.input().LA(1);
                        if(!(((((_la - 750)) & ~0x1F) === 0 && ((1 << (_la - 750)) & 121) !== 0))) {
                        this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(2974);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(2975);
                        this.values();
                        this.setState(2976);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertStatement(): InsertStatementContext {
        let localctx = new InsertStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 242, MySQLParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2982);
            this.match(MySQLParser.INSERT_SYMBOL);
            this.setState(2984);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 238, this.getContext())) {
                case 1:
                    {
                    this.setState(2983);
                    this.insertLockOption();
                    }
                    break;
            }
            this.setState(2987);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 239, this.getContext())) {
                case 1:
                    {
                    this.setState(2986);
                    this.match(MySQLParser.IGNORE_SYMBOL);
                    }
                    break;
            }
            this.setState(2990);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 240, this.getContext())) {
                case 1:
                    {
                    this.setState(2989);
                    this.match(MySQLParser.INTO_SYMBOL);
                    }
                    break;
            }
            this.setState(2992);
            this.tableRef();
            this.setState(2994);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 241, this.getContext())) {
                case 1:
                    {
                    this.setState(2993);
                    this.usePartition();
                    }
                    break;
            }
            this.setState(3008);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 244, this.getContext())) {
                case 1:
                    {
                    this.setState(2996);
                    this.insertFromConstructor();
                    this.setState(2999);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 242, this.getContext())) {
                        case 1:
                            {
                            this.setState(2997);
                            if (!( this.serverVersion >= 80018)) {
                                throw this.createFailedPredicateException(" this.serverVersion >= 80018");
                            }
                            this.setState(2998);
                            this.valuesReference();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(3001);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(3002);
                    this.updateList();
                    this.setState(3005);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 243, this.getContext())) {
                        case 1:
                            {
                            this.setState(3003);
                            if (!( this.serverVersion >= 80018)) {
                                throw this.createFailedPredicateException(" this.serverVersion >= 80018");
                            }
                            this.setState(3004);
                            this.valuesReference();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.setState(3007);
                    this.insertQueryExpression();
                    }
                    break;
            }
            this.setState(3011);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 383) {
                {
                this.setState(3010);
                this.insertUpdateList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertLockOption(): InsertLockOptionContext {
        let localctx = new InsertLockOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 244, MySQLParser.RULE_insertLockOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3013);
            _la = this.input().LA(1);
            if(!(_la === 131 || _la === 223 || _la === 295)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertFromConstructor(): InsertFromConstructorContext {
        let localctx = new InsertFromConstructorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 246, MySQLParser.RULE_insertFromConstructor);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3020);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(3015);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3017);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 246, this.getContext())) {
                    case 1:
                        {
                        this.setState(3016);
                        this.fields();
                        }
                        break;
                }
                this.setState(3019);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            this.setState(3022);
            this.insertValues();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fields(): FieldsContext {
        let localctx = new FieldsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 248, MySQLParser.RULE_fields);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3024);
            this.insertIdentifier();
            this.setState(3029);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(3025);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3026);
                this.insertIdentifier();
                }
                }
                this.setState(3031);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertValues(): InsertValuesContext {
        let localctx = new InsertValuesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 250, MySQLParser.RULE_insertValues);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3032);
            _la = this.input().LA(1);
            if(!(_la === 626 || _la === 627)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(3033);
            this.valueList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertQueryExpression(): InsertQueryExpressionContext {
        let localctx = new InsertQueryExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 252, MySQLParser.RULE_insertQueryExpression);
        try {
            this.setState(3045);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 251, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3035);
                    this.queryExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3036);
                    this.queryExpressionParens();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3042);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 250, this.getContext())) {
                        case 1:
                            {
                            this.setState(3037);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(3039);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 249, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(3038);
                                    this.fields();
                                    }
                                    break;
                            }
                            this.setState(3041);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                            break;
                    }
                    this.setState(3044);
                    this.queryExpressionWithOptLockingClauses();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public valueList(): ValueListContext {
        let localctx = new ValueListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 254, MySQLParser.RULE_valueList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3047);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3049);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 252, this.getContext())) {
                case 1:
                    {
                    this.setState(3048);
                    this.values();
                    }
                    break;
            }
            this.setState(3051);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(3060);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 254, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3052);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3053);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(3055);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 253, this.getContext())) {
                        case 1:
                            {
                            this.setState(3054);
                            this.values();
                            }
                            break;
                    }
                    this.setState(3057);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    }
                }
                this.setState(3062);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 254, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public values(): ValuesContext {
        let localctx = new ValuesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 256, MySQLParser.RULE_values);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3065);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 255, this.getContext())) {
                case 1:
                    {
                    this.setState(3063);
                    this.expr(0);
                    }
                    break;
                case 2:
                    {
                    this.setState(3064);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
            this.setState(3074);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(3067);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3070);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 256, this.getContext())) {
                    case 1:
                        {
                        this.setState(3068);
                        this.expr(0);
                        }
                        break;
                    case 2:
                        {
                        this.setState(3069);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
                }
                }
                this.setState(3076);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public valuesReference(): ValuesReferenceContext {
        let localctx = new ValuesReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 258, MySQLParser.RULE_valuesReference);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3077);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(3078);
            this.identifier();
            this.setState(3080);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(3079);
                this.columnInternalRefList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertUpdateList(): InsertUpdateListContext {
        let localctx = new InsertUpdateListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 260, MySQLParser.RULE_insertUpdateList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3082);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(3083);
            this.match(MySQLParser.DUPLICATE_SYMBOL);
            this.setState(3084);
            this.match(MySQLParser.KEY_SYMBOL);
            this.setState(3085);
            this.match(MySQLParser.UPDATE_SYMBOL);
            this.setState(3086);
            this.updateList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadStatement(): LoadStatementContext {
        let localctx = new LoadStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 262, MySQLParser.RULE_loadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3088);
            this.match(MySQLParser.LOAD_SYMBOL);
            this.setState(3089);
            this.dataOrXml();
            this.setState(3091);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 82 || _la === 295) {
                {
                this.setState(3090);
                _la = this.input().LA(1);
                if(!(_la === 82 || _la === 295)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(3094);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 284) {
                {
                this.setState(3093);
                this.match(MySQLParser.LOCAL_SYMBOL);
                }
            }

            this.setState(3096);
            this.match(MySQLParser.INFILE_SYMBOL);
            this.setState(3097);
            this.textLiteral();
            this.setState(3099);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232 || _la === 458) {
                {
                this.setState(3098);
                _la = this.input().LA(1);
                if(!(_la === 232 || _la === 458)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(3101);
            this.match(MySQLParser.INTO_SYMBOL);
            this.setState(3102);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(3103);
            this.tableRef();
            this.setState(3105);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 405) {
                {
                this.setState(3104);
                this.usePartition();
                }
            }

            this.setState(3108);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 58 || _la === 60) {
                {
                this.setState(3107);
                this.charsetClause();
                }
            }

            this.setState(3111);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 484) {
                {
                this.setState(3110);
                this.xmlRowsIdentifiedBy();
                }
            }

            this.setState(3114);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 71) {
                {
                this.setState(3113);
                this.fieldsClause();
                }
            }

            this.setState(3117);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 278) {
                {
                this.setState(3116);
                this.linesClause();
                }
            }

            this.setState(3119);
            this.loadDataFileTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dataOrXml(): DataOrXmlContext {
        let localctx = new DataOrXmlContext(this.getContext(), this.getState());
        this.enterRule(localctx, 264, MySQLParser.RULE_dataOrXml);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3121);
            _la = this.input().LA(1);
            if(!(_la === 112 || _la === 653)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext {
        let localctx = new XmlRowsIdentifiedByContext(this.getContext(), this.getState());
        this.enterRule(localctx, 266, MySQLParser.RULE_xmlRowsIdentifiedBy);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3123);
            this.match(MySQLParser.ROWS_SYMBOL);
            this.setState(3124);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(3125);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(3126);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadDataFileTail(): LoadDataFileTailContext {
        let localctx = new LoadDataFileTailContext(this.getContext(), this.getState());
        this.enterRule(localctx, 268, MySQLParser.RULE_loadDataFileTail);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3131);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(3128);
                this.match(MySQLParser.IGNORE_SYMBOL);
                this.setState(3129);
                this.match(MySQLParser.INT_NUMBER);
                this.setState(3130);
                _la = this.input().LA(1);
                if(!(_la === 278 || _la === 484)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(3134);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(3133);
                this.loadDataFileTargetList();
                }
            }

            this.setState(3138);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 506) {
                {
                this.setState(3136);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(3137);
                this.updateList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadDataFileTargetList(): LoadDataFileTargetListContext {
        let localctx = new LoadDataFileTargetListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 270, MySQLParser.RULE_loadDataFileTargetList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3140);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3142);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 270, this.getContext())) {
                case 1:
                    {
                    this.setState(3141);
                    this.fieldOrVariableList();
                    }
                    break;
            }
            this.setState(3144);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldOrVariableList(): FieldOrVariableListContext {
        let localctx = new FieldOrVariableListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 272, MySQLParser.RULE_fieldOrVariableList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3150);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 271, this.getContext())) {
                case 1:
                    {
                    this.setState(3146);
                    this.columnRef();
                    }
                    break;
                case 2:
                    {
                    this.setState(3147);
                    this.match(MySQLParser.AT_SIGN_SYMBOL);
                    this.setState(3148);
                    this.textOrIdentifier();
                    }
                    break;
                case 3:
                    {
                    this.setState(3149);
                    this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                    }
                    break;
            }
            this.setState(3162);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(3152);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3158);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 272, this.getContext())) {
                    case 1:
                        {
                        this.setState(3153);
                        this.columnRef();
                        }
                        break;
                    case 2:
                        {
                        this.setState(3154);
                        this.match(MySQLParser.AT_SIGN_SYMBOL);
                        this.setState(3155);
                        this.textOrIdentifier();
                        }
                        break;
                    case 3:
                        {
                        this.setState(3156);
                        this.match(MySQLParser.AT_TEXT_SUFFIX);
                        }
                        break;
                    case 4:
                        {
                        this.setState(3157);
                        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                        }
                        break;
                }
                }
                }
                this.setState(3164);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replaceStatement(): ReplaceStatementContext {
        let localctx = new ReplaceStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 274, MySQLParser.RULE_replaceStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3165);
            this.match(MySQLParser.REPLACE_SYMBOL);
            this.setState(3167);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 274, this.getContext())) {
                case 1:
                    {
                    this.setState(3166);
                    _la = this.input().LA(1);
                    if(!(_la === 131 || _la === 295)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
            this.setState(3170);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 275, this.getContext())) {
                case 1:
                    {
                    this.setState(3169);
                    this.match(MySQLParser.INTO_SYMBOL);
                    }
                    break;
            }
            this.setState(3172);
            this.tableRef();
            this.setState(3174);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 276, this.getContext())) {
                case 1:
                    {
                    this.setState(3173);
                    this.usePartition();
                    }
                    break;
            }
            this.setState(3180);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 277, this.getContext())) {
                case 1:
                    {
                    this.setState(3176);
                    this.insertFromConstructor();
                    }
                    break;
                case 2:
                    {
                    this.setState(3177);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(3178);
                    this.updateList();
                    }
                    break;
                case 3:
                    {
                    this.setState(3179);
                    this.insertQueryExpression();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectStatement(): SelectStatementContext {
        let localctx = new SelectStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 276, MySQLParser.RULE_selectStatement);
        let _la: number;
        try {
            this.setState(3187);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 279, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3182);
                    this.queryExpression();
                    this.setState(3184);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 200 || _la === 287) {
                        {
                        this.setState(3183);
                        this.lockingClauseList();
                        }
                    }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3186);
                    this.selectStatementWithInto();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext {
        let localctx = new SelectStatementWithIntoContext(this.getContext(), this.getState());
        this.enterRule(localctx, 278, MySQLParser.RULE_selectStatementWithInto);
        let _la: number;
        try {
            this.setState(3206);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 281, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3189);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(3190);
                    this.selectStatementWithInto();
                    this.setState(3191);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3193);
                    this.queryExpression();
                    this.setState(3194);
                    this.intoClause();
                    this.setState(3196);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 200 || _la === 287) {
                        {
                        this.setState(3195);
                        this.lockingClauseList();
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3198);
                    this.queryExpression();
                    this.setState(3199);
                    this.lockingClauseList();
                    this.setState(3200);
                    this.intoClause();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(3202);
                    if (!(this.serverVersion >= 80024 && this.serverVersion < 80031)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024 && this.serverVersion < 80031");
                    }
                    this.setState(3203);
                    this.queryExpressionParens();
                    this.setState(3204);
                    this.intoClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpression(): QueryExpressionContext {
        let localctx = new QueryExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 280, MySQLParser.RULE_queryExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3209);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 282, this.getContext())) {
                case 1:
                    {
                    this.setState(3208);
                    this.withClause();
                    }
                    break;
            }
            this.setState(3211);
            this.queryExpressionBody();
            this.setState(3213);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 283, this.getContext())) {
                case 1:
                    {
                    this.setState(3212);
                    this.orderClause();
                    }
                    break;
            }
            this.setState(3216);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 284, this.getContext())) {
                case 1:
                    {
                    this.setState(3215);
                    this.limitClause();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpressionBody(): QueryExpressionBodyContext {
        let localctx = new QueryExpressionBodyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 282, MySQLParser.RULE_queryExpressionBody);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3220);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 285, this.getContext())) {
                case 1:
                    {
                    this.setState(3218);
                    this.queryPrimary();
                    }
                    break;
                case 2:
                    {
                    this.setState(3219);
                    this.queryExpressionParens();
                    }
                    break;
            }
            this.setState(3233);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 288, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3225);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 286, this.getContext())) {
                        case 1:
                            {
                            this.setState(3222);
                            this.match(MySQLParser.UNION_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(3223);
                            if (!(this.serverVersion >= 80031)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80031");
                            }
                            this.setState(3224);
                            _la = this.input().LA(1);
                            if(!(_la === 663 || _la === 844)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                    }
                    this.setState(3228);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 287, this.getContext())) {
                        case 1:
                            {
                            this.setState(3227);
                            this.unionOption();
                            }
                            break;
                    }
                    this.setState(3230);
                    this.queryExpressionBody();
                    }
                    }
                }
                this.setState(3235);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 288, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        let localctx = new QueryExpressionParensContext(this.getContext(), this.getState());
        this.enterRule(localctx, 284, MySQLParser.RULE_queryExpressionParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3236);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3239);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 289, this.getContext())) {
                case 1:
                    {
                    this.setState(3237);
                    this.queryExpressionParens();
                    }
                    break;
                case 2:
                    {
                    this.setState(3238);
                    this.queryExpressionWithOptLockingClauses();
                    }
                    break;
            }
            this.setState(3241);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localctx = new QueryPrimaryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 286, MySQLParser.RULE_queryPrimary);
        try {
            this.setState(3248);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 290, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3243);
                    this.querySpecification();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3244);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(3245);
                    this.tableValueConstructor();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3246);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(3247);
                    this.explicitTable();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public querySpecification(): QuerySpecificationContext {
        let localctx = new QuerySpecificationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 288, MySQLParser.RULE_querySpecification);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3250);
            this.match(MySQLParser.SELECT_SYMBOL);
            this.setState(3254);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 291, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3251);
                    this.selectOption();
                    }
                    }
                }
                this.setState(3256);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 291, this.getContext());
            }
            this.setState(3257);
            this.selectItemList();
            this.setState(3259);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 292, this.getContext())) {
                case 1:
                    {
                    this.setState(3258);
                    this.intoClause();
                    }
                    break;
            }
            this.setState(3262);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 293, this.getContext())) {
                case 1:
                    {
                    this.setState(3261);
                    this.fromClause();
                    }
                    break;
            }
            this.setState(3265);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 294, this.getContext())) {
                case 1:
                    {
                    this.setState(3264);
                    this.whereClause();
                    }
                    break;
            }
            this.setState(3268);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 295, this.getContext())) {
                case 1:
                    {
                    this.setState(3267);
                    this.groupByClause();
                    }
                    break;
            }
            this.setState(3271);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 296, this.getContext())) {
                case 1:
                    {
                    this.setState(3270);
                    this.havingClause();
                    }
                    break;
            }
            this.setState(3274);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 297, this.getContext())) {
                case 1:
                    {
                    this.setState(3273);
                    this.windowClause();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public subquery(): SubqueryContext {
        let localctx = new SubqueryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 290, MySQLParser.RULE_subquery);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3276);
            this.queryExpressionParens();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public querySpecOption(): QuerySpecOptionContext {
        let localctx = new QuerySpecOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 292, MySQLParser.RULE_querySpecOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3278);
            _la = this.input().LA(1);
            if(!(_la === 10 || _la === 143 || _la === 223 || ((((_la - 531)) & ~0x1F) === 0 && ((1 << (_la - 531)) & 16777259) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public limitClause(): LimitClauseContext {
        let localctx = new LimitClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 294, MySQLParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3280);
            this.match(MySQLParser.LIMIT_SYMBOL);
            this.setState(3281);
            this.limitOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public simpleLimitClause(): SimpleLimitClauseContext {
        let localctx = new SimpleLimitClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 296, MySQLParser.RULE_simpleLimitClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3283);
            this.match(MySQLParser.LIMIT_SYMBOL);
            this.setState(3284);
            this.limitOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public limitOptions(): LimitOptionsContext {
        let localctx = new LimitOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 298, MySQLParser.RULE_limitOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3286);
            this.limitOption();
            this.setState(3289);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 298, this.getContext())) {
                case 1:
                    {
                    this.setState(3287);
                    _la = this.input().LA(1);
                    if(!(_la === 381 || _la === 773)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(3288);
                    this.limitOption();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public limitOption(): LimitOptionContext {
        let localctx = new LimitOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 300, MySQLParser.RULE_limitOption);
        let _la: number;
        try {
            this.setState(3293);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 299, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3291);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3292);
                    _la = this.input().LA(1);
                    if(!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 787)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public intoClause(): IntoClauseContext {
        let localctx = new IntoClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 302, MySQLParser.RULE_intoClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3295);
            this.match(MySQLParser.INTO_SYMBOL);
            this.setState(3323);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 306, this.getContext())) {
                case 1:
                    {
                    this.setState(3296);
                    this.match(MySQLParser.OUTFILE_SYMBOL);
                    this.setState(3297);
                    this.textStringLiteral();
                    this.setState(3299);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 300, this.getContext())) {
                        case 1:
                            {
                            this.setState(3298);
                            this.charsetClause();
                            }
                            break;
                    }
                    this.setState(3302);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 301, this.getContext())) {
                        case 1:
                            {
                            this.setState(3301);
                            this.fieldsClause();
                            }
                            break;
                    }
                    this.setState(3305);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 302, this.getContext())) {
                        case 1:
                            {
                            this.setState(3304);
                            this.linesClause();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(3307);
                    this.match(MySQLParser.DUMPFILE_SYMBOL);
                    this.setState(3308);
                    this.textStringLiteral();
                    }
                    break;
                case 3:
                    {
                    this.setState(3311);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 303, this.getContext())) {
                        case 1:
                            {
                            this.setState(3309);
                            this.textOrIdentifier();
                            }
                            break;
                        case 2:
                            {
                            this.setState(3310);
                            this.userVariable();
                            }
                            break;
                    }
                    this.setState(3320);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 305, this.getContext());
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                            {
                            this.setState(3313);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(3316);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 304, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(3314);
                                    this.textOrIdentifier();
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(3315);
                                    this.userVariable();
                                    }
                                    break;
                            }
                            }
                            }
                        }
                        this.setState(3322);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 305, this.getContext());
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public procedureAnalyseClause(): ProcedureAnalyseClauseContext {
        let localctx = new ProcedureAnalyseClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 304, MySQLParser.RULE_procedureAnalyseClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3325);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(3326);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3332);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 747) {
                {
                this.setState(3327);
                this.match(MySQLParser.INT_NUMBER);
                this.setState(3330);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(3328);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3329);
                    this.match(MySQLParser.INT_NUMBER);
                    }
                }

                }
            }

            this.setState(3334);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public havingClause(): HavingClauseContext {
        let localctx = new HavingClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 306, MySQLParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3336);
            this.match(MySQLParser.HAVING_SYMBOL);
            this.setState(3337);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowClause(): WindowClauseContext {
        let localctx = new WindowClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 308, MySQLParser.RULE_windowClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3339);
            this.match(MySQLParser.WINDOW_SYMBOL);
            this.setState(3340);
            this.windowDefinition();
            this.setState(3345);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 309, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3341);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3342);
                    this.windowDefinition();
                    }
                    }
                }
                this.setState(3347);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 309, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localctx = new WindowDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 310, MySQLParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3348);
            this.windowName();
            this.setState(3349);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(3350);
            this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowSpec(): WindowSpecContext {
        let localctx = new WindowSpecContext(this.getContext(), this.getState());
        this.enterRule(localctx, 312, MySQLParser.RULE_windowSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3352);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3353);
            this.windowSpecDetails();
            this.setState(3354);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowSpecDetails(): WindowSpecDetailsContext {
        let localctx = new WindowSpecDetailsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 314, MySQLParser.RULE_windowSpecDetails);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3357);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 310, this.getContext())) {
                case 1:
                    {
                    this.setState(3356);
                    this.windowName();
                    }
                    break;
            }
            this.setState(3362);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 405) {
                {
                this.setState(3359);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(3360);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(3361);
                this.orderList();
                }
            }

            this.setState(3365);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 393) {
                {
                this.setState(3364);
                this.orderClause();
                }
            }

            this.setState(3368);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 432 || _la === 484 || _la === 683) {
                {
                this.setState(3367);
                this.windowFrameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameClause(): WindowFrameClauseContext {
        let localctx = new WindowFrameClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 316, MySQLParser.RULE_windowFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3370);
            this.windowFrameUnits();
            this.setState(3371);
            this.windowFrameExtent();
            this.setState(3373);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 680) {
                {
                this.setState(3372);
                this.windowFrameExclusion();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameUnits(): WindowFrameUnitsContext {
        let localctx = new WindowFrameUnitsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 318, MySQLParser.RULE_windowFrameUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3375);
            _la = this.input().LA(1);
            if(!(_la === 432 || _la === 484 || _la === 683)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameExtent(): WindowFrameExtentContext {
        let localctx = new WindowFrameExtentContext(this.getContext(), this.getState());
        this.enterRule(localctx, 320, MySQLParser.RULE_windowFrameExtent);
        try {
            this.setState(3379);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CURRENT_SYMBOL:
            case MySQLParser.INTERVAL_SYMBOL:
            case MySQLParser.UNBOUNDED_SYMBOL:
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.PARAM_MARKER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3377);
                this.windowFrameStart();
                }
                break;
            case MySQLParser.BETWEEN_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3378);
                this.windowFrameBetween();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameStart(): WindowFrameStartContext {
        let localctx = new WindowFrameStartContext(this.getContext(), this.getState());
        this.enterRule(localctx, 322, MySQLParser.RULE_windowFrameStart);
        try {
            this.setState(3395);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.UNBOUNDED_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3381);
                this.match(MySQLParser.UNBOUNDED_SYMBOL);
                this.setState(3382);
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3383);
                this.ulonglong_number();
                this.setState(3384);
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.PARAM_MARKER:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3386);
                this.match(MySQLParser.PARAM_MARKER);
                this.setState(3387);
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.INTERVAL_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(3388);
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.setState(3389);
                this.expr(0);
                this.setState(3390);
                this.interval();
                this.setState(3391);
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.CURRENT_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(3393);
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.setState(3394);
                this.match(MySQLParser.ROW_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameBetween(): WindowFrameBetweenContext {
        let localctx = new WindowFrameBetweenContext(this.getContext(), this.getState());
        this.enterRule(localctx, 324, MySQLParser.RULE_windowFrameBetween);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3397);
            this.match(MySQLParser.BETWEEN_SYMBOL);
            this.setState(3398);
            this.windowFrameBound();
            this.setState(3399);
            this.match(MySQLParser.AND_SYMBOL);
            this.setState(3400);
            this.windowFrameBound();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameBound(): WindowFrameBoundContext {
        let localctx = new WindowFrameBoundContext(this.getContext(), this.getState());
        this.enterRule(localctx, 326, MySQLParser.RULE_windowFrameBound);
        try {
            this.setState(3415);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 317, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3402);
                    this.windowFrameStart();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3403);
                    this.match(MySQLParser.UNBOUNDED_SYMBOL);
                    this.setState(3404);
                    this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3405);
                    this.ulonglong_number();
                    this.setState(3406);
                    this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(3408);
                    this.match(MySQLParser.PARAM_MARKER);
                    this.setState(3409);
                    this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(3410);
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.setState(3411);
                    this.expr(0);
                    this.setState(3412);
                    this.interval();
                    this.setState(3413);
                    this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameExclusion(): WindowFrameExclusionContext {
        let localctx = new WindowFrameExclusionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 328, MySQLParser.RULE_windowFrameExclusion);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3417);
            this.match(MySQLParser.EXCLUDE_SYMBOL);
            this.setState(3424);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CURRENT_SYMBOL:
                {
                this.setState(3418);
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.setState(3419);
                this.match(MySQLParser.ROW_SYMBOL);
                }
                break;
            case MySQLParser.GROUP_SYMBOL:
                {
                this.setState(3420);
                this.match(MySQLParser.GROUP_SYMBOL);
                }
                break;
            case MySQLParser.TIES_SYMBOL:
                {
                this.setState(3421);
                this.match(MySQLParser.TIES_SYMBOL);
                }
                break;
            case MySQLParser.NO_SYMBOL:
                {
                this.setState(3422);
                this.match(MySQLParser.NO_SYMBOL);
                this.setState(3423);
                this.match(MySQLParser.OTHERS_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public withClause(): WithClauseContext {
        let localctx = new WithClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 330, MySQLParser.RULE_withClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3426);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(3428);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 319, this.getContext())) {
                case 1:
                    {
                    this.setState(3427);
                    this.match(MySQLParser.RECURSIVE_SYMBOL);
                    }
                    break;
            }
            this.setState(3430);
            this.commonTableExpression();
            this.setState(3435);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 320, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3431);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3432);
                    this.commonTableExpression();
                    }
                    }
                }
                this.setState(3437);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 320, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public commonTableExpression(): CommonTableExpressionContext {
        let localctx = new CommonTableExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 332, MySQLParser.RULE_commonTableExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3438);
            this.identifier();
            this.setState(3440);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(3439);
                this.columnInternalRefList();
                }
            }

            this.setState(3442);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(3443);
            this.subquery();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupByClause(): GroupByClauseContext {
        let localctx = new GroupByClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 334, MySQLParser.RULE_groupByClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3445);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(3446);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(3447);
            this.orderList();
            this.setState(3449);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 322, this.getContext())) {
                case 1:
                    {
                    this.setState(3448);
                    this.olapOption();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public olapOption(): OlapOptionContext {
        let localctx = new OlapOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 336, MySQLParser.RULE_olapOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3451);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(3452);
            this.match(MySQLParser.ROLLUP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public orderClause(): OrderClauseContext {
        let localctx = new OrderClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 338, MySQLParser.RULE_orderClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3454);
            this.match(MySQLParser.ORDER_SYMBOL);
            this.setState(3455);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(3456);
            this.orderList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public direction(): DirectionContext {
        let localctx = new DirectionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 340, MySQLParser.RULE_direction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3458);
            _la = this.input().LA(1);
            if(!(_la === 18 || _la === 134)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fromClause(): FromClauseContext {
        let localctx = new FromClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 342, MySQLParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3460);
            this.match(MySQLParser.FROM_SYMBOL);
            this.setState(3463);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 323, this.getContext())) {
                case 1:
                    {
                    this.setState(3461);
                    this.match(MySQLParser.DUAL_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(3462);
                    this.tableReferenceList();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableReferenceList(): TableReferenceListContext {
        let localctx = new TableReferenceListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 344, MySQLParser.RULE_tableReferenceList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3465);
            this.tableReference();
            this.setState(3470);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 324, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3466);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3467);
                    this.tableReference();
                    }
                    }
                }
                this.setState(3472);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 324, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableValueConstructor(): TableValueConstructorContext {
        let localctx = new TableValueConstructorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 346, MySQLParser.RULE_tableValueConstructor);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3473);
            this.match(MySQLParser.VALUES_SYMBOL);
            this.setState(3474);
            this.rowValueExplicit();
            this.setState(3479);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 325, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3475);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3476);
                    this.rowValueExplicit();
                    }
                    }
                }
                this.setState(3481);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 325, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public explicitTable(): ExplicitTableContext {
        let localctx = new ExplicitTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 348, MySQLParser.RULE_explicitTable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3482);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(3483);
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public rowValueExplicit(): RowValueExplicitContext {
        let localctx = new RowValueExplicitContext(this.getContext(), this.getState());
        this.enterRule(localctx, 350, MySQLParser.RULE_rowValueExplicit);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3485);
            this.match(MySQLParser.ROW_SYMBOL);
            this.setState(3486);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3488);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 326, this.getContext())) {
                case 1:
                    {
                    this.setState(3487);
                    this.values();
                    }
                    break;
            }
            this.setState(3490);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectOption(): SelectOptionContext {
        let localctx = new SelectOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 352, MySQLParser.RULE_selectOption);
        try {
            this.setState(3494);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ALL_SYMBOL:
            case MySQLParser.DISTINCT_SYMBOL:
            case MySQLParser.HIGH_PRIORITY_SYMBOL:
            case MySQLParser.SQL_BIG_RESULT_SYMBOL:
            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
            case MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL:
            case MySQLParser.SQL_SMALL_RESULT_SYMBOL:
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3492);
                this.querySpecOption();
                }
                break;
            case MySQLParser.SQL_NO_CACHE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3493);
                this.match(MySQLParser.SQL_NO_CACHE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockingClauseList(): LockingClauseListContext {
        let localctx = new LockingClauseListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 354, MySQLParser.RULE_lockingClauseList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3497);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            do {
                {
                {
                this.setState(3496);
                this.lockingClause();
                }
                }
                this.setState(3499);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            } while (_la === 200 || _la === 287);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockingClause(): LockingClauseContext {
        let localctx = new LockingClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 356, MySQLParser.RULE_lockingClause);
        let _la: number;
        try {
            this.setState(3514);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3501);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(3502);
                this.lockStrengh();
                this.setState(3505);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 668) {
                    {
                    this.setState(3503);
                    this.match(MySQLParser.OF_SYMBOL);
                    this.setState(3504);
                    this.tableAliasRefList();
                    }
                }

                this.setState(3508);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 669 || _la === 671) {
                    {
                    this.setState(3507);
                    this.lockedRowAction();
                    }
                }

                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3510);
                this.match(MySQLParser.LOCK_SYMBOL);
                this.setState(3511);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(3512);
                this.match(MySQLParser.SHARE_SYMBOL);
                this.setState(3513);
                this.match(MySQLParser.MODE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockStrengh(): LockStrenghContext {
        let localctx = new LockStrenghContext(this.getContext(), this.getState());
        this.enterRule(localctx, 358, MySQLParser.RULE_lockStrengh);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3516);
            _la = this.input().LA(1);
            if(!(_la === 508 || _la === 614)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockedRowAction(): LockedRowActionContext {
        let localctx = new LockedRowActionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 360, MySQLParser.RULE_lockedRowAction);
        try {
            this.setState(3521);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.SKIP_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3518);
                this.match(MySQLParser.SKIP_SYMBOL);
                this.setState(3519);
                this.match(MySQLParser.LOCKED_SYMBOL);
                }
                break;
            case MySQLParser.NOWAIT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3520);
                this.match(MySQLParser.NOWAIT_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectItemList(): SelectItemListContext {
        let localctx = new SelectItemListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 362, MySQLParser.RULE_selectItemList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3525);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 333, this.getContext())) {
                case 1:
                    {
                    this.setState(3523);
                    this.selectItem();
                    }
                    break;
                case 2:
                    {
                    this.setState(3524);
                    this.match(MySQLParser.MULT_OPERATOR);
                    }
                    break;
            }
            this.setState(3531);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 334, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3527);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3528);
                    this.selectItem();
                    }
                    }
                }
                this.setState(3533);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 334, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectItem(): SelectItemContext {
        let localctx = new SelectItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 364, MySQLParser.RULE_selectItem);
        try {
            this.setState(3539);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 336, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3534);
                    this.tableWild();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3535);
                    this.expr(0);
                    this.setState(3537);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 335, this.getContext())) {
                        case 1:
                            {
                            this.setState(3536);
                            this.selectAlias();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectAlias(): SelectAliasContext {
        let localctx = new SelectAliasContext(this.getContext(), this.getState());
        this.enterRule(localctx, 366, MySQLParser.RULE_selectAlias);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3542);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 337, this.getContext())) {
                case 1:
                    {
                    this.setState(3541);
                    this.match(MySQLParser.AS_SYMBOL);
                    }
                    break;
            }
            this.setState(3546);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 338, this.getContext())) {
                case 1:
                    {
                    this.setState(3544);
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.setState(3545);
                    this.textStringLiteral();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public whereClause(): WhereClauseContext {
        let localctx = new WhereClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 368, MySQLParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3548);
            this.match(MySQLParser.WHERE_SYMBOL);
            this.setState(3549);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableReference(): TableReferenceContext {
        let localctx = new TableReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 370, MySQLParser.RULE_tableReference);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3561);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 340, this.getContext())) {
                case 1:
                    {
                    this.setState(3551);
                    this.tableFactor();
                    }
                    break;
                case 2:
                    {
                    this.setState(3552);
                    this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                    this.setState(3556);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 339, this.getContext())) {
                        case 1:
                            {
                            this.setState(3553);
                            if (!(this.serverVersion < 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80017");
                            }
                            this.setState(3554);
                            this.identifier();
                            }
                            break;
                        case 2:
                            {
                            this.setState(3555);
                            this.match(MySQLParser.OJ_SYMBOL);
                            }
                            break;
                    }
                    this.setState(3558);
                    this.escapedTableReference();
                    this.setState(3559);
                    this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                    }
                    break;
            }
            this.setState(3566);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 341, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3563);
                    this.joinedTable();
                    }
                    }
                }
                this.setState(3568);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 341, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public escapedTableReference(): EscapedTableReferenceContext {
        let localctx = new EscapedTableReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 372, MySQLParser.RULE_escapedTableReference);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3569);
            this.tableFactor();
            this.setState(3573);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 98 || _la === 239 || _la === 261 || _la === 272 || _la === 359 || _la === 478 || _la === 555) {
                {
                {
                this.setState(3570);
                this.joinedTable();
                }
                }
                this.setState(3575);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public joinedTable(): JoinedTableContext {
        let localctx = new JoinedTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 374, MySQLParser.RULE_joinedTable);
        try {
            this.setState(3595);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CROSS_SYMBOL:
            case MySQLParser.INNER_SYMBOL:
            case MySQLParser.JOIN_SYMBOL:
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3576);
                this.innerJoinType();
                this.setState(3577);
                this.tableReference();
                this.setState(3582);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 343, this.getContext())) {
                    case 1:
                        {
                        this.setState(3578);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(3579);
                        this.expr(0);
                        }
                        break;
                    case 2:
                        {
                        this.setState(3580);
                        this.match(MySQLParser.USING_SYMBOL);
                        this.setState(3581);
                        this.identifierListWithParentheses();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.LEFT_SYMBOL:
            case MySQLParser.RIGHT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3584);
                this.outerJoinType();
                this.setState(3585);
                this.tableReference();
                this.setState(3590);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.ON_SYMBOL:
                    {
                    this.setState(3586);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(3587);
                    this.expr(0);
                    }
                    break;
                case MySQLParser.USING_SYMBOL:
                    {
                    this.setState(3588);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(3589);
                    this.identifierListWithParentheses();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.NATURAL_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3592);
                this.naturalJoinType();
                this.setState(3593);
                this.tableFactor();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public naturalJoinType(): NaturalJoinTypeContext {
        let localctx = new NaturalJoinTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 376, MySQLParser.RULE_naturalJoinType);
        let _la: number;
        try {
            this.setState(3608);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 348, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3597);
                    this.match(MySQLParser.NATURAL_SYMBOL);
                    this.setState(3599);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 239) {
                        {
                        this.setState(3598);
                        this.match(MySQLParser.INNER_SYMBOL);
                        }
                    }

                    this.setState(3601);
                    this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3602);
                    this.match(MySQLParser.NATURAL_SYMBOL);
                    this.setState(3603);
                    _la = this.input().LA(1);
                    if(!(_la === 272 || _la === 478)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(3605);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 395) {
                        {
                        this.setState(3604);
                        this.match(MySQLParser.OUTER_SYMBOL);
                        }
                    }

                    this.setState(3607);
                    this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public innerJoinType(): InnerJoinTypeContext {
        let localctx = new InnerJoinTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 378, MySQLParser.RULE_innerJoinType);
        let _la: number;
        try {
            this.setState(3615);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CROSS_SYMBOL:
            case MySQLParser.INNER_SYMBOL:
            case MySQLParser.JOIN_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3611);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 98 || _la === 239) {
                    {
                    this.setState(3610);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 98 || _la === 239)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.setState(3613);
                this.match(MySQLParser.JOIN_SYMBOL);
                }
                break;
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3614);
                localctx._type_ = this.match(MySQLParser.STRAIGHT_JOIN_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public outerJoinType(): OuterJoinTypeContext {
        let localctx = new OuterJoinTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 380, MySQLParser.RULE_outerJoinType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3617);
            localctx._type_ = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 272 || _la === 478)) {
                localctx._type_ = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(3619);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 395) {
                {
                this.setState(3618);
                this.match(MySQLParser.OUTER_SYMBOL);
                }
            }

            this.setState(3621);
            this.match(MySQLParser.JOIN_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableFactor(): TableFactorContext {
        let localctx = new TableFactorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 382, MySQLParser.RULE_tableFactor);
        try {
            this.setState(3629);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 352, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3623);
                    this.singleTable();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3624);
                    this.singleTableParens();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3625);
                    this.derivedTable();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(3626);
                    this.tableReferenceListParens();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(3627);
                    if (!(this.serverVersion >= 80004)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80004");
                    }
                    this.setState(3628);
                    this.tableFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public singleTable(): SingleTableContext {
        let localctx = new SingleTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 384, MySQLParser.RULE_singleTable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3631);
            this.tableRef();
            this.setState(3633);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 353, this.getContext())) {
                case 1:
                    {
                    this.setState(3632);
                    this.usePartition();
                    }
                    break;
            }
            this.setState(3636);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 354, this.getContext())) {
                case 1:
                    {
                    this.setState(3635);
                    this.tableAlias();
                    }
                    break;
            }
            this.setState(3639);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 355, this.getContext())) {
                case 1:
                    {
                    this.setState(3638);
                    this.indexHintList();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public singleTableParens(): SingleTableParensContext {
        let localctx = new SingleTableParensContext(this.getContext(), this.getState());
        this.enterRule(localctx, 386, MySQLParser.RULE_singleTableParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3641);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3644);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 356, this.getContext())) {
                case 1:
                    {
                    this.setState(3642);
                    this.singleTable();
                    }
                    break;
                case 2:
                    {
                    this.setState(3643);
                    this.singleTableParens();
                    }
                    break;
            }
            this.setState(3646);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public derivedTable(): DerivedTableContext {
        let localctx = new DerivedTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 388, MySQLParser.RULE_derivedTable);
        try {
            this.setState(3664);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 361, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3648);
                    this.subquery();
                    this.setState(3650);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 357, this.getContext())) {
                        case 1:
                            {
                            this.setState(3649);
                            this.tableAlias();
                            }
                            break;
                    }
                    this.setState(3653);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 358, this.getContext())) {
                        case 1:
                            {
                            this.setState(3652);
                            this.columnInternalRefList();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3655);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(3656);
                    this.match(MySQLParser.LATERAL_SYMBOL);
                    this.setState(3657);
                    this.subquery();
                    this.setState(3659);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 359, this.getContext())) {
                        case 1:
                            {
                            this.setState(3658);
                            this.tableAlias();
                            }
                            break;
                    }
                    this.setState(3662);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 360, this.getContext())) {
                        case 1:
                            {
                            this.setState(3661);
                            this.columnInternalRefList();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableReferenceListParens(): TableReferenceListParensContext {
        let localctx = new TableReferenceListParensContext(this.getContext(), this.getState());
        this.enterRule(localctx, 390, MySQLParser.RULE_tableReferenceListParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3666);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3669);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 362, this.getContext())) {
                case 1:
                    {
                    this.setState(3667);
                    this.tableReferenceList();
                    }
                    break;
                case 2:
                    {
                    this.setState(3668);
                    this.tableReferenceListParens();
                    }
                    break;
            }
            this.setState(3671);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableFunction(): TableFunctionContext {
        let localctx = new TableFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 392, MySQLParser.RULE_tableFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3673);
            this.match(MySQLParser.JSON_TABLE_SYMBOL);
            this.setState(3674);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3675);
            this.expr(0);
            this.setState(3676);
            this.match(MySQLParser.COMMA_SYMBOL);
            this.setState(3677);
            this.textStringLiteral();
            this.setState(3678);
            this.columnsClause();
            this.setState(3679);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(3681);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 363, this.getContext())) {
                case 1:
                    {
                    this.setState(3680);
                    this.tableAlias();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnsClause(): ColumnsClauseContext {
        let localctx = new ColumnsClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 394, MySQLParser.RULE_columnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3683);
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.setState(3684);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3685);
            this.jtColumn();
            this.setState(3690);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(3686);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3687);
                this.jtColumn();
                }
                }
                this.setState(3692);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(3693);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jtColumn(): JtColumnContext {
        let localctx = new JtColumnContext(this.getContext(), this.getState());
        this.enterRule(localctx, 396, MySQLParser.RULE_jtColumn);
        let _la: number;
        try {
            this.setState(3718);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 368, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3695);
                    this.identifier();
                    this.setState(3696);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(3697);
                    this.match(MySQLParser.ORDINALITY_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3699);
                    this.identifier();
                    this.setState(3700);
                    this.dataType();
                    this.setState(3703);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 365, this.getContext())) {
                        case 1:
                            {
                            this.setState(3701);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(3702);
                            this.collate();
                            }
                            break;
                    }
                    this.setState(3706);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 174) {
                        {
                        this.setState(3705);
                        this.match(MySQLParser.EXISTS_SYMBOL);
                        }
                    }

                    this.setState(3708);
                    this.match(MySQLParser.PATH_SYMBOL);
                    this.setState(3709);
                    this.textStringLiteral();
                    this.setState(3711);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 128 || _la === 165 || _la === 376) {
                        {
                        this.setState(3710);
                        this.onEmptyOrErrorJsonTable();
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3713);
                    this.match(MySQLParser.NESTED_SYMBOL);
                    this.setState(3714);
                    this.match(MySQLParser.PATH_SYMBOL);
                    this.setState(3715);
                    this.textStringLiteral();
                    this.setState(3716);
                    this.columnsClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onEmptyOrError(): OnEmptyOrErrorContext {
        let localctx = new OnEmptyOrErrorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 398, MySQLParser.RULE_onEmptyOrError);
        let _la: number;
        try {
            this.setState(3725);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 370, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3720);
                    this.onEmpty();
                    this.setState(3722);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 128 || _la === 165 || _la === 376) {
                        {
                        this.setState(3721);
                        this.onError();
                        }
                    }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3724);
                    this.onError();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onEmptyOrErrorJsonTable(): OnEmptyOrErrorJsonTableContext {
        let localctx = new OnEmptyOrErrorJsonTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 400, MySQLParser.RULE_onEmptyOrErrorJsonTable);
        try {
            this.setState(3731);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 371, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3727);
                    this.onEmptyOrError();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3728);
                    this.onError();
                    this.setState(3729);
                    this.onEmpty();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onEmpty(): OnEmptyContext {
        let localctx = new OnEmptyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 402, MySQLParser.RULE_onEmpty);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3733);
            this.jsonOnResponse();
            this.setState(3734);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(3735);
            this.match(MySQLParser.EMPTY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onError(): OnErrorContext {
        let localctx = new OnErrorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 404, MySQLParser.RULE_onError);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3737);
            this.jsonOnResponse();
            this.setState(3738);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(3739);
            this.match(MySQLParser.ERROR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jsonOnResponse(): JsonOnResponseContext {
        let localctx = new JsonOnResponseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 406, MySQLParser.RULE_jsonOnResponse);
        try {
            this.setState(3745);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ERROR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3741);
                this.match(MySQLParser.ERROR_SYMBOL);
                }
                break;
            case MySQLParser.NULL_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3742);
                this.match(MySQLParser.NULL_SYMBOL);
                }
                break;
            case MySQLParser.DEFAULT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3743);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.setState(3744);
                this.textStringLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public unionOption(): UnionOptionContext {
        let localctx = new UnionOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 408, MySQLParser.RULE_unionOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3747);
            _la = this.input().LA(1);
            if(!(_la === 10 || _la === 143)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableAlias(): TableAliasContext {
        let localctx = new TableAliasContext(this.getContext(), this.getState());
        this.enterRule(localctx, 410, MySQLParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3752);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 373, this.getContext())) {
                case 1:
                    {
                    this.setState(3749);
                    this.match(MySQLParser.AS_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(3750);
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.setState(3751);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(3754);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexHintList(): IndexHintListContext {
        let localctx = new IndexHintListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 412, MySQLParser.RULE_indexHintList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3756);
            this.indexHint();
            this.setState(3761);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 374, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3757);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3758);
                    this.indexHint();
                    }
                    }
                }
                this.setState(3763);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 374, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexHint(): IndexHintContext {
        let localctx = new IndexHintContext(this.getContext(), this.getState());
        this.enterRule(localctx, 414, MySQLParser.RULE_indexHint);
        let _la: number;
        try {
            this.setState(3784);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FORCE_SYMBOL:
            case MySQLParser.IGNORE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3764);
                this.indexHintType();
                this.setState(3765);
                this.keyOrIndex();
                this.setState(3767);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                    this.setState(3766);
                    this.indexHintClause();
                    }
                }

                this.setState(3769);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3770);
                this.indexList();
                this.setState(3771);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.USE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3773);
                this.match(MySQLParser.USE_SYMBOL);
                this.setState(3774);
                this.keyOrIndex();
                this.setState(3776);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                    this.setState(3775);
                    this.indexHintClause();
                    }
                }

                this.setState(3778);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3780);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 377, this.getContext())) {
                    case 1:
                        {
                        this.setState(3779);
                        this.indexList();
                        }
                        break;
                }
                this.setState(3782);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexHintType(): IndexHintTypeContext {
        let localctx = new IndexHintTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 416, MySQLParser.RULE_indexHintType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3786);
            _la = this.input().LA(1);
            if(!(_la === 198 || _la === 232)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyOrIndex(): KeyOrIndexContext {
        let localctx = new KeyOrIndexContext(this.getContext(), this.getState());
        this.enterRule(localctx, 418, MySQLParser.RULE_keyOrIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3788);
            _la = this.input().LA(1);
            if(!(_la === 236 || _la === 265)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public constraintKeyType(): ConstraintKeyTypeContext {
        let localctx = new ConstraintKeyTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 420, MySQLParser.RULE_constraintKeyType);
        let _la: number;
        try {
            this.setState(3796);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.PRIMARY_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3790);
                this.match(MySQLParser.PRIMARY_SYMBOL);
                this.setState(3791);
                this.match(MySQLParser.KEY_SYMBOL);
                }
                break;
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3792);
                this.match(MySQLParser.UNIQUE_SYMBOL);
                this.setState(3794);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 236 || _la === 265) {
                    {
                    this.setState(3793);
                    this.keyOrIndex();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexHintClause(): IndexHintClauseContext {
        let localctx = new IndexHintClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 422, MySQLParser.RULE_indexHintClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3798);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(3804);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.JOIN_SYMBOL:
                {
                this.setState(3799);
                this.match(MySQLParser.JOIN_SYMBOL);
                }
                break;
            case MySQLParser.ORDER_SYMBOL:
                {
                this.setState(3800);
                this.match(MySQLParser.ORDER_SYMBOL);
                this.setState(3801);
                this.match(MySQLParser.BY_SYMBOL);
                }
                break;
            case MySQLParser.GROUP_SYMBOL:
                {
                this.setState(3802);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(3803);
                this.match(MySQLParser.BY_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexList(): IndexListContext {
        let localctx = new IndexListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 424, MySQLParser.RULE_indexList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3806);
            this.indexListElement();
            this.setState(3811);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(3807);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3808);
                this.indexListElement();
                }
                }
                this.setState(3813);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexListElement(): IndexListElementContext {
        let localctx = new IndexListElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 426, MySQLParser.RULE_indexListElement);
        try {
            this.setState(3816);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 383, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3814);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3815);
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public updateStatement(): UpdateStatementContext {
        let localctx = new UpdateStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 428, MySQLParser.RULE_updateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3819);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 645) {
                {
                this.setState(3818);
                this.withClause();
                }
            }

            this.setState(3821);
            this.match(MySQLParser.UPDATE_SYMBOL);
            this.setState(3823);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 385, this.getContext())) {
                case 1:
                    {
                    this.setState(3822);
                    this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                    }
                    break;
            }
            this.setState(3826);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 386, this.getContext())) {
                case 1:
                    {
                    this.setState(3825);
                    this.match(MySQLParser.IGNORE_SYMBOL);
                    }
                    break;
            }
            this.setState(3828);
            this.tableReferenceList();
            this.setState(3829);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(3830);
            this.updateList();
            this.setState(3832);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 643) {
                {
                this.setState(3831);
                this.whereClause();
                }
            }

            this.setState(3835);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 393) {
                {
                this.setState(3834);
                this.orderClause();
                }
            }

            this.setState(3838);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 276) {
                {
                this.setState(3837);
                this.simpleLimitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public transactionOrLockingStatement(): TransactionOrLockingStatementContext {
        let localctx = new TransactionOrLockingStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 430, MySQLParser.RULE_transactionOrLockingStatement);
        try {
            this.setState(3844);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.COMMIT_SYMBOL:
            case MySQLParser.START_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3840);
                this.transactionStatement();
                }
                break;
            case MySQLParser.RELEASE_SYMBOL:
            case MySQLParser.ROLLBACK_SYMBOL:
            case MySQLParser.SAVEPOINT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3841);
                this.savepointStatement();
                }
                break;
            case MySQLParser.LOCK_SYMBOL:
            case MySQLParser.UNLOCK_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3842);
                this.lockStatement();
                }
                break;
            case MySQLParser.XA_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(3843);
                this.xaStatement();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public transactionStatement(): TransactionStatementContext {
        let localctx = new TransactionStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 432, MySQLParser.RULE_transactionStatement);
        let _la: number;
        try {
            this.setState(3871);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.START_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3846);
                this.match(MySQLParser.START_SYMBOL);
                this.setState(3847);
                this.match(MySQLParser.TRANSACTION_SYMBOL);
                this.setState(3851);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 435 || _la === 645) {
                    {
                    {
                    this.setState(3848);
                    this.startTransactionOptionList();
                    }
                    }
                    this.setState(3853);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.COMMIT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3854);
                this.match(MySQLParser.COMMIT_SYMBOL);
                this.setState(3856);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 647) {
                    {
                    this.setState(3855);
                    this.match(MySQLParser.WORK_SYMBOL);
                    }
                }

                this.setState(3863);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 15) {
                    {
                    this.setState(3858);
                    this.match(MySQLParser.AND_SYMBOL);
                    this.setState(3860);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 373) {
                        {
                        this.setState(3859);
                        this.match(MySQLParser.NO_SYMBOL);
                        }
                    }

                    this.setState(3862);
                    this.match(MySQLParser.CHAIN_SYMBOL);
                    }
                }

                this.setState(3869);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 373 || _la === 450) {
                    {
                    this.setState(3866);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 373) {
                        {
                        this.setState(3865);
                        this.match(MySQLParser.NO_SYMBOL);
                        }
                    }

                    this.setState(3868);
                    this.match(MySQLParser.RELEASE_SYMBOL);
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public beginWork(): BeginWorkContext {
        let localctx = new BeginWorkContext(this.getContext(), this.getState());
        this.enterRule(localctx, 434, MySQLParser.RULE_beginWork);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3873);
            this.match(MySQLParser.BEGIN_SYMBOL);
            this.setState(3875);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 647) {
                {
                this.setState(3874);
                this.match(MySQLParser.WORK_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public startTransactionOptionList(): StartTransactionOptionListContext {
        let localctx = new StartTransactionOptionListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 436, MySQLParser.RULE_startTransactionOptionList);
        let _la: number;
        try {
            this.setState(3882);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.WITH_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3877);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(3878);
                this.match(MySQLParser.CONSISTENT_SYMBOL);
                this.setState(3879);
                this.match(MySQLParser.SNAPSHOT_SYMBOL);
                }
                break;
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3880);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(3881);
                _la = this.input().LA(1);
                if(!(_la === 386 || _la === 649)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public savepointStatement(): SavepointStatementContext {
        let localctx = new SavepointStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 438, MySQLParser.RULE_savepointStatement);
        let _la: number;
        try {
            this.setState(3913);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.SAVEPOINT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3884);
                this.match(MySQLParser.SAVEPOINT_SYMBOL);
                this.setState(3885);
                this.identifier();
                }
                break;
            case MySQLParser.ROLLBACK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3886);
                this.match(MySQLParser.ROLLBACK_SYMBOL);
                this.setState(3888);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 647) {
                    {
                    this.setState(3887);
                    this.match(MySQLParser.WORK_SYMBOL);
                    }
                }

                this.setState(3908);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.TO_SYMBOL:
                    {
                    this.setState(3890);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(3892);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 401, this.getContext())) {
                        case 1:
                            {
                            this.setState(3891);
                            this.match(MySQLParser.SAVEPOINT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(3894);
                    this.identifier();
                    }
                    break;
                case MySQLParser.EOF:
                case MySQLParser.AND_SYMBOL:
                case MySQLParser.NO_SYMBOL:
                case MySQLParser.RELEASE_SYMBOL:
                case MySQLParser.SEMICOLON_SYMBOL:
                    {
                    this.setState(3900);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 15) {
                        {
                        this.setState(3895);
                        this.match(MySQLParser.AND_SYMBOL);
                        this.setState(3897);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 373) {
                            {
                            this.setState(3896);
                            this.match(MySQLParser.NO_SYMBOL);
                            }
                        }

                        this.setState(3899);
                        this.match(MySQLParser.CHAIN_SYMBOL);
                        }
                    }

                    this.setState(3906);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 373 || _la === 450) {
                        {
                        this.setState(3903);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 373) {
                            {
                            this.setState(3902);
                            this.match(MySQLParser.NO_SYMBOL);
                            }
                        }

                        this.setState(3905);
                        this.match(MySQLParser.RELEASE_SYMBOL);
                        }
                    }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.RELEASE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3910);
                this.match(MySQLParser.RELEASE_SYMBOL);
                this.setState(3911);
                this.match(MySQLParser.SAVEPOINT_SYMBOL);
                this.setState(3912);
                this.identifier();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockStatement(): LockStatementContext {
        let localctx = new LockStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 440, MySQLParser.RULE_lockStatement);
        let _la: number;
        try {
            this.setState(3931);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 409, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3915);
                    this.match(MySQLParser.LOCK_SYMBOL);
                    this.setState(3916);
                    _la = this.input().LA(1);
                    if(!(_la === 571 || _la === 574)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(3917);
                    this.lockItem();
                    this.setState(3922);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(3918);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(3919);
                        this.lockItem();
                        }
                        }
                        this.setState(3924);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3925);
                    this.match(MySQLParser.LOCK_SYMBOL);
                    this.setState(3926);
                    this.match(MySQLParser.INSTANCE_SYMBOL);
                    this.setState(3927);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(3928);
                    this.match(MySQLParser.BACKUP_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3929);
                    this.match(MySQLParser.UNLOCK_SYMBOL);
                    this.setState(3930);
                    _la = this.input().LA(1);
                    if(!(_la === 244 || _la === 571 || _la === 574)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockItem(): LockItemContext {
        let localctx = new LockItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 442, MySQLParser.RULE_lockItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3933);
            this.tableRef();
            this.setState(3935);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 410, this.getContext())) {
                case 1:
                    {
                    this.setState(3934);
                    this.tableAlias();
                    }
                    break;
            }
            this.setState(3937);
            this.lockOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockOption(): LockOptionContext {
        let localctx = new LockOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 444, MySQLParser.RULE_lockOption);
        let _la: number;
        try {
            this.setState(3947);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3939);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(3941);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284) {
                    {
                    this.setState(3940);
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.LOW_PRIORITY_SYMBOL:
            case MySQLParser.WRITE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3944);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 295) {
                    {
                    this.setState(3943);
                    this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                    }
                }

                this.setState(3946);
                this.match(MySQLParser.WRITE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public xaStatement(): XaStatementContext {
        let localctx = new XaStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 446, MySQLParser.RULE_xaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3949);
            this.match(MySQLParser.XA_SYMBOL);
            this.setState(3978);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.BEGIN_SYMBOL:
            case MySQLParser.START_SYMBOL:
                {
                this.setState(3950);
                _la = this.input().LA(1);
                if(!(_la === 29 || _la === 543)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(3951);
                this.xid();
                this.setState(3953);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 261 || _la === 472) {
                    {
                    this.setState(3952);
                    _la = this.input().LA(1);
                    if(!(_la === 261 || _la === 472)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case MySQLParser.END_SYMBOL:
                {
                this.setState(3955);
                this.match(MySQLParser.END_SYMBOL);
                this.setState(3956);
                this.xid();
                this.setState(3962);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 566) {
                    {
                    this.setState(3957);
                    this.match(MySQLParser.SUSPEND_SYMBOL);
                    this.setState(3960);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 200) {
                        {
                        this.setState(3958);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(3959);
                        this.match(MySQLParser.MIGRATE_SYMBOL);
                        }
                    }

                    }
                }

                }
                break;
            case MySQLParser.PREPARE_SYMBOL:
                {
                this.setState(3964);
                this.match(MySQLParser.PREPARE_SYMBOL);
                this.setState(3965);
                this.xid();
                }
                break;
            case MySQLParser.COMMIT_SYMBOL:
                {
                this.setState(3966);
                this.match(MySQLParser.COMMIT_SYMBOL);
                this.setState(3967);
                this.xid();
                this.setState(3970);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 384) {
                    {
                    this.setState(3968);
                    this.match(MySQLParser.ONE_SYMBOL);
                    this.setState(3969);
                    this.match(MySQLParser.PHASE_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.ROLLBACK_SYMBOL:
                {
                this.setState(3972);
                this.match(MySQLParser.ROLLBACK_SYMBOL);
                this.setState(3973);
                this.xid();
                }
                break;
            case MySQLParser.RECOVER_SYMBOL:
                {
                this.setState(3974);
                this.match(MySQLParser.RECOVER_SYMBOL);
                this.setState(3976);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 94) {
                    {
                    this.setState(3975);
                    this.xaConvert();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public xaConvert(): XaConvertContext {
        let localctx = new XaConvertContext(this.getContext(), this.getState());
        this.enterRule(localctx, 448, MySQLParser.RULE_xaConvert);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3980);
            this.match(MySQLParser.CONVERT_SYMBOL);
            this.setState(3981);
            this.match(MySQLParser.XID_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public xid(): XidContext {
        let localctx = new XidContext(this.getContext(), this.getState());
        this.enterRule(localctx, 450, MySQLParser.RULE_xid);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3983);
            this.textString();
            this.setState(3990);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 773) {
                {
                this.setState(3984);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3985);
                this.textString();
                this.setState(3988);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(3986);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3987);
                    this.ulong_number();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicationStatement(): ReplicationStatementContext {
        let localctx = new ReplicationStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 452, MySQLParser.RULE_replicationStatement);
        let _la: number;
        try {
            this.setState(4023);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 425, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3992);
                    this.match(MySQLParser.PURGE_SYMBOL);
                    this.setState(3993);
                    _la = this.input().LA(1);
                    if(!(_la === 32 || _la === 316)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(3994);
                    this.match(MySQLParser.LOGS_SYMBOL);
                    this.setState(3999);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.TO_SYMBOL:
                        {
                        this.setState(3995);
                        this.match(MySQLParser.TO_SYMBOL);
                        this.setState(3996);
                        this.textLiteral();
                        }
                        break;
                    case MySQLParser.BEFORE_SYMBOL:
                        {
                        this.setState(3997);
                        this.match(MySQLParser.BEFORE_SYMBOL);
                        this.setState(3998);
                        this.expr(0);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4001);
                    this.changeSource();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4002);
                    this.match(MySQLParser.RESET_SYMBOL);
                    this.setState(4003);
                    this.resetOption();
                    this.setState(4008);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(4004);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(4005);
                        this.resetOption();
                        }
                        }
                        this.setState(4010);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(4011);
                    this.match(MySQLParser.RESET_SYMBOL);
                    this.setState(4012);
                    this.match(MySQLParser.PERSIST_SYMBOL);
                    this.setState(4016);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 231) {
                        {
                        this.setState(4013);
                        this.ifExists();
                        this.setState(4014);
                        this.identifier();
                        }
                    }

                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(4018);
                    this.startReplicaStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(4019);
                    this.stopReplicaStatement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(4020);
                    this.changeReplication();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(4021);
                    this.replicationLoad();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(4022);
                    this.groupReplication();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resetOption(): ResetOptionContext {
        let localctx = new ResetOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 454, MySQLParser.RULE_resetOption);
        let _la: number;
        try {
            this.setState(4036);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.MASTER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4025);
                this.match(MySQLParser.MASTER_SYMBOL);
                this.setState(4027);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 590) {
                    {
                    this.setState(4026);
                    this.sourceResetOptions();
                    }
                }

                }
                break;
            case MySQLParser.SLAVE_SYMBOL:
            case MySQLParser.REPLICA_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4029);
                this.replica();
                this.setState(4031);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 10) {
                    {
                    this.setState(4030);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                }

                this.setState(4034);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                    this.setState(4033);
                    this.channel();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceResetOptions(): SourceResetOptionsContext {
        let localctx = new SourceResetOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 456, MySQLParser.RULE_sourceResetOptions);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4038);
            this.match(MySQLParser.TO_SYMBOL);
            this.setState(4039);
            this.real_ulonglong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicationLoad(): ReplicationLoadContext {
        let localctx = new ReplicationLoadContext(this.getContext(), this.getState());
        this.enterRule(localctx, 458, MySQLParser.RULE_replicationLoad);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4041);
            this.match(MySQLParser.LOAD_SYMBOL);
            this.setState(4045);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.DATA_SYMBOL:
                {
                this.setState(4042);
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.TABLE_SYMBOL:
                {
                this.setState(4043);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(4044);
                this.tableRef();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(4047);
            this.match(MySQLParser.FROM_SYMBOL);
            this.setState(4048);
            this.match(MySQLParser.MASTER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSource(): ChangeReplicationSourceContext {
        let localctx = new ChangeReplicationSourceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 460, MySQLParser.RULE_changeReplicationSource);
        try {
            this.setState(4054);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 431, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4050);
                    this.match(MySQLParser.MASTER_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4051);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(4052);
                    this.match(MySQLParser.REPLICATION_SYMBOL);
                    this.setState(4053);
                    this.match(MySQLParser.SOURCE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeSource(): ChangeSourceContext {
        let localctx = new ChangeSourceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 462, MySQLParser.RULE_changeSource);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4056);
            this.match(MySQLParser.CHANGE_SYMBOL);
            this.setState(4057);
            this.changeReplicationSource();
            this.setState(4058);
            this.match(MySQLParser.TO_SYMBOL);
            this.setState(4059);
            this.sourceDefinitions();
            this.setState(4061);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(4060);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceDefinitions(): SourceDefinitionsContext {
        let localctx = new SourceDefinitionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 464, MySQLParser.RULE_sourceDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4063);
            this.sourceDefinition();
            this.setState(4068);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4064);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4065);
                this.sourceDefinition();
                }
                }
                this.setState(4070);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceDefinition(): SourceDefinitionContext {
        let localctx = new SourceDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 466, MySQLParser.RULE_sourceDefinition);
        try {
            this.setState(4199);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 434, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4071);
                    this.changeReplicationSourceHost();
                    this.setState(4072);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4073);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4075);
                    this.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL);
                    this.setState(4076);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4077);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4078);
                    this.changeReplicationSourceBind();
                    this.setState(4079);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4080);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(4082);
                    this.changeReplicationSourceUser();
                    this.setState(4083);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4084);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(4086);
                    this.changeReplicationSourcePassword();
                    this.setState(4087);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4088);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(4090);
                    this.changeReplicationSourcePort();
                    this.setState(4091);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4092);
                    this.ulong_number();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(4094);
                    this.changeReplicationSourceConnectRetry();
                    this.setState(4095);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4096);
                    this.ulong_number();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(4098);
                    this.changeReplicationSourceRetryCount();
                    this.setState(4099);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4100);
                    this.ulong_number();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(4102);
                    this.changeReplicationSourceDelay();
                    this.setState(4103);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4104);
                    this.ulong_number();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(4106);
                    this.changeReplicationSourceSSL();
                    this.setState(4107);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4108);
                    this.ulong_number();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(4110);
                    this.changeReplicationSourceSSLCA();
                    this.setState(4111);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4112);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(4114);
                    this.changeReplicationSourceSSLCApath();
                    this.setState(4115);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4116);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(4118);
                    this.changeReplicationSourceTLSVersion();
                    this.setState(4119);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4120);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(4122);
                    this.changeReplicationSourceSSLCert();
                    this.setState(4123);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4124);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(4126);
                    this.changeReplicationSourceTLSCiphersuites();
                    this.setState(4127);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4128);
                    this.sourceTlsCiphersuitesDef();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(4130);
                    this.changeReplicationSourceSSLCipher();
                    this.setState(4131);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4132);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(4134);
                    this.changeReplicationSourceSSLKey();
                    this.setState(4135);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4136);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(4138);
                    this.changeReplicationSourceSSLVerifyServerCert();
                    this.setState(4139);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4140);
                    this.ulong_number();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(4142);
                    this.changeReplicationSourceSSLCLR();
                    this.setState(4143);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4144);
                    this.textLiteral();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(4146);
                    this.changeReplicationSourceSSLCLRpath();
                    this.setState(4147);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4148);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(4150);
                    this.changeReplicationSourcePublicKey();
                    this.setState(4151);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4152);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(4154);
                    this.changeReplicationSourceGetSourcePublicKey();
                    this.setState(4155);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4156);
                    this.ulong_number();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(4158);
                    this.changeReplicationSourceHeartbeatPeriod();
                    this.setState(4159);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4160);
                    this.ulong_number();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(4162);
                    this.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL);
                    this.setState(4163);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4164);
                    this.serverIdList();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(4165);
                    this.changeReplicationSourceCompressionAlgorithm();
                    this.setState(4166);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4167);
                    this.textStringLiteral();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(4169);
                    this.changeReplicationSourceZstdCompressionLevel();
                    this.setState(4170);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4171);
                    this.ulong_number();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(4173);
                    this.changeReplicationSourceAutoPosition();
                    this.setState(4174);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4175);
                    this.ulong_number();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(4177);
                    this.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
                    this.setState(4178);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4179);
                    this.privilegeCheckDef();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(4180);
                    this.match(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL);
                    this.setState(4181);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4182);
                    this.ulong_number();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                    this.setState(4183);
                    this.match(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
                    this.setState(4184);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4185);
                    this.tablePrimaryKeyCheckDef();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                    this.setState(4186);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(4187);
                    this.match(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL);
                    this.setState(4188);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4189);
                    this.real_ulong_number();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                    this.setState(4190);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(4191);
                    this.match(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL);
                    this.setState(4192);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4193);
                    this.assignGtidsToAnonymousTransactionsDefinition();
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                    this.setState(4194);
                    if (!(this.serverVersion >= 80027)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80027");
                    }
                    this.setState(4195);
                    this.match(MySQLParser.GTID_ONLY_SYMBOL);
                    this.setState(4196);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4197);
                    this.real_ulong_number();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                    this.setState(4198);
                    this.sourceFileDef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceAutoPosition(): ChangeReplicationSourceAutoPositionContext {
        let localctx = new ChangeReplicationSourceAutoPositionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 468, MySQLParser.RULE_changeReplicationSourceAutoPosition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4201);
            _la = this.input().LA(1);
            if(!(_la === 296 || _la === 807)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceHost(): ChangeReplicationSourceHostContext {
        let localctx = new ChangeReplicationSourceHostContext(this.getContext(), this.getState());
        this.enterRule(localctx, 470, MySQLParser.RULE_changeReplicationSourceHost);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4203);
            _la = this.input().LA(1);
            if(!(_la === 300 || _la === 813)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceBind(): ChangeReplicationSourceBindContext {
        let localctx = new ChangeReplicationSourceBindContext(this.getContext(), this.getState());
        this.enterRule(localctx, 472, MySQLParser.RULE_changeReplicationSourceBind);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4205);
            _la = this.input().LA(1);
            if(!(_la === 297 || _la === 808)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceUser(): ChangeReplicationSourceUserContext {
        let localctx = new ChangeReplicationSourceUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 474, MySQLParser.RULE_changeReplicationSourceUser);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4207);
            _la = this.input().LA(1);
            if(!(_la === 318 || _la === 831)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourcePassword(): ChangeReplicationSourcePasswordContext {
        let localctx = new ChangeReplicationSourcePasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 476, MySQLParser.RULE_changeReplicationSourcePassword);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4209);
            _la = this.input().LA(1);
            if(!(_la === 303 || _la === 816)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourcePort(): ChangeReplicationSourcePortContext {
        let localctx = new ChangeReplicationSourcePortContext(this.getContext(), this.getState());
        this.enterRule(localctx, 478, MySQLParser.RULE_changeReplicationSourcePort);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4211);
            _la = this.input().LA(1);
            if(!(_la === 304 || _la === 817)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceConnectRetry(): ChangeReplicationSourceConnectRetryContext {
        let localctx = new ChangeReplicationSourceConnectRetryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 480, MySQLParser.RULE_changeReplicationSourceConnectRetry);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4213);
            _la = this.input().LA(1);
            if(!(_la === 298 || _la === 810)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceRetryCount(): ChangeReplicationSourceRetryCountContext {
        let localctx = new ChangeReplicationSourceRetryCountContext(this.getContext(), this.getState());
        this.enterRule(localctx, 482, MySQLParser.RULE_changeReplicationSourceRetryCount);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4215);
            _la = this.input().LA(1);
            if(!(_la === 305 || _la === 819)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceDelay(): ChangeReplicationSourceDelayContext {
        let localctx = new ChangeReplicationSourceDelayContext(this.getContext(), this.getState());
        this.enterRule(localctx, 484, MySQLParser.RULE_changeReplicationSourceDelay);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4217);
            _la = this.input().LA(1);
            if(!(_la === 299 || _la === 811)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSL(): ChangeReplicationSourceSSLContext {
        let localctx = new ChangeReplicationSourceSSLContext(this.getContext(), this.getState());
        this.enterRule(localctx, 486, MySQLParser.RULE_changeReplicationSourceSSL);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4219);
            _la = this.input().LA(1);
            if(!(_la === 314 || _la === 820)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCA(): ChangeReplicationSourceSSLCAContext {
        let localctx = new ChangeReplicationSourceSSLCAContext(this.getContext(), this.getState());
        this.enterRule(localctx, 488, MySQLParser.RULE_changeReplicationSourceSSLCA);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4221);
            _la = this.input().LA(1);
            if(!(_la === 308 || _la === 821)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCApath(): ChangeReplicationSourceSSLCApathContext {
        let localctx = new ChangeReplicationSourceSSLCApathContext(this.getContext(), this.getState());
        this.enterRule(localctx, 490, MySQLParser.RULE_changeReplicationSourceSSLCApath);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4223);
            _la = this.input().LA(1);
            if(!(_la === 307 || _la === 822)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCipher(): ChangeReplicationSourceSSLCipherContext {
        let localctx = new ChangeReplicationSourceSSLCipherContext(this.getContext(), this.getState());
        this.enterRule(localctx, 492, MySQLParser.RULE_changeReplicationSourceSSLCipher);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4225);
            _la = this.input().LA(1);
            if(!(_la === 310 || _la === 824)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCLR(): ChangeReplicationSourceSSLCLRContext {
        let localctx = new ChangeReplicationSourceSSLCLRContext(this.getContext(), this.getState());
        this.enterRule(localctx, 494, MySQLParser.RULE_changeReplicationSourceSSLCLR);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4227);
            _la = this.input().LA(1);
            if(!(_la === 311 || _la === 825)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCLRpath(): ChangeReplicationSourceSSLCLRpathContext {
        let localctx = new ChangeReplicationSourceSSLCLRpathContext(this.getContext(), this.getState());
        this.enterRule(localctx, 496, MySQLParser.RULE_changeReplicationSourceSSLCLRpath);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4229);
            _la = this.input().LA(1);
            if(!(_la === 312 || _la === 826)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLKey(): ChangeReplicationSourceSSLKeyContext {
        let localctx = new ChangeReplicationSourceSSLKeyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 498, MySQLParser.RULE_changeReplicationSourceSSLKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4231);
            _la = this.input().LA(1);
            if(!(_la === 313 || _la === 827)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLVerifyServerCert(): ChangeReplicationSourceSSLVerifyServerCertContext {
        let localctx = new ChangeReplicationSourceSSLVerifyServerCertContext(this.getContext(), this.getState());
        this.enterRule(localctx, 500, MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4233);
            _la = this.input().LA(1);
            if(!(_la === 315 || _la === 828)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceTLSVersion(): ChangeReplicationSourceTLSVersionContext {
        let localctx = new ChangeReplicationSourceTLSVersionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 502, MySQLParser.RULE_changeReplicationSourceTLSVersion);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4235);
            _la = this.input().LA(1);
            if(!(_la === 317 || _la === 830)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceTLSCiphersuites(): ChangeReplicationSourceTLSCiphersuitesContext {
        let localctx = new ChangeReplicationSourceTLSCiphersuitesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 504, MySQLParser.RULE_changeReplicationSourceTLSCiphersuites);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4237);
            _la = this.input().LA(1);
            if(!(_la === 738 || _la === 829)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCert(): ChangeReplicationSourceSSLCertContext {
        let localctx = new ChangeReplicationSourceSSLCertContext(this.getContext(), this.getState());
        this.enterRule(localctx, 506, MySQLParser.RULE_changeReplicationSourceSSLCert);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4239);
            _la = this.input().LA(1);
            if(!(_la === 309 || _la === 823)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourcePublicKey(): ChangeReplicationSourcePublicKeyContext {
        let localctx = new ChangeReplicationSourcePublicKeyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 508, MySQLParser.RULE_changeReplicationSourcePublicKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4241);
            _la = this.input().LA(1);
            if(!(_la === 712 || _la === 818)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceGetSourcePublicKey(): ChangeReplicationSourceGetSourcePublicKeyContext {
        let localctx = new ChangeReplicationSourceGetSourcePublicKeyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 510, MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4243);
            _la = this.input().LA(1);
            if(!(_la === 713 || _la === 806)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceHeartbeatPeriod(): ChangeReplicationSourceHeartbeatPeriodContext {
        let localctx = new ChangeReplicationSourceHeartbeatPeriodContext(this.getContext(), this.getState());
        this.enterRule(localctx, 512, MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4245);
            _la = this.input().LA(1);
            if(!(_la === 319 || _la === 812)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceCompressionAlgorithm(): ChangeReplicationSourceCompressionAlgorithmContext {
        let localctx = new ChangeReplicationSourceCompressionAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 514, MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4247);
            _la = this.input().LA(1);
            if(!(_la === 735 || _la === 809)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceZstdCompressionLevel(): ChangeReplicationSourceZstdCompressionLevelContext {
        let localctx = new ChangeReplicationSourceZstdCompressionLevelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 516, MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4249);
            _la = this.input().LA(1);
            if(!(_la === 736 || _la === 832)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public privilegeCheckDef(): PrivilegeCheckDefContext {
        let localctx = new PrivilegeCheckDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 518, MySQLParser.RULE_privilegeCheckDef);
        try {
            this.setState(4253);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 435, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4251);
                    this.userIdentifierOrText();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4252);
                    this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablePrimaryKeyCheckDef(): TablePrimaryKeyCheckDefContext {
        let localctx = new TablePrimaryKeyCheckDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 520, MySQLParser.RULE_tablePrimaryKeyCheckDef);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4255);
            _la = this.input().LA(1);
            if(!(_la === 383 || _la === 743 || _la === 744)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public assignGtidsToAnonymousTransactionsDefinition(): AssignGtidsToAnonymousTransactionsDefinitionContext {
        let localctx = new AssignGtidsToAnonymousTransactionsDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 522, MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition);
        try {
            this.setState(4260);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 436, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4257);
                    this.match(MySQLParser.OFF_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4258);
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4259);
                    this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceTlsCiphersuitesDef(): SourceTlsCiphersuitesDefContext {
        let localctx = new SourceTlsCiphersuitesDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 524, MySQLParser.RULE_sourceTlsCiphersuitesDef);
        try {
            this.setState(4264);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 437, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4262);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4263);
                    this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceFileDef(): SourceFileDefContext {
        let localctx = new SourceFileDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 526, MySQLParser.RULE_sourceFileDef);
        try {
            this.setState(4280);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.SOURCE_LOG_FILE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4266);
                this.sourceLogFile();
                this.setState(4267);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4268);
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.SOURCE_LOG_POS_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4270);
                this.sourceLogPos();
                this.setState(4271);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4272);
                this.ulonglong_number();
                }
                break;
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4274);
                this.match(MySQLParser.RELAY_LOG_FILE_SYMBOL);
                this.setState(4275);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4276);
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(4277);
                this.match(MySQLParser.RELAY_LOG_POS_SYMBOL);
                this.setState(4278);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4279);
                this.ulong_number();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceLogFile(): SourceLogFileContext {
        let localctx = new SourceLogFileContext(this.getContext(), this.getState());
        this.enterRule(localctx, 528, MySQLParser.RULE_sourceLogFile);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4282);
            _la = this.input().LA(1);
            if(!(_la === 301 || _la === 814)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceLogPos(): SourceLogPosContext {
        let localctx = new SourceLogPosContext(this.getContext(), this.getState());
        this.enterRule(localctx, 530, MySQLParser.RULE_sourceLogPos);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4284);
            _la = this.input().LA(1);
            if(!(_la === 302 || _la === 815)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverIdList(): ServerIdListContext {
        let localctx = new ServerIdListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 532, MySQLParser.RULE_serverIdList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4286);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(4295);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || ((((_la - 788)) & ~0x1F) === 0 && ((1 << (_la - 788)) & 13) !== 0)) {
                {
                this.setState(4287);
                this.ulong_number();
                this.setState(4292);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                    {
                    this.setState(4288);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(4289);
                    this.ulong_number();
                    }
                    }
                    this.setState(4294);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            this.setState(4297);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplication(): ChangeReplicationContext {
        let localctx = new ChangeReplicationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 534, MySQLParser.RULE_changeReplication);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4299);
            this.match(MySQLParser.CHANGE_SYMBOL);
            this.setState(4300);
            this.match(MySQLParser.REPLICATION_SYMBOL);
            this.setState(4301);
            this.match(MySQLParser.FILTER_SYMBOL);
            this.setState(4302);
            this.filterDefinition();
            this.setState(4307);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4303);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4304);
                this.filterDefinition();
                }
                }
                this.setState(4309);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(4311);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(4310);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterDefinition(): FilterDefinitionContext {
        let localctx = new FilterDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 536, MySQLParser.RULE_filterDefinition);
        let _la: number;
        try {
            this.setState(4362);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4313);
                this.match(MySQLParser.REPLICATE_DO_DB_SYMBOL);
                this.setState(4314);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4315);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4317);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 443, this.getContext())) {
                    case 1:
                        {
                        this.setState(4316);
                        this.filterDbList();
                        }
                        break;
                }
                this.setState(4319);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4320);
                this.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
                this.setState(4321);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4322);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4324);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 444, this.getContext())) {
                    case 1:
                        {
                        this.setState(4323);
                        this.filterDbList();
                        }
                        break;
                }
                this.setState(4326);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4327);
                this.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL);
                this.setState(4328);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4329);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4331);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 445, this.getContext())) {
                    case 1:
                        {
                        this.setState(4330);
                        this.filterTableList();
                        }
                        break;
                }
                this.setState(4333);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(4334);
                this.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
                this.setState(4335);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4336);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4338);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 446, this.getContext())) {
                    case 1:
                        {
                        this.setState(4337);
                        this.filterTableList();
                        }
                        break;
                }
                this.setState(4340);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(4341);
                this.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
                this.setState(4342);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4343);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4345);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 447, this.getContext())) {
                    case 1:
                        {
                        this.setState(4344);
                        this.filterStringList();
                        }
                        break;
                }
                this.setState(4347);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(4348);
                this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
                this.setState(4349);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4350);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4352);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 448, this.getContext())) {
                    case 1:
                        {
                        this.setState(4351);
                        this.filterStringList();
                        }
                        break;
                }
                this.setState(4354);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(4355);
                this.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
                this.setState(4356);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4357);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4359);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                    this.setState(4358);
                    this.filterDbPairList();
                    }
                }

                this.setState(4361);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterDbList(): FilterDbListContext {
        let localctx = new FilterDbListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 538, MySQLParser.RULE_filterDbList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4364);
            this.schemaRef();
            this.setState(4369);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4365);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4366);
                this.schemaRef();
                }
                }
                this.setState(4371);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterTableList(): FilterTableListContext {
        let localctx = new FilterTableListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 540, MySQLParser.RULE_filterTableList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4372);
            this.filterTableRef();
            this.setState(4377);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4373);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4374);
                this.filterTableRef();
                }
                }
                this.setState(4379);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterStringList(): FilterStringListContext {
        let localctx = new FilterStringListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 542, MySQLParser.RULE_filterStringList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4380);
            this.filterWildDbTableString();
            this.setState(4385);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4381);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4382);
                this.filterWildDbTableString();
                }
                }
                this.setState(4387);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterWildDbTableString(): FilterWildDbTableStringContext {
        let localctx = new FilterWildDbTableStringContext(this.getContext(), this.getState());
        this.enterRule(localctx, 544, MySQLParser.RULE_filterWildDbTableString);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4388);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterDbPairList(): FilterDbPairListContext {
        let localctx = new FilterDbPairListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 546, MySQLParser.RULE_filterDbPairList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4390);
            this.schemaIdentifierPair();
            this.setState(4395);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4391);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4392);
                this.schemaIdentifierPair();
                }
                }
                this.setState(4397);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public startReplicaStatement(): StartReplicaStatementContext {
        let localctx = new StartReplicaStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 548, MySQLParser.RULE_startReplicaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4398);
            this.match(MySQLParser.START_SYMBOL);
            this.setState(4399);
            this.replica();
            this.setState(4401);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 449 || _la === 538) {
                {
                this.setState(4400);
                this.replicaThreadOptions();
                }
            }

            this.setState(4405);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 613) {
                {
                this.setState(4403);
                this.match(MySQLParser.UNTIL_SYMBOL);
                this.setState(4404);
                this.replicaUntil();
                }
            }

            this.setState(4408);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 618) {
                {
                this.setState(4407);
                this.userOption();
                }
            }

            this.setState(4411);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 406) {
                {
                this.setState(4410);
                this.passwordOption();
                }
            }

            this.setState(4414);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 129) {
                {
                this.setState(4413);
                this.defaultAuthOption();
                }
            }

            this.setState(4417);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 409) {
                {
                this.setState(4416);
                this.pluginDirOption();
                }
            }

            this.setState(4420);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(4419);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public stopReplicaStatement(): StopReplicaStatementContext {
        let localctx = new StopReplicaStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 550, MySQLParser.RULE_stopReplicaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4422);
            this.match(MySQLParser.STOP_SYMBOL);
            this.setState(4423);
            this.replica();
            this.setState(4425);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 449 || _la === 538) {
                {
                this.setState(4424);
                this.replicaThreadOptions();
                }
            }

            this.setState(4428);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(4427);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicaUntil(): ReplicaUntilContext {
        let localctx = new ReplicaUntilContext(this.getContext(), this.getState());
        this.enterRule(localctx, 552, MySQLParser.RULE_replicaUntil);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4435);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
            case MySQLParser.SOURCE_LOG_FILE_SYMBOL:
            case MySQLParser.SOURCE_LOG_POS_SYMBOL:
                {
                this.setState(4430);
                this.sourceFileDef();
                }
                break;
            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
                {
                this.setState(4431);
                _la = this.input().LA(1);
                if(!(_la === 528 || _la === 530)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(4432);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4433);
                this.textString();
                }
                break;
            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
                {
                this.setState(4434);
                this.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(4441);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4437);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4438);
                this.sourceFileDef();
                }
                }
                this.setState(4443);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userOption(): UserOptionContext {
        let localctx = new UserOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 554, MySQLParser.RULE_userOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4444);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4445);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4446);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public passwordOption(): PasswordOptionContext {
        let localctx = new PasswordOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 556, MySQLParser.RULE_passwordOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4448);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.setState(4449);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4450);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultAuthOption(): DefaultAuthOptionContext {
        let localctx = new DefaultAuthOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 558, MySQLParser.RULE_defaultAuthOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4452);
            this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
            this.setState(4453);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4454);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public pluginDirOption(): PluginDirOptionContext {
        let localctx = new PluginDirOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 560, MySQLParser.RULE_pluginDirOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4456);
            this.match(MySQLParser.PLUGIN_DIR_SYMBOL);
            this.setState(4457);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4458);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext {
        let localctx = new ReplicaThreadOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 562, MySQLParser.RULE_replicaThreadOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4460);
            this.replicaThreadOption();
            this.setState(4465);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4461);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4462);
                this.replicaThreadOption();
                }
                }
                this.setState(4467);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicaThreadOption(): ReplicaThreadOptionContext {
        let localctx = new ReplicaThreadOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 564, MySQLParser.RULE_replicaThreadOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4468);
            _la = this.input().LA(1);
            if(!(_la === 449 || _la === 538)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplication(): GroupReplicationContext {
        let localctx = new GroupReplicationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 566, MySQLParser.RULE_groupReplication);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4475);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.START_SYMBOL:
                {
                this.setState(4470);
                this.match(MySQLParser.START_SYMBOL);
                this.setState(4472);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 129 || _la === 406 || _la === 618) {
                    {
                    this.setState(4471);
                    this.groupReplicationStartOptions();
                    }
                }

                }
                break;
            case MySQLParser.STOP_SYMBOL:
                {
                this.setState(4474);
                this.match(MySQLParser.STOP_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(4477);
            this.match(MySQLParser.GROUP_REPLICATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationStartOptions(): GroupReplicationStartOptionsContext {
        let localctx = new GroupReplicationStartOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 568, MySQLParser.RULE_groupReplicationStartOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4479);
            this.groupReplicationStartOption();
            this.setState(4484);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4480);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4481);
                this.groupReplicationStartOption();
                }
                }
                this.setState(4486);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationStartOption(): GroupReplicationStartOptionContext {
        let localctx = new GroupReplicationStartOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 570, MySQLParser.RULE_groupReplicationStartOption);
        try {
            this.setState(4490);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.USER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4487);
                this.groupReplicationUser();
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4488);
                this.groupReplicationPassword();
                }
                break;
            case MySQLParser.DEFAULT_AUTH_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4489);
                this.groupReplicationPluginAuth();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationUser(): GroupReplicationUserContext {
        let localctx = new GroupReplicationUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 572, MySQLParser.RULE_groupReplicationUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4492);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4493);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4494);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationPassword(): GroupReplicationPasswordContext {
        let localctx = new GroupReplicationPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 574, MySQLParser.RULE_groupReplicationPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4496);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.setState(4497);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4498);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationPluginAuth(): GroupReplicationPluginAuthContext {
        let localctx = new GroupReplicationPluginAuthContext(this.getContext(), this.getState());
        this.enterRule(localctx, 576, MySQLParser.RULE_groupReplicationPluginAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4500);
            this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
            this.setState(4501);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4502);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replica(): ReplicaContext {
        let localctx = new ReplicaContext(this.getContext(), this.getState());
        this.enterRule(localctx, 578, MySQLParser.RULE_replica);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4504);
            _la = this.input().LA(1);
            if(!(_la === 514 || _la === 803)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public preparedStatement(): PreparedStatementContext {
        let localctx = new PreparedStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 580, MySQLParser.RULE_preparedStatement);
        let _la: number;
        try {
            this.setState(4517);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.PREPARE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4506);
                localctx._type_ = this.match(MySQLParser.PREPARE_SYMBOL);
                this.setState(4507);
                this.identifier();
                this.setState(4508);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(4511);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 471, this.getContext())) {
                    case 1:
                        {
                        this.setState(4509);
                        this.textLiteral();
                        }
                        break;
                    case 2:
                        {
                        this.setState(4510);
                        this.userVariable();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.EXECUTE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4513);
                this.executeStatement();
                }
                break;
            case MySQLParser.DEALLOCATE_SYMBOL:
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4514);
                localctx._type_ = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 123 || _la === 148)) {
                    localctx._type_ = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(4515);
                this.match(MySQLParser.PREPARE_SYMBOL);
                this.setState(4516);
                this.identifier();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public executeStatement(): ExecuteStatementContext {
        let localctx = new ExecuteStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 582, MySQLParser.RULE_executeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4519);
            this.match(MySQLParser.EXECUTE_SYMBOL);
            this.setState(4520);
            this.identifier();
            this.setState(4523);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 621) {
                {
                this.setState(4521);
                this.match(MySQLParser.USING_SYMBOL);
                this.setState(4522);
                this.executeVarList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public executeVarList(): ExecuteVarListContext {
        let localctx = new ExecuteVarListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 584, MySQLParser.RULE_executeVarList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4525);
            this.userVariable();
            this.setState(4530);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4526);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4527);
                this.userVariable();
                }
                }
                this.setState(4532);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cloneStatement(): CloneStatementContext {
        let localctx = new CloneStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 586, MySQLParser.RULE_cloneStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4533);
            this.match(MySQLParser.CLONE_SYMBOL);
            this.setState(4558);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 478, this.getContext())) {
                case 1:
                    {
                    this.setState(4534);
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    this.setState(4535);
                    this.match(MySQLParser.DATA_SYMBOL);
                    this.setState(4536);
                    this.match(MySQLParser.DIRECTORY_SYMBOL);
                    this.setState(4538);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 475, this.getContext())) {
                        case 1:
                            {
                            this.setState(4537);
                            this.equal();
                            }
                            break;
                    }
                    this.setState(4540);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.setState(4541);
                    this.match(MySQLParser.REMOTE_SYMBOL);
                    this.setState(4544);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 200) {
                        {
                        this.setState(4542);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(4543);
                        this.match(MySQLParser.REPLICATION_SYMBOL);
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.setState(4546);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(4547);
                    this.match(MySQLParser.INSTANCE_SYMBOL);
                    this.setState(4548);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(4549);
                    this.user();
                    this.setState(4550);
                    this.match(MySQLParser.COLON_SYMBOL);
                    this.setState(4551);
                    this.ulong_number();
                    this.setState(4552);
                    this.match(MySQLParser.IDENTIFIED_SYMBOL);
                    this.setState(4553);
                    this.match(MySQLParser.BY_SYMBOL);
                    this.setState(4554);
                    this.textStringLiteral();
                    this.setState(4556);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 112 || _la === 467) {
                        {
                        this.setState(4555);
                        this.dataDirSSL();
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dataDirSSL(): DataDirSSLContext {
        let localctx = new DataDirSSLContext(this.getContext(), this.getState());
        this.enterRule(localctx, 588, MySQLParser.RULE_dataDirSSL);
        let _la: number;
        try {
            this.setState(4570);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.REQUIRE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4560);
                this.ssl();
                }
                break;
            case MySQLParser.DATA_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4561);
                this.match(MySQLParser.DATA_SYMBOL);
                this.setState(4562);
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.setState(4564);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 479, this.getContext())) {
                    case 1:
                        {
                        this.setState(4563);
                        this.equal();
                        }
                        break;
                }
                this.setState(4566);
                this.textStringLiteral();
                this.setState(4568);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 467) {
                    {
                    this.setState(4567);
                    this.ssl();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ssl(): SslContext {
        let localctx = new SslContext(this.getContext(), this.getState());
        this.enterRule(localctx, 590, MySQLParser.RULE_ssl);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4572);
            this.match(MySQLParser.REQUIRE_SYMBOL);
            this.setState(4574);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 373) {
                {
                this.setState(4573);
                this.match(MySQLParser.NO_SYMBOL);
                }
            }

            this.setState(4576);
            this.match(MySQLParser.SSL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public accountManagementStatement(): AccountManagementStatementContext {
        let localctx = new AccountManagementStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 592, MySQLParser.RULE_accountManagementStatement);
        try {
            this.setState(4585);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ALTER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4578);
                this.alterUserStatement();
                }
                break;
            case MySQLParser.CREATE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4579);
                this.createUserStatement();
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4580);
                this.dropUserStatement();
                }
                break;
            case MySQLParser.GRANT_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(4581);
                this.grantStatement();
                }
                break;
            case MySQLParser.RENAME_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(4582);
                this.renameUserStatement();
                }
                break;
            case MySQLParser.REVOKE_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(4583);
                this.revokeStatement();
                }
                break;
            case MySQLParser.SET_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(4584);
                this.setRoleStatement();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterUserStatement(): AlterUserStatementContext {
        let localctx = new AlterUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 594, MySQLParser.RULE_alterUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4587);
            this.match(MySQLParser.ALTER_SYMBOL);
            this.setState(4588);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4590);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 484, this.getContext())) {
                case 1:
                    {
                    this.setState(4589);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(4632);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 494, this.getContext())) {
                case 1:
                    {
                    this.setState(4596);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 485, this.getContext())) {
                        case 1:
                            {
                            this.setState(4592);
                            if (!(this.serverVersion < 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80014");
                            }
                            this.setState(4593);
                            this.createUserList();
                            }
                            break;
                        case 2:
                            {
                            this.setState(4594);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(4595);
                            this.alterUserList();
                            }
                            break;
                    }
                    this.setState(4598);
                    this.createUserTail();
                    }
                    break;
                case 2:
                    {
                    this.setState(4600);
                    this.userFunction();
                    this.setState(4617);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.IDENTIFIED_SYMBOL:
                        {
                        this.setState(4603);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 486, this.getContext())) {
                            case 1:
                                {
                                this.setState(4601);
                                this.identifiedByRandomPassword();
                                }
                                break;
                            case 2:
                                {
                                this.setState(4602);
                                this.identifiedByPassword();
                                }
                                break;
                        }
                        this.setState(4606);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 458) {
                            {
                            this.setState(4605);
                            this.replacePassword();
                            }
                        }

                        this.setState(4609);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 727) {
                            {
                            this.setState(4608);
                            this.retainCurrentPassword();
                            }
                        }

                        }
                        break;
                    case MySQLParser.DISCARD_SYMBOL:
                        {
                        this.setState(4611);
                        this.match(MySQLParser.DISCARD_SYMBOL);
                        this.setState(4612);
                        this.match(MySQLParser.OLD_SYMBOL);
                        this.setState(4613);
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        }
                        break;
                    case MySQLParser.EOF:
                    case MySQLParser.INT_NUMBER:
                    case MySQLParser.LONG_NUMBER:
                    case MySQLParser.ULONGLONG_NUMBER:
                    case MySQLParser.SEMICOLON_SYMBOL:
                    case MySQLParser.DECIMAL_NUMBER:
                    case MySQLParser.FLOAT_NUMBER:
                        {
                        this.setState(4615);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 790 || _la === 791) {
                            {
                            this.setState(4614);
                            this.userRegistration();
                            }
                        }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
                case 3:
                    {
                    this.setState(4619);
                    this.user();
                    this.setState(4630);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.DEFAULT_SYMBOL:
                        {
                        this.setState(4620);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.setState(4621);
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.setState(4625);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 491, this.getContext())) {
                            case 1:
                                {
                                this.setState(4622);
                                this.match(MySQLParser.ALL_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                this.setState(4623);
                                this.match(MySQLParser.NONE_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                this.setState(4624);
                                this.roleList();
                                }
                                break;
                        }
                        }
                        break;
                    case MySQLParser.EOF:
                    case MySQLParser.INT_NUMBER:
                    case MySQLParser.LONG_NUMBER:
                    case MySQLParser.ULONGLONG_NUMBER:
                    case MySQLParser.SEMICOLON_SYMBOL:
                    case MySQLParser.DECIMAL_NUMBER:
                    case MySQLParser.FLOAT_NUMBER:
                        {
                        this.setState(4628);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 790 || _la === 791) {
                            {
                            this.setState(4627);
                            this.userRegistration();
                            }
                        }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterUserList(): AlterUserListContext {
        let localctx = new AlterUserListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 596, MySQLParser.RULE_alterUserList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4634);
            this.alterUser();
            this.setState(4639);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 495, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(4635);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(4636);
                    this.alterUser();
                    }
                    }
                }
                this.setState(4641);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 495, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterUser(): AlterUserContext {
        let localctx = new AlterUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 598, MySQLParser.RULE_alterUser);
        try {
            this.setState(4717);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 512, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4642);
                    if (!(this.serverVersion < 80025)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80025");
                    }
                    this.setState(4643);
                    this.oldAlterUser();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4644);
                    if (!(this.serverVersion >= 80025)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80025");
                    }
                    {
                    this.setState(4645);
                    this.user();
                    this.setState(4715);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 511, this.getContext())) {
                        case 1:
                            {
                            this.setState(4646);
                            this.identifiedByPassword();
                            this.setState(4655);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 498, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4647);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4648);
                                    this.textStringLiteral();
                                    this.setState(4650);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 496, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4649);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(4653);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 497, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4652);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(4657);
                            this.identifiedByRandomPassword();
                            this.setState(4666);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 501, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4659);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 499, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4658);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(4661);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4662);
                                    this.textStringLiteral();
                                    this.setState(4664);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 500, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4663);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case 3:
                            {
                            this.setState(4668);
                            this.identifiedWithPlugin();
                            }
                            break;
                        case 4:
                            {
                            this.setState(4669);
                            this.identifiedWithPluginAsAuth();
                            this.setState(4671);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 502, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4670);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 5:
                            {
                            this.setState(4673);
                            this.identifiedWithPluginByPassword();
                            this.setState(4682);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 505, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4674);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4675);
                                    this.textStringLiteral();
                                    this.setState(4677);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 503, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4676);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(4680);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 504, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4679);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case 6:
                            {
                            this.setState(4684);
                            this.identifiedWithPluginByRandomPassword();
                            this.setState(4686);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 506, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4685);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 7:
                            {
                            this.setState(4689);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 507, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4688);
                                    this.discardOldPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 8:
                            {
                            this.setState(4691);
                            this.match(MySQLParser.ADD_SYMBOL);
                            this.setState(4692);
                            this.factor();
                            this.setState(4693);
                            this.identification();
                            this.setState(4698);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 508, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4694);
                                    this.match(MySQLParser.ADD_SYMBOL);
                                    this.setState(4695);
                                    this.factor();
                                    this.setState(4696);
                                    this.identification();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 9:
                            {
                            this.setState(4700);
                            this.match(MySQLParser.MODIFY_SYMBOL);
                            this.setState(4701);
                            this.factor();
                            this.setState(4702);
                            this.identification();
                            this.setState(4707);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 509, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4703);
                                    this.match(MySQLParser.MODIFY_SYMBOL);
                                    this.setState(4704);
                                    this.factor();
                                    this.setState(4705);
                                    this.identification();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 10:
                            {
                            this.setState(4709);
                            this.match(MySQLParser.DROP_SYMBOL);
                            this.setState(4710);
                            this.factor();
                            this.setState(4713);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 510, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4711);
                                    this.match(MySQLParser.DROP_SYMBOL);
                                    this.setState(4712);
                                    this.factor();
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public oldAlterUser(): OldAlterUserContext {
        let localctx = new OldAlterUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 600, MySQLParser.RULE_oldAlterUser);
        try {
            this.setState(4776);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 524, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4719);
                    this.user();
                    this.setState(4720);
                    this.match(MySQLParser.IDENTIFIED_SYMBOL);
                    this.setState(4721);
                    this.match(MySQLParser.BY_SYMBOL);
                    this.setState(4741);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 517, this.getContext())) {
                        case 1:
                            {
                            this.setState(4722);
                            this.textString();
                            this.setState(4723);
                            this.match(MySQLParser.REPLACE_SYMBOL);
                            this.setState(4724);
                            this.textString();
                            this.setState(4726);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 513, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4725);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(4728);
                            this.textString();
                            this.setState(4730);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 514, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4729);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 3:
                            {
                            this.setState(4732);
                            this.match(MySQLParser.RANDOM_SYMBOL);
                            this.setState(4733);
                            this.match(MySQLParser.PASSWORD_SYMBOL);
                            this.setState(4736);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 515, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4734);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4735);
                                    this.textString();
                                    }
                                    break;
                            }
                            this.setState(4739);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 516, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4738);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4743);
                    this.user();
                    this.setState(4744);
                    this.match(MySQLParser.IDENTIFIED_SYMBOL);
                    this.setState(4745);
                    this.match(MySQLParser.WITH_SYMBOL);
                    {
                    this.setState(4746);
                    this.textOrIdentifier();
                    this.setState(4770);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 522, this.getContext())) {
                        case 1:
                            {
                            this.setState(4747);
                            this.match(MySQLParser.BY_SYMBOL);
                            this.setState(4748);
                            this.textString();
                            this.setState(4749);
                            this.match(MySQLParser.REPLACE_SYMBOL);
                            this.setState(4750);
                            this.textString();
                            this.setState(4752);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 518, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4751);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(4754);
                            this.match(MySQLParser.AS_SYMBOL);
                            this.setState(4755);
                            this.textStringHash();
                            this.setState(4757);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 519, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4756);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 3:
                            {
                            this.setState(4759);
                            this.match(MySQLParser.BY_SYMBOL);
                            this.setState(4760);
                            this.textString();
                            this.setState(4762);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 520, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4761);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 4:
                            {
                            this.setState(4764);
                            this.match(MySQLParser.BY_SYMBOL);
                            this.setState(4765);
                            this.match(MySQLParser.RANDOM_SYMBOL);
                            this.setState(4766);
                            this.match(MySQLParser.PASSWORD_SYMBOL);
                            this.setState(4768);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 521, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4767);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4772);
                    this.user();
                    this.setState(4774);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 523, this.getContext())) {
                        case 1:
                            {
                            this.setState(4773);
                            this.discardOldPassword();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userFunction(): UserFunctionContext {
        let localctx = new UserFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 602, MySQLParser.RULE_userFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4778);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4779);
            this.parentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUserStatement(): CreateUserStatementContext {
        let localctx = new CreateUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 604, MySQLParser.RULE_createUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4781);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(4782);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4784);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 525, this.getContext())) {
                case 1:
                    {
                    this.setState(4783);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(4786);
            this.createUserList();
            this.setState(4788);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 526, this.getContext())) {
                case 1:
                    {
                    this.setState(4787);
                    this.defaultRoleClause();
                    }
                    break;
            }
            this.setState(4790);
            this.createUserTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUserTail(): CreateUserTailContext {
        let localctx = new CreateUserTailContext(this.getContext(), this.getState());
        this.enterRule(localctx, 606, MySQLParser.RULE_createUserTail);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4793);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 527, this.getContext())) {
                case 1:
                    {
                    this.setState(4792);
                    this.requireClause();
                    }
                    break;
            }
            this.setState(4796);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 528, this.getContext())) {
                case 1:
                    {
                    this.setState(4795);
                    this.connectOptions();
                    }
                    break;
            }
            this.setState(4801);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 529, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(4798);
                    this.accountLockPasswordExpireOptions();
                    }
                    }
                }
                this.setState(4803);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 529, this.getContext());
            }
            this.setState(4806);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 530, this.getContext())) {
                case 1:
                    {
                    this.setState(4804);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(4805);
                    this.userAttributes();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userAttributes(): UserAttributesContext {
        let localctx = new UserAttributesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 608, MySQLParser.RULE_userAttributes);
        try {
            this.setState(4812);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ATTRIBUTE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4808);
                this.match(MySQLParser.ATTRIBUTE_SYMBOL);
                this.setState(4809);
                this.textStringLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4810);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(4811);
                this.textStringLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultRoleClause(): DefaultRoleClauseContext {
        let localctx = new DefaultRoleClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 610, MySQLParser.RULE_defaultRoleClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4814);
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.setState(4815);
            this.match(MySQLParser.ROLE_SYMBOL);
            this.setState(4816);
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public requireClause(): RequireClauseContext {
        let localctx = new RequireClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 612, MySQLParser.RULE_requireClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4818);
            this.match(MySQLParser.REQUIRE_SYMBOL);
            this.setState(4821);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CIPHER_SYMBOL:
            case MySQLParser.ISSUER_SYMBOL:
            case MySQLParser.SUBJECT_SYMBOL:
                {
                this.setState(4819);
                this.requireList();
                }
                break;
            case MySQLParser.NONE_SYMBOL:
            case MySQLParser.SSL_SYMBOL:
            case MySQLParser.X509_SYMBOL:
                {
                this.setState(4820);
                localctx._option = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 369 || _la === 539 || _la === 650)) {
                    localctx._option = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public connectOptions(): ConnectOptionsContext {
        let localctx = new ConnectOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 614, MySQLParser.RULE_connectOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4823);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(4832);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            this.setState(4832);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                                {
                                this.setState(4824);
                                this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                                this.setState(4825);
                                this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                                {
                                this.setState(4826);
                                this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                                this.setState(4827);
                                this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                                {
                                this.setState(4828);
                                this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                                this.setState(4829);
                                this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                                {
                                this.setState(4830);
                                this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                                this.setState(4831);
                                this.ulong_number();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(4834);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 534, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public accountLockPasswordExpireOptions(): AccountLockPasswordExpireOptionsContext {
        let localctx = new AccountLockPasswordExpireOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 616, MySQLParser.RULE_accountLockPasswordExpireOptions);
        let _la: number;
        try {
            this.setState(4876);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ACCOUNT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4836);
                this.match(MySQLParser.ACCOUNT_SYMBOL);
                this.setState(4837);
                _la = this.input().LA(1);
                if(!(_la === 287 || _la === 611)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4838);
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.setState(4867);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 539, this.getContext())) {
                    case 1:
                        {
                        this.setState(4839);
                        this.match(MySQLParser.EXPIRE_SYMBOL);
                        this.setState(4846);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 535, this.getContext())) {
                            case 1:
                                {
                                this.setState(4840);
                                this.match(MySQLParser.INTERVAL_SYMBOL);
                                this.setState(4841);
                                this.real_ulong_number();
                                this.setState(4842);
                                this.match(MySQLParser.DAY_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                this.setState(4844);
                                this.match(MySQLParser.NEVER_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                this.setState(4845);
                                this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                        }
                        }
                        break;
                    case 2:
                        {
                        this.setState(4848);
                        this.match(MySQLParser.HISTORY_SYMBOL);
                        this.setState(4851);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                        case MySQLParser.INT_NUMBER:
                        case MySQLParser.LONG_NUMBER:
                        case MySQLParser.ULONGLONG_NUMBER:
                        case MySQLParser.HEX_NUMBER:
                            {
                            this.setState(4849);
                            this.real_ulong_number();
                            }
                            break;
                        case MySQLParser.DEFAULT_SYMBOL:
                            {
                            this.setState(4850);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        }
                        break;
                    case 3:
                        {
                        this.setState(4853);
                        this.match(MySQLParser.REUSE_SYMBOL);
                        this.setState(4854);
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.setState(4859);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                        case MySQLParser.INT_NUMBER:
                        case MySQLParser.LONG_NUMBER:
                        case MySQLParser.ULONGLONG_NUMBER:
                        case MySQLParser.HEX_NUMBER:
                            {
                            this.setState(4855);
                            this.real_ulong_number();
                            this.setState(4856);
                            this.match(MySQLParser.DAY_SYMBOL);
                            }
                            break;
                        case MySQLParser.DEFAULT_SYMBOL:
                            {
                            this.setState(4858);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        }
                        break;
                    case 4:
                        {
                        this.setState(4861);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(4862);
                        this.match(MySQLParser.REQUIRE_SYMBOL);
                        this.setState(4863);
                        this.match(MySQLParser.CURRENT_SYMBOL);
                        this.setState(4865);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 538, this.getContext())) {
                            case 1:
                                {
                                this.setState(4864);
                                _la = this.input().LA(1);
                                if(!(_la === 128 || _la === 719)) {
                                this.getErrorHandler().recoverInline(this);
                                }
                                else {
                                    this.getErrorHandler().reportMatch(this);
                                    this.consume();
                                }
                                }
                                break;
                        }
                        }
                        break;
                }
                }
                break;
            case MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4869);
                this.match(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL);
                this.setState(4870);
                this.real_ulong_number();
                }
                break;
            case MySQLParser.PASSWORD_LOCK_TIME_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(4871);
                this.match(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL);
                this.setState(4874);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.HEX_NUMBER:
                    {
                    this.setState(4872);
                    this.real_ulong_number();
                    }
                    break;
                case MySQLParser.UNBOUNDED_SYMBOL:
                    {
                    this.setState(4873);
                    this.match(MySQLParser.UNBOUNDED_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userAttribute(): UserAttributeContext {
        let localctx = new UserAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 618, MySQLParser.RULE_userAttribute);
        try {
            this.setState(4883);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.EOF:
                this.enterOuterAlt(localctx, 1);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            case MySQLParser.ATTRIBUTE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4879);
                this.match(MySQLParser.ATTRIBUTE_SYMBOL);
                this.setState(4880);
                this.textStringLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4881);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(4882);
                this.textStringLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropUserStatement(): DropUserStatementContext {
        let localctx = new DropUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 620, MySQLParser.RULE_dropUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4885);
            this.match(MySQLParser.DROP_SYMBOL);
            this.setState(4886);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4888);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 543, this.getContext())) {
                case 1:
                    {
                    this.setState(4887);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(4890);
            this.userList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantStatement(): GrantStatementContext {
        let localctx = new GrantStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 622, MySQLParser.RULE_grantStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4892);
            this.match(MySQLParser.GRANT_SYMBOL);
            this.setState(4934);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 552, this.getContext())) {
                case 1:
                    {
                    this.setState(4893);
                    this.roleOrPrivilegesList();
                    this.setState(4894);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(4895);
                    this.userList();
                    this.setState(4899);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 645) {
                        {
                        this.setState(4896);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(4897);
                        this.match(MySQLParser.ADMIN_SYMBOL);
                        this.setState(4898);
                        this.match(MySQLParser.OPTION_SYMBOL);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.setState(4906);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 546, this.getContext())) {
                        case 1:
                            {
                            this.setState(4901);
                            this.roleOrPrivilegesList();
                            }
                            break;
                        case 2:
                            {
                            this.setState(4902);
                            this.match(MySQLParser.ALL_SYMBOL);
                            this.setState(4904);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 421) {
                                {
                                this.setState(4903);
                                this.match(MySQLParser.PRIVILEGES_SYMBOL);
                                }
                            }

                            }
                            break;
                    }
                    this.setState(4908);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(4910);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 547, this.getContext())) {
                        case 1:
                            {
                            this.setState(4909);
                            this.aclType();
                            }
                            break;
                    }
                    this.setState(4912);
                    this.grantIdentifier();
                    this.setState(4913);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(4914);
                    this.grantTargetList();
                    this.setState(4916);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 548, this.getContext())) {
                        case 1:
                            {
                            this.setState(4915);
                            this.versionedRequireClause();
                            }
                            break;
                    }
                    this.setState(4919);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 645) {
                        {
                        this.setState(4918);
                        this.grantOptions();
                        }
                    }

                    this.setState(4922);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 17) {
                        {
                        this.setState(4921);
                        this.grantAs();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.setState(4924);
                    this.match(MySQLParser.PROXY_SYMBOL);
                    this.setState(4925);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(4926);
                    this.user();
                    this.setState(4927);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(4928);
                    this.grantTargetList();
                    this.setState(4932);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 645) {
                        {
                        this.setState(4929);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(4930);
                        this.match(MySQLParser.GRANT_SYMBOL);
                        this.setState(4931);
                        this.match(MySQLParser.OPTION_SYMBOL);
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantTargetList(): GrantTargetListContext {
        let localctx = new GrantTargetListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 624, MySQLParser.RULE_grantTargetList);
        try {
            this.setState(4940);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 553, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4936);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(4937);
                    this.createUserList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4938);
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.setState(4939);
                    this.userList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantOptions(): GrantOptionsContext {
        let localctx = new GrantOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 626, MySQLParser.RULE_grantOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4942);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(4943);
            this.grantOption();
            this.setState(4948);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 554, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(4944);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(4945);
                    this.grantOption();
                    }
                    }
                }
                this.setState(4950);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 554, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public exceptRoleList(): ExceptRoleListContext {
        let localctx = new ExceptRoleListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 628, MySQLParser.RULE_exceptRoleList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4951);
            this.match(MySQLParser.EXCEPT_SYMBOL);
            this.setState(4952);
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public withRoles(): WithRolesContext {
        let localctx = new WithRolesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 630, MySQLParser.RULE_withRoles);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4954);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(4955);
            this.match(MySQLParser.ROLE_SYMBOL);
            this.setState(4963);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 556, this.getContext())) {
                case 1:
                    {
                    this.setState(4956);
                    this.roleList();
                    }
                    break;
                case 2:
                    {
                    this.setState(4957);
                    this.match(MySQLParser.ALL_SYMBOL);
                    this.setState(4959);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 663) {
                        {
                        this.setState(4958);
                        this.exceptRoleList();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.setState(4961);
                    this.match(MySQLParser.NONE_SYMBOL);
                    }
                    break;
                case 4:
                    {
                    this.setState(4962);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantAs(): GrantAsContext {
        let localctx = new GrantAsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 632, MySQLParser.RULE_grantAs);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4965);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(4966);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4968);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 645) {
                {
                this.setState(4967);
                this.withRoles();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public versionedRequireClause(): VersionedRequireClauseContext {
        let localctx = new VersionedRequireClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 634, MySQLParser.RULE_versionedRequireClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4970);
            if (!(this.serverVersion < 80011)) {
                throw this.createFailedPredicateException("this.serverVersion < 80011");
            }
            this.setState(4971);
            this.requireClause();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public renameUserStatement(): RenameUserStatementContext {
        let localctx = new RenameUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 636, MySQLParser.RULE_renameUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4973);
            this.match(MySQLParser.RENAME_SYMBOL);
            this.setState(4974);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4975);
            this.user();
            this.setState(4976);
            this.match(MySQLParser.TO_SYMBOL);
            this.setState(4977);
            this.user();
            this.setState(4985);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(4978);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4979);
                this.user();
                this.setState(4980);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(4981);
                this.user();
                }
                }
                this.setState(4987);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public revokeStatement(): RevokeStatementContext {
        let localctx = new RevokeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 638, MySQLParser.RULE_revokeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4988);
            this.match(MySQLParser.REVOKE_SYMBOL);
            this.setState(4991);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 559, this.getContext())) {
                case 1:
                    {
                    this.setState(4989);
                    if (!(this.serverVersion >= 80031)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80031");
                    }
                    this.setState(4990);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(5028);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 564, this.getContext())) {
                case 1:
                    {
                    this.setState(4993);
                    this.roleOrPrivilegesList();
                    this.setState(4994);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(4995);
                    this.userList();
                    }
                    break;
                case 2:
                    {
                    this.setState(4997);
                    this.roleOrPrivilegesList();
                    this.setState(4998);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(5000);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 560, this.getContext())) {
                        case 1:
                            {
                            this.setState(4999);
                            this.aclType();
                            }
                            break;
                    }
                    this.setState(5002);
                    this.grantIdentifier();
                    this.setState(5003);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(5004);
                    this.userList();
                    }
                    break;
                case 3:
                    {
                    this.setState(5006);
                    this.match(MySQLParser.ALL_SYMBOL);
                    this.setState(5008);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 421) {
                        {
                        this.setState(5007);
                        this.match(MySQLParser.PRIVILEGES_SYMBOL);
                        }
                    }

                    this.setState(5018);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.ON_SYMBOL:
                        {
                        this.setState(5010);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(5012);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 562, this.getContext())) {
                            case 1:
                                {
                                this.setState(5011);
                                this.aclType();
                                }
                                break;
                        }
                        this.setState(5014);
                        this.grantIdentifier();
                        }
                        break;
                    case MySQLParser.COMMA_SYMBOL:
                        {
                        this.setState(5015);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(5016);
                        this.match(MySQLParser.GRANT_SYMBOL);
                        this.setState(5017);
                        this.match(MySQLParser.OPTION_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    this.setState(5020);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(5021);
                    this.userList();
                    }
                    break;
                case 4:
                    {
                    this.setState(5022);
                    this.match(MySQLParser.PROXY_SYMBOL);
                    this.setState(5023);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(5024);
                    this.user();
                    this.setState(5025);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(5026);
                    this.userList();
                    }
                    break;
            }
            this.setState(5032);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 565, this.getContext())) {
                case 1:
                    {
                    this.setState(5030);
                    if (!(this.serverVersion >= 80031)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80031");
                    }
                    this.setState(5031);
                    this.ignoreUnknownUser();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public aclType(): AclTypeContext {
        let localctx = new AclTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 640, MySQLParser.RULE_aclType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5034);
            _la = this.input().LA(1);
            if(!(_la === 206 || _la === 422 || _la === 574)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
        let localctx = new RoleOrPrivilegesListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 642, MySQLParser.RULE_roleOrPrivilegesList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5036);
            this.roleOrPrivilege();
            this.setState(5041);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(5037);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5038);
                this.roleOrPrivilege();
                }
                }
                this.setState(5043);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleOrPrivilege(): RoleOrPrivilegeContext {
        let localctx = new RoleOrPrivilegeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 644, MySQLParser.RULE_roleOrPrivilege);
        let _la: number;
        try {
            this.setState(5086);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 574, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5054);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 569, this.getContext())) {
                        case 1:
                            {
                            this.setState(5044);
                            this.roleIdentifierOrText();
                            this.setState(5046);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 776) {
                                {
                                this.setState(5045);
                                this.columnInternalRefList();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(5048);
                            this.roleIdentifierOrText();
                            this.setState(5052);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                            case MySQLParser.AT_TEXT_SUFFIX:
                                {
                                this.setState(5049);
                                this.match(MySQLParser.AT_TEXT_SUFFIX);
                                }
                                break;
                            case MySQLParser.AT_SIGN_SYMBOL:
                                {
                                this.setState(5050);
                                this.match(MySQLParser.AT_SIGN_SYMBOL);
                                this.setState(5051);
                                this.textOrIdentifier();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5056);
                    _la = this.input().LA(1);
                    if(!(_la === 242 || _la === 443 || _la === 497 || _la === 614)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(5058);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 776) {
                        {
                        this.setState(5057);
                        this.columnInternalRefList();
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5060);
                    _la = this.input().LA(1);
                    if(!(_la === 133 || _la === 148 || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & 262153) !== 0) || _la === 236 || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & 268435473) !== 0) || _la === 510 || _la === 565 || _la === 594 || _la === 616)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5061);
                    this.match(MySQLParser.GRANT_SYMBOL);
                    this.setState(5062);
                    this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(5063);
                    this.match(MySQLParser.SHOW_SYMBOL);
                    this.setState(5064);
                    this.match(MySQLParser.DATABASES_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(5065);
                    this.match(MySQLParser.CREATE_SYMBOL);
                    this.setState(5069);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.TEMPORARY_SYMBOL:
                        {
                        this.setState(5066);
                        this.match(MySQLParser.TEMPORARY_SYMBOL);
                        this.setState(5067);
                        localctx._object = this.match(MySQLParser.TABLES_SYMBOL);
                        }
                        break;
                    case MySQLParser.ROUTINE_SYMBOL:
                    case MySQLParser.TABLESPACE_SYMBOL:
                    case MySQLParser.USER_SYMBOL:
                    case MySQLParser.VIEW_SYMBOL:
                        {
                        this.setState(5068);
                        localctx._object = this.input().LT(1);
                        _la = this.input().LA(1);
                        if(!(_la === 483 || _la === 572 || _la === 618 || _la === 636)) {
                            localctx._object = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    case MySQLParser.FROM_SYMBOL:
                    case MySQLParser.ON_SYMBOL:
                    case MySQLParser.TO_SYMBOL:
                    case MySQLParser.COMMA_SYMBOL:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(5071);
                    this.match(MySQLParser.LOCK_SYMBOL);
                    this.setState(5072);
                    this.match(MySQLParser.TABLES_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(5073);
                    this.match(MySQLParser.REPLICATION_SYMBOL);
                    this.setState(5076);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.CLIENT_SYMBOL:
                        {
                        this.setState(5074);
                        this.match(MySQLParser.CLIENT_SYMBOL);
                        }
                        break;
                    case MySQLParser.SLAVE_SYMBOL:
                    case MySQLParser.REPLICA_SYMBOL:
                        {
                        this.setState(5075);
                        this.replica();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(5078);
                    this.match(MySQLParser.SHOW_SYMBOL);
                    this.setState(5079);
                    this.match(MySQLParser.VIEW_SYMBOL);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(5080);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(5082);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 483) {
                        {
                        this.setState(5081);
                        this.match(MySQLParser.ROUTINE_SYMBOL);
                        }
                    }

                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(5084);
                    _la = this.input().LA(1);
                    if(!(_la === 97 || _la === 148)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(5085);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantIdentifier(): GrantIdentifierContext {
        let localctx = new GrantIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 646, MySQLParser.RULE_grantIdentifier);
        let _la: number;
        try {
            this.setState(5104);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 577, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5088);
                    this.match(MySQLParser.MULT_OPERATOR);
                    this.setState(5091);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 772) {
                        {
                        this.setState(5089);
                        this.match(MySQLParser.DOT_SYMBOL);
                        this.setState(5090);
                        this.match(MySQLParser.MULT_OPERATOR);
                        }
                    }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5093);
                    this.schemaRef();
                    this.setState(5096);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 772) {
                        {
                        this.setState(5094);
                        this.match(MySQLParser.DOT_SYMBOL);
                        this.setState(5095);
                        this.match(MySQLParser.MULT_OPERATOR);
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5098);
                    this.tableRef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5099);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(5100);
                    this.schemaRef();
                    this.setState(5101);
                    this.match(MySQLParser.DOT_SYMBOL);
                    this.setState(5102);
                    this.tableRef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public requireList(): RequireListContext {
        let localctx = new RequireListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 648, MySQLParser.RULE_requireList);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5106);
            this.requireListElement();
            this.setState(5113);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 579, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(5108);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 15) {
                        {
                        this.setState(5107);
                        this.match(MySQLParser.AND_SYMBOL);
                        }
                    }

                    this.setState(5110);
                    this.requireListElement();
                    }
                    }
                }
                this.setState(5115);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 579, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public requireListElement(): RequireListElementContext {
        let localctx = new RequireListElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 650, MySQLParser.RULE_requireListElement);
        try {
            this.setState(5122);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CIPHER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5116);
                localctx._element = this.match(MySQLParser.CIPHER_SYMBOL);
                this.setState(5117);
                this.textString();
                }
                break;
            case MySQLParser.ISSUER_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5118);
                localctx._element = this.match(MySQLParser.ISSUER_SYMBOL);
                this.setState(5119);
                this.textString();
                }
                break;
            case MySQLParser.SUBJECT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5120);
                localctx._element = this.match(MySQLParser.SUBJECT_SYMBOL);
                this.setState(5121);
                this.textString();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantOption(): GrantOptionContext {
        let localctx = new GrantOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 652, MySQLParser.RULE_grantOption);
        try {
            this.setState(5137);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 582, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5124);
                    localctx._option = this.match(MySQLParser.GRANT_SYMBOL);
                    this.setState(5125);
                    this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5126);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(5135);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                        {
                        this.setState(5127);
                        localctx._option = this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                        this.setState(5128);
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                        {
                        this.setState(5129);
                        localctx._option = this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                        this.setState(5130);
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                        {
                        this.setState(5131);
                        localctx._option = this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                        this.setState(5132);
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                        {
                        this.setState(5133);
                        localctx._option = this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                        this.setState(5134);
                        this.ulong_number();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setRoleStatement(): SetRoleStatementContext {
        let localctx = new SetRoleStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 654, MySQLParser.RULE_setRoleStatement);
        let _la: number;
        try {
            this.setState(5162);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 585, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5139);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(5140);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.setState(5141);
                    this.roleList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5142);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(5143);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.setState(5144);
                    _la = this.input().LA(1);
                    if(!(_la === 128 || _la === 369)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5145);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(5146);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(5147);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.setState(5151);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 583, this.getContext())) {
                        case 1:
                            {
                            this.setState(5148);
                            this.roleList();
                            }
                            break;
                        case 2:
                            {
                            this.setState(5149);
                            this.match(MySQLParser.NONE_SYMBOL);
                            }
                            break;
                        case 3:
                            {
                            this.setState(5150);
                            this.match(MySQLParser.ALL_SYMBOL);
                            }
                            break;
                    }
                    this.setState(5153);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(5154);
                    this.roleList();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5155);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(5156);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.setState(5157);
                    this.match(MySQLParser.ALL_SYMBOL);
                    this.setState(5160);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 663) {
                        {
                        this.setState(5158);
                        this.match(MySQLParser.EXCEPT_SYMBOL);
                        this.setState(5159);
                        this.roleList();
                        }
                    }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleList(): RoleListContext {
        let localctx = new RoleListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 656, MySQLParser.RULE_roleList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5164);
            this.role();
            this.setState(5169);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 586, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(5165);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(5166);
                    this.role();
                    }
                    }
                }
                this.setState(5171);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 586, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public role(): RoleContext {
        let localctx = new RoleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 658, MySQLParser.RULE_role);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5172);
            this.roleIdentifierOrText();
            this.setState(5174);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 587, this.getContext())) {
                case 1:
                    {
                    this.setState(5173);
                    this.userVariable();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableAdministrationStatement(): TableAdministrationStatementContext {
        let localctx = new TableAdministrationStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 660, MySQLParser.RULE_tableAdministrationStatement);
        let _la: number;
        try {
            this.setState(5218);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ANALYZE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5176);
                localctx._type_ = this.match(MySQLParser.ANALYZE_SYMBOL);
                this.setState(5178);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284 || _la === 375) {
                    {
                    this.setState(5177);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(5180);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5181);
                this.tableRefList();
                this.setState(5183);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 148 || _la === 614) {
                    {
                    this.setState(5182);
                    this.histogram();
                    }
                }

                }
                break;
            case MySQLParser.CHECK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5185);
                localctx._type_ = this.match(MySQLParser.CHECK_SYMBOL);
                this.setState(5186);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5187);
                this.tableRefList();
                this.setState(5191);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 56 || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 1048593) !== 0) || _la === 333 || _la === 431) {
                    {
                    {
                    this.setState(5188);
                    this.checkOption();
                    }
                    }
                    this.setState(5193);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.CHECKSUM_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5194);
                localctx._type_ = this.match(MySQLParser.CHECKSUM_SYMBOL);
                this.setState(5195);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5196);
                this.tableRefList();
                this.setState(5198);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 180 || _la === 431) {
                    {
                    this.setState(5197);
                    _la = this.input().LA(1);
                    if(!(_la === 180 || _la === 431)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case MySQLParser.OPTIMIZE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5200);
                localctx._type_ = this.match(MySQLParser.OPTIMIZE_SYMBOL);
                this.setState(5202);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284 || _la === 375) {
                    {
                    this.setState(5201);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(5204);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5205);
                this.tableRefList();
                }
                break;
            case MySQLParser.REPAIR_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(5206);
                localctx._type_ = this.match(MySQLParser.REPAIR_SYMBOL);
                this.setState(5208);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284 || _la === 375) {
                    {
                    this.setState(5207);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(5210);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5211);
                this.tableRefList();
                this.setState(5215);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 180 || _la === 431 || _la === 619) {
                    {
                    {
                    this.setState(5212);
                    this.repairType();
                    }
                    }
                    this.setState(5217);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public histogram(): HistogramContext {
        let localctx = new HistogramContext(this.getContext(), this.getState());
        this.enterRule(localctx, 662, MySQLParser.RULE_histogram);
        try {
            this.setState(5237);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.UPDATE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5220);
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.setState(5221);
                this.match(MySQLParser.HISTOGRAM_SYMBOL);
                this.setState(5222);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(5223);
                this.identifierList();
                this.setState(5231);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 596, this.getContext())) {
                    case 1:
                        {
                        this.setState(5224);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(5225);
                        this.match(MySQLParser.INT_NUMBER);
                        this.setState(5226);
                        this.match(MySQLParser.BUCKETS_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                        this.setState(5227);
                        if (!(this.serverVersion >= 80031)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80031");
                        }
                        this.setState(5228);
                        this.match(MySQLParser.USING_SYMBOL);
                        this.setState(5229);
                        this.match(MySQLParser.DATA_SYMBOL);
                        this.setState(5230);
                        this.textStringLiteral();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5233);
                this.match(MySQLParser.DROP_SYMBOL);
                this.setState(5234);
                this.match(MySQLParser.HISTOGRAM_SYMBOL);
                this.setState(5235);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(5236);
                this.identifierList();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public checkOption(): CheckOptionContext {
        let localctx = new CheckOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 664, MySQLParser.RULE_checkOption);
        let _la: number;
        try {
            this.setState(5242);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5239);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(5240);
                this.match(MySQLParser.UPGRADE_SYMBOL);
                }
                break;
            case MySQLParser.CHANGED_SYMBOL:
            case MySQLParser.EXTENDED_SYMBOL:
            case MySQLParser.FAST_SYMBOL:
            case MySQLParser.MEDIUM_SYMBOL:
            case MySQLParser.QUICK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5241);
                _la = this.input().LA(1);
                if(!(_la === 56 || _la === 180 || _la === 184 || _la === 333 || _la === 431)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public repairType(): RepairTypeContext {
        let localctx = new RepairTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 666, MySQLParser.RULE_repairType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5244);
            _la = this.input().LA(1);
            if(!(_la === 180 || _la === 431 || _la === 619)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public installUninstallStatement(): InstallUninstallStatementContext {
        let localctx = new InstallUninstallStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 668, MySQLParser.RULE_installUninstallStatement);
        let _la: number;
        try {
            this.setState(5268);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 600, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5246);
                    localctx._action = this.match(MySQLParser.INSTALL_SYMBOL);
                    this.setState(5247);
                    localctx._type_ = this.match(MySQLParser.PLUGIN_SYMBOL);
                    this.setState(5248);
                    this.identifier();
                    this.setState(5249);
                    this.match(MySQLParser.SONAME_SYMBOL);
                    this.setState(5250);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5252);
                    localctx._action = this.match(MySQLParser.INSTALL_SYMBOL);
                    this.setState(5253);
                    localctx._type_ = this.match(MySQLParser.COMPONENT_SYMBOL);
                    this.setState(5254);
                    this.textStringLiteralList();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5255);
                    localctx._action = this.match(MySQLParser.UNINSTALL_SYMBOL);
                    this.setState(5256);
                    localctx._type_ = this.match(MySQLParser.PLUGIN_SYMBOL);
                    this.setState(5257);
                    this.pluginRef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5258);
                    localctx._action = this.match(MySQLParser.UNINSTALL_SYMBOL);
                    this.setState(5259);
                    localctx._type_ = this.match(MySQLParser.COMPONENT_SYMBOL);
                    this.setState(5260);
                    this.componentRef();
                    this.setState(5265);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(5261);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(5262);
                        this.componentRef();
                        }
                        }
                        this.setState(5267);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setStatement(): SetStatementContext {
        let localctx = new SetStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 670, MySQLParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5270);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(5271);
            this.startOptionValueList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public startOptionValueList(): StartOptionValueListContext {
        let localctx = new StartOptionValueListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 672, MySQLParser.RULE_startOptionValueList);
        let _la: number;
        try {
            this.setState(5323);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 610, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5273);
                    this.optionValueNoOptionType();
                    this.setState(5274);
                    this.optionValueListContinued();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5276);
                    this.match(MySQLParser.TRANSACTION_SYMBOL);
                    this.setState(5277);
                    this.transactionCharacteristics();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5278);
                    this.optionType();
                    this.setState(5279);
                    this.startOptionValueListFollowingOptionType();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5281);
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.setState(5284);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 200) {
                        {
                        this.setState(5282);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(5283);
                        this.user();
                        }
                    }

                    this.setState(5286);
                    this.equal();
                    this.setState(5307);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 606, this.getContext())) {
                        case 1:
                            {
                            this.setState(5287);
                            this.textString();
                            this.setState(5289);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 458) {
                                {
                                this.setState(5288);
                                this.replacePassword();
                                }
                            }

                            this.setState(5292);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 727) {
                                {
                                this.setState(5291);
                                this.retainCurrentPassword();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(5294);
                            this.textString();
                            this.setState(5296);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 458) {
                                {
                                this.setState(5295);
                                this.replacePassword();
                                }
                            }

                            this.setState(5299);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 727) {
                                {
                                this.setState(5298);
                                this.retainCurrentPassword();
                                }
                            }

                            }
                            break;
                        case 3:
                            {
                            this.setState(5301);
                            if (!(this.serverVersion < 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80014");
                            }
                            this.setState(5302);
                            this.match(MySQLParser.PASSWORD_SYMBOL);
                            this.setState(5303);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(5304);
                            this.textString();
                            this.setState(5305);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(5309);
                    if (!(this.serverVersion >= 80018)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80018");
                    }
                    this.setState(5310);
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.setState(5313);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 200) {
                        {
                        this.setState(5311);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(5312);
                        this.user();
                        }
                    }

                    this.setState(5315);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(5316);
                    this.match(MySQLParser.RANDOM_SYMBOL);
                    this.setState(5318);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 458) {
                        {
                        this.setState(5317);
                        this.replacePassword();
                        }
                    }

                    this.setState(5321);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 727) {
                        {
                        this.setState(5320);
                        this.retainCurrentPassword();
                        }
                    }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext {
        let localctx = new TransactionCharacteristicsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 674, MySQLParser.RULE_transactionCharacteristics);
        let _la: number;
        try {
            this.setState(5334);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5325);
                this.transactionAccessMode();
                this.setState(5327);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 258) {
                    {
                    this.setState(5326);
                    this.isolationLevel();
                    }
                }

                }
                break;
            case MySQLParser.ISOLATION_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5329);
                this.isolationLevel();
                this.setState(5332);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(5330);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(5331);
                    this.transactionAccessMode();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public transactionAccessMode(): TransactionAccessModeContext {
        let localctx = new TransactionAccessModeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 676, MySQLParser.RULE_transactionAccessMode);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5336);
            this.match(MySQLParser.READ_SYMBOL);
            this.setState(5337);
            _la = this.input().LA(1);
            if(!(_la === 386 || _la === 649)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public isolationLevel(): IsolationLevelContext {
        let localctx = new IsolationLevelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 678, MySQLParser.RULE_isolationLevel);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5339);
            this.match(MySQLParser.ISOLATION_SYMBOL);
            this.setState(5340);
            this.match(MySQLParser.LEVEL_SYMBOL);
            this.setState(5346);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.REPEATABLE_SYMBOL:
                {
                this.setState(5341);
                this.match(MySQLParser.REPEATABLE_SYMBOL);
                this.setState(5342);
                this.match(MySQLParser.READ_SYMBOL);
                }
                break;
            case MySQLParser.READ_SYMBOL:
                {
                this.setState(5343);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(5344);
                _la = this.input().LA(1);
                if(!(_la === 76 || _la === 601)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.SERIALIZABLE_SYMBOL:
                {
                this.setState(5345);
                this.match(MySQLParser.SERIALIZABLE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionValueListContinued(): OptionValueListContinuedContext {
        let localctx = new OptionValueListContinuedContext(this.getContext(), this.getState());
        this.enterRule(localctx, 680, MySQLParser.RULE_optionValueListContinued);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5352);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(5348);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5349);
                this.optionValue();
                }
                }
                this.setState(5354);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
        let localctx = new OptionValueNoOptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 682, MySQLParser.RULE_optionValueNoOptionType);
        let _la: number;
        try {
            this.setState(5384);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 619, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5355);
                    this.lvalueVariable();
                    this.setState(5356);
                    this.equal();
                    this.setState(5357);
                    this.setExprOrDefault();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5359);
                    this.charsetClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5360);
                    this.userVariable();
                    this.setState(5361);
                    this.equal();
                    this.setState(5362);
                    this.expr(0);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5364);
                    this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                    this.setState(5366);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 616, this.getContext())) {
                        case 1:
                            {
                            this.setState(5365);
                            this.setVarIdentType();
                            }
                            break;
                    }
                    this.setState(5368);
                    this.lvalueVariable();
                    this.setState(5369);
                    this.equal();
                    this.setState(5370);
                    this.setExprOrDefault();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(5372);
                    this.match(MySQLParser.NAMES_SYMBOL);
                    this.setState(5382);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 618, this.getContext())) {
                        case 1:
                            {
                            this.setState(5373);
                            this.equal();
                            this.setState(5374);
                            this.expr(0);
                            }
                            break;
                        case 2:
                            {
                            this.setState(5376);
                            this.charsetName();
                            this.setState(5378);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 69) {
                                {
                                this.setState(5377);
                                this.collate();
                                }
                            }

                            }
                            break;
                        case 3:
                            {
                            this.setState(5380);
                            if (!(this.serverVersion >= 80011)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80011");
                            }
                            this.setState(5381);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionValue(): OptionValueContext {
        let localctx = new OptionValueContext(this.getContext(), this.getState());
        this.enterRule(localctx, 684, MySQLParser.RULE_optionValue);
        try {
            this.setState(5392);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 620, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5386);
                    this.optionType();
                    this.setState(5387);
                    this.lvalueVariable();
                    this.setState(5388);
                    this.equal();
                    this.setState(5389);
                    this.setExprOrDefault();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5391);
                    this.optionValueNoOptionType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setSystemVariable(): SetSystemVariableContext {
        let localctx = new SetSystemVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 686, MySQLParser.RULE_setSystemVariable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5394);
            this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
            this.setState(5396);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 621, this.getContext())) {
                case 1:
                    {
                    this.setState(5395);
                    this.setVarIdentType();
                    }
                    break;
            }
            this.setState(5398);
            this.lvalueVariable();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext {
        let localctx = new StartOptionValueListFollowingOptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 688, MySQLParser.RULE_startOptionValueListFollowingOptionType);
        try {
            this.setState(5405);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 622, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5400);
                    this.optionValueFollowingOptionType();
                    this.setState(5401);
                    this.optionValueListContinued();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5403);
                    this.match(MySQLParser.TRANSACTION_SYMBOL);
                    this.setState(5404);
                    this.transactionCharacteristics();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext {
        let localctx = new OptionValueFollowingOptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 690, MySQLParser.RULE_optionValueFollowingOptionType);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5407);
            this.lvalueVariable();
            this.setState(5408);
            this.equal();
            this.setState(5409);
            this.setExprOrDefault();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setExprOrDefault(): SetExprOrDefaultContext {
        let localctx = new SetExprOrDefaultContext(this.getContext(), this.getState());
        this.enterRule(localctx, 692, MySQLParser.RULE_setExprOrDefault);
        try {
            this.setState(5418);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 623, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5411);
                    this.expr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5412);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5413);
                    this.match(MySQLParser.ON_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5414);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(5415);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(5416);
                    this.match(MySQLParser.ROW_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(5417);
                    this.match(MySQLParser.SYSTEM_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showDatabasesStatement(): ShowDatabasesStatementContext {
        let localctx = new ShowDatabasesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 694, MySQLParser.RULE_showDatabasesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5420);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5421);
            this.match(MySQLParser.DATABASES_SYMBOL);
            this.setState(5423);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5422);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showTablesStatement(): ShowTablesStatementContext {
        let localctx = new ShowTablesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 696, MySQLParser.RULE_showTablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5425);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5427);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 180 || _la === 204) {
                {
                this.setState(5426);
                this.showCommandType();
                }
            }

            this.setState(5429);
            localctx._value = this.match(MySQLParser.TABLES_SYMBOL);
            this.setState(5431);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203 || _la === 251) {
                {
                this.setState(5430);
                this.inDb();
                }
            }

            this.setState(5434);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5433);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showTriggersStatement(): ShowTriggersStatementContext {
        let localctx = new ShowTriggersStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 698, MySQLParser.RULE_showTriggersStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5436);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5438);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 204) {
                {
                this.setState(5437);
                this.match(MySQLParser.FULL_SYMBOL);
                }
            }

            this.setState(5440);
            this.match(MySQLParser.TRIGGERS_SYMBOL);
            this.setState(5442);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203 || _la === 251) {
                {
                this.setState(5441);
                this.inDb();
                }
            }

            this.setState(5445);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5444);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEventsStatement(): ShowEventsStatementContext {
        let localctx = new ShowEventsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 700, MySQLParser.RULE_showEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5447);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5448);
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.setState(5450);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203 || _la === 251) {
                {
                this.setState(5449);
                this.inDb();
                }
            }

            this.setState(5453);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5452);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showTableStatusStatement(): ShowTableStatusStatementContext {
        let localctx = new ShowTableStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 702, MySQLParser.RULE_showTableStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5455);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5456);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(5457);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5459);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203 || _la === 251) {
                {
                this.setState(5458);
                this.inDb();
                }
            }

            this.setState(5462);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5461);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showOpenTablesStatement(): ShowOpenTablesStatementContext {
        let localctx = new ShowOpenTablesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 704, MySQLParser.RULE_showOpenTablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5464);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5465);
            this.match(MySQLParser.OPEN_SYMBOL);
            this.setState(5466);
            this.match(MySQLParser.TABLES_SYMBOL);
            this.setState(5468);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203 || _la === 251) {
                {
                this.setState(5467);
                this.inDb();
                }
            }

            this.setState(5471);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5470);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showPluginsStatement(): ShowPluginsStatementContext {
        let localctx = new ShowPluginsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 706, MySQLParser.RULE_showPluginsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5473);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5474);
            this.match(MySQLParser.PLUGINS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEngineLogsStatement(): ShowEngineLogsStatementContext {
        let localctx = new ShowEngineLogsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 708, MySQLParser.RULE_showEngineLogsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5476);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5477);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(5478);
            this.engineOrAll();
            this.setState(5479);
            this.match(MySQLParser.LOGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEngineMutexStatement(): ShowEngineMutexStatementContext {
        let localctx = new ShowEngineMutexStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 710, MySQLParser.RULE_showEngineMutexStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5481);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5482);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(5483);
            this.engineOrAll();
            this.setState(5484);
            this.match(MySQLParser.MUTEX_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEngineStatusStatement(): ShowEngineStatusStatementContext {
        let localctx = new ShowEngineStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 712, MySQLParser.RULE_showEngineStatusStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5486);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5487);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(5488);
            this.engineOrAll();
            this.setState(5489);
            this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showColumnsStatement(): ShowColumnsStatementContext {
        let localctx = new ShowColumnsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 714, MySQLParser.RULE_showColumnsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5491);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5493);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 180 || _la === 204) {
                {
                this.setState(5492);
                this.showCommandType();
                }
            }

            this.setState(5495);
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.setState(5496);
            _la = this.input().LA(1);
            if(!(_la === 203 || _la === 251)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5497);
            this.tableRef();
            this.setState(5499);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203 || _la === 251) {
                {
                this.setState(5498);
                this.inDb();
                }
            }

            this.setState(5502);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5501);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showBinaryLogsStatement(): ShowBinaryLogsStatementContext {
        let localctx = new ShowBinaryLogsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 716, MySQLParser.RULE_showBinaryLogsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5504);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5505);
            _la = this.input().LA(1);
            if(!(_la === 32 || _la === 316)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5506);
            localctx._value = this.match(MySQLParser.LOGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showReplicasStatement(): ShowReplicasStatementContext {
        let localctx = new ShowReplicasStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 718, MySQLParser.RULE_showReplicasStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5508);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5513);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.SLAVE_SYMBOL:
            case MySQLParser.REPLICA_SYMBOL:
                {
                this.setState(5509);
                this.replica();
                this.setState(5510);
                this.match(MySQLParser.HOSTS_SYMBOL);
                }
                break;
            case MySQLParser.REPLICAS_SYMBOL:
                {
                this.setState(5512);
                this.match(MySQLParser.REPLICAS_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showBinlogEventsStatement(): ShowBinlogEventsStatementContext {
        let localctx = new ShowBinlogEventsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 720, MySQLParser.RULE_showBinlogEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5515);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5516);
            this.match(MySQLParser.BINLOG_SYMBOL);
            this.setState(5517);
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.setState(5520);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 251) {
                {
                this.setState(5518);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(5519);
                this.textString();
                }
            }

            this.setState(5524);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203) {
                {
                this.setState(5522);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(5523);
                this.ulonglong_number();
                }
            }

            this.setState(5527);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 276) {
                {
                this.setState(5526);
                this.limitClause();
                }
            }

            this.setState(5530);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(5529);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showRelaylogEventsStatement(): ShowRelaylogEventsStatementContext {
        let localctx = new ShowRelaylogEventsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 722, MySQLParser.RULE_showRelaylogEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5532);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5533);
            this.match(MySQLParser.RELAYLOG_SYMBOL);
            this.setState(5534);
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.setState(5537);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 251) {
                {
                this.setState(5535);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(5536);
                this.textString();
                }
            }

            this.setState(5541);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203) {
                {
                this.setState(5539);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(5540);
                this.ulonglong_number();
                }
            }

            this.setState(5544);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 276) {
                {
                this.setState(5543);
                this.limitClause();
                }
            }

            this.setState(5547);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(5546);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showKeysStatement(): ShowKeysStatementContext {
        let localctx = new ShowKeysStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 724, MySQLParser.RULE_showKeysStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5549);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5551);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 180) {
                {
                this.setState(5550);
                this.match(MySQLParser.EXTENDED_SYMBOL);
                }
            }

            this.setState(5553);
            _la = this.input().LA(1);
            if(!(((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & 268435459) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5554);
            this.fromOrIn();
            this.setState(5555);
            this.tableRef();
            this.setState(5557);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 203 || _la === 251) {
                {
                this.setState(5556);
                this.inDb();
                }
            }

            this.setState(5560);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 643) {
                {
                this.setState(5559);
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEnginesStatement(): ShowEnginesStatementContext {
        let localctx = new ShowEnginesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 726, MySQLParser.RULE_showEnginesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5562);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5564);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 553) {
                {
                this.setState(5563);
                this.match(MySQLParser.STORAGE_SYMBOL);
                }
            }

            this.setState(5566);
            localctx._value = this.match(MySQLParser.ENGINES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCountWarningsStatement(): ShowCountWarningsStatementContext {
        let localctx = new ShowCountWarningsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 728, MySQLParser.RULE_showCountWarningsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5568);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5569);
            this.match(MySQLParser.COUNT_SYMBOL);
            this.setState(5570);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(5571);
            this.match(MySQLParser.MULT_OPERATOR);
            this.setState(5572);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(5573);
            this.match(MySQLParser.WARNINGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCountErrorsStatement(): ShowCountErrorsStatementContext {
        let localctx = new ShowCountErrorsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 730, MySQLParser.RULE_showCountErrorsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5575);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5576);
            this.match(MySQLParser.COUNT_SYMBOL);
            this.setState(5577);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(5578);
            this.match(MySQLParser.MULT_OPERATOR);
            this.setState(5579);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(5580);
            this.match(MySQLParser.ERRORS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showWarningsStatement(): ShowWarningsStatementContext {
        let localctx = new ShowWarningsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 732, MySQLParser.RULE_showWarningsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5582);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5583);
            this.match(MySQLParser.WARNINGS_SYMBOL);
            this.setState(5585);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 276) {
                {
                this.setState(5584);
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showErrorsStatement(): ShowErrorsStatementContext {
        let localctx = new ShowErrorsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 734, MySQLParser.RULE_showErrorsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5587);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5588);
            this.match(MySQLParser.ERRORS_SYMBOL);
            this.setState(5590);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 276) {
                {
                this.setState(5589);
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showProfilesStatement(): ShowProfilesStatementContext {
        let localctx = new ShowProfilesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 736, MySQLParser.RULE_showProfilesStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5592);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5593);
            this.match(MySQLParser.PROFILES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showProfileStatement(): ShowProfileStatementContext {
        let localctx = new ShowProfileStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 738, MySQLParser.RULE_showProfileStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5595);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5596);
            this.match(MySQLParser.PROFILE_SYMBOL);
            this.setState(5598);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 10 || _la === 40 || _la === 91 || _la === 96 || _la === 256 || _la === 334 || _la === 400 || _la === 522 || _la === 567) {
                {
                this.setState(5597);
                this.profileDefinitions();
                }
            }

            this.setState(5603);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(5600);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(5601);
                this.match(MySQLParser.QUERY_SYMBOL);
                this.setState(5602);
                this.match(MySQLParser.INT_NUMBER);
                }
            }

            this.setState(5606);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 276) {
                {
                this.setState(5605);
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showStatusStatement(): ShowStatusStatementContext {
        let localctx = new ShowStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 740, MySQLParser.RULE_showStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5608);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5610);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673) {
                {
                this.setState(5609);
                this.optionType();
                }
            }

            this.setState(5612);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5614);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5613);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showProcessListStatement(): ShowProcessListStatementContext {
        let localctx = new ShowProcessListStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 742, MySQLParser.RULE_showProcessListStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5616);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5618);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 204) {
                {
                this.setState(5617);
                this.match(MySQLParser.FULL_SYMBOL);
                }
            }

            this.setState(5620);
            this.match(MySQLParser.PROCESSLIST_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showVariablesStatement(): ShowVariablesStatementContext {
        let localctx = new ShowVariablesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 744, MySQLParser.RULE_showVariablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5622);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5624);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673) {
                {
                this.setState(5623);
                this.optionType();
                }
            }

            this.setState(5626);
            this.match(MySQLParser.VARIABLES_SYMBOL);
            this.setState(5628);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5627);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCharacterSetStatement(): ShowCharacterSetStatementContext {
        let localctx = new ShowCharacterSetStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 746, MySQLParser.RULE_showCharacterSetStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5630);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5631);
            this.charset();
            this.setState(5633);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5632);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCollationStatement(): ShowCollationStatementContext {
        let localctx = new ShowCollationStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 748, MySQLParser.RULE_showCollationStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5635);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5636);
            this.match(MySQLParser.COLLATION_SYMBOL);
            this.setState(5638);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5637);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showPrivilegesStatement(): ShowPrivilegesStatementContext {
        let localctx = new ShowPrivilegesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 750, MySQLParser.RULE_showPrivilegesStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5640);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5641);
            this.match(MySQLParser.PRIVILEGES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showGrantsStatement(): ShowGrantsStatementContext {
        let localctx = new ShowGrantsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 752, MySQLParser.RULE_showGrantsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5643);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5644);
            this.match(MySQLParser.GRANTS_SYMBOL);
            this.setState(5651);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(5645);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(5646);
                this.user();
                this.setState(5649);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 621) {
                    {
                    this.setState(5647);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(5648);
                    this.userList();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateDatabaseStatement(): ShowCreateDatabaseStatementContext {
        let localctx = new ShowCreateDatabaseStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 754, MySQLParser.RULE_showCreateDatabaseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5653);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5654);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5655);
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.setState(5657);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 667, this.getContext())) {
                case 1:
                    {
                    this.setState(5656);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(5659);
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateTableStatement(): ShowCreateTableStatementContext {
        let localctx = new ShowCreateTableStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 756, MySQLParser.RULE_showCreateTableStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5661);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5662);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5663);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(5664);
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateViewStatement(): ShowCreateViewStatementContext {
        let localctx = new ShowCreateViewStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 758, MySQLParser.RULE_showCreateViewStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5666);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5667);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5668);
            this.match(MySQLParser.VIEW_SYMBOL);
            this.setState(5669);
            this.viewRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showMasterStatusStatement(): ShowMasterStatusStatementContext {
        let localctx = new ShowMasterStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 760, MySQLParser.RULE_showMasterStatusStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5671);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5672);
            this.match(MySQLParser.MASTER_SYMBOL);
            this.setState(5673);
            this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showReplicaStatusStatement(): ShowReplicaStatusStatementContext {
        let localctx = new ShowReplicaStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 762, MySQLParser.RULE_showReplicaStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5675);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5676);
            this.replica();
            this.setState(5677);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5679);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(5678);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateProcedureStatement(): ShowCreateProcedureStatementContext {
        let localctx = new ShowCreateProcedureStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 764, MySQLParser.RULE_showCreateProcedureStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5681);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5682);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5683);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(5684);
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateFunctionStatement(): ShowCreateFunctionStatementContext {
        let localctx = new ShowCreateFunctionStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 766, MySQLParser.RULE_showCreateFunctionStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5686);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5687);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5688);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(5689);
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateTriggerStatement(): ShowCreateTriggerStatementContext {
        let localctx = new ShowCreateTriggerStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 768, MySQLParser.RULE_showCreateTriggerStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5691);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5692);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5693);
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.setState(5694);
            this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateProcedureStatusStatement(): ShowCreateProcedureStatusStatementContext {
        let localctx = new ShowCreateProcedureStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 770, MySQLParser.RULE_showCreateProcedureStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5696);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5697);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5698);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(5699);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5701);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5700);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateFunctionStatusStatement(): ShowCreateFunctionStatusStatementContext {
        let localctx = new ShowCreateFunctionStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 772, MySQLParser.RULE_showCreateFunctionStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5703);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5704);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5705);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(5706);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5708);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 275 || _la === 643) {
                {
                this.setState(5707);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateProcedureCodeStatement(): ShowCreateProcedureCodeStatementContext {
        let localctx = new ShowCreateProcedureCodeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 774, MySQLParser.RULE_showCreateProcedureCodeStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5710);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5711);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5712);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(5713);
            this.match(MySQLParser.CODE_SYMBOL);
            this.setState(5714);
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateFunctionCodeStatement(): ShowCreateFunctionCodeStatementContext {
        let localctx = new ShowCreateFunctionCodeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 776, MySQLParser.RULE_showCreateFunctionCodeStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5716);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5717);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5718);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(5719);
            this.match(MySQLParser.CODE_SYMBOL);
            this.setState(5720);
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateEventStatement(): ShowCreateEventStatementContext {
        let localctx = new ShowCreateEventStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 778, MySQLParser.RULE_showCreateEventStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5722);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5723);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5724);
            this.match(MySQLParser.EVENT_SYMBOL);
            this.setState(5725);
            this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateUserStatement(): ShowCreateUserStatementContext {
        let localctx = new ShowCreateUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 780, MySQLParser.RULE_showCreateUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5727);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5728);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5729);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(5730);
            this.user();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCommandType(): ShowCommandTypeContext {
        let localctx = new ShowCommandTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 782, MySQLParser.RULE_showCommandType);
        let _la: number;
        try {
            this.setState(5737);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FULL_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5732);
                this.match(MySQLParser.FULL_SYMBOL);
                }
                break;
            case MySQLParser.EXTENDED_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5733);
                this.match(MySQLParser.EXTENDED_SYMBOL);
                this.setState(5735);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 204) {
                    {
                    this.setState(5734);
                    this.match(MySQLParser.FULL_SYMBOL);
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public engineOrAll(): EngineOrAllContext {
        let localctx = new EngineOrAllContext(this.getContext(), this.getState());
        this.enterRule(localctx, 784, MySQLParser.RULE_engineOrAll);
        try {
            this.setState(5741);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 673, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5739);
                    this.engineRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5740);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fromOrIn(): FromOrInContext {
        let localctx = new FromOrInContext(this.getContext(), this.getState());
        this.enterRule(localctx, 786, MySQLParser.RULE_fromOrIn);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5743);
            _la = this.input().LA(1);
            if(!(_la === 203 || _la === 251)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public inDb(): InDbContext {
        let localctx = new InDbContext(this.getContext(), this.getState());
        this.enterRule(localctx, 788, MySQLParser.RULE_inDb);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5745);
            this.fromOrIn();
            this.setState(5746);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public profileDefinitions(): ProfileDefinitionsContext {
        let localctx = new ProfileDefinitionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 790, MySQLParser.RULE_profileDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5748);
            this.profileDefinition();
            this.setState(5753);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(5749);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5750);
                this.profileDefinition();
                }
                }
                this.setState(5755);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public profileDefinition(): ProfileDefinitionContext {
        let localctx = new ProfileDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 792, MySQLParser.RULE_profileDefinition);
        let _la: number;
        try {
            this.setState(5763);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.BLOCK_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5756);
                this.match(MySQLParser.BLOCK_SYMBOL);
                this.setState(5757);
                this.match(MySQLParser.IO_SYMBOL);
                }
                break;
            case MySQLParser.CONTEXT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5758);
                this.match(MySQLParser.CONTEXT_SYMBOL);
                this.setState(5759);
                this.match(MySQLParser.SWITCHES_SYMBOL);
                }
                break;
            case MySQLParser.PAGE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5760);
                this.match(MySQLParser.PAGE_SYMBOL);
                this.setState(5761);
                this.match(MySQLParser.FAULTS_SYMBOL);
                }
                break;
            case MySQLParser.ALL_SYMBOL:
            case MySQLParser.CPU_SYMBOL:
            case MySQLParser.IPC_SYMBOL:
            case MySQLParser.MEMORY_SYMBOL:
            case MySQLParser.SOURCE_SYMBOL:
            case MySQLParser.SWAPS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5762);
                _la = this.input().LA(1);
                if(!(_la === 10 || _la === 96 || _la === 256 || _la === 334 || _la === 522 || _la === 567)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public otherAdministrativeStatement(): OtherAdministrativeStatementContext {
        let localctx = new OtherAdministrativeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 794, MySQLParser.RULE_otherAdministrativeStatement);
        let _la: number;
        try {
            this.setState(5801);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.BINLOG_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5765);
                localctx._type_ = this.match(MySQLParser.BINLOG_SYMBOL);
                this.setState(5766);
                this.textLiteral();
                }
                break;
            case MySQLParser.CACHE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5767);
                localctx._type_ = this.match(MySQLParser.CACHE_SYMBOL);
                this.setState(5768);
                this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(5769);
                this.keyCacheListOrParts();
                this.setState(5770);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(5773);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 676, this.getContext())) {
                    case 1:
                        {
                        this.setState(5771);
                        this.identifier();
                        }
                        break;
                    case 2:
                        {
                        this.setState(5772);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.FLUSH_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5775);
                localctx._type_ = this.match(MySQLParser.FLUSH_SYMBOL);
                this.setState(5777);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284 || _la === 375) {
                    {
                    this.setState(5776);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(5788);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.TABLES_SYMBOL:
                case MySQLParser.TABLE_SYMBOL:
                    {
                    this.setState(5779);
                    this.flushTables();
                    }
                    break;
                case MySQLParser.BINARY_SYMBOL:
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.ERROR_SYMBOL:
                case MySQLParser.GENERAL_SYMBOL:
                case MySQLParser.HOSTS_SYMBOL:
                case MySQLParser.LOGS_SYMBOL:
                case MySQLParser.OPTIMIZER_COSTS_SYMBOL:
                case MySQLParser.PRIVILEGES_SYMBOL:
                case MySQLParser.RELAY_SYMBOL:
                case MySQLParser.SLOW_SYMBOL:
                case MySQLParser.STATUS_SYMBOL:
                case MySQLParser.USER_RESOURCES_SYMBOL:
                    {
                    this.setState(5780);
                    this.flushOption();
                    this.setState(5785);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(5781);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(5782);
                        this.flushOption();
                        }
                        }
                        this.setState(5787);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.KILL_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5790);
                localctx._type_ = this.match(MySQLParser.KILL_SYMBOL);
                this.setState(5792);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 680, this.getContext())) {
                    case 1:
                        {
                        this.setState(5791);
                        _la = this.input().LA(1);
                        if(!(_la === 84 || _la === 430)) {
                        this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                }
                this.setState(5794);
                this.expr(0);
                }
                break;
            case MySQLParser.LOAD_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(5795);
                localctx._type_ = this.match(MySQLParser.LOAD_SYMBOL);
                this.setState(5796);
                this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(5797);
                this.match(MySQLParser.INTO_SYMBOL);
                this.setState(5798);
                this.match(MySQLParser.CACHE_SYMBOL);
                this.setState(5799);
                this.preloadTail();
                }
                break;
            case MySQLParser.SHUTDOWN_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(5800);
                localctx._type_ = this.match(MySQLParser.SHUTDOWN_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyCacheListOrParts(): KeyCacheListOrPartsContext {
        let localctx = new KeyCacheListOrPartsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 796, MySQLParser.RULE_keyCacheListOrParts);
        try {
            this.setState(5805);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 682, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5803);
                    this.keyCacheList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5804);
                    this.assignToKeycachePartition();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyCacheList(): KeyCacheListContext {
        let localctx = new KeyCacheListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 798, MySQLParser.RULE_keyCacheList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5807);
            this.assignToKeycache();
            this.setState(5812);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(5808);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5809);
                this.assignToKeycache();
                }
                }
                this.setState(5814);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public assignToKeycache(): AssignToKeycacheContext {
        let localctx = new AssignToKeycacheContext(this.getContext(), this.getState());
        this.enterRule(localctx, 800, MySQLParser.RULE_assignToKeycache);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5815);
            this.tableRef();
            this.setState(5817);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 236 || _la === 265) {
                {
                this.setState(5816);
                this.cacheKeyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public assignToKeycachePartition(): AssignToKeycachePartitionContext {
        let localctx = new AssignToKeycachePartitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 802, MySQLParser.RULE_assignToKeycachePartition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5819);
            this.tableRef();
            this.setState(5820);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(5821);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(5822);
            this.allOrPartitionNameList();
            this.setState(5823);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(5825);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 236 || _la === 265) {
                {
                this.setState(5824);
                this.cacheKeyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cacheKeyList(): CacheKeyListContext {
        let localctx = new CacheKeyListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 804, MySQLParser.RULE_cacheKeyList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5827);
            this.keyOrIndex();
            this.setState(5828);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(5830);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 686, this.getContext())) {
                case 1:
                    {
                    this.setState(5829);
                    this.keyUsageList();
                    }
                    break;
            }
            this.setState(5832);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyUsageElement(): KeyUsageElementContext {
        let localctx = new KeyUsageElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 806, MySQLParser.RULE_keyUsageElement);
        try {
            this.setState(5836);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 687, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5834);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5835);
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyUsageList(): KeyUsageListContext {
        let localctx = new KeyUsageListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 808, MySQLParser.RULE_keyUsageList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5838);
            this.keyUsageElement();
            this.setState(5843);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(5839);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5840);
                this.keyUsageElement();
                }
                }
                this.setState(5845);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public flushOption(): FlushOptionContext {
        let localctx = new FlushOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 810, MySQLParser.RULE_flushOption);
        let _la: number;
        try {
            this.setState(5857);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.HOSTS_SYMBOL:
            case MySQLParser.PRIVILEGES_SYMBOL:
            case MySQLParser.STATUS_SYMBOL:
            case MySQLParser.USER_RESOURCES_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5846);
                localctx._option = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 225 || _la === 421 || _la === 547 || _la === 617)) {
                    localctx._option = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.ERROR_SYMBOL:
            case MySQLParser.GENERAL_SYMBOL:
            case MySQLParser.LOGS_SYMBOL:
            case MySQLParser.SLOW_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5848);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 32 || _la === 163 || _la === 165 || _la === 208 || _la === 515) {
                    {
                    this.setState(5847);
                    this.logType();
                    }
                }

                this.setState(5850);
                localctx._option = this.match(MySQLParser.LOGS_SYMBOL);
                }
                break;
            case MySQLParser.RELAY_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5851);
                localctx._option = this.match(MySQLParser.RELAY_SYMBOL);
                this.setState(5852);
                this.match(MySQLParser.LOGS_SYMBOL);
                this.setState(5854);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                    this.setState(5853);
                    this.channel();
                    }
                }

                }
                break;
            case MySQLParser.OPTIMIZER_COSTS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5856);
                localctx._option = this.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logType(): LogTypeContext {
        let localctx = new LogTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 812, MySQLParser.RULE_logType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5859);
            _la = this.input().LA(1);
            if(!(_la === 32 || _la === 163 || _la === 165 || _la === 208 || _la === 515)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public flushTables(): FlushTablesContext {
        let localctx = new FlushTablesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 814, MySQLParser.RULE_flushTables);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5861);
            _la = this.input().LA(1);
            if(!(_la === 571 || _la === 574)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5869);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 693, this.getContext())) {
                case 1:
                    {
                    this.setState(5862);
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.setState(5863);
                    this.match(MySQLParser.READ_SYMBOL);
                    this.setState(5864);
                    this.match(MySQLParser.LOCK_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(5865);
                    this.identifierList();
                    this.setState(5867);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 200 || _la === 645) {
                        {
                        this.setState(5866);
                        this.flushTablesOptions();
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public flushTablesOptions(): FlushTablesOptionsContext {
        let localctx = new FlushTablesOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 816, MySQLParser.RULE_flushTablesOptions);
        try {
            this.setState(5876);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5871);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(5872);
                this.match(MySQLParser.EXPORT_SYMBOL);
                }
                break;
            case MySQLParser.WITH_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5873);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(5874);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(5875);
                this.match(MySQLParser.LOCK_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public preloadTail(): PreloadTailContext {
        let localctx = new PreloadTailContext(this.getContext(), this.getState());
        this.enterRule(localctx, 818, MySQLParser.RULE_preloadTail);
        let _la: number;
        try {
            this.setState(5888);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 697, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5878);
                    this.tableRef();
                    this.setState(5879);
                    this.adminPartition();
                    this.setState(5881);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 236 || _la === 265) {
                        {
                        this.setState(5880);
                        this.cacheKeyList();
                        }
                    }

                    this.setState(5885);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 232) {
                        {
                        this.setState(5883);
                        this.match(MySQLParser.IGNORE_SYMBOL);
                        this.setState(5884);
                        this.match(MySQLParser.LEAVES_SYMBOL);
                        }
                    }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5887);
                    this.preloadList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public preloadList(): PreloadListContext {
        let localctx = new PreloadListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 820, MySQLParser.RULE_preloadList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5890);
            this.preloadKeys();
            this.setState(5895);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(5891);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5892);
                this.preloadKeys();
                }
                }
                this.setState(5897);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public preloadKeys(): PreloadKeysContext {
        let localctx = new PreloadKeysContext(this.getContext(), this.getState());
        this.enterRule(localctx, 822, MySQLParser.RULE_preloadKeys);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5898);
            this.tableRef();
            this.setState(5900);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 236 || _la === 265) {
                {
                this.setState(5899);
                this.cacheKeyList();
                }
            }

            this.setState(5904);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(5902);
                this.match(MySQLParser.IGNORE_SYMBOL);
                this.setState(5903);
                this.match(MySQLParser.LEAVES_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public adminPartition(): AdminPartitionContext {
        let localctx = new AdminPartitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 824, MySQLParser.RULE_adminPartition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5906);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(5907);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(5908);
            this.allOrPartitionNameList();
            this.setState(5909);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupManagement(): ResourceGroupManagementContext {
        let localctx = new ResourceGroupManagementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 826, MySQLParser.RULE_resourceGroupManagement);
        try {
            this.setState(5915);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CREATE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5911);
                this.createResourceGroup();
                }
                break;
            case MySQLParser.ALTER_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5912);
                this.alterResourceGroup();
                }
                break;
            case MySQLParser.SET_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5913);
                this.setResourceGroup();
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5914);
                this.dropResourceGroup();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createResourceGroup(): CreateResourceGroupContext {
        let localctx = new CreateResourceGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 828, MySQLParser.RULE_createResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5917);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5918);
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.setState(5919);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(5920);
            this.identifier();
            this.setState(5921);
            this.match(MySQLParser.TYPE_SYMBOL);
            this.setState(5923);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 750 || _la === 751) {
                {
                this.setState(5922);
                this.equal();
                }
            }

            this.setState(5925);
            _la = this.input().LA(1);
            if(!(_la === 618 || _la === 710)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5927);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 711) {
                {
                this.setState(5926);
                this.resourceGroupVcpuList();
                }
            }

            this.setState(5930);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 708) {
                {
                this.setState(5929);
                this.resourceGroupPriority();
                }
            }

            this.setState(5933);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 140 || _la === 156) {
                {
                this.setState(5932);
                this.resourceGroupEnableDisable();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
        let localctx = new ResourceGroupVcpuListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 830, MySQLParser.RULE_resourceGroupVcpuList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5935);
            this.match(MySQLParser.VCPU_SYMBOL);
            this.setState(5937);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 750 || _la === 751) {
                {
                this.setState(5936);
                this.equal();
                }
            }

            this.setState(5939);
            this.vcpuNumOrRange();
            this.setState(5946);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 747 || _la === 773) {
                {
                {
                this.setState(5941);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(5940);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(5943);
                this.vcpuNumOrRange();
                }
                }
                this.setState(5948);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public vcpuNumOrRange(): VcpuNumOrRangeContext {
        let localctx = new VcpuNumOrRangeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 832, MySQLParser.RULE_vcpuNumOrRange);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5949);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(5952);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 759) {
                {
                this.setState(5950);
                this.match(MySQLParser.MINUS_OPERATOR);
                this.setState(5951);
                this.match(MySQLParser.INT_NUMBER);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext {
        let localctx = new ResourceGroupPriorityContext(this.getContext(), this.getState());
        this.enterRule(localctx, 834, MySQLParser.RULE_resourceGroupPriority);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5954);
            this.match(MySQLParser.THREAD_PRIORITY_SYMBOL);
            this.setState(5956);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 750 || _la === 751) {
                {
                this.setState(5955);
                this.equal();
                }
            }

            this.setState(5958);
            this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
        let localctx = new ResourceGroupEnableDisableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 836, MySQLParser.RULE_resourceGroupEnableDisable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5960);
            _la = this.input().LA(1);
            if(!(_la === 140 || _la === 156)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterResourceGroup(): AlterResourceGroupContext {
        let localctx = new AlterResourceGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 838, MySQLParser.RULE_alterResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5962);
            this.match(MySQLParser.ALTER_SYMBOL);
            this.setState(5963);
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.setState(5964);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(5965);
            this.resourceGroupRef();
            this.setState(5967);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 711) {
                {
                this.setState(5966);
                this.resourceGroupVcpuList();
                }
            }

            this.setState(5970);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 708) {
                {
                this.setState(5969);
                this.resourceGroupPriority();
                }
            }

            this.setState(5973);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 140 || _la === 156) {
                {
                this.setState(5972);
                this.resourceGroupEnableDisable();
                }
            }

            this.setState(5976);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 198) {
                {
                this.setState(5975);
                this.match(MySQLParser.FORCE_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setResourceGroup(): SetResourceGroupContext {
        let localctx = new SetResourceGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 840, MySQLParser.RULE_setResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5978);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(5979);
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.setState(5980);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(5981);
            this.identifier();
            this.setState(5984);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 200) {
                {
                this.setState(5982);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(5983);
                this.threadIdList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public threadIdList(): ThreadIdListContext {
        let localctx = new ThreadIdListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 842, MySQLParser.RULE_threadIdList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5986);
            this.real_ulong_number();
            this.setState(5993);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 67108871) !== 0) || _la === 788) {
                {
                {
                this.setState(5988);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(5987);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(5990);
                this.real_ulong_number();
                }
                }
                this.setState(5995);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropResourceGroup(): DropResourceGroupContext {
        let localctx = new DropResourceGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 844, MySQLParser.RULE_dropResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5996);
            this.match(MySQLParser.DROP_SYMBOL);
            this.setState(5997);
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.setState(5998);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(5999);
            this.resourceGroupRef();
            this.setState(6001);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 198) {
                {
                this.setState(6000);
                this.match(MySQLParser.FORCE_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public utilityStatement(): UtilityStatementContext {
        let localctx = new UtilityStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 846, MySQLParser.RULE_utilityStatement);
        try {
            this.setState(6009);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 719, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6003);
                    this.describeStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6004);
                    this.explainStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6005);
                    this.helpCommand();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6006);
                    this.useCommand();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(6007);
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.setState(6008);
                    this.restartServer();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public describeStatement(): DescribeStatementContext {
        let localctx = new DescribeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 848, MySQLParser.RULE_describeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6011);
            _la = this.input().LA(1);
            if(!(_la === 134 || _la === 135 || _la === 178)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(6012);
            this.tableRef();
            this.setState(6015);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 720, this.getContext())) {
                case 1:
                    {
                    this.setState(6013);
                    this.textString();
                    }
                    break;
                case 2:
                    {
                    this.setState(6014);
                    this.columnRef();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public explainStatement(): ExplainStatementContext {
        let localctx = new ExplainStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 850, MySQLParser.RULE_explainStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6017);
            _la = this.input().LA(1);
            if(!(_la === 134 || _la === 135 || _la === 178)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(6029);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 721, this.getContext())) {
                case 1:
                    {
                    this.setState(6018);
                    this.match(MySQLParser.EXTENDED_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(6019);
                    this.match(MySQLParser.FORMAT_SYMBOL);
                    this.setState(6020);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(6021);
                    this.textOrIdentifier();
                    }
                    break;
                case 3:
                    {
                    this.setState(6022);
                    if (!(this.serverVersion >= 80018)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80018");
                    }
                    this.setState(6023);
                    this.match(MySQLParser.ANALYZE_SYMBOL);
                    }
                    break;
                case 4:
                    {
                    this.setState(6024);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(6025);
                    this.match(MySQLParser.ANALYZE_SYMBOL);
                    this.setState(6026);
                    this.match(MySQLParser.FORMAT_SYMBOL);
                    this.setState(6027);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(6028);
                    this.textOrIdentifier();
                    }
                    break;
            }
            this.setState(6031);
            this.explainableStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public explainableStatement(): ExplainableStatementContext {
        let localctx = new ExplainableStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 852, MySQLParser.RULE_explainableStatement);
        try {
            this.setState(6041);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 722, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6033);
                    this.selectStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6034);
                    this.deleteStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6035);
                    this.insertStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6036);
                    this.replaceStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(6037);
                    this.updateStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(6038);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(6039);
                    this.match(MySQLParser.CONNECTION_SYMBOL);
                    this.setState(6040);
                    this.real_ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public helpCommand(): HelpCommandContext {
        let localctx = new HelpCommandContext(this.getContext(), this.getState());
        this.enterRule(localctx, 854, MySQLParser.RULE_helpCommand);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6043);
            this.match(MySQLParser.HELP_SYMBOL);
            this.setState(6044);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public useCommand(): UseCommandContext {
        let localctx = new UseCommandContext(this.getContext(), this.getState());
        this.enterRule(localctx, 856, MySQLParser.RULE_useCommand);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6046);
            this.match(MySQLParser.USE_SYMBOL);
            this.setState(6047);
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public restartServer(): RestartServerContext {
        let localctx = new RestartServerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 858, MySQLParser.RULE_restartServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6049);
            this.match(MySQLParser.RESTART_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public expr(): ExprContext;
    public expr(_p: number): ExprContext;
    public expr(_p?: number): ExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        const _parentctx = this.getContext();
        const _parentState = this.getState();
        let localctx = new ExprContext(this.getContext(), _parentState);
        let _prevctx: ExprContext = localctx;
        const _startState = 860;
        this.enterRecursionRule(localctx, 860, MySQLParser.RULE_expr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6062);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 725, this.getContext())) {
                case 1:
                    {
                    localctx = new ExprIsContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;

                    this.setState(6052);
                    this.boolPri(0);
                    this.setState(6058);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 724, this.getContext())) {
                        case 1:
                            {
                            this.setState(6053);
                            this.match(MySQLParser.IS_SYMBOL);
                            this.setState(6055);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 371 || _la === 745) {
                                {
                                this.setState(6054);
                                this.notRule();
                                }
                            }

                            this.setState(6057);
                            (localctx as ExprIsContext)._type_ = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 183 || _la === 596 || _la === 610)) {
                                (localctx as ExprIsContext)._type_ = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    localctx = new ExprNotContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6060);
                    this.match(MySQLParser.NOT_SYMBOL);
                    this.setState(6061);
                    this.expr(4);
                    }
                    break;
            }
            this.getContext()?.setStop(this.input().LT(-1));
            this.setState(6075);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 727, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this.getParseListeners() != null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    {
                    this.setState(6073);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 726, this.getContext())) {
                        case 1:
                            {
                            localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                            this.setState(6064);
                            if (!(this.precpred(this.getContext(), 3))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 3)");
                            }
                            this.setState(6065);
                            (localctx as ExprAndContext)._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 15 || _la === 767)) {
                                (localctx as ExprAndContext)._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6066);
                            this.expr(4);
                            }
                            break;
                        case 2:
                            {
                            localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                            this.setState(6067);
                            if (!(this.precpred(this.getContext(), 2))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 2)");
                            }
                            this.setState(6068);
                            this.match(MySQLParser.XOR_SYMBOL);
                            this.setState(6069);
                            this.expr(3);
                            }
                            break;
                        case 3:
                            {
                            localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                            this.setState(6070);
                            if (!(this.precpred(this.getContext(), 1))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 1)");
                            }
                            this.setState(6071);
                            (localctx as ExprOrContext)._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 394 || _la === 770)) {
                                (localctx as ExprOrContext)._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6072);
                            this.expr(2);
                            }
                            break;
                    }
                    }
                }
                this.setState(6077);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 727, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }

    public boolPri(): BoolPriContext;
    public boolPri(_p: number): BoolPriContext;
    public boolPri(_p?: number): BoolPriContext {
        if (_p === undefined) {
            _p = 0;
        }

        const _parentctx = this.getContext();
        const _parentState = this.getState();
        let localctx = new BoolPriContext(this.getContext(), _parentState);
        let _prevctx: BoolPriContext = localctx;
        const _startState = 862;
        this.enterRecursionRule(localctx, 862, MySQLParser.RULE_boolPri, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            {
            localctx = new PrimaryExprPredicateContext(localctx);
            this.setContext(localctx);
            _prevctx = localctx;

            this.setState(6079);
            this.predicate();
            }
            this.getContext()?.setStop(this.input().LT(-1));
            this.setState(6098);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 730, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this.getParseListeners() != null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    {
                    this.setState(6096);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 729, this.getContext())) {
                        case 1:
                            {
                            localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                            this.setState(6081);
                            if (!(this.precpred(this.getContext(), 3))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 3)");
                            }
                            this.setState(6082);
                            this.match(MySQLParser.IS_SYMBOL);
                            this.setState(6084);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 371 || _la === 745) {
                                {
                                this.setState(6083);
                                this.notRule();
                                }
                            }

                            this.setState(6086);
                            this.match(MySQLParser.NULL_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                            this.setState(6087);
                            if (!(this.precpred(this.getContext(), 2))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 2)");
                            }
                            this.setState(6088);
                            this.compOp();
                            this.setState(6089);
                            this.predicate();
                            }
                            break;
                        case 3:
                            {
                            localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                            this.setState(6091);
                            if (!(this.precpred(this.getContext(), 1))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 1)");
                            }
                            this.setState(6092);
                            this.compOp();
                            this.setState(6093);
                            _la = this.input().LA(1);
                            if(!(_la === 10 || _la === 16)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6094);
                            this.subquery();
                            }
                            break;
                    }
                    }
                }
                this.setState(6100);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 730, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    public compOp(): CompOpContext {
        let localctx = new CompOpContext(this.getContext(), this.getState());
        this.enterRule(localctx, 864, MySQLParser.RULE_compOp);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6101);
            _la = this.input().LA(1);
            if(!(((((_la - 750)) & ~0x1F) === 0 && ((1 << (_la - 750)) & 253) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public predicate(): PredicateContext {
        let localctx = new PredicateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 866, MySQLParser.RULE_predicate);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6103);
            this.bitExpr(0);
            this.setState(6117);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 733, this.getContext())) {
                case 1:
                    {
                    this.setState(6105);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 371 || _la === 745) {
                        {
                        this.setState(6104);
                        this.notRule();
                        }
                    }

                    this.setState(6107);
                    this.predicateOperations();
                    }
                    break;
                case 2:
                    {
                    this.setState(6108);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(6109);
                    this.match(MySQLParser.MEMBER_SYMBOL);
                    this.setState(6111);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 668) {
                        {
                        this.setState(6110);
                        this.match(MySQLParser.OF_SYMBOL);
                        }
                    }

                    this.setState(6113);
                    this.simpleExprWithParentheses();
                    }
                    break;
                case 3:
                    {
                    this.setState(6114);
                    this.match(MySQLParser.SOUNDS_SYMBOL);
                    this.setState(6115);
                    this.match(MySQLParser.LIKE_SYMBOL);
                    this.setState(6116);
                    this.bitExpr(0);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public predicateOperations(): PredicateOperationsContext {
        let localctx = new PredicateOperationsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 868, MySQLParser.RULE_predicateOperations);
        try {
            this.setState(6140);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.IN_SYMBOL:
                localctx = new PredicateExprInContext(localctx);
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6119);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(6125);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 734, this.getContext())) {
                    case 1:
                        {
                        this.setState(6120);
                        this.subquery();
                        }
                        break;
                    case 2:
                        {
                        this.setState(6121);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6122);
                        this.exprList();
                        this.setState(6123);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.BETWEEN_SYMBOL:
                localctx = new PredicateExprBetweenContext(localctx);
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6127);
                this.match(MySQLParser.BETWEEN_SYMBOL);
                this.setState(6128);
                this.bitExpr(0);
                this.setState(6129);
                this.match(MySQLParser.AND_SYMBOL);
                this.setState(6130);
                this.predicate();
                }
                break;
            case MySQLParser.LIKE_SYMBOL:
                localctx = new PredicateExprLikeContext(localctx);
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(6132);
                this.match(MySQLParser.LIKE_SYMBOL);
                this.setState(6133);
                this.simpleExpr(0);
                this.setState(6136);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 735, this.getContext())) {
                    case 1:
                        {
                        this.setState(6134);
                        this.match(MySQLParser.ESCAPE_SYMBOL);
                        this.setState(6135);
                        this.simpleExpr(0);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.REGEXP_SYMBOL:
                localctx = new PredicateExprRegexContext(localctx);
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(6138);
                this.match(MySQLParser.REGEXP_SYMBOL);
                this.setState(6139);
                this.bitExpr(0);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public bitExpr(): BitExprContext;
    public bitExpr(_p: number): BitExprContext;
    public bitExpr(_p?: number): BitExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        const _parentctx = this.getContext();
        const _parentState = this.getState();
        let localctx = new BitExprContext(this.getContext(), _parentState);
        let _prevctx: BitExprContext = localctx;
        const _startState = 870;
        this.enterRecursionRule(localctx, 870, MySQLParser.RULE_bitExpr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            {
            this.setState(6143);
            this.simpleExpr(0);
            }
            this.getContext()?.setStop(this.input().LT(-1));
            this.setState(6171);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 738, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this.getParseListeners() != null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    {
                    this.setState(6169);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 737, this.getContext())) {
                        case 1:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6145);
                            if (!(this.precpred(this.getContext(), 7))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 7)");
                            }
                            this.setState(6146);
                            localctx._op = this.match(MySQLParser.BITWISE_XOR_OPERATOR);
                            this.setState(6147);
                            this.bitExpr(8);
                            }
                            break;
                        case 2:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6148);
                            if (!(this.precpred(this.getContext(), 6))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 6)");
                            }
                            this.setState(6149);
                            localctx._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 145 || _la === 349 || ((((_la - 760)) & ~0x1F) === 0 && ((1 << (_la - 760)) & 7) !== 0))) {
                                localctx._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6150);
                            this.bitExpr(7);
                            }
                            break;
                        case 3:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6151);
                            if (!(this.precpred(this.getContext(), 5))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 5)");
                            }
                            this.setState(6152);
                            localctx._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 758 || _la === 759)) {
                                localctx._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6153);
                            this.bitExpr(6);
                            }
                            break;
                        case 4:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6154);
                            if (!(this.precpred(this.getContext(), 3))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 3)");
                            }
                            this.setState(6155);
                            localctx._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 765 || _la === 766)) {
                                localctx._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6156);
                            this.bitExpr(4);
                            }
                            break;
                        case 5:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6157);
                            if (!(this.precpred(this.getContext(), 2))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 2)");
                            }
                            this.setState(6158);
                            localctx._op = this.match(MySQLParser.BITWISE_AND_OPERATOR);
                            this.setState(6159);
                            this.bitExpr(3);
                            }
                            break;
                        case 6:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6160);
                            if (!(this.precpred(this.getContext(), 1))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 1)");
                            }
                            this.setState(6161);
                            localctx._op = this.match(MySQLParser.BITWISE_OR_OPERATOR);
                            this.setState(6162);
                            this.bitExpr(2);
                            }
                            break;
                        case 7:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6163);
                            if (!(this.precpred(this.getContext(), 4))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 4)");
                            }
                            this.setState(6164);
                            localctx._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 758 || _la === 759)) {
                                localctx._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6165);
                            this.match(MySQLParser.INTERVAL_SYMBOL);
                            this.setState(6166);
                            this.expr(0);
                            this.setState(6167);
                            this.interval();
                            }
                            break;
                    }
                    }
                }
                this.setState(6173);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 738, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }

    public simpleExpr(): SimpleExprContext;
    public simpleExpr(_p: number): SimpleExprContext;
    public simpleExpr(_p?: number): SimpleExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        const _parentctx = this.getContext();
        const _parentState = this.getState();
        let localctx = new SimpleExprContext(this.getContext(), _parentState);
        let _prevctx: SimpleExprContext = localctx;
        const _startState = 872;
        this.enterRecursionRule(localctx, 872, MySQLParser.RULE_simpleExpr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6296);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 749, this.getContext())) {
                case 1:
                    {
                    localctx = new SimpleExprColumnRefContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;

                    this.setState(6175);
                    this.columnRef();
                    this.setState(6177);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 739, this.getContext())) {
                        case 1:
                            {
                            this.setState(6176);
                            this.jsonOperator();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    localctx = new SimpleExprRuntimeFunctionContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6179);
                    this.runtimeFunctionCall();
                    }
                    break;
                case 3:
                    {
                    localctx = new SimpleExprFunctionContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6180);
                    this.functionCall();
                    }
                    break;
                case 4:
                    {
                    localctx = new SimpleExprLiteralContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6181);
                    this.literalOrNull();
                    }
                    break;
                case 5:
                    {
                    localctx = new SimpleExprParamMarkerContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6182);
                    this.match(MySQLParser.PARAM_MARKER);
                    }
                    break;
                case 6:
                    {
                    localctx = new SimpleExpressionRValueContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6183);
                    this.rvalueSystemOrUserVariable();
                    }
                    break;
                case 7:
                    {
                    localctx = new SimpleExprUserVariableAssignmentContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6184);
                    this.inExpressionUserVariableAssignment();
                    }
                    break;
                case 8:
                    {
                    localctx = new SimpleExprSumContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6185);
                    this.sumExpr();
                    }
                    break;
                case 9:
                    {
                    localctx = new SimpleExprGroupingOperationContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6186);
                    this.groupingOperation();
                    }
                    break;
                case 10:
                    {
                    localctx = new SimpleExprWindowingFunctionContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6187);
                    this.windowFunctionCall();
                    }
                    break;
                case 11:
                    {
                    localctx = new SimpleExprUnaryContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6188);
                    (localctx as SimpleExprUnaryContext)._op = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(((((_la - 758)) & ~0x1F) === 0 && ((1 << (_la - 758)) & 67) !== 0))) {
                        (localctx as SimpleExprUnaryContext)._op = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6189);
                    this.simpleExpr(15);
                    }
                    break;
                case 12:
                    {
                    localctx = new SimpleExprNotContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6190);
                    this.not2Rule();
                    this.setState(6191);
                    this.simpleExpr(14);
                    }
                    break;
                case 13:
                    {
                    localctx = new SimpleExprListContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6194);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 487) {
                        {
                        this.setState(6193);
                        this.match(MySQLParser.ROW_SYMBOL);
                        }
                    }

                    this.setState(6196);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6197);
                    this.exprList();
                    this.setState(6198);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 14:
                    {
                    localctx = new SimpleExprSubQueryContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6201);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 174) {
                        {
                        this.setState(6200);
                        this.match(MySQLParser.EXISTS_SYMBOL);
                        }
                    }

                    this.setState(6203);
                    this.subquery();
                    }
                    break;
                case 15:
                    {
                    localctx = new SimpleExprOdbcContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6204);
                    this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                    this.setState(6205);
                    this.identifier();
                    this.setState(6206);
                    this.expr(0);
                    this.setState(6207);
                    this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                    }
                    break;
                case 16:
                    {
                    localctx = new SimpleExprMatchContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6209);
                    this.match(MySQLParser.MATCH_SYMBOL);
                    this.setState(6210);
                    this.identListArg();
                    this.setState(6211);
                    this.match(MySQLParser.AGAINST_SYMBOL);
                    this.setState(6212);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6213);
                    this.bitExpr(0);
                    this.setState(6215);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 251 || _la === 645) {
                        {
                        this.setState(6214);
                        this.fulltextOptions();
                        }
                    }

                    this.setState(6217);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 17:
                    {
                    localctx = new SimpleExprBinaryContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6219);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(6220);
                    this.simpleExpr(9);
                    }
                    break;
                case 18:
                    {
                    localctx = new SimpleExprCastContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6221);
                    this.match(MySQLParser.CAST_SYMBOL);
                    this.setState(6222);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6223);
                    this.expr(0);
                    this.setState(6226);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 21) {
                        {
                        this.setState(6224);
                        this.match(MySQLParser.AT_SYMBOL);
                        this.setState(6225);
                        this.match(MySQLParser.LOCAL_SYMBOL);
                        }
                    }

                    this.setState(6228);
                    this.match(MySQLParser.AS_SYMBOL);
                    this.setState(6229);
                    this.castType();
                    this.setState(6231);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 744, this.getContext())) {
                        case 1:
                            {
                            this.setState(6230);
                            this.arrayCast();
                            }
                            break;
                    }
                    this.setState(6233);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 19:
                    {
                    localctx = new SimpleExprCastTimeContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6235);
                    this.match(MySQLParser.CAST_SYMBOL);
                    this.setState(6236);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6237);
                    this.expr(0);
                    this.setState(6238);
                    this.match(MySQLParser.AT_SYMBOL);
                    this.setState(6239);
                    this.match(MySQLParser.TIME_SYMBOL);
                    this.setState(6240);
                    this.match(MySQLParser.ZONE_SYMBOL);
                    this.setState(6242);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 745, this.getContext())) {
                        case 1:
                            {
                            this.setState(6241);
                            this.match(MySQLParser.INTERVAL_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6244);
                    this.textStringLiteral();
                    this.setState(6245);
                    this.match(MySQLParser.AS_SYMBOL);
                    this.setState(6246);
                    this.match(MySQLParser.DATETIME_SYMBOL);
                    this.setState(6247);
                    this.typeDatetimePrecision();
                    this.setState(6248);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 20:
                    {
                    localctx = new SimpleExprCaseContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6250);
                    this.match(MySQLParser.CASE_SYMBOL);
                    this.setState(6252);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 746, this.getContext())) {
                        case 1:
                            {
                            this.setState(6251);
                            this.expr(0);
                            }
                            break;
                    }
                    this.setState(6257);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    do {
                        {
                        {
                        this.setState(6254);
                        this.whenExpression();
                        this.setState(6255);
                        this.thenExpression();
                        }
                        }
                        this.setState(6259);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    } while (_la === 642);
                    this.setState(6262);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 154) {
                        {
                        this.setState(6261);
                        this.elseExpression();
                        }
                    }

                    this.setState(6264);
                    this.match(MySQLParser.END_SYMBOL);
                    }
                    break;
                case 21:
                    {
                    localctx = new SimpleExprConvertContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6266);
                    this.match(MySQLParser.CONVERT_SYMBOL);
                    this.setState(6267);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6268);
                    this.expr(0);
                    this.setState(6269);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6270);
                    this.castType();
                    this.setState(6271);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 22:
                    {
                    localctx = new SimpleExprConvertUsingContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6273);
                    this.match(MySQLParser.CONVERT_SYMBOL);
                    this.setState(6274);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6275);
                    this.expr(0);
                    this.setState(6276);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(6277);
                    this.charsetName();
                    this.setState(6278);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 23:
                    {
                    localctx = new SimpleExprDefaultContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6280);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(6281);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6282);
                    this.simpleIdentifier();
                    this.setState(6283);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 24:
                    {
                    localctx = new SimpleExprValuesContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6285);
                    this.match(MySQLParser.VALUES_SYMBOL);
                    this.setState(6286);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6287);
                    this.simpleIdentifier();
                    this.setState(6288);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 25:
                    {
                    localctx = new SimpleExprIntervalContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6290);
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.setState(6291);
                    this.expr(0);
                    this.setState(6292);
                    this.interval();
                    this.setState(6293);
                    this.match(MySQLParser.PLUS_OPERATOR);
                    this.setState(6294);
                    this.expr(0);
                    }
                    break;
            }
            this.getContext()?.setStop(this.input().LT(-1));
            this.setState(6306);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 751, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this.getParseListeners() != null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    {
                    this.setState(6304);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 750, this.getContext())) {
                        case 1:
                            {
                            localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
                            this.setState(6298);
                            if (!(this.precpred(this.getContext(), 16))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 16)");
                            }
                            this.setState(6299);
                            this.match(MySQLParser.CONCAT_PIPES_SYMBOL);
                            this.setState(6300);
                            this.simpleExpr(17);
                            }
                            break;
                        case 2:
                            {
                            localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
                            this.setState(6301);
                            if (!(this.precpred(this.getContext(), 24))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 24)");
                            }
                            this.setState(6302);
                            this.match(MySQLParser.COLLATE_SYMBOL);
                            this.setState(6303);
                            this.textOrIdentifier();
                            }
                            break;
                    }
                    }
                }
                this.setState(6308);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 751, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    public arrayCast(): ArrayCastContext {
        let localctx = new ArrayCastContext(this.getContext(), this.getState());
        this.enterRule(localctx, 874, MySQLParser.RULE_arrayCast);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6309);
            if (!(this.serverVersion >= 80017)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80017");
            }
            this.setState(6310);
            this.match(MySQLParser.ARRAY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jsonOperator(): JsonOperatorContext {
        let localctx = new JsonOperatorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 876, MySQLParser.RULE_jsonOperator);
        try {
            this.setState(6316);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.JSON_SEPARATOR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6312);
                this.match(MySQLParser.JSON_SEPARATOR_SYMBOL);
                this.setState(6313);
                this.textStringLiteral();
                }
                break;
            case MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6314);
                this.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
                this.setState(6315);
                this.textStringLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sumExpr(): SumExprContext {
        let localctx = new SumExprContext(this.getContext(), this.getState());
        this.enterRule(localctx, 878, MySQLParser.RULE_sumExpr);
        let _la: number;
        try {
            this.setState(6403);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 769, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6318);
                    localctx._name = this.match(MySQLParser.AVG_SYMBOL);
                    this.setState(6319);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6321);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 753, this.getContext())) {
                        case 1:
                            {
                            this.setState(6320);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6323);
                    this.inSumExpr();
                    this.setState(6324);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6326);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 754, this.getContext())) {
                        case 1:
                            {
                            this.setState(6325);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6328);
                    localctx._name = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 11) !== 0))) {
                        localctx._name = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6329);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6330);
                    this.inSumExpr();
                    this.setState(6331);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6333);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 755, this.getContext())) {
                        case 1:
                            {
                            this.setState(6332);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6335);
                    this.jsonFunction();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6336);
                    localctx._name = this.match(MySQLParser.ST_COLLECT_SYMBOL);
                    this.setState(6337);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6339);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 756, this.getContext())) {
                        case 1:
                            {
                            this.setState(6338);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6341);
                    this.inSumExpr();
                    this.setState(6342);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6344);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 757, this.getContext())) {
                        case 1:
                            {
                            this.setState(6343);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(6346);
                    localctx._name = this.match(MySQLParser.COUNT_SYMBOL);
                    this.setState(6347);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6355);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 759, this.getContext())) {
                        case 1:
                            {
                            this.setState(6349);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 10) {
                                {
                                this.setState(6348);
                                this.match(MySQLParser.ALL_SYMBOL);
                                }
                            }

                            this.setState(6351);
                            this.match(MySQLParser.MULT_OPERATOR);
                            }
                            break;
                        case 2:
                            {
                            this.setState(6352);
                            this.inSumExpr();
                            }
                            break;
                        case 3:
                            {
                            this.setState(6353);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            this.setState(6354);
                            this.exprList();
                            }
                            break;
                    }
                    this.setState(6357);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6359);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 760, this.getContext())) {
                        case 1:
                            {
                            this.setState(6358);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(6361);
                    localctx._name = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 326 || _la === 345)) {
                        localctx._name = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6362);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6364);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 761, this.getContext())) {
                        case 1:
                            {
                            this.setState(6363);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6366);
                    this.inSumExpr();
                    this.setState(6367);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6369);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 762, this.getContext())) {
                        case 1:
                            {
                            this.setState(6368);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(6371);
                    localctx._name = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(((((_la - 548)) & ~0x1F) === 0 && ((1 << (_la - 548)) & 65545) !== 0) || _la === 632 || _la === 635)) {
                        localctx._name = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6372);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6373);
                    this.inSumExpr();
                    this.setState(6374);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6376);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 763, this.getContext())) {
                        case 1:
                            {
                            this.setState(6375);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(6378);
                    localctx._name = this.match(MySQLParser.SUM_SYMBOL);
                    this.setState(6379);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6380);
                    this.match(MySQLParser.DISTINCT_SYMBOL);
                    this.setState(6381);
                    this.inSumExpr();
                    this.setState(6382);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6384);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 764, this.getContext())) {
                        case 1:
                            {
                            this.setState(6383);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(6386);
                    localctx._name = this.match(MySQLParser.GROUP_CONCAT_SYMBOL);
                    this.setState(6387);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6389);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 765, this.getContext())) {
                        case 1:
                            {
                            this.setState(6388);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6391);
                    this.exprList();
                    this.setState(6393);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 393) {
                        {
                        this.setState(6392);
                        this.orderClause();
                        }
                    }

                    this.setState(6397);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 499) {
                        {
                        this.setState(6395);
                        this.match(MySQLParser.SEPARATOR_SYMBOL);
                        this.setState(6396);
                        this.textString();
                        }
                    }

                    this.setState(6399);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6401);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 768, this.getContext())) {
                        case 1:
                            {
                            this.setState(6400);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupingOperation(): GroupingOperationContext {
        let localctx = new GroupingOperationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 880, MySQLParser.RULE_groupingOperation);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6405);
            this.match(MySQLParser.GROUPING_SYMBOL);
            this.setState(6406);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6407);
            this.exprList();
            this.setState(6408);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFunctionCall(): WindowFunctionCallContext {
        let localctx = new WindowFunctionCallContext(this.getContext(), this.getState());
        this.enterRule(localctx, 882, MySQLParser.RULE_windowFunctionCall);
        let _la: number;
        try {
            this.setState(6459);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CUME_DIST_SYMBOL:
            case MySQLParser.DENSE_RANK_SYMBOL:
            case MySQLParser.PERCENT_RANK_SYMBOL:
            case MySQLParser.RANK_SYMBOL:
            case MySQLParser.ROW_NUMBER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6410);
                _la = this.input().LA(1);
                if(!(((((_la - 678)) & ~0x1F) === 0 && ((1 << (_la - 678)) & 344067) !== 0))) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6411);
                this.parentheses();
                this.setState(6412);
                this.windowingClause();
                }
                break;
            case MySQLParser.NTILE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6414);
                this.match(MySQLParser.NTILE_SYMBOL);
                this.setState(6421);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 770, this.getContext())) {
                    case 1:
                        {
                        this.setState(6415);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6416);
                        this.stableInteger();
                        this.setState(6417);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                        this.setState(6419);
                        if (!(this.serverVersion < 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80024");
                        }
                        this.setState(6420);
                        this.simpleExprWithParentheses();
                        }
                        break;
                }
                this.setState(6423);
                this.windowingClause();
                }
                break;
            case MySQLParser.LAG_SYMBOL:
            case MySQLParser.LEAD_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(6425);
                _la = this.input().LA(1);
                if(!(_la === 684 || _la === 686)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6426);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6427);
                this.expr(0);
                this.setState(6429);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(6428);
                    this.leadLagInfo();
                    }
                }

                this.setState(6431);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(6433);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232 || _la === 695) {
                    {
                    this.setState(6432);
                    this.nullTreatment();
                    }
                }

                this.setState(6435);
                this.windowingClause();
                }
                break;
            case MySQLParser.FIRST_VALUE_SYMBOL:
            case MySQLParser.LAST_VALUE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(6437);
                _la = this.input().LA(1);
                if(!(_la === 681 || _la === 685)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6438);
                this.exprWithParentheses();
                this.setState(6440);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232 || _la === 695) {
                    {
                    this.setState(6439);
                    this.nullTreatment();
                    }
                }

                this.setState(6442);
                this.windowingClause();
                }
                break;
            case MySQLParser.NTH_VALUE_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(6444);
                this.match(MySQLParser.NTH_VALUE_SYMBOL);
                this.setState(6445);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6446);
                this.expr(0);
                this.setState(6447);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6448);
                this.simpleExpr(0);
                this.setState(6449);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(6452);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203) {
                    {
                    this.setState(6450);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(6451);
                    _la = this.input().LA(1);
                    if(!(_la === 191 || _la === 268)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.setState(6455);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232 || _la === 695) {
                    {
                    this.setState(6454);
                    this.nullTreatment();
                    }
                }

                this.setState(6457);
                this.windowingClause();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowingClause(): WindowingClauseContext {
        let localctx = new WindowingClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 884, MySQLParser.RULE_windowingClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6461);
            this.match(MySQLParser.OVER_SYMBOL);
            this.setState(6464);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 777, this.getContext())) {
                case 1:
                    {
                    this.setState(6462);
                    this.windowName();
                    }
                    break;
                case 2:
                    {
                    this.setState(6463);
                    this.windowSpec();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public leadLagInfo(): LeadLagInfoContext {
        let localctx = new LeadLagInfoContext(this.getContext(), this.getState());
        this.enterRule(localctx, 886, MySQLParser.RULE_leadLagInfo);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6466);
            this.match(MySQLParser.COMMA_SYMBOL);
            this.setState(6471);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 778, this.getContext())) {
                case 1:
                    {
                    this.setState(6467);
                    this.ulonglong_number();
                    }
                    break;
                case 2:
                    {
                    this.setState(6468);
                    this.match(MySQLParser.PARAM_MARKER);
                    }
                    break;
                case 3:
                    {
                    this.setState(6469);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(6470);
                    this.stableInteger();
                    }
                    break;
            }
            this.setState(6475);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 773) {
                {
                this.setState(6473);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6474);
                this.expr(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public stableInteger(): StableIntegerContext {
        let localctx = new StableIntegerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 888, MySQLParser.RULE_stableInteger);
        try {
            this.setState(6479);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 780, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6477);
                    this.int64Literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6478);
                    this.paramOrVar();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public paramOrVar(): ParamOrVarContext {
        let localctx = new ParamOrVarContext(this.getContext(), this.getState());
        this.enterRule(localctx, 890, MySQLParser.RULE_paramOrVar);
        try {
            this.setState(6485);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 781, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6481);
                    this.match(MySQLParser.PARAM_MARKER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6482);
                    this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6483);
                    this.match(MySQLParser.AT_SIGN_SYMBOL);
                    this.setState(6484);
                    this.textOrIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nullTreatment(): NullTreatmentContext {
        let localctx = new NullTreatmentContext(this.getContext(), this.getState());
        this.enterRule(localctx, 892, MySQLParser.RULE_nullTreatment);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6487);
            _la = this.input().LA(1);
            if(!(_la === 232 || _la === 695)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(6488);
            this.match(MySQLParser.NULLS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jsonFunction(): JsonFunctionContext {
        let localctx = new JsonFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 894, MySQLParser.RULE_jsonFunction);
        try {
            this.setState(6506);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.JSON_ARRAYAGG_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6490);
                this.match(MySQLParser.JSON_ARRAYAGG_SYMBOL);
                this.setState(6491);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6492);
                this.inSumExpr();
                this.setState(6493);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(6495);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 782, this.getContext())) {
                    case 1:
                        {
                        this.setState(6494);
                        this.windowingClause();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.JSON_OBJECTAGG_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6497);
                this.match(MySQLParser.JSON_OBJECTAGG_SYMBOL);
                this.setState(6498);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6499);
                this.inSumExpr();
                this.setState(6500);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6501);
                this.inSumExpr();
                this.setState(6502);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(6504);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 783, this.getContext())) {
                    case 1:
                        {
                        this.setState(6503);
                        this.windowingClause();
                        }
                        break;
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public inSumExpr(): InSumExprContext {
        let localctx = new InSumExprContext(this.getContext(), this.getState());
        this.enterRule(localctx, 896, MySQLParser.RULE_inSumExpr);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6509);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 785, this.getContext())) {
                case 1:
                    {
                    this.setState(6508);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
            }
            this.setState(6511);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identListArg(): IdentListArgContext {
        let localctx = new IdentListArgContext(this.getContext(), this.getState());
        this.enterRule(localctx, 898, MySQLParser.RULE_identListArg);
        try {
            this.setState(6518);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 786, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6513);
                    this.identList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6514);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6515);
                    this.identList();
                    this.setState(6516);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identList(): IdentListContext {
        let localctx = new IdentListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 900, MySQLParser.RULE_identList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6520);
            this.simpleIdentifier();
            this.setState(6525);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(6521);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6522);
                this.simpleIdentifier();
                }
                }
                this.setState(6527);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fulltextOptions(): FulltextOptionsContext {
        let localctx = new FulltextOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 902, MySQLParser.RULE_fulltextOptions);
        let _la: number;
        try {
            this.setState(6543);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 789, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6528);
                    this.match(MySQLParser.IN_SYMBOL);
                    this.setState(6529);
                    this.match(MySQLParser.BOOLEAN_SYMBOL);
                    this.setState(6530);
                    this.match(MySQLParser.MODE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6531);
                    this.match(MySQLParser.IN_SYMBOL);
                    this.setState(6532);
                    this.match(MySQLParser.NATURAL_SYMBOL);
                    this.setState(6533);
                    this.match(MySQLParser.LANGUAGE_SYMBOL);
                    this.setState(6534);
                    this.match(MySQLParser.MODE_SYMBOL);
                    this.setState(6538);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 645) {
                        {
                        this.setState(6535);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(6536);
                        this.match(MySQLParser.QUERY_SYMBOL);
                        this.setState(6537);
                        this.match(MySQLParser.EXPANSION_SYMBOL);
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6540);
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.setState(6541);
                    this.match(MySQLParser.QUERY_SYMBOL);
                    this.setState(6542);
                    this.match(MySQLParser.EXPANSION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public runtimeFunctionCall(): RuntimeFunctionCallContext {
        let localctx = new RuntimeFunctionCallContext(this.getContext(), this.getState());
        this.enterRule(localctx, 904, MySQLParser.RULE_runtimeFunctionCall);
        let _la: number;
        try {
            this.setState(6818);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 807, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6545);
                    this.match(MySQLParser.CHAR_SYMBOL);
                    this.setState(6546);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6547);
                    this.exprList();
                    this.setState(6550);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 621) {
                        {
                        this.setState(6548);
                        this.match(MySQLParser.USING_SYMBOL);
                        this.setState(6549);
                        this.charsetName();
                        }
                    }

                    this.setState(6552);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6554);
                    this.match(MySQLParser.CURRENT_USER_SYMBOL);
                    this.setState(6556);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 791, this.getContext())) {
                        case 1:
                            {
                            this.setState(6555);
                            this.parentheses();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6558);
                    this.match(MySQLParser.DATE_SYMBOL);
                    this.setState(6559);
                    this.exprWithParentheses();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6560);
                    this.match(MySQLParser.DAY_SYMBOL);
                    this.setState(6561);
                    this.exprWithParentheses();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(6562);
                    this.match(MySQLParser.HOUR_SYMBOL);
                    this.setState(6563);
                    this.exprWithParentheses();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(6564);
                    this.match(MySQLParser.INSERT_SYMBOL);
                    this.setState(6565);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6566);
                    this.expr(0);
                    this.setState(6567);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6568);
                    this.expr(0);
                    this.setState(6569);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6570);
                    this.expr(0);
                    this.setState(6571);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6572);
                    this.expr(0);
                    this.setState(6573);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(6575);
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.setState(6576);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6577);
                    this.expr(0);
                    this.setState(6580);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    do {
                        {
                        {
                        this.setState(6578);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6579);
                        this.expr(0);
                        }
                        }
                        this.setState(6582);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    } while (_la === 773);
                    this.setState(6584);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(6586);
                    this.match(MySQLParser.JSON_VALUE_SYMBOL);
                    this.setState(6587);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6588);
                    this.simpleExpr(0);
                    this.setState(6589);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6590);
                    this.textLiteral();
                    this.setState(6592);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 794) {
                        {
                        this.setState(6591);
                        this.returningType();
                        }
                    }

                    this.setState(6594);
                    this.onEmptyOrError();
                    this.setState(6595);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(6597);
                    this.match(MySQLParser.LEFT_SYMBOL);
                    this.setState(6598);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6599);
                    this.expr(0);
                    this.setState(6600);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6601);
                    this.expr(0);
                    this.setState(6602);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(6604);
                    this.match(MySQLParser.MINUTE_SYMBOL);
                    this.setState(6605);
                    this.exprWithParentheses();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(6606);
                    this.match(MySQLParser.MONTH_SYMBOL);
                    this.setState(6607);
                    this.exprWithParentheses();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(6608);
                    this.match(MySQLParser.RIGHT_SYMBOL);
                    this.setState(6609);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6610);
                    this.expr(0);
                    this.setState(6611);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6612);
                    this.expr(0);
                    this.setState(6613);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(6615);
                    this.match(MySQLParser.SECOND_SYMBOL);
                    this.setState(6616);
                    this.exprWithParentheses();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(6617);
                    this.match(MySQLParser.TIME_SYMBOL);
                    this.setState(6618);
                    this.exprWithParentheses();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(6619);
                    this.match(MySQLParser.TIMESTAMP_SYMBOL);
                    this.setState(6620);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6621);
                    this.expr(0);
                    this.setState(6624);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 773) {
                        {
                        this.setState(6622);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6623);
                        this.expr(0);
                        }
                    }

                    this.setState(6626);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(6628);
                    this.trimFunction();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(6629);
                    this.userFunction();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(6630);
                    this.match(MySQLParser.VALUES_SYMBOL);
                    this.setState(6631);
                    this.exprWithParentheses();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(6632);
                    this.match(MySQLParser.YEAR_SYMBOL);
                    this.setState(6633);
                    this.exprWithParentheses();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(6634);
                    _la = this.input().LA(1);
                    if(!(_la === 5 || _la === 558)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6635);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6636);
                    this.expr(0);
                    this.setState(6637);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6643);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 795, this.getContext())) {
                        case 1:
                            {
                            this.setState(6638);
                            this.expr(0);
                            }
                            break;
                        case 2:
                            {
                            this.setState(6639);
                            this.match(MySQLParser.INTERVAL_SYMBOL);
                            this.setState(6640);
                            this.expr(0);
                            this.setState(6641);
                            this.interval();
                            }
                            break;
                    }
                    this.setState(6645);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(6647);
                    this.match(MySQLParser.CURDATE_SYMBOL);
                    this.setState(6649);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 796, this.getContext())) {
                        case 1:
                            {
                            this.setState(6648);
                            this.parentheses();
                            }
                            break;
                    }
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(6651);
                    this.match(MySQLParser.CURTIME_SYMBOL);
                    this.setState(6653);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 797, this.getContext())) {
                        case 1:
                            {
                            this.setState(6652);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(6655);
                    _la = this.input().LA(1);
                    if(!(_la === 114 || _la === 115)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6656);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6657);
                    this.expr(0);
                    this.setState(6658);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6659);
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.setState(6660);
                    this.expr(0);
                    this.setState(6661);
                    this.interval();
                    this.setState(6662);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(6664);
                    this.match(MySQLParser.EXTRACT_SYMBOL);
                    this.setState(6665);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6666);
                    this.interval();
                    this.setState(6667);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(6668);
                    this.expr(0);
                    this.setState(6669);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(6671);
                    this.match(MySQLParser.GET_FORMAT_SYMBOL);
                    this.setState(6672);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6673);
                    this.dateTimeTtype();
                    this.setState(6674);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6675);
                    this.expr(0);
                    this.setState(6676);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(6678);
                    this.match(MySQLParser.NOW_SYMBOL);
                    this.setState(6680);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 798, this.getContext())) {
                        case 1:
                            {
                            this.setState(6679);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(6682);
                    this.match(MySQLParser.POSITION_SYMBOL);
                    this.setState(6683);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6684);
                    this.bitExpr(0);
                    this.setState(6685);
                    this.match(MySQLParser.IN_SYMBOL);
                    this.setState(6686);
                    this.expr(0);
                    this.setState(6687);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(6689);
                    this.substringFunction();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(6690);
                    this.match(MySQLParser.SYSDATE_SYMBOL);
                    this.setState(6692);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 799, this.getContext())) {
                        case 1:
                            {
                            this.setState(6691);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                    this.setState(6694);
                    _la = this.input().LA(1);
                    if(!(_la === 792 || _la === 793)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6695);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6696);
                    this.intervalTimeStamp();
                    this.setState(6697);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6698);
                    this.expr(0);
                    this.setState(6699);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6700);
                    this.expr(0);
                    this.setState(6701);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                    this.setState(6703);
                    this.match(MySQLParser.UTC_DATE_SYMBOL);
                    this.setState(6705);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 800, this.getContext())) {
                        case 1:
                            {
                            this.setState(6704);
                            this.parentheses();
                            }
                            break;
                    }
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                    this.setState(6707);
                    this.match(MySQLParser.UTC_TIME_SYMBOL);
                    this.setState(6709);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 801, this.getContext())) {
                        case 1:
                            {
                            this.setState(6708);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                    this.setState(6711);
                    this.match(MySQLParser.UTC_TIMESTAMP_SYMBOL);
                    this.setState(6713);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 802, this.getContext())) {
                        case 1:
                            {
                            this.setState(6712);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                    this.setState(6715);
                    this.match(MySQLParser.ASCII_SYMBOL);
                    this.setState(6716);
                    this.exprWithParentheses();
                    }
                    break;
                case 35:
                    this.enterOuterAlt(localctx, 35);
                    {
                    this.setState(6717);
                    this.match(MySQLParser.CHARSET_SYMBOL);
                    this.setState(6718);
                    this.exprWithParentheses();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(localctx, 36);
                    {
                    this.setState(6719);
                    this.match(MySQLParser.COALESCE_SYMBOL);
                    this.setState(6720);
                    this.exprListWithParentheses();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(localctx, 37);
                    {
                    this.setState(6721);
                    this.match(MySQLParser.COLLATION_SYMBOL);
                    this.setState(6722);
                    this.exprWithParentheses();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(localctx, 38);
                    {
                    this.setState(6723);
                    this.match(MySQLParser.DATABASE_SYMBOL);
                    this.setState(6724);
                    this.parentheses();
                    }
                    break;
                case 39:
                    this.enterOuterAlt(localctx, 39);
                    {
                    this.setState(6725);
                    this.match(MySQLParser.IF_SYMBOL);
                    this.setState(6726);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6727);
                    this.expr(0);
                    this.setState(6728);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6729);
                    this.expr(0);
                    this.setState(6730);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6731);
                    this.expr(0);
                    this.setState(6732);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 40:
                    this.enterOuterAlt(localctx, 40);
                    {
                    this.setState(6734);
                    this.match(MySQLParser.FORMAT_SYMBOL);
                    this.setState(6735);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6736);
                    this.expr(0);
                    this.setState(6737);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6738);
                    this.expr(0);
                    this.setState(6741);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 773) {
                        {
                        this.setState(6739);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6740);
                        this.expr(0);
                        }
                    }

                    this.setState(6743);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 41:
                    this.enterOuterAlt(localctx, 41);
                    {
                    this.setState(6745);
                    this.match(MySQLParser.MICROSECOND_SYMBOL);
                    this.setState(6746);
                    this.exprWithParentheses();
                    }
                    break;
                case 42:
                    this.enterOuterAlt(localctx, 42);
                    {
                    this.setState(6747);
                    this.match(MySQLParser.MOD_SYMBOL);
                    this.setState(6748);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6749);
                    this.expr(0);
                    this.setState(6750);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6751);
                    this.expr(0);
                    this.setState(6752);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 43:
                    this.enterOuterAlt(localctx, 43);
                    {
                    this.setState(6754);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(6755);
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.setState(6756);
                    this.exprWithParentheses();
                    }
                    break;
                case 44:
                    this.enterOuterAlt(localctx, 44);
                    {
                    this.setState(6757);
                    this.match(MySQLParser.QUARTER_SYMBOL);
                    this.setState(6758);
                    this.exprWithParentheses();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(localctx, 45);
                    {
                    this.setState(6759);
                    this.match(MySQLParser.REPEAT_SYMBOL);
                    this.setState(6760);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6761);
                    this.expr(0);
                    this.setState(6762);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6763);
                    this.expr(0);
                    this.setState(6764);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 46:
                    this.enterOuterAlt(localctx, 46);
                    {
                    this.setState(6766);
                    this.match(MySQLParser.REPLACE_SYMBOL);
                    this.setState(6767);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6768);
                    this.expr(0);
                    this.setState(6769);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6770);
                    this.expr(0);
                    this.setState(6771);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6772);
                    this.expr(0);
                    this.setState(6773);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 47:
                    this.enterOuterAlt(localctx, 47);
                    {
                    this.setState(6775);
                    this.match(MySQLParser.REVERSE_SYMBOL);
                    this.setState(6776);
                    this.exprWithParentheses();
                    }
                    break;
                case 48:
                    this.enterOuterAlt(localctx, 48);
                    {
                    this.setState(6777);
                    this.match(MySQLParser.ROW_COUNT_SYMBOL);
                    this.setState(6778);
                    this.parentheses();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(localctx, 49);
                    {
                    this.setState(6779);
                    this.match(MySQLParser.TRUNCATE_SYMBOL);
                    this.setState(6780);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6781);
                    this.expr(0);
                    this.setState(6782);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6783);
                    this.expr(0);
                    this.setState(6784);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 50:
                    this.enterOuterAlt(localctx, 50);
                    {
                    this.setState(6786);
                    this.match(MySQLParser.WEEK_SYMBOL);
                    this.setState(6787);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6788);
                    this.expr(0);
                    this.setState(6791);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 773) {
                        {
                        this.setState(6789);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6790);
                        this.expr(0);
                        }
                    }

                    this.setState(6793);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 51:
                    this.enterOuterAlt(localctx, 51);
                    {
                    this.setState(6795);
                    this.match(MySQLParser.WEIGHT_STRING_SYMBOL);
                    this.setState(6796);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6797);
                    this.expr(0);
                    this.setState(6813);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 806, this.getContext())) {
                        case 1:
                            {
                            this.setState(6801);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 17) {
                                {
                                this.setState(6798);
                                this.match(MySQLParser.AS_SYMBOL);
                                this.setState(6799);
                                this.match(MySQLParser.CHAR_SYMBOL);
                                this.setState(6800);
                                this.wsNumCodepoints();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(6803);
                            this.match(MySQLParser.AS_SYMBOL);
                            this.setState(6804);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            this.setState(6805);
                            this.wsNumCodepoints();
                            }
                            break;
                        case 3:
                            {
                            this.setState(6806);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(6807);
                            this.ulong_number();
                            this.setState(6808);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(6809);
                            this.ulong_number();
                            this.setState(6810);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(6811);
                            this.ulong_number();
                            }
                            break;
                    }
                    this.setState(6815);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 52:
                    this.enterOuterAlt(localctx, 52);
                    {
                    this.setState(6817);
                    this.geometryFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public returningType(): ReturningTypeContext {
        let localctx = new ReturningTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 906, MySQLParser.RULE_returningType);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6820);
            this.match(MySQLParser.RETURNING_SYMBOL);
            this.setState(6821);
            this.castType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public geometryFunction(): GeometryFunctionContext {
        let localctx = new GeometryFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 908, MySQLParser.RULE_geometryFunction);
        try {
            this.setState(6846);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6823);
                this.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL);
                this.setState(6824);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6826);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 808, this.getContext())) {
                    case 1:
                        {
                        this.setState(6825);
                        this.exprList();
                        }
                        break;
                }
                this.setState(6828);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.LINESTRING_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6829);
                this.match(MySQLParser.LINESTRING_SYMBOL);
                this.setState(6830);
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTILINESTRING_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(6831);
                this.match(MySQLParser.MULTILINESTRING_SYMBOL);
                this.setState(6832);
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTIPOINT_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(6833);
                this.match(MySQLParser.MULTIPOINT_SYMBOL);
                this.setState(6834);
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTIPOLYGON_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(6835);
                this.match(MySQLParser.MULTIPOLYGON_SYMBOL);
                this.setState(6836);
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.POINT_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(6837);
                this.match(MySQLParser.POINT_SYMBOL);
                this.setState(6838);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6839);
                this.expr(0);
                this.setState(6840);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6841);
                this.expr(0);
                this.setState(6842);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.POLYGON_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(6844);
                this.match(MySQLParser.POLYGON_SYMBOL);
                this.setState(6845);
                this.exprListWithParentheses();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public timeFunctionParameters(): TimeFunctionParametersContext {
        let localctx = new TimeFunctionParametersContext(this.getContext(), this.getState());
        this.enterRule(localctx, 910, MySQLParser.RULE_timeFunctionParameters);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6848);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6850);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 747) {
                {
                this.setState(6849);
                this.fractionalPrecision();
                }
            }

            this.setState(6852);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fractionalPrecision(): FractionalPrecisionContext {
        let localctx = new FractionalPrecisionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 912, MySQLParser.RULE_fractionalPrecision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6854);
            this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public weightStringLevels(): WeightStringLevelsContext {
        let localctx = new WeightStringLevelsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 914, MySQLParser.RULE_weightStringLevels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6856);
            this.match(MySQLParser.LEVEL_SYMBOL);
            this.setState(6869);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 812, this.getContext())) {
                case 1:
                    {
                    this.setState(6857);
                    this.real_ulong_number();
                    this.setState(6858);
                    this.match(MySQLParser.MINUS_OPERATOR);
                    this.setState(6859);
                    this.real_ulong_number();
                    }
                    break;
                case 2:
                    {
                    this.setState(6861);
                    this.weightStringLevelListItem();
                    this.setState(6866);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(6862);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6863);
                        this.weightStringLevelListItem();
                        }
                        }
                        this.setState(6868);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public weightStringLevelListItem(): WeightStringLevelListItemContext {
        let localctx = new WeightStringLevelListItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 916, MySQLParser.RULE_weightStringLevelListItem);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6871);
            this.real_ulong_number();
            this.setState(6877);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ASC_SYMBOL:
            case MySQLParser.DESC_SYMBOL:
                {
                this.setState(6872);
                _la = this.input().LA(1);
                if(!(_la === 18 || _la === 134)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6874);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 476) {
                    {
                    this.setState(6873);
                    this.match(MySQLParser.REVERSE_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.REVERSE_SYMBOL:
                {
                this.setState(6876);
                this.match(MySQLParser.REVERSE_SYMBOL);
                }
                break;
            case MySQLParser.EOF:
            case MySQLParser.COMMA_SYMBOL:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dateTimeTtype(): DateTimeTtypeContext {
        let localctx = new DateTimeTtypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 918, MySQLParser.RULE_dateTimeTtype);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6879);
            _la = this.input().LA(1);
            if(!(_la === 113 || _la === 116 || _la === 583 || _la === 586)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public trimFunction(): TrimFunctionContext {
        let localctx = new TrimFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 920, MySQLParser.RULE_trimFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6881);
            this.match(MySQLParser.TRIM_SYMBOL);
            this.setState(6882);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6906);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 819, this.getContext())) {
                case 1:
                    {
                    this.setState(6883);
                    this.expr(0);
                    this.setState(6886);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 203) {
                        {
                        this.setState(6884);
                        this.match(MySQLParser.FROM_SYMBOL);
                        this.setState(6885);
                        this.expr(0);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.setState(6888);
                    this.match(MySQLParser.LEADING_SYMBOL);
                    this.setState(6890);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 816, this.getContext())) {
                        case 1:
                            {
                            this.setState(6889);
                            this.expr(0);
                            }
                            break;
                    }
                    this.setState(6892);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(6893);
                    this.expr(0);
                    }
                    break;
                case 3:
                    {
                    this.setState(6894);
                    this.match(MySQLParser.TRAILING_SYMBOL);
                    this.setState(6896);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 817, this.getContext())) {
                        case 1:
                            {
                            this.setState(6895);
                            this.expr(0);
                            }
                            break;
                    }
                    this.setState(6898);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(6899);
                    this.expr(0);
                    }
                    break;
                case 4:
                    {
                    this.setState(6900);
                    this.match(MySQLParser.BOTH_SYMBOL);
                    this.setState(6902);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 818, this.getContext())) {
                        case 1:
                            {
                            this.setState(6901);
                            this.expr(0);
                            }
                            break;
                    }
                    this.setState(6904);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(6905);
                    this.expr(0);
                    }
                    break;
            }
            this.setState(6908);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public substringFunction(): SubstringFunctionContext {
        let localctx = new SubstringFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 922, MySQLParser.RULE_substringFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6910);
            this.match(MySQLParser.SUBSTRING_SYMBOL);
            this.setState(6911);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6912);
            this.expr(0);
            this.setState(6925);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.COMMA_SYMBOL:
                {
                this.setState(6913);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6914);
                this.expr(0);
                this.setState(6917);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                    this.setState(6915);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6916);
                    this.expr(0);
                    }
                }

                }
                break;
            case MySQLParser.FROM_SYMBOL:
                {
                this.setState(6919);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(6920);
                this.expr(0);
                this.setState(6923);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                    this.setState(6921);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(6922);
                    this.expr(0);
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(6927);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionCall(): FunctionCallContext {
        let localctx = new FunctionCallContext(this.getContext(), this.getState());
        this.enterRule(localctx, 924, MySQLParser.RULE_functionCall);
        try {
            this.setState(6943);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 825, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6929);
                    this.pureIdentifier();
                    this.setState(6930);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6932);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 823, this.getContext())) {
                        case 1:
                            {
                            this.setState(6931);
                            this.udfExprList();
                            }
                            break;
                    }
                    this.setState(6934);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6936);
                    this.qualifiedIdentifier();
                    this.setState(6937);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6939);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 824, this.getContext())) {
                        case 1:
                            {
                            this.setState(6938);
                            this.exprList();
                            }
                            break;
                    }
                    this.setState(6941);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public udfExprList(): UdfExprListContext {
        let localctx = new UdfExprListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 926, MySQLParser.RULE_udfExprList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6945);
            this.udfExpr();
            this.setState(6950);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(6946);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6947);
                this.udfExpr();
                }
                }
                this.setState(6952);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public udfExpr(): UdfExprContext {
        let localctx = new UdfExprContext(this.getContext(), this.getState());
        this.enterRule(localctx, 928, MySQLParser.RULE_udfExpr);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6953);
            this.expr(0);
            this.setState(6955);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 827, this.getContext())) {
                case 1:
                    {
                    this.setState(6954);
                    this.selectAlias();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userVariable(): UserVariableContext {
        let localctx = new UserVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 930, MySQLParser.RULE_userVariable);
        try {
            this.setState(6960);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.AT_SIGN_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6957);
                this.match(MySQLParser.AT_SIGN_SYMBOL);
                this.setState(6958);
                this.textOrIdentifier();
                }
                break;
            case MySQLParser.AT_TEXT_SUFFIX:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6959);
                this.match(MySQLParser.AT_TEXT_SUFFIX);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public inExpressionUserVariableAssignment(): InExpressionUserVariableAssignmentContext {
        let localctx = new InExpressionUserVariableAssignmentContext(this.getContext(), this.getState());
        this.enterRule(localctx, 932, MySQLParser.RULE_inExpressionUserVariableAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6962);
            this.userVariable();
            this.setState(6963);
            this.match(MySQLParser.ASSIGN_OPERATOR);
            this.setState(6964);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext {
        let localctx = new RvalueSystemOrUserVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 934, MySQLParser.RULE_rvalueSystemOrUserVariable);
        try {
            this.setState(6972);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.AT_SIGN_SYMBOL:
            case MySQLParser.AT_TEXT_SUFFIX:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6966);
                this.userVariable();
                }
                break;
            case MySQLParser.AT_AT_SIGN_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6967);
                this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                this.setState(6969);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 829, this.getContext())) {
                    case 1:
                        {
                        this.setState(6968);
                        this.rvalueSystemVariableType();
                        }
                        break;
                }
                this.setState(6971);
                this.rvalueSystemVariable();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lvalueVariable(): LvalueVariableContext {
        let localctx = new LvalueVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 936, MySQLParser.RULE_lvalueVariable);
        let _la: number;
        try {
            this.setState(6987);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 834, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6983);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 833, this.getContext())) {
                        case 1:
                            {
                            this.setState(6974);
                            this.identifier();
                            this.setState(6976);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 772) {
                                {
                                this.setState(6975);
                                this.dotIdentifier();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(6978);
                            if (!(this.serverVersion >= 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80017");
                            }
                            this.setState(6979);
                            this.lValueIdentifier();
                            this.setState(6981);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 772) {
                                {
                                this.setState(6980);
                                this.dotIdentifier();
                                }
                            }

                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6985);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(6986);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public rvalueSystemVariable(): RvalueSystemVariableContext {
        let localctx = new RvalueSystemVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 938, MySQLParser.RULE_rvalueSystemVariable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6989);
            this.textOrIdentifier();
            this.setState(6991);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 835, this.getContext())) {
                case 1:
                    {
                    this.setState(6990);
                    this.dotIdentifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public whenExpression(): WhenExpressionContext {
        let localctx = new WhenExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 940, MySQLParser.RULE_whenExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6993);
            this.match(MySQLParser.WHEN_SYMBOL);
            this.setState(6994);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public thenExpression(): ThenExpressionContext {
        let localctx = new ThenExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 942, MySQLParser.RULE_thenExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6996);
            this.match(MySQLParser.THEN_SYMBOL);
            this.setState(6997);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public elseExpression(): ElseExpressionContext {
        let localctx = new ElseExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 944, MySQLParser.RULE_elseExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6999);
            this.match(MySQLParser.ELSE_SYMBOL);
            this.setState(7000);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public castType(): CastTypeContext {
        let localctx = new CastTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 946, MySQLParser.RULE_castType);
        let _la: number;
        try {
            this.setState(7050);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 846, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7002);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(7004);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 836, this.getContext())) {
                        case 1:
                            {
                            this.setState(7003);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7006);
                    this.match(MySQLParser.CHAR_SYMBOL);
                    this.setState(7008);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 837, this.getContext())) {
                        case 1:
                            {
                            this.setState(7007);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(7011);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 838, this.getContext())) {
                        case 1:
                            {
                            this.setState(7010);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7013);
                    this.nchar();
                    this.setState(7015);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 839, this.getContext())) {
                        case 1:
                            {
                            this.setState(7014);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7017);
                    this.match(MySQLParser.SIGNED_SYMBOL);
                    this.setState(7019);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 840, this.getContext())) {
                        case 1:
                            {
                            this.setState(7018);
                            this.match(MySQLParser.INT_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7021);
                    this.match(MySQLParser.UNSIGNED_SYMBOL);
                    this.setState(7023);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 841, this.getContext())) {
                        case 1:
                            {
                            this.setState(7022);
                            this.match(MySQLParser.INT_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(7025);
                    this.match(MySQLParser.DATE_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(7026);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7027);
                    this.match(MySQLParser.YEAR_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(7028);
                    this.match(MySQLParser.TIME_SYMBOL);
                    this.setState(7030);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 842, this.getContext())) {
                        case 1:
                            {
                            this.setState(7029);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(7032);
                    this.match(MySQLParser.DATETIME_SYMBOL);
                    this.setState(7034);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 843, this.getContext())) {
                        case 1:
                            {
                            this.setState(7033);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(7036);
                    this.match(MySQLParser.DECIMAL_SYMBOL);
                    this.setState(7038);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 844, this.getContext())) {
                        case 1:
                            {
                            this.setState(7037);
                            this.floatOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(7040);
                    this.match(MySQLParser.JSON_SYMBOL);
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(7041);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(7042);
                    this.realType();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(7043);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(7044);
                    this.match(MySQLParser.FLOAT_SYMBOL);
                    this.setState(7046);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 845, this.getContext())) {
                        case 1:
                            {
                            this.setState(7045);
                            this.standardFloatOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(7048);
                    if (!(this.serverVersion >= 80027)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80027");
                    }
                    this.setState(7049);
                    _la = this.input().LA(1);
                    if(!(_la === 211 || _la === 279 || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 7) !== 0) || _la === 411 || _la === 412)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public exprList(): ExprListContext {
        let localctx = new ExprListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 948, MySQLParser.RULE_exprList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7052);
            this.expr(0);
            this.setState(7057);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(7053);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7054);
                this.expr(0);
                }
                }
                this.setState(7059);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public charset(): CharsetContext {
        let localctx = new CharsetContext(this.getContext(), this.getState());
        this.enterRule(localctx, 950, MySQLParser.RULE_charset);
        try {
            this.setState(7063);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CHAR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7060);
                this.match(MySQLParser.CHAR_SYMBOL);
                this.setState(7061);
                this.match(MySQLParser.SET_SYMBOL);
                }
                break;
            case MySQLParser.CHARSET_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7062);
                this.match(MySQLParser.CHARSET_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public notRule(): NotRuleContext {
        let localctx = new NotRuleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 952, MySQLParser.RULE_notRule);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7065);
            _la = this.input().LA(1);
            if(!(_la === 371 || _la === 745)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public not2Rule(): Not2RuleContext {
        let localctx = new Not2RuleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 954, MySQLParser.RULE_not2Rule);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7067);
            _la = this.input().LA(1);
            if(!(_la === 745 || _la === 763)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public interval(): IntervalContext {
        let localctx = new IntervalContext(this.getContext(), this.getState());
        this.enterRule(localctx, 956, MySQLParser.RULE_interval);
        let _la: number;
        try {
            this.setState(7071);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.DAY_SYMBOL:
            case MySQLParser.HOUR_SYMBOL:
            case MySQLParser.MICROSECOND_SYMBOL:
            case MySQLParser.MINUTE_SYMBOL:
            case MySQLParser.MONTH_SYMBOL:
            case MySQLParser.QUARTER_SYMBOL:
            case MySQLParser.SECOND_SYMBOL:
            case MySQLParser.WEEK_SYMBOL:
            case MySQLParser.YEAR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7069);
                this.intervalTimeStamp();
                }
                break;
            case MySQLParser.DAY_HOUR_SYMBOL:
            case MySQLParser.DAY_MICROSECOND_SYMBOL:
            case MySQLParser.DAY_MINUTE_SYMBOL:
            case MySQLParser.DAY_SECOND_SYMBOL:
            case MySQLParser.HOUR_MICROSECOND_SYMBOL:
            case MySQLParser.HOUR_MINUTE_SYMBOL:
            case MySQLParser.HOUR_SECOND_SYMBOL:
            case MySQLParser.MINUTE_MICROSECOND_SYMBOL:
            case MySQLParser.MINUTE_SECOND_SYMBOL:
            case MySQLParser.SECOND_MICROSECOND_SYMBOL:
            case MySQLParser.YEAR_MONTH_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7070);
                _la = this.input().LA(1);
                if(!(((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 15) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 7) !== 0) || _la === 341 || _la === 342 || _la === 494 || _la === 655)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public intervalTimeStamp(): IntervalTimeStampContext {
        let localctx = new IntervalTimeStampContext(this.getContext(), this.getState());
        this.enterRule(localctx, 958, MySQLParser.RULE_intervalTimeStamp);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7073);
            _la = this.input().LA(1);
            if(!(_la === 122 || _la === 229 || ((((_la - 337)) & ~0x1F) === 0 && ((1 << (_la - 337)) & 8257) !== 0) || _la === 429 || _la === 495 || _la === 640 || _la === 656)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext {
        let localctx = new ExprListWithParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 960, MySQLParser.RULE_exprListWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7075);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7076);
            this.exprList();
            this.setState(7077);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        let localctx = new ExprWithParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 962, MySQLParser.RULE_exprWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7079);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7080);
            this.expr(0);
            this.setState(7081);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
        let localctx = new SimpleExprWithParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 964, MySQLParser.RULE_simpleExprWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7083);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7084);
            this.simpleExpr(0);
            this.setState(7085);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public orderList(): OrderListContext {
        let localctx = new OrderListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 966, MySQLParser.RULE_orderList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7087);
            this.orderExpression();
            this.setState(7092);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 850, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(7088);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7089);
                    this.orderExpression();
                    }
                    }
                }
                this.setState(7094);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 850, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public orderExpression(): OrderExpressionContext {
        let localctx = new OrderExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 968, MySQLParser.RULE_orderExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7095);
            this.expr(0);
            this.setState(7097);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 851, this.getContext())) {
                case 1:
                    {
                    this.setState(7096);
                    this.direction();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupList(): GroupListContext {
        let localctx = new GroupListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 970, MySQLParser.RULE_groupList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7099);
            this.groupingExpression();
            this.setState(7104);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(7100);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7101);
                this.groupingExpression();
                }
                }
                this.setState(7106);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupingExpression(): GroupingExpressionContext {
        let localctx = new GroupingExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 972, MySQLParser.RULE_groupingExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7107);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public channel(): ChannelContext {
        let localctx = new ChannelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 974, MySQLParser.RULE_channel);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7109);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(7110);
            this.match(MySQLParser.CHANNEL_SYMBOL);
            this.setState(7111);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public compoundStatement(): CompoundStatementContext {
        let localctx = new CompoundStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 976, MySQLParser.RULE_compoundStatement);
        try {
            this.setState(7126);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 853, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7113);
                    this.simpleStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7114);
                    this.returnStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7115);
                    this.ifStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7116);
                    this.caseStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7117);
                    this.labeledBlock();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(7118);
                    this.unlabeledBlock();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(7119);
                    this.labeledControl();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(7120);
                    this.unlabeledControl();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(7121);
                    this.leaveStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(7122);
                    this.iterateStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(7123);
                    this.cursorOpen();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(7124);
                    this.cursorFetch();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(7125);
                    this.cursorClose();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public returnStatement(): ReturnStatementContext {
        let localctx = new ReturnStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 978, MySQLParser.RULE_returnStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7128);
            this.match(MySQLParser.RETURN_SYMBOL);
            this.setState(7129);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifStatement(): IfStatementContext {
        let localctx = new IfStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 980, MySQLParser.RULE_ifStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7131);
            this.match(MySQLParser.IF_SYMBOL);
            this.setState(7132);
            this.ifBody();
            this.setState(7133);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7134);
            this.match(MySQLParser.IF_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifBody(): IfBodyContext {
        let localctx = new IfBodyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 982, MySQLParser.RULE_ifBody);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7136);
            this.expr(0);
            this.setState(7137);
            this.thenStatement();
            this.setState(7142);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ELSEIF_SYMBOL:
                {
                this.setState(7138);
                this.match(MySQLParser.ELSEIF_SYMBOL);
                this.setState(7139);
                this.ifBody();
                }
                break;
            case MySQLParser.ELSE_SYMBOL:
                {
                this.setState(7140);
                this.match(MySQLParser.ELSE_SYMBOL);
                this.setState(7141);
                this.compoundStatementList();
                }
                break;
            case MySQLParser.END_SYMBOL:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public thenStatement(): ThenStatementContext {
        let localctx = new ThenStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 984, MySQLParser.RULE_thenStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7144);
            this.match(MySQLParser.THEN_SYMBOL);
            this.setState(7145);
            this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public compoundStatementList(): CompoundStatementListContext {
        let localctx = new CompoundStatementListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 986, MySQLParser.RULE_compoundStatementList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7150);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(7147);
                            this.compoundStatement();
                            this.setState(7148);
                            this.match(MySQLParser.SEMICOLON_SYMBOL);
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(7152);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 855, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public caseStatement(): CaseStatementContext {
        let localctx = new CaseStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 988, MySQLParser.RULE_caseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7154);
            this.match(MySQLParser.CASE_SYMBOL);
            this.setState(7156);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 856, this.getContext())) {
                case 1:
                    {
                    this.setState(7155);
                    this.expr(0);
                    }
                    break;
            }
            this.setState(7161);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            do {
                {
                {
                this.setState(7158);
                this.whenExpression();
                this.setState(7159);
                this.thenStatement();
                }
                }
                this.setState(7163);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            } while (_la === 642);
            this.setState(7166);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 154) {
                {
                this.setState(7165);
                this.elseStatement();
                }
            }

            this.setState(7168);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7169);
            this.match(MySQLParser.CASE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public elseStatement(): ElseStatementContext {
        let localctx = new ElseStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 990, MySQLParser.RULE_elseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7171);
            this.match(MySQLParser.ELSE_SYMBOL);
            this.setState(7172);
            this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labeledBlock(): LabeledBlockContext {
        let localctx = new LabeledBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 992, MySQLParser.RULE_labeledBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7174);
            this.label();
            this.setState(7175);
            this.beginEndBlock();
            this.setState(7177);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 859, this.getContext())) {
                case 1:
                    {
                    this.setState(7176);
                    this.labelRef();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public unlabeledBlock(): UnlabeledBlockContext {
        let localctx = new UnlabeledBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 994, MySQLParser.RULE_unlabeledBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7179);
            this.beginEndBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public label(): LabelContext {
        let localctx = new LabelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 996, MySQLParser.RULE_label);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7181);
            this.labelIdentifier();
            this.setState(7182);
            this.match(MySQLParser.COLON_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public beginEndBlock(): BeginEndBlockContext {
        let localctx = new BeginEndBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 998, MySQLParser.RULE_beginEndBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7184);
            this.match(MySQLParser.BEGIN_SYMBOL);
            this.setState(7186);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 860, this.getContext())) {
                case 1:
                    {
                    this.setState(7185);
                    this.spDeclarations();
                    }
                    break;
            }
            this.setState(7189);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 861, this.getContext())) {
                case 1:
                    {
                    this.setState(7188);
                    this.compoundStatementList();
                    }
                    break;
            }
            this.setState(7191);
            this.match(MySQLParser.END_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labeledControl(): LabeledControlContext {
        let localctx = new LabeledControlContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1000, MySQLParser.RULE_labeledControl);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7193);
            this.label();
            this.setState(7194);
            this.unlabeledControl();
            this.setState(7196);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 862, this.getContext())) {
                case 1:
                    {
                    this.setState(7195);
                    this.labelRef();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public unlabeledControl(): UnlabeledControlContext {
        let localctx = new UnlabeledControlContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1002, MySQLParser.RULE_unlabeledControl);
        try {
            this.setState(7201);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.LOOP_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7198);
                this.loopBlock();
                }
                break;
            case MySQLParser.WHILE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7199);
                this.whileDoBlock();
                }
                break;
            case MySQLParser.REPEAT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(7200);
                this.repeatUntilBlock();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loopBlock(): LoopBlockContext {
        let localctx = new LoopBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1004, MySQLParser.RULE_loopBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7203);
            this.match(MySQLParser.LOOP_SYMBOL);
            this.setState(7204);
            this.compoundStatementList();
            this.setState(7205);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7206);
            this.match(MySQLParser.LOOP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public whileDoBlock(): WhileDoBlockContext {
        let localctx = new WhileDoBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1006, MySQLParser.RULE_whileDoBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7208);
            this.match(MySQLParser.WHILE_SYMBOL);
            this.setState(7209);
            this.expr(0);
            this.setState(7210);
            this.match(MySQLParser.DO_SYMBOL);
            this.setState(7211);
            this.compoundStatementList();
            this.setState(7212);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7213);
            this.match(MySQLParser.WHILE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public repeatUntilBlock(): RepeatUntilBlockContext {
        let localctx = new RepeatUntilBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1008, MySQLParser.RULE_repeatUntilBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7215);
            this.match(MySQLParser.REPEAT_SYMBOL);
            this.setState(7216);
            this.compoundStatementList();
            this.setState(7217);
            this.match(MySQLParser.UNTIL_SYMBOL);
            this.setState(7218);
            this.expr(0);
            this.setState(7219);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7220);
            this.match(MySQLParser.REPEAT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public spDeclarations(): SpDeclarationsContext {
        let localctx = new SpDeclarationsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1010, MySQLParser.RULE_spDeclarations);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7225);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(7222);
                            this.spDeclaration();
                            this.setState(7223);
                            this.match(MySQLParser.SEMICOLON_SYMBOL);
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(7227);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 864, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public spDeclaration(): SpDeclarationContext {
        let localctx = new SpDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1012, MySQLParser.RULE_spDeclaration);
        try {
            this.setState(7233);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 865, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7229);
                    this.variableDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7230);
                    this.conditionDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7231);
                    this.handlerDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7232);
                    this.cursorDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public variableDeclaration(): VariableDeclarationContext {
        let localctx = new VariableDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1014, MySQLParser.RULE_variableDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7235);
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.setState(7236);
            this.identifierList();
            this.setState(7237);
            this.dataType();
            this.setState(7239);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 69) {
                {
                this.setState(7238);
                this.collate();
                }
            }

            this.setState(7243);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 128) {
                {
                this.setState(7241);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.setState(7242);
                this.expr(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public conditionDeclaration(): ConditionDeclarationContext {
        let localctx = new ConditionDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1016, MySQLParser.RULE_conditionDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7245);
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.setState(7246);
            this.identifier();
            this.setState(7247);
            this.match(MySQLParser.CONDITION_SYMBOL);
            this.setState(7248);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(7249);
            this.spCondition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public spCondition(): SpConditionContext {
        let localctx = new SpConditionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1018, MySQLParser.RULE_spCondition);
        try {
            this.setState(7253);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.HEX_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7251);
                this.ulong_number();
                }
                break;
            case MySQLParser.SQLSTATE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7252);
                this.sqlstate();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sqlstate(): SqlstateContext {
        let localctx = new SqlstateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1020, MySQLParser.RULE_sqlstate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7255);
            this.match(MySQLParser.SQLSTATE_SYMBOL);
            this.setState(7257);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 869, this.getContext())) {
                case 1:
                    {
                    this.setState(7256);
                    this.match(MySQLParser.VALUE_SYMBOL);
                    }
                    break;
            }
            this.setState(7259);
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public handlerDeclaration(): HandlerDeclarationContext {
        let localctx = new HandlerDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1022, MySQLParser.RULE_handlerDeclaration);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7261);
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.setState(7262);
            _la = this.input().LA(1);
            if(!(_la === 92 || _la === 175 || _la === 605)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(7263);
            this.match(MySQLParser.HANDLER_SYMBOL);
            this.setState(7264);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(7265);
            this.handlerCondition();
            this.setState(7270);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 870, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(7266);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7267);
                    this.handlerCondition();
                    }
                    }
                }
                this.setState(7272);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 870, this.getContext());
            }
            this.setState(7273);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public handlerCondition(): HandlerConditionContext {
        let localctx = new HandlerConditionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1024, MySQLParser.RULE_handlerCondition);
        try {
            this.setState(7282);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 871, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7275);
                    this.spCondition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7276);
                    this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7277);
                    this.match(MySQLParser.SQLWARNING_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7278);
                    this.notRule();
                    this.setState(7279);
                    this.match(MySQLParser.FOUND_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7281);
                    this.match(MySQLParser.SQLEXCEPTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cursorDeclaration(): CursorDeclarationContext {
        let localctx = new CursorDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1026, MySQLParser.RULE_cursorDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7284);
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.setState(7285);
            this.identifier();
            this.setState(7286);
            this.match(MySQLParser.CURSOR_SYMBOL);
            this.setState(7287);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(7288);
            this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public iterateStatement(): IterateStatementContext {
        let localctx = new IterateStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1028, MySQLParser.RULE_iterateStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7290);
            this.match(MySQLParser.ITERATE_SYMBOL);
            this.setState(7291);
            this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public leaveStatement(): LeaveStatementContext {
        let localctx = new LeaveStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1030, MySQLParser.RULE_leaveStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7293);
            this.match(MySQLParser.LEAVE_SYMBOL);
            this.setState(7294);
            this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public getDiagnosticsStatement(): GetDiagnosticsStatementContext {
        let localctx = new GetDiagnosticsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1032, MySQLParser.RULE_getDiagnosticsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7296);
            this.match(MySQLParser.GET_SYMBOL);
            this.setState(7298);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 101 || _la === 540) {
                {
                this.setState(7297);
                _la = this.input().LA(1);
                if(!(_la === 101 || _la === 540)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(7300);
            this.match(MySQLParser.DIAGNOSTICS_SYMBOL);
            this.setState(7319);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 875, this.getContext())) {
                case 1:
                    {
                    this.setState(7301);
                    this.statementInformationItem();
                    this.setState(7306);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(7302);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(7303);
                        this.statementInformationItem();
                        }
                        }
                        this.setState(7308);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(7309);
                    this.match(MySQLParser.CONDITION_SYMBOL);
                    this.setState(7310);
                    this.signalAllowedExpr();
                    this.setState(7311);
                    this.conditionInformationItem();
                    this.setState(7316);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(7312);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(7313);
                        this.conditionInformationItem();
                        }
                        }
                        this.setState(7318);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signalAllowedExpr(): SignalAllowedExprContext {
        let localctx = new SignalAllowedExprContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1034, MySQLParser.RULE_signalAllowedExpr);
        try {
            this.setState(7324);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 876, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7321);
                    this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7322);
                    this.rvalueSystemOrUserVariable();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7323);
                    this.qualifiedIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public statementInformationItem(): StatementInformationItemContext {
        let localctx = new StatementInformationItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1036, MySQLParser.RULE_statementInformationItem);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7328);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 877, this.getContext())) {
                case 1:
                    {
                    this.setState(7326);
                    this.userVariable();
                    }
                    break;
                case 2:
                    {
                    this.setState(7327);
                    this.identifier();
                    }
                    break;
            }
            this.setState(7330);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(7331);
            _la = this.input().LA(1);
            if(!(_la === 377 || _la === 485)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public conditionInformationItem(): ConditionInformationItemContext {
        let localctx = new ConditionInformationItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1038, MySQLParser.RULE_conditionInformationItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7335);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 878, this.getContext())) {
                case 1:
                    {
                    this.setState(7333);
                    this.userVariable();
                    }
                    break;
                case 2:
                    {
                    this.setState(7334);
                    this.identifier();
                    }
                    break;
            }
            this.setState(7337);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(7340);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CATALOG_NAME_SYMBOL:
            case MySQLParser.CLASS_ORIGIN_SYMBOL:
            case MySQLParser.COLUMN_NAME_SYMBOL:
            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
            case MySQLParser.CURSOR_NAME_SYMBOL:
            case MySQLParser.MESSAGE_TEXT_SYMBOL:
            case MySQLParser.MYSQL_ERRNO_SYMBOL:
            case MySQLParser.SCHEMA_NAME_SYMBOL:
            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
            case MySQLParser.TABLE_NAME_SYMBOL:
                {
                this.setState(7338);
                this.signalInformationItemName();
                }
                break;
            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
                {
                this.setState(7339);
                this.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signalInformationItemName(): SignalInformationItemNameContext {
        let localctx = new SignalInformationItemNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1040, MySQLParser.RULE_signalInformationItemName);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7342);
            _la = this.input().LA(1);
            if(!(((((_la - 53)) & ~0x1F) === 0 && ((1 << (_la - 53)) & 1050625) !== 0) || ((((_la - 87)) & ~0x1F) === 0 && ((1 << (_la - 87)) & 1048583) !== 0) || _la === 336 || _la === 355 || _la === 492 || _la === 557 || _la === 576)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signalStatement(): SignalStatementContext {
        let localctx = new SignalStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1042, MySQLParser.RULE_signalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7344);
            this.match(MySQLParser.SIGNAL_SYMBOL);
            this.setState(7347);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 880, this.getContext())) {
                case 1:
                    {
                    this.setState(7345);
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.setState(7346);
                    this.sqlstate();
                    }
                    break;
            }
            this.setState(7358);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 506) {
                {
                this.setState(7349);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(7350);
                this.signalInformationItem();
                this.setState(7355);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                    {
                    this.setState(7351);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7352);
                    this.signalInformationItem();
                    }
                    }
                    this.setState(7357);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resignalStatement(): ResignalStatementContext {
        let localctx = new ResignalStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1044, MySQLParser.RULE_resignalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7360);
            this.match(MySQLParser.RESIGNAL_SYMBOL);
            this.setState(7363);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 883, this.getContext())) {
                case 1:
                    {
                    this.setState(7361);
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.setState(7362);
                    this.sqlstate();
                    }
                    break;
            }
            this.setState(7374);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 506) {
                {
                this.setState(7365);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(7366);
                this.signalInformationItem();
                this.setState(7371);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                    {
                    this.setState(7367);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7368);
                    this.signalInformationItem();
                    }
                    }
                    this.setState(7373);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signalInformationItem(): SignalInformationItemContext {
        let localctx = new SignalInformationItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1046, MySQLParser.RULE_signalInformationItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7376);
            this.signalInformationItemName();
            this.setState(7377);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(7378);
            this.signalAllowedExpr();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cursorOpen(): CursorOpenContext {
        let localctx = new CursorOpenContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1048, MySQLParser.RULE_cursorOpen);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7380);
            this.match(MySQLParser.OPEN_SYMBOL);
            this.setState(7381);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cursorClose(): CursorCloseContext {
        let localctx = new CursorCloseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1050, MySQLParser.RULE_cursorClose);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7383);
            this.match(MySQLParser.CLOSE_SYMBOL);
            this.setState(7384);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cursorFetch(): CursorFetchContext {
        let localctx = new CursorFetchContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1052, MySQLParser.RULE_cursorFetch);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7386);
            this.match(MySQLParser.FETCH_SYMBOL);
            this.setState(7391);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 887, this.getContext())) {
                case 1:
                    {
                    this.setState(7388);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 367) {
                        {
                        this.setState(7387);
                        this.match(MySQLParser.NEXT_SYMBOL);
                        }
                    }

                    this.setState(7390);
                    this.match(MySQLParser.FROM_SYMBOL);
                    }
                    break;
            }
            this.setState(7393);
            this.identifier();
            this.setState(7394);
            this.match(MySQLParser.INTO_SYMBOL);
            this.setState(7395);
            this.identifierList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public schedule(): ScheduleContext {
        let localctx = new ScheduleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1054, MySQLParser.RULE_schedule);
        let _la: number;
        try {
            this.setState(7410);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.AT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7397);
                this.match(MySQLParser.AT_SYMBOL);
                this.setState(7398);
                this.expr(0);
                }
                break;
            case MySQLParser.EVERY_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7399);
                this.match(MySQLParser.EVERY_SYMBOL);
                this.setState(7400);
                this.expr(0);
                this.setState(7401);
                this.interval();
                this.setState(7404);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 542) {
                    {
                    this.setState(7402);
                    this.match(MySQLParser.STARTS_SYMBOL);
                    this.setState(7403);
                    this.expr(0);
                    }
                }

                this.setState(7408);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 160) {
                    {
                    this.setState(7406);
                    this.match(MySQLParser.ENDS_SYMBOL);
                    this.setState(7407);
                    this.expr(0);
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localctx = new ColumnDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1056, MySQLParser.RULE_columnDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7412);
            this.columnName();
            this.setState(7413);
            this.fieldDefinition();
            this.setState(7415);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 891, this.getContext())) {
                case 1:
                    {
                    this.setState(7414);
                    this.checkOrReferences();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public checkOrReferences(): CheckOrReferencesContext {
        let localctx = new CheckOrReferencesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1058, MySQLParser.RULE_checkOrReferences);
        try {
            this.setState(7420);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 892, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7417);
                    if (!(this.serverVersion < 80016)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80016");
                    }
                    this.setState(7418);
                    this.checkConstraint();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7419);
                    this.references();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public checkConstraint(): CheckConstraintContext {
        let localctx = new CheckConstraintContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1060, MySQLParser.RULE_checkConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7422);
            this.match(MySQLParser.CHECK_SYMBOL);
            this.setState(7423);
            this.exprWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public constraintEnforcement(): ConstraintEnforcementContext {
        let localctx = new ConstraintEnforcementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1062, MySQLParser.RULE_constraintEnforcement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7426);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 371) {
                {
                this.setState(7425);
                this.match(MySQLParser.NOT_SYMBOL);
                }
            }

            this.setState(7428);
            this.match(MySQLParser.ENFORCED_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableConstraintDef(): TableConstraintDefContext {
        let localctx = new TableConstraintDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1064, MySQLParser.RULE_tableConstraintDef);
        let _la: number;
        try {
            let _alt: number;
            this.setState(7505);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INDEX_SYMBOL:
            case MySQLParser.KEY_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7430);
                localctx._type_ = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 236 || _la === 265)) {
                    localctx._type_ = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(7432);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 894, this.getContext())) {
                    case 1:
                        {
                        this.setState(7431);
                        this.indexNameAndType();
                        }
                        break;
                }
                this.setState(7434);
                this.keyListWithExpression();
                this.setState(7438);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 895, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(7435);
                        this.indexOption();
                        }
                        }
                    }
                    this.setState(7440);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 895, this.getContext());
                }
                }
                break;
            case MySQLParser.FULLTEXT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7441);
                localctx._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
                this.setState(7443);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 896, this.getContext())) {
                    case 1:
                        {
                        this.setState(7442);
                        this.keyOrIndex();
                        }
                        break;
                }
                this.setState(7446);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 897, this.getContext())) {
                    case 1:
                        {
                        this.setState(7445);
                        this.indexName();
                        }
                        break;
                }
                this.setState(7448);
                this.keyListWithExpression();
                this.setState(7452);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 898, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(7449);
                        this.fulltextIndexOption();
                        }
                        }
                    }
                    this.setState(7454);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 898, this.getContext());
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(7455);
                localctx._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(7457);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 899, this.getContext())) {
                    case 1:
                        {
                        this.setState(7456);
                        this.keyOrIndex();
                        }
                        break;
                }
                this.setState(7460);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 900, this.getContext())) {
                    case 1:
                        {
                        this.setState(7459);
                        this.indexName();
                        }
                        break;
                }
                this.setState(7462);
                this.keyListWithExpression();
                this.setState(7466);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 901, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(7463);
                        this.spatialIndexOption();
                        }
                        }
                    }
                    this.setState(7468);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 901, this.getContext());
                }
                }
                break;
            case MySQLParser.CHECK_SYMBOL:
            case MySQLParser.CONSTRAINT_SYMBOL:
            case MySQLParser.FOREIGN_SYMBOL:
            case MySQLParser.PRIMARY_SYMBOL:
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(7470);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 86) {
                    {
                    this.setState(7469);
                    this.constraintName();
                    }
                }

                this.setState(7503);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.PRIMARY_SYMBOL:
                case MySQLParser.UNIQUE_SYMBOL:
                    {
                    this.setState(7478);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.PRIMARY_SYMBOL:
                        {
                        this.setState(7472);
                        localctx._type_ = this.match(MySQLParser.PRIMARY_SYMBOL);
                        this.setState(7473);
                        this.match(MySQLParser.KEY_SYMBOL);
                        }
                        break;
                    case MySQLParser.UNIQUE_SYMBOL:
                        {
                        this.setState(7474);
                        localctx._type_ = this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.setState(7476);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 903, this.getContext())) {
                            case 1:
                                {
                                this.setState(7475);
                                this.keyOrIndex();
                                }
                                break;
                        }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    this.setState(7481);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 905, this.getContext())) {
                        case 1:
                            {
                            this.setState(7480);
                            this.indexNameAndType();
                            }
                            break;
                    }
                    this.setState(7483);
                    this.keyListWithExpression();
                    this.setState(7487);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 906, this.getContext());
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                            {
                            this.setState(7484);
                            this.indexOption();
                            }
                            }
                        }
                        this.setState(7489);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 906, this.getContext());
                    }
                    }
                    break;
                case MySQLParser.FOREIGN_SYMBOL:
                    {
                    this.setState(7490);
                    localctx._type_ = this.match(MySQLParser.FOREIGN_SYMBOL);
                    this.setState(7491);
                    this.match(MySQLParser.KEY_SYMBOL);
                    this.setState(7493);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 907, this.getContext())) {
                        case 1:
                            {
                            this.setState(7492);
                            this.indexName();
                            }
                            break;
                    }
                    this.setState(7495);
                    this.keyList();
                    this.setState(7496);
                    this.references();
                    }
                    break;
                case MySQLParser.CHECK_SYMBOL:
                    {
                    this.setState(7498);
                    this.checkConstraint();
                    this.setState(7501);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 908, this.getContext())) {
                        case 1:
                            {
                            this.setState(7499);
                            if (!(this.serverVersion >= 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80017");
                            }
                            this.setState(7500);
                            this.constraintEnforcement();
                            }
                            break;
                    }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public constraintName(): ConstraintNameContext {
        let localctx = new ConstraintNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1066, MySQLParser.RULE_constraintName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7507);
            this.match(MySQLParser.CONSTRAINT_SYMBOL);
            this.setState(7509);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 911, this.getContext())) {
                case 1:
                    {
                    this.setState(7508);
                    this.identifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldDefinition(): FieldDefinitionContext {
        let localctx = new FieldDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1068, MySQLParser.RULE_fieldDefinition);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7511);
            this.dataType();
            this.setState(7536);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 917, this.getContext())) {
                case 1:
                    {
                    this.setState(7515);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 912, this.getContext());
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                            {
                            this.setState(7512);
                            this.columnAttribute();
                            }
                            }
                        }
                        this.setState(7517);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 912, this.getContext());
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(7519);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 69) {
                        {
                        this.setState(7518);
                        this.collate();
                        }
                    }

                    this.setState(7523);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 209) {
                        {
                        this.setState(7521);
                        this.match(MySQLParser.GENERATED_SYMBOL);
                        this.setState(7522);
                        this.match(MySQLParser.ALWAYS_SYMBOL);
                        }
                    }

                    this.setState(7525);
                    this.match(MySQLParser.AS_SYMBOL);
                    this.setState(7526);
                    this.exprWithParentheses();
                    this.setState(7528);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 915, this.getContext())) {
                        case 1:
                            {
                            this.setState(7527);
                            _la = this.input().LA(1);
                            if(!(_la === 554 || _la === 637)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                    }
                    this.setState(7533);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 916, this.getContext());
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                            {
                            this.setState(7530);
                            this.columnAttribute();
                            }
                            }
                        }
                        this.setState(7535);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 916, this.getContext());
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnAttribute(): ColumnAttributeContext {
        let localctx = new ColumnAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1070, MySQLParser.RULE_columnAttribute);
        let _la: number;
        try {
            this.setState(7599);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 926, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7539);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 371) {
                        {
                        this.setState(7538);
                        this.match(MySQLParser.NOT_SYMBOL);
                        }
                    }

                    this.setState(7541);
                    this.nullLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7542);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(7543);
                    this.match(MySQLParser.NOT_SYMBOL);
                    this.setState(7544);
                    this.match(MySQLParser.SECONDARY_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7545);
                    localctx._value = this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(7549);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 919, this.getContext())) {
                        case 1:
                            {
                            this.setState(7546);
                            this.nowOrSignedLiteral();
                            }
                            break;
                        case 2:
                            {
                            this.setState(7547);
                            if (!(this.serverVersion >= 80013)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80013");
                            }
                            this.setState(7548);
                            this.exprWithParentheses();
                            }
                            break;
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7551);
                    localctx._value = this.match(MySQLParser.ON_SYMBOL);
                    this.setState(7552);
                    this.match(MySQLParser.UPDATE_SYMBOL);
                    this.setState(7553);
                    this.match(MySQLParser.NOW_SYMBOL);
                    this.setState(7555);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 920, this.getContext())) {
                        case 1:
                            {
                            this.setState(7554);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7557);
                    localctx._value = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(7558);
                    localctx._value = this.match(MySQLParser.SERIAL_SYMBOL);
                    this.setState(7559);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(7560);
                    this.match(MySQLParser.VALUE_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(7562);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 420) {
                        {
                        this.setState(7561);
                        this.match(MySQLParser.PRIMARY_SYMBOL);
                        }
                    }

                    this.setState(7564);
                    localctx._value = this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(7565);
                    localctx._value = this.match(MySQLParser.UNIQUE_SYMBOL);
                    this.setState(7567);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 922, this.getContext())) {
                        case 1:
                            {
                            this.setState(7566);
                            this.match(MySQLParser.KEY_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(7569);
                    localctx._value = this.match(MySQLParser.COMMENT_SYMBOL);
                    this.setState(7570);
                    this.textLiteral();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(7571);
                    this.collate();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(7572);
                    localctx._value = this.match(MySQLParser.COLUMN_FORMAT_SYMBOL);
                    this.setState(7573);
                    this.columnFormat();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(7574);
                    localctx._value = this.match(MySQLParser.STORAGE_SYMBOL);
                    this.setState(7575);
                    this.storageMedia();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(7576);
                    localctx._value = this.match(MySQLParser.SRID_SYMBOL);
                    this.setState(7577);
                    this.real_ulonglong_number();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(7578);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(7580);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 86) {
                        {
                        this.setState(7579);
                        this.constraintName();
                        }
                    }

                    this.setState(7582);
                    this.checkConstraint();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(7583);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(7584);
                    this.constraintEnforcement();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(7585);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7586);
                    localctx._value = this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(7588);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 924, this.getContext())) {
                        case 1:
                            {
                            this.setState(7587);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(7590);
                    this.jsonAttribute();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(7591);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7592);
                    localctx._value = this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(7594);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 925, this.getContext())) {
                        case 1:
                            {
                            this.setState(7593);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(7596);
                    this.jsonAttribute();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(7597);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7598);
                    this.visibility();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnFormat(): ColumnFormatContext {
        let localctx = new ColumnFormatContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1072, MySQLParser.RULE_columnFormat);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7601);
            _la = this.input().LA(1);
            if(!(_la === 128 || _la === 152 || _la === 192)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public storageMedia(): StorageMediaContext {
        let localctx = new StorageMediaContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1074, MySQLParser.RULE_storageMedia);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7603);
            _la = this.input().LA(1);
            if(!(_la === 128 || _la === 142 || _la === 334)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public now(): NowContext {
        let localctx = new NowContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1076, MySQLParser.RULE_now);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7605);
            this.match(MySQLParser.NOW_SYMBOL);
            this.setState(7606);
            this.functionDatetimePrecision();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nowOrSignedLiteral(): NowOrSignedLiteralContext {
        let localctx = new NowOrSignedLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1078, MySQLParser.RULE_nowOrSignedLiteral);
        try {
            this.setState(7610);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 927, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7608);
                    this.now();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7609);
                    this.signedLiteralOrNull();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public gcolAttribute(): GcolAttributeContext {
        let localctx = new GcolAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1080, MySQLParser.RULE_gcolAttribute);
        let _la: number;
        try {
            this.setState(7626);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7612);
                this.match(MySQLParser.UNIQUE_SYMBOL);
                this.setState(7614);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 265) {
                    {
                    this.setState(7613);
                    this.match(MySQLParser.KEY_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7616);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(7617);
                this.textString();
                }
                break;
            case MySQLParser.NOT_SYMBOL:
            case MySQLParser.NULL_SYMBOL:
            case MySQLParser.NOT2_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(7619);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 371 || _la === 745) {
                    {
                    this.setState(7618);
                    this.notRule();
                    }
                }

                this.setState(7621);
                this.match(MySQLParser.NULL_SYMBOL);
                }
                break;
            case MySQLParser.KEY_SYMBOL:
            case MySQLParser.PRIMARY_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(7623);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 420) {
                    {
                    this.setState(7622);
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                }

                this.setState(7625);
                this.match(MySQLParser.KEY_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public references(): ReferencesContext {
        let localctx = new ReferencesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1082, MySQLParser.RULE_references);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7628);
            this.match(MySQLParser.REFERENCES_SYMBOL);
            this.setState(7629);
            this.tableRef();
            this.setState(7631);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(7630);
                this.identifierListWithParentheses();
                }
            }

            this.setState(7635);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 320) {
                {
                this.setState(7633);
                this.match(MySQLParser.MATCH_SYMBOL);
                this.setState(7634);
                localctx._match = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 204 || _la === 402 || _la === 513)) {
                    localctx._match = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(7653);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 936, this.getContext())) {
                case 1:
                    {
                    this.setState(7637);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(7638);
                    localctx._option = this.match(MySQLParser.UPDATE_SYMBOL);
                    this.setState(7639);
                    this.deleteOption();
                    this.setState(7643);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 383) {
                        {
                        this.setState(7640);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(7641);
                        this.match(MySQLParser.DELETE_SYMBOL);
                        this.setState(7642);
                        this.deleteOption();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.setState(7645);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(7646);
                    localctx._option = this.match(MySQLParser.DELETE_SYMBOL);
                    this.setState(7647);
                    this.deleteOption();
                    this.setState(7651);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 383) {
                        {
                        this.setState(7648);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(7649);
                        this.match(MySQLParser.UPDATE_SYMBOL);
                        this.setState(7650);
                        this.deleteOption();
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public deleteOption(): DeleteOptionContext {
        let localctx = new DeleteOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1084, MySQLParser.RULE_deleteOption);
        let _la: number;
        try {
            this.setState(7662);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 937, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7655);
                    _la = this.input().LA(1);
                    if(!(_la === 49 || _la === 471)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7656);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(7657);
                    this.nullLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7658);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(7659);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7660);
                    this.match(MySQLParser.NO_SYMBOL);
                    this.setState(7661);
                    this.match(MySQLParser.ACTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyList(): KeyListContext {
        let localctx = new KeyListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1086, MySQLParser.RULE_keyList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7664);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7665);
            this.keyPart();
            this.setState(7670);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(7666);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7667);
                this.keyPart();
                }
                }
                this.setState(7672);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(7673);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyPart(): KeyPartContext {
        let localctx = new KeyPartContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1088, MySQLParser.RULE_keyPart);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7675);
            this.identifier();
            this.setState(7677);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(7676);
                this.fieldLength();
                }
            }

            this.setState(7680);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 18 || _la === 134) {
                {
                this.setState(7679);
                this.direction();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyListWithExpression(): KeyListWithExpressionContext {
        let localctx = new KeyListWithExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1090, MySQLParser.RULE_keyListWithExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7682);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7683);
            this.keyPartOrExpression();
            this.setState(7688);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(7684);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7685);
                this.keyPartOrExpression();
                }
                }
                this.setState(7690);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(7691);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyPartOrExpression(): KeyPartOrExpressionContext {
        let localctx = new KeyPartOrExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1092, MySQLParser.RULE_keyPartOrExpression);
        let _la: number;
        try {
            this.setState(7699);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 943, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7693);
                    this.keyPart();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7694);
                    if (!(this.serverVersion >= 80013)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80013");
                    }
                    this.setState(7695);
                    this.exprWithParentheses();
                    this.setState(7697);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 18 || _la === 134) {
                        {
                        this.setState(7696);
                        this.direction();
                        }
                    }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexType(): IndexTypeContext {
        let localctx = new IndexTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1094, MySQLParser.RULE_indexType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7701);
            localctx._algorithm = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 44 || _la === 220 || _la === 488)) {
                localctx._algorithm = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexOption(): IndexOptionContext {
        let localctx = new IndexOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1096, MySQLParser.RULE_indexOption);
        try {
            this.setState(7705);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 944, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7703);
                    this.commonIndexOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7704);
                    this.indexTypeClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public commonIndexOption(): CommonIndexOptionContext {
        let localctx = new CommonIndexOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1098, MySQLParser.RULE_commonIndexOption);
        let _la: number;
        try {
            this.setState(7727);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 948, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7707);
                    this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                    this.setState(7709);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(7708);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(7711);
                    this.ulong_number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7712);
                    this.match(MySQLParser.COMMENT_SYMBOL);
                    this.setState(7713);
                    this.textLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7714);
                    this.visibility();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7715);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7716);
                    this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(7718);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 946, this.getContext())) {
                        case 1:
                            {
                            this.setState(7717);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(7720);
                    this.jsonAttribute();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7721);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7722);
                    this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(7724);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 947, this.getContext())) {
                        case 1:
                            {
                            this.setState(7723);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(7726);
                    this.jsonAttribute();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public visibility(): VisibilityContext {
        let localctx = new VisibilityContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1100, MySQLParser.RULE_visibility);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7729);
            _la = this.input().LA(1);
            if(!(_la === 661 || _la === 662)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexTypeClause(): IndexTypeClauseContext {
        let localctx = new IndexTypeClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1102, MySQLParser.RULE_indexTypeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7731);
            _la = this.input().LA(1);
            if(!(_la === 599 || _la === 621)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(7732);
            this.indexType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fulltextIndexOption(): FulltextIndexOptionContext {
        let localctx = new FulltextIndexOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1104, MySQLParser.RULE_fulltextIndexOption);
        try {
            this.setState(7738);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 949, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7734);
                    this.commonIndexOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7735);
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.setState(7736);
                    this.match(MySQLParser.PARSER_SYMBOL);
                    this.setState(7737);
                    this.identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public spatialIndexOption(): SpatialIndexOptionContext {
        let localctx = new SpatialIndexOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1106, MySQLParser.RULE_spatialIndexOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7740);
            this.commonIndexOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dataTypeDefinition(): DataTypeDefinitionContext {
        let localctx = new DataTypeDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1108, MySQLParser.RULE_dataTypeDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7742);
            this.dataType();
            this.setState(7743);
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dataType(): DataTypeContext {
        let localctx = new DataTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1110, MySQLParser.RULE_dataType);
        let _la: number;
        try {
            this.setState(7891);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 983, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7745);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 31 || _la === 249 || _la === 331 || _la === 516 || _la === 588)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(7747);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 950, this.getContext())) {
                        case 1:
                            {
                            this.setState(7746);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(7750);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 951, this.getContext())) {
                        case 1:
                            {
                            this.setState(7749);
                            this.fieldOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7757);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.REAL_SYMBOL:
                        {
                        this.setState(7752);
                        localctx._type_ = this.match(MySQLParser.REAL_SYMBOL);
                        }
                        break;
                    case MySQLParser.DOUBLE_SYMBOL:
                        {
                        this.setState(7753);
                        localctx._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
                        this.setState(7755);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 952, this.getContext())) {
                            case 1:
                                {
                                this.setState(7754);
                                this.match(MySQLParser.PRECISION_SYMBOL);
                                }
                                break;
                        }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    this.setState(7760);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 954, this.getContext())) {
                        case 1:
                            {
                            this.setState(7759);
                            this.precision();
                            }
                            break;
                    }
                    this.setState(7763);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 955, this.getContext())) {
                        case 1:
                            {
                            this.setState(7762);
                            this.fieldOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7765);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 126 || _la === 192 || _la === 195 || _la === 378)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(7767);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 956, this.getContext())) {
                        case 1:
                            {
                            this.setState(7766);
                            this.floatOptions();
                            }
                            break;
                    }
                    this.setState(7770);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 957, this.getContext())) {
                        case 1:
                            {
                            this.setState(7769);
                            this.fieldOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7772);
                    localctx._type_ = this.match(MySQLParser.BIT_SYMBOL);
                    this.setState(7774);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 958, this.getContext())) {
                        case 1:
                            {
                            this.setState(7773);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7776);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 41 || _la === 42)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(7777);
                    localctx._type_ = this.match(MySQLParser.CHAR_SYMBOL);
                    this.setState(7779);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 959, this.getContext())) {
                        case 1:
                            {
                            this.setState(7778);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(7782);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 960, this.getContext())) {
                        case 1:
                            {
                            this.setState(7781);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(7784);
                    this.nchar();
                    this.setState(7786);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 961, this.getContext())) {
                        case 1:
                            {
                            this.setState(7785);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(7789);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 962, this.getContext())) {
                        case 1:
                            {
                            this.setState(7788);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(7791);
                    localctx._type_ = this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(7793);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 963, this.getContext())) {
                        case 1:
                            {
                            this.setState(7792);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(7798);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.CHAR_SYMBOL:
                        {
                        this.setState(7795);
                        localctx._type_ = this.match(MySQLParser.CHAR_SYMBOL);
                        this.setState(7796);
                        this.match(MySQLParser.VARYING_SYMBOL);
                        }
                        break;
                    case MySQLParser.VARCHAR_SYMBOL:
                        {
                        this.setState(7797);
                        localctx._type_ = this.match(MySQLParser.VARCHAR_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    this.setState(7800);
                    this.fieldLength();
                    this.setState(7802);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 965, this.getContext())) {
                        case 1:
                            {
                            this.setState(7801);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(7814);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 966, this.getContext())) {
                        case 1:
                            {
                            this.setState(7804);
                            localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                            this.setState(7805);
                            this.match(MySQLParser.VARCHAR_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(7806);
                            localctx._type_ = this.match(MySQLParser.NVARCHAR_SYMBOL);
                            }
                            break;
                        case 3:
                            {
                            this.setState(7807);
                            localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                            this.setState(7808);
                            this.match(MySQLParser.VARCHAR_SYMBOL);
                            }
                            break;
                        case 4:
                            {
                            this.setState(7809);
                            localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                            this.setState(7810);
                            this.match(MySQLParser.CHAR_SYMBOL);
                            this.setState(7811);
                            this.match(MySQLParser.VARYING_SYMBOL);
                            }
                            break;
                        case 5:
                            {
                            this.setState(7812);
                            localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                            this.setState(7813);
                            this.match(MySQLParser.VARYING_SYMBOL);
                            }
                            break;
                    }
                    this.setState(7816);
                    this.fieldLength();
                    this.setState(7818);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 967, this.getContext())) {
                        case 1:
                            {
                            this.setState(7817);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(7820);
                    localctx._type_ = this.match(MySQLParser.VARBINARY_SYMBOL);
                    this.setState(7821);
                    this.fieldLength();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(7822);
                    localctx._type_ = this.match(MySQLParser.YEAR_SYMBOL);
                    this.setState(7824);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 968, this.getContext())) {
                        case 1:
                            {
                            this.setState(7823);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(7827);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 969, this.getContext())) {
                        case 1:
                            {
                            this.setState(7826);
                            this.fieldOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(7829);
                    localctx._type_ = this.match(MySQLParser.DATE_SYMBOL);
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(7830);
                    localctx._type_ = this.match(MySQLParser.TIME_SYMBOL);
                    this.setState(7832);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 970, this.getContext())) {
                        case 1:
                            {
                            this.setState(7831);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(7834);
                    localctx._type_ = this.match(MySQLParser.TIMESTAMP_SYMBOL);
                    this.setState(7836);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 971, this.getContext())) {
                        case 1:
                            {
                            this.setState(7835);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(7838);
                    localctx._type_ = this.match(MySQLParser.DATETIME_SYMBOL);
                    this.setState(7840);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 972, this.getContext())) {
                        case 1:
                            {
                            this.setState(7839);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(7842);
                    localctx._type_ = this.match(MySQLParser.TINYBLOB_SYMBOL);
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(7843);
                    localctx._type_ = this.match(MySQLParser.BLOB_SYMBOL);
                    this.setState(7845);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 973, this.getContext())) {
                        case 1:
                            {
                            this.setState(7844);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(7847);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 290 || _la === 330)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(7848);
                    localctx._type_ = this.match(MySQLParser.LONG_SYMBOL);
                    this.setState(7849);
                    this.match(MySQLParser.VARBINARY_SYMBOL);
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(7850);
                    localctx._type_ = this.match(MySQLParser.LONG_SYMBOL);
                    this.setState(7854);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 974, this.getContext())) {
                        case 1:
                            {
                            this.setState(7851);
                            this.match(MySQLParser.CHAR_SYMBOL);
                            this.setState(7852);
                            this.match(MySQLParser.VARYING_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(7853);
                            this.match(MySQLParser.VARCHAR_SYMBOL);
                            }
                            break;
                    }
                    this.setState(7857);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 975, this.getContext())) {
                        case 1:
                            {
                            this.setState(7856);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(7859);
                    localctx._type_ = this.match(MySQLParser.TINYTEXT_SYMBOL);
                    this.setState(7861);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 976, this.getContext())) {
                        case 1:
                            {
                            this.setState(7860);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(7863);
                    localctx._type_ = this.match(MySQLParser.TEXT_SYMBOL);
                    this.setState(7865);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 977, this.getContext())) {
                        case 1:
                            {
                            this.setState(7864);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(7868);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 978, this.getContext())) {
                        case 1:
                            {
                            this.setState(7867);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(7870);
                    localctx._type_ = this.match(MySQLParser.MEDIUMTEXT_SYMBOL);
                    this.setState(7872);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 979, this.getContext())) {
                        case 1:
                            {
                            this.setState(7871);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(7874);
                    localctx._type_ = this.match(MySQLParser.LONGTEXT_SYMBOL);
                    this.setState(7876);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 980, this.getContext())) {
                        case 1:
                            {
                            this.setState(7875);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(7878);
                    localctx._type_ = this.match(MySQLParser.ENUM_SYMBOL);
                    this.setState(7879);
                    this.stringList();
                    this.setState(7881);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 981, this.getContext())) {
                        case 1:
                            {
                            this.setState(7880);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(7883);
                    localctx._type_ = this.match(MySQLParser.SET_SYMBOL);
                    this.setState(7884);
                    this.stringList();
                    this.setState(7886);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 982, this.getContext())) {
                        case 1:
                            {
                            this.setState(7885);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(7888);
                    localctx._type_ = this.match(MySQLParser.SERIAL_SYMBOL);
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(7889);
                    localctx._type_ = this.match(MySQLParser.JSON_SYMBOL);
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                    this.setState(7890);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 211 || _la === 212 || _la === 279 || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 7) !== 0) || _la === 411 || _la === 412)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nchar(): NcharContext {
        let localctx = new NcharContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1112, MySQLParser.RULE_nchar);
        try {
            this.setState(7896);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.NCHAR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7893);
                localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                }
                break;
            case MySQLParser.NATIONAL_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7894);
                localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                this.setState(7895);
                this.match(MySQLParser.CHAR_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public realType(): RealTypeContext {
        let localctx = new RealTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1114, MySQLParser.RULE_realType);
        try {
            this.setState(7903);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.REAL_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7898);
                localctx._type_ = this.match(MySQLParser.REAL_SYMBOL);
                }
                break;
            case MySQLParser.DOUBLE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7899);
                localctx._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
                this.setState(7901);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 985, this.getContext())) {
                    case 1:
                        {
                        this.setState(7900);
                        this.match(MySQLParser.PRECISION_SYMBOL);
                        }
                        break;
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldLength(): FieldLengthContext {
        let localctx = new FieldLengthContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1116, MySQLParser.RULE_fieldLength);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7905);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7908);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 987, this.getContext())) {
                case 1:
                    {
                    this.setState(7906);
                    this.real_ulonglong_number();
                    }
                    break;
                case 2:
                    {
                    this.setState(7907);
                    this.match(MySQLParser.DECIMAL_NUMBER);
                    }
                    break;
            }
            this.setState(7910);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldOptions(): FieldOptionsContext {
        let localctx = new FieldOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1118, MySQLParser.RULE_fieldOptions);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7913);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(7912);
                            _la = this.input().LA(1);
                            if(!(_la === 512 || _la === 612 || _la === 657)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(7915);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 988, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext {
        let localctx = new CharsetWithOptBinaryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1120, MySQLParser.RULE_charsetWithOptBinary);
        try {
            this.setState(7931);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 991, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7917);
                    this.ascii();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7918);
                    this.unicode();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7919);
                    this.match(MySQLParser.BYTE_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7920);
                    this.charset();
                    this.setState(7921);
                    this.charsetName();
                    this.setState(7923);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 989, this.getContext())) {
                        case 1:
                            {
                            this.setState(7922);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7925);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(7929);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 990, this.getContext())) {
                        case 1:
                            {
                            this.setState(7926);
                            this.charset();
                            this.setState(7927);
                            this.charsetName();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ascii(): AsciiContext {
        let localctx = new AsciiContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1122, MySQLParser.RULE_ascii);
        try {
            this.setState(7939);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ASCII_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7933);
                this.match(MySQLParser.ASCII_SYMBOL);
                this.setState(7935);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 992, this.getContext())) {
                    case 1:
                        {
                        this.setState(7934);
                        this.match(MySQLParser.BINARY_SYMBOL);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7937);
                this.match(MySQLParser.BINARY_SYMBOL);
                this.setState(7938);
                this.match(MySQLParser.ASCII_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public unicode(): UnicodeContext {
        let localctx = new UnicodeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1124, MySQLParser.RULE_unicode);
        try {
            this.setState(7947);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.UNICODE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7941);
                this.match(MySQLParser.UNICODE_SYMBOL);
                this.setState(7943);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 994, this.getContext())) {
                    case 1:
                        {
                        this.setState(7942);
                        this.match(MySQLParser.BINARY_SYMBOL);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7945);
                this.match(MySQLParser.BINARY_SYMBOL);
                this.setState(7946);
                this.match(MySQLParser.UNICODE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public wsNumCodepoints(): WsNumCodepointsContext {
        let localctx = new WsNumCodepointsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1126, MySQLParser.RULE_wsNumCodepoints);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7949);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7950);
            this.real_ulong_number();
            this.setState(7951);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext {
        let localctx = new TypeDatetimePrecisionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1128, MySQLParser.RULE_typeDatetimePrecision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7953);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7954);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(7955);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionDatetimePrecision(): FunctionDatetimePrecisionContext {
        let localctx = new FunctionDatetimePrecisionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1130, MySQLParser.RULE_functionDatetimePrecision);
        try {
            this.setState(7962);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 996, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7958);
                    this.parentheses();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7959);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(7960);
                    this.match(MySQLParser.INT_NUMBER);
                    this.setState(7961);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public charsetName(): CharsetNameContext {
        let localctx = new CharsetNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1132, MySQLParser.RULE_charsetName);
        try {
            this.setState(7968);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 997, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7964);
                    this.textOrIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7965);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7966);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(7967);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public collationName(): CollationNameContext {
        let localctx = new CollationNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1134, MySQLParser.RULE_collationName);
        try {
            this.setState(7975);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 998, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7970);
                    this.textOrIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7971);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(7972);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7973);
                    if (!(this.serverVersion >= 80018)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80018");
                    }
                    this.setState(7974);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTableOptions(): CreateTableOptionsContext {
        let localctx = new CreateTableOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1136, MySQLParser.RULE_createTableOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7977);
            this.createTableOption();
            this.setState(7984);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1000, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(7979);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 999, this.getContext())) {
                        case 1:
                            {
                            this.setState(7978);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(7981);
                    this.createTableOption();
                    }
                    }
                }
                this.setState(7986);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1000, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTableOptionsEtc(): CreateTableOptionsEtcContext {
        let localctx = new CreateTableOptionsEtcContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1138, MySQLParser.RULE_createTableOptionsEtc);
        try {
            this.setState(7992);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1002, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7987);
                    this.createTableOptions();
                    this.setState(7989);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1001, this.getContext())) {
                        case 1:
                            {
                            this.setState(7988);
                            this.createPartitioningEtc();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7991);
                    this.createPartitioningEtc();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createPartitioningEtc(): CreatePartitioningEtcContext {
        let localctx = new CreatePartitioningEtcContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1140, MySQLParser.RULE_createPartitioningEtc);
        try {
            this.setState(7999);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1004, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7994);
                    this.partitionClause();
                    this.setState(7996);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1003, this.getContext())) {
                        case 1:
                            {
                            this.setState(7995);
                            this.duplicateAsQe();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7998);
                    this.duplicateAsQe();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTableOptionsSpaceSeparated(): CreateTableOptionsSpaceSeparatedContext {
        let localctx = new CreateTableOptionsSpaceSeparatedContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1142, MySQLParser.RULE_createTableOptionsSpaceSeparated);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8002);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(8001);
                            this.createTableOption();
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(8004);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 1005, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTableOption(): CreateTableOptionContext {
        let localctx = new CreateTableOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1144, MySQLParser.RULE_createTableOption);
        let _la: number;
        try {
            this.setState(8146);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1031, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8006);
                    localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
                    this.setState(8008);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1006, this.getContext())) {
                        case 1:
                            {
                            this.setState(8007);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8010);
                    this.engineRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8011);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(8012);
                    localctx._option = this.match(MySQLParser.SECONDARY_ENGINE_SYMBOL);
                    this.setState(8014);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1007, this.getContext())) {
                        case 1:
                            {
                            this.setState(8013);
                            this.equal();
                            }
                            break;
                    }
                    this.setState(8018);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1008, this.getContext())) {
                        case 1:
                            {
                            this.setState(8016);
                            this.match(MySQLParser.NULL_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(8017);
                            this.textOrIdentifier();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8020);
                    localctx._option = this.match(MySQLParser.MAX_ROWS_SYMBOL);
                    this.setState(8022);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8021);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8024);
                    this.ulonglong_number();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8025);
                    localctx._option = this.match(MySQLParser.MIN_ROWS_SYMBOL);
                    this.setState(8027);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8026);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8029);
                    this.ulonglong_number();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(8030);
                    localctx._option = this.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL);
                    this.setState(8032);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8031);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8034);
                    this.ulonglong_number();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(8035);
                    localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.setState(8037);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1012, this.getContext())) {
                        case 1:
                            {
                            this.setState(8036);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8039);
                    this.textStringLiteral();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(8040);
                    localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                    this.setState(8042);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1013, this.getContext())) {
                        case 1:
                            {
                            this.setState(8041);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8044);
                    this.textStringLiteral();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(8045);
                    localctx._option = this.match(MySQLParser.COMPRESSION_SYMBOL);
                    this.setState(8047);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1014, this.getContext())) {
                        case 1:
                            {
                            this.setState(8046);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8049);
                    this.textString();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(8050);
                    localctx._option = this.match(MySQLParser.ENCRYPTION_SYMBOL);
                    this.setState(8052);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1015, this.getContext())) {
                        case 1:
                            {
                            this.setState(8051);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8054);
                    this.textString();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(8055);
                    localctx._option = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                    this.setState(8057);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8056);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8059);
                    this.ulonglong_number();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(8060);
                    localctx._option = this.match(MySQLParser.PACK_KEYS_SYMBOL);
                    this.setState(8062);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8061);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8064);
                    this.ternaryOption();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(8065);
                    localctx._option = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(((((_la - 544)) & ~0x1F) === 0 && ((1 << (_la - 544)) & 7) !== 0))) {
                        localctx._option = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(8067);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8066);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8069);
                    this.ternaryOption();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(8070);
                    localctx._option = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 61 || _la === 575)) {
                        localctx._option = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(8072);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8071);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8074);
                    this.ulong_number();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(8075);
                    localctx._option = this.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL);
                    this.setState(8077);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8076);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8079);
                    this.ulong_number();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(8080);
                    localctx._option = this.match(MySQLParser.ROW_FORMAT_SYMBOL);
                    this.setState(8082);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8081);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8084);
                    localctx._format = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 78 || _la === 80 || _la === 128 || _la === 152 || _la === 192 || _la === 442)) {
                        localctx._format = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(8085);
                    localctx._option = this.match(MySQLParser.UNION_SYMBOL);
                    this.setState(8087);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8086);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8089);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8090);
                    this.tableRefList();
                    this.setState(8091);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(8093);
                    this.defaultCharset();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(8094);
                    this.defaultCollation();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(8095);
                    localctx._option = this.match(MySQLParser.INSERT_METHOD_SYMBOL);
                    this.setState(8097);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8096);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8099);
                    localctx._method = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 191 || _la === 268 || _la === 373)) {
                        localctx._method = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(8100);
                    localctx._option = this.match(MySQLParser.DATA_SYMBOL);
                    this.setState(8101);
                    this.match(MySQLParser.DIRECTORY_SYMBOL);
                    this.setState(8103);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1024, this.getContext())) {
                        case 1:
                            {
                            this.setState(8102);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8105);
                    this.textString();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(8106);
                    localctx._option = this.match(MySQLParser.INDEX_SYMBOL);
                    this.setState(8107);
                    this.match(MySQLParser.DIRECTORY_SYMBOL);
                    this.setState(8109);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1025, this.getContext())) {
                        case 1:
                            {
                            this.setState(8108);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8111);
                    this.textString();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(8112);
                    localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                    this.setState(8114);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1026, this.getContext())) {
                        case 1:
                            {
                            this.setState(8113);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8116);
                    this.identifier();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(8117);
                    localctx._option = this.match(MySQLParser.STORAGE_SYMBOL);
                    this.setState(8118);
                    _la = this.input().LA(1);
                    if(!(_la === 142 || _la === 334)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(8119);
                    localctx._option = this.match(MySQLParser.CONNECTION_SYMBOL);
                    this.setState(8121);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1027, this.getContext())) {
                        case 1:
                            {
                            this.setState(8120);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8123);
                    this.textString();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(8124);
                    localctx._option = this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                    this.setState(8126);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 750) {
                        {
                        this.setState(8125);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8128);
                    this.ulonglong_number();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(8129);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8130);
                    localctx._option = this.match(MySQLParser.START_SYMBOL);
                    this.setState(8131);
                    this.match(MySQLParser.TRANSACTION_SYMBOL);
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(8132);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8133);
                    localctx._option = this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(8135);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1029, this.getContext())) {
                        case 1:
                            {
                            this.setState(8134);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8137);
                    this.jsonAttribute();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(8138);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8139);
                    localctx._option = this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(8141);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1030, this.getContext())) {
                        case 1:
                            {
                            this.setState(8140);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8143);
                    this.jsonAttribute();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(8144);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8145);
                    this.tsOptionAutoextendSize();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ternaryOption(): TernaryOptionContext {
        let localctx = new TernaryOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1146, MySQLParser.RULE_ternaryOption);
        try {
            this.setState(8150);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.HEX_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8148);
                this.ulong_number();
                }
                break;
            case MySQLParser.DEFAULT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8149);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultCollation(): DefaultCollationContext {
        let localctx = new DefaultCollationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1148, MySQLParser.RULE_defaultCollation);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8153);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 128) {
                {
                this.setState(8152);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.setState(8155);
            this.match(MySQLParser.COLLATE_SYMBOL);
            this.setState(8157);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1034, this.getContext())) {
                case 1:
                    {
                    this.setState(8156);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(8159);
            this.collationName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultEncryption(): DefaultEncryptionContext {
        let localctx = new DefaultEncryptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1150, MySQLParser.RULE_defaultEncryption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8162);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 128) {
                {
                this.setState(8161);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.setState(8164);
            this.match(MySQLParser.ENCRYPTION_SYMBOL);
            this.setState(8166);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1036, this.getContext())) {
                case 1:
                    {
                    this.setState(8165);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(8168);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultCharset(): DefaultCharsetContext {
        let localctx = new DefaultCharsetContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1152, MySQLParser.RULE_defaultCharset);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8171);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 128) {
                {
                this.setState(8170);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.setState(8173);
            this.charset();
            this.setState(8175);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1038, this.getContext())) {
                case 1:
                    {
                    this.setState(8174);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(8177);
            this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionClause(): PartitionClauseContext {
        let localctx = new PartitionClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1154, MySQLParser.RULE_partitionClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8179);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(8180);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8181);
            this.partitionTypeDef();
            this.setState(8184);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1039, this.getContext())) {
                case 1:
                    {
                    this.setState(8182);
                    this.match(MySQLParser.PARTITIONS_SYMBOL);
                    this.setState(8183);
                    this.real_ulong_number();
                    }
                    break;
            }
            this.setState(8187);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1040, this.getContext())) {
                case 1:
                    {
                    this.setState(8186);
                    this.subPartitions();
                    }
                    break;
            }
            this.setState(8190);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1041, this.getContext())) {
                case 1:
                    {
                    this.setState(8189);
                    this.partitionDefinitions();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionTypeDef(): PartitionTypeDefContext {
        let localctx = new PartitionTypeDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1156, MySQLParser.RULE_partitionTypeDef);
        let _la: number;
        try {
            this.setState(8225);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1048, this.getContext())) {
                case 1:
                    localctx = new PartitionDefKeyContext(localctx);
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8193);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 277) {
                        {
                        this.setState(8192);
                        this.match(MySQLParser.LINEAR_SYMBOL);
                        }
                    }

                    this.setState(8195);
                    this.match(MySQLParser.KEY_SYMBOL);
                    this.setState(8197);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 9) {
                        {
                        this.setState(8196);
                        this.partitionKeyAlgorithm();
                        }
                    }

                    this.setState(8199);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8201);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1044, this.getContext())) {
                        case 1:
                            {
                            this.setState(8200);
                            this.identifierList();
                            }
                            break;
                    }
                    this.setState(8203);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    localctx = new PartitionDefHashContext(localctx);
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8205);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 277) {
                        {
                        this.setState(8204);
                        this.match(MySQLParser.LINEAR_SYMBOL);
                        }
                    }

                    this.setState(8207);
                    this.match(MySQLParser.HASH_SYMBOL);
                    this.setState(8208);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8209);
                    this.bitExpr(0);
                    this.setState(8210);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 3:
                    localctx = new PartitionDefRangeListContext(localctx);
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8212);
                    _la = this.input().LA(1);
                    if(!(_la === 280 || _la === 432)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(8223);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.OPEN_PAR_SYMBOL:
                        {
                        this.setState(8213);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8214);
                        this.bitExpr(0);
                        this.setState(8215);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case MySQLParser.COLUMNS_SYMBOL:
                        {
                        this.setState(8217);
                        this.match(MySQLParser.COLUMNS_SYMBOL);
                        this.setState(8218);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8220);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1046, this.getContext())) {
                            case 1:
                                {
                                this.setState(8219);
                                this.identifierList();
                                }
                                break;
                        }
                        this.setState(8222);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public subPartitions(): SubPartitionsContext {
        let localctx = new SubPartitionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1158, MySQLParser.RULE_subPartitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8227);
            this.match(MySQLParser.SUBPARTITION_SYMBOL);
            this.setState(8228);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8230);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 277) {
                {
                this.setState(8229);
                this.match(MySQLParser.LINEAR_SYMBOL);
                }
            }

            this.setState(8242);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.HASH_SYMBOL:
                {
                this.setState(8232);
                this.match(MySQLParser.HASH_SYMBOL);
                this.setState(8233);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8234);
                this.bitExpr(0);
                this.setState(8235);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.KEY_SYMBOL:
                {
                this.setState(8237);
                this.match(MySQLParser.KEY_SYMBOL);
                this.setState(8239);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 9) {
                    {
                    this.setState(8238);
                    this.partitionKeyAlgorithm();
                    }
                }

                this.setState(8241);
                this.identifierListWithParentheses();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(8246);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1052, this.getContext())) {
                case 1:
                    {
                    this.setState(8244);
                    this.match(MySQLParser.SUBPARTITIONS_SYMBOL);
                    this.setState(8245);
                    this.real_ulong_number();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
        let localctx = new PartitionKeyAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1160, MySQLParser.RULE_partitionKeyAlgorithm);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8248);
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.setState(8249);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(8250);
            this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionDefinitions(): PartitionDefinitionsContext {
        let localctx = new PartitionDefinitionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1162, MySQLParser.RULE_partitionDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8252);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8253);
            this.partitionDefinition();
            this.setState(8258);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(8254);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8255);
                this.partitionDefinition();
                }
                }
                this.setState(8260);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8261);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionDefinition(): PartitionDefinitionContext {
        let localctx = new PartitionDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1164, MySQLParser.RULE_partitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8263);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(8264);
            this.identifier();
            this.setState(8275);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1055, this.getContext())) {
                case 1:
                    {
                    this.setState(8265);
                    this.match(MySQLParser.VALUES_SYMBOL);
                    this.setState(8266);
                    this.match(MySQLParser.LESS_SYMBOL);
                    this.setState(8267);
                    this.match(MySQLParser.THAN_SYMBOL);
                    this.setState(8270);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.OPEN_PAR_SYMBOL:
                        {
                        this.setState(8268);
                        this.partitionValueItemListParen();
                        }
                        break;
                    case MySQLParser.MAXVALUE_SYMBOL:
                        {
                        this.setState(8269);
                        this.match(MySQLParser.MAXVALUE_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(8272);
                    this.match(MySQLParser.VALUES_SYMBOL);
                    this.setState(8273);
                    this.match(MySQLParser.IN_SYMBOL);
                    this.setState(8274);
                    this.partitionValuesIn();
                    }
                    break;
            }
            this.setState(8280);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 75 || _la === 112 || _la === 163 || _la === 236 || _la === 323 || _la === 344 || _la === 368 || _la === 553 || _la === 572) {
                {
                {
                this.setState(8277);
                this.partitionOption();
                }
                }
                this.setState(8282);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8294);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 776) {
                {
                this.setState(8283);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8284);
                this.subpartitionDefinition();
                this.setState(8289);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                    {
                    this.setState(8285);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8286);
                    this.subpartitionDefinition();
                    }
                    }
                    this.setState(8291);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(8292);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionValuesIn(): PartitionValuesInContext {
        let localctx = new PartitionValuesInContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1166, MySQLParser.RULE_partitionValuesIn);
        let _la: number;
        try {
            this.setState(8308);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1060, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8296);
                    this.partitionValueItemListParen();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8297);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8298);
                    this.partitionValueItemListParen();
                    this.setState(8303);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 773) {
                        {
                        {
                        this.setState(8299);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(8300);
                        this.partitionValueItemListParen();
                        }
                        }
                        this.setState(8305);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    this.setState(8306);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionOption(): PartitionOptionContext {
        let localctx = new PartitionOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1168, MySQLParser.RULE_partitionOption);
        let _la: number;
        try {
            this.setState(8344);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.TABLESPACE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8310);
                localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.setState(8312);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1061, this.getContext())) {
                    case 1:
                        {
                        this.setState(8311);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8314);
                this.identifier();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8316);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 553) {
                    {
                    this.setState(8315);
                    this.match(MySQLParser.STORAGE_SYMBOL);
                    }
                }

                this.setState(8318);
                localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
                this.setState(8320);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1063, this.getContext())) {
                    case 1:
                        {
                        this.setState(8319);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8322);
                this.engineRef();
                }
                break;
            case MySQLParser.NODEGROUP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(8323);
                localctx._option = this.match(MySQLParser.NODEGROUP_SYMBOL);
                this.setState(8325);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 750) {
                    {
                    this.setState(8324);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.setState(8327);
                this.real_ulong_number();
                }
                break;
            case MySQLParser.MAX_ROWS_SYMBOL:
            case MySQLParser.MIN_ROWS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(8328);
                localctx._option = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 323 || _la === 344)) {
                    localctx._option = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(8330);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 750) {
                    {
                    this.setState(8329);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.setState(8332);
                this.real_ulong_number();
                }
                break;
            case MySQLParser.DATA_SYMBOL:
            case MySQLParser.INDEX_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(8333);
                localctx._option = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 112 || _la === 236)) {
                    localctx._option = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(8334);
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.setState(8336);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1066, this.getContext())) {
                    case 1:
                        {
                        this.setState(8335);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8338);
                this.textLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(8339);
                localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(8341);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1067, this.getContext())) {
                    case 1:
                        {
                        this.setState(8340);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8343);
                this.textLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext {
        let localctx = new SubpartitionDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1170, MySQLParser.RULE_subpartitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8346);
            this.match(MySQLParser.SUBPARTITION_SYMBOL);
            this.setState(8347);
            this.textOrIdentifier();
            this.setState(8351);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 75 || _la === 112 || _la === 163 || _la === 236 || _la === 323 || _la === 344 || _la === 368 || _la === 553 || _la === 572) {
                {
                {
                this.setState(8348);
                this.partitionOption();
                }
                }
                this.setState(8353);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionValueItemListParen(): PartitionValueItemListParenContext {
        let localctx = new PartitionValueItemListParenContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1172, MySQLParser.RULE_partitionValueItemListParen);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8354);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8355);
            this.partitionValueItem();
            this.setState(8360);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(8356);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8357);
                this.partitionValueItem();
                }
                }
                this.setState(8362);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8363);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionValueItem(): PartitionValueItemContext {
        let localctx = new PartitionValueItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1174, MySQLParser.RULE_partitionValueItem);
        try {
            this.setState(8367);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1071, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8365);
                    this.bitExpr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8366);
                    this.match(MySQLParser.MAXVALUE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public definerClause(): DefinerClauseContext {
        let localctx = new DefinerClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1176, MySQLParser.RULE_definerClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8369);
            this.match(MySQLParser.DEFINER_SYMBOL);
            this.setState(8370);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(8371);
            this.user();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifExists(): IfExistsContext {
        let localctx = new IfExistsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1178, MySQLParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8373);
            this.match(MySQLParser.IF_SYMBOL);
            this.setState(8374);
            this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifNotExists(): IfNotExistsContext {
        let localctx = new IfNotExistsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1180, MySQLParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8376);
            this.match(MySQLParser.IF_SYMBOL);
            this.setState(8377);
            this.notRule();
            this.setState(8378);
            this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ignoreUnknownUser(): IgnoreUnknownUserContext {
        let localctx = new IgnoreUnknownUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1182, MySQLParser.RULE_ignoreUnknownUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8380);
            this.match(MySQLParser.IGNORE_SYMBOL);
            this.setState(8381);
            this.match(MySQLParser.UNKNOWN_SYMBOL);
            this.setState(8382);
            this.match(MySQLParser.USER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public procedureParameter(): ProcedureParameterContext {
        let localctx = new ProcedureParameterContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1184, MySQLParser.RULE_procedureParameter);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8385);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1072, this.getContext())) {
                case 1:
                    {
                    this.setState(8384);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 240 || _la === 251 || _la === 397)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
            this.setState(8387);
            this.functionParameter();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionParameter(): FunctionParameterContext {
        let localctx = new FunctionParameterContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1186, MySQLParser.RULE_functionParameter);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8389);
            this.parameterName();
            this.setState(8390);
            this.typeWithOptCollate();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public collate(): CollateContext {
        let localctx = new CollateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1188, MySQLParser.RULE_collate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8392);
            this.match(MySQLParser.COLLATE_SYMBOL);
            this.setState(8393);
            this.collationName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public typeWithOptCollate(): TypeWithOptCollateContext {
        let localctx = new TypeWithOptCollateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1190, MySQLParser.RULE_typeWithOptCollate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8395);
            this.dataType();
            this.setState(8397);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1073, this.getContext())) {
                case 1:
                    {
                    this.setState(8396);
                    this.collate();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public schemaIdentifierPair(): SchemaIdentifierPairContext {
        let localctx = new SchemaIdentifierPairContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1192, MySQLParser.RULE_schemaIdentifierPair);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8399);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8400);
            this.schemaRef();
            this.setState(8401);
            this.match(MySQLParser.COMMA_SYMBOL);
            this.setState(8402);
            this.schemaRef();
            this.setState(8403);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewRefList(): ViewRefListContext {
        let localctx = new ViewRefListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1194, MySQLParser.RULE_viewRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8405);
            this.viewRef();
            this.setState(8410);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(8406);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8407);
                this.viewRef();
                }
                }
                this.setState(8412);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public updateList(): UpdateListContext {
        let localctx = new UpdateListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1196, MySQLParser.RULE_updateList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8413);
            this.updateElement();
            this.setState(8418);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1075, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8414);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8415);
                    this.updateElement();
                    }
                    }
                }
                this.setState(8420);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1075, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public updateElement(): UpdateElementContext {
        let localctx = new UpdateElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1198, MySQLParser.RULE_updateElement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8421);
            this.columnRef();
            this.setState(8422);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(8425);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1076, this.getContext())) {
                case 1:
                    {
                    this.setState(8423);
                    this.expr(0);
                    }
                    break;
                case 2:
                    {
                    this.setState(8424);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public charsetClause(): CharsetClauseContext {
        let localctx = new CharsetClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1200, MySQLParser.RULE_charsetClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8427);
            this.charset();
            this.setState(8428);
            this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldsClause(): FieldsClauseContext {
        let localctx = new FieldsClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1202, MySQLParser.RULE_fieldsClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8430);
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.setState(8432);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(8431);
                            this.fieldTerm();
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(8434);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 1077, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldTerm(): FieldTermContext {
        let localctx = new FieldTermContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1204, MySQLParser.RULE_fieldTerm);
        let _la: number;
        try {
            this.setState(8448);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.TERMINATED_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8436);
                this.match(MySQLParser.TERMINATED_SYMBOL);
                this.setState(8437);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8438);
                this.textString();
                }
                break;
            case MySQLParser.ENCLOSED_SYMBOL:
            case MySQLParser.OPTIONALLY_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8440);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 392) {
                    {
                    this.setState(8439);
                    this.match(MySQLParser.OPTIONALLY_SYMBOL);
                    }
                }

                this.setState(8442);
                this.match(MySQLParser.ENCLOSED_SYMBOL);
                this.setState(8443);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8444);
                this.textString();
                }
                break;
            case MySQLParser.ESCAPED_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(8445);
                this.match(MySQLParser.ESCAPED_SYMBOL);
                this.setState(8446);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8447);
                this.textString();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public linesClause(): LinesClauseContext {
        let localctx = new LinesClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1206, MySQLParser.RULE_linesClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8450);
            this.match(MySQLParser.LINES_SYMBOL);
            this.setState(8452);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(8451);
                            this.lineTerm();
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(8454);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 1080, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lineTerm(): LineTermContext {
        let localctx = new LineTermContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1208, MySQLParser.RULE_lineTerm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8456);
            _la = this.input().LA(1);
            if(!(_la === 541 || _la === 579)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(8457);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8458);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userList(): UserListContext {
        let localctx = new UserListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1210, MySQLParser.RULE_userList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8460);
            this.user();
            this.setState(8465);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1081, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8461);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8462);
                    this.user();
                    }
                    }
                }
                this.setState(8467);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1081, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUserList(): CreateUserListContext {
        let localctx = new CreateUserListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1212, MySQLParser.RULE_createUserList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8468);
            this.createUser();
            this.setState(8473);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1082, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8469);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8470);
                    this.createUser();
                    }
                    }
                }
                this.setState(8475);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1082, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUser(): CreateUserContext {
        let localctx = new CreateUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1214, MySQLParser.RULE_createUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8476);
            this.user();
            this.setState(8486);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1085, this.getContext())) {
                case 1:
                    {
                    this.setState(8477);
                    this.identification();
                    this.setState(8479);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1083, this.getContext())) {
                        case 1:
                            {
                            this.setState(8478);
                            this.createUserWithMfa();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(8481);
                    this.identifiedWithPlugin();
                    this.setState(8483);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1084, this.getContext())) {
                        case 1:
                            {
                            this.setState(8482);
                            this.initialAuth();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.setState(8485);
                    this.createUserWithMfa();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUserWithMfa(): CreateUserWithMfaContext {
        let localctx = new CreateUserWithMfaContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1216, MySQLParser.RULE_createUserWithMfa);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8488);
            this.match(MySQLParser.AND_SYMBOL);
            this.setState(8489);
            this.identification();
            this.setState(8492);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1086, this.getContext())) {
                case 1:
                    {
                    this.setState(8490);
                    this.match(MySQLParser.AND_SYMBOL);
                    this.setState(8491);
                    this.identification();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identification(): IdentificationContext {
        let localctx = new IdentificationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1218, MySQLParser.RULE_identification);
        try {
            this.setState(8500);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1087, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8494);
                    this.identifiedByPassword();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8495);
                    this.identifiedByRandomPassword();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8496);
                    this.identifiedWithPlugin();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8497);
                    this.identifiedWithPluginAsAuth();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(8498);
                    this.identifiedWithPluginByPassword();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(8499);
                    this.identifiedWithPluginByRandomPassword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedByPassword(): IdentifiedByPasswordContext {
        let localctx = new IdentifiedByPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1220, MySQLParser.RULE_identifiedByPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8502);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8503);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8504);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext {
        let localctx = new IdentifiedByRandomPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1222, MySQLParser.RULE_identifiedByRandomPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8506);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8507);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8508);
            this.match(MySQLParser.RANDOM_SYMBOL);
            this.setState(8509);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext {
        let localctx = new IdentifiedWithPluginContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1224, MySQLParser.RULE_identifiedWithPlugin);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8511);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8512);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(8513);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext {
        let localctx = new IdentifiedWithPluginAsAuthContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1226, MySQLParser.RULE_identifiedWithPluginAsAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8515);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8516);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(8517);
            this.textOrIdentifier();
            this.setState(8518);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(8519);
            this.textStringHash();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext {
        let localctx = new IdentifiedWithPluginByPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1228, MySQLParser.RULE_identifiedWithPluginByPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8521);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8522);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(8523);
            this.textOrIdentifier();
            this.setState(8524);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8525);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext {
        let localctx = new IdentifiedWithPluginByRandomPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1230, MySQLParser.RULE_identifiedWithPluginByRandomPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8527);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8528);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(8529);
            this.textOrIdentifier();
            this.setState(8530);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8531);
            this.match(MySQLParser.RANDOM_SYMBOL);
            this.setState(8532);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public initialAuth(): InitialAuthContext {
        let localctx = new InitialAuthContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1232, MySQLParser.RULE_initialAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8534);
            this.match(MySQLParser.INITIAL_SYMBOL);
            this.setState(8535);
            this.match(MySQLParser.AUTHENTICATION_SYMBOL);
            this.setState(8539);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1088, this.getContext())) {
                case 1:
                    {
                    this.setState(8536);
                    this.identifiedByRandomPassword();
                    }
                    break;
                case 2:
                    {
                    this.setState(8537);
                    this.identifiedWithPluginAsAuth();
                    }
                    break;
                case 3:
                    {
                    this.setState(8538);
                    this.identifiedByPassword();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext {
        let localctx = new RetainCurrentPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1234, MySQLParser.RULE_retainCurrentPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8541);
            this.match(MySQLParser.RETAIN_SYMBOL);
            this.setState(8542);
            this.match(MySQLParser.CURRENT_SYMBOL);
            this.setState(8543);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public discardOldPassword(): DiscardOldPasswordContext {
        let localctx = new DiscardOldPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1236, MySQLParser.RULE_discardOldPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8545);
            this.match(MySQLParser.DISCARD_SYMBOL);
            this.setState(8546);
            this.match(MySQLParser.OLD_SYMBOL);
            this.setState(8547);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userRegistration(): UserRegistrationContext {
        let localctx = new UserRegistrationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1238, MySQLParser.RULE_userRegistration);
        try {
            this.setState(8564);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1089, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8549);
                    this.factor();
                    this.setState(8550);
                    this.match(MySQLParser.INITIATE_SYMBOL);
                    this.setState(8551);
                    this.match(MySQLParser.REGISTRATION_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8553);
                    this.factor();
                    this.setState(8554);
                    this.match(MySQLParser.UNREGISTER_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8556);
                    this.factor();
                    this.setState(8557);
                    this.match(MySQLParser.FINISH_SYMBOL);
                    this.setState(8558);
                    this.match(MySQLParser.REGISTRATION_SYMBOL);
                    this.setState(8559);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(8560);
                    this.match(MySQLParser.CHALLENGE_RESPONSE_SYMBOL);
                    this.setState(8561);
                    this.match(MySQLParser.AS_SYMBOL);
                    this.setState(8562);
                    this.textStringHash();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public factor(): FactorContext {
        let localctx = new FactorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1240, MySQLParser.RULE_factor);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8566);
            this.numLiteral();
            this.setState(8567);
            this.match(MySQLParser.FACTOR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replacePassword(): ReplacePasswordContext {
        let localctx = new ReplacePasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1242, MySQLParser.RULE_replacePassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8569);
            this.match(MySQLParser.REPLACE_SYMBOL);
            this.setState(8570);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext {
        let localctx = new UserIdentifierOrTextContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1244, MySQLParser.RULE_userIdentifierOrText);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8572);
            this.textOrIdentifier();
            this.setState(8574);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1090, this.getContext())) {
                case 1:
                    {
                    this.setState(8573);
                    this.userVariable();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public user(): UserContext {
        let localctx = new UserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1246, MySQLParser.RULE_user);
        try {
            this.setState(8581);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1092, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8576);
                    this.userIdentifierOrText();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8577);
                    this.match(MySQLParser.CURRENT_USER_SYMBOL);
                    this.setState(8579);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1091, this.getContext())) {
                        case 1:
                            {
                            this.setState(8578);
                            this.parentheses();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public likeClause(): LikeClauseContext {
        let localctx = new LikeClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1248, MySQLParser.RULE_likeClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8583);
            this.match(MySQLParser.LIKE_SYMBOL);
            this.setState(8584);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public likeOrWhere(): LikeOrWhereContext {
        let localctx = new LikeOrWhereContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1250, MySQLParser.RULE_likeOrWhere);
        try {
            this.setState(8588);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.LIKE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8586);
                this.likeClause();
                }
                break;
            case MySQLParser.WHERE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8587);
                this.whereClause();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onlineOption(): OnlineOptionContext {
        let localctx = new OnlineOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1252, MySQLParser.RULE_onlineOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8590);
            _la = this.input().LA(1);
            if(!(_la === 380 || _la === 385)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public noWriteToBinLog(): NoWriteToBinLogContext {
        let localctx = new NoWriteToBinLogContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1254, MySQLParser.RULE_noWriteToBinLog);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8592);
            _la = this.input().LA(1);
            if(!(_la === 284 || _la === 375)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public usePartition(): UsePartitionContext {
        let localctx = new UsePartitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1256, MySQLParser.RULE_usePartition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8594);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(8595);
            this.identifierListWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldIdentifier(): FieldIdentifierContext {
        let localctx = new FieldIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1258, MySQLParser.RULE_fieldIdentifier);
        try {
            this.setState(8602);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1095, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8597);
                    this.dotIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8598);
                    this.qualifiedIdentifier();
                    this.setState(8600);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1094, this.getContext())) {
                        case 1:
                            {
                            this.setState(8599);
                            this.dotIdentifier();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnName(): ColumnNameContext {
        let localctx = new ColumnNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1260, MySQLParser.RULE_columnName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8604);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnInternalRef(): ColumnInternalRefContext {
        let localctx = new ColumnInternalRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1262, MySQLParser.RULE_columnInternalRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8606);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnInternalRefList(): ColumnInternalRefListContext {
        let localctx = new ColumnInternalRefListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1264, MySQLParser.RULE_columnInternalRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8608);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8609);
            this.columnInternalRef();
            this.setState(8614);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(8610);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8611);
                this.columnInternalRef();
                }
                }
                this.setState(8616);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8617);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnRef(): ColumnRefContext {
        let localctx = new ColumnRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1266, MySQLParser.RULE_columnRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8619);
            this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertIdentifier(): InsertIdentifierContext {
        let localctx = new InsertIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1268, MySQLParser.RULE_insertIdentifier);
        try {
            this.setState(8623);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1097, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8621);
                    this.columnRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8622);
                    this.tableWild();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexName(): IndexNameContext {
        let localctx = new IndexNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1270, MySQLParser.RULE_indexName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8625);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexRef(): IndexRefContext {
        let localctx = new IndexRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1272, MySQLParser.RULE_indexRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8627);
            this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableWild(): TableWildContext {
        let localctx = new TableWildContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1274, MySQLParser.RULE_tableWild);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8629);
            this.identifier();
            this.setState(8630);
            this.match(MySQLParser.DOT_SYMBOL);
            this.setState(8634);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1098, this.getContext())) {
                case 1:
                    {
                    this.setState(8631);
                    this.identifier();
                    this.setState(8632);
                    this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
            }
            this.setState(8636);
            this.match(MySQLParser.MULT_OPERATOR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public schemaName(): SchemaNameContext {
        let localctx = new SchemaNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1276, MySQLParser.RULE_schemaName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8638);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public schemaRef(): SchemaRefContext {
        let localctx = new SchemaRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1278, MySQLParser.RULE_schemaRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8640);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public procedureName(): ProcedureNameContext {
        let localctx = new ProcedureNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1280, MySQLParser.RULE_procedureName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8642);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public procedureRef(): ProcedureRefContext {
        let localctx = new ProcedureRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1282, MySQLParser.RULE_procedureRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8644);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionName(): FunctionNameContext {
        let localctx = new FunctionNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1284, MySQLParser.RULE_functionName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8646);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionRef(): FunctionRefContext {
        let localctx = new FunctionRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1286, MySQLParser.RULE_functionRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8648);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public triggerName(): TriggerNameContext {
        let localctx = new TriggerNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1288, MySQLParser.RULE_triggerName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8650);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public triggerRef(): TriggerRefContext {
        let localctx = new TriggerRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1290, MySQLParser.RULE_triggerRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8652);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewName(): ViewNameContext {
        let localctx = new ViewNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1292, MySQLParser.RULE_viewName);
        try {
            this.setState(8656);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1099, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8654);
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8655);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewRef(): ViewRefContext {
        let localctx = new ViewRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1294, MySQLParser.RULE_viewRef);
        try {
            this.setState(8660);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1100, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8658);
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8659);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablespaceName(): TablespaceNameContext {
        let localctx = new TablespaceNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1296, MySQLParser.RULE_tablespaceName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8662);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablespaceRef(): TablespaceRefContext {
        let localctx = new TablespaceRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1298, MySQLParser.RULE_tablespaceRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8664);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logfileGroupName(): LogfileGroupNameContext {
        let localctx = new LogfileGroupNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1300, MySQLParser.RULE_logfileGroupName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8666);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logfileGroupRef(): LogfileGroupRefContext {
        let localctx = new LogfileGroupRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1302, MySQLParser.RULE_logfileGroupRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8668);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public eventName(): EventNameContext {
        let localctx = new EventNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1304, MySQLParser.RULE_eventName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8670);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public eventRef(): EventRefContext {
        let localctx = new EventRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1306, MySQLParser.RULE_eventRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8672);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public udfName(): UdfNameContext {
        let localctx = new UdfNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1308, MySQLParser.RULE_udfName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8674);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverName(): ServerNameContext {
        let localctx = new ServerNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1310, MySQLParser.RULE_serverName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8676);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverRef(): ServerRefContext {
        let localctx = new ServerRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1312, MySQLParser.RULE_serverRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8678);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public engineRef(): EngineRefContext {
        let localctx = new EngineRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1314, MySQLParser.RULE_engineRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8680);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableName(): TableNameContext {
        let localctx = new TableNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1316, MySQLParser.RULE_tableName);
        try {
            this.setState(8684);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1101, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8682);
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8683);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterTableRef(): FilterTableRefContext {
        let localctx = new FilterTableRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1318, MySQLParser.RULE_filterTableRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8686);
            this.schemaRef();
            this.setState(8687);
            this.dotIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableRefWithWildcard(): TableRefWithWildcardContext {
        let localctx = new TableRefWithWildcardContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1320, MySQLParser.RULE_tableRefWithWildcard);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8689);
            this.identifier();
            this.setState(8697);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1103, this.getContext())) {
                case 1:
                    {
                    this.setState(8690);
                    this.match(MySQLParser.DOT_SYMBOL);
                    this.setState(8691);
                    this.match(MySQLParser.MULT_OPERATOR);
                    }
                    break;
                case 2:
                    {
                    this.setState(8692);
                    this.dotIdentifier();
                    this.setState(8695);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 772) {
                        {
                        this.setState(8693);
                        this.match(MySQLParser.DOT_SYMBOL);
                        this.setState(8694);
                        this.match(MySQLParser.MULT_OPERATOR);
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableRef(): TableRefContext {
        let localctx = new TableRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1322, MySQLParser.RULE_tableRef);
        try {
            this.setState(8701);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1104, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8699);
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8700);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableRefList(): TableRefListContext {
        let localctx = new TableRefListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1324, MySQLParser.RULE_tableRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8703);
            this.tableRef();
            this.setState(8708);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(8704);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8705);
                this.tableRef();
                }
                }
                this.setState(8710);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableAliasRefList(): TableAliasRefListContext {
        let localctx = new TableAliasRefListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1326, MySQLParser.RULE_tableAliasRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8711);
            this.tableRefWithWildcard();
            this.setState(8716);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(8712);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8713);
                this.tableRefWithWildcard();
                }
                }
                this.setState(8718);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public parameterName(): ParameterNameContext {
        let localctx = new ParameterNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1328, MySQLParser.RULE_parameterName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8719);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labelIdentifier(): LabelIdentifierContext {
        let localctx = new LabelIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1330, MySQLParser.RULE_labelIdentifier);
        try {
            this.setState(8723);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1107, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8721);
                    this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8722);
                    this.labelKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labelRef(): LabelRefContext {
        let localctx = new LabelRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1332, MySQLParser.RULE_labelRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8725);
            this.labelIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleIdentifier(): RoleIdentifierContext {
        let localctx = new RoleIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1334, MySQLParser.RULE_roleIdentifier);
        try {
            this.setState(8729);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1108, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8727);
                    this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8728);
                    this.roleKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public pluginRef(): PluginRefContext {
        let localctx = new PluginRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1336, MySQLParser.RULE_pluginRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8731);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public componentRef(): ComponentRefContext {
        let localctx = new ComponentRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1338, MySQLParser.RULE_componentRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8733);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupRef(): ResourceGroupRefContext {
        let localctx = new ResourceGroupRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1340, MySQLParser.RULE_resourceGroupRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8735);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowName(): WindowNameContext {
        let localctx = new WindowNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1342, MySQLParser.RULE_windowName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8737);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public pureIdentifier(): PureIdentifierContext {
        let localctx = new PureIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1344, MySQLParser.RULE_pureIdentifier);
        let _la: number;
        try {
            this.setState(8742);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1109, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8739);
                    _la = this.input().LA(1);
                    if(!(_la === 848 || _la === 850)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8740);
                    if (!(this.isSqlModeActive(SqlMode.AnsiQuotes))) {
                        throw this.createFailedPredicateException("this.isSqlModeActive(SqlMode.AnsiQuotes)");
                    }
                    this.setState(8741);
                    this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifier(): IdentifierContext {
        let localctx = new IdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1346, MySQLParser.RULE_identifier);
        try {
            this.setState(8746);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1110, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8744);
                    this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8745);
                    this.identifierKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierList(): IdentifierListContext {
        let localctx = new IdentifierListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1348, MySQLParser.RULE_identifierList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8748);
            this.identifier();
            this.setState(8753);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1111, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8749);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8750);
                    this.identifier();
                    }
                    }
                }
                this.setState(8755);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1111, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        let localctx = new IdentifierListWithParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1350, MySQLParser.RULE_identifierListWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8756);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8757);
            this.identifierList();
            this.setState(8758);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        let localctx = new QualifiedIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1352, MySQLParser.RULE_qualifiedIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8760);
            this.identifier();
            this.setState(8762);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1112, this.getContext())) {
                case 1:
                    {
                    this.setState(8761);
                    this.dotIdentifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public simpleIdentifier(): SimpleIdentifierContext {
        let localctx = new SimpleIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1354, MySQLParser.RULE_simpleIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8764);
            this.identifier();
            this.setState(8769);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 772) {
                {
                this.setState(8765);
                this.dotIdentifier();
                this.setState(8767);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 772) {
                    {
                    this.setState(8766);
                    this.dotIdentifier();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dotIdentifier(): DotIdentifierContext {
        let localctx = new DotIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1356, MySQLParser.RULE_dotIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8771);
            this.match(MySQLParser.DOT_SYMBOL);
            this.setState(8772);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ulong_number(): Ulong_numberContext {
        let localctx = new Ulong_numberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1358, MySQLParser.RULE_ulong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8774);
            _la = this.input().LA(1);
            if(!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || ((((_la - 788)) & ~0x1F) === 0 && ((1 << (_la - 788)) & 13) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public real_ulong_number(): Real_ulong_numberContext {
        let localctx = new Real_ulong_numberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1360, MySQLParser.RULE_real_ulong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8776);
            _la = this.input().LA(1);
            if(!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 788)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ulonglong_number(): Ulonglong_numberContext {
        let localctx = new Ulonglong_numberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1362, MySQLParser.RULE_ulonglong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8778);
            _la = this.input().LA(1);
            if(!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 790 || _la === 791)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        let localctx = new Real_ulonglong_numberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1364, MySQLParser.RULE_real_ulonglong_number);
        try {
            this.setState(8785);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1115, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8780);
                    this.match(MySQLParser.INT_NUMBER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8781);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(8782);
                    this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8783);
                    this.match(MySQLParser.ULONGLONG_NUMBER);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8784);
                    this.match(MySQLParser.LONG_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signedLiteral(): SignedLiteralContext {
        let localctx = new SignedLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1366, MySQLParser.RULE_signedLiteral);
        try {
            this.setState(8792);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1116, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8787);
                    this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8788);
                    this.match(MySQLParser.PLUS_OPERATOR);
                    this.setState(8789);
                    this.ulong_number();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8790);
                    this.match(MySQLParser.MINUS_OPERATOR);
                    this.setState(8791);
                    this.ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext {
        let localctx = new SignedLiteralOrNullContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1368, MySQLParser.RULE_signedLiteralOrNull);
        try {
            this.setState(8797);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1117, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8794);
                    this.signedLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8795);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8796);
                    this.nullAsLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public literal(): LiteralContext {
        let localctx = new LiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1370, MySQLParser.RULE_literal);
        let _la: number;
        try {
            this.setState(8808);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1119, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8799);
                    this.textLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8800);
                    this.numLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8801);
                    this.temporalLiteral();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8802);
                    this.nullLiteral();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(8803);
                    this.boolLiteral();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(8805);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 847) {
                        {
                        this.setState(8804);
                        this.match(MySQLParser.UNDERSCORE_CHARSET);
                        }
                    }

                    this.setState(8807);
                    _la = this.input().LA(1);
                    if(!(_la === 788 || _la === 789)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public literalOrNull(): LiteralOrNullContext {
        let localctx = new LiteralOrNullContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1372, MySQLParser.RULE_literalOrNull);
        try {
            this.setState(8813);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1120, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8810);
                    this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8811);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8812);
                    this.nullAsLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nullAsLiteral(): NullAsLiteralContext {
        let localctx = new NullAsLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1374, MySQLParser.RULE_nullAsLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8815);
            this.match(MySQLParser.NULL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public stringList(): StringListContext {
        let localctx = new StringListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1376, MySQLParser.RULE_stringList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8817);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8818);
            this.textString();
            this.setState(8823);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(8819);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8820);
                this.textString();
                }
                }
                this.setState(8825);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8826);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textStringLiteral(): TextStringLiteralContext {
        let localctx = new TextStringLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1378, MySQLParser.RULE_textStringLiteral);
        try {
            this.setState(8831);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1122, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8828);
                    localctx._value = this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8829);
                    if (!(!this.isSqlModeActive(SqlMode.AnsiQuotes))) {
                        throw this.createFailedPredicateException("!this.isSqlModeActive(SqlMode.AnsiQuotes)");
                    }
                    this.setState(8830);
                    localctx._value = this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textString(): TextStringContext {
        let localctx = new TextStringContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1380, MySQLParser.RULE_textString);
        try {
            this.setState(8836);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1123, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8833);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8834);
                    this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8835);
                    this.match(MySQLParser.BIN_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textStringHash(): TextStringHashContext {
        let localctx = new TextStringHashContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1382, MySQLParser.RULE_textStringHash);
        try {
            this.setState(8841);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1124, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8838);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8839);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(8840);
                    this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textLiteral(): TextLiteralContext {
        let localctx = new TextLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1384, MySQLParser.RULE_textLiteral);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8848);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1126, this.getContext())) {
                case 1:
                    {
                    this.setState(8844);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1125, this.getContext())) {
                        case 1:
                            {
                            this.setState(8843);
                            this.match(MySQLParser.UNDERSCORE_CHARSET);
                            }
                            break;
                    }
                    this.setState(8846);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.setState(8847);
                    this.match(MySQLParser.NCHAR_TEXT);
                    }
                    break;
            }
            this.setState(8853);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1127, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8850);
                    this.textStringLiteral();
                    }
                    }
                }
                this.setState(8855);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1127, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        let localctx = new TextStringNoLinebreakContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1386, MySQLParser.RULE_textStringNoLinebreak);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8856);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textStringLiteralList(): TextStringLiteralListContext {
        let localctx = new TextStringLiteralListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1388, MySQLParser.RULE_textStringLiteralList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8858);
            this.textStringLiteral();
            this.setState(8863);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 773) {
                {
                {
                this.setState(8859);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8860);
                this.textStringLiteral();
                }
                }
                this.setState(8865);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public numLiteral(): NumLiteralContext {
        let localctx = new NumLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1390, MySQLParser.RULE_numLiteral);
        try {
            this.setState(8869);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8866);
                this.int64Literal();
                }
                break;
            case MySQLParser.DECIMAL_NUMBER:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8867);
                this.match(MySQLParser.DECIMAL_NUMBER);
                }
                break;
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(8868);
                this.match(MySQLParser.FLOAT_NUMBER);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public boolLiteral(): BoolLiteralContext {
        let localctx = new BoolLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1392, MySQLParser.RULE_boolLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8871);
            _la = this.input().LA(1);
            if(!(_la === 183 || _la === 596)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nullLiteral(): NullLiteralContext {
        let localctx = new NullLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1394, MySQLParser.RULE_nullLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8873);
            _la = this.input().LA(1);
            if(!(_la === 376 || _la === 786)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public int64Literal(): Int64LiteralContext {
        let localctx = new Int64LiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1396, MySQLParser.RULE_int64Literal);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8875);
            _la = this.input().LA(1);
            if(!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public temporalLiteral(): TemporalLiteralContext {
        let localctx = new TemporalLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1398, MySQLParser.RULE_temporalLiteral);
        try {
            this.setState(8883);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.DATE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8877);
                this.match(MySQLParser.DATE_SYMBOL);
                this.setState(8878);
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            case MySQLParser.TIME_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8879);
                this.match(MySQLParser.TIME_SYMBOL);
                this.setState(8880);
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            case MySQLParser.TIMESTAMP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(8881);
                this.match(MySQLParser.TIMESTAMP_SYMBOL);
                this.setState(8882);
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public floatOptions(): FloatOptionsContext {
        let localctx = new FloatOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1400, MySQLParser.RULE_floatOptions);
        try {
            this.setState(8887);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1131, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8885);
                    this.fieldLength();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8886);
                    this.precision();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public standardFloatOptions(): StandardFloatOptionsContext {
        let localctx = new StandardFloatOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1402, MySQLParser.RULE_standardFloatOptions);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8889);
            this.precision();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public precision(): PrecisionContext {
        let localctx = new PrecisionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1404, MySQLParser.RULE_precision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8891);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8892);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(8893);
            this.match(MySQLParser.COMMA_SYMBOL);
            this.setState(8894);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(8895);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        let localctx = new TextOrIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1406, MySQLParser.RULE_textOrIdentifier);
        try {
            this.setState(8899);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1132, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8897);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8898);
                    this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lValueIdentifier(): LValueIdentifierContext {
        let localctx = new LValueIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1408, MySQLParser.RULE_lValueIdentifier);
        try {
            this.setState(8903);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1133, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8901);
                    this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8902);
                    this.lValueKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext {
        let localctx = new RoleIdentifierOrTextContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1410, MySQLParser.RULE_roleIdentifierOrText);
        try {
            this.setState(8907);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1134, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8905);
                    this.roleIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8906);
                    this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sizeNumber(): SizeNumberContext {
        let localctx = new SizeNumberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1412, MySQLParser.RULE_sizeNumber);
        try {
            this.setState(8911);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1135, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8909);
                    this.real_ulonglong_number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8910);
                    this.pureIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public parentheses(): ParenthesesContext {
        let localctx = new ParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1414, MySQLParser.RULE_parentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8913);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8914);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public equal(): EqualContext {
        let localctx = new EqualContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1416, MySQLParser.RULE_equal);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8916);
            _la = this.input().LA(1);
            if(!(_la === 750 || _la === 751)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionType(): OptionTypeContext {
        let localctx = new OptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1418, MySQLParser.RULE_optionType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8918);
            _la = this.input().LA(1);
            if(!(_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public rvalueSystemVariableType(): RvalueSystemVariableTypeContext {
        let localctx = new RvalueSystemVariableTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1420, MySQLParser.RULE_rvalueSystemVariableType);
        try {
            this.setState(8926);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.GLOBAL_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8920);
                this.match(MySQLParser.GLOBAL_SYMBOL);
                this.setState(8921);
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            case MySQLParser.LOCAL_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8922);
                this.match(MySQLParser.LOCAL_SYMBOL);
                this.setState(8923);
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            case MySQLParser.SESSION_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(8924);
                this.match(MySQLParser.SESSION_SYMBOL);
                this.setState(8925);
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setVarIdentType(): SetVarIdentTypeContext {
        let localctx = new SetVarIdentTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1422, MySQLParser.RULE_setVarIdentType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8928);
            _la = this.input().LA(1);
            if(!(_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(8929);
            this.match(MySQLParser.DOT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jsonAttribute(): JsonAttributeContext {
        let localctx = new JsonAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1424, MySQLParser.RULE_jsonAttribute);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8931);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeyword(): IdentifierKeywordContext {
        let localctx = new IdentifierKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1426, MySQLParser.RULE_identifierKeyword);
        try {
            this.setState(8949);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1139, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8933);
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.setState(8940);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1137, this.getContext())) {
                        case 1:
                            {
                            this.setState(8934);
                            this.labelKeyword();
                            }
                            break;
                        case 2:
                            {
                            this.setState(8935);
                            this.roleOrIdentifierKeyword();
                            }
                            break;
                        case 3:
                            {
                            this.setState(8936);
                            this.match(MySQLParser.EXECUTE_SYMBOL);
                            }
                            break;
                        case 4:
                            {
                            this.setState(8937);
                            this.match(MySQLParser.SHUTDOWN_SYMBOL);
                            }
                            break;
                        case 5:
                            {
                            this.setState(8938);
                            if (!(this.serverVersion >= 80011)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80011");
                            }
                            this.setState(8939);
                            this.match(MySQLParser.RESTART_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8947);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1138, this.getContext())) {
                        case 1:
                            {
                            this.setState(8942);
                            this.identifierKeywordsUnambiguous();
                            }
                            break;
                        case 2:
                            {
                            this.setState(8943);
                            this.identifierKeywordsAmbiguous1RolesAndLabels();
                            }
                            break;
                        case 3:
                            {
                            this.setState(8944);
                            this.identifierKeywordsAmbiguous2Labels();
                            }
                            break;
                        case 4:
                            {
                            this.setState(8945);
                            this.identifierKeywordsAmbiguous3Roles();
                            }
                            break;
                        case 5:
                            {
                            this.setState(8946);
                            this.identifierKeywordsAmbiguous4SystemVariables();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
        let localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1428, MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8951);
            _la = this.input().LA(1);
            if(!(_la === 173 || _la === 510 || _la === 714)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
        let localctx = new IdentifierKeywordsAmbiguous2LabelsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1430, MySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8953);
            _la = this.input().LA(1);
            if(!(_la === 19 || _la === 29 || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 2684391427) !== 0) || _la === 90 || _la === 123 || _la === 147 || _la === 159 || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 75497475) !== 0) || _la === 234 || _la === 245 || _la === 267 || _la === 373 || _la === 415 || _la === 417 || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & 33562625) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & 41943041) !== 0) || _la === 543 || _la === 552 || ((((_la - 597)) & ~0x1F) === 0 && ((1 << (_la - 597)) & 1537) !== 0) || _la === 651 || _la === 677)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labelKeyword(): LabelKeywordContext {
        let localctx = new LabelKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1432, MySQLParser.RULE_labelKeyword);
        try {
            this.setState(8973);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1142, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8955);
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.setState(8966);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1140, this.getContext())) {
                        case 1:
                            {
                            this.setState(8956);
                            this.roleOrLabelKeyword();
                            }
                            break;
                        case 2:
                            {
                            this.setState(8957);
                            this.match(MySQLParser.EVENT_SYMBOL);
                            }
                            break;
                        case 3:
                            {
                            this.setState(8958);
                            this.match(MySQLParser.FILE_SYMBOL);
                            }
                            break;
                        case 4:
                            {
                            this.setState(8959);
                            this.match(MySQLParser.NONE_SYMBOL);
                            }
                            break;
                        case 5:
                            {
                            this.setState(8960);
                            this.match(MySQLParser.PROCESS_SYMBOL);
                            }
                            break;
                        case 6:
                            {
                            this.setState(8961);
                            this.match(MySQLParser.PROXY_SYMBOL);
                            }
                            break;
                        case 7:
                            {
                            this.setState(8962);
                            this.match(MySQLParser.RELOAD_SYMBOL);
                            }
                            break;
                        case 8:
                            {
                            this.setState(8963);
                            this.match(MySQLParser.REPLICATION_SYMBOL);
                            }
                            break;
                        case 9:
                            {
                            this.setState(8964);
                            this.match(MySQLParser.RESOURCE_SYMBOL);
                            }
                            break;
                        case 10:
                            {
                            this.setState(8965);
                            this.match(MySQLParser.SUPER_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8971);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1141, this.getContext())) {
                        case 1:
                            {
                            this.setState(8968);
                            this.identifierKeywordsUnambiguous();
                            }
                            break;
                        case 2:
                            {
                            this.setState(8969);
                            this.identifierKeywordsAmbiguous3Roles();
                            }
                            break;
                        case 3:
                            {
                            this.setState(8970);
                            this.identifierKeywordsAmbiguous4SystemVariables();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
        let localctx = new IdentifierKeywordsAmbiguous3RolesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1434, MySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8975);
            _la = this.input().LA(1);
            if(!(_la === 170 || _la === 188 || _la === 369 || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & 268435473) !== 0) || _la === 459 || _la === 565 || _la === 709)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
        let localctx = new IdentifierKeywordsUnambiguousContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1436, MySQLParser.RULE_identifierKeywordsUnambiguous);
        let _la: number;
        try {
            this.setState(8980);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1143, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8977);
                    _la = this.input().LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 262214636) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3249671057) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 2245782383) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 2954927169) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 3746852895) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 3225184099) !== 0) || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & 2788234193) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 1161171041) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4094494233) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 2256265199) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 2852083279) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 20228359) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 2628845439) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 3310328595) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 1438145823) !== 0) || ((((_la - 495)) & ~0x1F) === 0 && ((1 << (_la - 495)) & 257171811) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & 4061090967) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & 79141315) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & 245636803) !== 0) || ((((_la - 625)) & ~0x1F) === 0 && ((1 << (_la - 625)) & 2598496325) !== 0) || ((((_la - 659)) & ~0x1F) === 0 && ((1 << (_la - 659)) & 3231816751) !== 0) || ((((_la - 693)) & ~0x1F) === 0 && ((1 << (_la - 693)) & 4292673077) !== 0) || ((((_la - 725)) & ~0x1F) === 0 && ((1 << (_la - 725)) & 15549) !== 0) || ((((_la - 792)) & ~0x1F) === 0 && ((1 << (_la - 792)) & 4294966207) !== 0) || ((((_la - 824)) & ~0x1F) === 0 && ((1 << (_la - 824)) & 1048575) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8978);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(8979);
                    _la = this.input().LA(1);
                    if(!(_la === 583 || _la === 586 || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 16381) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleKeyword(): RoleKeywordContext {
        let localctx = new RoleKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1438, MySQLParser.RULE_roleKeyword);
        try {
            this.setState(8992);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1146, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8982);
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.setState(8985);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1144, this.getContext())) {
                        case 1:
                            {
                            this.setState(8983);
                            this.roleOrLabelKeyword();
                            }
                            break;
                        case 2:
                            {
                            this.setState(8984);
                            this.roleOrIdentifierKeyword();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8990);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1145, this.getContext())) {
                        case 1:
                            {
                            this.setState(8987);
                            this.identifierKeywordsUnambiguous();
                            }
                            break;
                        case 2:
                            {
                            this.setState(8988);
                            this.identifierKeywordsAmbiguous2Labels();
                            }
                            break;
                        case 3:
                            {
                            this.setState(8989);
                            this.identifierKeywordsAmbiguous4SystemVariables();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lValueKeyword(): LValueKeywordContext {
        let localctx = new LValueKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1440, MySQLParser.RULE_lValueKeyword);
        try {
            this.setState(8998);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1147, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8994);
                    this.identifierKeywordsUnambiguous();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8995);
                    this.identifierKeywordsAmbiguous1RolesAndLabels();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8996);
                    this.identifierKeywordsAmbiguous2Labels();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8997);
                    this.identifierKeywordsAmbiguous3Roles();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
        let localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1442, MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9000);
            _la = this.input().LA(1);
            if(!(_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
        let localctx = new RoleOrIdentifierKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1444, MySQLParser.RULE_roleOrIdentifierKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9002);
            _la = this.input().LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 671617028) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 2685440003) !== 0) || _la === 90 || _la === 123 || _la === 147 || _la === 159 || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 343949347) !== 0) || _la === 245 || _la === 267 || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & 302137345) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 5377) !== 0) || ((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & 268763145) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & 3263185025) !== 0) || _la === 543 || _la === 552 || ((((_la - 597)) & ~0x1F) === 0 && ((1 << (_la - 597)) & 263681) !== 0) || ((((_la - 648)) & ~0x1F) === 0 && ((1 << (_la - 648)) & 536897545) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & 15) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
        let localctx = new RoleOrLabelKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1446, MySQLParser.RULE_roleOrLabelKeyword);
        let _la: number;
        try {
            this.setState(9007);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1148, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9004);
                    _la = this.input().LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 127992808) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3249671057) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 2245782381) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 2954927169) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 3746852895) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 2151442209) !== 0) || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & 2787186577) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 1161171041) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4094510617) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 2256265199) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 2852083279) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 305415) !== 0) || ((((_la - 399)) & ~0x1F) === 0 && ((1 << (_la - 399)) & 3461889979) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & 3800550793) !== 0) || ((((_la - 463)) & ~0x1F) === 0 && ((1 << (_la - 463)) & 719072783) !== 0) || ((((_la - 495)) & ~0x1F) === 0 && ((1 << (_la - 495)) & 206840033) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & 4061090967) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & 79141347) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & 237248451) !== 0) || ((((_la - 627)) & ~0x1F) === 0 && ((1 << (_la - 627)) & 647002641) !== 0) || ((((_la - 664)) & ~0x1F) === 0 && ((1 << (_la - 664)) & 2785352929) !== 0) || ((((_la - 697)) & ~0x1F) === 0 && ((1 << (_la - 697)) & 3629699043) !== 0) || ((((_la - 792)) & ~0x1F) === 0 && ((1 << (_la - 792)) & 67) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9005);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(9006);
                    this.match(MySQLParser.ADMIN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public override sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
                    case 2:
                        return this.alterStatement_sempred(localctx as AlterStatementContext, predIndex);
                    case 14:
                        return this.standaloneAlterCommands_sempred(localctx as StandaloneAlterCommandsContext, predIndex);
                    case 18:
                        return this.alterListItem_sempred(localctx as AlterListItemContext, predIndex);
                    case 28:
                        return this.alterTablespace_sempred(localctx as AlterTablespaceContext, predIndex);
                    case 33:
                        return this.alterTablespaceOption_sempred(localctx as AlterTablespaceOptionContext, predIndex);
                    case 39:
                        return this.alterInstanceStatement_sempred(localctx as AlterInstanceStatementContext, predIndex);
                    case 40:
                        return this.createStatement_sempred(localctx as CreateStatementContext, predIndex);
                    case 42:
                        return this.createDatabaseOption_sempred(localctx as CreateDatabaseOptionContext, predIndex);
                    case 48:
                        return this.queryExpressionOrParens_sempred(localctx as QueryExpressionOrParensContext, predIndex);
                    case 68:
                        return this.tsDataFileName_sempred(localctx as TsDataFileNameContext, predIndex);
                    case 71:
                        return this.tablespaceOption_sempred(localctx as TablespaceOptionContext, predIndex);
                    case 94:
                        return this.dropStatement_sempred(localctx as DropStatementContext, predIndex);
                    case 115:
                        return this.deleteStatement_sempred(localctx as DeleteStatementContext, predIndex);
                    case 121:
                        return this.insertStatement_sempred(localctx as InsertStatementContext, predIndex);
                    case 139:
                        return this.selectStatementWithInto_sempred(localctx as SelectStatementWithIntoContext, predIndex);
                    case 141:
                        return this.queryExpressionBody_sempred(localctx as QueryExpressionBodyContext, predIndex);
                    case 143:
                        return this.queryPrimary_sempred(localctx as QueryPrimaryContext, predIndex);
                    case 185:
                        return this.tableReference_sempred(localctx as TableReferenceContext, predIndex);
                    case 191:
                        return this.tableFactor_sempred(localctx as TableFactorContext, predIndex);
                    case 194:
                        return this.derivedTable_sempred(localctx as DerivedTableContext, predIndex);
                    case 198:
                        return this.jtColumn_sempred(localctx as JtColumnContext, predIndex);
                    case 205:
                        return this.tableAlias_sempred(localctx as TableAliasContext, predIndex);
                    case 230:
                        return this.changeReplicationSource_sempred(localctx as ChangeReplicationSourceContext, predIndex);
                    case 233:
                        return this.sourceDefinition_sempred(localctx as SourceDefinitionContext, predIndex);
                    case 293:
                        return this.cloneStatement_sempred(localctx as CloneStatementContext, predIndex);
                    case 297:
                        return this.alterUserStatement_sempred(localctx as AlterUserStatementContext, predIndex);
                    case 299:
                        return this.alterUser_sempred(localctx as AlterUserContext, predIndex);
                    case 303:
                        return this.createUserTail_sempred(localctx as CreateUserTailContext, predIndex);
                    case 308:
                        return this.accountLockPasswordExpireOptions_sempred(localctx as AccountLockPasswordExpireOptionsContext, predIndex);
                    case 312:
                        return this.grantTargetList_sempred(localctx as GrantTargetListContext, predIndex);
                    case 313:
                        return this.grantOptions_sempred(localctx as GrantOptionsContext, predIndex);
                    case 317:
                        return this.versionedRequireClause_sempred(localctx as VersionedRequireClauseContext, predIndex);
                    case 319:
                        return this.revokeStatement_sempred(localctx as RevokeStatementContext, predIndex);
                    case 323:
                        return this.grantIdentifier_sempred(localctx as GrantIdentifierContext, predIndex);
                    case 326:
                        return this.grantOption_sempred(localctx as GrantOptionContext, predIndex);
                    case 331:
                        return this.histogram_sempred(localctx as HistogramContext, predIndex);
                    case 336:
                        return this.startOptionValueList_sempred(localctx as StartOptionValueListContext, predIndex);
                    case 341:
                        return this.optionValueNoOptionType_sempred(localctx as OptionValueNoOptionTypeContext, predIndex);
                    case 423:
                        return this.utilityStatement_sempred(localctx as UtilityStatementContext, predIndex);
                    case 425:
                        return this.explainStatement_sempred(localctx as ExplainStatementContext, predIndex);
                    case 430:
                        return this.expr_sempred(localctx as ExprContext, predIndex);
                    case 431:
                        return this.boolPri_sempred(localctx as BoolPriContext, predIndex);
                    case 433:
                        return this.predicate_sempred(localctx as PredicateContext, predIndex);
                    case 435:
                        return this.bitExpr_sempred(localctx as BitExprContext, predIndex);
                    case 436:
                        return this.simpleExpr_sempred(localctx as SimpleExprContext, predIndex);
                    case 437:
                        return this.arrayCast_sempred(localctx as ArrayCastContext, predIndex);
                    case 441:
                        return this.windowFunctionCall_sempred(localctx as WindowFunctionCallContext, predIndex);
                    case 443:
                        return this.leadLagInfo_sempred(localctx as LeadLagInfoContext, predIndex);
                    case 452:
                        return this.runtimeFunctionCall_sempred(localctx as RuntimeFunctionCallContext, predIndex);
                    case 468:
                        return this.lvalueVariable_sempred(localctx as LvalueVariableContext, predIndex);
                    case 473:
                        return this.castType_sempred(localctx as CastTypeContext, predIndex);
                    case 529:
                        return this.checkOrReferences_sempred(localctx as CheckOrReferencesContext, predIndex);
                    case 532:
                        return this.tableConstraintDef_sempred(localctx as TableConstraintDefContext, predIndex);
                    case 535:
                        return this.columnAttribute_sempred(localctx as ColumnAttributeContext, predIndex);
                    case 546:
                        return this.keyPartOrExpression_sempred(localctx as KeyPartOrExpressionContext, predIndex);
                    case 549:
                        return this.commonIndexOption_sempred(localctx as CommonIndexOptionContext, predIndex);
                    case 566:
                        return this.charsetName_sempred(localctx as CharsetNameContext, predIndex);
                    case 567:
                        return this.collationName_sempred(localctx as CollationNameContext, predIndex);
                    case 572:
                        return this.createTableOption_sempred(localctx as CreateTableOptionContext, predIndex);
                    case 672:
                        return this.pureIdentifier_sempred(localctx as PureIdentifierContext, predIndex);
                    case 682:
                        return this.real_ulonglong_number_sempred(localctx as Real_ulonglong_numberContext, predIndex);
                    case 684:
                        return this.signedLiteralOrNull_sempred(localctx as SignedLiteralOrNullContext, predIndex);
                    case 686:
                        return this.literalOrNull_sempred(localctx as LiteralOrNullContext, predIndex);
                    case 689:
                        return this.textStringLiteral_sempred(localctx as TextStringLiteralContext, predIndex);
                    case 691:
                        return this.textStringHash_sempred(localctx as TextStringHashContext, predIndex);
                    case 713:
                        return this.identifierKeyword_sempred(localctx as IdentifierKeywordContext, predIndex);
                    case 716:
                        return this.labelKeyword_sempred(localctx as LabelKeywordContext, predIndex);
                    case 718:
                        return this.identifierKeywordsUnambiguous_sempred(localctx as IdentifierKeywordsUnambiguousContext, predIndex);
                    case 719:
                        return this.roleKeyword_sempred(localctx as RoleKeywordContext, predIndex);
                    case 723:
                        return this.roleOrLabelKeyword_sempred(localctx as RoleOrLabelKeywordContext, predIndex);
                    }
                    return true;
                }
                private alterStatement_sempred(localctx: AlterStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 0:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private standaloneAlterCommands_sempred(localctx: StandaloneAlterCommandsContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 1:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterListItem_sempred(localctx: AlterListItemContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 2:
                                return this.serverVersion >= 80017;
                            case 3:
                                return this.serverVersion >= 80019;
                            case 4:
                                return this.serverVersion >= 80014;
                            case 5:
                                return this.serverVersion >= 80024;
                            case 6:
                                return this.serverVersion >= 80017;
                            case 7:
                                return this.serverVersion >= 80019;
                            case 8:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterTablespace_sempred(localctx: AlterTablespaceContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 9:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterTablespaceOption_sempred(localctx: AlterTablespaceOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 10:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private alterInstanceStatement_sempred(localctx: AlterInstanceStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 11:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private createStatement_sempred(localctx: CreateStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 12:
                                return this.serverVersion >= 80011;
                            case 13:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private createDatabaseOption_sempred(localctx: CreateDatabaseOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 14:
                                return this.serverVersion >= 80016;
                            }
                            return true;
                }
                private queryExpressionOrParens_sempred(localctx: QueryExpressionOrParensContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 15:
                                return this.serverVersion >= 80031;
                            }
                            return true;
                }
                private tsDataFileName_sempred(localctx: TsDataFileNameContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 16:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private tablespaceOption_sempred(localctx: TablespaceOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 17:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private dropStatement_sempred(localctx: DropStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 18:
                                return this.serverVersion >= 80011;
                            case 19:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private deleteStatement_sempred(localctx: DeleteStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 20:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private insertStatement_sempred(localctx: InsertStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 21:
                                return  this.serverVersion >= 80018;
                            case 22:
                                return  this.serverVersion >= 80018;
                            }
                            return true;
                }
                private selectStatementWithInto_sempred(localctx: SelectStatementWithIntoContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 23:
                                return this.serverVersion >= 80024 && this.serverVersion < 80031;
                            }
                            return true;
                }
                private queryExpressionBody_sempred(localctx: QueryExpressionBodyContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 24:
                                return this.serverVersion >= 80031;
                            }
                            return true;
                }
                private queryPrimary_sempred(localctx: QueryPrimaryContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 25:
                                return this.serverVersion >= 80019;
                            case 26:
                                return this.serverVersion >= 80019;
                            }
                            return true;
                }
                private tableReference_sempred(localctx: TableReferenceContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 27:
                                return this.serverVersion < 80017;
                            }
                            return true;
                }
                private tableFactor_sempred(localctx: TableFactorContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 28:
                                return this.serverVersion >= 80004;
                            }
                            return true;
                }
                private derivedTable_sempred(localctx: DerivedTableContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 29:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private jtColumn_sempred(localctx: JtColumnContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 30:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private tableAlias_sempred(localctx: TableAliasContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 31:
                                return this.serverVersion < 80017;
                            }
                            return true;
                }
                private changeReplicationSource_sempred(localctx: ChangeReplicationSourceContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 32:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private sourceDefinition_sempred(localctx: SourceDefinitionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 33:
                                return this.serverVersion >= 80024;
                            case 34:
                                return this.serverVersion >= 80024;
                            case 35:
                                return this.serverVersion >= 80027;
                            }
                            return true;
                }
                private cloneStatement_sempred(localctx: CloneStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 36:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterUserStatement_sempred(localctx: AlterUserStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 37:
                                return this.serverVersion < 80014;
                            case 38:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterUser_sempred(localctx: AlterUserContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 39:
                                return this.serverVersion < 80025;
                            case 40:
                                return this.serverVersion >= 80025;
                            }
                            return true;
                }
                private createUserTail_sempred(localctx: CreateUserTailContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 41:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private accountLockPasswordExpireOptions_sempred(localctx: AccountLockPasswordExpireOptionsContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 42:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private grantTargetList_sempred(localctx: GrantTargetListContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 43:
                                return this.serverVersion < 80011;
                            case 44:
                                return this.serverVersion >= 80011;
                            }
                            return true;
                }
                private grantOptions_sempred(localctx: GrantOptionsContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 45:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private versionedRequireClause_sempred(localctx: VersionedRequireClauseContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 46:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private revokeStatement_sempred(localctx: RevokeStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 47:
                                return this.serverVersion >= 80031;
                            case 48:
                                return this.serverVersion >= 80031;
                            }
                            return true;
                }
                private grantIdentifier_sempred(localctx: GrantIdentifierContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 49:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private grantOption_sempred(localctx: GrantOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 50:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private histogram_sempred(localctx: HistogramContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 51:
                                return this.serverVersion >= 80031;
                            }
                            return true;
                }
                private startOptionValueList_sempred(localctx: StartOptionValueListContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 52:
                                return this.serverVersion < 80014;
                            case 53:
                                return this.serverVersion >= 80018;
                            }
                            return true;
                }
                private optionValueNoOptionType_sempred(localctx: OptionValueNoOptionTypeContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 54:
                                return this.serverVersion >= 80011;
                            }
                            return true;
                }
                private utilityStatement_sempred(localctx: UtilityStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 55:
                                return this.serverVersion >= 80011;
                            }
                            return true;
                }
                private explainStatement_sempred(localctx: ExplainStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 56:
                                return this.serverVersion >= 80018;
                            case 57:
                                return this.serverVersion >= 80019;
                            }
                            return true;
                }
                private expr_sempred(localctx: ExprContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 58:
                                return this.precpred(this.getContext(), 3);
                            case 59:
                                return this.precpred(this.getContext(), 2);
                            case 60:
                                return this.precpred(this.getContext(), 1);
                            }
                            return true;
                }
                private boolPri_sempred(localctx: BoolPriContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 61:
                                return this.precpred(this.getContext(), 3);
                            case 62:
                                return this.precpred(this.getContext(), 2);
                            case 63:
                                return this.precpred(this.getContext(), 1);
                            }
                            return true;
                }
                private predicate_sempred(localctx: PredicateContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 64:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private bitExpr_sempred(localctx: BitExprContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 65:
                                return this.precpred(this.getContext(), 7);
                            case 66:
                                return this.precpred(this.getContext(), 6);
                            case 67:
                                return this.precpred(this.getContext(), 5);
                            case 68:
                                return this.precpred(this.getContext(), 3);
                            case 69:
                                return this.precpred(this.getContext(), 2);
                            case 70:
                                return this.precpred(this.getContext(), 1);
                            case 71:
                                return this.precpred(this.getContext(), 4);
                            }
                            return true;
                }
                private simpleExpr_sempred(localctx: SimpleExprContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 72:
                                return this.precpred(this.getContext(), 16);
                            case 73:
                                return this.precpred(this.getContext(), 24);
                            }
                            return true;
                }
                private arrayCast_sempred(localctx: ArrayCastContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 74:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private windowFunctionCall_sempred(localctx: WindowFunctionCallContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 75:
                                return this.serverVersion < 80024;
                            }
                            return true;
                }
                private leadLagInfo_sempred(localctx: LeadLagInfoContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 76:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private runtimeFunctionCall_sempred(localctx: RuntimeFunctionCallContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 77:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private lvalueVariable_sempred(localctx: LvalueVariableContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 78:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private castType_sempred(localctx: CastTypeContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 79:
                                return this.serverVersion >= 80024;
                            case 80:
                                return this.serverVersion >= 80017;
                            case 81:
                                return this.serverVersion >= 80017;
                            case 82:
                                return this.serverVersion >= 80027;
                            }
                            return true;
                }
                private checkOrReferences_sempred(localctx: CheckOrReferencesContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 83:
                                return this.serverVersion < 80016;
                            }
                            return true;
                }
                private tableConstraintDef_sempred(localctx: TableConstraintDefContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 84:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private columnAttribute_sempred(localctx: ColumnAttributeContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 85:
                                return this.serverVersion >= 80014;
                            case 86:
                                return this.serverVersion >= 80013;
                            case 87:
                                return this.serverVersion >= 80017;
                            case 88:
                                return this.serverVersion >= 80017;
                            case 89:
                                return this.serverVersion >= 80024;
                            case 90:
                                return this.serverVersion >= 80024;
                            case 91:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private keyPartOrExpression_sempred(localctx: KeyPartOrExpressionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 92:
                                return this.serverVersion >= 80013;
                            }
                            return true;
                }
                private commonIndexOption_sempred(localctx: CommonIndexOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 93:
                                return this.serverVersion >= 80024;
                            case 94:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private charsetName_sempred(localctx: CharsetNameContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 95:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private collationName_sempred(localctx: CollationNameContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 96:
                                return this.serverVersion < 80011;
                            case 97:
                                return this.serverVersion >= 80018;
                            }
                            return true;
                }
                private createTableOption_sempred(localctx: CreateTableOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 98:
                                return this.serverVersion >= 80014;
                            case 99:
                                return this.serverVersion >= 80024;
                            case 100:
                                return this.serverVersion >= 80024;
                            case 101:
                                return this.serverVersion >= 80024;
                            case 102:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private pureIdentifier_sempred(localctx: PureIdentifierContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 103:
                                return this.isSqlModeActive(SqlMode.AnsiQuotes);
                            }
                            return true;
                }
                private real_ulonglong_number_sempred(localctx: Real_ulonglong_numberContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 104:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private signedLiteralOrNull_sempred(localctx: SignedLiteralOrNullContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 105:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private literalOrNull_sempred(localctx: LiteralOrNullContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 106:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private textStringLiteral_sempred(localctx: TextStringLiteralContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 107:
                                return !this.isSqlModeActive(SqlMode.AnsiQuotes);
                            }
                            return true;
                }
                private textStringHash_sempred(localctx: TextStringHashContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 108:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private identifierKeyword_sempred(localctx: IdentifierKeywordContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 109:
                                return this.serverVersion < 80017;
                            case 110:
                                return this.serverVersion >= 80011;
                            }
                            return true;
                }
                private labelKeyword_sempred(localctx: LabelKeywordContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 111:
                                return this.serverVersion < 80017;
                            }
                            return true;
                }
                private identifierKeywordsUnambiguous_sempred(localctx: IdentifierKeywordsUnambiguousContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 112:
                                return this.serverVersion >= 80019;
                            }
                            return true;
                }
                private roleKeyword_sempred(localctx: RoleKeywordContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 113:
                                return this.serverVersion < 80017;
                            }
                            return true;
                }
                private roleOrLabelKeyword_sempred(localctx: RoleOrLabelKeywordContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 114:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }

    private static readonly _serializedATN = new SerializedATNView ([
        4,1,860,9010,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,
        7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,7,532,
        2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,2,538,
        7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
        2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,
        7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
        2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
        7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,
        2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
        7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,
        2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,
        7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,
        2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,
        7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,7,598,
        2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,2,604,
        7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
        2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,2,615,
        7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
        2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,
        7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,
        2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,
        7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,
        2,643,7,643,2,644,7,644,2,645,7,645,2,646,7,646,2,647,7,647,2,648,
        7,648,2,649,7,649,2,650,7,650,2,651,7,651,2,652,7,652,2,653,7,653,
        2,654,7,654,2,655,7,655,2,656,7,656,2,657,7,657,2,658,7,658,2,659,
        7,659,2,660,7,660,2,661,7,661,2,662,7,662,2,663,7,663,2,664,7,664,
        2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,2,669,7,669,2,670,
        7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,2,675,7,675,
        2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,2,681,
        7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,
        2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,
        7,692,2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,
        2,698,7,698,2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,2,703,
        7,703,2,704,7,704,2,705,7,705,2,706,7,706,2,707,7,707,2,708,7,708,
        2,709,7,709,2,710,7,710,2,711,7,711,2,712,7,712,2,713,7,713,2,714,
        7,714,2,715,7,715,2,716,7,716,2,717,7,717,2,718,7,718,2,719,7,719,
        2,720,7,720,2,721,7,721,2,722,7,722,2,723,7,723,1,0,1,0,3,0,1451,
        8,0,1,0,3,0,1454,8,0,3,0,1456,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,3,1,1533,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1541,8,2,
        1,2,1,2,1,2,3,2,1546,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1556,
        8,2,1,3,1,3,1,3,4,3,1561,8,3,11,3,12,3,1562,1,4,1,4,1,4,1,4,3,4,
        1569,8,4,1,4,3,4,1572,8,4,1,5,3,5,1575,8,5,1,5,1,5,1,5,1,5,1,5,3,
        5,1582,8,5,1,5,1,5,1,5,3,5,1587,8,5,1,5,3,5,1590,8,5,1,5,1,5,1,5,
        3,5,1595,8,5,1,5,1,5,1,5,1,5,3,5,1601,8,5,3,5,1603,8,5,1,5,1,5,3,
        5,1607,8,5,1,5,1,5,3,5,1611,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
        1620,8,6,1,7,1,7,3,7,1624,8,7,1,7,5,7,1627,8,7,10,7,12,7,1630,9,
        7,1,8,1,8,1,8,3,8,1635,8,8,1,9,1,9,1,9,1,9,1,10,3,10,1642,8,10,1,
        10,1,10,1,10,3,10,1647,8,10,1,11,1,11,1,11,3,11,1652,8,11,1,11,1,
        11,1,11,1,11,1,11,3,11,1659,8,11,1,11,3,11,1662,8,11,1,12,1,12,1,
        12,1,12,3,12,1668,8,12,1,12,3,12,1671,8,12,1,13,1,13,1,13,5,13,1676,
        8,13,10,13,12,13,1679,9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,
        14,1688,8,14,1,15,1,15,1,15,3,15,1693,8,15,1,15,1,15,1,15,3,15,1698,
        8,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,1706,8,15,1,15,1,15,1,15,
        1,15,3,15,1712,8,15,1,15,1,15,3,15,1716,8,15,1,15,1,15,1,15,3,15,
        1721,8,15,1,15,1,15,1,15,1,15,1,15,5,15,1728,8,15,10,15,12,15,1731,
        9,15,1,15,1,15,1,15,3,15,1736,8,15,1,15,1,15,5,15,1740,8,15,10,15,
        12,15,1743,9,15,1,15,1,15,1,15,3,15,1748,8,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,3,15,1757,8,15,1,15,1,15,1,15,1,15,3,15,1763,8,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,1772,8,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,1784,8,15,1,16,1,16,3,16,
        1788,8,16,1,16,1,16,1,16,1,16,3,16,1794,8,16,5,16,1796,8,16,10,16,
        12,16,1799,9,16,1,17,1,17,1,17,3,17,1804,8,17,1,18,1,18,3,18,1808,
        8,18,1,18,1,18,1,18,3,18,1813,8,18,1,18,3,18,1816,8,18,1,18,1,18,
        1,18,1,18,3,18,1822,8,18,1,18,1,18,1,18,1,18,3,18,1828,8,18,1,18,
        1,18,1,18,1,18,3,18,1834,8,18,1,18,1,18,3,18,1838,8,18,1,18,1,18,
        1,18,3,18,1843,8,18,1,18,1,18,3,18,1847,8,18,1,18,1,18,3,18,1851,
        8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,3,18,1867,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1875,
        8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1883,8,18,1,18,1,18,1,18,
        1,18,1,18,3,18,1890,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,1917,8,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1932,8,18,1,18,3,18,1935,
        8,18,1,18,1,18,1,18,1,18,3,18,1941,8,18,1,19,1,19,1,19,3,19,1946,
        8,19,1,20,1,20,1,21,1,21,3,21,1952,8,21,1,21,1,21,1,21,3,21,1957,
        8,21,5,21,1959,8,21,10,21,12,21,1962,9,21,1,22,1,22,3,22,1966,8,
        22,1,22,1,22,3,22,1970,8,22,1,23,1,23,3,23,1974,8,23,1,23,1,23,3,
        23,1978,8,23,1,24,1,24,3,24,1982,8,24,1,24,1,24,3,24,1986,8,24,3,
        24,1988,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,3,27,1998,8,
        27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,2006,8,28,1,28,1,28,1,28,1,
        28,1,28,3,28,2013,8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,2021,8,
        29,1,30,1,30,3,30,2025,8,30,1,30,5,30,2028,8,30,10,30,12,30,2031,
        9,30,1,31,1,31,1,32,1,32,3,32,2037,8,32,1,32,5,32,2040,8,32,10,32,
        12,32,2043,9,32,1,33,1,33,3,33,2047,8,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,3,33,2057,8,33,1,34,1,34,3,34,2061,8,34,1,34,1,34,
        1,34,3,34,2066,8,34,1,35,3,35,2069,8,35,1,35,3,35,2072,8,35,1,35,
        3,35,2075,8,35,1,35,1,35,1,35,1,35,1,36,3,36,2082,8,36,1,36,1,36,
        1,36,1,37,1,37,3,37,2089,8,37,1,38,1,38,3,38,2093,8,38,1,38,1,38,
        1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,2118,8,39,3,39,2120,
        8,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,2128,8,39,3,39,2130,8,39,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,3,40,2150,8,40,1,41,1,41,3,41,2154,8,41,
        1,41,1,41,5,41,2158,8,41,10,41,12,41,2161,9,41,1,42,1,42,1,42,1,
        42,3,42,2167,8,42,1,43,3,43,2170,8,43,1,43,1,43,3,43,2174,8,43,1,
        43,1,43,1,43,1,43,1,43,3,43,2181,8,43,1,43,3,43,2184,8,43,1,43,1,
        43,1,43,1,43,1,43,1,43,1,43,3,43,2193,8,43,1,44,1,44,1,44,5,44,2198,
        8,44,10,44,12,44,2201,9,44,1,45,1,45,3,45,2205,8,45,1,46,3,46,2208,
        8,46,1,46,1,46,1,47,3,47,2213,8,47,1,47,1,47,1,48,1,48,1,48,3,48,
        2220,8,48,1,48,3,48,2223,8,48,1,49,1,49,3,49,2227,8,49,1,50,1,50,
        1,50,1,50,3,50,2233,8,50,1,50,3,50,2236,8,50,1,50,1,50,1,51,3,51,
        2241,8,51,1,51,1,51,3,51,2245,8,51,1,51,1,51,1,51,1,51,1,51,5,51,
        2252,8,51,10,51,12,51,2255,9,51,3,51,2257,8,51,1,51,1,51,5,51,2261,
        8,51,10,51,12,51,2264,9,51,1,51,1,51,1,52,3,52,2269,8,52,1,52,1,
        52,3,52,2273,8,52,1,52,1,52,1,52,1,52,1,52,5,52,2280,8,52,10,52,
        12,52,2283,9,52,3,52,2285,8,52,1,52,1,52,1,52,1,52,5,52,2291,8,52,
        10,52,12,52,2294,9,52,1,52,1,52,1,53,3,53,2299,8,53,1,53,1,53,3,
        53,2303,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,3,54,2313,8,
        54,1,54,3,54,2316,8,54,1,55,4,55,2319,8,55,11,55,12,55,2320,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,3,56,2340,8,56,1,57,3,57,2343,8,57,1,57,3,57,2346,
        8,57,1,57,1,57,1,57,3,57,2351,8,57,1,57,1,57,5,57,2355,8,57,10,57,
        12,57,2358,9,57,1,57,1,57,1,57,1,57,1,57,5,57,2365,8,57,10,57,12,
        57,2368,9,57,1,57,1,57,1,57,1,57,1,57,5,57,2375,8,57,10,57,12,57,
        2378,9,57,3,57,2380,8,57,1,57,3,57,2383,8,57,1,58,1,58,3,58,2387,
        8,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,2395,8,58,1,59,1,59,1,59,
        1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,2408,8,60,1,61,1,61,
        3,61,2412,8,61,1,61,5,61,2415,8,61,10,61,12,61,2418,9,61,1,62,1,
        62,1,62,1,62,1,62,1,62,3,62,2426,8,62,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,5,64,2441,8,64,10,64,12,64,
        2444,9,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,3,65,2462,8,65,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,3,66,2471,8,66,1,66,3,66,2474,8,66,1,67,1,67,1,67,1,67,
        1,67,1,67,3,67,2482,8,67,1,68,1,68,1,68,1,68,1,68,3,68,2489,8,68,
        3,68,2491,8,68,1,69,1,69,1,69,1,70,1,70,3,70,2498,8,70,1,70,5,70,
        2501,8,70,10,70,12,70,2504,9,70,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,1,71,1,71,3,71,2517,8,71,1,72,1,72,3,72,2521,8,72,1,
        72,1,72,1,73,1,73,3,73,2527,8,73,1,73,1,73,1,74,1,74,3,74,2533,8,
        74,1,74,1,74,1,75,1,75,3,75,2539,8,75,1,75,1,75,1,76,1,76,3,76,2545,
        8,76,1,76,1,76,1,77,1,77,3,77,2551,8,77,1,77,1,77,1,78,3,78,2556,
        8,78,1,78,1,78,3,78,2560,8,78,1,78,1,78,1,79,1,79,1,80,1,80,3,80,
        2568,8,80,1,80,1,80,1,81,1,81,3,81,2574,8,81,1,81,1,81,1,82,1,82,
        3,82,2580,8,82,1,82,1,82,1,83,1,83,3,83,2586,8,83,1,83,1,83,1,84,
        3,84,2591,8,84,1,84,3,84,2594,8,84,1,84,3,84,2597,8,84,1,84,1,84,
        1,84,1,84,1,85,1,85,1,85,3,85,2606,8,85,1,85,3,85,2609,8,85,1,86,
        1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,88,3,88,2620,8,88,1,88,1,88,
        3,88,2624,8,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,
        2635,8,88,1,88,1,88,1,89,1,89,1,89,1,90,3,90,2643,8,90,1,90,1,90,
        3,90,2647,8,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2656,8,90,
        1,90,3,90,2659,8,90,1,90,1,90,1,90,1,90,3,90,2665,8,90,3,90,2667,
        8,90,1,90,1,90,3,90,2671,8,90,1,90,1,90,1,90,1,91,1,91,3,91,2678,
        8,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,2689,8,92,
        10,92,12,92,2692,9,92,1,92,1,92,1,92,1,92,3,92,2698,8,92,1,92,1,
        92,5,92,2702,8,92,10,92,12,92,2705,9,92,3,92,2707,8,92,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        3,93,2724,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2743,8,94,1,95,1,95,3,95,
        2747,8,95,1,95,1,95,1,96,1,96,3,96,2753,8,96,1,96,1,96,1,97,1,97,
        3,97,2759,8,97,1,97,1,97,1,98,1,98,3,98,2765,8,98,1,98,1,98,1,99,
        3,99,2770,8,99,1,99,1,99,1,99,1,99,1,99,3,99,2777,8,99,1,100,1,100,
        1,100,1,100,1,100,3,100,2784,8,100,1,100,5,100,2787,8,100,10,100,
        12,100,2790,9,100,3,100,2792,8,100,1,101,1,101,3,101,2796,8,101,
        1,102,1,102,3,102,2800,8,102,1,102,1,102,1,103,3,103,2805,8,103,
        1,103,1,103,3,103,2809,8,103,1,103,1,103,3,103,2813,8,103,1,104,
        1,104,1,104,1,104,3,104,2819,8,104,1,104,5,104,2822,8,104,10,104,
        12,104,2825,9,104,3,104,2827,8,104,1,105,1,105,3,105,2831,8,105,
        1,105,1,105,1,106,1,106,3,106,2837,8,106,1,106,1,106,3,106,2841,
        8,106,1,107,1,107,3,107,2845,8,107,1,107,1,107,1,108,1,108,1,108,
        1,108,3,108,2853,8,108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,
        2861,8,109,1,110,1,110,1,110,1,110,1,110,5,110,2868,8,110,10,110,
        12,110,2871,9,110,1,111,1,111,1,111,1,111,1,112,1,112,3,112,2879,
        8,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,
        1,114,3,114,2892,8,114,1,114,3,114,2895,8,114,1,115,3,115,2898,8,
        115,1,115,1,115,5,115,2902,8,115,10,115,12,115,2905,9,115,1,115,
        1,115,1,115,1,115,1,115,3,115,2912,8,115,1,115,1,115,1,115,3,115,
        2917,8,115,1,115,3,115,2920,8,115,1,115,3,115,2923,8,115,1,115,3,
        115,2926,8,115,1,115,3,115,2929,8,115,3,115,2931,8,115,1,115,1,115,
        1,115,1,115,3,115,2937,8,115,3,115,2939,8,115,1,116,1,116,1,116,
        1,116,1,116,1,117,1,117,1,118,1,118,1,118,1,119,1,119,1,119,1,119,
        3,119,2955,8,119,1,119,1,119,1,119,1,119,1,119,3,119,2962,8,119,
        1,119,3,119,2965,8,119,3,119,2967,8,119,3,119,2969,8,119,1,120,1,
        120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,2979,8,120,3,120,2981,
        8,120,1,121,1,121,3,121,2985,8,121,1,121,3,121,2988,8,121,1,121,
        3,121,2991,8,121,1,121,1,121,3,121,2995,8,121,1,121,1,121,1,121,
        3,121,3000,8,121,1,121,1,121,1,121,1,121,3,121,3006,8,121,1,121,
        3,121,3009,8,121,1,121,3,121,3012,8,121,1,122,1,122,1,123,1,123,
        3,123,3018,8,123,1,123,3,123,3021,8,123,1,123,1,123,1,124,1,124,
        1,124,5,124,3028,8,124,10,124,12,124,3031,9,124,1,125,1,125,1,125,
        1,126,1,126,1,126,1,126,3,126,3040,8,126,1,126,3,126,3043,8,126,
        1,126,3,126,3046,8,126,1,127,1,127,3,127,3050,8,127,1,127,1,127,
        1,127,1,127,3,127,3056,8,127,1,127,5,127,3059,8,127,10,127,12,127,
        3062,9,127,1,128,1,128,3,128,3066,8,128,1,128,1,128,1,128,3,128,
        3071,8,128,5,128,3073,8,128,10,128,12,128,3076,9,128,1,129,1,129,
        1,129,3,129,3081,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,131,
        1,131,1,131,3,131,3092,8,131,1,131,3,131,3095,8,131,1,131,1,131,
        1,131,3,131,3100,8,131,1,131,1,131,1,131,1,131,3,131,3106,8,131,
        1,131,3,131,3109,8,131,1,131,3,131,3112,8,131,1,131,3,131,3115,8,
        131,1,131,3,131,3118,8,131,1,131,1,131,1,132,1,132,1,133,1,133,1,
        133,1,133,1,133,1,134,1,134,1,134,3,134,3132,8,134,1,134,3,134,3135,
        8,134,1,134,1,134,3,134,3139,8,134,1,135,1,135,3,135,3143,8,135,
        1,135,1,135,1,136,1,136,1,136,1,136,3,136,3151,8,136,1,136,1,136,
        1,136,1,136,1,136,1,136,3,136,3159,8,136,5,136,3161,8,136,10,136,
        12,136,3164,9,136,1,137,1,137,3,137,3168,8,137,1,137,3,137,3171,
        8,137,1,137,1,137,3,137,3175,8,137,1,137,1,137,1,137,1,137,3,137,
        3181,8,137,1,138,1,138,3,138,3185,8,138,1,138,3,138,3188,8,138,1,
        139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,3197,8,139,1,139,1,
        139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,3207,8,139,1,140,3,
        140,3210,8,140,1,140,1,140,3,140,3214,8,140,1,140,3,140,3217,8,140,
        1,141,1,141,3,141,3221,8,141,1,141,1,141,1,141,3,141,3226,8,141,
        1,141,3,141,3229,8,141,1,141,5,141,3232,8,141,10,141,12,141,3235,
        9,141,1,142,1,142,1,142,3,142,3240,8,142,1,142,1,142,1,143,1,143,
        1,143,1,143,1,143,3,143,3249,8,143,1,144,1,144,5,144,3253,8,144,
        10,144,12,144,3256,9,144,1,144,1,144,3,144,3260,8,144,1,144,3,144,
        3263,8,144,1,144,3,144,3266,8,144,1,144,3,144,3269,8,144,1,144,3,
        144,3272,8,144,1,144,3,144,3275,8,144,1,145,1,145,1,146,1,146,1,
        147,1,147,1,147,1,148,1,148,1,148,1,149,1,149,1,149,3,149,3290,8,
        149,1,150,1,150,3,150,3294,8,150,1,151,1,151,1,151,1,151,3,151,3300,
        8,151,1,151,3,151,3303,8,151,1,151,3,151,3306,8,151,1,151,1,151,
        1,151,1,151,3,151,3312,8,151,1,151,1,151,1,151,3,151,3317,8,151,
        5,151,3319,8,151,10,151,12,151,3322,9,151,3,151,3324,8,151,1,152,
        1,152,1,152,1,152,1,152,3,152,3331,8,152,3,152,3333,8,152,1,152,
        1,152,1,153,1,153,1,153,1,154,1,154,1,154,1,154,5,154,3344,8,154,
        10,154,12,154,3347,9,154,1,155,1,155,1,155,1,155,1,156,1,156,1,156,
        1,156,1,157,3,157,3358,8,157,1,157,1,157,1,157,3,157,3363,8,157,
        1,157,3,157,3366,8,157,1,157,3,157,3369,8,157,1,158,1,158,1,158,
        3,158,3374,8,158,1,159,1,159,1,160,1,160,3,160,3380,8,160,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,3,161,3396,8,161,1,162,1,162,1,162,1,162,1,162,1,163,
        1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
        1,163,3,163,3416,8,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        3,164,3425,8,164,1,165,1,165,3,165,3429,8,165,1,165,1,165,1,165,
        5,165,3434,8,165,10,165,12,165,3437,9,165,1,166,1,166,3,166,3441,
        8,166,1,166,1,166,1,166,1,167,1,167,1,167,1,167,3,167,3450,8,167,
        1,168,1,168,1,168,1,169,1,169,1,169,1,169,1,170,1,170,1,171,1,171,
        1,171,3,171,3464,8,171,1,172,1,172,1,172,5,172,3469,8,172,10,172,
        12,172,3472,9,172,1,173,1,173,1,173,1,173,5,173,3478,8,173,10,173,
        12,173,3481,9,173,1,174,1,174,1,174,1,175,1,175,1,175,3,175,3489,
        8,175,1,175,1,175,1,176,1,176,3,176,3495,8,176,1,177,4,177,3498,
        8,177,11,177,12,177,3499,1,178,1,178,1,178,1,178,3,178,3506,8,178,
        1,178,3,178,3509,8,178,1,178,1,178,1,178,1,178,3,178,3515,8,178,
        1,179,1,179,1,180,1,180,1,180,3,180,3522,8,180,1,181,1,181,3,181,
        3526,8,181,1,181,1,181,5,181,3530,8,181,10,181,12,181,3533,9,181,
        1,182,1,182,1,182,3,182,3538,8,182,3,182,3540,8,182,1,183,3,183,
        3543,8,183,1,183,1,183,3,183,3547,8,183,1,184,1,184,1,184,1,185,
        1,185,1,185,1,185,1,185,3,185,3557,8,185,1,185,1,185,1,185,3,185,
        3562,8,185,1,185,5,185,3565,8,185,10,185,12,185,3568,9,185,1,186,
        1,186,5,186,3572,8,186,10,186,12,186,3575,9,186,1,187,1,187,1,187,
        1,187,1,187,1,187,3,187,3583,8,187,1,187,1,187,1,187,1,187,1,187,
        1,187,3,187,3591,8,187,1,187,1,187,1,187,3,187,3596,8,187,1,188,
        1,188,3,188,3600,8,188,1,188,1,188,1,188,1,188,3,188,3606,8,188,
        1,188,3,188,3609,8,188,1,189,3,189,3612,8,189,1,189,1,189,3,189,
        3616,8,189,1,190,1,190,3,190,3620,8,190,1,190,1,190,1,191,1,191,
        1,191,1,191,1,191,1,191,3,191,3630,8,191,1,192,1,192,3,192,3634,
        8,192,1,192,3,192,3637,8,192,1,192,3,192,3640,8,192,1,193,1,193,
        1,193,3,193,3645,8,193,1,193,1,193,1,194,1,194,3,194,3651,8,194,
        1,194,3,194,3654,8,194,1,194,1,194,1,194,1,194,3,194,3660,8,194,
        1,194,3,194,3663,8,194,3,194,3665,8,194,1,195,1,195,1,195,3,195,
        3670,8,195,1,195,1,195,1,196,1,196,1,196,1,196,1,196,1,196,1,196,
        1,196,3,196,3682,8,196,1,197,1,197,1,197,1,197,1,197,5,197,3689,
        8,197,10,197,12,197,3692,9,197,1,197,1,197,1,198,1,198,1,198,1,198,
        1,198,1,198,1,198,1,198,3,198,3704,8,198,1,198,3,198,3707,8,198,
        1,198,1,198,1,198,3,198,3712,8,198,1,198,1,198,1,198,1,198,1,198,
        3,198,3719,8,198,1,199,1,199,3,199,3723,8,199,1,199,3,199,3726,8,
        199,1,200,1,200,1,200,1,200,3,200,3732,8,200,1,201,1,201,1,201,1,
        201,1,202,1,202,1,202,1,202,1,203,1,203,1,203,1,203,3,203,3746,8,
        203,1,204,1,204,1,205,1,205,1,205,3,205,3753,8,205,1,205,1,205,1,
        206,1,206,1,206,5,206,3760,8,206,10,206,12,206,3763,9,206,1,207,
        1,207,1,207,3,207,3768,8,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,3,207,3777,8,207,1,207,1,207,3,207,3781,8,207,1,207,1,207,
        3,207,3785,8,207,1,208,1,208,1,209,1,209,1,210,1,210,1,210,1,210,
        3,210,3795,8,210,3,210,3797,8,210,1,211,1,211,1,211,1,211,1,211,
        1,211,3,211,3805,8,211,1,212,1,212,1,212,5,212,3810,8,212,10,212,
        12,212,3813,9,212,1,213,1,213,3,213,3817,8,213,1,214,3,214,3820,
        8,214,1,214,1,214,3,214,3824,8,214,1,214,3,214,3827,8,214,1,214,
        1,214,1,214,1,214,3,214,3833,8,214,1,214,3,214,3836,8,214,1,214,
        3,214,3839,8,214,1,215,1,215,1,215,1,215,3,215,3845,8,215,1,216,
        1,216,1,216,5,216,3850,8,216,10,216,12,216,3853,9,216,1,216,1,216,
        3,216,3857,8,216,1,216,1,216,3,216,3861,8,216,1,216,3,216,3864,8,
        216,1,216,3,216,3867,8,216,1,216,3,216,3870,8,216,3,216,3872,8,216,
        1,217,1,217,3,217,3876,8,217,1,218,1,218,1,218,1,218,1,218,3,218,
        3883,8,218,1,219,1,219,1,219,1,219,3,219,3889,8,219,1,219,1,219,
        3,219,3893,8,219,1,219,1,219,1,219,3,219,3898,8,219,1,219,3,219,
        3901,8,219,1,219,3,219,3904,8,219,1,219,3,219,3907,8,219,3,219,3909,
        8,219,1,219,1,219,1,219,3,219,3914,8,219,1,220,1,220,1,220,1,220,
        1,220,5,220,3921,8,220,10,220,12,220,3924,9,220,1,220,1,220,1,220,
        1,220,1,220,1,220,3,220,3932,8,220,1,221,1,221,3,221,3936,8,221,
        1,221,1,221,1,222,1,222,3,222,3942,8,222,1,222,3,222,3945,8,222,
        1,222,3,222,3948,8,222,1,223,1,223,1,223,1,223,3,223,3954,8,223,
        1,223,1,223,1,223,1,223,1,223,3,223,3961,8,223,3,223,3963,8,223,
        1,223,1,223,1,223,1,223,1,223,1,223,3,223,3971,8,223,1,223,1,223,
        1,223,1,223,3,223,3977,8,223,3,223,3979,8,223,1,224,1,224,1,224,
        1,225,1,225,1,225,1,225,1,225,3,225,3989,8,225,3,225,3991,8,225,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,3,226,4000,8,226,1,226,
        1,226,1,226,1,226,1,226,5,226,4007,8,226,10,226,12,226,4010,9,226,
        1,226,1,226,1,226,1,226,1,226,3,226,4017,8,226,1,226,1,226,1,226,
        1,226,1,226,3,226,4024,8,226,1,227,1,227,3,227,4028,8,227,1,227,
        1,227,3,227,4032,8,227,1,227,3,227,4035,8,227,3,227,4037,8,227,1,
        228,1,228,1,228,1,229,1,229,1,229,1,229,3,229,4046,8,229,1,229,1,
        229,1,229,1,230,1,230,1,230,1,230,3,230,4055,8,230,1,231,1,231,1,
        231,1,231,1,231,3,231,4062,8,231,1,232,1,232,1,232,5,232,4067,8,
        232,10,232,12,232,4070,9,232,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,
        1,233,3,233,4200,8,233,1,234,1,234,1,235,1,235,1,236,1,236,1,237,
        1,237,1,238,1,238,1,239,1,239,1,240,1,240,1,241,1,241,1,242,1,242,
        1,243,1,243,1,244,1,244,1,245,1,245,1,246,1,246,1,247,1,247,1,248,
        1,248,1,249,1,249,1,250,1,250,1,251,1,251,1,252,1,252,1,253,1,253,
        1,254,1,254,1,255,1,255,1,256,1,256,1,257,1,257,1,258,1,258,1,259,
        1,259,3,259,4254,8,259,1,260,1,260,1,261,1,261,1,261,3,261,4261,
        8,261,1,262,1,262,3,262,4265,8,262,1,263,1,263,1,263,1,263,1,263,
        1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,3,263,4281,
        8,263,1,264,1,264,1,265,1,265,1,266,1,266,1,266,1,266,5,266,4291,
        8,266,10,266,12,266,4294,9,266,3,266,4296,8,266,1,266,1,266,1,267,
        1,267,1,267,1,267,1,267,1,267,5,267,4306,8,267,10,267,12,267,4309,
        9,267,1,267,3,267,4312,8,267,1,268,1,268,1,268,1,268,3,268,4318,
        8,268,1,268,1,268,1,268,1,268,1,268,3,268,4325,8,268,1,268,1,268,
        1,268,1,268,1,268,3,268,4332,8,268,1,268,1,268,1,268,1,268,1,268,
        3,268,4339,8,268,1,268,1,268,1,268,1,268,1,268,3,268,4346,8,268,
        1,268,1,268,1,268,1,268,1,268,3,268,4353,8,268,1,268,1,268,1,268,
        1,268,1,268,3,268,4360,8,268,1,268,3,268,4363,8,268,1,269,1,269,
        1,269,5,269,4368,8,269,10,269,12,269,4371,9,269,1,270,1,270,1,270,
        5,270,4376,8,270,10,270,12,270,4379,9,270,1,271,1,271,1,271,5,271,
        4384,8,271,10,271,12,271,4387,9,271,1,272,1,272,1,273,1,273,1,273,
        5,273,4394,8,273,10,273,12,273,4397,9,273,1,274,1,274,1,274,3,274,
        4402,8,274,1,274,1,274,3,274,4406,8,274,1,274,3,274,4409,8,274,1,
        274,3,274,4412,8,274,1,274,3,274,4415,8,274,1,274,3,274,4418,8,274,
        1,274,3,274,4421,8,274,1,275,1,275,1,275,3,275,4426,8,275,1,275,
        3,275,4429,8,275,1,276,1,276,1,276,1,276,1,276,3,276,4436,8,276,
        1,276,1,276,5,276,4440,8,276,10,276,12,276,4443,9,276,1,277,1,277,
        1,277,1,277,1,278,1,278,1,278,1,278,1,279,1,279,1,279,1,279,1,280,
        1,280,1,280,1,280,1,281,1,281,1,281,5,281,4464,8,281,10,281,12,281,
        4467,9,281,1,282,1,282,1,283,1,283,3,283,4473,8,283,1,283,3,283,
        4476,8,283,1,283,1,283,1,284,1,284,1,284,5,284,4483,8,284,10,284,
        12,284,4486,9,284,1,285,1,285,1,285,3,285,4491,8,285,1,286,1,286,
        1,286,1,286,1,287,1,287,1,287,1,287,1,288,1,288,1,288,1,288,1,289,
        1,289,1,290,1,290,1,290,1,290,1,290,3,290,4512,8,290,1,290,1,290,
        1,290,1,290,3,290,4518,8,290,1,291,1,291,1,291,1,291,3,291,4524,
        8,291,1,292,1,292,1,292,5,292,4529,8,292,10,292,12,292,4532,9,292,
        1,293,1,293,1,293,1,293,1,293,3,293,4539,8,293,1,293,1,293,1,293,
        1,293,3,293,4545,8,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
        1,293,1,293,1,293,3,293,4557,8,293,3,293,4559,8,293,1,294,1,294,
        1,294,1,294,3,294,4565,8,294,1,294,1,294,3,294,4569,8,294,3,294,
        4571,8,294,1,295,1,295,3,295,4575,8,295,1,295,1,295,1,296,1,296,
        1,296,1,296,1,296,1,296,1,296,3,296,4586,8,296,1,297,1,297,1,297,
        3,297,4591,8,297,1,297,1,297,1,297,1,297,3,297,4597,8,297,1,297,
        1,297,1,297,1,297,1,297,3,297,4604,8,297,1,297,3,297,4607,8,297,
        1,297,3,297,4610,8,297,1,297,1,297,1,297,1,297,3,297,4616,8,297,
        3,297,4618,8,297,1,297,1,297,1,297,1,297,1,297,1,297,3,297,4626,
        8,297,1,297,3,297,4629,8,297,3,297,4631,8,297,3,297,4633,8,297,1,
        298,1,298,1,298,5,298,4638,8,298,10,298,12,298,4641,9,298,1,299,
        1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,4651,8,299,1,299,
        3,299,4654,8,299,3,299,4656,8,299,1,299,1,299,3,299,4660,8,299,1,
        299,1,299,1,299,3,299,4665,8,299,3,299,4667,8,299,1,299,1,299,1,
        299,3,299,4672,8,299,1,299,1,299,1,299,1,299,3,299,4678,8,299,1,
        299,3,299,4681,8,299,3,299,4683,8,299,1,299,1,299,3,299,4687,8,299,
        1,299,3,299,4690,8,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        3,299,4699,8,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,
        4708,8,299,1,299,1,299,1,299,1,299,3,299,4714,8,299,3,299,4716,8,
        299,3,299,4718,8,299,1,300,1,300,1,300,1,300,1,300,1,300,1,300,3,
        300,4727,8,300,1,300,1,300,3,300,4731,8,300,1,300,1,300,1,300,1,
        300,3,300,4737,8,300,1,300,3,300,4740,8,300,3,300,4742,8,300,1,300,
        1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,3,300,4753,8,300,
        1,300,1,300,1,300,3,300,4758,8,300,1,300,1,300,1,300,3,300,4763,
        8,300,1,300,1,300,1,300,1,300,3,300,4769,8,300,3,300,4771,8,300,
        1,300,1,300,3,300,4775,8,300,3,300,4777,8,300,1,301,1,301,1,301,
        1,302,1,302,1,302,3,302,4785,8,302,1,302,1,302,3,302,4789,8,302,
        1,302,1,302,1,303,3,303,4794,8,303,1,303,3,303,4797,8,303,1,303,
        5,303,4800,8,303,10,303,12,303,4803,9,303,1,303,1,303,3,303,4807,
        8,303,1,304,1,304,1,304,1,304,3,304,4813,8,304,1,305,1,305,1,305,
        1,305,1,306,1,306,1,306,3,306,4822,8,306,1,307,1,307,1,307,1,307,
        1,307,1,307,1,307,1,307,1,307,4,307,4833,8,307,11,307,12,307,4834,
        1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,3,308,
        4847,8,308,1,308,1,308,1,308,3,308,4852,8,308,1,308,1,308,1,308,
        1,308,1,308,1,308,3,308,4860,8,308,1,308,1,308,1,308,1,308,3,308,
        4866,8,308,3,308,4868,8,308,1,308,1,308,1,308,1,308,1,308,3,308,
        4875,8,308,3,308,4877,8,308,1,309,1,309,1,309,1,309,1,309,3,309,
        4884,8,309,1,310,1,310,1,310,3,310,4889,8,310,1,310,1,310,1,311,
        1,311,1,311,1,311,1,311,1,311,1,311,3,311,4900,8,311,1,311,1,311,
        1,311,3,311,4905,8,311,3,311,4907,8,311,1,311,1,311,3,311,4911,8,
        311,1,311,1,311,1,311,1,311,3,311,4917,8,311,1,311,3,311,4920,8,
        311,1,311,3,311,4923,8,311,1,311,1,311,1,311,1,311,1,311,1,311,1,
        311,1,311,3,311,4933,8,311,3,311,4935,8,311,1,312,1,312,1,312,1,
        312,3,312,4941,8,312,1,313,1,313,1,313,1,313,5,313,4947,8,313,10,
        313,12,313,4950,9,313,1,314,1,314,1,314,1,315,1,315,1,315,1,315,
        1,315,3,315,4960,8,315,1,315,1,315,3,315,4964,8,315,1,316,1,316,
        1,316,3,316,4969,8,316,1,317,1,317,1,317,1,318,1,318,1,318,1,318,
        1,318,1,318,1,318,1,318,1,318,1,318,5,318,4984,8,318,10,318,12,318,
        4987,9,318,1,319,1,319,1,319,3,319,4992,8,319,1,319,1,319,1,319,
        1,319,1,319,1,319,1,319,3,319,5001,8,319,1,319,1,319,1,319,1,319,
        1,319,1,319,3,319,5009,8,319,1,319,1,319,3,319,5013,8,319,1,319,
        1,319,1,319,1,319,3,319,5019,8,319,1,319,1,319,1,319,1,319,1,319,
        1,319,1,319,1,319,3,319,5029,8,319,1,319,1,319,3,319,5033,8,319,
        1,320,1,320,1,321,1,321,1,321,5,321,5040,8,321,10,321,12,321,5043,
        9,321,1,322,1,322,3,322,5047,8,322,1,322,1,322,1,322,1,322,3,322,
        5053,8,322,3,322,5055,8,322,1,322,1,322,3,322,5059,8,322,1,322,1,
        322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,3,322,5070,8,322,1,
        322,1,322,1,322,1,322,1,322,3,322,5077,8,322,1,322,1,322,1,322,1,
        322,3,322,5083,8,322,1,322,1,322,3,322,5087,8,322,1,323,1,323,1,
        323,3,323,5092,8,323,1,323,1,323,1,323,3,323,5097,8,323,1,323,1,
        323,1,323,1,323,1,323,1,323,3,323,5105,8,323,1,324,1,324,3,324,5109,
        8,324,1,324,5,324,5112,8,324,10,324,12,324,5115,9,324,1,325,1,325,
        1,325,1,325,1,325,1,325,3,325,5123,8,325,1,326,1,326,1,326,1,326,
        1,326,1,326,1,326,1,326,1,326,1,326,1,326,3,326,5136,8,326,3,326,
        5138,8,326,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
        1,327,1,327,1,327,3,327,5152,8,327,1,327,1,327,1,327,1,327,1,327,
        1,327,1,327,3,327,5161,8,327,3,327,5163,8,327,1,328,1,328,1,328,
        5,328,5168,8,328,10,328,12,328,5171,9,328,1,329,1,329,3,329,5175,
        8,329,1,330,1,330,3,330,5179,8,330,1,330,1,330,1,330,3,330,5184,
        8,330,1,330,1,330,1,330,1,330,5,330,5190,8,330,10,330,12,330,5193,
        9,330,1,330,1,330,1,330,1,330,3,330,5199,8,330,1,330,1,330,3,330,
        5203,8,330,1,330,1,330,1,330,1,330,3,330,5209,8,330,1,330,1,330,
        1,330,5,330,5214,8,330,10,330,12,330,5217,9,330,3,330,5219,8,330,
        1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,
        3,331,5232,8,331,1,331,1,331,1,331,1,331,3,331,5238,8,331,1,332,
        1,332,1,332,3,332,5243,8,332,1,333,1,333,1,334,1,334,1,334,1,334,
        1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,
        1,334,1,334,5,334,5264,8,334,10,334,12,334,5267,9,334,3,334,5269,
        8,334,1,335,1,335,1,335,1,336,1,336,1,336,1,336,1,336,1,336,1,336,
        1,336,1,336,1,336,1,336,3,336,5285,8,336,1,336,1,336,1,336,3,336,
        5290,8,336,1,336,3,336,5293,8,336,1,336,1,336,3,336,5297,8,336,1,
        336,3,336,5300,8,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,5308,
        8,336,1,336,1,336,1,336,1,336,3,336,5314,8,336,1,336,1,336,1,336,
        3,336,5319,8,336,1,336,3,336,5322,8,336,3,336,5324,8,336,1,337,1,
        337,3,337,5328,8,337,1,337,1,337,1,337,3,337,5333,8,337,3,337,5335,
        8,337,1,338,1,338,1,338,1,339,1,339,1,339,1,339,1,339,1,339,1,339,
        3,339,5347,8,339,1,340,1,340,5,340,5351,8,340,10,340,12,340,5354,
        9,340,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
        1,341,3,341,5367,8,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
        1,341,1,341,1,341,3,341,5379,8,341,1,341,1,341,3,341,5383,8,341,
        3,341,5385,8,341,1,342,1,342,1,342,1,342,1,342,1,342,3,342,5393,
        8,342,1,343,1,343,3,343,5397,8,343,1,343,1,343,1,344,1,344,1,344,
        1,344,1,344,3,344,5406,8,344,1,345,1,345,1,345,1,345,1,346,1,346,
        1,346,1,346,1,346,1,346,1,346,3,346,5419,8,346,1,347,1,347,1,347,
        3,347,5424,8,347,1,348,1,348,3,348,5428,8,348,1,348,1,348,3,348,
        5432,8,348,1,348,3,348,5435,8,348,1,349,1,349,3,349,5439,8,349,1,
        349,1,349,3,349,5443,8,349,1,349,3,349,5446,8,349,1,350,1,350,1,
        350,3,350,5451,8,350,1,350,3,350,5454,8,350,1,351,1,351,1,351,1,
        351,3,351,5460,8,351,1,351,3,351,5463,8,351,1,352,1,352,1,352,1,
        352,3,352,5469,8,352,1,352,3,352,5472,8,352,1,353,1,353,1,353,1,
        354,1,354,1,354,1,354,1,354,1,355,1,355,1,355,1,355,1,355,1,356,
        1,356,1,356,1,356,1,356,1,357,1,357,3,357,5494,8,357,1,357,1,357,
        1,357,1,357,3,357,5500,8,357,1,357,3,357,5503,8,357,1,358,1,358,
        1,358,1,358,1,359,1,359,1,359,1,359,1,359,3,359,5514,8,359,1,360,
        1,360,1,360,1,360,1,360,3,360,5521,8,360,1,360,1,360,3,360,5525,
        8,360,1,360,3,360,5528,8,360,1,360,3,360,5531,8,360,1,361,1,361,
        1,361,1,361,1,361,3,361,5538,8,361,1,361,1,361,3,361,5542,8,361,
        1,361,3,361,5545,8,361,1,361,3,361,5548,8,361,1,362,1,362,3,362,
        5552,8,362,1,362,1,362,1,362,1,362,3,362,5558,8,362,1,362,3,362,
        5561,8,362,1,363,1,363,3,363,5565,8,363,1,363,1,363,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,365,1,365,1,365,1,365,1,365,1,365,
        1,365,1,366,1,366,1,366,3,366,5586,8,366,1,367,1,367,1,367,3,367,
        5591,8,367,1,368,1,368,1,368,1,369,1,369,1,369,3,369,5599,8,369,
        1,369,1,369,1,369,3,369,5604,8,369,1,369,3,369,5607,8,369,1,370,
        1,370,3,370,5611,8,370,1,370,1,370,3,370,5615,8,370,1,371,1,371,
        3,371,5619,8,371,1,371,1,371,1,372,1,372,3,372,5625,8,372,1,372,
        1,372,3,372,5629,8,372,1,373,1,373,1,373,3,373,5634,8,373,1,374,
        1,374,1,374,3,374,5639,8,374,1,375,1,375,1,375,1,376,1,376,1,376,
        1,376,1,376,1,376,3,376,5650,8,376,3,376,5652,8,376,1,377,1,377,
        1,377,1,377,3,377,5658,8,377,1,377,1,377,1,378,1,378,1,378,1,378,
        1,378,1,379,1,379,1,379,1,379,1,379,1,380,1,380,1,380,1,380,1,381,
        1,381,1,381,1,381,3,381,5680,8,381,1,382,1,382,1,382,1,382,1,382,
        1,383,1,383,1,383,1,383,1,383,1,384,1,384,1,384,1,384,1,384,1,385,
        1,385,1,385,1,385,1,385,3,385,5702,8,385,1,386,1,386,1,386,1,386,
        1,386,3,386,5709,8,386,1,387,1,387,1,387,1,387,1,387,1,387,1,388,
        1,388,1,388,1,388,1,388,1,388,1,389,1,389,1,389,1,389,1,389,1,390,
        1,390,1,390,1,390,1,390,1,391,1,391,1,391,3,391,5736,8,391,3,391,
        5738,8,391,1,392,1,392,3,392,5742,8,392,1,393,1,393,1,394,1,394,
        1,394,1,395,1,395,1,395,5,395,5752,8,395,10,395,12,395,5755,9,395,
        1,396,1,396,1,396,1,396,1,396,1,396,1,396,3,396,5764,8,396,1,397,
        1,397,1,397,1,397,1,397,1,397,1,397,1,397,3,397,5774,8,397,1,397,
        1,397,3,397,5778,8,397,1,397,1,397,1,397,1,397,5,397,5784,8,397,
        10,397,12,397,5787,9,397,3,397,5789,8,397,1,397,1,397,3,397,5793,
        8,397,1,397,1,397,1,397,1,397,1,397,1,397,1,397,3,397,5802,8,397,
        1,398,1,398,3,398,5806,8,398,1,399,1,399,1,399,5,399,5811,8,399,
        10,399,12,399,5814,9,399,1,400,1,400,3,400,5818,8,400,1,401,1,401,
        1,401,1,401,1,401,1,401,3,401,5826,8,401,1,402,1,402,1,402,3,402,
        5831,8,402,1,402,1,402,1,403,1,403,3,403,5837,8,403,1,404,1,404,
        1,404,5,404,5842,8,404,10,404,12,404,5845,9,404,1,405,1,405,3,405,
        5849,8,405,1,405,1,405,1,405,1,405,3,405,5855,8,405,1,405,3,405,
        5858,8,405,1,406,1,406,1,407,1,407,1,407,1,407,1,407,1,407,3,407,
        5868,8,407,3,407,5870,8,407,1,408,1,408,1,408,1,408,1,408,3,408,
        5877,8,408,1,409,1,409,1,409,3,409,5882,8,409,1,409,1,409,3,409,
        5886,8,409,1,409,3,409,5889,8,409,1,410,1,410,1,410,5,410,5894,8,
        410,10,410,12,410,5897,9,410,1,411,1,411,3,411,5901,8,411,1,411,
        1,411,3,411,5905,8,411,1,412,1,412,1,412,1,412,1,412,1,413,1,413,
        1,413,1,413,3,413,5916,8,413,1,414,1,414,1,414,1,414,1,414,1,414,
        3,414,5924,8,414,1,414,1,414,3,414,5928,8,414,1,414,3,414,5931,8,
        414,1,414,3,414,5934,8,414,1,415,1,415,3,415,5938,8,415,1,415,1,
        415,3,415,5942,8,415,1,415,5,415,5945,8,415,10,415,12,415,5948,9,
        415,1,416,1,416,1,416,3,416,5953,8,416,1,417,1,417,3,417,5957,8,
        417,1,417,1,417,1,418,1,418,1,419,1,419,1,419,1,419,1,419,3,419,
        5968,8,419,1,419,3,419,5971,8,419,1,419,3,419,5974,8,419,1,419,3,
        419,5977,8,419,1,420,1,420,1,420,1,420,1,420,1,420,3,420,5985,8,
        420,1,421,1,421,3,421,5989,8,421,1,421,5,421,5992,8,421,10,421,12,
        421,5995,9,421,1,422,1,422,1,422,1,422,1,422,3,422,6002,8,422,1,
        423,1,423,1,423,1,423,1,423,1,423,3,423,6010,8,423,1,424,1,424,1,
        424,1,424,3,424,6016,8,424,1,425,1,425,1,425,1,425,1,425,1,425,1,
        425,1,425,1,425,1,425,1,425,1,425,3,425,6030,8,425,1,425,1,425,1,
        426,1,426,1,426,1,426,1,426,1,426,1,426,1,426,3,426,6042,8,426,1,
        427,1,427,1,427,1,428,1,428,1,428,1,429,1,429,1,430,1,430,1,430,
        1,430,3,430,6056,8,430,1,430,3,430,6059,8,430,1,430,1,430,3,430,
        6063,8,430,1,430,1,430,1,430,1,430,1,430,1,430,1,430,1,430,1,430,
        5,430,6074,8,430,10,430,12,430,6077,9,430,1,431,1,431,1,431,1,431,
        1,431,1,431,3,431,6085,8,431,1,431,1,431,1,431,1,431,1,431,1,431,
        1,431,1,431,1,431,1,431,5,431,6097,8,431,10,431,12,431,6100,9,431,
        1,432,1,432,1,433,1,433,3,433,6106,8,433,1,433,1,433,1,433,1,433,
        3,433,6112,8,433,1,433,1,433,1,433,1,433,3,433,6118,8,433,1,434,
        1,434,1,434,1,434,1,434,1,434,3,434,6126,8,434,1,434,1,434,1,434,
        1,434,1,434,1,434,1,434,1,434,1,434,3,434,6137,8,434,1,434,1,434,
        3,434,6141,8,434,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,5,435,6170,8,435,
        10,435,12,435,6173,9,435,1,436,1,436,1,436,3,436,6178,8,436,1,436,
        1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,
        1,436,1,436,1,436,3,436,6195,8,436,1,436,1,436,1,436,1,436,1,436,
        3,436,6202,8,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,
        1,436,1,436,1,436,1,436,3,436,6216,8,436,1,436,1,436,1,436,1,436,
        1,436,1,436,1,436,1,436,1,436,3,436,6227,8,436,1,436,1,436,1,436,
        3,436,6232,8,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,
        1,436,3,436,6243,8,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,
        1,436,3,436,6253,8,436,1,436,1,436,1,436,4,436,6258,8,436,11,436,
        12,436,6259,1,436,3,436,6263,8,436,1,436,1,436,1,436,1,436,1,436,
        1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,
        1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,1,436,
        1,436,1,436,1,436,1,436,1,436,3,436,6297,8,436,1,436,1,436,1,436,
        1,436,1,436,1,436,5,436,6305,8,436,10,436,12,436,6308,9,436,1,437,
        1,437,1,437,1,438,1,438,1,438,1,438,3,438,6317,8,438,1,439,1,439,
        1,439,3,439,6322,8,439,1,439,1,439,1,439,3,439,6327,8,439,1,439,
        1,439,1,439,1,439,1,439,3,439,6334,8,439,1,439,1,439,1,439,1,439,
        3,439,6340,8,439,1,439,1,439,1,439,3,439,6345,8,439,1,439,1,439,
        1,439,3,439,6350,8,439,1,439,1,439,1,439,1,439,3,439,6356,8,439,
        1,439,1,439,3,439,6360,8,439,1,439,1,439,1,439,3,439,6365,8,439,
        1,439,1,439,1,439,3,439,6370,8,439,1,439,1,439,1,439,1,439,1,439,
        3,439,6377,8,439,1,439,1,439,1,439,1,439,1,439,1,439,3,439,6385,
        8,439,1,439,1,439,1,439,3,439,6390,8,439,1,439,1,439,3,439,6394,
        8,439,1,439,1,439,3,439,6398,8,439,1,439,1,439,3,439,6402,8,439,
        3,439,6404,8,439,1,440,1,440,1,440,1,440,1,440,1,441,1,441,1,441,
        1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,3,441,6422,8,441,
        1,441,1,441,1,441,1,441,1,441,1,441,3,441,6430,8,441,1,441,1,441,
        3,441,6434,8,441,1,441,1,441,1,441,1,441,1,441,3,441,6441,8,441,
        1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,3,441,
        6453,8,441,1,441,3,441,6456,8,441,1,441,1,441,3,441,6460,8,441,1,
        442,1,442,1,442,3,442,6465,8,442,1,443,1,443,1,443,1,443,1,443,3,
        443,6472,8,443,1,443,1,443,3,443,6476,8,443,1,444,1,444,3,444,6480,
        8,444,1,445,1,445,1,445,1,445,3,445,6486,8,445,1,446,1,446,1,446,
        1,447,1,447,1,447,1,447,1,447,3,447,6496,8,447,1,447,1,447,1,447,
        1,447,1,447,1,447,1,447,3,447,6505,8,447,3,447,6507,8,447,1,448,
        3,448,6510,8,448,1,448,1,448,1,449,1,449,1,449,1,449,1,449,3,449,
        6519,8,449,1,450,1,450,1,450,5,450,6524,8,450,10,450,12,450,6527,
        9,450,1,451,1,451,1,451,1,451,1,451,1,451,1,451,1,451,1,451,1,451,
        3,451,6539,8,451,1,451,1,451,1,451,3,451,6544,8,451,1,452,1,452,
        1,452,1,452,1,452,3,452,6551,8,452,1,452,1,452,1,452,1,452,3,452,
        6557,8,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,4,452,6581,8,452,11,452,12,452,6582,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,3,452,6593,8,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,3,452,6625,8,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,3,452,6644,8,452,1,452,1,452,1,452,1,452,3,452,
        6650,8,452,1,452,1,452,3,452,6654,8,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,3,452,
        6681,8,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,3,452,6693,8,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,3,452,6706,8,452,1,452,1,452,3,452,6710,
        8,452,1,452,1,452,3,452,6714,8,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,3,452,
        6742,8,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,3,452,6792,8,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,3,452,6802,8,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,3,452,6814,8,452,
        1,452,1,452,1,452,3,452,6819,8,452,1,453,1,453,1,453,1,454,1,454,
        1,454,3,454,6827,8,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,
        1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,
        3,454,6847,8,454,1,455,1,455,3,455,6851,8,455,1,455,1,455,1,456,
        1,456,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,5,457,6865,
        8,457,10,457,12,457,6868,9,457,3,457,6870,8,457,1,458,1,458,1,458,
        3,458,6875,8,458,1,458,3,458,6878,8,458,1,459,1,459,1,460,1,460,
        1,460,1,460,1,460,3,460,6887,8,460,1,460,1,460,3,460,6891,8,460,
        1,460,1,460,1,460,1,460,3,460,6897,8,460,1,460,1,460,1,460,1,460,
        3,460,6903,8,460,1,460,1,460,3,460,6907,8,460,1,460,1,460,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,3,461,6918,8,461,1,461,1,461,
        1,461,1,461,3,461,6924,8,461,3,461,6926,8,461,1,461,1,461,1,462,
        1,462,1,462,3,462,6933,8,462,1,462,1,462,1,462,1,462,1,462,3,462,
        6940,8,462,1,462,1,462,3,462,6944,8,462,1,463,1,463,1,463,5,463,
        6949,8,463,10,463,12,463,6952,9,463,1,464,1,464,3,464,6956,8,464,
        1,465,1,465,1,465,3,465,6961,8,465,1,466,1,466,1,466,1,466,1,467,
        1,467,1,467,3,467,6970,8,467,1,467,3,467,6973,8,467,1,468,1,468,
        3,468,6977,8,468,1,468,1,468,1,468,3,468,6982,8,468,3,468,6984,8,
        468,1,468,1,468,3,468,6988,8,468,1,469,1,469,3,469,6992,8,469,1,
        470,1,470,1,470,1,471,1,471,1,471,1,472,1,472,1,472,1,473,1,473,
        3,473,7005,8,473,1,473,1,473,3,473,7009,8,473,1,473,3,473,7012,8,
        473,1,473,1,473,3,473,7016,8,473,1,473,1,473,3,473,7020,8,473,1,
        473,1,473,3,473,7024,8,473,1,473,1,473,1,473,1,473,1,473,3,473,7031,
        8,473,1,473,1,473,3,473,7035,8,473,1,473,1,473,3,473,7039,8,473,
        1,473,1,473,1,473,1,473,1,473,1,473,3,473,7047,8,473,1,473,1,473,
        3,473,7051,8,473,1,474,1,474,1,474,5,474,7056,8,474,10,474,12,474,
        7059,9,474,1,475,1,475,1,475,3,475,7064,8,475,1,476,1,476,1,477,
        1,477,1,478,1,478,3,478,7072,8,478,1,479,1,479,1,480,1,480,1,480,
        1,480,1,481,1,481,1,481,1,481,1,482,1,482,1,482,1,482,1,483,1,483,
        1,483,5,483,7091,8,483,10,483,12,483,7094,9,483,1,484,1,484,3,484,
        7098,8,484,1,485,1,485,1,485,5,485,7103,8,485,10,485,12,485,7106,
        9,485,1,486,1,486,1,487,1,487,1,487,1,487,1,488,1,488,1,488,1,488,
        1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,3,488,7127,
        8,488,1,489,1,489,1,489,1,490,1,490,1,490,1,490,1,490,1,491,1,491,
        1,491,1,491,1,491,1,491,3,491,7143,8,491,1,492,1,492,1,492,1,493,
        1,493,1,493,4,493,7151,8,493,11,493,12,493,7152,1,494,1,494,3,494,
        7157,8,494,1,494,1,494,1,494,4,494,7162,8,494,11,494,12,494,7163,
        1,494,3,494,7167,8,494,1,494,1,494,1,494,1,495,1,495,1,495,1,496,
        1,496,1,496,3,496,7178,8,496,1,497,1,497,1,498,1,498,1,498,1,499,
        1,499,3,499,7187,8,499,1,499,3,499,7190,8,499,1,499,1,499,1,500,
        1,500,1,500,3,500,7197,8,500,1,501,1,501,1,501,3,501,7202,8,501,
        1,502,1,502,1,502,1,502,1,502,1,503,1,503,1,503,1,503,1,503,1,503,
        1,503,1,504,1,504,1,504,1,504,1,504,1,504,1,504,1,505,1,505,1,505,
        4,505,7226,8,505,11,505,12,505,7227,1,506,1,506,1,506,1,506,3,506,
        7234,8,506,1,507,1,507,1,507,1,507,3,507,7240,8,507,1,507,1,507,
        3,507,7244,8,507,1,508,1,508,1,508,1,508,1,508,1,508,1,509,1,509,
        3,509,7254,8,509,1,510,1,510,3,510,7258,8,510,1,510,1,510,1,511,
        1,511,1,511,1,511,1,511,1,511,1,511,5,511,7269,8,511,10,511,12,511,
        7272,9,511,1,511,1,511,1,512,1,512,1,512,1,512,1,512,1,512,1,512,
        3,512,7283,8,512,1,513,1,513,1,513,1,513,1,513,1,513,1,514,1,514,
        1,514,1,515,1,515,1,515,1,516,1,516,3,516,7299,8,516,1,516,1,516,
        1,516,1,516,5,516,7305,8,516,10,516,12,516,7308,9,516,1,516,1,516,
        1,516,1,516,1,516,5,516,7315,8,516,10,516,12,516,7318,9,516,3,516,
        7320,8,516,1,517,1,517,1,517,3,517,7325,8,517,1,518,1,518,3,518,
        7329,8,518,1,518,1,518,1,518,1,519,1,519,3,519,7336,8,519,1,519,
        1,519,1,519,3,519,7341,8,519,1,520,1,520,1,521,1,521,1,521,3,521,
        7348,8,521,1,521,1,521,1,521,1,521,5,521,7354,8,521,10,521,12,521,
        7357,9,521,3,521,7359,8,521,1,522,1,522,1,522,3,522,7364,8,522,1,
        522,1,522,1,522,1,522,5,522,7370,8,522,10,522,12,522,7373,9,522,
        3,522,7375,8,522,1,523,1,523,1,523,1,523,1,524,1,524,1,524,1,525,
        1,525,1,525,1,526,1,526,3,526,7389,8,526,1,526,3,526,7392,8,526,
        1,526,1,526,1,526,1,526,1,527,1,527,1,527,1,527,1,527,1,527,1,527,
        3,527,7405,8,527,1,527,1,527,3,527,7409,8,527,3,527,7411,8,527,1,
        528,1,528,1,528,3,528,7416,8,528,1,529,1,529,1,529,3,529,7421,8,
        529,1,530,1,530,1,530,1,531,3,531,7427,8,531,1,531,1,531,1,532,1,
        532,3,532,7433,8,532,1,532,1,532,5,532,7437,8,532,10,532,12,532,
        7440,9,532,1,532,1,532,3,532,7444,8,532,1,532,3,532,7447,8,532,1,
        532,1,532,5,532,7451,8,532,10,532,12,532,7454,9,532,1,532,1,532,
        3,532,7458,8,532,1,532,3,532,7461,8,532,1,532,1,532,5,532,7465,8,
        532,10,532,12,532,7468,9,532,1,532,3,532,7471,8,532,1,532,1,532,
        1,532,1,532,3,532,7477,8,532,3,532,7479,8,532,1,532,3,532,7482,8,
        532,1,532,1,532,5,532,7486,8,532,10,532,12,532,7489,9,532,1,532,
        1,532,1,532,3,532,7494,8,532,1,532,1,532,1,532,1,532,1,532,1,532,
        3,532,7502,8,532,3,532,7504,8,532,3,532,7506,8,532,1,533,1,533,3,
        533,7510,8,533,1,534,1,534,5,534,7514,8,534,10,534,12,534,7517,9,
        534,1,534,3,534,7520,8,534,1,534,1,534,3,534,7524,8,534,1,534,1,
        534,1,534,3,534,7529,8,534,1,534,5,534,7532,8,534,10,534,12,534,
        7535,9,534,3,534,7537,8,534,1,535,3,535,7540,8,535,1,535,1,535,1,
        535,1,535,1,535,1,535,1,535,1,535,3,535,7550,8,535,1,535,1,535,1,
        535,1,535,3,535,7556,8,535,1,535,1,535,1,535,1,535,1,535,3,535,7563,
        8,535,1,535,1,535,1,535,3,535,7568,8,535,1,535,1,535,1,535,1,535,
        1,535,1,535,1,535,1,535,1,535,1,535,1,535,3,535,7581,8,535,1,535,
        1,535,1,535,1,535,1,535,1,535,3,535,7589,8,535,1,535,1,535,1,535,
        1,535,3,535,7595,8,535,1,535,1,535,1,535,3,535,7600,8,535,1,536,
        1,536,1,537,1,537,1,538,1,538,1,538,1,539,1,539,3,539,7611,8,539,
        1,540,1,540,3,540,7615,8,540,1,540,1,540,1,540,3,540,7620,8,540,
        1,540,1,540,3,540,7624,8,540,1,540,3,540,7627,8,540,1,541,1,541,
        1,541,3,541,7632,8,541,1,541,1,541,3,541,7636,8,541,1,541,1,541,
        1,541,1,541,1,541,1,541,3,541,7644,8,541,1,541,1,541,1,541,1,541,
        1,541,1,541,3,541,7652,8,541,3,541,7654,8,541,1,542,1,542,1,542,
        1,542,1,542,1,542,1,542,3,542,7663,8,542,1,543,1,543,1,543,1,543,
        5,543,7669,8,543,10,543,12,543,7672,9,543,1,543,1,543,1,544,1,544,
        3,544,7678,8,544,1,544,3,544,7681,8,544,1,545,1,545,1,545,1,545,
        5,545,7687,8,545,10,545,12,545,7690,9,545,1,545,1,545,1,546,1,546,
        1,546,1,546,3,546,7698,8,546,3,546,7700,8,546,1,547,1,547,1,548,
        1,548,3,548,7706,8,548,1,549,1,549,3,549,7710,8,549,1,549,1,549,
        1,549,1,549,1,549,1,549,1,549,3,549,7719,8,549,1,549,1,549,1,549,
        1,549,3,549,7725,8,549,1,549,3,549,7728,8,549,1,550,1,550,1,551,
        1,551,1,551,1,552,1,552,1,552,1,552,3,552,7739,8,552,1,553,1,553,
        1,554,1,554,1,554,1,555,1,555,3,555,7748,8,555,1,555,3,555,7751,
        8,555,1,555,1,555,1,555,3,555,7756,8,555,3,555,7758,8,555,1,555,
        3,555,7761,8,555,1,555,3,555,7764,8,555,1,555,1,555,3,555,7768,8,
        555,1,555,3,555,7771,8,555,1,555,1,555,3,555,7775,8,555,1,555,1,
        555,1,555,3,555,7780,8,555,1,555,3,555,7783,8,555,1,555,1,555,3,
        555,7787,8,555,1,555,3,555,7790,8,555,1,555,1,555,3,555,7794,8,555,
        1,555,1,555,1,555,3,555,7799,8,555,1,555,1,555,3,555,7803,8,555,
        1,555,1,555,1,555,1,555,1,555,1,555,1,555,1,555,1,555,1,555,3,555,
        7815,8,555,1,555,1,555,3,555,7819,8,555,1,555,1,555,1,555,1,555,
        3,555,7825,8,555,1,555,3,555,7828,8,555,1,555,1,555,1,555,3,555,
        7833,8,555,1,555,1,555,3,555,7837,8,555,1,555,1,555,3,555,7841,8,
        555,1,555,1,555,1,555,3,555,7846,8,555,1,555,1,555,1,555,1,555,1,
        555,1,555,1,555,3,555,7855,8,555,1,555,3,555,7858,8,555,1,555,1,
        555,3,555,7862,8,555,1,555,1,555,3,555,7866,8,555,1,555,3,555,7869,
        8,555,1,555,1,555,3,555,7873,8,555,1,555,1,555,3,555,7877,8,555,
        1,555,1,555,1,555,3,555,7882,8,555,1,555,1,555,1,555,3,555,7887,
        8,555,1,555,1,555,1,555,3,555,7892,8,555,1,556,1,556,1,556,3,556,
        7897,8,556,1,557,1,557,1,557,3,557,7902,8,557,3,557,7904,8,557,1,
        558,1,558,1,558,3,558,7909,8,558,1,558,1,558,1,559,4,559,7914,8,
        559,11,559,12,559,7915,1,560,1,560,1,560,1,560,1,560,1,560,3,560,
        7924,8,560,1,560,1,560,1,560,1,560,3,560,7930,8,560,3,560,7932,8,
        560,1,561,1,561,3,561,7936,8,561,1,561,1,561,3,561,7940,8,561,1,
        562,1,562,3,562,7944,8,562,1,562,1,562,3,562,7948,8,562,1,563,1,
        563,1,563,1,563,1,564,1,564,1,564,1,564,1,565,1,565,1,565,1,565,
        1,565,3,565,7963,8,565,1,566,1,566,1,566,1,566,3,566,7969,8,566,
        1,567,1,567,1,567,1,567,1,567,3,567,7976,8,567,1,568,1,568,3,568,
        7980,8,568,1,568,5,568,7983,8,568,10,568,12,568,7986,9,568,1,569,
        1,569,3,569,7990,8,569,1,569,3,569,7993,8,569,1,570,1,570,3,570,
        7997,8,570,1,570,3,570,8000,8,570,1,571,4,571,8003,8,571,11,571,
        12,571,8004,1,572,1,572,3,572,8009,8,572,1,572,1,572,1,572,1,572,
        3,572,8015,8,572,1,572,1,572,3,572,8019,8,572,1,572,1,572,3,572,
        8023,8,572,1,572,1,572,1,572,3,572,8028,8,572,1,572,1,572,1,572,
        3,572,8033,8,572,1,572,1,572,1,572,3,572,8038,8,572,1,572,1,572,
        1,572,3,572,8043,8,572,1,572,1,572,1,572,3,572,8048,8,572,1,572,
        1,572,1,572,3,572,8053,8,572,1,572,1,572,1,572,3,572,8058,8,572,
        1,572,1,572,1,572,3,572,8063,8,572,1,572,1,572,1,572,3,572,8068,
        8,572,1,572,1,572,1,572,3,572,8073,8,572,1,572,1,572,1,572,3,572,
        8078,8,572,1,572,1,572,1,572,3,572,8083,8,572,1,572,1,572,1,572,
        3,572,8088,8,572,1,572,1,572,1,572,1,572,1,572,1,572,1,572,1,572,
        3,572,8098,8,572,1,572,1,572,1,572,1,572,3,572,8104,8,572,1,572,
        1,572,1,572,1,572,3,572,8110,8,572,1,572,1,572,1,572,3,572,8115,
        8,572,1,572,1,572,1,572,1,572,1,572,3,572,8122,8,572,1,572,1,572,
        1,572,3,572,8127,8,572,1,572,1,572,1,572,1,572,1,572,1,572,1,572,
        3,572,8136,8,572,1,572,1,572,1,572,1,572,3,572,8142,8,572,1,572,
        1,572,1,572,3,572,8147,8,572,1,573,1,573,3,573,8151,8,573,1,574,
        3,574,8154,8,574,1,574,1,574,3,574,8158,8,574,1,574,1,574,1,575,
        3,575,8163,8,575,1,575,1,575,3,575,8167,8,575,1,575,1,575,1,576,
        3,576,8172,8,576,1,576,1,576,3,576,8176,8,576,1,576,1,576,1,577,
        1,577,1,577,1,577,1,577,3,577,8185,8,577,1,577,3,577,8188,8,577,
        1,577,3,577,8191,8,577,1,578,3,578,8194,8,578,1,578,1,578,3,578,
        8198,8,578,1,578,1,578,3,578,8202,8,578,1,578,1,578,3,578,8206,8,
        578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,1,578,
        1,578,1,578,1,578,3,578,8221,8,578,1,578,3,578,8224,8,578,3,578,
        8226,8,578,1,579,1,579,1,579,3,579,8231,8,579,1,579,1,579,1,579,
        1,579,1,579,1,579,1,579,3,579,8240,8,579,1,579,3,579,8243,8,579,
        1,579,1,579,3,579,8247,8,579,1,580,1,580,1,580,1,580,1,581,1,581,
        1,581,1,581,5,581,8257,8,581,10,581,12,581,8260,9,581,1,581,1,581,
        1,582,1,582,1,582,1,582,1,582,1,582,1,582,3,582,8271,8,582,1,582,
        1,582,1,582,3,582,8276,8,582,1,582,5,582,8279,8,582,10,582,12,582,
        8282,9,582,1,582,1,582,1,582,1,582,5,582,8288,8,582,10,582,12,582,
        8291,9,582,1,582,1,582,3,582,8295,8,582,1,583,1,583,1,583,1,583,
        1,583,5,583,8302,8,583,10,583,12,583,8305,9,583,1,583,1,583,3,583,
        8309,8,583,1,584,1,584,3,584,8313,8,584,1,584,1,584,3,584,8317,8,
        584,1,584,1,584,3,584,8321,8,584,1,584,1,584,1,584,3,584,8326,8,
        584,1,584,1,584,1,584,3,584,8331,8,584,1,584,1,584,1,584,1,584,3,
        584,8337,8,584,1,584,1,584,1,584,3,584,8342,8,584,1,584,3,584,8345,
        8,584,1,585,1,585,1,585,5,585,8350,8,585,10,585,12,585,8353,9,585,
        1,586,1,586,1,586,1,586,5,586,8359,8,586,10,586,12,586,8362,9,586,
        1,586,1,586,1,587,1,587,3,587,8368,8,587,1,588,1,588,1,588,1,588,
        1,589,1,589,1,589,1,590,1,590,1,590,1,590,1,591,1,591,1,591,1,591,
        1,592,3,592,8386,8,592,1,592,1,592,1,593,1,593,1,593,1,594,1,594,
        1,594,1,595,1,595,3,595,8398,8,595,1,596,1,596,1,596,1,596,1,596,
        1,596,1,597,1,597,1,597,5,597,8409,8,597,10,597,12,597,8412,9,597,
        1,598,1,598,1,598,5,598,8417,8,598,10,598,12,598,8420,9,598,1,599,
        1,599,1,599,1,599,3,599,8426,8,599,1,600,1,600,1,600,1,601,1,601,
        4,601,8433,8,601,11,601,12,601,8434,1,602,1,602,1,602,1,602,3,602,
        8441,8,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,8449,8,602,
        1,603,1,603,4,603,8453,8,603,11,603,12,603,8454,1,604,1,604,1,604,
        1,604,1,605,1,605,1,605,5,605,8464,8,605,10,605,12,605,8467,9,605,
        1,606,1,606,1,606,5,606,8472,8,606,10,606,12,606,8475,9,606,1,607,
        1,607,1,607,3,607,8480,8,607,1,607,1,607,3,607,8484,8,607,1,607,
        3,607,8487,8,607,1,608,1,608,1,608,1,608,3,608,8493,8,608,1,609,
        1,609,1,609,1,609,1,609,1,609,3,609,8501,8,609,1,610,1,610,1,610,
        1,610,1,611,1,611,1,611,1,611,1,611,1,612,1,612,1,612,1,612,1,613,
        1,613,1,613,1,613,1,613,1,613,1,614,1,614,1,614,1,614,1,614,1,614,
        1,615,1,615,1,615,1,615,1,615,1,615,1,615,1,616,1,616,1,616,1,616,
        1,616,3,616,8540,8,616,1,617,1,617,1,617,1,617,1,618,1,618,1,618,
        1,618,1,619,1,619,1,619,1,619,1,619,1,619,1,619,1,619,1,619,1,619,
        1,619,1,619,1,619,1,619,1,619,3,619,8565,8,619,1,620,1,620,1,620,
        1,621,1,621,1,621,1,622,1,622,3,622,8575,8,622,1,623,1,623,1,623,
        3,623,8580,8,623,3,623,8582,8,623,1,624,1,624,1,624,1,625,1,625,
        3,625,8589,8,625,1,626,1,626,1,627,1,627,1,628,1,628,1,628,1,629,
        1,629,1,629,3,629,8601,8,629,3,629,8603,8,629,1,630,1,630,1,631,
        1,631,1,632,1,632,1,632,1,632,5,632,8613,8,632,10,632,12,632,8616,
        9,632,1,632,1,632,1,633,1,633,1,634,1,634,3,634,8624,8,634,1,635,
        1,635,1,636,1,636,1,637,1,637,1,637,1,637,1,637,3,637,8635,8,637,
        1,637,1,637,1,638,1,638,1,639,1,639,1,640,1,640,1,641,1,641,1,642,
        1,642,1,643,1,643,1,644,1,644,1,645,1,645,1,646,1,646,3,646,8657,
        8,646,1,647,1,647,3,647,8661,8,647,1,648,1,648,1,649,1,649,1,650,
        1,650,1,651,1,651,1,652,1,652,1,653,1,653,1,654,1,654,1,655,1,655,
        1,656,1,656,1,657,1,657,1,658,1,658,3,658,8685,8,658,1,659,1,659,
        1,659,1,660,1,660,1,660,1,660,1,660,1,660,3,660,8696,8,660,3,660,
        8698,8,660,1,661,1,661,3,661,8702,8,661,1,662,1,662,1,662,5,662,
        8707,8,662,10,662,12,662,8710,9,662,1,663,1,663,1,663,5,663,8715,
        8,663,10,663,12,663,8718,9,663,1,664,1,664,1,665,1,665,3,665,8724,
        8,665,1,666,1,666,1,667,1,667,3,667,8730,8,667,1,668,1,668,1,669,
        1,669,1,670,1,670,1,671,1,671,1,672,1,672,1,672,3,672,8743,8,672,
        1,673,1,673,3,673,8747,8,673,1,674,1,674,1,674,5,674,8752,8,674,
        10,674,12,674,8755,9,674,1,675,1,675,1,675,1,675,1,676,1,676,3,676,
        8763,8,676,1,677,1,677,1,677,3,677,8768,8,677,3,677,8770,8,677,1,
        678,1,678,1,678,1,679,1,679,1,680,1,680,1,681,1,681,1,682,1,682,
        1,682,1,682,1,682,3,682,8786,8,682,1,683,1,683,1,683,1,683,1,683,
        3,683,8793,8,683,1,684,1,684,1,684,3,684,8798,8,684,1,685,1,685,
        1,685,1,685,1,685,1,685,3,685,8806,8,685,1,685,3,685,8809,8,685,
        1,686,1,686,1,686,3,686,8814,8,686,1,687,1,687,1,688,1,688,1,688,
        1,688,5,688,8822,8,688,10,688,12,688,8825,9,688,1,688,1,688,1,689,
        1,689,1,689,3,689,8832,8,689,1,690,1,690,1,690,3,690,8837,8,690,
        1,691,1,691,1,691,3,691,8842,8,691,1,692,3,692,8845,8,692,1,692,
        1,692,3,692,8849,8,692,1,692,5,692,8852,8,692,10,692,12,692,8855,
        9,692,1,693,1,693,1,694,1,694,1,694,5,694,8862,8,694,10,694,12,694,
        8865,9,694,1,695,1,695,1,695,3,695,8870,8,695,1,696,1,696,1,697,
        1,697,1,698,1,698,1,699,1,699,1,699,1,699,1,699,1,699,3,699,8884,
        8,699,1,700,1,700,3,700,8888,8,700,1,701,1,701,1,702,1,702,1,702,
        1,702,1,702,1,702,1,703,1,703,3,703,8900,8,703,1,704,1,704,3,704,
        8904,8,704,1,705,1,705,3,705,8908,8,705,1,706,1,706,3,706,8912,8,
        706,1,707,1,707,1,707,1,708,1,708,1,709,1,709,1,710,1,710,1,710,
        1,710,1,710,1,710,3,710,8927,8,710,1,711,1,711,1,711,1,712,1,712,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,3,713,8941,8,713,1,713,
        1,713,1,713,1,713,1,713,3,713,8948,8,713,3,713,8950,8,713,1,714,
        1,714,1,715,1,715,1,716,1,716,1,716,1,716,1,716,1,716,1,716,1,716,
        1,716,1,716,1,716,3,716,8967,8,716,1,716,1,716,1,716,3,716,8972,
        8,716,3,716,8974,8,716,1,717,1,717,1,718,1,718,1,718,3,718,8981,
        8,718,1,719,1,719,1,719,3,719,8986,8,719,1,719,1,719,1,719,3,719,
        8991,8,719,3,719,8993,8,719,1,720,1,720,1,720,1,720,3,720,8999,8,
        720,1,721,1,721,1,722,1,722,1,723,1,723,1,723,3,723,9008,8,723,1,
        723,0,4,860,862,870,872,724,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
        272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
        304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
        336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
        368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
        400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,
        432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,
        464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,
        496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,
        528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,
        560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,
        592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,
        624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,
        656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,
        688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,
        720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,
        752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,
        784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,
        816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,
        848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,
        880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,
        912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,
        944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,
        976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,
        1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,
        1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,
        1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,
        1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,
        1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,
        1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,
        1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,
        1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,
        1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,
        1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,
        1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,
        1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,1316,1318,
        1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,1344,
        1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,1368,1370,
        1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,
        1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,1418,1420,1422,
        1424,1426,1428,1430,1432,1434,1436,1438,1440,1442,1444,1446,0,170,
        1,0,722,723,2,0,17,17,590,590,2,0,49,49,471,471,1,0,645,646,2,0,
        4,4,148,148,1,0,724,725,2,0,50,50,284,284,2,0,140,140,156,156,2,
        0,232,232,458,458,4,0,126,126,249,249,437,437,556,556,2,0,130,130,
        250,250,2,0,441,441,604,604,2,0,374,374,638,638,3,0,335,335,578,
        578,602,602,2,0,6,6,28,28,3,0,133,133,242,242,614,614,2,0,197,197,
        415,415,2,0,571,571,574,574,3,0,232,232,295,295,431,431,2,0,191,
        191,367,367,4,0,191,191,268,268,367,367,419,419,2,0,750,750,753,
        756,3,0,131,131,223,223,295,295,1,0,626,627,2,0,82,82,295,295,2,
        0,112,112,653,653,2,0,278,278,484,484,2,0,131,131,295,295,2,0,663,
        663,844,844,7,0,10,10,143,143,223,223,531,532,534,534,536,536,555,
        555,2,0,381,381,773,773,2,0,747,749,787,787,3,0,432,432,484,484,
        683,683,2,0,18,18,134,134,2,0,508,508,614,614,2,0,272,272,478,478,
        2,0,98,98,239,239,2,0,10,10,143,143,2,0,198,198,232,232,2,0,236,
        236,265,265,2,0,386,386,649,649,3,0,244,244,571,571,574,574,2,0,
        29,29,543,543,2,0,261,261,472,472,2,0,32,32,316,316,2,0,296,296,
        807,807,2,0,300,300,813,813,2,0,297,297,808,808,2,0,318,318,831,
        831,2,0,303,303,816,816,2,0,304,304,817,817,2,0,298,298,810,810,
        2,0,305,305,819,819,2,0,299,299,811,811,2,0,314,314,820,820,2,0,
        308,308,821,821,2,0,307,307,822,822,2,0,310,310,824,824,2,0,311,
        311,825,825,2,0,312,312,826,826,2,0,313,313,827,827,2,0,315,315,
        828,828,2,0,317,317,830,830,2,0,738,738,829,829,2,0,309,309,823,
        823,2,0,712,712,818,818,2,0,713,713,806,806,2,0,319,319,812,812,
        2,0,735,735,809,809,2,0,736,736,832,832,2,0,383,383,743,744,2,0,
        301,301,814,814,2,0,302,302,815,815,2,0,528,528,530,530,2,0,449,
        449,538,538,2,0,514,514,803,803,2,0,123,123,148,148,3,0,369,369,
        539,539,650,650,2,0,287,287,611,611,2,0,128,128,719,719,3,0,206,
        206,422,422,574,574,4,0,242,242,443,443,497,497,614,614,13,0,133,
        133,148,148,170,170,173,173,188,188,236,236,423,423,427,427,451,
        451,510,510,565,565,594,594,616,616,4,0,483,483,572,572,618,618,
        636,636,2,0,97,97,148,148,2,0,128,128,369,369,2,0,180,180,431,431,
        5,0,56,56,180,180,184,184,333,333,431,431,3,0,180,180,431,431,619,
        619,2,0,76,76,601,601,2,0,203,203,251,251,2,0,235,236,263,263,6,
        0,10,10,96,96,256,256,334,334,522,522,567,567,2,0,84,84,430,430,
        4,0,225,225,421,421,547,547,617,617,5,0,32,32,163,163,165,165,208,
        208,515,515,2,0,618,618,710,710,2,0,134,135,178,178,3,0,183,183,
        596,596,610,610,2,0,15,15,767,767,2,0,394,394,770,770,2,0,10,10,
        16,16,2,0,750,750,752,757,3,0,145,145,349,349,760,762,1,0,758,759,
        1,0,765,766,2,0,758,759,764,764,2,0,35,36,38,38,2,0,326,326,345,
        345,5,0,548,548,551,551,564,564,632,632,635,635,4,0,678,679,692,
        692,694,694,696,696,2,0,684,684,686,686,2,0,681,681,685,685,2,0,
        191,191,268,268,2,0,232,232,695,695,2,0,5,5,558,558,1,0,114,115,
        1,0,792,793,4,0,113,113,116,116,583,583,586,586,4,0,211,211,279,
        279,351,353,411,412,2,0,371,371,745,745,2,0,745,745,763,763,5,0,
        118,121,226,228,341,342,494,494,655,655,9,0,122,122,229,229,337,
        337,343,343,350,350,429,429,495,495,640,640,656,656,3,0,92,92,175,
        175,605,605,2,0,101,101,540,540,2,0,377,377,485,485,10,0,53,53,64,
        64,73,73,87,89,107,107,336,336,355,355,492,492,557,557,576,576,2,
        0,554,554,637,637,3,0,128,128,152,152,192,192,3,0,128,128,142,142,
        334,334,3,0,204,204,402,402,513,513,3,0,44,44,220,220,488,488,1,
        0,661,662,2,0,599,599,621,621,5,0,31,31,249,249,331,331,516,516,
        588,588,4,0,126,126,192,192,195,195,378,378,1,0,41,42,2,0,290,290,
        330,330,4,0,211,212,279,279,351,353,411,412,3,0,512,512,612,612,
        657,657,1,0,544,546,2,0,61,61,575,575,6,0,78,78,80,80,128,128,152,
        152,192,192,442,442,3,0,191,191,268,268,373,373,2,0,142,142,334,
        334,2,0,280,280,432,432,2,0,323,323,344,344,2,0,112,112,236,236,
        3,0,240,240,251,251,397,397,2,0,541,541,579,579,2,0,380,380,385,
        385,2,0,284,284,375,375,2,0,848,848,850,850,3,0,747,749,788,788,
        790,791,2,0,747,749,788,788,2,0,747,749,790,791,1,0,788,789,2,0,
        183,183,596,596,2,0,376,376,786,786,1,0,747,749,1,0,750,751,5,0,
        214,214,284,284,502,502,658,658,673,673,3,0,173,173,510,510,714,
        714,32,0,19,19,29,29,46,47,58,58,61,61,75,75,77,77,90,90,123,123,
        147,147,159,159,196,197,219,219,222,222,234,234,245,245,267,267,
        373,373,415,415,417,417,455,455,468,468,480,480,489,489,512,512,
        514,514,543,543,552,552,597,597,606,607,651,651,677,677,9,0,170,
        170,188,188,369,369,423,423,427,427,451,451,459,459,565,565,709,
        709,166,0,2,3,5,9,12,12,16,16,21,21,23,27,33,33,37,37,40,42,44,44,
        50,50,53,54,56,57,63,68,70,71,73,74,76,76,78,82,84,85,87,89,91,91,
        96,96,101,101,107,107,111,113,116,116,122,122,129,130,132,132,138,
        142,150,152,156,156,158,158,160,160,162,166,168,169,171,172,176,
        177,179,181,184,185,189,192,201,202,204,204,208,208,210,213,216,
        216,220,220,224,225,229,230,233,233,235,235,238,238,243,244,250,
        250,255,256,258,259,262,262,264,264,268,268,270,270,273,274,279,
        280,286,286,288,289,296,296,298,305,307,314,316,319,321,324,327,
        328,333,337,340,340,343,344,346,346,348,348,350,358,361,361,363,
        363,365,368,374,374,377,377,379,379,381,381,384,384,386,387,390,
        390,398,404,406,413,418,419,421,421,424,426,429,431,434,434,438,
        439,441,442,445,449,452,452,454,454,456,456,460,466,470,470,472,
        474,476,476,481,483,485,486,488,488,490,490,492,492,495,496,500,
        501,503,503,508,508,513,513,515,515,517,517,519,522,528,530,532,
        532,535,535,538,538,540,540,542,542,544,547,553,553,556,561,566,
        568,571,572,575,578,580,581,583,583,586,586,592,593,598,599,601,
        604,610,610,613,613,615,615,617,619,625,625,627,627,631,631,636,
        636,638,641,646,648,650,650,652,653,656,656,659,662,664,664,669,
        671,674,675,680,680,682,682,689,690,693,693,695,695,697,698,702,
        708,711,713,715,725,727,730,732,732,735,738,792,797,799,801,803,
        843,4,0,583,583,586,586,731,731,733,744,54,0,2,2,12,12,19,19,27,
        27,29,29,46,47,58,58,61,61,66,66,75,75,77,77,90,90,123,123,147,147,
        159,159,196,197,201,201,210,210,219,219,222,222,224,224,245,245,
        267,267,373,373,387,387,390,390,398,398,401,401,405,405,413,413,
        415,415,417,417,452,452,455,455,468,468,470,470,480,480,489,489,
        496,496,503,503,512,512,514,514,519,520,543,543,552,552,597,597,
        606,607,615,615,648,648,651,651,659,659,661,662,677,677,720,723,
        158,0,3,3,5,9,16,16,21,21,23,26,33,33,37,37,40,42,44,44,50,50,53,
        54,56,57,63,65,67,68,70,71,73,74,76,76,78,82,84,85,87,89,91,91,96,
        96,101,101,107,107,111,113,116,116,122,122,129,130,132,132,138,142,
        150,152,156,156,158,158,160,160,162,166,168,169,171,171,176,176,
        179,181,184,185,189,192,202,202,204,204,208,208,211,214,216,216,
        220,220,225,225,229,230,233,233,235,235,238,238,243,244,250,250,
        255,256,258,259,262,262,264,264,268,268,270,270,273,274,279,280,
        284,284,286,286,288,289,296,296,298,305,307,314,316,319,321,324,
        327,328,333,337,340,340,343,344,346,346,348,348,350,358,361,361,
        363,363,365,368,374,374,377,377,379,379,381,381,384,384,399,400,
        402,404,406,412,418,419,421,421,424,426,429,431,434,434,438,439,
        441,442,445,449,454,454,456,456,460,466,472,474,476,476,481,483,
        485,486,488,488,490,490,492,492,495,495,500,502,508,508,513,513,
        515,515,517,517,521,522,528,530,532,532,535,535,538,538,540,540,
        542,542,544,547,553,553,556,561,565,568,571,572,575,578,580,581,
        583,583,586,586,592,593,598,604,610,610,613,613,617,619,627,627,
        631,631,636,636,638,641,647,647,650,650,652,653,656,656,664,664,
        669,671,674,676,680,680,682,682,689,690,693,693,695,695,697,698,
        702,708,711,712,716,717,719,719,724,725,727,728,792,793,798,798,
        10074,0,1455,1,0,0,0,2,1532,1,0,0,0,4,1534,1,0,0,0,6,1557,1,0,0,
        0,8,1571,1,0,0,0,10,1574,1,0,0,0,12,1612,1,0,0,0,14,1621,1,0,0,0,
        16,1634,1,0,0,0,18,1636,1,0,0,0,20,1641,1,0,0,0,22,1661,1,0,0,0,
        24,1670,1,0,0,0,26,1672,1,0,0,0,28,1687,1,0,0,0,30,1783,1,0,0,0,
        32,1787,1,0,0,0,34,1803,1,0,0,0,36,1940,1,0,0,0,38,1945,1,0,0,0,
        40,1947,1,0,0,0,42,1949,1,0,0,0,44,1963,1,0,0,0,46,1971,1,0,0,0,
        48,1987,1,0,0,0,50,1989,1,0,0,0,52,1992,1,0,0,0,54,1997,1,0,0,0,
        56,1999,1,0,0,0,58,2014,1,0,0,0,60,2022,1,0,0,0,62,2032,1,0,0,0,
        64,2034,1,0,0,0,66,2056,1,0,0,0,68,2065,1,0,0,0,70,2068,1,0,0,0,
        72,2081,1,0,0,0,74,2086,1,0,0,0,76,2090,1,0,0,0,78,2129,1,0,0,0,
        80,2131,1,0,0,0,82,2151,1,0,0,0,84,2166,1,0,0,0,86,2169,1,0,0,0,
        88,2194,1,0,0,0,90,2204,1,0,0,0,92,2207,1,0,0,0,94,2212,1,0,0,0,
        96,2222,1,0,0,0,98,2224,1,0,0,0,100,2228,1,0,0,0,102,2240,1,0,0,
        0,104,2268,1,0,0,0,106,2298,1,0,0,0,108,2315,1,0,0,0,110,2318,1,
        0,0,0,112,2339,1,0,0,0,114,2342,1,0,0,0,116,2394,1,0,0,0,118,2396,
        1,0,0,0,120,2400,1,0,0,0,122,2409,1,0,0,0,124,2425,1,0,0,0,126,2427,
        1,0,0,0,128,2435,1,0,0,0,130,2461,1,0,0,0,132,2463,1,0,0,0,134,2475,
        1,0,0,0,136,2490,1,0,0,0,138,2492,1,0,0,0,140,2495,1,0,0,0,142,2516,
        1,0,0,0,144,2518,1,0,0,0,146,2524,1,0,0,0,148,2530,1,0,0,0,150,2536,
        1,0,0,0,152,2542,1,0,0,0,154,2548,1,0,0,0,156,2555,1,0,0,0,158,2563,
        1,0,0,0,160,2565,1,0,0,0,162,2571,1,0,0,0,164,2577,1,0,0,0,166,2583,
        1,0,0,0,168,2590,1,0,0,0,170,2608,1,0,0,0,172,2610,1,0,0,0,174,2614,
        1,0,0,0,176,2619,1,0,0,0,178,2638,1,0,0,0,180,2642,1,0,0,0,182,2675,
        1,0,0,0,184,2706,1,0,0,0,186,2723,1,0,0,0,188,2725,1,0,0,0,190,2744,
        1,0,0,0,192,2750,1,0,0,0,194,2756,1,0,0,0,196,2762,1,0,0,0,198,2769,
        1,0,0,0,200,2778,1,0,0,0,202,2795,1,0,0,0,204,2797,1,0,0,0,206,2804,
        1,0,0,0,208,2814,1,0,0,0,210,2828,1,0,0,0,212,2834,1,0,0,0,214,2842,
        1,0,0,0,216,2848,1,0,0,0,218,2856,1,0,0,0,220,2862,1,0,0,0,222,2872,
        1,0,0,0,224,2876,1,0,0,0,226,2882,1,0,0,0,228,2887,1,0,0,0,230,2897,
        1,0,0,0,232,2940,1,0,0,0,234,2945,1,0,0,0,236,2947,1,0,0,0,238,2950,
        1,0,0,0,240,2980,1,0,0,0,242,2982,1,0,0,0,244,3013,1,0,0,0,246,3020,
        1,0,0,0,248,3024,1,0,0,0,250,3032,1,0,0,0,252,3045,1,0,0,0,254,3047,
        1,0,0,0,256,3065,1,0,0,0,258,3077,1,0,0,0,260,3082,1,0,0,0,262,3088,
        1,0,0,0,264,3121,1,0,0,0,266,3123,1,0,0,0,268,3131,1,0,0,0,270,3140,
        1,0,0,0,272,3150,1,0,0,0,274,3165,1,0,0,0,276,3187,1,0,0,0,278,3206,
        1,0,0,0,280,3209,1,0,0,0,282,3220,1,0,0,0,284,3236,1,0,0,0,286,3248,
        1,0,0,0,288,3250,1,0,0,0,290,3276,1,0,0,0,292,3278,1,0,0,0,294,3280,
        1,0,0,0,296,3283,1,0,0,0,298,3286,1,0,0,0,300,3293,1,0,0,0,302,3295,
        1,0,0,0,304,3325,1,0,0,0,306,3336,1,0,0,0,308,3339,1,0,0,0,310,3348,
        1,0,0,0,312,3352,1,0,0,0,314,3357,1,0,0,0,316,3370,1,0,0,0,318,3375,
        1,0,0,0,320,3379,1,0,0,0,322,3395,1,0,0,0,324,3397,1,0,0,0,326,3415,
        1,0,0,0,328,3417,1,0,0,0,330,3426,1,0,0,0,332,3438,1,0,0,0,334,3445,
        1,0,0,0,336,3451,1,0,0,0,338,3454,1,0,0,0,340,3458,1,0,0,0,342,3460,
        1,0,0,0,344,3465,1,0,0,0,346,3473,1,0,0,0,348,3482,1,0,0,0,350,3485,
        1,0,0,0,352,3494,1,0,0,0,354,3497,1,0,0,0,356,3514,1,0,0,0,358,3516,
        1,0,0,0,360,3521,1,0,0,0,362,3525,1,0,0,0,364,3539,1,0,0,0,366,3542,
        1,0,0,0,368,3548,1,0,0,0,370,3561,1,0,0,0,372,3569,1,0,0,0,374,3595,
        1,0,0,0,376,3608,1,0,0,0,378,3615,1,0,0,0,380,3617,1,0,0,0,382,3629,
        1,0,0,0,384,3631,1,0,0,0,386,3641,1,0,0,0,388,3664,1,0,0,0,390,3666,
        1,0,0,0,392,3673,1,0,0,0,394,3683,1,0,0,0,396,3718,1,0,0,0,398,3725,
        1,0,0,0,400,3731,1,0,0,0,402,3733,1,0,0,0,404,3737,1,0,0,0,406,3745,
        1,0,0,0,408,3747,1,0,0,0,410,3752,1,0,0,0,412,3756,1,0,0,0,414,3784,
        1,0,0,0,416,3786,1,0,0,0,418,3788,1,0,0,0,420,3796,1,0,0,0,422,3798,
        1,0,0,0,424,3806,1,0,0,0,426,3816,1,0,0,0,428,3819,1,0,0,0,430,3844,
        1,0,0,0,432,3871,1,0,0,0,434,3873,1,0,0,0,436,3882,1,0,0,0,438,3913,
        1,0,0,0,440,3931,1,0,0,0,442,3933,1,0,0,0,444,3947,1,0,0,0,446,3949,
        1,0,0,0,448,3980,1,0,0,0,450,3983,1,0,0,0,452,4023,1,0,0,0,454,4036,
        1,0,0,0,456,4038,1,0,0,0,458,4041,1,0,0,0,460,4054,1,0,0,0,462,4056,
        1,0,0,0,464,4063,1,0,0,0,466,4199,1,0,0,0,468,4201,1,0,0,0,470,4203,
        1,0,0,0,472,4205,1,0,0,0,474,4207,1,0,0,0,476,4209,1,0,0,0,478,4211,
        1,0,0,0,480,4213,1,0,0,0,482,4215,1,0,0,0,484,4217,1,0,0,0,486,4219,
        1,0,0,0,488,4221,1,0,0,0,490,4223,1,0,0,0,492,4225,1,0,0,0,494,4227,
        1,0,0,0,496,4229,1,0,0,0,498,4231,1,0,0,0,500,4233,1,0,0,0,502,4235,
        1,0,0,0,504,4237,1,0,0,0,506,4239,1,0,0,0,508,4241,1,0,0,0,510,4243,
        1,0,0,0,512,4245,1,0,0,0,514,4247,1,0,0,0,516,4249,1,0,0,0,518,4253,
        1,0,0,0,520,4255,1,0,0,0,522,4260,1,0,0,0,524,4264,1,0,0,0,526,4280,
        1,0,0,0,528,4282,1,0,0,0,530,4284,1,0,0,0,532,4286,1,0,0,0,534,4299,
        1,0,0,0,536,4362,1,0,0,0,538,4364,1,0,0,0,540,4372,1,0,0,0,542,4380,
        1,0,0,0,544,4388,1,0,0,0,546,4390,1,0,0,0,548,4398,1,0,0,0,550,4422,
        1,0,0,0,552,4435,1,0,0,0,554,4444,1,0,0,0,556,4448,1,0,0,0,558,4452,
        1,0,0,0,560,4456,1,0,0,0,562,4460,1,0,0,0,564,4468,1,0,0,0,566,4475,
        1,0,0,0,568,4479,1,0,0,0,570,4490,1,0,0,0,572,4492,1,0,0,0,574,4496,
        1,0,0,0,576,4500,1,0,0,0,578,4504,1,0,0,0,580,4517,1,0,0,0,582,4519,
        1,0,0,0,584,4525,1,0,0,0,586,4533,1,0,0,0,588,4570,1,0,0,0,590,4572,
        1,0,0,0,592,4585,1,0,0,0,594,4587,1,0,0,0,596,4634,1,0,0,0,598,4717,
        1,0,0,0,600,4776,1,0,0,0,602,4778,1,0,0,0,604,4781,1,0,0,0,606,4793,
        1,0,0,0,608,4812,1,0,0,0,610,4814,1,0,0,0,612,4818,1,0,0,0,614,4823,
        1,0,0,0,616,4876,1,0,0,0,618,4883,1,0,0,0,620,4885,1,0,0,0,622,4892,
        1,0,0,0,624,4940,1,0,0,0,626,4942,1,0,0,0,628,4951,1,0,0,0,630,4954,
        1,0,0,0,632,4965,1,0,0,0,634,4970,1,0,0,0,636,4973,1,0,0,0,638,4988,
        1,0,0,0,640,5034,1,0,0,0,642,5036,1,0,0,0,644,5086,1,0,0,0,646,5104,
        1,0,0,0,648,5106,1,0,0,0,650,5122,1,0,0,0,652,5137,1,0,0,0,654,5162,
        1,0,0,0,656,5164,1,0,0,0,658,5172,1,0,0,0,660,5218,1,0,0,0,662,5237,
        1,0,0,0,664,5242,1,0,0,0,666,5244,1,0,0,0,668,5268,1,0,0,0,670,5270,
        1,0,0,0,672,5323,1,0,0,0,674,5334,1,0,0,0,676,5336,1,0,0,0,678,5339,
        1,0,0,0,680,5352,1,0,0,0,682,5384,1,0,0,0,684,5392,1,0,0,0,686,5394,
        1,0,0,0,688,5405,1,0,0,0,690,5407,1,0,0,0,692,5418,1,0,0,0,694,5420,
        1,0,0,0,696,5425,1,0,0,0,698,5436,1,0,0,0,700,5447,1,0,0,0,702,5455,
        1,0,0,0,704,5464,1,0,0,0,706,5473,1,0,0,0,708,5476,1,0,0,0,710,5481,
        1,0,0,0,712,5486,1,0,0,0,714,5491,1,0,0,0,716,5504,1,0,0,0,718,5508,
        1,0,0,0,720,5515,1,0,0,0,722,5532,1,0,0,0,724,5549,1,0,0,0,726,5562,
        1,0,0,0,728,5568,1,0,0,0,730,5575,1,0,0,0,732,5582,1,0,0,0,734,5587,
        1,0,0,0,736,5592,1,0,0,0,738,5595,1,0,0,0,740,5608,1,0,0,0,742,5616,
        1,0,0,0,744,5622,1,0,0,0,746,5630,1,0,0,0,748,5635,1,0,0,0,750,5640,
        1,0,0,0,752,5643,1,0,0,0,754,5653,1,0,0,0,756,5661,1,0,0,0,758,5666,
        1,0,0,0,760,5671,1,0,0,0,762,5675,1,0,0,0,764,5681,1,0,0,0,766,5686,
        1,0,0,0,768,5691,1,0,0,0,770,5696,1,0,0,0,772,5703,1,0,0,0,774,5710,
        1,0,0,0,776,5716,1,0,0,0,778,5722,1,0,0,0,780,5727,1,0,0,0,782,5737,
        1,0,0,0,784,5741,1,0,0,0,786,5743,1,0,0,0,788,5745,1,0,0,0,790,5748,
        1,0,0,0,792,5763,1,0,0,0,794,5801,1,0,0,0,796,5805,1,0,0,0,798,5807,
        1,0,0,0,800,5815,1,0,0,0,802,5819,1,0,0,0,804,5827,1,0,0,0,806,5836,
        1,0,0,0,808,5838,1,0,0,0,810,5857,1,0,0,0,812,5859,1,0,0,0,814,5861,
        1,0,0,0,816,5876,1,0,0,0,818,5888,1,0,0,0,820,5890,1,0,0,0,822,5898,
        1,0,0,0,824,5906,1,0,0,0,826,5915,1,0,0,0,828,5917,1,0,0,0,830,5935,
        1,0,0,0,832,5949,1,0,0,0,834,5954,1,0,0,0,836,5960,1,0,0,0,838,5962,
        1,0,0,0,840,5978,1,0,0,0,842,5986,1,0,0,0,844,5996,1,0,0,0,846,6009,
        1,0,0,0,848,6011,1,0,0,0,850,6017,1,0,0,0,852,6041,1,0,0,0,854,6043,
        1,0,0,0,856,6046,1,0,0,0,858,6049,1,0,0,0,860,6062,1,0,0,0,862,6078,
        1,0,0,0,864,6101,1,0,0,0,866,6103,1,0,0,0,868,6140,1,0,0,0,870,6142,
        1,0,0,0,872,6296,1,0,0,0,874,6309,1,0,0,0,876,6316,1,0,0,0,878,6403,
        1,0,0,0,880,6405,1,0,0,0,882,6459,1,0,0,0,884,6461,1,0,0,0,886,6466,
        1,0,0,0,888,6479,1,0,0,0,890,6485,1,0,0,0,892,6487,1,0,0,0,894,6506,
        1,0,0,0,896,6509,1,0,0,0,898,6518,1,0,0,0,900,6520,1,0,0,0,902,6543,
        1,0,0,0,904,6818,1,0,0,0,906,6820,1,0,0,0,908,6846,1,0,0,0,910,6848,
        1,0,0,0,912,6854,1,0,0,0,914,6856,1,0,0,0,916,6871,1,0,0,0,918,6879,
        1,0,0,0,920,6881,1,0,0,0,922,6910,1,0,0,0,924,6943,1,0,0,0,926,6945,
        1,0,0,0,928,6953,1,0,0,0,930,6960,1,0,0,0,932,6962,1,0,0,0,934,6972,
        1,0,0,0,936,6987,1,0,0,0,938,6989,1,0,0,0,940,6993,1,0,0,0,942,6996,
        1,0,0,0,944,6999,1,0,0,0,946,7050,1,0,0,0,948,7052,1,0,0,0,950,7063,
        1,0,0,0,952,7065,1,0,0,0,954,7067,1,0,0,0,956,7071,1,0,0,0,958,7073,
        1,0,0,0,960,7075,1,0,0,0,962,7079,1,0,0,0,964,7083,1,0,0,0,966,7087,
        1,0,0,0,968,7095,1,0,0,0,970,7099,1,0,0,0,972,7107,1,0,0,0,974,7109,
        1,0,0,0,976,7126,1,0,0,0,978,7128,1,0,0,0,980,7131,1,0,0,0,982,7136,
        1,0,0,0,984,7144,1,0,0,0,986,7150,1,0,0,0,988,7154,1,0,0,0,990,7171,
        1,0,0,0,992,7174,1,0,0,0,994,7179,1,0,0,0,996,7181,1,0,0,0,998,7184,
        1,0,0,0,1000,7193,1,0,0,0,1002,7201,1,0,0,0,1004,7203,1,0,0,0,1006,
        7208,1,0,0,0,1008,7215,1,0,0,0,1010,7225,1,0,0,0,1012,7233,1,0,0,
        0,1014,7235,1,0,0,0,1016,7245,1,0,0,0,1018,7253,1,0,0,0,1020,7255,
        1,0,0,0,1022,7261,1,0,0,0,1024,7282,1,0,0,0,1026,7284,1,0,0,0,1028,
        7290,1,0,0,0,1030,7293,1,0,0,0,1032,7296,1,0,0,0,1034,7324,1,0,0,
        0,1036,7328,1,0,0,0,1038,7335,1,0,0,0,1040,7342,1,0,0,0,1042,7344,
        1,0,0,0,1044,7360,1,0,0,0,1046,7376,1,0,0,0,1048,7380,1,0,0,0,1050,
        7383,1,0,0,0,1052,7386,1,0,0,0,1054,7410,1,0,0,0,1056,7412,1,0,0,
        0,1058,7420,1,0,0,0,1060,7422,1,0,0,0,1062,7426,1,0,0,0,1064,7505,
        1,0,0,0,1066,7507,1,0,0,0,1068,7511,1,0,0,0,1070,7599,1,0,0,0,1072,
        7601,1,0,0,0,1074,7603,1,0,0,0,1076,7605,1,0,0,0,1078,7610,1,0,0,
        0,1080,7626,1,0,0,0,1082,7628,1,0,0,0,1084,7662,1,0,0,0,1086,7664,
        1,0,0,0,1088,7675,1,0,0,0,1090,7682,1,0,0,0,1092,7699,1,0,0,0,1094,
        7701,1,0,0,0,1096,7705,1,0,0,0,1098,7727,1,0,0,0,1100,7729,1,0,0,
        0,1102,7731,1,0,0,0,1104,7738,1,0,0,0,1106,7740,1,0,0,0,1108,7742,
        1,0,0,0,1110,7891,1,0,0,0,1112,7896,1,0,0,0,1114,7903,1,0,0,0,1116,
        7905,1,0,0,0,1118,7913,1,0,0,0,1120,7931,1,0,0,0,1122,7939,1,0,0,
        0,1124,7947,1,0,0,0,1126,7949,1,0,0,0,1128,7953,1,0,0,0,1130,7962,
        1,0,0,0,1132,7968,1,0,0,0,1134,7975,1,0,0,0,1136,7977,1,0,0,0,1138,
        7992,1,0,0,0,1140,7999,1,0,0,0,1142,8002,1,0,0,0,1144,8146,1,0,0,
        0,1146,8150,1,0,0,0,1148,8153,1,0,0,0,1150,8162,1,0,0,0,1152,8171,
        1,0,0,0,1154,8179,1,0,0,0,1156,8225,1,0,0,0,1158,8227,1,0,0,0,1160,
        8248,1,0,0,0,1162,8252,1,0,0,0,1164,8263,1,0,0,0,1166,8308,1,0,0,
        0,1168,8344,1,0,0,0,1170,8346,1,0,0,0,1172,8354,1,0,0,0,1174,8367,
        1,0,0,0,1176,8369,1,0,0,0,1178,8373,1,0,0,0,1180,8376,1,0,0,0,1182,
        8380,1,0,0,0,1184,8385,1,0,0,0,1186,8389,1,0,0,0,1188,8392,1,0,0,
        0,1190,8395,1,0,0,0,1192,8399,1,0,0,0,1194,8405,1,0,0,0,1196,8413,
        1,0,0,0,1198,8421,1,0,0,0,1200,8427,1,0,0,0,1202,8430,1,0,0,0,1204,
        8448,1,0,0,0,1206,8450,1,0,0,0,1208,8456,1,0,0,0,1210,8460,1,0,0,
        0,1212,8468,1,0,0,0,1214,8476,1,0,0,0,1216,8488,1,0,0,0,1218,8500,
        1,0,0,0,1220,8502,1,0,0,0,1222,8506,1,0,0,0,1224,8511,1,0,0,0,1226,
        8515,1,0,0,0,1228,8521,1,0,0,0,1230,8527,1,0,0,0,1232,8534,1,0,0,
        0,1234,8541,1,0,0,0,1236,8545,1,0,0,0,1238,8564,1,0,0,0,1240,8566,
        1,0,0,0,1242,8569,1,0,0,0,1244,8572,1,0,0,0,1246,8581,1,0,0,0,1248,
        8583,1,0,0,0,1250,8588,1,0,0,0,1252,8590,1,0,0,0,1254,8592,1,0,0,
        0,1256,8594,1,0,0,0,1258,8602,1,0,0,0,1260,8604,1,0,0,0,1262,8606,
        1,0,0,0,1264,8608,1,0,0,0,1266,8619,1,0,0,0,1268,8623,1,0,0,0,1270,
        8625,1,0,0,0,1272,8627,1,0,0,0,1274,8629,1,0,0,0,1276,8638,1,0,0,
        0,1278,8640,1,0,0,0,1280,8642,1,0,0,0,1282,8644,1,0,0,0,1284,8646,
        1,0,0,0,1286,8648,1,0,0,0,1288,8650,1,0,0,0,1290,8652,1,0,0,0,1292,
        8656,1,0,0,0,1294,8660,1,0,0,0,1296,8662,1,0,0,0,1298,8664,1,0,0,
        0,1300,8666,1,0,0,0,1302,8668,1,0,0,0,1304,8670,1,0,0,0,1306,8672,
        1,0,0,0,1308,8674,1,0,0,0,1310,8676,1,0,0,0,1312,8678,1,0,0,0,1314,
        8680,1,0,0,0,1316,8684,1,0,0,0,1318,8686,1,0,0,0,1320,8689,1,0,0,
        0,1322,8701,1,0,0,0,1324,8703,1,0,0,0,1326,8711,1,0,0,0,1328,8719,
        1,0,0,0,1330,8723,1,0,0,0,1332,8725,1,0,0,0,1334,8729,1,0,0,0,1336,
        8731,1,0,0,0,1338,8733,1,0,0,0,1340,8735,1,0,0,0,1342,8737,1,0,0,
        0,1344,8742,1,0,0,0,1346,8746,1,0,0,0,1348,8748,1,0,0,0,1350,8756,
        1,0,0,0,1352,8760,1,0,0,0,1354,8764,1,0,0,0,1356,8771,1,0,0,0,1358,
        8774,1,0,0,0,1360,8776,1,0,0,0,1362,8778,1,0,0,0,1364,8785,1,0,0,
        0,1366,8792,1,0,0,0,1368,8797,1,0,0,0,1370,8808,1,0,0,0,1372,8813,
        1,0,0,0,1374,8815,1,0,0,0,1376,8817,1,0,0,0,1378,8831,1,0,0,0,1380,
        8836,1,0,0,0,1382,8841,1,0,0,0,1384,8848,1,0,0,0,1386,8856,1,0,0,
        0,1388,8858,1,0,0,0,1390,8869,1,0,0,0,1392,8871,1,0,0,0,1394,8873,
        1,0,0,0,1396,8875,1,0,0,0,1398,8883,1,0,0,0,1400,8887,1,0,0,0,1402,
        8889,1,0,0,0,1404,8891,1,0,0,0,1406,8899,1,0,0,0,1408,8903,1,0,0,
        0,1410,8907,1,0,0,0,1412,8911,1,0,0,0,1414,8913,1,0,0,0,1416,8916,
        1,0,0,0,1418,8918,1,0,0,0,1420,8926,1,0,0,0,1422,8928,1,0,0,0,1424,
        8931,1,0,0,0,1426,8949,1,0,0,0,1428,8951,1,0,0,0,1430,8953,1,0,0,
        0,1432,8973,1,0,0,0,1434,8975,1,0,0,0,1436,8980,1,0,0,0,1438,8992,
        1,0,0,0,1440,8998,1,0,0,0,1442,9000,1,0,0,0,1444,9002,1,0,0,0,1446,
        9007,1,0,0,0,1448,1451,3,2,1,0,1449,1451,3,434,217,0,1450,1448,1,
        0,0,0,1450,1449,1,0,0,0,1451,1453,1,0,0,0,1452,1454,5,774,0,0,1453,
        1452,1,0,0,0,1453,1454,1,0,0,0,1454,1456,1,0,0,0,1455,1450,1,0,0,
        0,1455,1456,1,0,0,0,1456,1457,1,0,0,0,1457,1458,5,0,0,1,1458,1,1,
        0,0,0,1459,1533,3,4,2,0,1460,1533,3,80,40,0,1461,1533,3,188,94,0,
        1462,1533,3,220,110,0,1463,1533,3,224,112,0,1464,1533,3,226,113,
        0,1465,1533,3,228,114,0,1466,1533,3,230,115,0,1467,1533,3,236,118,
        0,1468,1533,3,238,119,0,1469,1533,3,242,121,0,1470,1533,3,262,131,
        0,1471,1533,3,274,137,0,1472,1533,3,276,138,0,1473,1533,3,428,214,
        0,1474,1533,3,430,215,0,1475,1533,3,452,226,0,1476,1533,3,580,290,
        0,1477,1533,3,586,293,0,1478,1533,3,592,296,0,1479,1533,3,660,330,
        0,1480,1533,3,668,334,0,1481,1533,3,670,335,0,1482,1533,3,694,347,
        0,1483,1533,3,696,348,0,1484,1533,3,698,349,0,1485,1533,3,700,350,
        0,1486,1533,3,702,351,0,1487,1533,3,704,352,0,1488,1533,3,706,353,
        0,1489,1533,3,708,354,0,1490,1533,3,710,355,0,1491,1533,3,712,356,
        0,1492,1533,3,714,357,0,1493,1533,3,716,358,0,1494,1533,3,718,359,
        0,1495,1533,3,720,360,0,1496,1533,3,722,361,0,1497,1533,3,724,362,
        0,1498,1533,3,726,363,0,1499,1533,3,728,364,0,1500,1533,3,730,365,
        0,1501,1533,3,732,366,0,1502,1533,3,734,367,0,1503,1533,3,736,368,
        0,1504,1533,3,738,369,0,1505,1533,3,740,370,0,1506,1533,3,742,371,
        0,1507,1533,3,744,372,0,1508,1533,3,746,373,0,1509,1533,3,748,374,
        0,1510,1533,3,750,375,0,1511,1533,3,752,376,0,1512,1533,3,754,377,
        0,1513,1533,3,756,378,0,1514,1533,3,758,379,0,1515,1533,3,760,380,
        0,1516,1533,3,762,381,0,1517,1533,3,764,382,0,1518,1533,3,766,383,
        0,1519,1533,3,768,384,0,1520,1533,3,770,385,0,1521,1533,3,772,386,
        0,1522,1533,3,774,387,0,1523,1533,3,776,388,0,1524,1533,3,778,389,
        0,1525,1533,3,780,390,0,1526,1533,3,826,413,0,1527,1533,3,794,397,
        0,1528,1533,3,846,423,0,1529,1533,3,1032,516,0,1530,1533,3,1042,
        521,0,1531,1533,3,1044,522,0,1532,1459,1,0,0,0,1532,1460,1,0,0,0,
        1532,1461,1,0,0,0,1532,1462,1,0,0,0,1532,1463,1,0,0,0,1532,1464,
        1,0,0,0,1532,1465,1,0,0,0,1532,1466,1,0,0,0,1532,1467,1,0,0,0,1532,
        1468,1,0,0,0,1532,1469,1,0,0,0,1532,1470,1,0,0,0,1532,1471,1,0,0,
        0,1532,1472,1,0,0,0,1532,1473,1,0,0,0,1532,1474,1,0,0,0,1532,1475,
        1,0,0,0,1532,1476,1,0,0,0,1532,1477,1,0,0,0,1532,1478,1,0,0,0,1532,
        1479,1,0,0,0,1532,1480,1,0,0,0,1532,1481,1,0,0,0,1532,1482,1,0,0,
        0,1532,1483,1,0,0,0,1532,1484,1,0,0,0,1532,1485,1,0,0,0,1532,1486,
        1,0,0,0,1532,1487,1,0,0,0,1532,1488,1,0,0,0,1532,1489,1,0,0,0,1532,
        1490,1,0,0,0,1532,1491,1,0,0,0,1532,1492,1,0,0,0,1532,1493,1,0,0,
        0,1532,1494,1,0,0,0,1532,1495,1,0,0,0,1532,1496,1,0,0,0,1532,1497,
        1,0,0,0,1532,1498,1,0,0,0,1532,1499,1,0,0,0,1532,1500,1,0,0,0,1532,
        1501,1,0,0,0,1532,1502,1,0,0,0,1532,1503,1,0,0,0,1532,1504,1,0,0,
        0,1532,1505,1,0,0,0,1532,1506,1,0,0,0,1532,1507,1,0,0,0,1532,1508,
        1,0,0,0,1532,1509,1,0,0,0,1532,1510,1,0,0,0,1532,1511,1,0,0,0,1532,
        1512,1,0,0,0,1532,1513,1,0,0,0,1532,1514,1,0,0,0,1532,1515,1,0,0,
        0,1532,1516,1,0,0,0,1532,1517,1,0,0,0,1532,1518,1,0,0,0,1532,1519,
        1,0,0,0,1532,1520,1,0,0,0,1532,1521,1,0,0,0,1532,1522,1,0,0,0,1532,
        1523,1,0,0,0,1532,1524,1,0,0,0,1532,1525,1,0,0,0,1532,1526,1,0,0,
        0,1532,1527,1,0,0,0,1532,1528,1,0,0,0,1532,1529,1,0,0,0,1532,1530,
        1,0,0,0,1532,1531,1,0,0,0,1533,3,1,0,0,0,1534,1555,5,11,0,0,1535,
        1556,3,20,10,0,1536,1556,3,6,3,0,1537,1538,5,422,0,0,1538,1540,3,
        1282,641,0,1539,1541,3,110,55,0,1540,1539,1,0,0,0,1540,1541,1,0,
        0,0,1541,1556,1,0,0,0,1542,1543,5,206,0,0,1543,1545,3,1286,643,0,
        1544,1546,3,110,55,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,1556,
        1,0,0,0,1547,1556,3,70,35,0,1548,1556,3,10,5,0,1549,1556,3,56,28,
        0,1550,1551,4,2,0,0,1551,1556,3,58,29,0,1552,1556,3,12,6,0,1553,
        1556,3,18,9,0,1554,1556,3,78,39,0,1555,1535,1,0,0,0,1555,1536,1,
        0,0,0,1555,1537,1,0,0,0,1555,1542,1,0,0,0,1555,1547,1,0,0,0,1555,
        1548,1,0,0,0,1555,1549,1,0,0,0,1555,1550,1,0,0,0,1555,1552,1,0,0,
        0,1555,1553,1,0,0,0,1555,1554,1,0,0,0,1556,5,1,0,0,0,1557,1558,5,
        109,0,0,1558,1560,3,1278,639,0,1559,1561,3,8,4,0,1560,1559,1,0,0,
        0,1561,1562,1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,7,1,
        0,0,0,1564,1572,3,84,42,0,1565,1566,5,435,0,0,1566,1568,5,386,0,
        0,1567,1569,5,750,0,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1570,
        1,0,0,0,1570,1572,3,1146,573,0,1571,1564,1,0,0,0,1571,1565,1,0,0,
        0,1572,9,1,0,0,0,1573,1575,3,1176,588,0,1574,1573,1,0,0,0,1574,1575,
        1,0,0,0,1575,1576,1,0,0,0,1576,1577,5,170,0,0,1577,1581,3,1306,653,
        0,1578,1579,5,383,0,0,1579,1580,5,490,0,0,1580,1582,3,1054,527,0,
        1581,1578,1,0,0,0,1581,1582,1,0,0,0,1582,1589,1,0,0,0,1583,1584,
        5,383,0,0,1584,1586,5,79,0,0,1585,1587,5,371,0,0,1586,1585,1,0,0,
        0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,1590,5,418,0,0,1589,1583,
        1,0,0,0,1589,1590,1,0,0,0,1590,1594,1,0,0,0,1591,1592,5,453,0,0,
        1592,1593,5,590,0,0,1593,1595,3,1346,673,0,1594,1591,1,0,0,0,1594,
        1595,1,0,0,0,1595,1602,1,0,0,0,1596,1603,5,156,0,0,1597,1600,5,140,
        0,0,1598,1599,5,383,0,0,1599,1601,3,578,289,0,1600,1598,1,0,0,0,
        1600,1601,1,0,0,0,1601,1603,1,0,0,0,1602,1596,1,0,0,0,1602,1597,
        1,0,0,0,1602,1603,1,0,0,0,1603,1606,1,0,0,0,1604,1605,5,75,0,0,1605,
        1607,3,1384,692,0,1606,1604,1,0,0,0,1606,1607,1,0,0,0,1607,1610,
        1,0,0,0,1608,1609,5,147,0,0,1609,1611,3,976,488,0,1610,1608,1,0,
        0,0,1610,1611,1,0,0,0,1611,11,1,0,0,0,1612,1613,5,288,0,0,1613,1614,
        5,217,0,0,1614,1615,3,1302,651,0,1615,1616,5,4,0,0,1616,1617,5,603,
        0,0,1617,1619,3,1384,692,0,1618,1620,3,14,7,0,1619,1618,1,0,0,0,
        1619,1620,1,0,0,0,1620,13,1,0,0,0,1621,1628,3,16,8,0,1622,1624,5,
        773,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,1625,
        1627,3,16,8,0,1626,1623,1,0,0,0,1627,1630,1,0,0,0,1628,1626,1,0,
        0,0,1628,1629,1,0,0,0,1629,15,1,0,0,0,1630,1628,1,0,0,0,1631,1635,
        3,144,72,0,1632,1635,3,156,78,0,1633,1635,3,158,79,0,1634,1631,1,
        0,0,0,1634,1632,1,0,0,0,1634,1633,1,0,0,0,1635,17,1,0,0,0,1636,1637,
        5,503,0,0,1637,1638,3,1312,656,0,1638,1639,3,128,64,0,1639,19,1,
        0,0,0,1640,1642,3,1252,626,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,
        1642,1643,1,0,0,0,1643,1644,5,574,0,0,1644,1646,3,1322,661,0,1645,
        1647,3,22,11,0,1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,21,1,0,0,
        0,1648,1651,3,24,12,0,1649,1652,3,1154,577,0,1650,1652,3,52,26,0,
        1651,1649,1,0,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1662,
        1,0,0,0,1653,1662,3,1154,577,0,1654,1662,3,52,26,0,1655,1656,3,26,
        13,0,1656,1657,5,773,0,0,1657,1659,1,0,0,0,1658,1655,1,0,0,0,1658,
        1659,1,0,0,0,1659,1660,1,0,0,0,1660,1662,3,28,14,0,1661,1648,1,0,
        0,0,1661,1653,1,0,0,0,1661,1654,1,0,0,0,1661,1658,1,0,0,0,1662,23,
        1,0,0,0,1663,1671,3,26,13,0,1664,1665,3,26,13,0,1665,1666,5,773,
        0,0,1666,1668,1,0,0,0,1667,1664,1,0,0,0,1667,1668,1,0,0,0,1668,1669,
        1,0,0,0,1669,1671,3,32,16,0,1670,1663,1,0,0,0,1670,1667,1,0,0,0,
        1671,25,1,0,0,0,1672,1677,3,34,17,0,1673,1674,5,773,0,0,1674,1676,
        3,34,17,0,1675,1673,1,0,0,0,1676,1679,1,0,0,0,1677,1675,1,0,0,0,
        1677,1678,1,0,0,0,1678,27,1,0,0,0,1679,1677,1,0,0,0,1680,1681,5,
        141,0,0,1681,1688,5,572,0,0,1682,1683,5,234,0,0,1683,1688,5,572,
        0,0,1684,1688,3,30,15,0,1685,1686,4,14,1,0,1686,1688,7,0,0,0,1687,
        1680,1,0,0,0,1687,1682,1,0,0,0,1687,1684,1,0,0,0,1687,1685,1,0,0,
        0,1688,29,1,0,0,0,1689,1690,5,4,0,0,1690,1692,5,405,0,0,1691,1693,
        3,1254,627,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1697,1,0,0,
        0,1694,1698,3,1162,581,0,1695,1696,5,404,0,0,1696,1698,3,1360,680,
        0,1697,1694,1,0,0,0,1697,1695,1,0,0,0,1698,1784,1,0,0,0,1699,1700,
        5,148,0,0,1700,1701,5,405,0,0,1701,1784,3,1348,674,0,1702,1703,5,
        438,0,0,1703,1705,5,405,0,0,1704,1706,3,1254,627,0,1705,1704,1,0,
        0,0,1705,1706,1,0,0,0,1706,1707,1,0,0,0,1707,1784,3,54,27,0,1708,
        1709,5,388,0,0,1709,1711,5,405,0,0,1710,1712,3,1254,627,0,1711,1710,
        1,0,0,0,1711,1712,1,0,0,0,1712,1713,1,0,0,0,1713,1715,3,54,27,0,
        1714,1716,3,1254,627,0,1715,1714,1,0,0,0,1715,1716,1,0,0,0,1716,
        1784,1,0,0,0,1717,1718,5,14,0,0,1718,1720,5,405,0,0,1719,1721,3,
        1254,627,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,
        1722,1784,3,54,27,0,1723,1724,5,62,0,0,1724,1725,5,405,0,0,1725,
        1729,3,54,27,0,1726,1728,3,664,332,0,1727,1726,1,0,0,0,1728,1731,
        1,0,0,0,1729,1727,1,0,0,0,1729,1730,1,0,0,0,1730,1784,1,0,0,0,1731,
        1729,1,0,0,0,1732,1733,5,455,0,0,1733,1735,5,405,0,0,1734,1736,3,
        1254,627,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1737,1,0,0,0,
        1737,1741,3,54,27,0,1738,1740,3,666,333,0,1739,1738,1,0,0,0,1740,
        1743,1,0,0,0,1741,1739,1,0,0,0,1741,1742,1,0,0,0,1742,1784,1,0,0,
        0,1743,1741,1,0,0,0,1744,1745,5,67,0,0,1745,1747,5,405,0,0,1746,
        1748,3,1254,627,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,1749,
        1,0,0,0,1749,1784,3,1360,680,0,1750,1751,5,597,0,0,1751,1752,5,405,
        0,0,1752,1784,3,54,27,0,1753,1754,5,454,0,0,1754,1756,5,405,0,0,
        1755,1757,3,1254,627,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,
        1762,1,0,0,0,1758,1759,3,1348,674,0,1759,1760,5,248,0,0,1760,1761,
        3,1162,581,0,1761,1763,1,0,0,0,1762,1758,1,0,0,0,1762,1763,1,0,0,
        0,1763,1784,1,0,0,0,1764,1765,5,172,0,0,1765,1766,5,405,0,0,1766,
        1767,3,1346,673,0,1767,1768,5,645,0,0,1768,1769,5,574,0,0,1769,1771,
        3,1322,661,0,1770,1772,3,50,25,0,1771,1770,1,0,0,0,1771,1772,1,0,
        0,0,1772,1784,1,0,0,0,1773,1774,5,141,0,0,1774,1775,5,405,0,0,1775,
        1776,3,54,27,0,1776,1777,5,572,0,0,1777,1784,1,0,0,0,1778,1779,5,
        234,0,0,1779,1780,5,405,0,0,1780,1781,3,54,27,0,1781,1782,5,572,
        0,0,1782,1784,1,0,0,0,1783,1689,1,0,0,0,1783,1699,1,0,0,0,1783,1702,
        1,0,0,0,1783,1708,1,0,0,0,1783,1717,1,0,0,0,1783,1723,1,0,0,0,1783,
        1732,1,0,0,0,1783,1744,1,0,0,0,1783,1750,1,0,0,0,1783,1753,1,0,0,
        0,1783,1764,1,0,0,0,1783,1773,1,0,0,0,1783,1778,1,0,0,0,1784,31,
        1,0,0,0,1785,1788,3,36,18,0,1786,1788,3,1142,571,0,1787,1785,1,0,
        0,0,1787,1786,1,0,0,0,1788,1797,1,0,0,0,1789,1793,5,773,0,0,1790,
        1794,3,36,18,0,1791,1794,3,34,17,0,1792,1794,3,1142,571,0,1793,1790,
        1,0,0,0,1793,1791,1,0,0,0,1793,1792,1,0,0,0,1794,1796,1,0,0,0,1795,
        1789,1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,
        0,1798,33,1,0,0,0,1799,1797,1,0,0,0,1800,1804,3,44,22,0,1801,1804,
        3,46,23,0,1802,1804,3,50,25,0,1803,1800,1,0,0,0,1803,1801,1,0,0,
        0,1803,1802,1,0,0,0,1804,35,1,0,0,0,1805,1807,5,4,0,0,1806,1808,
        5,72,0,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1821,1,0,0,0,1809,
        1810,3,1346,673,0,1810,1812,3,1068,534,0,1811,1813,3,1058,529,0,
        1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1815,1,0,0,0,1814,1816,
        3,38,19,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1822,1,0,0,0,
        1817,1818,5,776,0,0,1818,1819,3,88,44,0,1819,1820,5,777,0,0,1820,
        1822,1,0,0,0,1821,1809,1,0,0,0,1821,1817,1,0,0,0,1822,1941,1,0,0,
        0,1823,1824,5,4,0,0,1824,1941,3,1064,532,0,1825,1827,5,55,0,0,1826,
        1828,5,72,0,0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,
        0,0,1829,1830,3,1262,631,0,1830,1831,3,1346,673,0,1831,1833,3,1068,
        534,0,1832,1834,3,38,19,0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,1834,
        1941,1,0,0,0,1835,1837,5,348,0,0,1836,1838,5,72,0,0,1837,1836,1,
        0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,1840,3,1262,631,0,
        1840,1842,3,1068,534,0,1841,1843,3,38,19,0,1842,1841,1,0,0,0,1842,
        1843,1,0,0,0,1843,1941,1,0,0,0,1844,1866,5,148,0,0,1845,1847,5,72,
        0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1850,
        3,1262,631,0,1849,1851,3,40,20,0,1850,1849,1,0,0,0,1850,1851,1,0,
        0,0,1851,1867,1,0,0,0,1852,1853,5,199,0,0,1853,1854,5,265,0,0,1854,
        1867,3,1262,631,0,1855,1856,5,420,0,0,1856,1867,5,265,0,0,1857,1858,
        3,418,209,0,1858,1859,3,1272,636,0,1859,1867,1,0,0,0,1860,1861,4,
        18,2,0,1861,1862,5,62,0,0,1862,1867,3,1346,673,0,1863,1864,4,18,
        3,0,1864,1865,5,86,0,0,1865,1867,3,1346,673,0,1866,1846,1,0,0,0,
        1866,1852,1,0,0,0,1866,1855,1,0,0,0,1866,1857,1,0,0,0,1866,1860,
        1,0,0,0,1866,1863,1,0,0,0,1867,1941,1,0,0,0,1868,1869,5,140,0,0,
        1869,1941,5,263,0,0,1870,1871,5,156,0,0,1871,1941,5,263,0,0,1872,
        1874,5,11,0,0,1873,1875,5,72,0,0,1874,1873,1,0,0,0,1874,1875,1,0,
        0,0,1875,1876,1,0,0,0,1876,1889,3,1262,631,0,1877,1878,5,506,0,0,
        1878,1882,5,128,0,0,1879,1880,4,18,4,0,1880,1883,3,962,481,0,1881,
        1883,3,1368,684,0,1882,1879,1,0,0,0,1882,1881,1,0,0,0,1883,1890,
        1,0,0,0,1884,1885,5,148,0,0,1885,1890,5,128,0,0,1886,1887,4,18,5,
        0,1887,1888,5,506,0,0,1888,1890,3,1100,550,0,1889,1877,1,0,0,0,1889,
        1884,1,0,0,0,1889,1886,1,0,0,0,1890,1941,1,0,0,0,1891,1892,5,11,
        0,0,1892,1893,5,236,0,0,1893,1894,3,1272,636,0,1894,1895,3,1100,
        550,0,1895,1941,1,0,0,0,1896,1897,4,18,6,0,1897,1898,5,11,0,0,1898,
        1899,5,62,0,0,1899,1900,3,1346,673,0,1900,1901,3,1062,531,0,1901,
        1941,1,0,0,0,1902,1903,4,18,7,0,1903,1904,5,11,0,0,1904,1905,5,86,
        0,0,1905,1906,3,1346,673,0,1906,1907,3,1062,531,0,1907,1941,1,0,
        0,0,1908,1909,5,453,0,0,1909,1910,5,72,0,0,1910,1911,3,1262,631,
        0,1911,1912,5,590,0,0,1912,1913,3,1346,673,0,1913,1941,1,0,0,0,1914,
        1916,5,453,0,0,1915,1917,7,1,0,0,1916,1915,1,0,0,0,1916,1917,1,0,
        0,0,1917,1918,1,0,0,0,1918,1941,3,1316,658,0,1919,1920,5,453,0,0,
        1920,1921,3,418,209,0,1921,1922,3,1272,636,0,1922,1923,5,590,0,0,
        1923,1924,3,1270,635,0,1924,1941,1,0,0,0,1925,1926,5,94,0,0,1926,
        1927,5,590,0,0,1927,1931,3,950,475,0,1928,1929,4,18,8,0,1929,1932,
        5,128,0,0,1930,1932,3,1132,566,0,1931,1928,1,0,0,0,1931,1930,1,0,
        0,0,1932,1934,1,0,0,0,1933,1935,3,1188,594,0,1934,1933,1,0,0,0,1934,
        1935,1,0,0,0,1935,1941,1,0,0,0,1936,1941,5,198,0,0,1937,1938,5,393,
        0,0,1938,1939,5,45,0,0,1939,1941,3,42,21,0,1940,1805,1,0,0,0,1940,
        1823,1,0,0,0,1940,1825,1,0,0,0,1940,1835,1,0,0,0,1940,1844,1,0,0,
        0,1940,1868,1,0,0,0,1940,1870,1,0,0,0,1940,1872,1,0,0,0,1940,1891,
        1,0,0,0,1940,1896,1,0,0,0,1940,1902,1,0,0,0,1940,1908,1,0,0,0,1940,
        1914,1,0,0,0,1940,1919,1,0,0,0,1940,1925,1,0,0,0,1940,1936,1,0,0,
        0,1940,1937,1,0,0,0,1941,37,1,0,0,0,1942,1943,5,6,0,0,1943,1946,
        3,1346,673,0,1944,1946,5,191,0,0,1945,1942,1,0,0,0,1945,1944,1,0,
        0,0,1946,39,1,0,0,0,1947,1948,7,2,0,0,1948,41,1,0,0,0,1949,1951,
        3,1346,673,0,1950,1952,3,340,170,0,1951,1950,1,0,0,0,1951,1952,1,
        0,0,0,1952,1960,1,0,0,0,1953,1954,5,773,0,0,1954,1956,3,1346,673,
        0,1955,1957,3,340,170,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,1957,
        1959,1,0,0,0,1958,1953,1,0,0,0,1959,1962,1,0,0,0,1960,1958,1,0,0,
        0,1960,1961,1,0,0,0,1961,43,1,0,0,0,1962,1960,1,0,0,0,1963,1965,
        5,9,0,0,1964,1966,5,750,0,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,
        1966,1969,1,0,0,0,1967,1970,5,128,0,0,1968,1970,3,1346,673,0,1969,
        1967,1,0,0,0,1969,1968,1,0,0,0,1970,45,1,0,0,0,1971,1973,5,287,0,
        0,1972,1974,5,750,0,0,1973,1972,1,0,0,0,1973,1974,1,0,0,0,1974,1977,
        1,0,0,0,1975,1978,5,128,0,0,1976,1978,3,1346,673,0,1977,1975,1,0,
        0,0,1977,1976,1,0,0,0,1978,47,1,0,0,0,1979,1981,3,44,22,0,1980,1982,
        3,46,23,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1988,1,0,0,0,
        1983,1985,3,46,23,0,1984,1986,3,44,22,0,1985,1984,1,0,0,0,1985,1986,
        1,0,0,0,1986,1988,1,0,0,0,1987,1979,1,0,0,0,1987,1983,1,0,0,0,1988,
        49,1,0,0,0,1989,1990,7,3,0,0,1990,1991,5,625,0,0,1991,51,1,0,0,0,
        1992,1993,5,452,0,0,1993,1994,5,403,0,0,1994,53,1,0,0,0,1995,1998,
        5,10,0,0,1996,1998,3,1348,674,0,1997,1995,1,0,0,0,1997,1996,1,0,
        0,0,1998,55,1,0,0,0,1999,2000,5,572,0,0,2000,2012,3,1298,649,0,2001,
        2002,7,4,0,0,2002,2003,5,111,0,0,2003,2005,3,1384,692,0,2004,2006,
        3,64,32,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2013,1,0,0,0,
        2007,2008,5,453,0,0,2008,2009,5,590,0,0,2009,2013,3,1346,673,0,2010,
        2011,4,28,9,0,2011,2013,3,64,32,0,2012,2001,1,0,0,0,2012,2007,1,
        0,0,0,2012,2010,1,0,0,0,2013,57,1,0,0,0,2014,2015,5,605,0,0,2015,
        2016,5,572,0,0,2016,2017,3,1298,649,0,2017,2018,5,506,0,0,2018,2020,
        7,5,0,0,2019,2021,3,60,30,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,
        2021,59,1,0,0,0,2022,2029,3,62,31,0,2023,2025,5,773,0,0,2024,2023,
        1,0,0,0,2024,2025,1,0,0,0,2025,2026,1,0,0,0,2026,2028,3,62,31,0,
        2027,2024,1,0,0,0,2028,2031,1,0,0,0,2029,2027,1,0,0,0,2029,2030,
        1,0,0,0,2030,61,1,0,0,0,2031,2029,1,0,0,0,2032,2033,3,156,78,0,2033,
        63,1,0,0,0,2034,2041,3,66,33,0,2035,2037,5,773,0,0,2036,2035,1,0,
        0,0,2036,2037,1,0,0,0,2037,2038,1,0,0,0,2038,2040,3,66,33,0,2039,
        2036,1,0,0,0,2040,2043,1,0,0,0,2041,2039,1,0,0,0,2041,2042,1,0,0,
        0,2042,65,1,0,0,0,2043,2041,1,0,0,0,2044,2046,5,238,0,0,2045,2047,
        5,750,0,0,2046,2045,1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,
        2048,2057,3,1412,706,0,2049,2057,3,148,74,0,2050,2057,3,150,75,0,
        2051,2057,3,156,78,0,2052,2057,3,158,79,0,2053,2057,3,164,82,0,2054,
        2055,4,33,10,0,2055,2057,3,166,83,0,2056,2044,1,0,0,0,2056,2049,
        1,0,0,0,2056,2050,1,0,0,0,2056,2051,1,0,0,0,2056,2052,1,0,0,0,2056,
        2053,1,0,0,0,2056,2054,1,0,0,0,2057,67,1,0,0,0,2058,2060,5,238,0,
        0,2059,2061,5,750,0,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,2062,
        1,0,0,0,2062,2066,3,1412,706,0,2063,2066,3,148,74,0,2064,2066,3,
        150,75,0,2065,2058,1,0,0,0,2065,2063,1,0,0,0,2065,2064,1,0,0,0,2066,
        69,1,0,0,0,2067,2069,3,172,86,0,2068,2067,1,0,0,0,2068,2069,1,0,
        0,0,2069,2071,1,0,0,0,2070,2072,3,1176,588,0,2071,2070,1,0,0,0,2071,
        2072,1,0,0,0,2072,2074,1,0,0,0,2073,2075,3,174,87,0,2074,2073,1,
        0,0,0,2074,2075,1,0,0,0,2075,2076,1,0,0,0,2076,2077,5,636,0,0,2077,
        2078,3,1294,647,0,2078,2079,3,72,36,0,2079,71,1,0,0,0,2080,2082,
        3,1264,632,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2083,1,0,0,
        0,2083,2084,5,17,0,0,2084,2085,3,74,37,0,2085,73,1,0,0,0,2086,2088,
        3,98,49,0,2087,2089,3,76,38,0,2088,2087,1,0,0,0,2088,2089,1,0,0,
        0,2089,75,1,0,0,0,2090,2092,5,645,0,0,2091,2093,7,6,0,0,2092,2091,
        1,0,0,0,2092,2093,1,0,0,0,2093,2094,1,0,0,0,2094,2095,5,62,0,0,2095,
        2096,5,391,0,0,2096,77,1,0,0,0,2097,2098,5,244,0,0,2098,2099,5,482,
        0,0,2099,2100,3,1406,703,0,2100,2101,5,316,0,0,2101,2102,5,265,0,
        0,2102,2130,1,0,0,0,2103,2127,4,39,11,0,2104,2105,5,451,0,0,2105,
        2119,5,796,0,0,2106,2107,5,373,0,0,2107,2108,5,480,0,0,2108,2109,
        5,383,0,0,2109,2120,5,165,0,0,2110,2111,5,200,0,0,2111,2112,5,57,
        0,0,2112,2117,3,1346,673,0,2113,2114,5,373,0,0,2114,2115,5,480,0,
        0,2115,2116,5,383,0,0,2116,2118,5,165,0,0,2117,2113,1,0,0,0,2117,
        2118,1,0,0,0,2118,2120,1,0,0,0,2119,2106,1,0,0,0,2119,2110,1,0,0,
        0,2120,2128,1,0,0,0,2121,2122,7,7,0,0,2122,2123,3,1346,673,0,2123,
        2124,3,1346,673,0,2124,2128,1,0,0,0,2125,2126,5,451,0,0,2126,2128,
        5,834,0,0,2127,2104,1,0,0,0,2127,2121,1,0,0,0,2127,2125,1,0,0,0,
        2128,2130,1,0,0,0,2129,2097,1,0,0,0,2129,2103,1,0,0,0,2130,79,1,
        0,0,0,2131,2149,5,97,0,0,2132,2150,3,82,41,0,2133,2150,3,86,43,0,
        2134,2150,3,104,52,0,2135,2150,3,102,51,0,2136,2150,3,106,53,0,2137,
        2150,3,120,60,0,2138,2150,3,168,84,0,2139,2150,3,176,88,0,2140,2150,
        3,114,57,0,2141,2150,3,126,63,0,2142,2150,3,132,66,0,2143,2150,3,
        180,90,0,2144,2150,3,182,91,0,2145,2146,4,40,12,0,2146,2150,3,184,
        92,0,2147,2148,4,40,13,0,2148,2150,3,134,67,0,2149,2132,1,0,0,0,
        2149,2133,1,0,0,0,2149,2134,1,0,0,0,2149,2135,1,0,0,0,2149,2136,
        1,0,0,0,2149,2137,1,0,0,0,2149,2138,1,0,0,0,2149,2139,1,0,0,0,2149,
        2140,1,0,0,0,2149,2141,1,0,0,0,2149,2142,1,0,0,0,2149,2143,1,0,0,
        0,2149,2144,1,0,0,0,2149,2145,1,0,0,0,2149,2147,1,0,0,0,2150,81,
        1,0,0,0,2151,2153,5,109,0,0,2152,2154,3,1180,590,0,2153,2152,1,0,
        0,0,2153,2154,1,0,0,0,2154,2155,1,0,0,0,2155,2159,3,1276,638,0,2156,
        2158,3,84,42,0,2157,2156,1,0,0,0,2158,2161,1,0,0,0,2159,2157,1,0,
        0,0,2159,2160,1,0,0,0,2160,83,1,0,0,0,2161,2159,1,0,0,0,2162,2167,
        3,1152,576,0,2163,2167,3,1148,574,0,2164,2165,4,42,14,0,2165,2167,
        3,1150,575,0,2166,2162,1,0,0,0,2166,2163,1,0,0,0,2166,2164,1,0,0,
        0,2167,85,1,0,0,0,2168,2170,5,577,0,0,2169,2168,1,0,0,0,2169,2170,
        1,0,0,0,2170,2171,1,0,0,0,2171,2173,5,574,0,0,2172,2174,3,1180,590,
        0,2173,2172,1,0,0,0,2173,2174,1,0,0,0,2174,2175,1,0,0,0,2175,2192,
        3,1316,658,0,2176,2177,5,776,0,0,2177,2178,3,88,44,0,2178,2179,5,
        777,0,0,2179,2181,1,0,0,0,2180,2176,1,0,0,0,2180,2181,1,0,0,0,2181,
        2183,1,0,0,0,2182,2184,3,1138,569,0,2183,2182,1,0,0,0,2183,2184,
        1,0,0,0,2184,2193,1,0,0,0,2185,2186,5,275,0,0,2186,2193,3,1322,661,
        0,2187,2188,5,776,0,0,2188,2189,5,275,0,0,2189,2190,3,1322,661,0,
        2190,2191,5,777,0,0,2191,2193,1,0,0,0,2192,2180,1,0,0,0,2192,2185,
        1,0,0,0,2192,2187,1,0,0,0,2193,87,1,0,0,0,2194,2199,3,90,45,0,2195,
        2196,5,773,0,0,2196,2198,3,90,45,0,2197,2195,1,0,0,0,2198,2201,1,
        0,0,0,2199,2197,1,0,0,0,2199,2200,1,0,0,0,2200,89,1,0,0,0,2201,2199,
        1,0,0,0,2202,2205,3,1056,528,0,2203,2205,3,1064,532,0,2204,2202,
        1,0,0,0,2204,2203,1,0,0,0,2205,91,1,0,0,0,2206,2208,7,8,0,0,2207,
        2206,1,0,0,0,2207,2208,1,0,0,0,2208,2209,1,0,0,0,2209,2210,3,94,
        47,0,2210,93,1,0,0,0,2211,2213,5,17,0,0,2212,2211,1,0,0,0,2212,2213,
        1,0,0,0,2213,2214,1,0,0,0,2214,2215,3,98,49,0,2215,95,1,0,0,0,2216,
        2219,3,280,140,0,2217,2218,4,48,15,0,2218,2220,3,354,177,0,2219,
        2217,1,0,0,0,2219,2220,1,0,0,0,2220,2223,1,0,0,0,2221,2223,3,284,
        142,0,2222,2216,1,0,0,0,2222,2221,1,0,0,0,2223,97,1,0,0,0,2224,2226,
        3,280,140,0,2225,2227,3,354,177,0,2226,2225,1,0,0,0,2226,2227,1,
        0,0,0,2227,99,1,0,0,0,2228,2232,5,97,0,0,2229,2233,3,102,51,0,2230,
        2233,3,104,52,0,2231,2233,3,106,53,0,2232,2229,1,0,0,0,2232,2230,
        1,0,0,0,2232,2231,1,0,0,0,2233,2235,1,0,0,0,2234,2236,5,774,0,0,
        2235,2234,1,0,0,0,2235,2236,1,0,0,0,2236,2237,1,0,0,0,2237,2238,
        5,0,0,1,2238,101,1,0,0,0,2239,2241,3,1176,588,0,2240,2239,1,0,0,
        0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,2244,5,422,0,0,2243,2245,
        3,1180,590,0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,2246,1,0,0,
        0,2246,2247,3,1280,640,0,2247,2256,5,776,0,0,2248,2253,3,1184,592,
        0,2249,2250,5,773,0,0,2250,2252,3,1184,592,0,2251,2249,1,0,0,0,2252,
        2255,1,0,0,0,2253,2251,1,0,0,0,2253,2254,1,0,0,0,2254,2257,1,0,0,
        0,2255,2253,1,0,0,0,2256,2248,1,0,0,0,2256,2257,1,0,0,0,2257,2258,
        1,0,0,0,2258,2262,5,777,0,0,2259,2261,3,108,54,0,2260,2259,1,0,0,
        0,2261,2264,1,0,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,0,2263,2265,
        1,0,0,0,2264,2262,1,0,0,0,2265,2266,3,976,488,0,2266,103,1,0,0,0,
        2267,2269,3,1176,588,0,2268,2267,1,0,0,0,2268,2269,1,0,0,0,2269,
        2270,1,0,0,0,2270,2272,5,206,0,0,2271,2273,3,1180,590,0,2272,2271,
        1,0,0,0,2272,2273,1,0,0,0,2273,2274,1,0,0,0,2274,2275,3,1284,642,
        0,2275,2284,5,776,0,0,2276,2281,3,1186,593,0,2277,2278,5,773,0,0,
        2278,2280,3,1186,593,0,2279,2277,1,0,0,0,2280,2283,1,0,0,0,2281,
        2279,1,0,0,0,2281,2282,1,0,0,0,2282,2285,1,0,0,0,2283,2281,1,0,0,
        0,2284,2276,1,0,0,0,2284,2285,1,0,0,0,2285,2286,1,0,0,0,2286,2287,
        5,777,0,0,2287,2288,5,474,0,0,2288,2292,3,1190,595,0,2289,2291,3,
        108,54,0,2290,2289,1,0,0,0,2291,2294,1,0,0,0,2292,2290,1,0,0,0,2292,
        2293,1,0,0,0,2293,2295,1,0,0,0,2294,2292,1,0,0,0,2295,2296,3,976,
        488,0,2296,105,1,0,0,0,2297,2299,5,8,0,0,2298,2297,1,0,0,0,2298,
        2299,1,0,0,0,2299,2300,1,0,0,0,2300,2302,5,206,0,0,2301,2303,3,1180,
        590,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,2304,1,0,0,0,2304,
        2305,3,1308,654,0,2305,2306,5,474,0,0,2306,2307,7,9,0,0,2307,2308,
        5,520,0,0,2308,2309,3,1384,692,0,2309,107,1,0,0,0,2310,2316,3,112,
        56,0,2311,2313,5,371,0,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,
        2314,1,0,0,0,2314,2316,5,137,0,0,2315,2310,1,0,0,0,2315,2312,1,0,
        0,0,2316,109,1,0,0,0,2317,2319,3,108,54,0,2318,2317,1,0,0,0,2319,
        2320,1,0,0,0,2320,2318,1,0,0,0,2320,2321,1,0,0,0,2321,111,1,0,0,
        0,2322,2323,5,75,0,0,2323,2340,3,1384,692,0,2324,2325,5,267,0,0,
        2325,2340,5,537,0,0,2326,2327,5,373,0,0,2327,2340,5,537,0,0,2328,
        2329,5,90,0,0,2329,2340,5,537,0,0,2330,2331,5,433,0,0,2331,2332,
        5,537,0,0,2332,2340,5,112,0,0,2333,2334,5,347,0,0,2334,2335,5,537,
        0,0,2335,2340,5,112,0,0,2336,2337,5,537,0,0,2337,2338,5,496,0,0,
        2338,2340,7,10,0,0,2339,2322,1,0,0,0,2339,2324,1,0,0,0,2339,2326,
        1,0,0,0,2339,2328,1,0,0,0,2339,2330,1,0,0,0,2339,2333,1,0,0,0,2339,
        2336,1,0,0,0,2340,113,1,0,0,0,2341,2343,3,1252,626,0,2342,2341,1,
        0,0,0,2342,2343,1,0,0,0,2343,2379,1,0,0,0,2344,2346,5,609,0,0,2345,
        2344,1,0,0,0,2345,2346,1,0,0,0,2346,2347,1,0,0,0,2347,2348,5,236,
        0,0,2348,2350,3,1270,635,0,2349,2351,3,1102,551,0,2350,2349,1,0,
        0,0,2350,2351,1,0,0,0,2351,2352,1,0,0,0,2352,2356,3,118,59,0,2353,
        2355,3,1096,548,0,2354,2353,1,0,0,0,2355,2358,1,0,0,0,2356,2354,
        1,0,0,0,2356,2357,1,0,0,0,2357,2380,1,0,0,0,2358,2356,1,0,0,0,2359,
        2360,5,205,0,0,2360,2361,5,236,0,0,2361,2362,3,1270,635,0,2362,2366,
        3,118,59,0,2363,2365,3,1104,552,0,2364,2363,1,0,0,0,2365,2368,1,
        0,0,0,2366,2364,1,0,0,0,2366,2367,1,0,0,0,2367,2380,1,0,0,0,2368,
        2366,1,0,0,0,2369,2370,5,523,0,0,2370,2371,5,236,0,0,2371,2372,3,
        1270,635,0,2372,2376,3,118,59,0,2373,2375,3,1106,553,0,2374,2373,
        1,0,0,0,2375,2378,1,0,0,0,2376,2374,1,0,0,0,2376,2377,1,0,0,0,2377,
        2380,1,0,0,0,2378,2376,1,0,0,0,2379,2345,1,0,0,0,2379,2359,1,0,0,
        0,2379,2369,1,0,0,0,2380,2382,1,0,0,0,2381,2383,3,48,24,0,2382,2381,
        1,0,0,0,2382,2383,1,0,0,0,2383,115,1,0,0,0,2384,2395,3,1270,635,
        0,2385,2387,3,1270,635,0,2386,2385,1,0,0,0,2386,2387,1,0,0,0,2387,
        2388,1,0,0,0,2388,2389,5,621,0,0,2389,2395,3,1094,547,0,2390,2391,
        3,1270,635,0,2391,2392,5,599,0,0,2392,2393,3,1094,547,0,2393,2395,
        1,0,0,0,2394,2384,1,0,0,0,2394,2386,1,0,0,0,2394,2390,1,0,0,0,2395,
        117,1,0,0,0,2396,2397,5,383,0,0,2397,2398,3,1322,661,0,2398,2399,
        3,1090,545,0,2399,119,1,0,0,0,2400,2401,5,288,0,0,2401,2402,5,217,
        0,0,2402,2403,3,1300,650,0,2403,2404,5,4,0,0,2404,2405,5,603,0,0,
        2405,2407,3,1384,692,0,2406,2408,3,122,61,0,2407,2406,1,0,0,0,2407,
        2408,1,0,0,0,2408,121,1,0,0,0,2409,2416,3,124,62,0,2410,2412,5,773,
        0,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,2412,2413,1,0,0,0,2413,2415,
        3,124,62,0,2414,2411,1,0,0,0,2415,2418,1,0,0,0,2416,2414,1,0,0,0,
        2416,2417,1,0,0,0,2417,123,1,0,0,0,2418,2416,1,0,0,0,2419,2426,3,
        144,72,0,2420,2426,3,146,73,0,2421,2426,3,154,77,0,2422,2426,3,156,
        78,0,2423,2426,3,158,79,0,2424,2426,3,160,80,0,2425,2419,1,0,0,0,
        2425,2420,1,0,0,0,2425,2421,1,0,0,0,2425,2422,1,0,0,0,2425,2423,
        1,0,0,0,2425,2424,1,0,0,0,2426,125,1,0,0,0,2427,2428,5,503,0,0,2428,
        2429,3,1310,655,0,2429,2430,5,199,0,0,2430,2431,5,112,0,0,2431,2432,
        5,648,0,0,2432,2433,3,1406,703,0,2433,2434,3,128,64,0,2434,127,1,
        0,0,0,2435,2436,5,390,0,0,2436,2437,5,776,0,0,2437,2442,3,130,65,
        0,2438,2439,5,773,0,0,2439,2441,3,130,65,0,2440,2438,1,0,0,0,2441,
        2444,1,0,0,0,2442,2440,1,0,0,0,2442,2443,1,0,0,0,2443,2445,1,0,0,
        0,2444,2442,1,0,0,0,2445,2446,5,777,0,0,2446,129,1,0,0,0,2447,2448,
        5,224,0,0,2448,2462,3,1384,692,0,2449,2450,5,109,0,0,2450,2462,3,
        1384,692,0,2451,2452,5,618,0,0,2452,2462,3,1384,692,0,2453,2454,
        5,406,0,0,2454,2462,3,1384,692,0,2455,2456,5,519,0,0,2456,2462,3,
        1384,692,0,2457,2458,5,398,0,0,2458,2462,3,1384,692,0,2459,2460,
        5,413,0,0,2460,2462,3,1358,679,0,2461,2447,1,0,0,0,2461,2449,1,0,
        0,0,2461,2451,1,0,0,0,2461,2453,1,0,0,0,2461,2455,1,0,0,0,2461,2457,
        1,0,0,0,2461,2459,1,0,0,0,2462,131,1,0,0,0,2463,2464,5,572,0,0,2464,
        2465,3,1296,648,0,2465,2470,3,136,68,0,2466,2467,5,620,0,0,2467,
        2468,5,288,0,0,2468,2469,5,217,0,0,2469,2471,3,1302,651,0,2470,2466,
        1,0,0,0,2470,2471,1,0,0,0,2471,2473,1,0,0,0,2472,2474,3,140,70,0,
        2473,2472,1,0,0,0,2473,2474,1,0,0,0,2474,133,1,0,0,0,2475,2476,5,
        605,0,0,2476,2477,5,572,0,0,2477,2478,3,1296,648,0,2478,2479,5,4,
        0,0,2479,2481,3,138,69,0,2480,2482,3,60,30,0,2481,2480,1,0,0,0,2481,
        2482,1,0,0,0,2482,135,1,0,0,0,2483,2484,5,4,0,0,2484,2491,3,138,
        69,0,2485,2488,4,68,16,0,2486,2487,5,4,0,0,2487,2489,3,138,69,0,
        2488,2486,1,0,0,0,2488,2489,1,0,0,0,2489,2491,1,0,0,0,2490,2483,
        1,0,0,0,2490,2485,1,0,0,0,2491,137,1,0,0,0,2492,2493,5,111,0,0,2493,
        2494,3,1384,692,0,2494,139,1,0,0,0,2495,2502,3,142,71,0,2496,2498,
        5,773,0,0,2497,2496,1,0,0,0,2497,2498,1,0,0,0,2498,2499,1,0,0,0,
        2499,2501,3,142,71,0,2500,2497,1,0,0,0,2501,2504,1,0,0,0,2502,2500,
        1,0,0,0,2502,2503,1,0,0,0,2503,141,1,0,0,0,2504,2502,1,0,0,0,2505,
        2517,3,144,72,0,2506,2517,3,148,74,0,2507,2517,3,150,75,0,2508,2517,
        3,152,76,0,2509,2517,3,154,77,0,2510,2517,3,156,78,0,2511,2517,3,
        158,79,0,2512,2517,3,160,80,0,2513,2517,3,162,81,0,2514,2515,4,71,
        17,0,2515,2517,3,164,82,0,2516,2505,1,0,0,0,2516,2506,1,0,0,0,2516,
        2507,1,0,0,0,2516,2508,1,0,0,0,2516,2509,1,0,0,0,2516,2510,1,0,0,
        0,2516,2511,1,0,0,0,2516,2512,1,0,0,0,2516,2513,1,0,0,0,2516,2514,
        1,0,0,0,2517,143,1,0,0,0,2518,2520,5,238,0,0,2519,2521,5,750,0,0,
        2520,2519,1,0,0,0,2520,2521,1,0,0,0,2521,2522,1,0,0,0,2522,2523,
        3,1412,706,0,2523,145,1,0,0,0,2524,2526,7,11,0,0,2525,2527,5,750,
        0,0,2526,2525,1,0,0,0,2526,2527,1,0,0,0,2527,2528,1,0,0,0,2528,2529,
        3,1412,706,0,2529,147,1,0,0,0,2530,2532,5,23,0,0,2531,2533,5,750,
        0,0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,2533,2534,1,0,0,0,2534,2535,
        3,1412,706,0,2535,149,1,0,0,0,2536,2538,5,324,0,0,2537,2539,5,750,
        0,0,2538,2537,1,0,0,0,2538,2539,1,0,0,0,2539,2540,1,0,0,0,2540,2541,
        3,1412,706,0,2541,151,1,0,0,0,2542,2544,5,181,0,0,2543,2545,5,750,
        0,0,2544,2543,1,0,0,0,2544,2545,1,0,0,0,2545,2546,1,0,0,0,2546,2547,
        3,1412,706,0,2547,153,1,0,0,0,2548,2550,5,368,0,0,2549,2551,5,750,
        0,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,2552,1,0,0,0,2552,2553,
        3,1360,680,0,2553,155,1,0,0,0,2554,2556,5,553,0,0,2555,2554,1,0,
        0,0,2555,2556,1,0,0,0,2556,2557,1,0,0,0,2557,2559,5,163,0,0,2558,
        2560,5,750,0,0,2559,2558,1,0,0,0,2559,2560,1,0,0,0,2560,2561,1,0,
        0,0,2561,2562,3,1314,657,0,2562,157,1,0,0,0,2563,2564,7,12,0,0,2564,
        159,1,0,0,0,2565,2567,5,75,0,0,2566,2568,5,750,0,0,2567,2566,1,0,
        0,0,2567,2568,1,0,0,0,2568,2569,1,0,0,0,2569,2570,3,1384,692,0,2570,
        161,1,0,0,0,2571,2573,5,189,0,0,2572,2574,5,750,0,0,2573,2572,1,
        0,0,0,2573,2574,1,0,0,0,2574,2575,1,0,0,0,2575,2576,3,1412,706,0,
        2576,163,1,0,0,0,2577,2579,5,158,0,0,2578,2580,5,750,0,0,2579,2578,
        1,0,0,0,2579,2580,1,0,0,0,2580,2581,1,0,0,0,2581,2582,3,1378,689,
        0,2582,165,1,0,0,0,2583,2585,5,163,0,0,2584,2586,5,750,0,0,2585,
        2584,1,0,0,0,2585,2586,1,0,0,0,2586,2587,1,0,0,0,2587,2588,3,1424,
        712,0,2588,167,1,0,0,0,2589,2591,3,170,85,0,2590,2589,1,0,0,0,2590,
        2591,1,0,0,0,2591,2593,1,0,0,0,2592,2594,3,1176,588,0,2593,2592,
        1,0,0,0,2593,2594,1,0,0,0,2594,2596,1,0,0,0,2595,2597,3,174,87,0,
        2596,2595,1,0,0,0,2596,2597,1,0,0,0,2597,2598,1,0,0,0,2598,2599,
        5,636,0,0,2599,2600,3,1292,646,0,2600,2601,3,72,36,0,2601,169,1,
        0,0,0,2602,2603,5,394,0,0,2603,2605,5,458,0,0,2604,2606,3,172,86,
        0,2605,2604,1,0,0,0,2605,2606,1,0,0,0,2606,2609,1,0,0,0,2607,2609,
        3,172,86,0,2608,2602,1,0,0,0,2608,2607,1,0,0,0,2609,171,1,0,0,0,
        2610,2611,5,9,0,0,2611,2612,5,750,0,0,2612,2613,7,13,0,0,2613,173,
        1,0,0,0,2614,2615,5,537,0,0,2615,2616,5,496,0,0,2616,2617,7,10,0,
        0,2617,175,1,0,0,0,2618,2620,3,1176,588,0,2619,2618,1,0,0,0,2619,
        2620,1,0,0,0,2620,2621,1,0,0,0,2621,2623,5,594,0,0,2622,2624,3,1180,
        590,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,2625,1,0,0,0,2625,
        2626,3,1288,644,0,2626,2627,7,14,0,0,2627,2628,7,15,0,0,2628,2629,
        5,383,0,0,2629,2630,3,1322,661,0,2630,2631,5,200,0,0,2631,2632,5,
        153,0,0,2632,2634,5,487,0,0,2633,2635,3,178,89,0,2634,2633,1,0,0,
        0,2634,2635,1,0,0,0,2635,2636,1,0,0,0,2636,2637,3,976,488,0,2637,
        177,1,0,0,0,2638,2639,7,16,0,0,2639,2640,3,1406,703,0,2640,179,1,
        0,0,0,2641,2643,3,1176,588,0,2642,2641,1,0,0,0,2642,2643,1,0,0,0,
        2643,2644,1,0,0,0,2644,2646,5,170,0,0,2645,2647,3,1180,590,0,2646,
        2645,1,0,0,0,2646,2647,1,0,0,0,2647,2648,1,0,0,0,2648,2649,3,1304,
        652,0,2649,2650,5,383,0,0,2650,2651,5,490,0,0,2651,2658,3,1054,527,
        0,2652,2653,5,383,0,0,2653,2655,5,79,0,0,2654,2656,5,371,0,0,2655,
        2654,1,0,0,0,2655,2656,1,0,0,0,2656,2657,1,0,0,0,2657,2659,5,418,
        0,0,2658,2652,1,0,0,0,2658,2659,1,0,0,0,2659,2666,1,0,0,0,2660,2667,
        5,156,0,0,2661,2664,5,140,0,0,2662,2663,5,383,0,0,2663,2665,3,578,
        289,0,2664,2662,1,0,0,0,2664,2665,1,0,0,0,2665,2667,1,0,0,0,2666,
        2660,1,0,0,0,2666,2661,1,0,0,0,2666,2667,1,0,0,0,2667,2670,1,0,0,
        0,2668,2669,5,75,0,0,2669,2671,3,1384,692,0,2670,2668,1,0,0,0,2670,
        2671,1,0,0,0,2671,2672,1,0,0,0,2672,2673,5,147,0,0,2673,2674,3,976,
        488,0,2674,181,1,0,0,0,2675,2677,5,659,0,0,2676,2678,3,1180,590,
        0,2677,2676,1,0,0,0,2677,2678,1,0,0,0,2678,2679,1,0,0,0,2679,2680,
        3,656,328,0,2680,183,1,0,0,0,2681,2682,5,394,0,0,2682,2683,5,458,
        0,0,2683,2684,5,523,0,0,2684,2685,5,718,0,0,2685,2686,5,710,0,0,
        2686,2690,3,1364,682,0,2687,2689,3,186,93,0,2688,2687,1,0,0,0,2689,
        2692,1,0,0,0,2690,2688,1,0,0,0,2690,2691,1,0,0,0,2691,2707,1,0,0,
        0,2692,2690,1,0,0,0,2693,2694,5,523,0,0,2694,2695,5,718,0,0,2695,
        2697,5,710,0,0,2696,2698,3,1180,590,0,2697,2696,1,0,0,0,2697,2698,
        1,0,0,0,2698,2699,1,0,0,0,2699,2703,3,1364,682,0,2700,2702,3,186,
        93,0,2701,2700,1,0,0,0,2702,2705,1,0,0,0,2703,2701,1,0,0,0,2703,
        2704,1,0,0,0,2704,2707,1,0,0,0,2705,2703,1,0,0,0,2706,2681,1,0,0,
        0,2706,2693,1,0,0,0,2707,185,1,0,0,0,2708,2709,5,357,0,0,2709,2710,
        5,580,0,0,2710,2724,3,1386,693,0,2711,2712,5,715,0,0,2712,2713,5,
        580,0,0,2713,2724,3,1386,693,0,2714,2715,5,717,0,0,2715,2716,3,1386,
        693,0,2716,2717,5,230,0,0,2717,2718,5,45,0,0,2718,2719,3,1364,682,
        0,2719,2724,1,0,0,0,2720,2721,5,716,0,0,2721,2722,5,580,0,0,2722,
        2724,3,1386,693,0,2723,2708,1,0,0,0,2723,2711,1,0,0,0,2723,2714,
        1,0,0,0,2723,2720,1,0,0,0,2724,187,1,0,0,0,2725,2742,5,148,0,0,2726,
        2743,3,190,95,0,2727,2743,3,192,96,0,2728,2743,3,194,97,0,2729,2743,
        3,196,98,0,2730,2743,3,198,99,0,2731,2743,3,200,100,0,2732,2743,
        3,204,102,0,2733,2743,3,206,103,0,2734,2743,3,208,104,0,2735,2743,
        3,210,105,0,2736,2743,3,212,106,0,2737,2743,3,214,107,0,2738,2739,
        4,94,18,0,2739,2743,3,216,108,0,2740,2741,4,94,19,0,2741,2743,3,
        218,109,0,2742,2726,1,0,0,0,2742,2727,1,0,0,0,2742,2728,1,0,0,0,
        2742,2729,1,0,0,0,2742,2730,1,0,0,0,2742,2731,1,0,0,0,2742,2732,
        1,0,0,0,2742,2733,1,0,0,0,2742,2734,1,0,0,0,2742,2735,1,0,0,0,2742,
        2736,1,0,0,0,2742,2737,1,0,0,0,2742,2738,1,0,0,0,2742,2740,1,0,0,
        0,2743,189,1,0,0,0,2744,2746,5,109,0,0,2745,2747,3,1178,589,0,2746,
        2745,1,0,0,0,2746,2747,1,0,0,0,2747,2748,1,0,0,0,2748,2749,3,1278,
        639,0,2749,191,1,0,0,0,2750,2752,5,170,0,0,2751,2753,3,1178,589,
        0,2752,2751,1,0,0,0,2752,2753,1,0,0,0,2753,2754,1,0,0,0,2754,2755,
        3,1306,653,0,2755,193,1,0,0,0,2756,2758,5,206,0,0,2757,2759,3,1178,
        589,0,2758,2757,1,0,0,0,2758,2759,1,0,0,0,2759,2760,1,0,0,0,2760,
        2761,3,1286,643,0,2761,195,1,0,0,0,2762,2764,5,422,0,0,2763,2765,
        3,1178,589,0,2764,2763,1,0,0,0,2764,2765,1,0,0,0,2765,2766,1,0,0,
        0,2766,2767,3,1282,641,0,2767,197,1,0,0,0,2768,2770,3,1252,626,0,
        2769,2768,1,0,0,0,2769,2770,1,0,0,0,2770,2771,1,0,0,0,2771,2772,
        5,236,0,0,2772,2773,3,1272,636,0,2773,2774,5,383,0,0,2774,2776,3,
        1322,661,0,2775,2777,3,48,24,0,2776,2775,1,0,0,0,2776,2777,1,0,0,
        0,2777,199,1,0,0,0,2778,2779,5,288,0,0,2779,2780,5,217,0,0,2780,
        2791,3,1302,651,0,2781,2788,3,202,101,0,2782,2784,5,773,0,0,2783,
        2782,1,0,0,0,2783,2784,1,0,0,0,2784,2785,1,0,0,0,2785,2787,3,202,
        101,0,2786,2783,1,0,0,0,2787,2790,1,0,0,0,2788,2786,1,0,0,0,2788,
        2789,1,0,0,0,2789,2792,1,0,0,0,2790,2788,1,0,0,0,2791,2781,1,0,0,
        0,2791,2792,1,0,0,0,2792,201,1,0,0,0,2793,2796,3,158,79,0,2794,2796,
        3,156,78,0,2795,2793,1,0,0,0,2795,2794,1,0,0,0,2796,203,1,0,0,0,
        2797,2799,5,503,0,0,2798,2800,3,1178,589,0,2799,2798,1,0,0,0,2799,
        2800,1,0,0,0,2800,2801,1,0,0,0,2801,2802,3,1312,656,0,2802,205,1,
        0,0,0,2803,2805,5,577,0,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,
        2806,1,0,0,0,2806,2808,7,17,0,0,2807,2809,3,1178,589,0,2808,2807,
        1,0,0,0,2808,2809,1,0,0,0,2809,2810,1,0,0,0,2810,2812,3,1324,662,
        0,2811,2813,7,2,0,0,2812,2811,1,0,0,0,2812,2813,1,0,0,0,2813,207,
        1,0,0,0,2814,2815,5,572,0,0,2815,2826,3,1298,649,0,2816,2823,3,202,
        101,0,2817,2819,5,773,0,0,2818,2817,1,0,0,0,2818,2819,1,0,0,0,2819,
        2820,1,0,0,0,2820,2822,3,202,101,0,2821,2818,1,0,0,0,2822,2825,1,
        0,0,0,2823,2821,1,0,0,0,2823,2824,1,0,0,0,2824,2827,1,0,0,0,2825,
        2823,1,0,0,0,2826,2816,1,0,0,0,2826,2827,1,0,0,0,2827,209,1,0,0,
        0,2828,2830,5,594,0,0,2829,2831,3,1178,589,0,2830,2829,1,0,0,0,2830,
        2831,1,0,0,0,2831,2832,1,0,0,0,2832,2833,3,1290,645,0,2833,211,1,
        0,0,0,2834,2836,5,636,0,0,2835,2837,3,1178,589,0,2836,2835,1,0,0,
        0,2836,2837,1,0,0,0,2837,2838,1,0,0,0,2838,2840,3,1194,597,0,2839,
        2841,7,2,0,0,2840,2839,1,0,0,0,2840,2841,1,0,0,0,2841,213,1,0,0,
        0,2842,2844,5,659,0,0,2843,2845,3,1178,589,0,2844,2843,1,0,0,0,2844,
        2845,1,0,0,0,2845,2846,1,0,0,0,2846,2847,3,656,328,0,2847,215,1,
        0,0,0,2848,2849,5,523,0,0,2849,2850,5,718,0,0,2850,2852,5,710,0,
        0,2851,2853,3,1178,589,0,2852,2851,1,0,0,0,2852,2853,1,0,0,0,2853,
        2854,1,0,0,0,2854,2855,3,1364,682,0,2855,217,1,0,0,0,2856,2857,5,
        605,0,0,2857,2858,5,572,0,0,2858,2860,3,1298,649,0,2859,2861,3,60,
        30,0,2860,2859,1,0,0,0,2860,2861,1,0,0,0,2861,219,1,0,0,0,2862,2863,
        5,453,0,0,2863,2864,7,17,0,0,2864,2869,3,222,111,0,2865,2866,5,773,
        0,0,2866,2868,3,222,111,0,2867,2865,1,0,0,0,2868,2871,1,0,0,0,2869,
        2867,1,0,0,0,2869,2870,1,0,0,0,2870,221,1,0,0,0,2871,2869,1,0,0,
        0,2872,2873,3,1322,661,0,2873,2874,5,590,0,0,2874,2875,3,1316,658,
        0,2875,223,1,0,0,0,2876,2878,5,597,0,0,2877,2879,5,574,0,0,2878,
        2877,1,0,0,0,2878,2879,1,0,0,0,2879,2880,1,0,0,0,2880,2881,3,1322,
        661,0,2881,225,1,0,0,0,2882,2883,5,234,0,0,2883,2884,5,574,0,0,2884,
        2885,5,203,0,0,2885,2886,3,1388,694,0,2886,227,1,0,0,0,2887,2888,
        5,48,0,0,2888,2894,3,1282,641,0,2889,2891,5,776,0,0,2890,2892,3,
        948,474,0,2891,2890,1,0,0,0,2891,2892,1,0,0,0,2892,2893,1,0,0,0,
        2893,2895,5,777,0,0,2894,2889,1,0,0,0,2894,2895,1,0,0,0,2895,229,
        1,0,0,0,2896,2898,3,330,165,0,2897,2896,1,0,0,0,2897,2898,1,0,0,
        0,2898,2899,1,0,0,0,2899,2903,5,133,0,0,2900,2902,3,234,117,0,2901,
        2900,1,0,0,0,2902,2905,1,0,0,0,2903,2901,1,0,0,0,2903,2904,1,0,0,
        0,2904,2938,1,0,0,0,2905,2903,1,0,0,0,2906,2930,5,203,0,0,2907,2908,
        3,1326,663,0,2908,2909,5,621,0,0,2909,2911,3,344,172,0,2910,2912,
        3,368,184,0,2911,2910,1,0,0,0,2911,2912,1,0,0,0,2912,2931,1,0,0,
        0,2913,2916,3,1322,661,0,2914,2915,4,115,20,0,2915,2917,3,410,205,
        0,2916,2914,1,0,0,0,2916,2917,1,0,0,0,2917,2919,1,0,0,0,2918,2920,
        3,232,116,0,2919,2918,1,0,0,0,2919,2920,1,0,0,0,2920,2922,1,0,0,
        0,2921,2923,3,368,184,0,2922,2921,1,0,0,0,2922,2923,1,0,0,0,2923,
        2925,1,0,0,0,2924,2926,3,338,169,0,2925,2924,1,0,0,0,2925,2926,1,
        0,0,0,2926,2928,1,0,0,0,2927,2929,3,296,148,0,2928,2927,1,0,0,0,
        2928,2929,1,0,0,0,2929,2931,1,0,0,0,2930,2907,1,0,0,0,2930,2913,
        1,0,0,0,2931,2939,1,0,0,0,2932,2933,3,1326,663,0,2933,2934,5,203,
        0,0,2934,2936,3,344,172,0,2935,2937,3,368,184,0,2936,2935,1,0,0,
        0,2936,2937,1,0,0,0,2937,2939,1,0,0,0,2938,2906,1,0,0,0,2938,2932,
        1,0,0,0,2939,231,1,0,0,0,2940,2941,5,405,0,0,2941,2942,5,776,0,0,
        2942,2943,3,1348,674,0,2943,2944,5,777,0,0,2944,233,1,0,0,0,2945,
        2946,7,18,0,0,2946,235,1,0,0,0,2947,2948,5,147,0,0,2948,2949,3,362,
        181,0,2949,237,1,0,0,0,2950,2968,5,219,0,0,2951,2952,3,1322,661,
        0,2952,2954,5,387,0,0,2953,2955,3,410,205,0,2954,2953,1,0,0,0,2954,
        2955,1,0,0,0,2955,2969,1,0,0,0,2956,2966,3,1346,673,0,2957,2967,
        5,66,0,0,2958,2959,5,435,0,0,2959,2961,3,240,120,0,2960,2962,3,368,
        184,0,2961,2960,1,0,0,0,2961,2962,1,0,0,0,2962,2964,1,0,0,0,2963,
        2965,3,294,147,0,2964,2963,1,0,0,0,2964,2965,1,0,0,0,2965,2967,1,
        0,0,0,2966,2957,1,0,0,0,2966,2958,1,0,0,0,2967,2969,1,0,0,0,2968,
        2951,1,0,0,0,2968,2956,1,0,0,0,2969,239,1,0,0,0,2970,2981,7,19,0,
        0,2971,2978,3,1346,673,0,2972,2979,7,20,0,0,2973,2974,7,21,0,0,2974,
        2975,5,776,0,0,2975,2976,3,256,128,0,2976,2977,5,777,0,0,2977,2979,
        1,0,0,0,2978,2972,1,0,0,0,2978,2973,1,0,0,0,2979,2981,1,0,0,0,2980,
        2970,1,0,0,0,2980,2971,1,0,0,0,2981,241,1,0,0,0,2982,2984,5,242,
        0,0,2983,2985,3,244,122,0,2984,2983,1,0,0,0,2984,2985,1,0,0,0,2985,
        2987,1,0,0,0,2986,2988,5,232,0,0,2987,2986,1,0,0,0,2987,2988,1,0,
        0,0,2988,2990,1,0,0,0,2989,2991,5,248,0,0,2990,2989,1,0,0,0,2990,
        2991,1,0,0,0,2991,2992,1,0,0,0,2992,2994,3,1322,661,0,2993,2995,
        3,1256,628,0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,3008,1,0,0,
        0,2996,2999,3,246,123,0,2997,2998,4,121,21,0,2998,3000,3,258,129,
        0,2999,2997,1,0,0,0,2999,3000,1,0,0,0,3000,3009,1,0,0,0,3001,3002,
        5,506,0,0,3002,3005,3,1196,598,0,3003,3004,4,121,22,0,3004,3006,
        3,258,129,0,3005,3003,1,0,0,0,3005,3006,1,0,0,0,3006,3009,1,0,0,
        0,3007,3009,3,252,126,0,3008,2996,1,0,0,0,3008,3001,1,0,0,0,3008,
        3007,1,0,0,0,3009,3011,1,0,0,0,3010,3012,3,260,130,0,3011,3010,1,
        0,0,0,3011,3012,1,0,0,0,3012,243,1,0,0,0,3013,3014,7,22,0,0,3014,
        245,1,0,0,0,3015,3017,5,776,0,0,3016,3018,3,248,124,0,3017,3016,
        1,0,0,0,3017,3018,1,0,0,0,3018,3019,1,0,0,0,3019,3021,5,777,0,0,
        3020,3015,1,0,0,0,3020,3021,1,0,0,0,3021,3022,1,0,0,0,3022,3023,
        3,250,125,0,3023,247,1,0,0,0,3024,3029,3,1268,634,0,3025,3026,5,
        773,0,0,3026,3028,3,1268,634,0,3027,3025,1,0,0,0,3028,3031,1,0,0,
        0,3029,3027,1,0,0,0,3029,3030,1,0,0,0,3030,249,1,0,0,0,3031,3029,
        1,0,0,0,3032,3033,7,23,0,0,3033,3034,3,254,127,0,3034,251,1,0,0,
        0,3035,3046,3,280,140,0,3036,3046,3,284,142,0,3037,3039,5,776,0,
        0,3038,3040,3,248,124,0,3039,3038,1,0,0,0,3039,3040,1,0,0,0,3040,
        3041,1,0,0,0,3041,3043,5,777,0,0,3042,3037,1,0,0,0,3042,3043,1,0,
        0,0,3043,3044,1,0,0,0,3044,3046,3,98,49,0,3045,3035,1,0,0,0,3045,
        3036,1,0,0,0,3045,3042,1,0,0,0,3046,253,1,0,0,0,3047,3049,5,776,
        0,0,3048,3050,3,256,128,0,3049,3048,1,0,0,0,3049,3050,1,0,0,0,3050,
        3051,1,0,0,0,3051,3060,5,777,0,0,3052,3053,5,773,0,0,3053,3055,5,
        776,0,0,3054,3056,3,256,128,0,3055,3054,1,0,0,0,3055,3056,1,0,0,
        0,3056,3057,1,0,0,0,3057,3059,5,777,0,0,3058,3052,1,0,0,0,3059,3062,
        1,0,0,0,3060,3058,1,0,0,0,3060,3061,1,0,0,0,3061,255,1,0,0,0,3062,
        3060,1,0,0,0,3063,3066,3,860,430,0,3064,3066,5,128,0,0,3065,3063,
        1,0,0,0,3065,3064,1,0,0,0,3066,3074,1,0,0,0,3067,3070,5,773,0,0,
        3068,3071,3,860,430,0,3069,3071,5,128,0,0,3070,3068,1,0,0,0,3070,
        3069,1,0,0,0,3071,3073,1,0,0,0,3072,3067,1,0,0,0,3073,3076,1,0,0,
        0,3074,3072,1,0,0,0,3074,3075,1,0,0,0,3075,257,1,0,0,0,3076,3074,
        1,0,0,0,3077,3078,5,17,0,0,3078,3080,3,1346,673,0,3079,3081,3,1264,
        632,0,3080,3079,1,0,0,0,3080,3081,1,0,0,0,3081,259,1,0,0,0,3082,
        3083,5,383,0,0,3083,3084,5,151,0,0,3084,3085,5,265,0,0,3085,3086,
        5,614,0,0,3086,3087,3,1196,598,0,3087,261,1,0,0,0,3088,3089,5,281,
        0,0,3089,3091,3,264,132,0,3090,3092,7,24,0,0,3091,3090,1,0,0,0,3091,
        3092,1,0,0,0,3092,3094,1,0,0,0,3093,3095,5,284,0,0,3094,3093,1,0,
        0,0,3094,3095,1,0,0,0,3095,3096,1,0,0,0,3096,3097,5,237,0,0,3097,
        3099,3,1384,692,0,3098,3100,7,8,0,0,3099,3098,1,0,0,0,3099,3100,
        1,0,0,0,3100,3101,1,0,0,0,3101,3102,5,248,0,0,3102,3103,5,574,0,
        0,3103,3105,3,1322,661,0,3104,3106,3,1256,628,0,3105,3104,1,0,0,
        0,3105,3106,1,0,0,0,3106,3108,1,0,0,0,3107,3109,3,1200,600,0,3108,
        3107,1,0,0,0,3108,3109,1,0,0,0,3109,3111,1,0,0,0,3110,3112,3,266,
        133,0,3111,3110,1,0,0,0,3111,3112,1,0,0,0,3112,3114,1,0,0,0,3113,
        3115,3,1202,601,0,3114,3113,1,0,0,0,3114,3115,1,0,0,0,3115,3117,
        1,0,0,0,3116,3118,3,1206,603,0,3117,3116,1,0,0,0,3117,3118,1,0,0,
        0,3118,3119,1,0,0,0,3119,3120,3,268,134,0,3120,263,1,0,0,0,3121,
        3122,7,25,0,0,3122,265,1,0,0,0,3123,3124,5,484,0,0,3124,3125,5,230,
        0,0,3125,3126,5,45,0,0,3126,3127,3,1380,690,0,3127,267,1,0,0,0,3128,
        3129,5,232,0,0,3129,3130,5,747,0,0,3130,3132,7,26,0,0,3131,3128,
        1,0,0,0,3131,3132,1,0,0,0,3132,3134,1,0,0,0,3133,3135,3,270,135,
        0,3134,3133,1,0,0,0,3134,3135,1,0,0,0,3135,3138,1,0,0,0,3136,3137,
        5,506,0,0,3137,3139,3,1196,598,0,3138,3136,1,0,0,0,3138,3139,1,0,
        0,0,3139,269,1,0,0,0,3140,3142,5,776,0,0,3141,3143,3,272,136,0,3142,
        3141,1,0,0,0,3142,3143,1,0,0,0,3143,3144,1,0,0,0,3144,3145,5,777,
        0,0,3145,271,1,0,0,0,3146,3151,3,1266,633,0,3147,3148,5,783,0,0,
        3148,3151,3,1406,703,0,3149,3151,5,785,0,0,3150,3146,1,0,0,0,3150,
        3147,1,0,0,0,3150,3149,1,0,0,0,3151,3162,1,0,0,0,3152,3158,5,773,
        0,0,3153,3159,3,1266,633,0,3154,3155,5,783,0,0,3155,3159,3,1406,
        703,0,3156,3159,5,784,0,0,3157,3159,5,785,0,0,3158,3153,1,0,0,0,
        3158,3154,1,0,0,0,3158,3156,1,0,0,0,3158,3157,1,0,0,0,3159,3161,
        1,0,0,0,3160,3152,1,0,0,0,3161,3164,1,0,0,0,3162,3160,1,0,0,0,3162,
        3163,1,0,0,0,3163,273,1,0,0,0,3164,3162,1,0,0,0,3165,3167,5,458,
        0,0,3166,3168,7,27,0,0,3167,3166,1,0,0,0,3167,3168,1,0,0,0,3168,
        3170,1,0,0,0,3169,3171,5,248,0,0,3170,3169,1,0,0,0,3170,3171,1,0,
        0,0,3171,3172,1,0,0,0,3172,3174,3,1322,661,0,3173,3175,3,1256,628,
        0,3174,3173,1,0,0,0,3174,3175,1,0,0,0,3175,3180,1,0,0,0,3176,3181,
        3,246,123,0,3177,3178,5,506,0,0,3178,3181,3,1196,598,0,3179,3181,
        3,252,126,0,3180,3176,1,0,0,0,3180,3177,1,0,0,0,3180,3179,1,0,0,
        0,3181,275,1,0,0,0,3182,3184,3,280,140,0,3183,3185,3,354,177,0,3184,
        3183,1,0,0,0,3184,3185,1,0,0,0,3185,3188,1,0,0,0,3186,3188,3,278,
        139,0,3187,3182,1,0,0,0,3187,3186,1,0,0,0,3188,277,1,0,0,0,3189,
        3190,5,776,0,0,3190,3191,3,278,139,0,3191,3192,5,777,0,0,3192,3207,
        1,0,0,0,3193,3194,3,280,140,0,3194,3196,3,302,151,0,3195,3197,3,
        354,177,0,3196,3195,1,0,0,0,3196,3197,1,0,0,0,3197,3207,1,0,0,0,
        3198,3199,3,280,140,0,3199,3200,3,354,177,0,3200,3201,3,302,151,
        0,3201,3207,1,0,0,0,3202,3203,4,139,23,0,3203,3204,3,284,142,0,3204,
        3205,3,302,151,0,3205,3207,1,0,0,0,3206,3189,1,0,0,0,3206,3193,1,
        0,0,0,3206,3198,1,0,0,0,3206,3202,1,0,0,0,3207,279,1,0,0,0,3208,
        3210,3,330,165,0,3209,3208,1,0,0,0,3209,3210,1,0,0,0,3210,3211,1,
        0,0,0,3211,3213,3,282,141,0,3212,3214,3,338,169,0,3213,3212,1,0,
        0,0,3213,3214,1,0,0,0,3214,3216,1,0,0,0,3215,3217,3,294,147,0,3216,
        3215,1,0,0,0,3216,3217,1,0,0,0,3217,281,1,0,0,0,3218,3221,3,286,
        143,0,3219,3221,3,284,142,0,3220,3218,1,0,0,0,3220,3219,1,0,0,0,
        3221,3233,1,0,0,0,3222,3226,5,608,0,0,3223,3224,4,141,24,0,3224,
        3226,7,28,0,0,3225,3222,1,0,0,0,3225,3223,1,0,0,0,3226,3228,1,0,
        0,0,3227,3229,3,408,204,0,3228,3227,1,0,0,0,3228,3229,1,0,0,0,3229,
        3230,1,0,0,0,3230,3232,3,282,141,0,3231,3225,1,0,0,0,3232,3235,1,
        0,0,0,3233,3231,1,0,0,0,3233,3234,1,0,0,0,3234,283,1,0,0,0,3235,
        3233,1,0,0,0,3236,3239,5,776,0,0,3237,3240,3,284,142,0,3238,3240,
        3,98,49,0,3239,3237,1,0,0,0,3239,3238,1,0,0,0,3240,3241,1,0,0,0,
        3241,3242,5,777,0,0,3242,285,1,0,0,0,3243,3249,3,288,144,0,3244,
        3245,4,143,25,0,3245,3249,3,346,173,0,3246,3247,4,143,26,0,3247,
        3249,3,348,174,0,3248,3243,1,0,0,0,3248,3244,1,0,0,0,3248,3246,1,
        0,0,0,3249,287,1,0,0,0,3250,3254,5,497,0,0,3251,3253,3,352,176,0,
        3252,3251,1,0,0,0,3253,3256,1,0,0,0,3254,3252,1,0,0,0,3254,3255,
        1,0,0,0,3255,3257,1,0,0,0,3256,3254,1,0,0,0,3257,3259,3,362,181,
        0,3258,3260,3,302,151,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,
        3262,1,0,0,0,3261,3263,3,342,171,0,3262,3261,1,0,0,0,3262,3263,1,
        0,0,0,3263,3265,1,0,0,0,3264,3266,3,368,184,0,3265,3264,1,0,0,0,
        3265,3266,1,0,0,0,3266,3268,1,0,0,0,3267,3269,3,334,167,0,3268,3267,
        1,0,0,0,3268,3269,1,0,0,0,3269,3271,1,0,0,0,3270,3272,3,306,153,
        0,3271,3270,1,0,0,0,3271,3272,1,0,0,0,3272,3274,1,0,0,0,3273,3275,
        3,308,154,0,3274,3273,1,0,0,0,3274,3275,1,0,0,0,3275,289,1,0,0,0,
        3276,3277,3,284,142,0,3277,291,1,0,0,0,3278,3279,7,29,0,0,3279,293,
        1,0,0,0,3280,3281,5,276,0,0,3281,3282,3,298,149,0,3282,295,1,0,0,
        0,3283,3284,5,276,0,0,3284,3285,3,300,150,0,3285,297,1,0,0,0,3286,
        3289,3,300,150,0,3287,3288,7,30,0,0,3288,3290,3,300,150,0,3289,3287,
        1,0,0,0,3289,3290,1,0,0,0,3290,299,1,0,0,0,3291,3294,3,1346,673,
        0,3292,3294,7,31,0,0,3293,3291,1,0,0,0,3293,3292,1,0,0,0,3294,301,
        1,0,0,0,3295,3323,5,248,0,0,3296,3297,5,396,0,0,3297,3299,3,1378,
        689,0,3298,3300,3,1200,600,0,3299,3298,1,0,0,0,3299,3300,1,0,0,0,
        3300,3302,1,0,0,0,3301,3303,3,1202,601,0,3302,3301,1,0,0,0,3302,
        3303,1,0,0,0,3303,3305,1,0,0,0,3304,3306,3,1206,603,0,3305,3304,
        1,0,0,0,3305,3306,1,0,0,0,3306,3324,1,0,0,0,3307,3308,5,150,0,0,
        3308,3324,3,1378,689,0,3309,3312,3,1406,703,0,3310,3312,3,930,465,
        0,3311,3309,1,0,0,0,3311,3310,1,0,0,0,3312,3320,1,0,0,0,3313,3316,
        5,773,0,0,3314,3317,3,1406,703,0,3315,3317,3,930,465,0,3316,3314,
        1,0,0,0,3316,3315,1,0,0,0,3317,3319,1,0,0,0,3318,3313,1,0,0,0,3319,
        3322,1,0,0,0,3320,3318,1,0,0,0,3320,3321,1,0,0,0,3321,3324,1,0,0,
        0,3322,3320,1,0,0,0,3323,3296,1,0,0,0,3323,3307,1,0,0,0,3323,3311,
        1,0,0,0,3324,303,1,0,0,0,3325,3326,5,422,0,0,3326,3332,5,776,0,0,
        3327,3330,5,747,0,0,3328,3329,5,773,0,0,3329,3331,5,747,0,0,3330,
        3328,1,0,0,0,3330,3331,1,0,0,0,3331,3333,1,0,0,0,3332,3327,1,0,0,
        0,3332,3333,1,0,0,0,3333,3334,1,0,0,0,3334,3335,5,777,0,0,3335,305,
        1,0,0,0,3336,3337,5,221,0,0,3337,3338,3,860,430,0,3338,307,1,0,0,
        0,3339,3340,5,699,0,0,3340,3345,3,310,155,0,3341,3342,5,773,0,0,
        3342,3344,3,310,155,0,3343,3341,1,0,0,0,3344,3347,1,0,0,0,3345,3343,
        1,0,0,0,3345,3346,1,0,0,0,3346,309,1,0,0,0,3347,3345,1,0,0,0,3348,
        3349,3,1342,671,0,3349,3350,5,17,0,0,3350,3351,3,312,156,0,3351,
        311,1,0,0,0,3352,3353,5,776,0,0,3353,3354,3,314,157,0,3354,3355,
        5,777,0,0,3355,313,1,0,0,0,3356,3358,3,1342,671,0,3357,3356,1,0,
        0,0,3357,3358,1,0,0,0,3358,3362,1,0,0,0,3359,3360,5,405,0,0,3360,
        3361,5,45,0,0,3361,3363,3,966,483,0,3362,3359,1,0,0,0,3362,3363,
        1,0,0,0,3363,3365,1,0,0,0,3364,3366,3,338,169,0,3365,3364,1,0,0,
        0,3365,3366,1,0,0,0,3366,3368,1,0,0,0,3367,3369,3,316,158,0,3368,
        3367,1,0,0,0,3368,3369,1,0,0,0,3369,315,1,0,0,0,3370,3371,3,318,
        159,0,3371,3373,3,320,160,0,3372,3374,3,328,164,0,3373,3372,1,0,
        0,0,3373,3374,1,0,0,0,3374,317,1,0,0,0,3375,3376,7,32,0,0,3376,319,
        1,0,0,0,3377,3380,3,322,161,0,3378,3380,3,324,162,0,3379,3377,1,
        0,0,0,3379,3378,1,0,0,0,3380,321,1,0,0,0,3381,3382,5,698,0,0,3382,
        3396,5,693,0,0,3383,3384,3,1362,681,0,3384,3385,5,693,0,0,3385,3396,
        1,0,0,0,3386,3387,5,787,0,0,3387,3396,5,693,0,0,3388,3389,5,247,
        0,0,3389,3390,3,860,430,0,3390,3391,3,956,478,0,3391,3392,5,693,
        0,0,3392,3396,1,0,0,0,3393,3394,5,101,0,0,3394,3396,5,487,0,0,3395,
        3381,1,0,0,0,3395,3383,1,0,0,0,3395,3386,1,0,0,0,3395,3388,1,0,0,
        0,3395,3393,1,0,0,0,3396,323,1,0,0,0,3397,3398,5,30,0,0,3398,3399,
        3,326,163,0,3399,3400,5,15,0,0,3400,3401,3,326,163,0,3401,325,1,
        0,0,0,3402,3416,3,322,161,0,3403,3404,5,698,0,0,3404,3416,5,682,
        0,0,3405,3406,3,1362,681,0,3406,3407,5,682,0,0,3407,3416,1,0,0,0,
        3408,3409,5,787,0,0,3409,3416,5,682,0,0,3410,3411,5,247,0,0,3411,
        3412,3,860,430,0,3412,3413,3,956,478,0,3413,3414,5,682,0,0,3414,
        3416,1,0,0,0,3415,3402,1,0,0,0,3415,3403,1,0,0,0,3415,3405,1,0,0,
        0,3415,3408,1,0,0,0,3415,3410,1,0,0,0,3416,327,1,0,0,0,3417,3424,
        5,680,0,0,3418,3419,5,101,0,0,3419,3425,5,487,0,0,3420,3425,5,217,
        0,0,3421,3425,5,697,0,0,3422,3423,5,373,0,0,3423,3425,5,690,0,0,
        3424,3418,1,0,0,0,3424,3420,1,0,0,0,3424,3421,1,0,0,0,3424,3422,
        1,0,0,0,3425,329,1,0,0,0,3426,3428,5,645,0,0,3427,3429,5,665,0,0,
        3428,3427,1,0,0,0,3428,3429,1,0,0,0,3429,3430,1,0,0,0,3430,3435,
        3,332,166,0,3431,3432,5,773,0,0,3432,3434,3,332,166,0,3433,3431,
        1,0,0,0,3434,3437,1,0,0,0,3435,3433,1,0,0,0,3435,3436,1,0,0,0,3436,
        331,1,0,0,0,3437,3435,1,0,0,0,3438,3440,3,1346,673,0,3439,3441,3,
        1264,632,0,3440,3439,1,0,0,0,3440,3441,1,0,0,0,3441,3442,1,0,0,0,
        3442,3443,5,17,0,0,3443,3444,3,290,145,0,3444,333,1,0,0,0,3445,3446,
        5,217,0,0,3446,3447,5,45,0,0,3447,3449,3,966,483,0,3448,3450,3,336,
        168,0,3449,3448,1,0,0,0,3449,3450,1,0,0,0,3450,335,1,0,0,0,3451,
        3452,5,645,0,0,3452,3453,5,481,0,0,3453,337,1,0,0,0,3454,3455,5,
        393,0,0,3455,3456,5,45,0,0,3456,3457,3,966,483,0,3457,339,1,0,0,
        0,3458,3459,7,33,0,0,3459,341,1,0,0,0,3460,3463,5,203,0,0,3461,3464,
        5,149,0,0,3462,3464,3,344,172,0,3463,3461,1,0,0,0,3463,3462,1,0,
        0,0,3464,343,1,0,0,0,3465,3470,3,370,185,0,3466,3467,5,773,0,0,3467,
        3469,3,370,185,0,3468,3466,1,0,0,0,3469,3472,1,0,0,0,3470,3468,1,
        0,0,0,3470,3471,1,0,0,0,3471,345,1,0,0,0,3472,3470,1,0,0,0,3473,
        3474,5,626,0,0,3474,3479,3,350,175,0,3475,3476,5,773,0,0,3476,3478,
        3,350,175,0,3477,3475,1,0,0,0,3478,3481,1,0,0,0,3479,3477,1,0,0,
        0,3479,3480,1,0,0,0,3480,347,1,0,0,0,3481,3479,1,0,0,0,3482,3483,
        5,574,0,0,3483,3484,3,1322,661,0,3484,349,1,0,0,0,3485,3486,5,487,
        0,0,3486,3488,5,776,0,0,3487,3489,3,256,128,0,3488,3487,1,0,0,0,
        3488,3489,1,0,0,0,3489,3490,1,0,0,0,3490,3491,5,777,0,0,3491,351,
        1,0,0,0,3492,3495,3,292,146,0,3493,3495,5,535,0,0,3494,3492,1,0,
        0,0,3494,3493,1,0,0,0,3495,353,1,0,0,0,3496,3498,3,356,178,0,3497,
        3496,1,0,0,0,3498,3499,1,0,0,0,3499,3497,1,0,0,0,3499,3500,1,0,0,
        0,3500,355,1,0,0,0,3501,3502,5,200,0,0,3502,3505,3,358,179,0,3503,
        3504,5,668,0,0,3504,3506,3,1326,663,0,3505,3503,1,0,0,0,3505,3506,
        1,0,0,0,3506,3508,1,0,0,0,3507,3509,3,360,180,0,3508,3507,1,0,0,
        0,3508,3509,1,0,0,0,3509,3515,1,0,0,0,3510,3511,5,287,0,0,3511,3512,
        5,251,0,0,3512,3513,5,508,0,0,3513,3515,5,346,0,0,3514,3501,1,0,
        0,0,3514,3510,1,0,0,0,3515,357,1,0,0,0,3516,3517,7,34,0,0,3517,359,
        1,0,0,0,3518,3519,5,669,0,0,3519,3522,5,670,0,0,3520,3522,5,671,
        0,0,3521,3518,1,0,0,0,3521,3520,1,0,0,0,3522,361,1,0,0,0,3523,3526,
        3,364,182,0,3524,3526,5,760,0,0,3525,3523,1,0,0,0,3525,3524,1,0,
        0,0,3526,3531,1,0,0,0,3527,3528,5,773,0,0,3528,3530,3,364,182,0,
        3529,3527,1,0,0,0,3530,3533,1,0,0,0,3531,3529,1,0,0,0,3531,3532,
        1,0,0,0,3532,363,1,0,0,0,3533,3531,1,0,0,0,3534,3540,3,1274,637,
        0,3535,3537,3,860,430,0,3536,3538,3,366,183,0,3537,3536,1,0,0,0,
        3537,3538,1,0,0,0,3538,3540,1,0,0,0,3539,3534,1,0,0,0,3539,3535,
        1,0,0,0,3540,365,1,0,0,0,3541,3543,5,17,0,0,3542,3541,1,0,0,0,3542,
        3543,1,0,0,0,3543,3546,1,0,0,0,3544,3547,3,1346,673,0,3545,3547,
        3,1378,689,0,3546,3544,1,0,0,0,3546,3545,1,0,0,0,3547,367,1,0,0,
        0,3548,3549,5,643,0,0,3549,3550,3,860,430,0,3550,369,1,0,0,0,3551,
        3562,3,382,191,0,3552,3556,5,778,0,0,3553,3554,4,185,27,0,3554,3557,
        3,1346,673,0,3555,3557,5,732,0,0,3556,3553,1,0,0,0,3556,3555,1,0,
        0,0,3557,3558,1,0,0,0,3558,3559,3,372,186,0,3559,3560,5,779,0,0,
        3560,3562,1,0,0,0,3561,3551,1,0,0,0,3561,3552,1,0,0,0,3562,3566,
        1,0,0,0,3563,3565,3,374,187,0,3564,3563,1,0,0,0,3565,3568,1,0,0,
        0,3566,3564,1,0,0,0,3566,3567,1,0,0,0,3567,371,1,0,0,0,3568,3566,
        1,0,0,0,3569,3573,3,382,191,0,3570,3572,3,374,187,0,3571,3570,1,
        0,0,0,3572,3575,1,0,0,0,3573,3571,1,0,0,0,3573,3574,1,0,0,0,3574,
        373,1,0,0,0,3575,3573,1,0,0,0,3576,3577,3,378,189,0,3577,3582,3,
        370,185,0,3578,3579,5,383,0,0,3579,3583,3,860,430,0,3580,3581,5,
        621,0,0,3581,3583,3,1350,675,0,3582,3578,1,0,0,0,3582,3580,1,0,0,
        0,3582,3583,1,0,0,0,3583,3596,1,0,0,0,3584,3585,3,380,190,0,3585,
        3590,3,370,185,0,3586,3587,5,383,0,0,3587,3591,3,860,430,0,3588,
        3589,5,621,0,0,3589,3591,3,1350,675,0,3590,3586,1,0,0,0,3590,3588,
        1,0,0,0,3591,3596,1,0,0,0,3592,3593,3,376,188,0,3593,3594,3,382,
        191,0,3594,3596,1,0,0,0,3595,3576,1,0,0,0,3595,3584,1,0,0,0,3595,
        3592,1,0,0,0,3596,375,1,0,0,0,3597,3599,5,359,0,0,3598,3600,5,239,
        0,0,3599,3598,1,0,0,0,3599,3600,1,0,0,0,3600,3601,1,0,0,0,3601,3609,
        5,261,0,0,3602,3603,5,359,0,0,3603,3605,7,35,0,0,3604,3606,5,395,
        0,0,3605,3604,1,0,0,0,3605,3606,1,0,0,0,3606,3607,1,0,0,0,3607,3609,
        5,261,0,0,3608,3597,1,0,0,0,3608,3602,1,0,0,0,3609,377,1,0,0,0,3610,
        3612,7,36,0,0,3611,3610,1,0,0,0,3611,3612,1,0,0,0,3612,3613,1,0,
        0,0,3613,3616,5,261,0,0,3614,3616,5,555,0,0,3615,3611,1,0,0,0,3615,
        3614,1,0,0,0,3616,379,1,0,0,0,3617,3619,7,35,0,0,3618,3620,5,395,
        0,0,3619,3618,1,0,0,0,3619,3620,1,0,0,0,3620,3621,1,0,0,0,3621,3622,
        5,261,0,0,3622,381,1,0,0,0,3623,3630,3,384,192,0,3624,3630,3,386,
        193,0,3625,3630,3,388,194,0,3626,3630,3,390,195,0,3627,3628,4,191,
        28,0,3628,3630,3,392,196,0,3629,3623,1,0,0,0,3629,3624,1,0,0,0,3629,
        3625,1,0,0,0,3629,3626,1,0,0,0,3629,3627,1,0,0,0,3630,383,1,0,0,
        0,3631,3633,3,1322,661,0,3632,3634,3,1256,628,0,3633,3632,1,0,0,
        0,3633,3634,1,0,0,0,3634,3636,1,0,0,0,3635,3637,3,410,205,0,3636,
        3635,1,0,0,0,3636,3637,1,0,0,0,3637,3639,1,0,0,0,3638,3640,3,412,
        206,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,385,1,0,0,0,3641,
        3644,5,776,0,0,3642,3645,3,384,192,0,3643,3645,3,386,193,0,3644,
        3642,1,0,0,0,3644,3643,1,0,0,0,3645,3646,1,0,0,0,3646,3647,5,777,
        0,0,3647,387,1,0,0,0,3648,3650,3,290,145,0,3649,3651,3,410,205,0,
        3650,3649,1,0,0,0,3650,3651,1,0,0,0,3651,3653,1,0,0,0,3652,3654,
        3,1264,632,0,3653,3652,1,0,0,0,3653,3654,1,0,0,0,3654,3665,1,0,0,
        0,3655,3656,4,194,29,0,3656,3657,5,726,0,0,3657,3659,3,290,145,0,
        3658,3660,3,410,205,0,3659,3658,1,0,0,0,3659,3660,1,0,0,0,3660,3662,
        1,0,0,0,3661,3663,3,1264,632,0,3662,3661,1,0,0,0,3662,3663,1,0,0,
        0,3663,3665,1,0,0,0,3664,3648,1,0,0,0,3664,3655,1,0,0,0,3665,389,
        1,0,0,0,3666,3669,5,776,0,0,3667,3670,3,344,172,0,3668,3670,3,390,
        195,0,3669,3667,1,0,0,0,3669,3668,1,0,0,0,3670,3671,1,0,0,0,3671,
        3672,5,777,0,0,3672,391,1,0,0,0,3673,3674,5,701,0,0,3674,3675,5,
        776,0,0,3675,3676,3,860,430,0,3676,3677,5,773,0,0,3677,3678,3,1378,
        689,0,3678,3679,3,394,197,0,3679,3681,5,777,0,0,3680,3682,3,410,
        205,0,3681,3680,1,0,0,0,3681,3682,1,0,0,0,3682,393,1,0,0,0,3683,
        3684,5,71,0,0,3684,3685,5,776,0,0,3685,3690,3,396,198,0,3686,3687,
        5,773,0,0,3687,3689,3,396,198,0,3688,3686,1,0,0,0,3689,3692,1,0,
        0,0,3690,3688,1,0,0,0,3690,3691,1,0,0,0,3691,3693,1,0,0,0,3692,3690,
        1,0,0,0,3693,3694,5,777,0,0,3694,395,1,0,0,0,3695,3696,3,1346,673,
        0,3696,3697,5,200,0,0,3697,3698,5,703,0,0,3698,3719,1,0,0,0,3699,
        3700,3,1346,673,0,3700,3703,3,1110,555,0,3701,3702,4,198,30,0,3702,
        3704,3,1188,594,0,3703,3701,1,0,0,0,3703,3704,1,0,0,0,3704,3706,
        1,0,0,0,3705,3707,5,174,0,0,3706,3705,1,0,0,0,3706,3707,1,0,0,0,
        3707,3708,1,0,0,0,3708,3709,5,704,0,0,3709,3711,3,1378,689,0,3710,
        3712,3,400,200,0,3711,3710,1,0,0,0,3711,3712,1,0,0,0,3712,3719,1,
        0,0,0,3713,3714,5,702,0,0,3714,3715,5,704,0,0,3715,3716,3,1378,689,
        0,3716,3717,3,394,197,0,3717,3719,1,0,0,0,3718,3695,1,0,0,0,3718,
        3699,1,0,0,0,3718,3713,1,0,0,0,3719,397,1,0,0,0,3720,3722,3,402,
        201,0,3721,3723,3,404,202,0,3722,3721,1,0,0,0,3722,3723,1,0,0,0,
        3723,3726,1,0,0,0,3724,3726,3,404,202,0,3725,3720,1,0,0,0,3725,3724,
        1,0,0,0,3726,399,1,0,0,0,3727,3732,3,398,199,0,3728,3729,3,404,202,
        0,3729,3730,3,402,201,0,3730,3732,1,0,0,0,3731,3727,1,0,0,0,3731,
        3728,1,0,0,0,3732,401,1,0,0,0,3733,3734,3,406,203,0,3734,3735,5,
        383,0,0,3735,3736,5,700,0,0,3736,403,1,0,0,0,3737,3738,3,406,203,
        0,3738,3739,5,383,0,0,3739,3740,5,165,0,0,3740,405,1,0,0,0,3741,
        3746,5,165,0,0,3742,3746,5,376,0,0,3743,3744,5,128,0,0,3744,3746,
        3,1378,689,0,3745,3741,1,0,0,0,3745,3742,1,0,0,0,3745,3743,1,0,0,
        0,3746,407,1,0,0,0,3747,3748,7,37,0,0,3748,409,1,0,0,0,3749,3753,
        5,17,0,0,3750,3751,4,205,31,0,3751,3753,5,750,0,0,3752,3749,1,0,
        0,0,3752,3750,1,0,0,0,3752,3753,1,0,0,0,3753,3754,1,0,0,0,3754,3755,
        3,1346,673,0,3755,411,1,0,0,0,3756,3761,3,414,207,0,3757,3758,5,
        773,0,0,3758,3760,3,414,207,0,3759,3757,1,0,0,0,3760,3763,1,0,0,
        0,3761,3759,1,0,0,0,3761,3762,1,0,0,0,3762,413,1,0,0,0,3763,3761,
        1,0,0,0,3764,3765,3,416,208,0,3765,3767,3,418,209,0,3766,3768,3,
        422,211,0,3767,3766,1,0,0,0,3767,3768,1,0,0,0,3768,3769,1,0,0,0,
        3769,3770,5,776,0,0,3770,3771,3,424,212,0,3771,3772,5,777,0,0,3772,
        3785,1,0,0,0,3773,3774,5,620,0,0,3774,3776,3,418,209,0,3775,3777,
        3,422,211,0,3776,3775,1,0,0,0,3776,3777,1,0,0,0,3777,3778,1,0,0,
        0,3778,3780,5,776,0,0,3779,3781,3,424,212,0,3780,3779,1,0,0,0,3780,
        3781,1,0,0,0,3781,3782,1,0,0,0,3782,3783,5,777,0,0,3783,3785,1,0,
        0,0,3784,3764,1,0,0,0,3784,3773,1,0,0,0,3785,415,1,0,0,0,3786,3787,
        7,38,0,0,3787,417,1,0,0,0,3788,3789,7,39,0,0,3789,419,1,0,0,0,3790,
        3791,5,420,0,0,3791,3797,5,265,0,0,3792,3794,5,609,0,0,3793,3795,
        3,418,209,0,3794,3793,1,0,0,0,3794,3795,1,0,0,0,3795,3797,1,0,0,
        0,3796,3790,1,0,0,0,3796,3792,1,0,0,0,3797,421,1,0,0,0,3798,3804,
        5,200,0,0,3799,3805,5,261,0,0,3800,3801,5,393,0,0,3801,3805,5,45,
        0,0,3802,3803,5,217,0,0,3803,3805,5,45,0,0,3804,3799,1,0,0,0,3804,
        3800,1,0,0,0,3804,3802,1,0,0,0,3805,423,1,0,0,0,3806,3811,3,426,
        213,0,3807,3808,5,773,0,0,3808,3810,3,426,213,0,3809,3807,1,0,0,
        0,3810,3813,1,0,0,0,3811,3809,1,0,0,0,3811,3812,1,0,0,0,3812,425,
        1,0,0,0,3813,3811,1,0,0,0,3814,3817,3,1346,673,0,3815,3817,5,420,
        0,0,3816,3814,1,0,0,0,3816,3815,1,0,0,0,3817,427,1,0,0,0,3818,3820,
        3,330,165,0,3819,3818,1,0,0,0,3819,3820,1,0,0,0,3820,3821,1,0,0,
        0,3821,3823,5,614,0,0,3822,3824,5,295,0,0,3823,3822,1,0,0,0,3823,
        3824,1,0,0,0,3824,3826,1,0,0,0,3825,3827,5,232,0,0,3826,3825,1,0,
        0,0,3826,3827,1,0,0,0,3827,3828,1,0,0,0,3828,3829,3,344,172,0,3829,
        3830,5,506,0,0,3830,3832,3,1196,598,0,3831,3833,3,368,184,0,3832,
        3831,1,0,0,0,3832,3833,1,0,0,0,3833,3835,1,0,0,0,3834,3836,3,338,
        169,0,3835,3834,1,0,0,0,3835,3836,1,0,0,0,3836,3838,1,0,0,0,3837,
        3839,3,296,148,0,3838,3837,1,0,0,0,3838,3839,1,0,0,0,3839,429,1,
        0,0,0,3840,3845,3,432,216,0,3841,3845,3,438,219,0,3842,3845,3,440,
        220,0,3843,3845,3,446,223,0,3844,3840,1,0,0,0,3844,3841,1,0,0,0,
        3844,3842,1,0,0,0,3844,3843,1,0,0,0,3845,431,1,0,0,0,3846,3847,5,
        543,0,0,3847,3851,5,592,0,0,3848,3850,3,436,218,0,3849,3848,1,0,
        0,0,3850,3853,1,0,0,0,3851,3849,1,0,0,0,3851,3852,1,0,0,0,3852,3872,
        1,0,0,0,3853,3851,1,0,0,0,3854,3856,5,77,0,0,3855,3857,5,647,0,0,
        3856,3855,1,0,0,0,3856,3857,1,0,0,0,3857,3863,1,0,0,0,3858,3860,
        5,15,0,0,3859,3861,5,373,0,0,3860,3859,1,0,0,0,3860,3861,1,0,0,0,
        3861,3862,1,0,0,0,3862,3864,5,54,0,0,3863,3858,1,0,0,0,3863,3864,
        1,0,0,0,3864,3869,1,0,0,0,3865,3867,5,373,0,0,3866,3865,1,0,0,0,
        3866,3867,1,0,0,0,3867,3868,1,0,0,0,3868,3870,5,450,0,0,3869,3866,
        1,0,0,0,3869,3870,1,0,0,0,3870,3872,1,0,0,0,3871,3846,1,0,0,0,3871,
        3854,1,0,0,0,3872,433,1,0,0,0,3873,3875,5,29,0,0,3874,3876,5,647,
        0,0,3875,3874,1,0,0,0,3875,3876,1,0,0,0,3876,435,1,0,0,0,3877,3878,
        5,645,0,0,3878,3879,5,85,0,0,3879,3883,5,517,0,0,3880,3881,5,435,
        0,0,3881,3883,7,40,0,0,3882,3877,1,0,0,0,3882,3880,1,0,0,0,3883,
        437,1,0,0,0,3884,3885,5,489,0,0,3885,3914,3,1346,673,0,3886,3888,
        5,480,0,0,3887,3889,5,647,0,0,3888,3887,1,0,0,0,3888,3889,1,0,0,
        0,3889,3908,1,0,0,0,3890,3892,5,590,0,0,3891,3893,5,489,0,0,3892,
        3891,1,0,0,0,3892,3893,1,0,0,0,3893,3894,1,0,0,0,3894,3909,3,1346,
        673,0,3895,3897,5,15,0,0,3896,3898,5,373,0,0,3897,3896,1,0,0,0,3897,
        3898,1,0,0,0,3898,3899,1,0,0,0,3899,3901,5,54,0,0,3900,3895,1,0,
        0,0,3900,3901,1,0,0,0,3901,3906,1,0,0,0,3902,3904,5,373,0,0,3903,
        3902,1,0,0,0,3903,3904,1,0,0,0,3904,3905,1,0,0,0,3905,3907,5,450,
        0,0,3906,3903,1,0,0,0,3906,3907,1,0,0,0,3907,3909,1,0,0,0,3908,3890,
        1,0,0,0,3908,3900,1,0,0,0,3909,3914,1,0,0,0,3910,3911,5,450,0,0,
        3911,3912,5,489,0,0,3912,3914,3,1346,673,0,3913,3884,1,0,0,0,3913,
        3886,1,0,0,0,3913,3910,1,0,0,0,3914,439,1,0,0,0,3915,3916,5,287,
        0,0,3916,3917,7,17,0,0,3917,3922,3,442,221,0,3918,3919,5,773,0,0,
        3919,3921,3,442,221,0,3920,3918,1,0,0,0,3921,3924,1,0,0,0,3922,3920,
        1,0,0,0,3922,3923,1,0,0,0,3923,3932,1,0,0,0,3924,3922,1,0,0,0,3925,
        3926,5,287,0,0,3926,3927,5,244,0,0,3927,3928,5,200,0,0,3928,3932,
        5,27,0,0,3929,3930,5,611,0,0,3930,3932,7,41,0,0,3931,3915,1,0,0,
        0,3931,3925,1,0,0,0,3931,3929,1,0,0,0,3932,441,1,0,0,0,3933,3935,
        3,1322,661,0,3934,3936,3,410,205,0,3935,3934,1,0,0,0,3935,3936,1,
        0,0,0,3936,3937,1,0,0,0,3937,3938,3,444,222,0,3938,443,1,0,0,0,3939,
        3941,5,435,0,0,3940,3942,5,284,0,0,3941,3940,1,0,0,0,3941,3942,1,
        0,0,0,3942,3948,1,0,0,0,3943,3945,5,295,0,0,3944,3943,1,0,0,0,3944,
        3945,1,0,0,0,3945,3946,1,0,0,0,3946,3948,5,649,0,0,3947,3939,1,0,
        0,0,3947,3944,1,0,0,0,3948,445,1,0,0,0,3949,3978,5,651,0,0,3950,
        3951,7,42,0,0,3951,3953,3,450,225,0,3952,3954,7,43,0,0,3953,3952,
        1,0,0,0,3953,3954,1,0,0,0,3954,3979,1,0,0,0,3955,3956,5,159,0,0,
        3956,3962,3,450,225,0,3957,3960,5,566,0,0,3958,3959,5,200,0,0,3959,
        3961,5,340,0,0,3960,3958,1,0,0,0,3960,3961,1,0,0,0,3961,3963,1,0,
        0,0,3962,3957,1,0,0,0,3962,3963,1,0,0,0,3963,3979,1,0,0,0,3964,3965,
        5,417,0,0,3965,3979,3,450,225,0,3966,3967,5,77,0,0,3967,3970,3,450,
        225,0,3968,3969,5,384,0,0,3969,3971,5,407,0,0,3970,3968,1,0,0,0,
        3970,3971,1,0,0,0,3971,3979,1,0,0,0,3972,3973,5,480,0,0,3973,3979,
        3,450,225,0,3974,3976,5,439,0,0,3975,3977,3,448,224,0,3976,3975,
        1,0,0,0,3976,3977,1,0,0,0,3977,3979,1,0,0,0,3978,3950,1,0,0,0,3978,
        3955,1,0,0,0,3978,3964,1,0,0,0,3978,3966,1,0,0,0,3978,3972,1,0,0,
        0,3978,3974,1,0,0,0,3979,447,1,0,0,0,3980,3981,5,94,0,0,3981,3982,
        5,652,0,0,3982,449,1,0,0,0,3983,3990,3,1380,690,0,3984,3985,5,773,
        0,0,3985,3988,3,1380,690,0,3986,3987,5,773,0,0,3987,3989,3,1358,
        679,0,3988,3986,1,0,0,0,3988,3989,1,0,0,0,3989,3991,1,0,0,0,3990,
        3984,1,0,0,0,3990,3991,1,0,0,0,3991,451,1,0,0,0,3992,3993,5,428,
        0,0,3993,3994,7,44,0,0,3994,3999,5,289,0,0,3995,3996,5,590,0,0,3996,
        4000,3,1384,692,0,3997,3998,5,28,0,0,3998,4000,3,860,430,0,3999,
        3995,1,0,0,0,3999,3997,1,0,0,0,4000,4024,1,0,0,0,4001,4024,3,462,
        231,0,4002,4003,5,468,0,0,4003,4008,3,454,227,0,4004,4005,5,773,
        0,0,4005,4007,3,454,227,0,4006,4004,1,0,0,0,4007,4010,1,0,0,0,4008,
        4006,1,0,0,0,4008,4009,1,0,0,0,4009,4024,1,0,0,0,4010,4008,1,0,0,
        0,4011,4012,5,468,0,0,4012,4016,5,658,0,0,4013,4014,3,1178,589,0,
        4014,4015,3,1346,673,0,4015,4017,1,0,0,0,4016,4013,1,0,0,0,4016,
        4017,1,0,0,0,4017,4024,1,0,0,0,4018,4024,3,548,274,0,4019,4024,3,
        550,275,0,4020,4024,3,534,267,0,4021,4024,3,458,229,0,4022,4024,
        3,566,283,0,4023,3992,1,0,0,0,4023,4001,1,0,0,0,4023,4002,1,0,0,
        0,4023,4011,1,0,0,0,4023,4018,1,0,0,0,4023,4019,1,0,0,0,4023,4020,
        1,0,0,0,4023,4021,1,0,0,0,4023,4022,1,0,0,0,4024,453,1,0,0,0,4025,
        4027,5,316,0,0,4026,4028,3,456,228,0,4027,4026,1,0,0,0,4027,4028,
        1,0,0,0,4028,4037,1,0,0,0,4029,4031,3,578,289,0,4030,4032,5,10,0,
        0,4031,4030,1,0,0,0,4031,4032,1,0,0,0,4032,4034,1,0,0,0,4033,4035,
        3,974,487,0,4034,4033,1,0,0,0,4034,4035,1,0,0,0,4035,4037,1,0,0,
        0,4036,4025,1,0,0,0,4036,4029,1,0,0,0,4037,455,1,0,0,0,4038,4039,
        5,590,0,0,4039,4040,3,1364,682,0,4040,457,1,0,0,0,4041,4045,5,281,
        0,0,4042,4046,5,112,0,0,4043,4044,5,574,0,0,4044,4046,3,1322,661,
        0,4045,4042,1,0,0,0,4045,4043,1,0,0,0,4046,4047,1,0,0,0,4047,4048,
        5,203,0,0,4048,4049,5,316,0,0,4049,459,1,0,0,0,4050,4055,5,316,0,
        0,4051,4052,4,230,32,0,4052,4053,5,459,0,0,4053,4055,5,522,0,0,4054,
        4050,1,0,0,0,4054,4051,1,0,0,0,4055,461,1,0,0,0,4056,4057,5,55,0,
        0,4057,4058,3,460,230,0,4058,4059,5,590,0,0,4059,4061,3,464,232,
        0,4060,4062,3,974,487,0,4061,4060,1,0,0,0,4061,4062,1,0,0,0,4062,
        463,1,0,0,0,4063,4068,3,466,233,0,4064,4065,5,773,0,0,4065,4067,
        3,466,233,0,4066,4064,1,0,0,0,4067,4070,1,0,0,0,4068,4066,1,0,0,
        0,4068,4069,1,0,0,0,4069,465,1,0,0,0,4070,4068,1,0,0,0,4071,4072,
        3,470,235,0,4072,4073,5,750,0,0,4073,4074,3,1386,693,0,4074,4200,
        1,0,0,0,4075,4076,5,729,0,0,4076,4077,5,750,0,0,4077,4200,3,1386,
        693,0,4078,4079,3,472,236,0,4079,4080,5,750,0,0,4080,4081,3,1386,
        693,0,4081,4200,1,0,0,0,4082,4083,3,474,237,0,4083,4084,5,750,0,
        0,4084,4085,3,1386,693,0,4085,4200,1,0,0,0,4086,4087,3,476,238,0,
        4087,4088,5,750,0,0,4088,4089,3,1386,693,0,4089,4200,1,0,0,0,4090,
        4091,3,478,239,0,4091,4092,5,750,0,0,4092,4093,3,1358,679,0,4093,
        4200,1,0,0,0,4094,4095,3,480,240,0,4095,4096,5,750,0,0,4096,4097,
        3,1358,679,0,4097,4200,1,0,0,0,4098,4099,3,482,241,0,4099,4100,5,
        750,0,0,4100,4101,3,1358,679,0,4101,4200,1,0,0,0,4102,4103,3,484,
        242,0,4103,4104,5,750,0,0,4104,4105,3,1358,679,0,4105,4200,1,0,0,
        0,4106,4107,3,486,243,0,4107,4108,5,750,0,0,4108,4109,3,1358,679,
        0,4109,4200,1,0,0,0,4110,4111,3,488,244,0,4111,4112,5,750,0,0,4112,
        4113,3,1386,693,0,4113,4200,1,0,0,0,4114,4115,3,490,245,0,4115,4116,
        5,750,0,0,4116,4117,3,1386,693,0,4117,4200,1,0,0,0,4118,4119,3,502,
        251,0,4119,4120,5,750,0,0,4120,4121,3,1386,693,0,4121,4200,1,0,0,
        0,4122,4123,3,506,253,0,4123,4124,5,750,0,0,4124,4125,3,1386,693,
        0,4125,4200,1,0,0,0,4126,4127,3,504,252,0,4127,4128,5,750,0,0,4128,
        4129,3,524,262,0,4129,4200,1,0,0,0,4130,4131,3,492,246,0,4131,4132,
        5,750,0,0,4132,4133,3,1386,693,0,4133,4200,1,0,0,0,4134,4135,3,498,
        249,0,4135,4136,5,750,0,0,4136,4137,3,1386,693,0,4137,4200,1,0,0,
        0,4138,4139,3,500,250,0,4139,4140,5,750,0,0,4140,4141,3,1358,679,
        0,4141,4200,1,0,0,0,4142,4143,3,494,247,0,4143,4144,5,750,0,0,4144,
        4145,3,1384,692,0,4145,4200,1,0,0,0,4146,4147,3,496,248,0,4147,4148,
        5,750,0,0,4148,4149,3,1386,693,0,4149,4200,1,0,0,0,4150,4151,3,508,
        254,0,4151,4152,5,750,0,0,4152,4153,3,1386,693,0,4153,4200,1,0,0,
        0,4154,4155,3,510,255,0,4155,4156,5,750,0,0,4156,4157,3,1358,679,
        0,4157,4200,1,0,0,0,4158,4159,3,512,256,0,4159,4160,5,750,0,0,4160,
        4161,3,1358,679,0,4161,4200,1,0,0,0,4162,4163,5,233,0,0,4163,4164,
        5,750,0,0,4164,4200,3,532,266,0,4165,4166,3,514,257,0,4166,4167,
        5,750,0,0,4167,4168,3,1378,689,0,4168,4200,1,0,0,0,4169,4170,3,516,
        258,0,4170,4171,5,750,0,0,4171,4172,3,1358,679,0,4172,4200,1,0,0,
        0,4173,4174,3,468,234,0,4174,4175,5,750,0,0,4175,4176,3,1358,679,
        0,4176,4200,1,0,0,0,4177,4178,5,737,0,0,4178,4179,5,750,0,0,4179,
        4200,3,518,259,0,4180,4181,5,739,0,0,4181,4182,5,750,0,0,4182,4200,
        3,1358,679,0,4183,4184,5,742,0,0,4184,4185,5,750,0,0,4185,4200,3,
        520,260,0,4186,4187,4,233,33,0,4187,4188,5,800,0,0,4188,4189,5,750,
        0,0,4189,4200,3,1360,680,0,4190,4191,4,233,34,0,4191,4192,5,805,
        0,0,4192,4193,5,750,0,0,4193,4200,3,522,261,0,4194,4195,4,233,35,
        0,4195,4196,5,843,0,0,4196,4197,5,750,0,0,4197,4200,3,1360,680,0,
        4198,4200,3,526,263,0,4199,4071,1,0,0,0,4199,4075,1,0,0,0,4199,4078,
        1,0,0,0,4199,4082,1,0,0,0,4199,4086,1,0,0,0,4199,4090,1,0,0,0,4199,
        4094,1,0,0,0,4199,4098,1,0,0,0,4199,4102,1,0,0,0,4199,4106,1,0,0,
        0,4199,4110,1,0,0,0,4199,4114,1,0,0,0,4199,4118,1,0,0,0,4199,4122,
        1,0,0,0,4199,4126,1,0,0,0,4199,4130,1,0,0,0,4199,4134,1,0,0,0,4199,
        4138,1,0,0,0,4199,4142,1,0,0,0,4199,4146,1,0,0,0,4199,4150,1,0,0,
        0,4199,4154,1,0,0,0,4199,4158,1,0,0,0,4199,4162,1,0,0,0,4199,4165,
        1,0,0,0,4199,4169,1,0,0,0,4199,4173,1,0,0,0,4199,4177,1,0,0,0,4199,
        4180,1,0,0,0,4199,4183,1,0,0,0,4199,4186,1,0,0,0,4199,4190,1,0,0,
        0,4199,4194,1,0,0,0,4199,4198,1,0,0,0,4200,467,1,0,0,0,4201,4202,
        7,45,0,0,4202,469,1,0,0,0,4203,4204,7,46,0,0,4204,471,1,0,0,0,4205,
        4206,7,47,0,0,4206,473,1,0,0,0,4207,4208,7,48,0,0,4208,475,1,0,0,
        0,4209,4210,7,49,0,0,4210,477,1,0,0,0,4211,4212,7,50,0,0,4212,479,
        1,0,0,0,4213,4214,7,51,0,0,4214,481,1,0,0,0,4215,4216,7,52,0,0,4216,
        483,1,0,0,0,4217,4218,7,53,0,0,4218,485,1,0,0,0,4219,4220,7,54,0,
        0,4220,487,1,0,0,0,4221,4222,7,55,0,0,4222,489,1,0,0,0,4223,4224,
        7,56,0,0,4224,491,1,0,0,0,4225,4226,7,57,0,0,4226,493,1,0,0,0,4227,
        4228,7,58,0,0,4228,495,1,0,0,0,4229,4230,7,59,0,0,4230,497,1,0,0,
        0,4231,4232,7,60,0,0,4232,499,1,0,0,0,4233,4234,7,61,0,0,4234,501,
        1,0,0,0,4235,4236,7,62,0,0,4236,503,1,0,0,0,4237,4238,7,63,0,0,4238,
        505,1,0,0,0,4239,4240,7,64,0,0,4240,507,1,0,0,0,4241,4242,7,65,0,
        0,4242,509,1,0,0,0,4243,4244,7,66,0,0,4244,511,1,0,0,0,4245,4246,
        7,67,0,0,4246,513,1,0,0,0,4247,4248,7,68,0,0,4248,515,1,0,0,0,4249,
        4250,7,69,0,0,4250,517,1,0,0,0,4251,4254,3,1244,622,0,4252,4254,
        5,376,0,0,4253,4251,1,0,0,0,4253,4252,1,0,0,0,4254,519,1,0,0,0,4255,
        4256,7,70,0,0,4256,521,1,0,0,0,4257,4261,5,744,0,0,4258,4261,5,284,
        0,0,4259,4261,3,1378,689,0,4260,4257,1,0,0,0,4260,4258,1,0,0,0,4260,
        4259,1,0,0,0,4261,523,1,0,0,0,4262,4265,3,1386,693,0,4263,4265,5,
        376,0,0,4264,4262,1,0,0,0,4264,4263,1,0,0,0,4265,525,1,0,0,0,4266,
        4267,3,528,264,0,4267,4268,5,750,0,0,4268,4269,3,1386,693,0,4269,
        4281,1,0,0,0,4270,4271,3,530,265,0,4271,4272,5,750,0,0,4272,4273,
        3,1362,681,0,4273,4281,1,0,0,0,4274,4275,5,447,0,0,4275,4276,5,750,
        0,0,4276,4281,3,1386,693,0,4277,4278,5,448,0,0,4278,4279,5,750,0,
        0,4279,4281,3,1358,679,0,4280,4266,1,0,0,0,4280,4270,1,0,0,0,4280,
        4274,1,0,0,0,4280,4277,1,0,0,0,4281,527,1,0,0,0,4282,4283,7,71,0,
        0,4283,529,1,0,0,0,4284,4285,7,72,0,0,4285,531,1,0,0,0,4286,4295,
        5,776,0,0,4287,4292,3,1358,679,0,4288,4289,5,773,0,0,4289,4291,3,
        1358,679,0,4290,4288,1,0,0,0,4291,4294,1,0,0,0,4292,4290,1,0,0,0,
        4292,4293,1,0,0,0,4293,4296,1,0,0,0,4294,4292,1,0,0,0,4295,4287,
        1,0,0,0,4295,4296,1,0,0,0,4296,4297,1,0,0,0,4297,4298,5,777,0,0,
        4298,533,1,0,0,0,4299,4300,5,55,0,0,4300,4301,5,459,0,0,4301,4302,
        5,190,0,0,4302,4307,3,536,268,0,4303,4304,5,773,0,0,4304,4306,3,
        536,268,0,4305,4303,1,0,0,0,4306,4309,1,0,0,0,4307,4305,1,0,0,0,
        4307,4308,1,0,0,0,4308,4311,1,0,0,0,4309,4307,1,0,0,0,4310,4312,
        3,974,487,0,4311,4310,1,0,0,0,4311,4312,1,0,0,0,4312,535,1,0,0,0,
        4313,4314,5,460,0,0,4314,4315,5,750,0,0,4315,4317,5,776,0,0,4316,
        4318,3,538,269,0,4317,4316,1,0,0,0,4317,4318,1,0,0,0,4318,4319,1,
        0,0,0,4319,4363,5,777,0,0,4320,4321,5,461,0,0,4321,4322,5,750,0,
        0,4322,4324,5,776,0,0,4323,4325,3,538,269,0,4324,4323,1,0,0,0,4324,
        4325,1,0,0,0,4325,4326,1,0,0,0,4326,4363,5,777,0,0,4327,4328,5,462,
        0,0,4328,4329,5,750,0,0,4329,4331,5,776,0,0,4330,4332,3,540,270,
        0,4331,4330,1,0,0,0,4331,4332,1,0,0,0,4332,4333,1,0,0,0,4333,4363,
        5,777,0,0,4334,4335,5,463,0,0,4335,4336,5,750,0,0,4336,4338,5,776,
        0,0,4337,4339,3,540,270,0,4338,4337,1,0,0,0,4338,4339,1,0,0,0,4339,
        4340,1,0,0,0,4340,4363,5,777,0,0,4341,4342,5,464,0,0,4342,4343,5,
        750,0,0,4343,4345,5,776,0,0,4344,4346,3,542,271,0,4345,4344,1,0,
        0,0,4345,4346,1,0,0,0,4346,4347,1,0,0,0,4347,4363,5,777,0,0,4348,
        4349,5,465,0,0,4349,4350,5,750,0,0,4350,4352,5,776,0,0,4351,4353,
        3,542,271,0,4352,4351,1,0,0,0,4352,4353,1,0,0,0,4353,4354,1,0,0,
        0,4354,4363,5,777,0,0,4355,4356,5,466,0,0,4356,4357,5,750,0,0,4357,
        4359,5,776,0,0,4358,4360,3,546,273,0,4359,4358,1,0,0,0,4359,4360,
        1,0,0,0,4360,4361,1,0,0,0,4361,4363,5,777,0,0,4362,4313,1,0,0,0,
        4362,4320,1,0,0,0,4362,4327,1,0,0,0,4362,4334,1,0,0,0,4362,4341,
        1,0,0,0,4362,4348,1,0,0,0,4362,4355,1,0,0,0,4363,537,1,0,0,0,4364,
        4369,3,1278,639,0,4365,4366,5,773,0,0,4366,4368,3,1278,639,0,4367,
        4365,1,0,0,0,4368,4371,1,0,0,0,4369,4367,1,0,0,0,4369,4370,1,0,0,
        0,4370,539,1,0,0,0,4371,4369,1,0,0,0,4372,4377,3,1318,659,0,4373,
        4374,5,773,0,0,4374,4376,3,1318,659,0,4375,4373,1,0,0,0,4376,4379,
        1,0,0,0,4377,4375,1,0,0,0,4377,4378,1,0,0,0,4378,541,1,0,0,0,4379,
        4377,1,0,0,0,4380,4385,3,544,272,0,4381,4382,5,773,0,0,4382,4384,
        3,544,272,0,4383,4381,1,0,0,0,4384,4387,1,0,0,0,4385,4383,1,0,0,
        0,4385,4386,1,0,0,0,4386,543,1,0,0,0,4387,4385,1,0,0,0,4388,4389,
        3,1386,693,0,4389,545,1,0,0,0,4390,4395,3,1192,596,0,4391,4392,5,
        773,0,0,4392,4394,3,1192,596,0,4393,4391,1,0,0,0,4394,4397,1,0,0,
        0,4395,4393,1,0,0,0,4395,4396,1,0,0,0,4396,547,1,0,0,0,4397,4395,
        1,0,0,0,4398,4399,5,543,0,0,4399,4401,3,578,289,0,4400,4402,3,562,
        281,0,4401,4400,1,0,0,0,4401,4402,1,0,0,0,4402,4405,1,0,0,0,4403,
        4404,5,613,0,0,4404,4406,3,552,276,0,4405,4403,1,0,0,0,4405,4406,
        1,0,0,0,4406,4408,1,0,0,0,4407,4409,3,554,277,0,4408,4407,1,0,0,
        0,4408,4409,1,0,0,0,4409,4411,1,0,0,0,4410,4412,3,556,278,0,4411,
        4410,1,0,0,0,4411,4412,1,0,0,0,4412,4414,1,0,0,0,4413,4415,3,558,
        279,0,4414,4413,1,0,0,0,4414,4415,1,0,0,0,4415,4417,1,0,0,0,4416,
        4418,3,560,280,0,4417,4416,1,0,0,0,4417,4418,1,0,0,0,4418,4420,1,
        0,0,0,4419,4421,3,974,487,0,4420,4419,1,0,0,0,4420,4421,1,0,0,0,
        4421,549,1,0,0,0,4422,4423,5,552,0,0,4423,4425,3,578,289,0,4424,
        4426,3,562,281,0,4425,4424,1,0,0,0,4425,4426,1,0,0,0,4426,4428,1,
        0,0,0,4427,4429,3,974,487,0,4428,4427,1,0,0,0,4428,4429,1,0,0,0,
        4429,551,1,0,0,0,4430,4436,3,526,263,0,4431,4432,7,73,0,0,4432,4433,
        5,750,0,0,4433,4436,3,1380,690,0,4434,4436,5,529,0,0,4435,4430,1,
        0,0,0,4435,4431,1,0,0,0,4435,4434,1,0,0,0,4436,4441,1,0,0,0,4437,
        4438,5,773,0,0,4438,4440,3,526,263,0,4439,4437,1,0,0,0,4440,4443,
        1,0,0,0,4441,4439,1,0,0,0,4441,4442,1,0,0,0,4442,553,1,0,0,0,4443,
        4441,1,0,0,0,4444,4445,5,618,0,0,4445,4446,5,750,0,0,4446,4447,3,
        1380,690,0,4447,555,1,0,0,0,4448,4449,5,406,0,0,4449,4450,5,750,
        0,0,4450,4451,3,1380,690,0,4451,557,1,0,0,0,4452,4453,5,129,0,0,
        4453,4454,5,750,0,0,4454,4455,3,1380,690,0,4455,559,1,0,0,0,4456,
        4457,5,409,0,0,4457,4458,5,750,0,0,4458,4459,3,1380,690,0,4459,561,
        1,0,0,0,4460,4465,3,564,282,0,4461,4462,5,773,0,0,4462,4464,3,564,
        282,0,4463,4461,1,0,0,0,4464,4467,1,0,0,0,4465,4463,1,0,0,0,4465,
        4466,1,0,0,0,4466,563,1,0,0,0,4467,4465,1,0,0,0,4468,4469,7,74,0,
        0,4469,565,1,0,0,0,4470,4472,5,543,0,0,4471,4473,3,568,284,0,4472,
        4471,1,0,0,0,4472,4473,1,0,0,0,4473,4476,1,0,0,0,4474,4476,5,552,
        0,0,4475,4470,1,0,0,0,4475,4474,1,0,0,0,4476,4477,1,0,0,0,4477,4478,
        5,210,0,0,4478,567,1,0,0,0,4479,4484,3,570,285,0,4480,4481,5,773,
        0,0,4481,4483,3,570,285,0,4482,4480,1,0,0,0,4483,4486,1,0,0,0,4484,
        4482,1,0,0,0,4484,4485,1,0,0,0,4485,569,1,0,0,0,4486,4484,1,0,0,
        0,4487,4491,3,572,286,0,4488,4491,3,574,287,0,4489,4491,3,576,288,
        0,4490,4487,1,0,0,0,4490,4488,1,0,0,0,4490,4489,1,0,0,0,4491,571,
        1,0,0,0,4492,4493,5,618,0,0,4493,4494,5,750,0,0,4494,4495,3,1386,
        693,0,4495,573,1,0,0,0,4496,4497,5,406,0,0,4497,4498,5,750,0,0,4498,
        4499,3,1386,693,0,4499,575,1,0,0,0,4500,4501,5,129,0,0,4501,4502,
        5,750,0,0,4502,4503,3,1386,693,0,4503,577,1,0,0,0,4504,4505,7,75,
        0,0,4505,579,1,0,0,0,4506,4507,5,417,0,0,4507,4508,3,1346,673,0,
        4508,4511,5,203,0,0,4509,4512,3,1384,692,0,4510,4512,3,930,465,0,
        4511,4509,1,0,0,0,4511,4510,1,0,0,0,4512,4518,1,0,0,0,4513,4518,
        3,582,291,0,4514,4515,7,76,0,0,4515,4516,5,417,0,0,4516,4518,3,1346,
        673,0,4517,4506,1,0,0,0,4517,4513,1,0,0,0,4517,4514,1,0,0,0,4518,
        581,1,0,0,0,4519,4520,5,173,0,0,4520,4523,3,1346,673,0,4521,4522,
        5,621,0,0,4522,4524,3,584,292,0,4523,4521,1,0,0,0,4523,4524,1,0,
        0,0,4524,583,1,0,0,0,4525,4530,3,930,465,0,4526,4527,5,773,0,0,4527,
        4529,3,930,465,0,4528,4526,1,0,0,0,4529,4532,1,0,0,0,4530,4528,1,
        0,0,0,4530,4531,1,0,0,0,4531,585,1,0,0,0,4532,4530,1,0,0,0,4533,
        4558,5,677,0,0,4534,4535,5,284,0,0,4535,4536,5,112,0,0,4536,4538,
        5,139,0,0,4537,4539,3,1416,708,0,4538,4537,1,0,0,0,4538,4539,1,0,
        0,0,4539,4540,1,0,0,0,4540,4559,3,1378,689,0,4541,4544,5,676,0,0,
        4542,4543,5,200,0,0,4543,4545,5,459,0,0,4544,4542,1,0,0,0,4544,4545,
        1,0,0,0,4545,4559,1,0,0,0,4546,4547,4,293,36,0,4547,4548,5,244,0,
        0,4548,4549,5,203,0,0,4549,4550,3,1246,623,0,4550,4551,5,775,0,0,
        4551,4552,3,1358,679,0,4552,4553,5,230,0,0,4553,4554,5,45,0,0,4554,
        4556,3,1378,689,0,4555,4557,3,588,294,0,4556,4555,1,0,0,0,4556,4557,
        1,0,0,0,4557,4559,1,0,0,0,4558,4534,1,0,0,0,4558,4541,1,0,0,0,4558,
        4546,1,0,0,0,4559,587,1,0,0,0,4560,4571,3,590,295,0,4561,4562,5,
        112,0,0,4562,4564,5,139,0,0,4563,4565,3,1416,708,0,4564,4563,1,0,
        0,0,4564,4565,1,0,0,0,4565,4566,1,0,0,0,4566,4568,3,1378,689,0,4567,
        4569,3,590,295,0,4568,4567,1,0,0,0,4568,4569,1,0,0,0,4569,4571,1,
        0,0,0,4570,4560,1,0,0,0,4570,4561,1,0,0,0,4571,589,1,0,0,0,4572,
        4574,5,467,0,0,4573,4575,5,373,0,0,4574,4573,1,0,0,0,4574,4575,1,
        0,0,0,4575,4576,1,0,0,0,4576,4577,5,539,0,0,4577,591,1,0,0,0,4578,
        4586,3,594,297,0,4579,4586,3,604,302,0,4580,4586,3,620,310,0,4581,
        4586,3,622,311,0,4582,4586,3,636,318,0,4583,4586,3,638,319,0,4584,
        4586,3,654,327,0,4585,4578,1,0,0,0,4585,4579,1,0,0,0,4585,4580,1,
        0,0,0,4585,4581,1,0,0,0,4585,4582,1,0,0,0,4585,4583,1,0,0,0,4585,
        4584,1,0,0,0,4586,593,1,0,0,0,4587,4588,5,11,0,0,4588,4590,5,618,
        0,0,4589,4591,3,1178,589,0,4590,4589,1,0,0,0,4590,4591,1,0,0,0,4591,
        4632,1,0,0,0,4592,4593,4,297,37,0,4593,4597,3,1212,606,0,4594,4595,
        4,297,38,0,4595,4597,3,596,298,0,4596,4592,1,0,0,0,4596,4594,1,0,
        0,0,4597,4598,1,0,0,0,4598,4599,3,606,303,0,4599,4633,1,0,0,0,4600,
        4617,3,602,301,0,4601,4604,3,1222,611,0,4602,4604,3,1220,610,0,4603,
        4601,1,0,0,0,4603,4602,1,0,0,0,4604,4606,1,0,0,0,4605,4607,3,1242,
        621,0,4606,4605,1,0,0,0,4606,4607,1,0,0,0,4607,4609,1,0,0,0,4608,
        4610,3,1234,617,0,4609,4608,1,0,0,0,4609,4610,1,0,0,0,4610,4618,
        1,0,0,0,4611,4612,5,141,0,0,4612,4613,5,728,0,0,4613,4618,5,406,
        0,0,4614,4616,3,1238,619,0,4615,4614,1,0,0,0,4615,4616,1,0,0,0,4616,
        4618,1,0,0,0,4617,4603,1,0,0,0,4617,4611,1,0,0,0,4617,4615,1,0,0,
        0,4618,4633,1,0,0,0,4619,4630,3,1246,623,0,4620,4621,5,128,0,0,4621,
        4625,5,659,0,0,4622,4626,5,10,0,0,4623,4626,5,369,0,0,4624,4626,
        3,656,328,0,4625,4622,1,0,0,0,4625,4623,1,0,0,0,4625,4624,1,0,0,
        0,4626,4631,1,0,0,0,4627,4629,3,1238,619,0,4628,4627,1,0,0,0,4628,
        4629,1,0,0,0,4629,4631,1,0,0,0,4630,4620,1,0,0,0,4630,4628,1,0,0,
        0,4631,4633,1,0,0,0,4632,4596,1,0,0,0,4632,4600,1,0,0,0,4632,4619,
        1,0,0,0,4633,595,1,0,0,0,4634,4639,3,598,299,0,4635,4636,5,773,0,
        0,4636,4638,3,598,299,0,4637,4635,1,0,0,0,4638,4641,1,0,0,0,4639,
        4637,1,0,0,0,4639,4640,1,0,0,0,4640,597,1,0,0,0,4641,4639,1,0,0,
        0,4642,4643,4,299,39,0,4643,4718,3,600,300,0,4644,4645,4,299,40,
        0,4645,4715,3,1246,623,0,4646,4655,3,1220,610,0,4647,4648,5,458,
        0,0,4648,4650,3,1378,689,0,4649,4651,3,1234,617,0,4650,4649,1,0,
        0,0,4650,4651,1,0,0,0,4651,4656,1,0,0,0,4652,4654,3,1234,617,0,4653,
        4652,1,0,0,0,4653,4654,1,0,0,0,4654,4656,1,0,0,0,4655,4647,1,0,0,
        0,4655,4653,1,0,0,0,4656,4716,1,0,0,0,4657,4666,3,1222,611,0,4658,
        4660,3,1234,617,0,4659,4658,1,0,0,0,4659,4660,1,0,0,0,4660,4667,
        1,0,0,0,4661,4662,5,458,0,0,4662,4664,3,1378,689,0,4663,4665,3,1234,
        617,0,4664,4663,1,0,0,0,4664,4665,1,0,0,0,4665,4667,1,0,0,0,4666,
        4659,1,0,0,0,4666,4661,1,0,0,0,4667,4716,1,0,0,0,4668,4716,3,1224,
        612,0,4669,4671,3,1226,613,0,4670,4672,3,1234,617,0,4671,4670,1,
        0,0,0,4671,4672,1,0,0,0,4672,4716,1,0,0,0,4673,4682,3,1228,614,0,
        4674,4675,5,458,0,0,4675,4677,3,1378,689,0,4676,4678,3,1234,617,
        0,4677,4676,1,0,0,0,4677,4678,1,0,0,0,4678,4683,1,0,0,0,4679,4681,
        3,1234,617,0,4680,4679,1,0,0,0,4680,4681,1,0,0,0,4681,4683,1,0,0,
        0,4682,4674,1,0,0,0,4682,4680,1,0,0,0,4683,4716,1,0,0,0,4684,4686,
        3,1230,615,0,4685,4687,3,1234,617,0,4686,4685,1,0,0,0,4686,4687,
        1,0,0,0,4687,4716,1,0,0,0,4688,4690,3,1236,618,0,4689,4688,1,0,0,
        0,4689,4690,1,0,0,0,4690,4716,1,0,0,0,4691,4692,5,4,0,0,4692,4693,
        3,1240,620,0,4693,4698,3,1218,609,0,4694,4695,5,4,0,0,4695,4696,
        3,1240,620,0,4696,4697,3,1218,609,0,4697,4699,1,0,0,0,4698,4694,
        1,0,0,0,4698,4699,1,0,0,0,4699,4716,1,0,0,0,4700,4701,5,348,0,0,
        4701,4702,3,1240,620,0,4702,4707,3,1218,609,0,4703,4704,5,348,0,
        0,4704,4705,3,1240,620,0,4705,4706,3,1218,609,0,4706,4708,1,0,0,
        0,4707,4703,1,0,0,0,4707,4708,1,0,0,0,4708,4716,1,0,0,0,4709,4710,
        5,148,0,0,4710,4713,3,1240,620,0,4711,4712,5,148,0,0,4712,4714,3,
        1240,620,0,4713,4711,1,0,0,0,4713,4714,1,0,0,0,4714,4716,1,0,0,0,
        4715,4646,1,0,0,0,4715,4657,1,0,0,0,4715,4668,1,0,0,0,4715,4669,
        1,0,0,0,4715,4673,1,0,0,0,4715,4684,1,0,0,0,4715,4689,1,0,0,0,4715,
        4691,1,0,0,0,4715,4700,1,0,0,0,4715,4709,1,0,0,0,4716,4718,1,0,0,
        0,4717,4642,1,0,0,0,4717,4644,1,0,0,0,4718,599,1,0,0,0,4719,4720,
        3,1246,623,0,4720,4721,5,230,0,0,4721,4741,5,45,0,0,4722,4723,3,
        1380,690,0,4723,4724,5,458,0,0,4724,4726,3,1380,690,0,4725,4727,
        3,1234,617,0,4726,4725,1,0,0,0,4726,4727,1,0,0,0,4727,4742,1,0,0,
        0,4728,4730,3,1380,690,0,4729,4731,3,1234,617,0,4730,4729,1,0,0,
        0,4730,4731,1,0,0,0,4731,4742,1,0,0,0,4732,4733,5,734,0,0,4733,4736,
        5,406,0,0,4734,4735,5,458,0,0,4735,4737,3,1380,690,0,4736,4734,1,
        0,0,0,4736,4737,1,0,0,0,4737,4739,1,0,0,0,4738,4740,3,1234,617,0,
        4739,4738,1,0,0,0,4739,4740,1,0,0,0,4740,4742,1,0,0,0,4741,4722,
        1,0,0,0,4741,4728,1,0,0,0,4741,4732,1,0,0,0,4742,4777,1,0,0,0,4743,
        4744,3,1246,623,0,4744,4745,5,230,0,0,4745,4746,5,645,0,0,4746,4770,
        3,1406,703,0,4747,4748,5,45,0,0,4748,4749,3,1380,690,0,4749,4750,
        5,458,0,0,4750,4752,3,1380,690,0,4751,4753,3,1234,617,0,4752,4751,
        1,0,0,0,4752,4753,1,0,0,0,4753,4771,1,0,0,0,4754,4755,5,17,0,0,4755,
        4757,3,1382,691,0,4756,4758,3,1234,617,0,4757,4756,1,0,0,0,4757,
        4758,1,0,0,0,4758,4771,1,0,0,0,4759,4760,5,45,0,0,4760,4762,3,1380,
        690,0,4761,4763,3,1234,617,0,4762,4761,1,0,0,0,4762,4763,1,0,0,0,
        4763,4771,1,0,0,0,4764,4765,5,45,0,0,4765,4766,5,734,0,0,4766,4768,
        5,406,0,0,4767,4769,3,1234,617,0,4768,4767,1,0,0,0,4768,4769,1,0,
        0,0,4769,4771,1,0,0,0,4770,4747,1,0,0,0,4770,4754,1,0,0,0,4770,4759,
        1,0,0,0,4770,4764,1,0,0,0,4770,4771,1,0,0,0,4771,4777,1,0,0,0,4772,
        4774,3,1246,623,0,4773,4775,3,1236,618,0,4774,4773,1,0,0,0,4774,
        4775,1,0,0,0,4775,4777,1,0,0,0,4776,4719,1,0,0,0,4776,4743,1,0,0,
        0,4776,4772,1,0,0,0,4777,601,1,0,0,0,4778,4779,5,618,0,0,4779,4780,
        3,1414,707,0,4780,603,1,0,0,0,4781,4782,5,97,0,0,4782,4784,5,618,
        0,0,4783,4785,3,1180,590,0,4784,4783,1,0,0,0,4784,4785,1,0,0,0,4785,
        4786,1,0,0,0,4786,4788,3,1212,606,0,4787,4789,3,610,305,0,4788,4787,
        1,0,0,0,4788,4789,1,0,0,0,4789,4790,1,0,0,0,4790,4791,3,606,303,
        0,4791,605,1,0,0,0,4792,4794,3,612,306,0,4793,4792,1,0,0,0,4793,
        4794,1,0,0,0,4794,4796,1,0,0,0,4795,4797,3,614,307,0,4796,4795,1,
        0,0,0,4796,4797,1,0,0,0,4797,4801,1,0,0,0,4798,4800,3,616,308,0,
        4799,4798,1,0,0,0,4800,4803,1,0,0,0,4801,4799,1,0,0,0,4801,4802,
        1,0,0,0,4802,4806,1,0,0,0,4803,4801,1,0,0,0,4804,4805,4,303,41,0,
        4805,4807,3,608,304,0,4806,4804,1,0,0,0,4806,4807,1,0,0,0,4807,607,
        1,0,0,0,4808,4809,5,797,0,0,4809,4813,3,1378,689,0,4810,4811,5,75,
        0,0,4811,4813,3,1378,689,0,4812,4808,1,0,0,0,4812,4810,1,0,0,0,4813,
        609,1,0,0,0,4814,4815,5,128,0,0,4815,4816,5,659,0,0,4816,4817,3,
        656,328,0,4817,611,1,0,0,0,4818,4821,5,467,0,0,4819,4822,3,648,324,
        0,4820,4822,7,77,0,0,4821,4819,1,0,0,0,4821,4820,1,0,0,0,4822,613,
        1,0,0,0,4823,4832,5,645,0,0,4824,4825,5,322,0,0,4825,4833,3,1358,
        679,0,4826,4827,5,327,0,0,4827,4833,3,1358,679,0,4828,4829,5,321,
        0,0,4829,4833,3,1358,679,0,4830,4831,5,328,0,0,4831,4833,3,1358,
        679,0,4832,4824,1,0,0,0,4832,4826,1,0,0,0,4832,4828,1,0,0,0,4832,
        4830,1,0,0,0,4833,4834,1,0,0,0,4834,4832,1,0,0,0,4834,4835,1,0,0,
        0,4835,615,1,0,0,0,4836,4837,5,2,0,0,4837,4877,7,78,0,0,4838,4867,
        5,406,0,0,4839,4846,5,177,0,0,4840,4841,5,247,0,0,4841,4842,3,1360,
        680,0,4842,4843,5,122,0,0,4843,4847,1,0,0,0,4844,4847,5,365,0,0,
        4845,4847,5,128,0,0,4846,4840,1,0,0,0,4846,4844,1,0,0,0,4846,4845,
        1,0,0,0,4846,4847,1,0,0,0,4847,4868,1,0,0,0,4848,4851,5,705,0,0,
        4849,4852,3,1360,680,0,4850,4852,5,128,0,0,4851,4849,1,0,0,0,4851,
        4850,1,0,0,0,4852,4868,1,0,0,0,4853,4854,5,706,0,0,4854,4859,5,247,
        0,0,4855,4856,3,1360,680,0,4856,4857,5,122,0,0,4857,4860,1,0,0,0,
        4858,4860,5,128,0,0,4859,4855,1,0,0,0,4859,4858,1,0,0,0,4860,4868,
        1,0,0,0,4861,4862,4,308,42,0,4862,4863,5,467,0,0,4863,4865,5,101,
        0,0,4864,4866,7,79,0,0,4865,4864,1,0,0,0,4865,4866,1,0,0,0,4866,
        4868,1,0,0,0,4867,4839,1,0,0,0,4867,4848,1,0,0,0,4867,4853,1,0,0,
        0,4867,4861,1,0,0,0,4868,4877,1,0,0,0,4869,4870,5,741,0,0,4870,4877,
        3,1360,680,0,4871,4874,5,740,0,0,4872,4875,3,1360,680,0,4873,4875,
        5,698,0,0,4874,4872,1,0,0,0,4874,4873,1,0,0,0,4875,4877,1,0,0,0,
        4876,4836,1,0,0,0,4876,4838,1,0,0,0,4876,4869,1,0,0,0,4876,4871,
        1,0,0,0,4877,617,1,0,0,0,4878,4884,1,0,0,0,4879,4880,5,797,0,0,4880,
        4884,3,1378,689,0,4881,4882,5,75,0,0,4882,4884,3,1378,689,0,4883,
        4878,1,0,0,0,4883,4879,1,0,0,0,4883,4881,1,0,0,0,4884,619,1,0,0,
        0,4885,4886,5,148,0,0,4886,4888,5,618,0,0,4887,4889,3,1178,589,0,
        4888,4887,1,0,0,0,4888,4889,1,0,0,0,4889,4890,1,0,0,0,4890,4891,
        3,1210,605,0,4891,621,1,0,0,0,4892,4934,5,215,0,0,4893,4894,3,642,
        321,0,4894,4895,5,590,0,0,4895,4899,3,1210,605,0,4896,4897,5,645,
        0,0,4897,4898,5,660,0,0,4898,4900,5,391,0,0,4899,4896,1,0,0,0,4899,
        4900,1,0,0,0,4900,4935,1,0,0,0,4901,4907,3,642,321,0,4902,4904,5,
        10,0,0,4903,4905,5,421,0,0,4904,4903,1,0,0,0,4904,4905,1,0,0,0,4905,
        4907,1,0,0,0,4906,4901,1,0,0,0,4906,4902,1,0,0,0,4907,4908,1,0,0,
        0,4908,4910,5,383,0,0,4909,4911,3,640,320,0,4910,4909,1,0,0,0,4910,
        4911,1,0,0,0,4911,4912,1,0,0,0,4912,4913,3,646,323,0,4913,4914,5,
        590,0,0,4914,4916,3,624,312,0,4915,4917,3,634,317,0,4916,4915,1,
        0,0,0,4916,4917,1,0,0,0,4917,4919,1,0,0,0,4918,4920,3,626,313,0,
        4919,4918,1,0,0,0,4919,4920,1,0,0,0,4920,4922,1,0,0,0,4921,4923,
        3,632,316,0,4922,4921,1,0,0,0,4922,4923,1,0,0,0,4923,4935,1,0,0,
        0,4924,4925,5,427,0,0,4925,4926,5,383,0,0,4926,4927,3,1246,623,0,
        4927,4928,5,590,0,0,4928,4932,3,624,312,0,4929,4930,5,645,0,0,4930,
        4931,5,215,0,0,4931,4933,5,391,0,0,4932,4929,1,0,0,0,4932,4933,1,
        0,0,0,4933,4935,1,0,0,0,4934,4893,1,0,0,0,4934,4906,1,0,0,0,4934,
        4924,1,0,0,0,4935,623,1,0,0,0,4936,4937,4,312,43,0,4937,4941,3,1212,
        606,0,4938,4939,4,312,44,0,4939,4941,3,1210,605,0,4940,4936,1,0,
        0,0,4940,4938,1,0,0,0,4941,625,1,0,0,0,4942,4943,5,645,0,0,4943,
        4948,3,652,326,0,4944,4945,4,313,45,0,4945,4947,3,652,326,0,4946,
        4944,1,0,0,0,4947,4950,1,0,0,0,4948,4946,1,0,0,0,4948,4949,1,0,0,
        0,4949,627,1,0,0,0,4950,4948,1,0,0,0,4951,4952,5,663,0,0,4952,4953,
        3,656,328,0,4953,629,1,0,0,0,4954,4955,5,645,0,0,4955,4963,5,659,
        0,0,4956,4964,3,656,328,0,4957,4959,5,10,0,0,4958,4960,3,628,314,
        0,4959,4958,1,0,0,0,4959,4960,1,0,0,0,4960,4964,1,0,0,0,4961,4964,
        5,369,0,0,4962,4964,5,128,0,0,4963,4956,1,0,0,0,4963,4957,1,0,0,
        0,4963,4961,1,0,0,0,4963,4962,1,0,0,0,4964,631,1,0,0,0,4965,4966,
        5,17,0,0,4966,4968,5,618,0,0,4967,4969,3,630,315,0,4968,4967,1,0,
        0,0,4968,4969,1,0,0,0,4969,633,1,0,0,0,4970,4971,4,317,46,0,4971,
        4972,3,612,306,0,4972,635,1,0,0,0,4973,4974,5,453,0,0,4974,4975,
        5,618,0,0,4975,4976,3,1246,623,0,4976,4977,5,590,0,0,4977,4985,3,
        1246,623,0,4978,4979,5,773,0,0,4979,4980,3,1246,623,0,4980,4981,
        5,590,0,0,4981,4982,3,1246,623,0,4982,4984,1,0,0,0,4983,4978,1,0,
        0,0,4984,4987,1,0,0,0,4985,4983,1,0,0,0,4985,4986,1,0,0,0,4986,637,
        1,0,0,0,4987,4985,1,0,0,0,4988,4991,5,477,0,0,4989,4990,4,319,47,
        0,4990,4992,3,1178,589,0,4991,4989,1,0,0,0,4991,4992,1,0,0,0,4992,
        5028,1,0,0,0,4993,4994,3,642,321,0,4994,4995,5,203,0,0,4995,4996,
        3,1210,605,0,4996,5029,1,0,0,0,4997,4998,3,642,321,0,4998,5000,5,
        383,0,0,4999,5001,3,640,320,0,5000,4999,1,0,0,0,5000,5001,1,0,0,
        0,5001,5002,1,0,0,0,5002,5003,3,646,323,0,5003,5004,5,203,0,0,5004,
        5005,3,1210,605,0,5005,5029,1,0,0,0,5006,5008,5,10,0,0,5007,5009,
        5,421,0,0,5008,5007,1,0,0,0,5008,5009,1,0,0,0,5009,5018,1,0,0,0,
        5010,5012,5,383,0,0,5011,5013,3,640,320,0,5012,5011,1,0,0,0,5012,
        5013,1,0,0,0,5013,5014,1,0,0,0,5014,5019,3,646,323,0,5015,5016,5,
        773,0,0,5016,5017,5,215,0,0,5017,5019,5,391,0,0,5018,5010,1,0,0,
        0,5018,5015,1,0,0,0,5019,5020,1,0,0,0,5020,5021,5,203,0,0,5021,5029,
        3,1210,605,0,5022,5023,5,427,0,0,5023,5024,5,383,0,0,5024,5025,3,
        1246,623,0,5025,5026,5,203,0,0,5026,5027,3,1210,605,0,5027,5029,
        1,0,0,0,5028,4993,1,0,0,0,5028,4997,1,0,0,0,5028,5006,1,0,0,0,5028,
        5022,1,0,0,0,5029,5032,1,0,0,0,5030,5031,4,319,48,0,5031,5033,3,
        1182,591,0,5032,5030,1,0,0,0,5032,5033,1,0,0,0,5033,639,1,0,0,0,
        5034,5035,7,80,0,0,5035,641,1,0,0,0,5036,5041,3,644,322,0,5037,5038,
        5,773,0,0,5038,5040,3,644,322,0,5039,5037,1,0,0,0,5040,5043,1,0,
        0,0,5041,5039,1,0,0,0,5041,5042,1,0,0,0,5042,643,1,0,0,0,5043,5041,
        1,0,0,0,5044,5046,3,1410,705,0,5045,5047,3,1264,632,0,5046,5045,
        1,0,0,0,5046,5047,1,0,0,0,5047,5055,1,0,0,0,5048,5052,3,1410,705,
        0,5049,5053,5,784,0,0,5050,5051,5,783,0,0,5051,5053,3,1406,703,0,
        5052,5049,1,0,0,0,5052,5050,1,0,0,0,5053,5055,1,0,0,0,5054,5044,
        1,0,0,0,5054,5048,1,0,0,0,5055,5087,1,0,0,0,5056,5058,7,81,0,0,5057,
        5059,3,1264,632,0,5058,5057,1,0,0,0,5058,5059,1,0,0,0,5059,5087,
        1,0,0,0,5060,5087,7,82,0,0,5061,5062,5,215,0,0,5062,5087,5,391,0,
        0,5063,5064,5,509,0,0,5064,5087,5,110,0,0,5065,5069,5,97,0,0,5066,
        5067,5,577,0,0,5067,5070,5,571,0,0,5068,5070,7,83,0,0,5069,5066,
        1,0,0,0,5069,5068,1,0,0,0,5069,5070,1,0,0,0,5070,5087,1,0,0,0,5071,
        5072,5,287,0,0,5072,5087,5,571,0,0,5073,5076,5,459,0,0,5074,5077,
        5,65,0,0,5075,5077,3,578,289,0,5076,5074,1,0,0,0,5076,5075,1,0,0,
        0,5077,5087,1,0,0,0,5078,5079,5,509,0,0,5079,5087,5,636,0,0,5080,
        5082,5,11,0,0,5081,5083,5,483,0,0,5082,5081,1,0,0,0,5082,5083,1,
        0,0,0,5083,5087,1,0,0,0,5084,5085,7,84,0,0,5085,5087,5,659,0,0,5086,
        5054,1,0,0,0,5086,5056,1,0,0,0,5086,5060,1,0,0,0,5086,5061,1,0,0,
        0,5086,5063,1,0,0,0,5086,5065,1,0,0,0,5086,5071,1,0,0,0,5086,5073,
        1,0,0,0,5086,5078,1,0,0,0,5086,5080,1,0,0,0,5086,5084,1,0,0,0,5087,
        645,1,0,0,0,5088,5091,5,760,0,0,5089,5090,5,772,0,0,5090,5092,5,
        760,0,0,5091,5089,1,0,0,0,5091,5092,1,0,0,0,5092,5105,1,0,0,0,5093,
        5096,3,1278,639,0,5094,5095,5,772,0,0,5095,5097,5,760,0,0,5096,5094,
        1,0,0,0,5096,5097,1,0,0,0,5097,5105,1,0,0,0,5098,5105,3,1322,661,
        0,5099,5100,4,323,49,0,5100,5101,3,1278,639,0,5101,5102,5,772,0,
        0,5102,5103,3,1322,661,0,5103,5105,1,0,0,0,5104,5088,1,0,0,0,5104,
        5093,1,0,0,0,5104,5098,1,0,0,0,5104,5099,1,0,0,0,5105,647,1,0,0,
        0,5106,5113,3,650,325,0,5107,5109,5,15,0,0,5108,5107,1,0,0,0,5108,
        5109,1,0,0,0,5109,5110,1,0,0,0,5110,5112,3,650,325,0,5111,5108,1,
        0,0,0,5112,5115,1,0,0,0,5113,5111,1,0,0,0,5113,5114,1,0,0,0,5114,
        649,1,0,0,0,5115,5113,1,0,0,0,5116,5117,5,63,0,0,5117,5123,3,1380,
        690,0,5118,5119,5,259,0,0,5119,5123,3,1380,690,0,5120,5121,5,559,
        0,0,5121,5123,3,1380,690,0,5122,5116,1,0,0,0,5122,5118,1,0,0,0,5122,
        5120,1,0,0,0,5123,651,1,0,0,0,5124,5125,5,215,0,0,5125,5138,5,391,
        0,0,5126,5135,4,326,50,0,5127,5128,5,322,0,0,5128,5136,3,1358,679,
        0,5129,5130,5,327,0,0,5130,5136,3,1358,679,0,5131,5132,5,321,0,0,
        5132,5136,3,1358,679,0,5133,5134,5,328,0,0,5134,5136,3,1358,679,
        0,5135,5127,1,0,0,0,5135,5129,1,0,0,0,5135,5131,1,0,0,0,5135,5133,
        1,0,0,0,5136,5138,1,0,0,0,5137,5124,1,0,0,0,5137,5126,1,0,0,0,5138,
        653,1,0,0,0,5139,5140,5,506,0,0,5140,5141,5,659,0,0,5141,5163,3,
        656,328,0,5142,5143,5,506,0,0,5143,5144,5,659,0,0,5144,5163,7,85,
        0,0,5145,5146,5,506,0,0,5146,5147,5,128,0,0,5147,5151,5,659,0,0,
        5148,5152,3,656,328,0,5149,5152,5,369,0,0,5150,5152,5,10,0,0,5151,
        5148,1,0,0,0,5151,5149,1,0,0,0,5151,5150,1,0,0,0,5152,5153,1,0,0,
        0,5153,5154,5,590,0,0,5154,5163,3,656,328,0,5155,5156,5,506,0,0,
        5156,5157,5,659,0,0,5157,5160,5,10,0,0,5158,5159,5,663,0,0,5159,
        5161,3,656,328,0,5160,5158,1,0,0,0,5160,5161,1,0,0,0,5161,5163,1,
        0,0,0,5162,5139,1,0,0,0,5162,5142,1,0,0,0,5162,5145,1,0,0,0,5162,
        5155,1,0,0,0,5163,655,1,0,0,0,5164,5169,3,658,329,0,5165,5166,5,
        773,0,0,5166,5168,3,658,329,0,5167,5165,1,0,0,0,5168,5171,1,0,0,
        0,5169,5167,1,0,0,0,5169,5170,1,0,0,0,5170,657,1,0,0,0,5171,5169,
        1,0,0,0,5172,5174,3,1410,705,0,5173,5175,3,930,465,0,5174,5173,1,
        0,0,0,5174,5175,1,0,0,0,5175,659,1,0,0,0,5176,5178,5,14,0,0,5177,
        5179,3,1254,627,0,5178,5177,1,0,0,0,5178,5179,1,0,0,0,5179,5180,
        1,0,0,0,5180,5181,5,574,0,0,5181,5183,3,1324,662,0,5182,5184,3,662,
        331,0,5183,5182,1,0,0,0,5183,5184,1,0,0,0,5184,5219,1,0,0,0,5185,
        5186,5,62,0,0,5186,5187,5,574,0,0,5187,5191,3,1324,662,0,5188,5190,
        3,664,332,0,5189,5188,1,0,0,0,5190,5193,1,0,0,0,5191,5189,1,0,0,
        0,5191,5192,1,0,0,0,5192,5219,1,0,0,0,5193,5191,1,0,0,0,5194,5195,
        5,61,0,0,5195,5196,5,574,0,0,5196,5198,3,1324,662,0,5197,5199,7,
        86,0,0,5198,5197,1,0,0,0,5198,5199,1,0,0,0,5199,5219,1,0,0,0,5200,
        5202,5,388,0,0,5201,5203,3,1254,627,0,5202,5201,1,0,0,0,5202,5203,
        1,0,0,0,5203,5204,1,0,0,0,5204,5205,5,574,0,0,5205,5219,3,1324,662,
        0,5206,5208,5,455,0,0,5207,5209,3,1254,627,0,5208,5207,1,0,0,0,5208,
        5209,1,0,0,0,5209,5210,1,0,0,0,5210,5211,5,574,0,0,5211,5215,3,1324,
        662,0,5212,5214,3,666,333,0,5213,5212,1,0,0,0,5214,5217,1,0,0,0,
        5215,5213,1,0,0,0,5215,5216,1,0,0,0,5216,5219,1,0,0,0,5217,5215,
        1,0,0,0,5218,5176,1,0,0,0,5218,5185,1,0,0,0,5218,5194,1,0,0,0,5218,
        5200,1,0,0,0,5218,5206,1,0,0,0,5219,661,1,0,0,0,5220,5221,5,614,
        0,0,5221,5222,5,674,0,0,5222,5223,5,383,0,0,5223,5231,3,1348,674,
        0,5224,5225,5,645,0,0,5225,5226,5,747,0,0,5226,5232,5,675,0,0,5227,
        5228,4,331,51,0,5228,5229,5,621,0,0,5229,5230,5,112,0,0,5230,5232,
        3,1378,689,0,5231,5224,1,0,0,0,5231,5227,1,0,0,0,5231,5232,1,0,0,
        0,5232,5238,1,0,0,0,5233,5234,5,148,0,0,5234,5235,5,674,0,0,5235,
        5236,5,383,0,0,5236,5238,3,1348,674,0,5237,5220,1,0,0,0,5237,5233,
        1,0,0,0,5238,663,1,0,0,0,5239,5240,5,200,0,0,5240,5243,5,615,0,0,
        5241,5243,7,87,0,0,5242,5239,1,0,0,0,5242,5241,1,0,0,0,5243,665,
        1,0,0,0,5244,5245,7,88,0,0,5245,667,1,0,0,0,5246,5247,5,245,0,0,
        5247,5248,5,410,0,0,5248,5249,3,1346,673,0,5249,5250,5,520,0,0,5250,
        5251,3,1378,689,0,5251,5269,1,0,0,0,5252,5253,5,245,0,0,5253,5254,
        5,664,0,0,5254,5269,3,1388,694,0,5255,5256,5,607,0,0,5256,5257,5,
        410,0,0,5257,5269,3,1336,668,0,5258,5259,5,607,0,0,5259,5260,5,664,
        0,0,5260,5265,3,1338,669,0,5261,5262,5,773,0,0,5262,5264,3,1338,
        669,0,5263,5261,1,0,0,0,5264,5267,1,0,0,0,5265,5263,1,0,0,0,5265,
        5266,1,0,0,0,5266,5269,1,0,0,0,5267,5265,1,0,0,0,5268,5246,1,0,0,
        0,5268,5252,1,0,0,0,5268,5255,1,0,0,0,5268,5258,1,0,0,0,5269,669,
        1,0,0,0,5270,5271,5,506,0,0,5271,5272,3,672,336,0,5272,671,1,0,0,
        0,5273,5274,3,682,341,0,5274,5275,3,680,340,0,5275,5324,1,0,0,0,
        5276,5277,5,592,0,0,5277,5324,3,674,337,0,5278,5279,3,1418,709,0,
        5279,5280,3,688,344,0,5280,5324,1,0,0,0,5281,5284,5,406,0,0,5282,
        5283,5,200,0,0,5283,5285,3,1246,623,0,5284,5282,1,0,0,0,5284,5285,
        1,0,0,0,5285,5286,1,0,0,0,5286,5307,3,1416,708,0,5287,5289,3,1380,
        690,0,5288,5290,3,1242,621,0,5289,5288,1,0,0,0,5289,5290,1,0,0,0,
        5290,5292,1,0,0,0,5291,5293,3,1234,617,0,5292,5291,1,0,0,0,5292,
        5293,1,0,0,0,5293,5308,1,0,0,0,5294,5296,3,1380,690,0,5295,5297,
        3,1242,621,0,5296,5295,1,0,0,0,5296,5297,1,0,0,0,5297,5299,1,0,0,
        0,5298,5300,3,1234,617,0,5299,5298,1,0,0,0,5299,5300,1,0,0,0,5300,
        5308,1,0,0,0,5301,5302,4,336,52,0,5302,5303,5,406,0,0,5303,5304,
        5,776,0,0,5304,5305,3,1380,690,0,5305,5306,5,777,0,0,5306,5308,1,
        0,0,0,5307,5287,1,0,0,0,5307,5294,1,0,0,0,5307,5301,1,0,0,0,5308,
        5324,1,0,0,0,5309,5310,4,336,53,0,5310,5313,5,406,0,0,5311,5312,
        5,200,0,0,5312,5314,3,1246,623,0,5313,5311,1,0,0,0,5313,5314,1,0,
        0,0,5314,5315,1,0,0,0,5315,5316,5,590,0,0,5316,5318,5,734,0,0,5317,
        5319,3,1242,621,0,5318,5317,1,0,0,0,5318,5319,1,0,0,0,5319,5321,
        1,0,0,0,5320,5322,3,1234,617,0,5321,5320,1,0,0,0,5321,5322,1,0,0,
        0,5322,5324,1,0,0,0,5323,5273,1,0,0,0,5323,5276,1,0,0,0,5323,5278,
        1,0,0,0,5323,5281,1,0,0,0,5323,5309,1,0,0,0,5324,673,1,0,0,0,5325,
        5327,3,676,338,0,5326,5328,3,678,339,0,5327,5326,1,0,0,0,5327,5328,
        1,0,0,0,5328,5335,1,0,0,0,5329,5332,3,678,339,0,5330,5331,5,773,
        0,0,5331,5333,3,676,338,0,5332,5330,1,0,0,0,5332,5333,1,0,0,0,5333,
        5335,1,0,0,0,5334,5325,1,0,0,0,5334,5329,1,0,0,0,5335,675,1,0,0,
        0,5336,5337,5,435,0,0,5337,5338,7,40,0,0,5338,677,1,0,0,0,5339,5340,
        5,258,0,0,5340,5346,5,274,0,0,5341,5342,5,456,0,0,5342,5347,5,435,
        0,0,5343,5344,5,435,0,0,5344,5347,7,89,0,0,5345,5347,5,500,0,0,5346,
        5341,1,0,0,0,5346,5343,1,0,0,0,5346,5345,1,0,0,0,5347,679,1,0,0,
        0,5348,5349,5,773,0,0,5349,5351,3,684,342,0,5350,5348,1,0,0,0,5351,
        5354,1,0,0,0,5352,5350,1,0,0,0,5352,5353,1,0,0,0,5353,681,1,0,0,
        0,5354,5352,1,0,0,0,5355,5356,3,936,468,0,5356,5357,3,1416,708,0,
        5357,5358,3,692,346,0,5358,5385,1,0,0,0,5359,5385,3,1200,600,0,5360,
        5361,3,930,465,0,5361,5362,3,1416,708,0,5362,5363,3,860,430,0,5363,
        5385,1,0,0,0,5364,5366,5,785,0,0,5365,5367,3,1422,711,0,5366,5365,
        1,0,0,0,5366,5367,1,0,0,0,5367,5368,1,0,0,0,5368,5369,3,936,468,
        0,5369,5370,3,1416,708,0,5370,5371,3,692,346,0,5371,5385,1,0,0,0,
        5372,5382,5,356,0,0,5373,5374,3,1416,708,0,5374,5375,3,860,430,0,
        5375,5383,1,0,0,0,5376,5378,3,1132,566,0,5377,5379,3,1188,594,0,
        5378,5377,1,0,0,0,5378,5379,1,0,0,0,5379,5383,1,0,0,0,5380,5381,
        4,341,54,0,5381,5383,5,128,0,0,5382,5373,1,0,0,0,5382,5376,1,0,0,
        0,5382,5380,1,0,0,0,5383,5385,1,0,0,0,5384,5355,1,0,0,0,5384,5359,
        1,0,0,0,5384,5360,1,0,0,0,5384,5364,1,0,0,0,5384,5372,1,0,0,0,5385,
        683,1,0,0,0,5386,5387,3,1418,709,0,5387,5388,3,936,468,0,5388,5389,
        3,1416,708,0,5389,5390,3,692,346,0,5390,5393,1,0,0,0,5391,5393,3,
        682,341,0,5392,5386,1,0,0,0,5392,5391,1,0,0,0,5393,685,1,0,0,0,5394,
        5396,5,785,0,0,5395,5397,3,1422,711,0,5396,5395,1,0,0,0,5396,5397,
        1,0,0,0,5397,5398,1,0,0,0,5398,5399,3,936,468,0,5399,687,1,0,0,0,
        5400,5401,3,690,345,0,5401,5402,3,680,340,0,5402,5406,1,0,0,0,5403,
        5404,5,592,0,0,5404,5406,3,674,337,0,5405,5400,1,0,0,0,5405,5403,
        1,0,0,0,5406,689,1,0,0,0,5407,5408,3,936,468,0,5408,5409,3,1416,
        708,0,5409,5410,3,692,346,0,5410,691,1,0,0,0,5411,5419,3,860,430,
        0,5412,5419,5,128,0,0,5413,5419,5,383,0,0,5414,5419,5,10,0,0,5415,
        5419,5,32,0,0,5416,5419,5,487,0,0,5417,5419,5,710,0,0,5418,5411,
        1,0,0,0,5418,5412,1,0,0,0,5418,5413,1,0,0,0,5418,5414,1,0,0,0,5418,
        5415,1,0,0,0,5418,5416,1,0,0,0,5418,5417,1,0,0,0,5419,693,1,0,0,
        0,5420,5421,5,509,0,0,5421,5423,5,110,0,0,5422,5424,3,1250,625,0,
        5423,5422,1,0,0,0,5423,5424,1,0,0,0,5424,695,1,0,0,0,5425,5427,5,
        509,0,0,5426,5428,3,782,391,0,5427,5426,1,0,0,0,5427,5428,1,0,0,
        0,5428,5429,1,0,0,0,5429,5431,5,571,0,0,5430,5432,3,788,394,0,5431,
        5430,1,0,0,0,5431,5432,1,0,0,0,5432,5434,1,0,0,0,5433,5435,3,1250,
        625,0,5434,5433,1,0,0,0,5434,5435,1,0,0,0,5435,697,1,0,0,0,5436,
        5438,5,509,0,0,5437,5439,5,204,0,0,5438,5437,1,0,0,0,5438,5439,1,
        0,0,0,5439,5440,1,0,0,0,5440,5442,5,593,0,0,5441,5443,3,788,394,
        0,5442,5441,1,0,0,0,5442,5443,1,0,0,0,5443,5445,1,0,0,0,5444,5446,
        3,1250,625,0,5445,5444,1,0,0,0,5445,5446,1,0,0,0,5446,699,1,0,0,
        0,5447,5448,5,509,0,0,5448,5450,5,169,0,0,5449,5451,3,788,394,0,
        5450,5449,1,0,0,0,5450,5451,1,0,0,0,5451,5453,1,0,0,0,5452,5454,
        3,1250,625,0,5453,5452,1,0,0,0,5453,5454,1,0,0,0,5454,701,1,0,0,
        0,5455,5456,5,509,0,0,5456,5457,5,574,0,0,5457,5459,5,547,0,0,5458,
        5460,3,788,394,0,5459,5458,1,0,0,0,5459,5460,1,0,0,0,5460,5462,1,
        0,0,0,5461,5463,3,1250,625,0,5462,5461,1,0,0,0,5462,5463,1,0,0,0,
        5463,703,1,0,0,0,5464,5465,5,509,0,0,5465,5466,5,387,0,0,5466,5468,
        5,571,0,0,5467,5469,3,788,394,0,5468,5467,1,0,0,0,5468,5469,1,0,
        0,0,5469,5471,1,0,0,0,5470,5472,3,1250,625,0,5471,5470,1,0,0,0,5471,
        5472,1,0,0,0,5472,705,1,0,0,0,5473,5474,5,509,0,0,5474,5475,5,408,
        0,0,5475,707,1,0,0,0,5476,5477,5,509,0,0,5477,5478,5,163,0,0,5478,
        5479,3,784,392,0,5479,5480,5,289,0,0,5480,709,1,0,0,0,5481,5482,
        5,509,0,0,5482,5483,5,163,0,0,5483,5484,3,784,392,0,5484,5485,5,
        354,0,0,5485,711,1,0,0,0,5486,5487,5,509,0,0,5487,5488,5,163,0,0,
        5488,5489,3,784,392,0,5489,5490,5,547,0,0,5490,713,1,0,0,0,5491,
        5493,5,509,0,0,5492,5494,3,782,391,0,5493,5492,1,0,0,0,5493,5494,
        1,0,0,0,5494,5495,1,0,0,0,5495,5496,5,71,0,0,5496,5497,7,90,0,0,
        5497,5499,3,1322,661,0,5498,5500,3,788,394,0,5499,5498,1,0,0,0,5499,
        5500,1,0,0,0,5500,5502,1,0,0,0,5501,5503,3,1250,625,0,5502,5501,
        1,0,0,0,5502,5503,1,0,0,0,5503,715,1,0,0,0,5504,5505,5,509,0,0,5505,
        5506,7,44,0,0,5506,5507,5,289,0,0,5507,717,1,0,0,0,5508,5513,5,509,
        0,0,5509,5510,3,578,289,0,5510,5511,5,225,0,0,5511,5514,1,0,0,0,
        5512,5514,5,804,0,0,5513,5509,1,0,0,0,5513,5512,1,0,0,0,5514,719,
        1,0,0,0,5515,5516,5,509,0,0,5516,5517,5,33,0,0,5517,5520,5,169,0,
        0,5518,5519,5,251,0,0,5519,5521,3,1380,690,0,5520,5518,1,0,0,0,5520,
        5521,1,0,0,0,5521,5524,1,0,0,0,5522,5523,5,203,0,0,5523,5525,3,1362,
        681,0,5524,5522,1,0,0,0,5524,5525,1,0,0,0,5525,5527,1,0,0,0,5526,
        5528,3,294,147,0,5527,5526,1,0,0,0,5527,5528,1,0,0,0,5528,5530,1,
        0,0,0,5529,5531,3,974,487,0,5530,5529,1,0,0,0,5530,5531,1,0,0,0,
        5531,721,1,0,0,0,5532,5533,5,509,0,0,5533,5534,5,446,0,0,5534,5537,
        5,169,0,0,5535,5536,5,251,0,0,5536,5538,3,1380,690,0,5537,5535,1,
        0,0,0,5537,5538,1,0,0,0,5538,5541,1,0,0,0,5539,5540,5,203,0,0,5540,
        5542,3,1362,681,0,5541,5539,1,0,0,0,5541,5542,1,0,0,0,5542,5544,
        1,0,0,0,5543,5545,3,294,147,0,5544,5543,1,0,0,0,5544,5545,1,0,0,
        0,5545,5547,1,0,0,0,5546,5548,3,974,487,0,5547,5546,1,0,0,0,5547,
        5548,1,0,0,0,5548,723,1,0,0,0,5549,5551,5,509,0,0,5550,5552,5,180,
        0,0,5551,5550,1,0,0,0,5551,5552,1,0,0,0,5552,5553,1,0,0,0,5553,5554,
        7,91,0,0,5554,5555,3,786,393,0,5555,5557,3,1322,661,0,5556,5558,
        3,788,394,0,5557,5556,1,0,0,0,5557,5558,1,0,0,0,5558,5560,1,0,0,
        0,5559,5561,3,368,184,0,5560,5559,1,0,0,0,5560,5561,1,0,0,0,5561,
        725,1,0,0,0,5562,5564,5,509,0,0,5563,5565,5,553,0,0,5564,5563,1,
        0,0,0,5564,5565,1,0,0,0,5565,5566,1,0,0,0,5566,5567,5,162,0,0,5567,
        727,1,0,0,0,5568,5569,5,509,0,0,5569,5570,5,95,0,0,5570,5571,5,776,
        0,0,5571,5572,5,760,0,0,5572,5573,5,777,0,0,5573,5574,5,639,0,0,
        5574,729,1,0,0,0,5575,5576,5,509,0,0,5576,5577,5,95,0,0,5577,5578,
        5,776,0,0,5578,5579,5,760,0,0,5579,5580,5,777,0,0,5580,5581,5,166,
        0,0,5581,731,1,0,0,0,5582,5583,5,509,0,0,5583,5585,5,639,0,0,5584,
        5586,3,294,147,0,5585,5584,1,0,0,0,5585,5586,1,0,0,0,5586,733,1,
        0,0,0,5587,5588,5,509,0,0,5588,5590,5,166,0,0,5589,5591,3,294,147,
        0,5590,5589,1,0,0,0,5590,5591,1,0,0,0,5591,735,1,0,0,0,5592,5593,
        5,509,0,0,5593,5594,5,426,0,0,5594,737,1,0,0,0,5595,5596,5,509,0,
        0,5596,5598,5,425,0,0,5597,5599,3,790,395,0,5598,5597,1,0,0,0,5598,
        5599,1,0,0,0,5599,5603,1,0,0,0,5600,5601,5,200,0,0,5601,5602,5,430,
        0,0,5602,5604,5,747,0,0,5603,5600,1,0,0,0,5603,5604,1,0,0,0,5604,
        5606,1,0,0,0,5605,5607,3,294,147,0,5606,5605,1,0,0,0,5606,5607,1,
        0,0,0,5607,739,1,0,0,0,5608,5610,5,509,0,0,5609,5611,3,1418,709,
        0,5610,5609,1,0,0,0,5610,5611,1,0,0,0,5611,5612,1,0,0,0,5612,5614,
        5,547,0,0,5613,5615,3,1250,625,0,5614,5613,1,0,0,0,5614,5615,1,0,
        0,0,5615,741,1,0,0,0,5616,5618,5,509,0,0,5617,5619,5,204,0,0,5618,
        5617,1,0,0,0,5618,5619,1,0,0,0,5619,5620,1,0,0,0,5620,5621,5,424,
        0,0,5621,743,1,0,0,0,5622,5624,5,509,0,0,5623,5625,3,1418,709,0,
        5624,5623,1,0,0,0,5624,5625,1,0,0,0,5625,5626,1,0,0,0,5626,5628,
        5,631,0,0,5627,5629,3,1250,625,0,5628,5627,1,0,0,0,5628,5629,1,0,
        0,0,5629,745,1,0,0,0,5630,5631,5,509,0,0,5631,5633,3,950,475,0,5632,
        5634,3,1250,625,0,5633,5632,1,0,0,0,5633,5634,1,0,0,0,5634,747,1,
        0,0,0,5635,5636,5,509,0,0,5636,5638,5,70,0,0,5637,5639,3,1250,625,
        0,5638,5637,1,0,0,0,5638,5639,1,0,0,0,5639,749,1,0,0,0,5640,5641,
        5,509,0,0,5641,5642,5,421,0,0,5642,751,1,0,0,0,5643,5644,5,509,0,
        0,5644,5651,5,216,0,0,5645,5646,5,200,0,0,5646,5649,3,1246,623,0,
        5647,5648,5,621,0,0,5648,5650,3,1210,605,0,5649,5647,1,0,0,0,5649,
        5650,1,0,0,0,5650,5652,1,0,0,0,5651,5645,1,0,0,0,5651,5652,1,0,0,
        0,5652,753,1,0,0,0,5653,5654,5,509,0,0,5654,5655,5,97,0,0,5655,5657,
        5,109,0,0,5656,5658,3,1180,590,0,5657,5656,1,0,0,0,5657,5658,1,0,
        0,0,5658,5659,1,0,0,0,5659,5660,3,1278,639,0,5660,755,1,0,0,0,5661,
        5662,5,509,0,0,5662,5663,5,97,0,0,5663,5664,5,574,0,0,5664,5665,
        3,1322,661,0,5665,757,1,0,0,0,5666,5667,5,509,0,0,5667,5668,5,97,
        0,0,5668,5669,5,636,0,0,5669,5670,3,1294,647,0,5670,759,1,0,0,0,
        5671,5672,5,509,0,0,5672,5673,5,316,0,0,5673,5674,5,547,0,0,5674,
        761,1,0,0,0,5675,5676,5,509,0,0,5676,5677,3,578,289,0,5677,5679,
        5,547,0,0,5678,5680,3,974,487,0,5679,5678,1,0,0,0,5679,5680,1,0,
        0,0,5680,763,1,0,0,0,5681,5682,5,509,0,0,5682,5683,5,97,0,0,5683,
        5684,5,422,0,0,5684,5685,3,1282,641,0,5685,765,1,0,0,0,5686,5687,
        5,509,0,0,5687,5688,5,97,0,0,5688,5689,5,206,0,0,5689,5690,3,1286,
        643,0,5690,767,1,0,0,0,5691,5692,5,509,0,0,5692,5693,5,97,0,0,5693,
        5694,5,594,0,0,5694,5695,3,1290,645,0,5695,769,1,0,0,0,5696,5697,
        5,509,0,0,5697,5698,5,97,0,0,5698,5699,5,422,0,0,5699,5701,5,547,
        0,0,5700,5702,3,1250,625,0,5701,5700,1,0,0,0,5701,5702,1,0,0,0,5702,
        771,1,0,0,0,5703,5704,5,509,0,0,5704,5705,5,97,0,0,5705,5706,5,206,
        0,0,5706,5708,5,547,0,0,5707,5709,3,1250,625,0,5708,5707,1,0,0,0,
        5708,5709,1,0,0,0,5709,773,1,0,0,0,5710,5711,5,509,0,0,5711,5712,
        5,97,0,0,5712,5713,5,422,0,0,5713,5714,5,68,0,0,5714,5715,3,1282,
        641,0,5715,775,1,0,0,0,5716,5717,5,509,0,0,5717,5718,5,97,0,0,5718,
        5719,5,206,0,0,5719,5720,5,68,0,0,5720,5721,3,1286,643,0,5721,777,
        1,0,0,0,5722,5723,5,509,0,0,5723,5724,5,97,0,0,5724,5725,5,170,0,
        0,5725,5726,3,1306,653,0,5726,779,1,0,0,0,5727,5728,5,509,0,0,5728,
        5729,5,97,0,0,5729,5730,5,618,0,0,5730,5731,3,1246,623,0,5731,781,
        1,0,0,0,5732,5738,5,204,0,0,5733,5735,5,180,0,0,5734,5736,5,204,
        0,0,5735,5734,1,0,0,0,5735,5736,1,0,0,0,5736,5738,1,0,0,0,5737,5732,
        1,0,0,0,5737,5733,1,0,0,0,5738,783,1,0,0,0,5739,5742,3,1314,657,
        0,5740,5742,5,10,0,0,5741,5739,1,0,0,0,5741,5740,1,0,0,0,5742,785,
        1,0,0,0,5743,5744,7,90,0,0,5744,787,1,0,0,0,5745,5746,3,786,393,
        0,5746,5747,3,1346,673,0,5747,789,1,0,0,0,5748,5753,3,792,396,0,
        5749,5750,5,773,0,0,5750,5752,3,792,396,0,5751,5749,1,0,0,0,5752,
        5755,1,0,0,0,5753,5751,1,0,0,0,5753,5754,1,0,0,0,5754,791,1,0,0,
        0,5755,5753,1,0,0,0,5756,5757,5,40,0,0,5757,5764,5,255,0,0,5758,
        5759,5,91,0,0,5759,5764,5,568,0,0,5760,5761,5,400,0,0,5761,5764,
        5,185,0,0,5762,5764,7,92,0,0,5763,5756,1,0,0,0,5763,5758,1,0,0,0,
        5763,5760,1,0,0,0,5763,5762,1,0,0,0,5764,793,1,0,0,0,5765,5766,5,
        33,0,0,5766,5802,3,1384,692,0,5767,5768,5,47,0,0,5768,5769,5,236,
        0,0,5769,5770,3,796,398,0,5770,5773,5,251,0,0,5771,5774,3,1346,673,
        0,5772,5774,5,128,0,0,5773,5771,1,0,0,0,5773,5772,1,0,0,0,5774,5802,
        1,0,0,0,5775,5777,5,196,0,0,5776,5778,3,1254,627,0,5777,5776,1,0,
        0,0,5777,5778,1,0,0,0,5778,5788,1,0,0,0,5779,5789,3,814,407,0,5780,
        5785,3,810,405,0,5781,5782,5,773,0,0,5782,5784,3,810,405,0,5783,
        5781,1,0,0,0,5784,5787,1,0,0,0,5785,5783,1,0,0,0,5785,5786,1,0,0,
        0,5786,5789,1,0,0,0,5787,5785,1,0,0,0,5788,5779,1,0,0,0,5788,5780,
        1,0,0,0,5789,5802,1,0,0,0,5790,5792,5,266,0,0,5791,5793,7,93,0,0,
        5792,5791,1,0,0,0,5792,5793,1,0,0,0,5793,5794,1,0,0,0,5794,5802,
        3,860,430,0,5795,5796,5,281,0,0,5796,5797,5,236,0,0,5797,5798,5,
        248,0,0,5798,5799,5,47,0,0,5799,5802,3,818,409,0,5800,5802,5,510,
        0,0,5801,5765,1,0,0,0,5801,5767,1,0,0,0,5801,5775,1,0,0,0,5801,5790,
        1,0,0,0,5801,5795,1,0,0,0,5801,5800,1,0,0,0,5802,795,1,0,0,0,5803,
        5806,3,798,399,0,5804,5806,3,802,401,0,5805,5803,1,0,0,0,5805,5804,
        1,0,0,0,5806,797,1,0,0,0,5807,5812,3,800,400,0,5808,5809,5,773,0,
        0,5809,5811,3,800,400,0,5810,5808,1,0,0,0,5811,5814,1,0,0,0,5812,
        5810,1,0,0,0,5812,5813,1,0,0,0,5813,799,1,0,0,0,5814,5812,1,0,0,
        0,5815,5817,3,1322,661,0,5816,5818,3,804,402,0,5817,5816,1,0,0,0,
        5817,5818,1,0,0,0,5818,801,1,0,0,0,5819,5820,3,1322,661,0,5820,5821,
        5,405,0,0,5821,5822,5,776,0,0,5822,5823,3,54,27,0,5823,5825,5,777,
        0,0,5824,5826,3,804,402,0,5825,5824,1,0,0,0,5825,5826,1,0,0,0,5826,
        803,1,0,0,0,5827,5828,3,418,209,0,5828,5830,5,776,0,0,5829,5831,
        3,808,404,0,5830,5829,1,0,0,0,5830,5831,1,0,0,0,5831,5832,1,0,0,
        0,5832,5833,5,777,0,0,5833,805,1,0,0,0,5834,5837,3,1346,673,0,5835,
        5837,5,420,0,0,5836,5834,1,0,0,0,5836,5835,1,0,0,0,5837,807,1,0,
        0,0,5838,5843,3,806,403,0,5839,5840,5,773,0,0,5840,5842,3,806,403,
        0,5841,5839,1,0,0,0,5842,5845,1,0,0,0,5843,5841,1,0,0,0,5843,5844,
        1,0,0,0,5844,809,1,0,0,0,5845,5843,1,0,0,0,5846,5858,7,94,0,0,5847,
        5849,3,812,406,0,5848,5847,1,0,0,0,5848,5849,1,0,0,0,5849,5850,1,
        0,0,0,5850,5858,5,289,0,0,5851,5852,5,445,0,0,5852,5854,5,289,0,
        0,5853,5855,3,974,487,0,5854,5853,1,0,0,0,5854,5855,1,0,0,0,5855,
        5858,1,0,0,0,5856,5858,5,389,0,0,5857,5846,1,0,0,0,5857,5848,1,0,
        0,0,5857,5851,1,0,0,0,5857,5856,1,0,0,0,5858,811,1,0,0,0,5859,5860,
        7,95,0,0,5860,813,1,0,0,0,5861,5869,7,17,0,0,5862,5863,5,645,0,0,
        5863,5864,5,435,0,0,5864,5870,5,287,0,0,5865,5867,3,1348,674,0,5866,
        5868,3,816,408,0,5867,5866,1,0,0,0,5867,5868,1,0,0,0,5868,5870,1,
        0,0,0,5869,5862,1,0,0,0,5869,5865,1,0,0,0,5869,5870,1,0,0,0,5870,
        815,1,0,0,0,5871,5872,5,200,0,0,5872,5877,5,179,0,0,5873,5874,5,
        645,0,0,5874,5875,5,435,0,0,5875,5877,5,287,0,0,5876,5871,1,0,0,
        0,5876,5873,1,0,0,0,5877,817,1,0,0,0,5878,5879,3,1322,661,0,5879,
        5881,3,824,412,0,5880,5882,3,804,402,0,5881,5880,1,0,0,0,5881,5882,
        1,0,0,0,5882,5885,1,0,0,0,5883,5884,5,232,0,0,5884,5886,5,270,0,
        0,5885,5883,1,0,0,0,5885,5886,1,0,0,0,5886,5889,1,0,0,0,5887,5889,
        3,820,410,0,5888,5878,1,0,0,0,5888,5887,1,0,0,0,5889,819,1,0,0,0,
        5890,5895,3,822,411,0,5891,5892,5,773,0,0,5892,5894,3,822,411,0,
        5893,5891,1,0,0,0,5894,5897,1,0,0,0,5895,5893,1,0,0,0,5895,5896,
        1,0,0,0,5896,821,1,0,0,0,5897,5895,1,0,0,0,5898,5900,3,1322,661,
        0,5899,5901,3,804,402,0,5900,5899,1,0,0,0,5900,5901,1,0,0,0,5901,
        5904,1,0,0,0,5902,5903,5,232,0,0,5903,5905,5,270,0,0,5904,5902,1,
        0,0,0,5904,5905,1,0,0,0,5905,823,1,0,0,0,5906,5907,5,405,0,0,5907,
        5908,5,776,0,0,5908,5909,3,54,27,0,5909,5910,5,777,0,0,5910,825,
        1,0,0,0,5911,5916,3,828,414,0,5912,5916,3,838,419,0,5913,5916,3,
        840,420,0,5914,5916,3,844,422,0,5915,5911,1,0,0,0,5915,5912,1,0,
        0,0,5915,5913,1,0,0,0,5915,5914,1,0,0,0,5916,827,1,0,0,0,5917,5918,
        5,97,0,0,5918,5919,5,709,0,0,5919,5920,5,217,0,0,5920,5921,3,1346,
        673,0,5921,5923,5,599,0,0,5922,5924,3,1416,708,0,5923,5922,1,0,0,
        0,5923,5924,1,0,0,0,5924,5925,1,0,0,0,5925,5927,7,96,0,0,5926,5928,
        3,830,415,0,5927,5926,1,0,0,0,5927,5928,1,0,0,0,5928,5930,1,0,0,
        0,5929,5931,3,834,417,0,5930,5929,1,0,0,0,5930,5931,1,0,0,0,5931,
        5933,1,0,0,0,5932,5934,3,836,418,0,5933,5932,1,0,0,0,5933,5934,1,
        0,0,0,5934,829,1,0,0,0,5935,5937,5,711,0,0,5936,5938,3,1416,708,
        0,5937,5936,1,0,0,0,5937,5938,1,0,0,0,5938,5939,1,0,0,0,5939,5946,
        3,832,416,0,5940,5942,5,773,0,0,5941,5940,1,0,0,0,5941,5942,1,0,
        0,0,5942,5943,1,0,0,0,5943,5945,3,832,416,0,5944,5941,1,0,0,0,5945,
        5948,1,0,0,0,5946,5944,1,0,0,0,5946,5947,1,0,0,0,5947,831,1,0,0,
        0,5948,5946,1,0,0,0,5949,5952,5,747,0,0,5950,5951,5,759,0,0,5951,
        5953,5,747,0,0,5952,5950,1,0,0,0,5952,5953,1,0,0,0,5953,833,1,0,
        0,0,5954,5956,5,708,0,0,5955,5957,3,1416,708,0,5956,5955,1,0,0,0,
        5956,5957,1,0,0,0,5957,5958,1,0,0,0,5958,5959,5,747,0,0,5959,835,
        1,0,0,0,5960,5961,7,7,0,0,5961,837,1,0,0,0,5962,5963,5,11,0,0,5963,
        5964,5,709,0,0,5964,5965,5,217,0,0,5965,5967,3,1340,670,0,5966,5968,
        3,830,415,0,5967,5966,1,0,0,0,5967,5968,1,0,0,0,5968,5970,1,0,0,
        0,5969,5971,3,834,417,0,5970,5969,1,0,0,0,5970,5971,1,0,0,0,5971,
        5973,1,0,0,0,5972,5974,3,836,418,0,5973,5972,1,0,0,0,5973,5974,1,
        0,0,0,5974,5976,1,0,0,0,5975,5977,5,198,0,0,5976,5975,1,0,0,0,5976,
        5977,1,0,0,0,5977,839,1,0,0,0,5978,5979,5,506,0,0,5979,5980,5,709,
        0,0,5980,5981,5,217,0,0,5981,5984,3,1346,673,0,5982,5983,5,200,0,
        0,5983,5985,3,842,421,0,5984,5982,1,0,0,0,5984,5985,1,0,0,0,5985,
        841,1,0,0,0,5986,5993,3,1360,680,0,5987,5989,5,773,0,0,5988,5987,
        1,0,0,0,5988,5989,1,0,0,0,5989,5990,1,0,0,0,5990,5992,3,1360,680,
        0,5991,5988,1,0,0,0,5992,5995,1,0,0,0,5993,5991,1,0,0,0,5993,5994,
        1,0,0,0,5994,843,1,0,0,0,5995,5993,1,0,0,0,5996,5997,5,148,0,0,5997,
        5998,5,709,0,0,5998,5999,5,217,0,0,5999,6001,3,1340,670,0,6000,6002,
        5,198,0,0,6001,6000,1,0,0,0,6001,6002,1,0,0,0,6002,845,1,0,0,0,6003,
        6010,3,848,424,0,6004,6010,3,850,425,0,6005,6010,3,854,427,0,6006,
        6010,3,856,428,0,6007,6008,4,423,55,0,6008,6010,3,858,429,0,6009,
        6003,1,0,0,0,6009,6004,1,0,0,0,6009,6005,1,0,0,0,6009,6006,1,0,0,
        0,6009,6007,1,0,0,0,6010,847,1,0,0,0,6011,6012,7,97,0,0,6012,6015,
        3,1322,661,0,6013,6016,3,1380,690,0,6014,6016,3,1266,633,0,6015,
        6013,1,0,0,0,6015,6014,1,0,0,0,6015,6016,1,0,0,0,6016,849,1,0,0,
        0,6017,6029,7,97,0,0,6018,6030,5,180,0,0,6019,6020,5,201,0,0,6020,
        6021,5,750,0,0,6021,6030,3,1406,703,0,6022,6023,4,425,56,0,6023,
        6030,5,14,0,0,6024,6025,4,425,57,0,6025,6026,5,14,0,0,6026,6027,
        5,201,0,0,6027,6028,5,750,0,0,6028,6030,3,1406,703,0,6029,6018,1,
        0,0,0,6029,6019,1,0,0,0,6029,6022,1,0,0,0,6029,6024,1,0,0,0,6029,
        6030,1,0,0,0,6030,6031,1,0,0,0,6031,6032,3,852,426,0,6032,851,1,
        0,0,0,6033,6042,3,276,138,0,6034,6042,3,230,115,0,6035,6042,3,242,
        121,0,6036,6042,3,274,137,0,6037,6042,3,428,214,0,6038,6039,5,200,
        0,0,6039,6040,5,84,0,0,6040,6042,3,1360,680,0,6041,6033,1,0,0,0,
        6041,6034,1,0,0,0,6041,6035,1,0,0,0,6041,6036,1,0,0,0,6041,6037,
        1,0,0,0,6041,6038,1,0,0,0,6042,853,1,0,0,0,6043,6044,5,222,0,0,6044,
        6045,3,1406,703,0,6045,855,1,0,0,0,6046,6047,5,620,0,0,6047,6048,
        3,1278,639,0,6048,857,1,0,0,0,6049,6050,5,714,0,0,6050,859,1,0,0,
        0,6051,6052,6,430,-1,0,6052,6058,3,862,431,0,6053,6055,5,257,0,0,
        6054,6056,3,952,476,0,6055,6054,1,0,0,0,6055,6056,1,0,0,0,6056,6057,
        1,0,0,0,6057,6059,7,98,0,0,6058,6053,1,0,0,0,6058,6059,1,0,0,0,6059,
        6063,1,0,0,0,6060,6061,5,371,0,0,6061,6063,3,860,430,4,6062,6051,
        1,0,0,0,6062,6060,1,0,0,0,6063,6075,1,0,0,0,6064,6065,10,3,0,0,6065,
        6066,7,99,0,0,6066,6074,3,860,430,4,6067,6068,10,2,0,0,6068,6069,
        5,654,0,0,6069,6074,3,860,430,3,6070,6071,10,1,0,0,6071,6072,7,100,
        0,0,6072,6074,3,860,430,2,6073,6064,1,0,0,0,6073,6067,1,0,0,0,6073,
        6070,1,0,0,0,6074,6077,1,0,0,0,6075,6073,1,0,0,0,6075,6076,1,0,0,
        0,6076,861,1,0,0,0,6077,6075,1,0,0,0,6078,6079,6,431,-1,0,6079,6080,
        3,866,433,0,6080,6098,1,0,0,0,6081,6082,10,3,0,0,6082,6084,5,257,
        0,0,6083,6085,3,952,476,0,6084,6083,1,0,0,0,6084,6085,1,0,0,0,6085,
        6086,1,0,0,0,6086,6097,5,376,0,0,6087,6088,10,2,0,0,6088,6089,3,
        864,432,0,6089,6090,3,866,433,0,6090,6097,1,0,0,0,6091,6092,10,1,
        0,0,6092,6093,3,864,432,0,6093,6094,7,101,0,0,6094,6095,3,290,145,
        0,6095,6097,1,0,0,0,6096,6081,1,0,0,0,6096,6087,1,0,0,0,6096,6091,
        1,0,0,0,6097,6100,1,0,0,0,6098,6096,1,0,0,0,6098,6099,1,0,0,0,6099,
        863,1,0,0,0,6100,6098,1,0,0,0,6101,6102,7,102,0,0,6102,865,1,0,0,
        0,6103,6117,3,870,435,0,6104,6106,3,952,476,0,6105,6104,1,0,0,0,
        6105,6106,1,0,0,0,6106,6107,1,0,0,0,6107,6118,3,868,434,0,6108,6109,
        4,433,64,0,6109,6111,5,733,0,0,6110,6112,5,668,0,0,6111,6110,1,0,
        0,0,6111,6112,1,0,0,0,6112,6113,1,0,0,0,6113,6118,3,964,482,0,6114,
        6115,5,521,0,0,6115,6116,5,275,0,0,6116,6118,3,870,435,0,6117,6105,
        1,0,0,0,6117,6108,1,0,0,0,6117,6114,1,0,0,0,6117,6118,1,0,0,0,6118,
        867,1,0,0,0,6119,6125,5,251,0,0,6120,6126,3,290,145,0,6121,6122,
        5,776,0,0,6122,6123,3,948,474,0,6123,6124,5,777,0,0,6124,6126,1,
        0,0,0,6125,6120,1,0,0,0,6125,6121,1,0,0,0,6126,6141,1,0,0,0,6127,
        6128,5,30,0,0,6128,6129,3,870,435,0,6129,6130,5,15,0,0,6130,6131,
        3,866,433,0,6131,6141,1,0,0,0,6132,6133,5,275,0,0,6133,6136,3,872,
        436,0,6134,6135,5,168,0,0,6135,6137,3,872,436,0,6136,6134,1,0,0,
        0,6136,6137,1,0,0,0,6137,6141,1,0,0,0,6138,6139,5,444,0,0,6139,6141,
        3,870,435,0,6140,6119,1,0,0,0,6140,6127,1,0,0,0,6140,6132,1,0,0,
        0,6140,6138,1,0,0,0,6141,869,1,0,0,0,6142,6143,6,435,-1,0,6143,6144,
        3,872,436,0,6144,6171,1,0,0,0,6145,6146,10,7,0,0,6146,6147,5,769,
        0,0,6147,6170,3,870,435,8,6148,6149,10,6,0,0,6149,6150,7,103,0,0,
        6150,6170,3,870,435,7,6151,6152,10,5,0,0,6152,6153,7,104,0,0,6153,
        6170,3,870,435,6,6154,6155,10,3,0,0,6155,6156,7,105,0,0,6156,6170,
        3,870,435,4,6157,6158,10,2,0,0,6158,6159,5,768,0,0,6159,6170,3,870,
        435,3,6160,6161,10,1,0,0,6161,6162,5,771,0,0,6162,6170,3,870,435,
        2,6163,6164,10,4,0,0,6164,6165,7,104,0,0,6165,6166,5,247,0,0,6166,
        6167,3,860,430,0,6167,6168,3,956,478,0,6168,6170,1,0,0,0,6169,6145,
        1,0,0,0,6169,6148,1,0,0,0,6169,6151,1,0,0,0,6169,6154,1,0,0,0,6169,
        6157,1,0,0,0,6169,6160,1,0,0,0,6169,6163,1,0,0,0,6170,6173,1,0,0,
        0,6171,6169,1,0,0,0,6171,6172,1,0,0,0,6172,871,1,0,0,0,6173,6171,
        1,0,0,0,6174,6175,6,436,-1,0,6175,6177,3,1266,633,0,6176,6178,3,
        876,438,0,6177,6176,1,0,0,0,6177,6178,1,0,0,0,6178,6297,1,0,0,0,
        6179,6297,3,904,452,0,6180,6297,3,924,462,0,6181,6297,3,1372,686,
        0,6182,6297,5,787,0,0,6183,6297,3,934,467,0,6184,6297,3,932,466,
        0,6185,6297,3,878,439,0,6186,6297,3,880,440,0,6187,6297,3,882,441,
        0,6188,6189,7,106,0,0,6189,6297,3,872,436,15,6190,6191,3,954,477,
        0,6191,6192,3,872,436,14,6192,6297,1,0,0,0,6193,6195,5,487,0,0,6194,
        6193,1,0,0,0,6194,6195,1,0,0,0,6195,6196,1,0,0,0,6196,6197,5,776,
        0,0,6197,6198,3,948,474,0,6198,6199,5,777,0,0,6199,6297,1,0,0,0,
        6200,6202,5,174,0,0,6201,6200,1,0,0,0,6201,6202,1,0,0,0,6202,6203,
        1,0,0,0,6203,6297,3,290,145,0,6204,6205,5,778,0,0,6205,6206,3,1346,
        673,0,6206,6207,3,860,430,0,6207,6208,5,779,0,0,6208,6297,1,0,0,
        0,6209,6210,5,320,0,0,6210,6211,3,898,449,0,6211,6212,5,7,0,0,6212,
        6213,5,776,0,0,6213,6215,3,870,435,0,6214,6216,3,902,451,0,6215,
        6214,1,0,0,0,6215,6216,1,0,0,0,6216,6217,1,0,0,0,6217,6218,5,777,
        0,0,6218,6297,1,0,0,0,6219,6220,5,32,0,0,6220,6297,3,872,436,9,6221,
        6222,5,52,0,0,6222,6223,5,776,0,0,6223,6226,3,860,430,0,6224,6225,
        5,21,0,0,6225,6227,5,284,0,0,6226,6224,1,0,0,0,6226,6227,1,0,0,0,
        6227,6228,1,0,0,0,6228,6229,5,17,0,0,6229,6231,3,946,473,0,6230,
        6232,3,874,437,0,6231,6230,1,0,0,0,6231,6232,1,0,0,0,6232,6233,1,
        0,0,0,6233,6234,5,777,0,0,6234,6297,1,0,0,0,6235,6236,5,52,0,0,6236,
        6237,5,776,0,0,6237,6238,3,860,430,0,6238,6239,5,21,0,0,6239,6240,
        5,586,0,0,6240,6242,5,801,0,0,6241,6243,5,247,0,0,6242,6241,1,0,
        0,0,6242,6243,1,0,0,0,6243,6244,1,0,0,0,6244,6245,3,1378,689,0,6245,
        6246,5,17,0,0,6246,6247,5,113,0,0,6247,6248,3,1128,564,0,6248,6249,
        5,777,0,0,6249,6297,1,0,0,0,6250,6252,5,51,0,0,6251,6253,3,860,430,
        0,6252,6251,1,0,0,0,6252,6253,1,0,0,0,6253,6257,1,0,0,0,6254,6255,
        3,940,470,0,6255,6256,3,942,471,0,6256,6258,1,0,0,0,6257,6254,1,
        0,0,0,6258,6259,1,0,0,0,6259,6257,1,0,0,0,6259,6260,1,0,0,0,6260,
        6262,1,0,0,0,6261,6263,3,944,472,0,6262,6261,1,0,0,0,6262,6263,1,
        0,0,0,6263,6264,1,0,0,0,6264,6265,5,159,0,0,6265,6297,1,0,0,0,6266,
        6267,5,94,0,0,6267,6268,5,776,0,0,6268,6269,3,860,430,0,6269,6270,
        5,773,0,0,6270,6271,3,946,473,0,6271,6272,5,777,0,0,6272,6297,1,
        0,0,0,6273,6274,5,94,0,0,6274,6275,5,776,0,0,6275,6276,3,860,430,
        0,6276,6277,5,621,0,0,6277,6278,3,1132,566,0,6278,6279,5,777,0,0,
        6279,6297,1,0,0,0,6280,6281,5,128,0,0,6281,6282,5,776,0,0,6282,6283,
        3,1354,677,0,6283,6284,5,777,0,0,6284,6297,1,0,0,0,6285,6286,5,626,
        0,0,6286,6287,5,776,0,0,6287,6288,3,1354,677,0,6288,6289,5,777,0,
        0,6289,6297,1,0,0,0,6290,6291,5,247,0,0,6291,6292,3,860,430,0,6292,
        6293,3,956,478,0,6293,6294,5,758,0,0,6294,6295,3,860,430,0,6295,
        6297,1,0,0,0,6296,6174,1,0,0,0,6296,6179,1,0,0,0,6296,6180,1,0,0,
        0,6296,6181,1,0,0,0,6296,6182,1,0,0,0,6296,6183,1,0,0,0,6296,6184,
        1,0,0,0,6296,6185,1,0,0,0,6296,6186,1,0,0,0,6296,6187,1,0,0,0,6296,
        6188,1,0,0,0,6296,6190,1,0,0,0,6296,6194,1,0,0,0,6296,6201,1,0,0,
        0,6296,6204,1,0,0,0,6296,6209,1,0,0,0,6296,6219,1,0,0,0,6296,6221,
        1,0,0,0,6296,6235,1,0,0,0,6296,6250,1,0,0,0,6296,6266,1,0,0,0,6296,
        6273,1,0,0,0,6296,6280,1,0,0,0,6296,6285,1,0,0,0,6296,6290,1,0,0,
        0,6297,6306,1,0,0,0,6298,6299,10,16,0,0,6299,6300,5,746,0,0,6300,
        6305,3,872,436,17,6301,6302,10,24,0,0,6302,6303,5,69,0,0,6303,6305,
        3,1406,703,0,6304,6298,1,0,0,0,6304,6301,1,0,0,0,6305,6308,1,0,0,
        0,6306,6304,1,0,0,0,6306,6307,1,0,0,0,6307,873,1,0,0,0,6308,6306,
        1,0,0,0,6309,6310,4,437,74,0,6310,6311,5,731,0,0,6311,875,1,0,0,
        0,6312,6313,5,781,0,0,6313,6317,3,1378,689,0,6314,6315,5,782,0,0,
        6315,6317,3,1378,689,0,6316,6312,1,0,0,0,6316,6314,1,0,0,0,6317,
        877,1,0,0,0,6318,6319,5,26,0,0,6319,6321,5,776,0,0,6320,6322,5,143,
        0,0,6321,6320,1,0,0,0,6321,6322,1,0,0,0,6322,6323,1,0,0,0,6323,6324,
        3,896,448,0,6324,6326,5,777,0,0,6325,6327,3,884,442,0,6326,6325,
        1,0,0,0,6326,6327,1,0,0,0,6327,6404,1,0,0,0,6328,6329,7,107,0,0,
        6329,6330,5,776,0,0,6330,6331,3,896,448,0,6331,6333,5,777,0,0,6332,
        6334,3,884,442,0,6333,6332,1,0,0,0,6333,6334,1,0,0,0,6334,6404,1,
        0,0,0,6335,6404,3,894,447,0,6336,6337,5,833,0,0,6337,6339,5,776,
        0,0,6338,6340,5,143,0,0,6339,6338,1,0,0,0,6339,6340,1,0,0,0,6340,
        6341,1,0,0,0,6341,6342,3,896,448,0,6342,6344,5,777,0,0,6343,6345,
        3,884,442,0,6344,6343,1,0,0,0,6344,6345,1,0,0,0,6345,6404,1,0,0,
        0,6346,6347,5,95,0,0,6347,6355,5,776,0,0,6348,6350,5,10,0,0,6349,
        6348,1,0,0,0,6349,6350,1,0,0,0,6350,6351,1,0,0,0,6351,6356,5,760,
        0,0,6352,6356,3,896,448,0,6353,6354,5,143,0,0,6354,6356,3,948,474,
        0,6355,6349,1,0,0,0,6355,6352,1,0,0,0,6355,6353,1,0,0,0,6356,6357,
        1,0,0,0,6357,6359,5,777,0,0,6358,6360,3,884,442,0,6359,6358,1,0,
        0,0,6359,6360,1,0,0,0,6360,6404,1,0,0,0,6361,6362,7,108,0,0,6362,
        6364,5,776,0,0,6363,6365,5,143,0,0,6364,6363,1,0,0,0,6364,6365,1,
        0,0,0,6365,6366,1,0,0,0,6366,6367,3,896,448,0,6367,6369,5,777,0,
        0,6368,6370,3,884,442,0,6369,6368,1,0,0,0,6369,6370,1,0,0,0,6370,
        6404,1,0,0,0,6371,6372,7,109,0,0,6372,6373,5,776,0,0,6373,6374,3,
        896,448,0,6374,6376,5,777,0,0,6375,6377,3,884,442,0,6376,6375,1,
        0,0,0,6376,6377,1,0,0,0,6377,6404,1,0,0,0,6378,6379,5,564,0,0,6379,
        6380,5,776,0,0,6380,6381,5,143,0,0,6381,6382,3,896,448,0,6382,6384,
        5,777,0,0,6383,6385,3,884,442,0,6384,6383,1,0,0,0,6384,6385,1,0,
        0,0,6385,6404,1,0,0,0,6386,6387,5,218,0,0,6387,6389,5,776,0,0,6388,
        6390,5,143,0,0,6389,6388,1,0,0,0,6389,6390,1,0,0,0,6390,6391,1,0,
        0,0,6391,6393,3,948,474,0,6392,6394,3,338,169,0,6393,6392,1,0,0,
        0,6393,6394,1,0,0,0,6394,6397,1,0,0,0,6395,6396,5,499,0,0,6396,6398,
        3,1380,690,0,6397,6395,1,0,0,0,6397,6398,1,0,0,0,6398,6399,1,0,0,
        0,6399,6401,5,777,0,0,6400,6402,3,884,442,0,6401,6400,1,0,0,0,6401,
        6402,1,0,0,0,6402,6404,1,0,0,0,6403,6318,1,0,0,0,6403,6328,1,0,0,
        0,6403,6335,1,0,0,0,6403,6336,1,0,0,0,6403,6346,1,0,0,0,6403,6361,
        1,0,0,0,6403,6371,1,0,0,0,6403,6378,1,0,0,0,6403,6386,1,0,0,0,6404,
        879,1,0,0,0,6405,6406,5,672,0,0,6406,6407,5,776,0,0,6407,6408,3,
        948,474,0,6408,6409,5,777,0,0,6409,881,1,0,0,0,6410,6411,7,110,0,
        0,6411,6412,3,1414,707,0,6412,6413,3,884,442,0,6413,6460,1,0,0,0,
        6414,6421,5,688,0,0,6415,6416,5,776,0,0,6416,6417,3,888,444,0,6417,
        6418,5,777,0,0,6418,6422,1,0,0,0,6419,6420,4,441,75,0,6420,6422,
        3,964,482,0,6421,6415,1,0,0,0,6421,6419,1,0,0,0,6422,6423,1,0,0,
        0,6423,6424,3,884,442,0,6424,6460,1,0,0,0,6425,6426,7,111,0,0,6426,
        6427,5,776,0,0,6427,6429,3,860,430,0,6428,6430,3,886,443,0,6429,
        6428,1,0,0,0,6429,6430,1,0,0,0,6430,6431,1,0,0,0,6431,6433,5,777,
        0,0,6432,6434,3,892,446,0,6433,6432,1,0,0,0,6433,6434,1,0,0,0,6434,
        6435,1,0,0,0,6435,6436,3,884,442,0,6436,6460,1,0,0,0,6437,6438,7,
        112,0,0,6438,6440,3,962,481,0,6439,6441,3,892,446,0,6440,6439,1,
        0,0,0,6440,6441,1,0,0,0,6441,6442,1,0,0,0,6442,6443,3,884,442,0,
        6443,6460,1,0,0,0,6444,6445,5,687,0,0,6445,6446,5,776,0,0,6446,6447,
        3,860,430,0,6447,6448,5,773,0,0,6448,6449,3,872,436,0,6449,6452,
        5,777,0,0,6450,6451,5,203,0,0,6451,6453,7,113,0,0,6452,6450,1,0,
        0,0,6452,6453,1,0,0,0,6453,6455,1,0,0,0,6454,6456,3,892,446,0,6455,
        6454,1,0,0,0,6455,6456,1,0,0,0,6456,6457,1,0,0,0,6457,6458,3,884,
        442,0,6458,6460,1,0,0,0,6459,6410,1,0,0,0,6459,6414,1,0,0,0,6459,
        6425,1,0,0,0,6459,6437,1,0,0,0,6459,6444,1,0,0,0,6460,883,1,0,0,
        0,6461,6464,5,691,0,0,6462,6465,3,1342,671,0,6463,6465,3,312,156,
        0,6464,6462,1,0,0,0,6464,6463,1,0,0,0,6465,885,1,0,0,0,6466,6471,
        5,773,0,0,6467,6472,3,1362,681,0,6468,6472,5,787,0,0,6469,6470,4,
        443,76,0,6470,6472,3,888,444,0,6471,6467,1,0,0,0,6471,6468,1,0,0,
        0,6471,6469,1,0,0,0,6472,6475,1,0,0,0,6473,6474,5,773,0,0,6474,6476,
        3,860,430,0,6475,6473,1,0,0,0,6475,6476,1,0,0,0,6476,887,1,0,0,0,
        6477,6480,3,1396,698,0,6478,6480,3,890,445,0,6479,6477,1,0,0,0,6479,
        6478,1,0,0,0,6480,889,1,0,0,0,6481,6486,5,787,0,0,6482,6486,3,1346,
        673,0,6483,6484,5,783,0,0,6484,6486,3,1406,703,0,6485,6481,1,0,0,
        0,6485,6482,1,0,0,0,6485,6483,1,0,0,0,6486,891,1,0,0,0,6487,6488,
        7,114,0,0,6488,6489,5,689,0,0,6489,893,1,0,0,0,6490,6491,5,667,0,
        0,6491,6492,5,776,0,0,6492,6493,3,896,448,0,6493,6495,5,777,0,0,
        6494,6496,3,884,442,0,6495,6494,1,0,0,0,6495,6496,1,0,0,0,6496,6507,
        1,0,0,0,6497,6498,5,666,0,0,6498,6499,5,776,0,0,6499,6500,3,896,
        448,0,6500,6501,5,773,0,0,6501,6502,3,896,448,0,6502,6504,5,777,
        0,0,6503,6505,3,884,442,0,6504,6503,1,0,0,0,6504,6505,1,0,0,0,6505,
        6507,1,0,0,0,6506,6490,1,0,0,0,6506,6497,1,0,0,0,6507,895,1,0,0,
        0,6508,6510,5,10,0,0,6509,6508,1,0,0,0,6509,6510,1,0,0,0,6510,6511,
        1,0,0,0,6511,6512,3,860,430,0,6512,897,1,0,0,0,6513,6519,3,900,450,
        0,6514,6515,5,776,0,0,6515,6516,3,900,450,0,6516,6517,5,777,0,0,
        6517,6519,1,0,0,0,6518,6513,1,0,0,0,6518,6514,1,0,0,0,6519,899,1,
        0,0,0,6520,6525,3,1354,677,0,6521,6522,5,773,0,0,6522,6524,3,1354,
        677,0,6523,6521,1,0,0,0,6524,6527,1,0,0,0,6525,6523,1,0,0,0,6525,
        6526,1,0,0,0,6526,901,1,0,0,0,6527,6525,1,0,0,0,6528,6529,5,251,
        0,0,6529,6530,5,41,0,0,6530,6544,5,346,0,0,6531,6532,5,251,0,0,6532,
        6533,5,359,0,0,6533,6534,5,267,0,0,6534,6538,5,346,0,0,6535,6536,
        5,645,0,0,6536,6537,5,430,0,0,6537,6539,5,176,0,0,6538,6535,1,0,
        0,0,6538,6539,1,0,0,0,6539,6544,1,0,0,0,6540,6541,5,645,0,0,6541,
        6542,5,430,0,0,6542,6544,5,176,0,0,6543,6528,1,0,0,0,6543,6531,1,
        0,0,0,6543,6540,1,0,0,0,6544,903,1,0,0,0,6545,6546,5,60,0,0,6546,
        6547,5,776,0,0,6547,6550,3,948,474,0,6548,6549,5,621,0,0,6549,6551,
        3,1132,566,0,6550,6548,1,0,0,0,6550,6551,1,0,0,0,6551,6552,1,0,0,
        0,6552,6553,5,777,0,0,6553,6819,1,0,0,0,6554,6556,5,105,0,0,6555,
        6557,3,1414,707,0,6556,6555,1,0,0,0,6556,6557,1,0,0,0,6557,6819,
        1,0,0,0,6558,6559,5,116,0,0,6559,6819,3,962,481,0,6560,6561,5,122,
        0,0,6561,6819,3,962,481,0,6562,6563,5,229,0,0,6563,6819,3,962,481,
        0,6564,6565,5,242,0,0,6565,6566,5,776,0,0,6566,6567,3,860,430,0,
        6567,6568,5,773,0,0,6568,6569,3,860,430,0,6569,6570,5,773,0,0,6570,
        6571,3,860,430,0,6571,6572,5,773,0,0,6572,6573,3,860,430,0,6573,
        6574,5,777,0,0,6574,6819,1,0,0,0,6575,6576,5,247,0,0,6576,6577,5,
        776,0,0,6577,6580,3,860,430,0,6578,6579,5,773,0,0,6579,6581,3,860,
        430,0,6580,6578,1,0,0,0,6581,6582,1,0,0,0,6582,6580,1,0,0,0,6582,
        6583,1,0,0,0,6583,6584,1,0,0,0,6584,6585,5,777,0,0,6585,6819,1,0,
        0,0,6586,6587,5,795,0,0,6587,6588,5,776,0,0,6588,6589,3,872,436,
        0,6589,6590,5,773,0,0,6590,6592,3,1384,692,0,6591,6593,3,906,453,
        0,6592,6591,1,0,0,0,6592,6593,1,0,0,0,6593,6594,1,0,0,0,6594,6595,
        3,398,199,0,6595,6596,5,777,0,0,6596,6819,1,0,0,0,6597,6598,5,272,
        0,0,6598,6599,5,776,0,0,6599,6600,3,860,430,0,6600,6601,5,773,0,
        0,6601,6602,3,860,430,0,6602,6603,5,777,0,0,6603,6819,1,0,0,0,6604,
        6605,5,343,0,0,6605,6819,3,962,481,0,6606,6607,5,350,0,0,6607,6819,
        3,962,481,0,6608,6609,5,478,0,0,6609,6610,5,776,0,0,6610,6611,3,
        860,430,0,6611,6612,5,773,0,0,6612,6613,3,860,430,0,6613,6614,5,
        777,0,0,6614,6819,1,0,0,0,6615,6616,5,495,0,0,6616,6819,3,962,481,
        0,6617,6618,5,586,0,0,6618,6819,3,962,481,0,6619,6620,5,583,0,0,
        6620,6621,5,776,0,0,6621,6624,3,860,430,0,6622,6623,5,773,0,0,6623,
        6625,3,860,430,0,6624,6622,1,0,0,0,6624,6625,1,0,0,0,6625,6626,1,
        0,0,0,6626,6627,5,777,0,0,6627,6819,1,0,0,0,6628,6819,3,920,460,
        0,6629,6819,3,602,301,0,6630,6631,5,626,0,0,6631,6819,3,962,481,
        0,6632,6633,5,656,0,0,6633,6819,3,962,481,0,6634,6635,7,115,0,0,
        6635,6636,5,776,0,0,6636,6637,3,860,430,0,6637,6643,5,773,0,0,6638,
        6644,3,860,430,0,6639,6640,5,247,0,0,6640,6641,3,860,430,0,6641,
        6642,3,956,478,0,6642,6644,1,0,0,0,6643,6638,1,0,0,0,6643,6639,1,
        0,0,0,6644,6645,1,0,0,0,6645,6646,5,777,0,0,6646,6819,1,0,0,0,6647,
        6649,5,100,0,0,6648,6650,3,1414,707,0,6649,6648,1,0,0,0,6649,6650,
        1,0,0,0,6650,6819,1,0,0,0,6651,6653,5,108,0,0,6652,6654,3,910,455,
        0,6653,6652,1,0,0,0,6653,6654,1,0,0,0,6654,6819,1,0,0,0,6655,6656,
        7,116,0,0,6656,6657,5,776,0,0,6657,6658,3,860,430,0,6658,6659,5,
        773,0,0,6659,6660,5,247,0,0,6660,6661,3,860,430,0,6661,6662,3,956,
        478,0,6662,6663,5,777,0,0,6663,6819,1,0,0,0,6664,6665,5,182,0,0,
        6665,6666,5,776,0,0,6666,6667,3,956,478,0,6667,6668,5,203,0,0,6668,
        6669,3,860,430,0,6669,6670,5,777,0,0,6670,6819,1,0,0,0,6671,6672,
        5,213,0,0,6672,6673,5,776,0,0,6673,6674,3,918,459,0,6674,6675,5,
        773,0,0,6675,6676,3,860,430,0,6676,6677,5,777,0,0,6677,6819,1,0,
        0,0,6678,6680,5,372,0,0,6679,6681,3,910,455,0,6680,6679,1,0,0,0,
        6680,6681,1,0,0,0,6681,6819,1,0,0,0,6682,6683,5,414,0,0,6683,6684,
        5,776,0,0,6684,6685,3,870,435,0,6685,6686,5,251,0,0,6686,6687,3,
        860,430,0,6687,6688,5,777,0,0,6688,6819,1,0,0,0,6689,6819,3,922,
        461,0,6690,6692,5,569,0,0,6691,6693,3,910,455,0,6692,6691,1,0,0,
        0,6692,6693,1,0,0,0,6693,6819,1,0,0,0,6694,6695,7,117,0,0,6695,6696,
        5,776,0,0,6696,6697,3,958,479,0,6697,6698,5,773,0,0,6698,6699,3,
        860,430,0,6699,6700,5,773,0,0,6700,6701,3,860,430,0,6701,6702,5,
        777,0,0,6702,6819,1,0,0,0,6703,6705,5,622,0,0,6704,6706,3,1414,707,
        0,6705,6704,1,0,0,0,6705,6706,1,0,0,0,6706,6819,1,0,0,0,6707,6709,
        5,624,0,0,6708,6710,3,910,455,0,6709,6708,1,0,0,0,6709,6710,1,0,
        0,0,6710,6819,1,0,0,0,6711,6713,5,623,0,0,6712,6714,3,910,455,0,
        6713,6712,1,0,0,0,6713,6714,1,0,0,0,6714,6819,1,0,0,0,6715,6716,
        5,19,0,0,6716,6819,3,962,481,0,6717,6718,5,58,0,0,6718,6819,3,962,
        481,0,6719,6720,5,67,0,0,6720,6819,3,960,480,0,6721,6722,5,70,0,
        0,6722,6819,3,962,481,0,6723,6724,5,109,0,0,6724,6819,3,1414,707,
        0,6725,6726,5,231,0,0,6726,6727,5,776,0,0,6727,6728,3,860,430,0,
        6728,6729,5,773,0,0,6729,6730,3,860,430,0,6730,6731,5,773,0,0,6731,
        6732,3,860,430,0,6732,6733,5,777,0,0,6733,6819,1,0,0,0,6734,6735,
        5,201,0,0,6735,6736,5,776,0,0,6736,6737,3,860,430,0,6737,6738,5,
        773,0,0,6738,6741,3,860,430,0,6739,6740,5,773,0,0,6740,6742,3,860,
        430,0,6741,6739,1,0,0,0,6741,6742,1,0,0,0,6742,6743,1,0,0,0,6743,
        6744,5,777,0,0,6744,6819,1,0,0,0,6745,6746,5,337,0,0,6746,6819,3,
        962,481,0,6747,6748,5,349,0,0,6748,6749,5,776,0,0,6749,6750,3,860,
        430,0,6750,6751,5,773,0,0,6751,6752,3,860,430,0,6752,6753,5,777,
        0,0,6753,6819,1,0,0,0,6754,6755,4,452,77,0,6755,6756,5,406,0,0,6756,
        6819,3,962,481,0,6757,6758,5,429,0,0,6758,6819,3,962,481,0,6759,
        6760,5,457,0,0,6760,6761,5,776,0,0,6761,6762,3,860,430,0,6762,6763,
        5,773,0,0,6763,6764,3,860,430,0,6764,6765,5,777,0,0,6765,6819,1,
        0,0,0,6766,6767,5,458,0,0,6767,6768,5,776,0,0,6768,6769,3,860,430,
        0,6769,6770,5,773,0,0,6770,6771,3,860,430,0,6771,6772,5,773,0,0,
        6772,6773,3,860,430,0,6773,6774,5,777,0,0,6774,6819,1,0,0,0,6775,
        6776,5,476,0,0,6776,6819,3,962,481,0,6777,6778,5,485,0,0,6778,6819,
        3,1414,707,0,6779,6780,5,597,0,0,6780,6781,5,776,0,0,6781,6782,3,
        860,430,0,6782,6783,5,773,0,0,6783,6784,3,860,430,0,6784,6785,5,
        777,0,0,6785,6819,1,0,0,0,6786,6787,5,640,0,0,6787,6788,5,776,0,
        0,6788,6791,3,860,430,0,6789,6790,5,773,0,0,6790,6792,3,860,430,
        0,6791,6789,1,0,0,0,6791,6792,1,0,0,0,6792,6793,1,0,0,0,6793,6794,
        5,777,0,0,6794,6819,1,0,0,0,6795,6796,5,641,0,0,6796,6797,5,776,
        0,0,6797,6813,3,860,430,0,6798,6799,5,17,0,0,6799,6800,5,60,0,0,
        6800,6802,3,1126,563,0,6801,6798,1,0,0,0,6801,6802,1,0,0,0,6802,
        6814,1,0,0,0,6803,6804,5,17,0,0,6804,6805,5,32,0,0,6805,6814,3,1126,
        563,0,6806,6807,5,773,0,0,6807,6808,3,1358,679,0,6808,6809,5,773,
        0,0,6809,6810,3,1358,679,0,6810,6811,5,773,0,0,6811,6812,3,1358,
        679,0,6812,6814,1,0,0,0,6813,6801,1,0,0,0,6813,6803,1,0,0,0,6813,
        6806,1,0,0,0,6814,6815,1,0,0,0,6815,6816,5,777,0,0,6816,6819,1,0,
        0,0,6817,6819,3,908,454,0,6818,6545,1,0,0,0,6818,6554,1,0,0,0,6818,
        6558,1,0,0,0,6818,6560,1,0,0,0,6818,6562,1,0,0,0,6818,6564,1,0,0,
        0,6818,6575,1,0,0,0,6818,6586,1,0,0,0,6818,6597,1,0,0,0,6818,6604,
        1,0,0,0,6818,6606,1,0,0,0,6818,6608,1,0,0,0,6818,6615,1,0,0,0,6818,
        6617,1,0,0,0,6818,6619,1,0,0,0,6818,6628,1,0,0,0,6818,6629,1,0,0,
        0,6818,6630,1,0,0,0,6818,6632,1,0,0,0,6818,6634,1,0,0,0,6818,6647,
        1,0,0,0,6818,6651,1,0,0,0,6818,6655,1,0,0,0,6818,6664,1,0,0,0,6818,
        6671,1,0,0,0,6818,6678,1,0,0,0,6818,6682,1,0,0,0,6818,6689,1,0,0,
        0,6818,6690,1,0,0,0,6818,6694,1,0,0,0,6818,6703,1,0,0,0,6818,6707,
        1,0,0,0,6818,6711,1,0,0,0,6818,6715,1,0,0,0,6818,6717,1,0,0,0,6818,
        6719,1,0,0,0,6818,6721,1,0,0,0,6818,6723,1,0,0,0,6818,6725,1,0,0,
        0,6818,6734,1,0,0,0,6818,6745,1,0,0,0,6818,6747,1,0,0,0,6818,6754,
        1,0,0,0,6818,6757,1,0,0,0,6818,6759,1,0,0,0,6818,6766,1,0,0,0,6818,
        6775,1,0,0,0,6818,6777,1,0,0,0,6818,6779,1,0,0,0,6818,6786,1,0,0,
        0,6818,6795,1,0,0,0,6818,6817,1,0,0,0,6819,905,1,0,0,0,6820,6821,
        5,794,0,0,6821,6822,3,946,473,0,6822,907,1,0,0,0,6823,6824,5,211,
        0,0,6824,6826,5,776,0,0,6825,6827,3,948,474,0,6826,6825,1,0,0,0,
        6826,6827,1,0,0,0,6827,6828,1,0,0,0,6828,6847,5,777,0,0,6829,6830,
        5,279,0,0,6830,6847,3,960,480,0,6831,6832,5,351,0,0,6832,6847,3,
        960,480,0,6833,6834,5,352,0,0,6834,6847,3,960,480,0,6835,6836,5,
        353,0,0,6836,6847,3,960,480,0,6837,6838,5,411,0,0,6838,6839,5,776,
        0,0,6839,6840,3,860,430,0,6840,6841,5,773,0,0,6841,6842,3,860,430,
        0,6842,6843,5,777,0,0,6843,6847,1,0,0,0,6844,6845,5,412,0,0,6845,
        6847,3,960,480,0,6846,6823,1,0,0,0,6846,6829,1,0,0,0,6846,6831,1,
        0,0,0,6846,6833,1,0,0,0,6846,6835,1,0,0,0,6846,6837,1,0,0,0,6846,
        6844,1,0,0,0,6847,909,1,0,0,0,6848,6850,5,776,0,0,6849,6851,3,912,
        456,0,6850,6849,1,0,0,0,6850,6851,1,0,0,0,6851,6852,1,0,0,0,6852,
        6853,5,777,0,0,6853,911,1,0,0,0,6854,6855,5,747,0,0,6855,913,1,0,
        0,0,6856,6869,5,274,0,0,6857,6858,3,1360,680,0,6858,6859,5,759,0,
        0,6859,6860,3,1360,680,0,6860,6870,1,0,0,0,6861,6866,3,916,458,0,
        6862,6863,5,773,0,0,6863,6865,3,916,458,0,6864,6862,1,0,0,0,6865,
        6868,1,0,0,0,6866,6864,1,0,0,0,6866,6867,1,0,0,0,6867,6870,1,0,0,
        0,6868,6866,1,0,0,0,6869,6857,1,0,0,0,6869,6861,1,0,0,0,6870,915,
        1,0,0,0,6871,6877,3,1360,680,0,6872,6874,7,33,0,0,6873,6875,5,476,
        0,0,6874,6873,1,0,0,0,6874,6875,1,0,0,0,6875,6878,1,0,0,0,6876,6878,
        5,476,0,0,6877,6872,1,0,0,0,6877,6876,1,0,0,0,6877,6878,1,0,0,0,
        6878,917,1,0,0,0,6879,6880,7,118,0,0,6880,919,1,0,0,0,6881,6882,
        5,595,0,0,6882,6906,5,776,0,0,6883,6886,3,860,430,0,6884,6885,5,
        203,0,0,6885,6887,3,860,430,0,6886,6884,1,0,0,0,6886,6887,1,0,0,
        0,6887,6907,1,0,0,0,6888,6890,5,269,0,0,6889,6891,3,860,430,0,6890,
        6889,1,0,0,0,6890,6891,1,0,0,0,6891,6892,1,0,0,0,6892,6893,5,203,
        0,0,6893,6907,3,860,430,0,6894,6896,5,591,0,0,6895,6897,3,860,430,
        0,6896,6895,1,0,0,0,6896,6897,1,0,0,0,6897,6898,1,0,0,0,6898,6899,
        5,203,0,0,6899,6907,3,860,430,0,6900,6902,5,43,0,0,6901,6903,3,860,
        430,0,6902,6901,1,0,0,0,6902,6903,1,0,0,0,6903,6904,1,0,0,0,6904,
        6905,5,203,0,0,6905,6907,3,860,430,0,6906,6883,1,0,0,0,6906,6888,
        1,0,0,0,6906,6894,1,0,0,0,6906,6900,1,0,0,0,6907,6908,1,0,0,0,6908,
        6909,5,777,0,0,6909,921,1,0,0,0,6910,6911,5,563,0,0,6911,6912,5,
        776,0,0,6912,6925,3,860,430,0,6913,6914,5,773,0,0,6914,6917,3,860,
        430,0,6915,6916,5,773,0,0,6916,6918,3,860,430,0,6917,6915,1,0,0,
        0,6917,6918,1,0,0,0,6918,6926,1,0,0,0,6919,6920,5,203,0,0,6920,6923,
        3,860,430,0,6921,6922,5,200,0,0,6922,6924,3,860,430,0,6923,6921,
        1,0,0,0,6923,6924,1,0,0,0,6924,6926,1,0,0,0,6925,6913,1,0,0,0,6925,
        6919,1,0,0,0,6926,6927,1,0,0,0,6927,6928,5,777,0,0,6928,923,1,0,
        0,0,6929,6930,3,1344,672,0,6930,6932,5,776,0,0,6931,6933,3,926,463,
        0,6932,6931,1,0,0,0,6932,6933,1,0,0,0,6933,6934,1,0,0,0,6934,6935,
        5,777,0,0,6935,6944,1,0,0,0,6936,6937,3,1352,676,0,6937,6939,5,776,
        0,0,6938,6940,3,948,474,0,6939,6938,1,0,0,0,6939,6940,1,0,0,0,6940,
        6941,1,0,0,0,6941,6942,5,777,0,0,6942,6944,1,0,0,0,6943,6929,1,0,
        0,0,6943,6936,1,0,0,0,6944,925,1,0,0,0,6945,6950,3,928,464,0,6946,
        6947,5,773,0,0,6947,6949,3,928,464,0,6948,6946,1,0,0,0,6949,6952,
        1,0,0,0,6950,6948,1,0,0,0,6950,6951,1,0,0,0,6951,927,1,0,0,0,6952,
        6950,1,0,0,0,6953,6955,3,860,430,0,6954,6956,3,366,183,0,6955,6954,
        1,0,0,0,6955,6956,1,0,0,0,6956,929,1,0,0,0,6957,6958,5,783,0,0,6958,
        6961,3,1406,703,0,6959,6961,5,784,0,0,6960,6957,1,0,0,0,6960,6959,
        1,0,0,0,6961,931,1,0,0,0,6962,6963,3,930,465,0,6963,6964,5,751,0,
        0,6964,6965,3,860,430,0,6965,933,1,0,0,0,6966,6973,3,930,465,0,6967,
        6969,5,785,0,0,6968,6970,3,1420,710,0,6969,6968,1,0,0,0,6969,6970,
        1,0,0,0,6970,6971,1,0,0,0,6971,6973,3,938,469,0,6972,6966,1,0,0,
        0,6972,6967,1,0,0,0,6973,935,1,0,0,0,6974,6976,3,1346,673,0,6975,
        6977,3,1356,678,0,6976,6975,1,0,0,0,6976,6977,1,0,0,0,6977,6984,
        1,0,0,0,6978,6979,4,468,78,0,6979,6981,3,1408,704,0,6980,6982,3,
        1356,678,0,6981,6980,1,0,0,0,6981,6982,1,0,0,0,6982,6984,1,0,0,0,
        6983,6974,1,0,0,0,6983,6978,1,0,0,0,6984,6988,1,0,0,0,6985,6986,
        5,128,0,0,6986,6988,3,1356,678,0,6987,6983,1,0,0,0,6987,6985,1,0,
        0,0,6988,937,1,0,0,0,6989,6991,3,1406,703,0,6990,6992,3,1356,678,
        0,6991,6990,1,0,0,0,6991,6992,1,0,0,0,6992,939,1,0,0,0,6993,6994,
        5,642,0,0,6994,6995,3,860,430,0,6995,941,1,0,0,0,6996,6997,5,582,
        0,0,6997,6998,3,860,430,0,6998,943,1,0,0,0,6999,7000,5,154,0,0,7000,
        7001,3,860,430,0,7001,945,1,0,0,0,7002,7004,5,32,0,0,7003,7005,3,
        1116,558,0,7004,7003,1,0,0,0,7004,7005,1,0,0,0,7005,7051,1,0,0,0,
        7006,7008,5,60,0,0,7007,7009,3,1116,558,0,7008,7007,1,0,0,0,7008,
        7009,1,0,0,0,7009,7011,1,0,0,0,7010,7012,3,1120,560,0,7011,7010,
        1,0,0,0,7011,7012,1,0,0,0,7012,7051,1,0,0,0,7013,7015,3,1112,556,
        0,7014,7016,3,1116,558,0,7015,7014,1,0,0,0,7015,7016,1,0,0,0,7016,
        7051,1,0,0,0,7017,7019,5,512,0,0,7018,7020,5,249,0,0,7019,7018,1,
        0,0,0,7019,7020,1,0,0,0,7020,7051,1,0,0,0,7021,7023,5,612,0,0,7022,
        7024,5,249,0,0,7023,7022,1,0,0,0,7023,7024,1,0,0,0,7024,7051,1,0,
        0,0,7025,7051,5,116,0,0,7026,7027,4,473,79,0,7027,7051,5,656,0,0,
        7028,7030,5,586,0,0,7029,7031,3,1128,564,0,7030,7029,1,0,0,0,7030,
        7031,1,0,0,0,7031,7051,1,0,0,0,7032,7034,5,113,0,0,7033,7035,3,1128,
        564,0,7034,7033,1,0,0,0,7034,7035,1,0,0,0,7035,7051,1,0,0,0,7036,
        7038,5,126,0,0,7037,7039,3,1400,700,0,7038,7037,1,0,0,0,7038,7039,
        1,0,0,0,7039,7051,1,0,0,0,7040,7051,5,262,0,0,7041,7042,4,473,80,
        0,7042,7051,3,1114,557,0,7043,7044,4,473,81,0,7044,7046,5,195,0,
        0,7045,7047,3,1402,701,0,7046,7045,1,0,0,0,7046,7047,1,0,0,0,7047,
        7051,1,0,0,0,7048,7049,4,473,82,0,7049,7051,7,119,0,0,7050,7002,
        1,0,0,0,7050,7006,1,0,0,0,7050,7013,1,0,0,0,7050,7017,1,0,0,0,7050,
        7021,1,0,0,0,7050,7025,1,0,0,0,7050,7026,1,0,0,0,7050,7028,1,0,0,
        0,7050,7032,1,0,0,0,7050,7036,1,0,0,0,7050,7040,1,0,0,0,7050,7041,
        1,0,0,0,7050,7043,1,0,0,0,7050,7048,1,0,0,0,7051,947,1,0,0,0,7052,
        7057,3,860,430,0,7053,7054,5,773,0,0,7054,7056,3,860,430,0,7055,
        7053,1,0,0,0,7056,7059,1,0,0,0,7057,7055,1,0,0,0,7057,7058,1,0,0,
        0,7058,949,1,0,0,0,7059,7057,1,0,0,0,7060,7061,5,60,0,0,7061,7064,
        5,506,0,0,7062,7064,5,58,0,0,7063,7060,1,0,0,0,7063,7062,1,0,0,0,
        7064,951,1,0,0,0,7065,7066,7,120,0,0,7066,953,1,0,0,0,7067,7068,
        7,121,0,0,7068,955,1,0,0,0,7069,7072,3,958,479,0,7070,7072,7,122,
        0,0,7071,7069,1,0,0,0,7071,7070,1,0,0,0,7072,957,1,0,0,0,7073,7074,
        7,123,0,0,7074,959,1,0,0,0,7075,7076,5,776,0,0,7076,7077,3,948,474,
        0,7077,7078,5,777,0,0,7078,961,1,0,0,0,7079,7080,5,776,0,0,7080,
        7081,3,860,430,0,7081,7082,5,777,0,0,7082,963,1,0,0,0,7083,7084,
        5,776,0,0,7084,7085,3,872,436,0,7085,7086,5,777,0,0,7086,965,1,0,
        0,0,7087,7092,3,968,484,0,7088,7089,5,773,0,0,7089,7091,3,968,484,
        0,7090,7088,1,0,0,0,7091,7094,1,0,0,0,7092,7090,1,0,0,0,7092,7093,
        1,0,0,0,7093,967,1,0,0,0,7094,7092,1,0,0,0,7095,7097,3,860,430,0,
        7096,7098,3,340,170,0,7097,7096,1,0,0,0,7097,7098,1,0,0,0,7098,969,
        1,0,0,0,7099,7104,3,972,486,0,7100,7101,5,773,0,0,7101,7103,3,972,
        486,0,7102,7100,1,0,0,0,7103,7106,1,0,0,0,7104,7102,1,0,0,0,7104,
        7105,1,0,0,0,7105,971,1,0,0,0,7106,7104,1,0,0,0,7107,7108,3,860,
        430,0,7108,973,1,0,0,0,7109,7110,5,200,0,0,7110,7111,5,57,0,0,7111,
        7112,3,1386,693,0,7112,975,1,0,0,0,7113,7127,3,2,1,0,7114,7127,3,
        978,489,0,7115,7127,3,980,490,0,7116,7127,3,988,494,0,7117,7127,
        3,992,496,0,7118,7127,3,994,497,0,7119,7127,3,1000,500,0,7120,7127,
        3,1002,501,0,7121,7127,3,1030,515,0,7122,7127,3,1028,514,0,7123,
        7127,3,1048,524,0,7124,7127,3,1052,526,0,7125,7127,3,1050,525,0,
        7126,7113,1,0,0,0,7126,7114,1,0,0,0,7126,7115,1,0,0,0,7126,7116,
        1,0,0,0,7126,7117,1,0,0,0,7126,7118,1,0,0,0,7126,7119,1,0,0,0,7126,
        7120,1,0,0,0,7126,7121,1,0,0,0,7126,7122,1,0,0,0,7126,7123,1,0,0,
        0,7126,7124,1,0,0,0,7126,7125,1,0,0,0,7127,977,1,0,0,0,7128,7129,
        5,475,0,0,7129,7130,3,860,430,0,7130,979,1,0,0,0,7131,7132,5,231,
        0,0,7132,7133,3,982,491,0,7133,7134,5,159,0,0,7134,7135,5,231,0,
        0,7135,981,1,0,0,0,7136,7137,3,860,430,0,7137,7142,3,984,492,0,7138,
        7139,5,155,0,0,7139,7143,3,982,491,0,7140,7141,5,154,0,0,7141,7143,
        3,986,493,0,7142,7138,1,0,0,0,7142,7140,1,0,0,0,7142,7143,1,0,0,
        0,7143,983,1,0,0,0,7144,7145,5,582,0,0,7145,7146,3,986,493,0,7146,
        985,1,0,0,0,7147,7148,3,976,488,0,7148,7149,5,774,0,0,7149,7151,
        1,0,0,0,7150,7147,1,0,0,0,7151,7152,1,0,0,0,7152,7150,1,0,0,0,7152,
        7153,1,0,0,0,7153,987,1,0,0,0,7154,7156,5,51,0,0,7155,7157,3,860,
        430,0,7156,7155,1,0,0,0,7156,7157,1,0,0,0,7157,7161,1,0,0,0,7158,
        7159,3,940,470,0,7159,7160,3,984,492,0,7160,7162,1,0,0,0,7161,7158,
        1,0,0,0,7162,7163,1,0,0,0,7163,7161,1,0,0,0,7163,7164,1,0,0,0,7164,
        7166,1,0,0,0,7165,7167,3,990,495,0,7166,7165,1,0,0,0,7166,7167,1,
        0,0,0,7167,7168,1,0,0,0,7168,7169,5,159,0,0,7169,7170,5,51,0,0,7170,
        989,1,0,0,0,7171,7172,5,154,0,0,7172,7173,3,986,493,0,7173,991,1,
        0,0,0,7174,7175,3,996,498,0,7175,7177,3,998,499,0,7176,7178,3,1332,
        666,0,7177,7176,1,0,0,0,7177,7178,1,0,0,0,7178,993,1,0,0,0,7179,
        7180,3,998,499,0,7180,995,1,0,0,0,7181,7182,3,1330,665,0,7182,7183,
        5,775,0,0,7183,997,1,0,0,0,7184,7186,5,29,0,0,7185,7187,3,1010,505,
        0,7186,7185,1,0,0,0,7186,7187,1,0,0,0,7187,7189,1,0,0,0,7188,7190,
        3,986,493,0,7189,7188,1,0,0,0,7189,7190,1,0,0,0,7190,7191,1,0,0,
        0,7191,7192,5,159,0,0,7192,999,1,0,0,0,7193,7194,3,996,498,0,7194,
        7196,3,1002,501,0,7195,7197,3,1332,666,0,7196,7195,1,0,0,0,7196,
        7197,1,0,0,0,7197,1001,1,0,0,0,7198,7202,3,1004,502,0,7199,7202,
        3,1006,503,0,7200,7202,3,1008,504,0,7201,7198,1,0,0,0,7201,7199,
        1,0,0,0,7201,7200,1,0,0,0,7202,1003,1,0,0,0,7203,7204,5,294,0,0,
        7204,7205,3,986,493,0,7205,7206,5,159,0,0,7206,7207,5,294,0,0,7207,
        1005,1,0,0,0,7208,7209,5,644,0,0,7209,7210,3,860,430,0,7210,7211,
        5,147,0,0,7211,7212,3,986,493,0,7212,7213,5,159,0,0,7213,7214,5,
        644,0,0,7214,1007,1,0,0,0,7215,7216,5,457,0,0,7216,7217,3,986,493,
        0,7217,7218,5,613,0,0,7218,7219,3,860,430,0,7219,7220,5,159,0,0,
        7220,7221,5,457,0,0,7221,1009,1,0,0,0,7222,7223,3,1012,506,0,7223,
        7224,5,774,0,0,7224,7226,1,0,0,0,7225,7222,1,0,0,0,7226,7227,1,0,
        0,0,7227,7225,1,0,0,0,7227,7228,1,0,0,0,7228,1011,1,0,0,0,7229,7234,
        3,1014,507,0,7230,7234,3,1016,508,0,7231,7234,3,1022,511,0,7232,
        7234,3,1026,513,0,7233,7229,1,0,0,0,7233,7230,1,0,0,0,7233,7231,
        1,0,0,0,7233,7232,1,0,0,0,7234,1013,1,0,0,0,7235,7236,5,127,0,0,
        7236,7237,3,1348,674,0,7237,7239,3,1110,555,0,7238,7240,3,1188,594,
        0,7239,7238,1,0,0,0,7239,7240,1,0,0,0,7240,7243,1,0,0,0,7241,7242,
        5,128,0,0,7242,7244,3,860,430,0,7243,7241,1,0,0,0,7243,7244,1,0,
        0,0,7244,1015,1,0,0,0,7245,7246,5,127,0,0,7246,7247,3,1346,673,0,
        7247,7248,5,83,0,0,7248,7249,5,200,0,0,7249,7250,3,1018,509,0,7250,
        1017,1,0,0,0,7251,7254,3,1358,679,0,7252,7254,3,1020,510,0,7253,
        7251,1,0,0,0,7253,7252,1,0,0,0,7254,1019,1,0,0,0,7255,7257,5,526,
        0,0,7256,7258,5,627,0,0,7257,7256,1,0,0,0,7257,7258,1,0,0,0,7258,
        7259,1,0,0,0,7259,7260,3,1384,692,0,7260,1021,1,0,0,0,7261,7262,
        5,127,0,0,7262,7263,7,124,0,0,7263,7264,5,219,0,0,7264,7265,5,200,
        0,0,7265,7270,3,1024,512,0,7266,7267,5,773,0,0,7267,7269,3,1024,
        512,0,7268,7266,1,0,0,0,7269,7272,1,0,0,0,7270,7268,1,0,0,0,7270,
        7271,1,0,0,0,7271,7273,1,0,0,0,7272,7270,1,0,0,0,7273,7274,3,976,
        488,0,7274,1023,1,0,0,0,7275,7283,3,1018,509,0,7276,7283,3,1346,
        673,0,7277,7283,5,527,0,0,7278,7279,3,952,476,0,7279,7280,5,202,
        0,0,7280,7283,1,0,0,0,7281,7283,5,525,0,0,7282,7275,1,0,0,0,7282,
        7276,1,0,0,0,7282,7277,1,0,0,0,7282,7278,1,0,0,0,7282,7281,1,0,0,
        0,7283,1025,1,0,0,0,7284,7285,5,127,0,0,7285,7286,3,1346,673,0,7286,
        7287,5,106,0,0,7287,7288,5,200,0,0,7288,7289,3,276,138,0,7289,1027,
        1,0,0,0,7290,7291,5,260,0,0,7291,7292,3,1332,666,0,7292,1029,1,0,
        0,0,7293,7294,5,271,0,0,7294,7295,3,1332,666,0,7295,1031,1,0,0,0,
        7296,7298,5,207,0,0,7297,7299,7,125,0,0,7298,7297,1,0,0,0,7298,7299,
        1,0,0,0,7299,7300,1,0,0,0,7300,7319,5,138,0,0,7301,7306,3,1036,518,
        0,7302,7303,5,773,0,0,7303,7305,3,1036,518,0,7304,7302,1,0,0,0,7305,
        7308,1,0,0,0,7306,7304,1,0,0,0,7306,7307,1,0,0,0,7307,7320,1,0,0,
        0,7308,7306,1,0,0,0,7309,7310,5,83,0,0,7310,7311,3,1034,517,0,7311,
        7316,3,1038,519,0,7312,7313,5,773,0,0,7313,7315,3,1038,519,0,7314,
        7312,1,0,0,0,7315,7318,1,0,0,0,7316,7314,1,0,0,0,7316,7317,1,0,0,
        0,7317,7320,1,0,0,0,7318,7316,1,0,0,0,7319,7301,1,0,0,0,7319,7309,
        1,0,0,0,7320,1033,1,0,0,0,7321,7325,3,1370,685,0,7322,7325,3,934,
        467,0,7323,7325,3,1352,676,0,7324,7321,1,0,0,0,7324,7322,1,0,0,0,
        7324,7323,1,0,0,0,7325,1035,1,0,0,0,7326,7329,3,930,465,0,7327,7329,
        3,1346,673,0,7328,7326,1,0,0,0,7328,7327,1,0,0,0,7329,7330,1,0,0,
        0,7330,7331,5,750,0,0,7331,7332,7,126,0,0,7332,1037,1,0,0,0,7333,
        7336,3,930,465,0,7334,7336,3,1346,673,0,7335,7333,1,0,0,0,7335,7334,
        1,0,0,0,7336,7337,1,0,0,0,7337,7340,5,750,0,0,7338,7341,3,1040,520,
        0,7339,7341,5,473,0,0,7340,7338,1,0,0,0,7340,7339,1,0,0,0,7341,1039,
        1,0,0,0,7342,7343,7,127,0,0,7343,1041,1,0,0,0,7344,7347,5,511,0,
        0,7345,7348,3,1346,673,0,7346,7348,3,1020,510,0,7347,7345,1,0,0,
        0,7347,7346,1,0,0,0,7348,7358,1,0,0,0,7349,7350,5,506,0,0,7350,7355,
        3,1046,523,0,7351,7352,5,773,0,0,7352,7354,3,1046,523,0,7353,7351,
        1,0,0,0,7354,7357,1,0,0,0,7355,7353,1,0,0,0,7355,7356,1,0,0,0,7356,
        7359,1,0,0,0,7357,7355,1,0,0,0,7358,7349,1,0,0,0,7358,7359,1,0,0,
        0,7359,1043,1,0,0,0,7360,7363,5,469,0,0,7361,7364,3,1346,673,0,7362,
        7364,3,1020,510,0,7363,7361,1,0,0,0,7363,7362,1,0,0,0,7363,7364,
        1,0,0,0,7364,7374,1,0,0,0,7365,7366,5,506,0,0,7366,7371,3,1046,523,
        0,7367,7368,5,773,0,0,7368,7370,3,1046,523,0,7369,7367,1,0,0,0,7370,
        7373,1,0,0,0,7371,7369,1,0,0,0,7371,7372,1,0,0,0,7372,7375,1,0,0,
        0,7373,7371,1,0,0,0,7374,7365,1,0,0,0,7374,7375,1,0,0,0,7375,1045,
        1,0,0,0,7376,7377,3,1040,520,0,7377,7378,5,750,0,0,7378,7379,3,1034,
        517,0,7379,1047,1,0,0,0,7380,7381,5,387,0,0,7381,7382,3,1346,673,
        0,7382,1049,1,0,0,0,7383,7384,5,66,0,0,7384,7385,3,1346,673,0,7385,
        1051,1,0,0,0,7386,7391,5,186,0,0,7387,7389,5,367,0,0,7388,7387,1,
        0,0,0,7388,7389,1,0,0,0,7389,7390,1,0,0,0,7390,7392,5,203,0,0,7391,
        7388,1,0,0,0,7391,7392,1,0,0,0,7392,7393,1,0,0,0,7393,7394,3,1346,
        673,0,7394,7395,5,248,0,0,7395,7396,3,1348,674,0,7396,1053,1,0,0,
        0,7397,7398,5,21,0,0,7398,7411,3,860,430,0,7399,7400,5,171,0,0,7400,
        7401,3,860,430,0,7401,7404,3,956,478,0,7402,7403,5,542,0,0,7403,
        7405,3,860,430,0,7404,7402,1,0,0,0,7404,7405,1,0,0,0,7405,7408,1,
        0,0,0,7406,7407,5,160,0,0,7407,7409,3,860,430,0,7408,7406,1,0,0,
        0,7408,7409,1,0,0,0,7409,7411,1,0,0,0,7410,7397,1,0,0,0,7410,7399,
        1,0,0,0,7411,1055,1,0,0,0,7412,7413,3,1260,630,0,7413,7415,3,1068,
        534,0,7414,7416,3,1058,529,0,7415,7414,1,0,0,0,7415,7416,1,0,0,0,
        7416,1057,1,0,0,0,7417,7418,4,529,83,0,7418,7421,3,1060,530,0,7419,
        7421,3,1082,541,0,7420,7417,1,0,0,0,7420,7419,1,0,0,0,7421,1059,
        1,0,0,0,7422,7423,5,62,0,0,7423,7424,3,962,481,0,7424,1061,1,0,0,
        0,7425,7427,5,371,0,0,7426,7425,1,0,0,0,7426,7427,1,0,0,0,7427,7428,
        1,0,0,0,7428,7429,5,730,0,0,7429,1063,1,0,0,0,7430,7432,7,39,0,0,
        7431,7433,3,116,58,0,7432,7431,1,0,0,0,7432,7433,1,0,0,0,7433,7434,
        1,0,0,0,7434,7438,3,1090,545,0,7435,7437,3,1096,548,0,7436,7435,
        1,0,0,0,7437,7440,1,0,0,0,7438,7436,1,0,0,0,7438,7439,1,0,0,0,7439,
        7506,1,0,0,0,7440,7438,1,0,0,0,7441,7443,5,205,0,0,7442,7444,3,418,
        209,0,7443,7442,1,0,0,0,7443,7444,1,0,0,0,7444,7446,1,0,0,0,7445,
        7447,3,1270,635,0,7446,7445,1,0,0,0,7446,7447,1,0,0,0,7447,7448,
        1,0,0,0,7448,7452,3,1090,545,0,7449,7451,3,1104,552,0,7450,7449,
        1,0,0,0,7451,7454,1,0,0,0,7452,7450,1,0,0,0,7452,7453,1,0,0,0,7453,
        7506,1,0,0,0,7454,7452,1,0,0,0,7455,7457,5,523,0,0,7456,7458,3,418,
        209,0,7457,7456,1,0,0,0,7457,7458,1,0,0,0,7458,7460,1,0,0,0,7459,
        7461,3,1270,635,0,7460,7459,1,0,0,0,7460,7461,1,0,0,0,7461,7462,
        1,0,0,0,7462,7466,3,1090,545,0,7463,7465,3,1106,553,0,7464,7463,
        1,0,0,0,7465,7468,1,0,0,0,7466,7464,1,0,0,0,7466,7467,1,0,0,0,7467,
        7506,1,0,0,0,7468,7466,1,0,0,0,7469,7471,3,1066,533,0,7470,7469,
        1,0,0,0,7470,7471,1,0,0,0,7471,7503,1,0,0,0,7472,7473,5,420,0,0,
        7473,7479,5,265,0,0,7474,7476,5,609,0,0,7475,7477,3,418,209,0,7476,
        7475,1,0,0,0,7476,7477,1,0,0,0,7477,7479,1,0,0,0,7478,7472,1,0,0,
        0,7478,7474,1,0,0,0,7479,7481,1,0,0,0,7480,7482,3,116,58,0,7481,
        7480,1,0,0,0,7481,7482,1,0,0,0,7482,7483,1,0,0,0,7483,7487,3,1090,
        545,0,7484,7486,3,1096,548,0,7485,7484,1,0,0,0,7486,7489,1,0,0,0,
        7487,7485,1,0,0,0,7487,7488,1,0,0,0,7488,7504,1,0,0,0,7489,7487,
        1,0,0,0,7490,7491,5,199,0,0,7491,7493,5,265,0,0,7492,7494,3,1270,
        635,0,7493,7492,1,0,0,0,7493,7494,1,0,0,0,7494,7495,1,0,0,0,7495,
        7496,3,1086,543,0,7496,7497,3,1082,541,0,7497,7504,1,0,0,0,7498,
        7501,3,1060,530,0,7499,7500,4,532,84,0,7500,7502,3,1062,531,0,7501,
        7499,1,0,0,0,7501,7502,1,0,0,0,7502,7504,1,0,0,0,7503,7478,1,0,0,
        0,7503,7490,1,0,0,0,7503,7498,1,0,0,0,7504,7506,1,0,0,0,7505,7430,
        1,0,0,0,7505,7441,1,0,0,0,7505,7455,1,0,0,0,7505,7470,1,0,0,0,7506,
        1065,1,0,0,0,7507,7509,5,86,0,0,7508,7510,3,1346,673,0,7509,7508,
        1,0,0,0,7509,7510,1,0,0,0,7510,1067,1,0,0,0,7511,7536,3,1110,555,
        0,7512,7514,3,1070,535,0,7513,7512,1,0,0,0,7514,7517,1,0,0,0,7515,
        7513,1,0,0,0,7515,7516,1,0,0,0,7516,7537,1,0,0,0,7517,7515,1,0,0,
        0,7518,7520,3,1188,594,0,7519,7518,1,0,0,0,7519,7520,1,0,0,0,7520,
        7523,1,0,0,0,7521,7522,5,209,0,0,7522,7524,5,12,0,0,7523,7521,1,
        0,0,0,7523,7524,1,0,0,0,7524,7525,1,0,0,0,7525,7526,5,17,0,0,7526,
        7528,3,962,481,0,7527,7529,7,128,0,0,7528,7527,1,0,0,0,7528,7529,
        1,0,0,0,7529,7533,1,0,0,0,7530,7532,3,1070,535,0,7531,7530,1,0,0,
        0,7532,7535,1,0,0,0,7533,7531,1,0,0,0,7533,7534,1,0,0,0,7534,7537,
        1,0,0,0,7535,7533,1,0,0,0,7536,7515,1,0,0,0,7536,7519,1,0,0,0,7537,
        1069,1,0,0,0,7538,7540,5,371,0,0,7539,7538,1,0,0,0,7539,7540,1,0,
        0,0,7540,7541,1,0,0,0,7541,7600,3,1394,697,0,7542,7543,4,535,85,
        0,7543,7544,5,371,0,0,7544,7600,5,720,0,0,7545,7549,5,128,0,0,7546,
        7550,3,1078,539,0,7547,7548,4,535,86,0,7548,7550,3,962,481,0,7549,
        7546,1,0,0,0,7549,7547,1,0,0,0,7550,7600,1,0,0,0,7551,7552,5,383,
        0,0,7552,7553,5,614,0,0,7553,7555,5,372,0,0,7554,7556,3,910,455,
        0,7555,7554,1,0,0,0,7555,7556,1,0,0,0,7556,7600,1,0,0,0,7557,7600,
        5,24,0,0,7558,7559,5,501,0,0,7559,7560,5,128,0,0,7560,7600,5,627,
        0,0,7561,7563,5,420,0,0,7562,7561,1,0,0,0,7562,7563,1,0,0,0,7563,
        7564,1,0,0,0,7564,7600,5,265,0,0,7565,7567,5,609,0,0,7566,7568,5,
        265,0,0,7567,7566,1,0,0,0,7567,7568,1,0,0,0,7568,7600,1,0,0,0,7569,
        7570,5,75,0,0,7570,7600,3,1384,692,0,7571,7600,3,1188,594,0,7572,
        7573,5,74,0,0,7573,7600,3,1072,536,0,7574,7575,5,553,0,0,7575,7600,
        3,1074,537,0,7576,7577,5,707,0,0,7577,7600,3,1364,682,0,7578,7580,
        4,535,87,0,7579,7581,3,1066,533,0,7580,7579,1,0,0,0,7580,7581,1,
        0,0,0,7581,7582,1,0,0,0,7582,7600,3,1060,530,0,7583,7584,4,535,88,
        0,7584,7600,3,1062,531,0,7585,7586,4,535,89,0,7586,7588,5,798,0,
        0,7587,7589,5,750,0,0,7588,7587,1,0,0,0,7588,7589,1,0,0,0,7589,7590,
        1,0,0,0,7590,7600,3,1424,712,0,7591,7592,4,535,90,0,7592,7594,5,
        799,0,0,7593,7595,5,750,0,0,7594,7593,1,0,0,0,7594,7595,1,0,0,0,
        7595,7596,1,0,0,0,7596,7600,3,1424,712,0,7597,7598,4,535,91,0,7598,
        7600,3,1100,550,0,7599,7539,1,0,0,0,7599,7542,1,0,0,0,7599,7545,
        1,0,0,0,7599,7551,1,0,0,0,7599,7557,1,0,0,0,7599,7558,1,0,0,0,7599,
        7562,1,0,0,0,7599,7565,1,0,0,0,7599,7569,1,0,0,0,7599,7571,1,0,0,
        0,7599,7572,1,0,0,0,7599,7574,1,0,0,0,7599,7576,1,0,0,0,7599,7578,
        1,0,0,0,7599,7583,1,0,0,0,7599,7585,1,0,0,0,7599,7591,1,0,0,0,7599,
        7597,1,0,0,0,7600,1071,1,0,0,0,7601,7602,7,129,0,0,7602,1073,1,0,
        0,0,7603,7604,7,130,0,0,7604,1075,1,0,0,0,7605,7606,5,372,0,0,7606,
        7607,3,1130,565,0,7607,1077,1,0,0,0,7608,7611,3,1076,538,0,7609,
        7611,3,1368,684,0,7610,7608,1,0,0,0,7610,7609,1,0,0,0,7611,1079,
        1,0,0,0,7612,7614,5,609,0,0,7613,7615,5,265,0,0,7614,7613,1,0,0,
        0,7614,7615,1,0,0,0,7615,7627,1,0,0,0,7616,7617,5,75,0,0,7617,7627,
        3,1380,690,0,7618,7620,3,952,476,0,7619,7618,1,0,0,0,7619,7620,1,
        0,0,0,7620,7621,1,0,0,0,7621,7627,5,376,0,0,7622,7624,5,420,0,0,
        7623,7622,1,0,0,0,7623,7624,1,0,0,0,7624,7625,1,0,0,0,7625,7627,
        5,265,0,0,7626,7612,1,0,0,0,7626,7616,1,0,0,0,7626,7619,1,0,0,0,
        7626,7623,1,0,0,0,7627,1081,1,0,0,0,7628,7629,5,443,0,0,7629,7631,
        3,1322,661,0,7630,7632,3,1350,675,0,7631,7630,1,0,0,0,7631,7632,
        1,0,0,0,7632,7635,1,0,0,0,7633,7634,5,320,0,0,7634,7636,7,131,0,
        0,7635,7633,1,0,0,0,7635,7636,1,0,0,0,7636,7653,1,0,0,0,7637,7638,
        5,383,0,0,7638,7639,5,614,0,0,7639,7643,3,1084,542,0,7640,7641,5,
        383,0,0,7641,7642,5,133,0,0,7642,7644,3,1084,542,0,7643,7640,1,0,
        0,0,7643,7644,1,0,0,0,7644,7654,1,0,0,0,7645,7646,5,383,0,0,7646,
        7647,5,133,0,0,7647,7651,3,1084,542,0,7648,7649,5,383,0,0,7649,7650,
        5,614,0,0,7650,7652,3,1084,542,0,7651,7648,1,0,0,0,7651,7652,1,0,
        0,0,7652,7654,1,0,0,0,7653,7637,1,0,0,0,7653,7645,1,0,0,0,7653,7654,
        1,0,0,0,7654,1083,1,0,0,0,7655,7663,7,2,0,0,7656,7657,5,506,0,0,
        7657,7663,3,1394,697,0,7658,7659,5,506,0,0,7659,7663,5,128,0,0,7660,
        7661,5,373,0,0,7661,7663,5,3,0,0,7662,7655,1,0,0,0,7662,7656,1,0,
        0,0,7662,7658,1,0,0,0,7662,7660,1,0,0,0,7663,1085,1,0,0,0,7664,7665,
        5,776,0,0,7665,7670,3,1088,544,0,7666,7667,5,773,0,0,7667,7669,3,
        1088,544,0,7668,7666,1,0,0,0,7669,7672,1,0,0,0,7670,7668,1,0,0,0,
        7670,7671,1,0,0,0,7671,7673,1,0,0,0,7672,7670,1,0,0,0,7673,7674,
        5,777,0,0,7674,1087,1,0,0,0,7675,7677,3,1346,673,0,7676,7678,3,1116,
        558,0,7677,7676,1,0,0,0,7677,7678,1,0,0,0,7678,7680,1,0,0,0,7679,
        7681,3,340,170,0,7680,7679,1,0,0,0,7680,7681,1,0,0,0,7681,1089,1,
        0,0,0,7682,7683,5,776,0,0,7683,7688,3,1092,546,0,7684,7685,5,773,
        0,0,7685,7687,3,1092,546,0,7686,7684,1,0,0,0,7687,7690,1,0,0,0,7688,
        7686,1,0,0,0,7688,7689,1,0,0,0,7689,7691,1,0,0,0,7690,7688,1,0,0,
        0,7691,7692,5,777,0,0,7692,1091,1,0,0,0,7693,7700,3,1088,544,0,7694,
        7695,4,546,92,0,7695,7697,3,962,481,0,7696,7698,3,340,170,0,7697,
        7696,1,0,0,0,7697,7698,1,0,0,0,7698,7700,1,0,0,0,7699,7693,1,0,0,
        0,7699,7694,1,0,0,0,7700,1093,1,0,0,0,7701,7702,7,132,0,0,7702,1095,
        1,0,0,0,7703,7706,3,1098,549,0,7704,7706,3,1102,551,0,7705,7703,
        1,0,0,0,7705,7704,1,0,0,0,7706,1097,1,0,0,0,7707,7709,5,264,0,0,
        7708,7710,5,750,0,0,7709,7708,1,0,0,0,7709,7710,1,0,0,0,7710,7711,
        1,0,0,0,7711,7728,3,1358,679,0,7712,7713,5,75,0,0,7713,7728,3,1384,
        692,0,7714,7728,3,1100,550,0,7715,7716,4,549,93,0,7716,7718,5,798,
        0,0,7717,7719,5,750,0,0,7718,7717,1,0,0,0,7718,7719,1,0,0,0,7719,
        7720,1,0,0,0,7720,7728,3,1424,712,0,7721,7722,4,549,94,0,7722,7724,
        5,799,0,0,7723,7725,5,750,0,0,7724,7723,1,0,0,0,7724,7725,1,0,0,
        0,7725,7726,1,0,0,0,7726,7728,3,1424,712,0,7727,7707,1,0,0,0,7727,
        7712,1,0,0,0,7727,7714,1,0,0,0,7727,7715,1,0,0,0,7727,7721,1,0,0,
        0,7728,1099,1,0,0,0,7729,7730,7,133,0,0,7730,1101,1,0,0,0,7731,7732,
        7,134,0,0,7732,7733,3,1094,547,0,7733,1103,1,0,0,0,7734,7739,3,1098,
        549,0,7735,7736,5,645,0,0,7736,7737,5,401,0,0,7737,7739,3,1346,673,
        0,7738,7734,1,0,0,0,7738,7735,1,0,0,0,7739,1105,1,0,0,0,7740,7741,
        3,1098,549,0,7741,1107,1,0,0,0,7742,7743,3,1110,555,0,7743,7744,
        5,0,0,1,7744,1109,1,0,0,0,7745,7747,7,135,0,0,7746,7748,3,1116,558,
        0,7747,7746,1,0,0,0,7747,7748,1,0,0,0,7748,7750,1,0,0,0,7749,7751,
        3,1118,559,0,7750,7749,1,0,0,0,7750,7751,1,0,0,0,7751,7892,1,0,0,
        0,7752,7758,5,437,0,0,7753,7755,5,146,0,0,7754,7756,5,416,0,0,7755,
        7754,1,0,0,0,7755,7756,1,0,0,0,7756,7758,1,0,0,0,7757,7752,1,0,0,
        0,7757,7753,1,0,0,0,7758,7760,1,0,0,0,7759,7761,3,1404,702,0,7760,
        7759,1,0,0,0,7760,7761,1,0,0,0,7761,7763,1,0,0,0,7762,7764,3,1118,
        559,0,7763,7762,1,0,0,0,7763,7764,1,0,0,0,7764,7892,1,0,0,0,7765,
        7767,7,136,0,0,7766,7768,3,1400,700,0,7767,7766,1,0,0,0,7767,7768,
        1,0,0,0,7768,7770,1,0,0,0,7769,7771,3,1118,559,0,7770,7769,1,0,0,
        0,7770,7771,1,0,0,0,7771,7892,1,0,0,0,7772,7774,5,37,0,0,7773,7775,
        3,1116,558,0,7774,7773,1,0,0,0,7774,7775,1,0,0,0,7775,7892,1,0,0,
        0,7776,7892,7,137,0,0,7777,7779,5,60,0,0,7778,7780,3,1116,558,0,
        7779,7778,1,0,0,0,7779,7780,1,0,0,0,7780,7782,1,0,0,0,7781,7783,
        3,1120,560,0,7782,7781,1,0,0,0,7782,7783,1,0,0,0,7783,7892,1,0,0,
        0,7784,7786,3,1112,556,0,7785,7787,3,1116,558,0,7786,7785,1,0,0,
        0,7786,7787,1,0,0,0,7787,7789,1,0,0,0,7788,7790,5,32,0,0,7789,7788,
        1,0,0,0,7789,7790,1,0,0,0,7790,7892,1,0,0,0,7791,7793,5,32,0,0,7792,
        7794,3,1116,558,0,7793,7792,1,0,0,0,7793,7794,1,0,0,0,7794,7892,
        1,0,0,0,7795,7796,5,60,0,0,7796,7799,5,633,0,0,7797,7799,5,629,0,
        0,7798,7795,1,0,0,0,7798,7797,1,0,0,0,7799,7800,1,0,0,0,7800,7802,
        3,1116,558,0,7801,7803,3,1120,560,0,7802,7801,1,0,0,0,7802,7803,
        1,0,0,0,7803,7892,1,0,0,0,7804,7805,5,358,0,0,7805,7815,5,629,0,
        0,7806,7815,5,379,0,0,7807,7808,5,361,0,0,7808,7815,5,629,0,0,7809,
        7810,5,358,0,0,7810,7811,5,60,0,0,7811,7815,5,633,0,0,7812,7813,
        5,361,0,0,7813,7815,5,633,0,0,7814,7804,1,0,0,0,7814,7806,1,0,0,
        0,7814,7807,1,0,0,0,7814,7809,1,0,0,0,7814,7812,1,0,0,0,7815,7816,
        1,0,0,0,7816,7818,3,1116,558,0,7817,7819,5,32,0,0,7818,7817,1,0,
        0,0,7818,7819,1,0,0,0,7819,7892,1,0,0,0,7820,7821,5,628,0,0,7821,
        7892,3,1116,558,0,7822,7824,5,656,0,0,7823,7825,3,1116,558,0,7824,
        7823,1,0,0,0,7824,7825,1,0,0,0,7825,7827,1,0,0,0,7826,7828,3,1118,
        559,0,7827,7826,1,0,0,0,7827,7828,1,0,0,0,7828,7892,1,0,0,0,7829,
        7892,5,116,0,0,7830,7832,5,586,0,0,7831,7833,3,1128,564,0,7832,7831,
        1,0,0,0,7832,7833,1,0,0,0,7833,7892,1,0,0,0,7834,7836,5,583,0,0,
        7835,7837,3,1128,564,0,7836,7835,1,0,0,0,7836,7837,1,0,0,0,7837,
        7892,1,0,0,0,7838,7840,5,113,0,0,7839,7841,3,1128,564,0,7840,7839,
        1,0,0,0,7840,7841,1,0,0,0,7841,7892,1,0,0,0,7842,7892,5,587,0,0,
        7843,7845,5,39,0,0,7844,7846,3,1116,558,0,7845,7844,1,0,0,0,7845,
        7846,1,0,0,0,7846,7892,1,0,0,0,7847,7892,7,138,0,0,7848,7849,5,293,
        0,0,7849,7892,5,628,0,0,7850,7854,5,293,0,0,7851,7852,5,60,0,0,7852,
        7855,5,633,0,0,7853,7855,5,629,0,0,7854,7851,1,0,0,0,7854,7853,1,
        0,0,0,7854,7855,1,0,0,0,7855,7857,1,0,0,0,7856,7858,3,1120,560,0,
        7857,7856,1,0,0,0,7857,7858,1,0,0,0,7858,7892,1,0,0,0,7859,7861,
        5,589,0,0,7860,7862,3,1120,560,0,7861,7860,1,0,0,0,7861,7862,1,0,
        0,0,7862,7892,1,0,0,0,7863,7865,5,580,0,0,7864,7866,3,1116,558,0,
        7865,7864,1,0,0,0,7865,7866,1,0,0,0,7866,7868,1,0,0,0,7867,7869,
        3,1120,560,0,7868,7867,1,0,0,0,7868,7869,1,0,0,0,7869,7892,1,0,0,
        0,7870,7872,5,332,0,0,7871,7873,3,1120,560,0,7872,7871,1,0,0,0,7872,
        7873,1,0,0,0,7873,7892,1,0,0,0,7874,7876,5,291,0,0,7875,7877,3,1120,
        560,0,7876,7875,1,0,0,0,7876,7877,1,0,0,0,7877,7892,1,0,0,0,7878,
        7879,5,164,0,0,7879,7881,3,1376,688,0,7880,7882,3,1120,560,0,7881,
        7880,1,0,0,0,7881,7882,1,0,0,0,7882,7892,1,0,0,0,7883,7884,5,506,
        0,0,7884,7886,3,1376,688,0,7885,7887,3,1120,560,0,7886,7885,1,0,
        0,0,7886,7887,1,0,0,0,7887,7892,1,0,0,0,7888,7892,5,501,0,0,7889,
        7892,5,262,0,0,7890,7892,7,139,0,0,7891,7745,1,0,0,0,7891,7757,1,
        0,0,0,7891,7765,1,0,0,0,7891,7772,1,0,0,0,7891,7776,1,0,0,0,7891,
        7777,1,0,0,0,7891,7784,1,0,0,0,7891,7791,1,0,0,0,7891,7798,1,0,0,
        0,7891,7814,1,0,0,0,7891,7820,1,0,0,0,7891,7822,1,0,0,0,7891,7829,
        1,0,0,0,7891,7830,1,0,0,0,7891,7834,1,0,0,0,7891,7838,1,0,0,0,7891,
        7842,1,0,0,0,7891,7843,1,0,0,0,7891,7847,1,0,0,0,7891,7848,1,0,0,
        0,7891,7850,1,0,0,0,7891,7859,1,0,0,0,7891,7863,1,0,0,0,7891,7870,
        1,0,0,0,7891,7874,1,0,0,0,7891,7878,1,0,0,0,7891,7883,1,0,0,0,7891,
        7888,1,0,0,0,7891,7889,1,0,0,0,7891,7890,1,0,0,0,7892,1111,1,0,0,
        0,7893,7897,5,361,0,0,7894,7895,5,358,0,0,7895,7897,5,60,0,0,7896,
        7893,1,0,0,0,7896,7894,1,0,0,0,7897,1113,1,0,0,0,7898,7904,5,437,
        0,0,7899,7901,5,146,0,0,7900,7902,5,416,0,0,7901,7900,1,0,0,0,7901,
        7902,1,0,0,0,7902,7904,1,0,0,0,7903,7898,1,0,0,0,7903,7899,1,0,0,
        0,7904,1115,1,0,0,0,7905,7908,5,776,0,0,7906,7909,3,1364,682,0,7907,
        7909,5,790,0,0,7908,7906,1,0,0,0,7908,7907,1,0,0,0,7909,7910,1,0,
        0,0,7910,7911,5,777,0,0,7911,1117,1,0,0,0,7912,7914,7,140,0,0,7913,
        7912,1,0,0,0,7914,7915,1,0,0,0,7915,7913,1,0,0,0,7915,7916,1,0,0,
        0,7916,1119,1,0,0,0,7917,7932,3,1122,561,0,7918,7932,3,1124,562,
        0,7919,7932,5,46,0,0,7920,7921,3,950,475,0,7921,7923,3,1132,566,
        0,7922,7924,5,32,0,0,7923,7922,1,0,0,0,7923,7924,1,0,0,0,7924,7932,
        1,0,0,0,7925,7929,5,32,0,0,7926,7927,3,950,475,0,7927,7928,3,1132,
        566,0,7928,7930,1,0,0,0,7929,7926,1,0,0,0,7929,7930,1,0,0,0,7930,
        7932,1,0,0,0,7931,7917,1,0,0,0,7931,7918,1,0,0,0,7931,7919,1,0,0,
        0,7931,7920,1,0,0,0,7931,7925,1,0,0,0,7932,1121,1,0,0,0,7933,7935,
        5,19,0,0,7934,7936,5,32,0,0,7935,7934,1,0,0,0,7935,7936,1,0,0,0,
        7936,7940,1,0,0,0,7937,7938,5,32,0,0,7938,7940,5,19,0,0,7939,7933,
        1,0,0,0,7939,7937,1,0,0,0,7940,1123,1,0,0,0,7941,7943,5,606,0,0,
        7942,7944,5,32,0,0,7943,7942,1,0,0,0,7943,7944,1,0,0,0,7944,7948,
        1,0,0,0,7945,7946,5,32,0,0,7946,7948,5,606,0,0,7947,7941,1,0,0,0,
        7947,7945,1,0,0,0,7948,1125,1,0,0,0,7949,7950,5,776,0,0,7950,7951,
        3,1360,680,0,7951,7952,5,777,0,0,7952,1127,1,0,0,0,7953,7954,5,776,
        0,0,7954,7955,5,747,0,0,7955,7956,5,777,0,0,7956,1129,1,0,0,0,7957,
        7963,1,0,0,0,7958,7963,3,1414,707,0,7959,7960,5,776,0,0,7960,7961,
        5,747,0,0,7961,7963,5,777,0,0,7962,7957,1,0,0,0,7962,7958,1,0,0,
        0,7962,7959,1,0,0,0,7963,1131,1,0,0,0,7964,7969,3,1406,703,0,7965,
        7969,5,32,0,0,7966,7967,4,566,95,0,7967,7969,5,128,0,0,7968,7964,
        1,0,0,0,7968,7965,1,0,0,0,7968,7966,1,0,0,0,7969,1133,1,0,0,0,7970,
        7976,3,1406,703,0,7971,7972,4,567,96,0,7972,7976,5,128,0,0,7973,
        7974,4,567,97,0,7974,7976,5,32,0,0,7975,7970,1,0,0,0,7975,7971,1,
        0,0,0,7975,7973,1,0,0,0,7976,1135,1,0,0,0,7977,7984,3,1144,572,0,
        7978,7980,5,773,0,0,7979,7978,1,0,0,0,7979,7980,1,0,0,0,7980,7981,
        1,0,0,0,7981,7983,3,1144,572,0,7982,7979,1,0,0,0,7983,7986,1,0,0,
        0,7984,7982,1,0,0,0,7984,7985,1,0,0,0,7985,1137,1,0,0,0,7986,7984,
        1,0,0,0,7987,7989,3,1136,568,0,7988,7990,3,1140,570,0,7989,7988,
        1,0,0,0,7989,7990,1,0,0,0,7990,7993,1,0,0,0,7991,7993,3,1140,570,
        0,7992,7987,1,0,0,0,7992,7991,1,0,0,0,7993,1139,1,0,0,0,7994,7996,
        3,1154,577,0,7995,7997,3,92,46,0,7996,7995,1,0,0,0,7996,7997,1,0,
        0,0,7997,8000,1,0,0,0,7998,8000,3,92,46,0,7999,7994,1,0,0,0,7999,
        7998,1,0,0,0,8000,1141,1,0,0,0,8001,8003,3,1144,572,0,8002,8001,
        1,0,0,0,8003,8004,1,0,0,0,8004,8002,1,0,0,0,8004,8005,1,0,0,0,8005,
        1143,1,0,0,0,8006,8008,5,163,0,0,8007,8009,5,750,0,0,8008,8007,1,
        0,0,0,8008,8009,1,0,0,0,8009,8010,1,0,0,0,8010,8147,3,1314,657,0,
        8011,8012,4,572,98,0,8012,8014,5,721,0,0,8013,8015,3,1416,708,0,
        8014,8013,1,0,0,0,8014,8015,1,0,0,0,8015,8018,1,0,0,0,8016,8019,
        5,376,0,0,8017,8019,3,1406,703,0,8018,8016,1,0,0,0,8018,8017,1,0,
        0,0,8019,8147,1,0,0,0,8020,8022,5,323,0,0,8021,8023,5,750,0,0,8022,
        8021,1,0,0,0,8022,8023,1,0,0,0,8023,8024,1,0,0,0,8024,8147,3,1362,
        681,0,8025,8027,5,344,0,0,8026,8028,5,750,0,0,8027,8026,1,0,0,0,
        8027,8028,1,0,0,0,8028,8029,1,0,0,0,8029,8147,3,1362,681,0,8030,
        8032,5,25,0,0,8031,8033,5,750,0,0,8032,8031,1,0,0,0,8032,8033,1,
        0,0,0,8033,8034,1,0,0,0,8034,8147,3,1362,681,0,8035,8037,5,406,0,
        0,8036,8038,5,750,0,0,8037,8036,1,0,0,0,8037,8038,1,0,0,0,8038,8039,
        1,0,0,0,8039,8147,3,1378,689,0,8040,8042,5,75,0,0,8041,8043,5,750,
        0,0,8042,8041,1,0,0,0,8042,8043,1,0,0,0,8043,8044,1,0,0,0,8044,8147,
        3,1378,689,0,8045,8047,5,81,0,0,8046,8048,5,750,0,0,8047,8046,1,
        0,0,0,8047,8048,1,0,0,0,8048,8049,1,0,0,0,8049,8147,3,1380,690,0,
        8050,8052,5,158,0,0,8051,8053,5,750,0,0,8052,8051,1,0,0,0,8052,8053,
        1,0,0,0,8053,8054,1,0,0,0,8054,8147,3,1380,690,0,8055,8057,5,24,
        0,0,8056,8058,5,750,0,0,8057,8056,1,0,0,0,8057,8058,1,0,0,0,8058,
        8059,1,0,0,0,8059,8147,3,1362,681,0,8060,8062,5,399,0,0,8061,8063,
        5,750,0,0,8062,8061,1,0,0,0,8062,8063,1,0,0,0,8063,8064,1,0,0,0,
        8064,8147,3,1146,573,0,8065,8067,7,141,0,0,8066,8068,5,750,0,0,8067,
        8066,1,0,0,0,8067,8068,1,0,0,0,8068,8069,1,0,0,0,8069,8147,3,1146,
        573,0,8070,8072,7,142,0,0,8071,8073,5,750,0,0,8072,8071,1,0,0,0,
        8072,8073,1,0,0,0,8073,8074,1,0,0,0,8074,8147,3,1358,679,0,8075,
        8077,5,132,0,0,8076,8078,5,750,0,0,8077,8076,1,0,0,0,8077,8078,1,
        0,0,0,8078,8079,1,0,0,0,8079,8147,3,1358,679,0,8080,8082,5,486,0,
        0,8081,8083,5,750,0,0,8082,8081,1,0,0,0,8082,8083,1,0,0,0,8083,8084,
        1,0,0,0,8084,8147,7,143,0,0,8085,8087,5,608,0,0,8086,8088,5,750,
        0,0,8087,8086,1,0,0,0,8087,8088,1,0,0,0,8088,8089,1,0,0,0,8089,8090,
        5,776,0,0,8090,8091,3,1324,662,0,8091,8092,5,777,0,0,8092,8147,1,
        0,0,0,8093,8147,3,1152,576,0,8094,8147,3,1148,574,0,8095,8097,5,
        243,0,0,8096,8098,5,750,0,0,8097,8096,1,0,0,0,8097,8098,1,0,0,0,
        8098,8099,1,0,0,0,8099,8147,7,144,0,0,8100,8101,5,112,0,0,8101,8103,
        5,139,0,0,8102,8104,5,750,0,0,8103,8102,1,0,0,0,8103,8104,1,0,0,
        0,8104,8105,1,0,0,0,8105,8147,3,1380,690,0,8106,8107,5,236,0,0,8107,
        8109,5,139,0,0,8108,8110,5,750,0,0,8109,8108,1,0,0,0,8109,8110,1,
        0,0,0,8110,8111,1,0,0,0,8111,8147,3,1380,690,0,8112,8114,5,572,0,
        0,8113,8115,5,750,0,0,8114,8113,1,0,0,0,8114,8115,1,0,0,0,8115,8116,
        1,0,0,0,8116,8147,3,1346,673,0,8117,8118,5,553,0,0,8118,8147,7,145,
        0,0,8119,8121,5,84,0,0,8120,8122,5,750,0,0,8121,8120,1,0,0,0,8121,
        8122,1,0,0,0,8122,8123,1,0,0,0,8123,8147,3,1380,690,0,8124,8126,
        5,264,0,0,8125,8127,5,750,0,0,8126,8125,1,0,0,0,8126,8127,1,0,0,
        0,8127,8128,1,0,0,0,8128,8147,3,1362,681,0,8129,8130,4,572,99,0,
        8130,8131,5,543,0,0,8131,8147,5,592,0,0,8132,8133,4,572,100,0,8133,
        8135,5,798,0,0,8134,8136,5,750,0,0,8135,8134,1,0,0,0,8135,8136,1,
        0,0,0,8136,8137,1,0,0,0,8137,8147,3,1424,712,0,8138,8139,4,572,101,
        0,8139,8141,5,799,0,0,8140,8142,5,750,0,0,8141,8140,1,0,0,0,8141,
        8142,1,0,0,0,8142,8143,1,0,0,0,8143,8147,3,1424,712,0,8144,8145,
        4,572,102,0,8145,8147,3,148,74,0,8146,8006,1,0,0,0,8146,8011,1,0,
        0,0,8146,8020,1,0,0,0,8146,8025,1,0,0,0,8146,8030,1,0,0,0,8146,8035,
        1,0,0,0,8146,8040,1,0,0,0,8146,8045,1,0,0,0,8146,8050,1,0,0,0,8146,
        8055,1,0,0,0,8146,8060,1,0,0,0,8146,8065,1,0,0,0,8146,8070,1,0,0,
        0,8146,8075,1,0,0,0,8146,8080,1,0,0,0,8146,8085,1,0,0,0,8146,8093,
        1,0,0,0,8146,8094,1,0,0,0,8146,8095,1,0,0,0,8146,8100,1,0,0,0,8146,
        8106,1,0,0,0,8146,8112,1,0,0,0,8146,8117,1,0,0,0,8146,8119,1,0,0,
        0,8146,8124,1,0,0,0,8146,8129,1,0,0,0,8146,8132,1,0,0,0,8146,8138,
        1,0,0,0,8146,8144,1,0,0,0,8147,1145,1,0,0,0,8148,8151,3,1358,679,
        0,8149,8151,5,128,0,0,8150,8148,1,0,0,0,8150,8149,1,0,0,0,8151,1147,
        1,0,0,0,8152,8154,5,128,0,0,8153,8152,1,0,0,0,8153,8154,1,0,0,0,
        8154,8155,1,0,0,0,8155,8157,5,69,0,0,8156,8158,5,750,0,0,8157,8156,
        1,0,0,0,8157,8158,1,0,0,0,8158,8159,1,0,0,0,8159,8160,3,1134,567,
        0,8160,1149,1,0,0,0,8161,8163,5,128,0,0,8162,8161,1,0,0,0,8162,8163,
        1,0,0,0,8163,8164,1,0,0,0,8164,8166,5,158,0,0,8165,8167,5,750,0,
        0,8166,8165,1,0,0,0,8166,8167,1,0,0,0,8167,8168,1,0,0,0,8168,8169,
        3,1378,689,0,8169,1151,1,0,0,0,8170,8172,5,128,0,0,8171,8170,1,0,
        0,0,8171,8172,1,0,0,0,8172,8173,1,0,0,0,8173,8175,3,950,475,0,8174,
        8176,5,750,0,0,8175,8174,1,0,0,0,8175,8176,1,0,0,0,8176,8177,1,0,
        0,0,8177,8178,3,1132,566,0,8178,1153,1,0,0,0,8179,8180,5,405,0,0,
        8180,8181,5,45,0,0,8181,8184,3,1156,578,0,8182,8183,5,404,0,0,8183,
        8185,3,1360,680,0,8184,8182,1,0,0,0,8184,8185,1,0,0,0,8185,8187,
        1,0,0,0,8186,8188,3,1158,579,0,8187,8186,1,0,0,0,8187,8188,1,0,0,
        0,8188,8190,1,0,0,0,8189,8191,3,1162,581,0,8190,8189,1,0,0,0,8190,
        8191,1,0,0,0,8191,1155,1,0,0,0,8192,8194,5,277,0,0,8193,8192,1,0,
        0,0,8193,8194,1,0,0,0,8194,8195,1,0,0,0,8195,8197,5,265,0,0,8196,
        8198,3,1160,580,0,8197,8196,1,0,0,0,8197,8198,1,0,0,0,8198,8199,
        1,0,0,0,8199,8201,5,776,0,0,8200,8202,3,1348,674,0,8201,8200,1,0,
        0,0,8201,8202,1,0,0,0,8202,8203,1,0,0,0,8203,8226,5,777,0,0,8204,
        8206,5,277,0,0,8205,8204,1,0,0,0,8205,8206,1,0,0,0,8206,8207,1,0,
        0,0,8207,8208,5,220,0,0,8208,8209,5,776,0,0,8209,8210,3,870,435,
        0,8210,8211,5,777,0,0,8211,8226,1,0,0,0,8212,8223,7,146,0,0,8213,
        8214,5,776,0,0,8214,8215,3,870,435,0,8215,8216,5,777,0,0,8216,8224,
        1,0,0,0,8217,8218,5,71,0,0,8218,8220,5,776,0,0,8219,8221,3,1348,
        674,0,8220,8219,1,0,0,0,8220,8221,1,0,0,0,8221,8222,1,0,0,0,8222,
        8224,5,777,0,0,8223,8213,1,0,0,0,8223,8217,1,0,0,0,8224,8226,1,0,
        0,0,8225,8193,1,0,0,0,8225,8205,1,0,0,0,8225,8212,1,0,0,0,8226,1157,
        1,0,0,0,8227,8228,5,561,0,0,8228,8230,5,45,0,0,8229,8231,5,277,0,
        0,8230,8229,1,0,0,0,8230,8231,1,0,0,0,8231,8242,1,0,0,0,8232,8233,
        5,220,0,0,8233,8234,5,776,0,0,8234,8235,3,870,435,0,8235,8236,5,
        777,0,0,8236,8243,1,0,0,0,8237,8239,5,265,0,0,8238,8240,3,1160,580,
        0,8239,8238,1,0,0,0,8239,8240,1,0,0,0,8240,8241,1,0,0,0,8241,8243,
        3,1350,675,0,8242,8232,1,0,0,0,8242,8237,1,0,0,0,8243,8246,1,0,0,
        0,8244,8245,5,560,0,0,8245,8247,3,1360,680,0,8246,8244,1,0,0,0,8246,
        8247,1,0,0,0,8247,1159,1,0,0,0,8248,8249,5,9,0,0,8249,8250,5,750,
        0,0,8250,8251,3,1360,680,0,8251,1161,1,0,0,0,8252,8253,5,776,0,0,
        8253,8258,3,1164,582,0,8254,8255,5,773,0,0,8255,8257,3,1164,582,
        0,8256,8254,1,0,0,0,8257,8260,1,0,0,0,8258,8256,1,0,0,0,8258,8259,
        1,0,0,0,8259,8261,1,0,0,0,8260,8258,1,0,0,0,8261,8262,5,777,0,0,
        8262,1163,1,0,0,0,8263,8264,5,405,0,0,8264,8275,3,1346,673,0,8265,
        8266,5,626,0,0,8266,8267,5,273,0,0,8267,8270,5,581,0,0,8268,8271,
        3,1172,586,0,8269,8271,5,329,0,0,8270,8268,1,0,0,0,8270,8269,1,0,
        0,0,8271,8276,1,0,0,0,8272,8273,5,626,0,0,8273,8274,5,251,0,0,8274,
        8276,3,1166,583,0,8275,8265,1,0,0,0,8275,8272,1,0,0,0,8275,8276,
        1,0,0,0,8276,8280,1,0,0,0,8277,8279,3,1168,584,0,8278,8277,1,0,0,
        0,8279,8282,1,0,0,0,8280,8278,1,0,0,0,8280,8281,1,0,0,0,8281,8294,
        1,0,0,0,8282,8280,1,0,0,0,8283,8284,5,776,0,0,8284,8289,3,1170,585,
        0,8285,8286,5,773,0,0,8286,8288,3,1170,585,0,8287,8285,1,0,0,0,8288,
        8291,1,0,0,0,8289,8287,1,0,0,0,8289,8290,1,0,0,0,8290,8292,1,0,0,
        0,8291,8289,1,0,0,0,8292,8293,5,777,0,0,8293,8295,1,0,0,0,8294,8283,
        1,0,0,0,8294,8295,1,0,0,0,8295,1165,1,0,0,0,8296,8309,3,1172,586,
        0,8297,8298,5,776,0,0,8298,8303,3,1172,586,0,8299,8300,5,773,0,0,
        8300,8302,3,1172,586,0,8301,8299,1,0,0,0,8302,8305,1,0,0,0,8303,
        8301,1,0,0,0,8303,8304,1,0,0,0,8304,8306,1,0,0,0,8305,8303,1,0,0,
        0,8306,8307,5,777,0,0,8307,8309,1,0,0,0,8308,8296,1,0,0,0,8308,8297,
        1,0,0,0,8309,1167,1,0,0,0,8310,8312,5,572,0,0,8311,8313,5,750,0,
        0,8312,8311,1,0,0,0,8312,8313,1,0,0,0,8313,8314,1,0,0,0,8314,8345,
        3,1346,673,0,8315,8317,5,553,0,0,8316,8315,1,0,0,0,8316,8317,1,0,
        0,0,8317,8318,1,0,0,0,8318,8320,5,163,0,0,8319,8321,5,750,0,0,8320,
        8319,1,0,0,0,8320,8321,1,0,0,0,8321,8322,1,0,0,0,8322,8345,3,1314,
        657,0,8323,8325,5,368,0,0,8324,8326,5,750,0,0,8325,8324,1,0,0,0,
        8325,8326,1,0,0,0,8326,8327,1,0,0,0,8327,8345,3,1360,680,0,8328,
        8330,7,147,0,0,8329,8331,5,750,0,0,8330,8329,1,0,0,0,8330,8331,1,
        0,0,0,8331,8332,1,0,0,0,8332,8345,3,1360,680,0,8333,8334,7,148,0,
        0,8334,8336,5,139,0,0,8335,8337,5,750,0,0,8336,8335,1,0,0,0,8336,
        8337,1,0,0,0,8337,8338,1,0,0,0,8338,8345,3,1384,692,0,8339,8341,
        5,75,0,0,8340,8342,5,750,0,0,8341,8340,1,0,0,0,8341,8342,1,0,0,0,
        8342,8343,1,0,0,0,8343,8345,3,1384,692,0,8344,8310,1,0,0,0,8344,
        8316,1,0,0,0,8344,8323,1,0,0,0,8344,8328,1,0,0,0,8344,8333,1,0,0,
        0,8344,8339,1,0,0,0,8345,1169,1,0,0,0,8346,8347,5,561,0,0,8347,8351,
        3,1406,703,0,8348,8350,3,1168,584,0,8349,8348,1,0,0,0,8350,8353,
        1,0,0,0,8351,8349,1,0,0,0,8351,8352,1,0,0,0,8352,1171,1,0,0,0,8353,
        8351,1,0,0,0,8354,8355,5,776,0,0,8355,8360,3,1174,587,0,8356,8357,
        5,773,0,0,8357,8359,3,1174,587,0,8358,8356,1,0,0,0,8359,8362,1,0,
        0,0,8360,8358,1,0,0,0,8360,8361,1,0,0,0,8361,8363,1,0,0,0,8362,8360,
        1,0,0,0,8363,8364,5,777,0,0,8364,1173,1,0,0,0,8365,8368,3,870,435,
        0,8366,8368,5,329,0,0,8367,8365,1,0,0,0,8367,8366,1,0,0,0,8368,1175,
        1,0,0,0,8369,8370,5,130,0,0,8370,8371,5,750,0,0,8371,8372,3,1246,
        623,0,8372,1177,1,0,0,0,8373,8374,5,231,0,0,8374,8375,5,174,0,0,
        8375,1179,1,0,0,0,8376,8377,5,231,0,0,8377,8378,3,952,476,0,8378,
        8379,5,174,0,0,8379,1181,1,0,0,0,8380,8381,5,232,0,0,8381,8382,5,
        610,0,0,8382,8383,5,618,0,0,8383,1183,1,0,0,0,8384,8386,7,149,0,
        0,8385,8384,1,0,0,0,8385,8386,1,0,0,0,8386,8387,1,0,0,0,8387,8388,
        3,1186,593,0,8388,1185,1,0,0,0,8389,8390,3,1328,664,0,8390,8391,
        3,1190,595,0,8391,1187,1,0,0,0,8392,8393,5,69,0,0,8393,8394,3,1134,
        567,0,8394,1189,1,0,0,0,8395,8397,3,1110,555,0,8396,8398,3,1188,
        594,0,8397,8396,1,0,0,0,8397,8398,1,0,0,0,8398,1191,1,0,0,0,8399,
        8400,5,776,0,0,8400,8401,3,1278,639,0,8401,8402,5,773,0,0,8402,8403,
        3,1278,639,0,8403,8404,5,777,0,0,8404,1193,1,0,0,0,8405,8410,3,1294,
        647,0,8406,8407,5,773,0,0,8407,8409,3,1294,647,0,8408,8406,1,0,0,
        0,8409,8412,1,0,0,0,8410,8408,1,0,0,0,8410,8411,1,0,0,0,8411,1195,
        1,0,0,0,8412,8410,1,0,0,0,8413,8418,3,1198,599,0,8414,8415,5,773,
        0,0,8415,8417,3,1198,599,0,8416,8414,1,0,0,0,8417,8420,1,0,0,0,8418,
        8416,1,0,0,0,8418,8419,1,0,0,0,8419,1197,1,0,0,0,8420,8418,1,0,0,
        0,8421,8422,3,1266,633,0,8422,8425,5,750,0,0,8423,8426,3,860,430,
        0,8424,8426,5,128,0,0,8425,8423,1,0,0,0,8425,8424,1,0,0,0,8426,1199,
        1,0,0,0,8427,8428,3,950,475,0,8428,8429,3,1132,566,0,8429,1201,1,
        0,0,0,8430,8432,5,71,0,0,8431,8433,3,1204,602,0,8432,8431,1,0,0,
        0,8433,8434,1,0,0,0,8434,8432,1,0,0,0,8434,8435,1,0,0,0,8435,1203,
        1,0,0,0,8436,8437,5,579,0,0,8437,8438,5,45,0,0,8438,8449,3,1380,
        690,0,8439,8441,5,392,0,0,8440,8439,1,0,0,0,8440,8441,1,0,0,0,8441,
        8442,1,0,0,0,8442,8443,5,157,0,0,8443,8444,5,45,0,0,8444,8449,3,
        1380,690,0,8445,8446,5,167,0,0,8446,8447,5,45,0,0,8447,8449,3,1380,
        690,0,8448,8436,1,0,0,0,8448,8440,1,0,0,0,8448,8445,1,0,0,0,8449,
        1205,1,0,0,0,8450,8452,5,278,0,0,8451,8453,3,1208,604,0,8452,8451,
        1,0,0,0,8453,8454,1,0,0,0,8454,8452,1,0,0,0,8454,8455,1,0,0,0,8455,
        1207,1,0,0,0,8456,8457,7,150,0,0,8457,8458,5,45,0,0,8458,8459,3,
        1380,690,0,8459,1209,1,0,0,0,8460,8465,3,1246,623,0,8461,8462,5,
        773,0,0,8462,8464,3,1246,623,0,8463,8461,1,0,0,0,8464,8467,1,0,0,
        0,8465,8463,1,0,0,0,8465,8466,1,0,0,0,8466,1211,1,0,0,0,8467,8465,
        1,0,0,0,8468,8473,3,1214,607,0,8469,8470,5,773,0,0,8470,8472,3,1214,
        607,0,8471,8469,1,0,0,0,8472,8475,1,0,0,0,8473,8471,1,0,0,0,8473,
        8474,1,0,0,0,8474,1213,1,0,0,0,8475,8473,1,0,0,0,8476,8486,3,1246,
        623,0,8477,8479,3,1218,609,0,8478,8480,3,1216,608,0,8479,8478,1,
        0,0,0,8479,8480,1,0,0,0,8480,8487,1,0,0,0,8481,8483,3,1224,612,0,
        8482,8484,3,1232,616,0,8483,8482,1,0,0,0,8483,8484,1,0,0,0,8484,
        8487,1,0,0,0,8485,8487,3,1216,608,0,8486,8477,1,0,0,0,8486,8481,
        1,0,0,0,8486,8485,1,0,0,0,8486,8487,1,0,0,0,8487,1215,1,0,0,0,8488,
        8489,5,15,0,0,8489,8492,3,1218,609,0,8490,8491,5,15,0,0,8491,8493,
        3,1218,609,0,8492,8490,1,0,0,0,8492,8493,1,0,0,0,8493,1217,1,0,0,
        0,8494,8501,3,1220,610,0,8495,8501,3,1222,611,0,8496,8501,3,1224,
        612,0,8497,8501,3,1226,613,0,8498,8501,3,1228,614,0,8499,8501,3,
        1230,615,0,8500,8494,1,0,0,0,8500,8495,1,0,0,0,8500,8496,1,0,0,0,
        8500,8497,1,0,0,0,8500,8498,1,0,0,0,8500,8499,1,0,0,0,8501,1219,
        1,0,0,0,8502,8503,5,230,0,0,8503,8504,5,45,0,0,8504,8505,3,1378,
        689,0,8505,1221,1,0,0,0,8506,8507,5,230,0,0,8507,8508,5,45,0,0,8508,
        8509,5,734,0,0,8509,8510,5,406,0,0,8510,1223,1,0,0,0,8511,8512,5,
        230,0,0,8512,8513,5,645,0,0,8513,8514,3,1406,703,0,8514,1225,1,0,
        0,0,8515,8516,5,230,0,0,8516,8517,5,645,0,0,8517,8518,3,1406,703,
        0,8518,8519,5,17,0,0,8519,8520,3,1382,691,0,8520,1227,1,0,0,0,8521,
        8522,5,230,0,0,8522,8523,5,645,0,0,8523,8524,3,1406,703,0,8524,8525,
        5,45,0,0,8525,8526,3,1378,689,0,8526,1229,1,0,0,0,8527,8528,5,230,
        0,0,8528,8529,5,645,0,0,8529,8530,3,1406,703,0,8530,8531,5,45,0,
        0,8531,8532,5,734,0,0,8532,8533,5,406,0,0,8533,1231,1,0,0,0,8534,
        8535,5,841,0,0,8535,8539,5,835,0,0,8536,8540,3,1222,611,0,8537,8540,
        3,1226,613,0,8538,8540,3,1220,610,0,8539,8536,1,0,0,0,8539,8537,
        1,0,0,0,8539,8538,1,0,0,0,8540,1233,1,0,0,0,8541,8542,5,727,0,0,
        8542,8543,5,101,0,0,8543,8544,5,406,0,0,8544,1235,1,0,0,0,8545,8546,
        5,141,0,0,8546,8547,5,728,0,0,8547,8548,5,406,0,0,8548,1237,1,0,
        0,0,8549,8550,3,1240,620,0,8550,8551,5,838,0,0,8551,8552,5,839,0,
        0,8552,8565,1,0,0,0,8553,8554,3,1240,620,0,8554,8555,5,840,0,0,8555,
        8565,1,0,0,0,8556,8557,3,1240,620,0,8557,8558,5,837,0,0,8558,8559,
        5,839,0,0,8559,8560,5,506,0,0,8560,8561,5,842,0,0,8561,8562,5,17,
        0,0,8562,8563,3,1382,691,0,8563,8565,1,0,0,0,8564,8549,1,0,0,0,8564,
        8553,1,0,0,0,8564,8556,1,0,0,0,8565,1239,1,0,0,0,8566,8567,3,1390,
        695,0,8567,8568,5,836,0,0,8568,1241,1,0,0,0,8569,8570,5,458,0,0,
        8570,8571,3,1380,690,0,8571,1243,1,0,0,0,8572,8574,3,1406,703,0,
        8573,8575,3,930,465,0,8574,8573,1,0,0,0,8574,8575,1,0,0,0,8575,1245,
        1,0,0,0,8576,8582,3,1244,622,0,8577,8579,5,105,0,0,8578,8580,3,1414,
        707,0,8579,8578,1,0,0,0,8579,8580,1,0,0,0,8580,8582,1,0,0,0,8581,
        8576,1,0,0,0,8581,8577,1,0,0,0,8582,1247,1,0,0,0,8583,8584,5,275,
        0,0,8584,8585,3,1378,689,0,8585,1249,1,0,0,0,8586,8589,3,1248,624,
        0,8587,8589,3,368,184,0,8588,8586,1,0,0,0,8588,8587,1,0,0,0,8589,
        1251,1,0,0,0,8590,8591,7,151,0,0,8591,1253,1,0,0,0,8592,8593,7,152,
        0,0,8593,1255,1,0,0,0,8594,8595,5,405,0,0,8595,8596,3,1350,675,0,
        8596,1257,1,0,0,0,8597,8603,3,1356,678,0,8598,8600,3,1352,676,0,
        8599,8601,3,1356,678,0,8600,8599,1,0,0,0,8600,8601,1,0,0,0,8601,
        8603,1,0,0,0,8602,8597,1,0,0,0,8602,8598,1,0,0,0,8603,1259,1,0,0,
        0,8604,8605,3,1346,673,0,8605,1261,1,0,0,0,8606,8607,3,1346,673,
        0,8607,1263,1,0,0,0,8608,8609,5,776,0,0,8609,8614,3,1262,631,0,8610,
        8611,5,773,0,0,8611,8613,3,1262,631,0,8612,8610,1,0,0,0,8613,8616,
        1,0,0,0,8614,8612,1,0,0,0,8614,8615,1,0,0,0,8615,8617,1,0,0,0,8616,
        8614,1,0,0,0,8617,8618,5,777,0,0,8618,1265,1,0,0,0,8619,8620,3,1258,
        629,0,8620,1267,1,0,0,0,8621,8624,3,1266,633,0,8622,8624,3,1274,
        637,0,8623,8621,1,0,0,0,8623,8622,1,0,0,0,8624,1269,1,0,0,0,8625,
        8626,3,1346,673,0,8626,1271,1,0,0,0,8627,8628,3,1258,629,0,8628,
        1273,1,0,0,0,8629,8630,3,1346,673,0,8630,8634,5,772,0,0,8631,8632,
        3,1346,673,0,8632,8633,5,772,0,0,8633,8635,1,0,0,0,8634,8631,1,0,
        0,0,8634,8635,1,0,0,0,8635,8636,1,0,0,0,8636,8637,5,760,0,0,8637,
        1275,1,0,0,0,8638,8639,3,1346,673,0,8639,1277,1,0,0,0,8640,8641,
        3,1346,673,0,8641,1279,1,0,0,0,8642,8643,3,1352,676,0,8643,1281,
        1,0,0,0,8644,8645,3,1352,676,0,8645,1283,1,0,0,0,8646,8647,3,1352,
        676,0,8647,1285,1,0,0,0,8648,8649,3,1352,676,0,8649,1287,1,0,0,0,
        8650,8651,3,1352,676,0,8651,1289,1,0,0,0,8652,8653,3,1352,676,0,
        8653,1291,1,0,0,0,8654,8657,3,1352,676,0,8655,8657,3,1356,678,0,
        8656,8654,1,0,0,0,8656,8655,1,0,0,0,8657,1293,1,0,0,0,8658,8661,
        3,1352,676,0,8659,8661,3,1356,678,0,8660,8658,1,0,0,0,8660,8659,
        1,0,0,0,8661,1295,1,0,0,0,8662,8663,3,1346,673,0,8663,1297,1,0,0,
        0,8664,8665,3,1346,673,0,8665,1299,1,0,0,0,8666,8667,3,1346,673,
        0,8667,1301,1,0,0,0,8668,8669,3,1346,673,0,8669,1303,1,0,0,0,8670,
        8671,3,1352,676,0,8671,1305,1,0,0,0,8672,8673,3,1352,676,0,8673,
        1307,1,0,0,0,8674,8675,3,1346,673,0,8675,1309,1,0,0,0,8676,8677,
        3,1406,703,0,8677,1311,1,0,0,0,8678,8679,3,1406,703,0,8679,1313,
        1,0,0,0,8680,8681,3,1406,703,0,8681,1315,1,0,0,0,8682,8685,3,1352,
        676,0,8683,8685,3,1356,678,0,8684,8682,1,0,0,0,8684,8683,1,0,0,0,
        8685,1317,1,0,0,0,8686,8687,3,1278,639,0,8687,8688,3,1356,678,0,
        8688,1319,1,0,0,0,8689,8697,3,1346,673,0,8690,8691,5,772,0,0,8691,
        8698,5,760,0,0,8692,8695,3,1356,678,0,8693,8694,5,772,0,0,8694,8696,
        5,760,0,0,8695,8693,1,0,0,0,8695,8696,1,0,0,0,8696,8698,1,0,0,0,
        8697,8690,1,0,0,0,8697,8692,1,0,0,0,8697,8698,1,0,0,0,8698,1321,
        1,0,0,0,8699,8702,3,1352,676,0,8700,8702,3,1356,678,0,8701,8699,
        1,0,0,0,8701,8700,1,0,0,0,8702,1323,1,0,0,0,8703,8708,3,1322,661,
        0,8704,8705,5,773,0,0,8705,8707,3,1322,661,0,8706,8704,1,0,0,0,8707,
        8710,1,0,0,0,8708,8706,1,0,0,0,8708,8709,1,0,0,0,8709,1325,1,0,0,
        0,8710,8708,1,0,0,0,8711,8716,3,1320,660,0,8712,8713,5,773,0,0,8713,
        8715,3,1320,660,0,8714,8712,1,0,0,0,8715,8718,1,0,0,0,8716,8714,
        1,0,0,0,8716,8717,1,0,0,0,8717,1327,1,0,0,0,8718,8716,1,0,0,0,8719,
        8720,3,1346,673,0,8720,1329,1,0,0,0,8721,8724,3,1344,672,0,8722,
        8724,3,1432,716,0,8723,8721,1,0,0,0,8723,8722,1,0,0,0,8724,1331,
        1,0,0,0,8725,8726,3,1330,665,0,8726,1333,1,0,0,0,8727,8730,3,1344,
        672,0,8728,8730,3,1438,719,0,8729,8727,1,0,0,0,8729,8728,1,0,0,0,
        8730,1335,1,0,0,0,8731,8732,3,1346,673,0,8732,1337,1,0,0,0,8733,
        8734,3,1378,689,0,8734,1339,1,0,0,0,8735,8736,3,1346,673,0,8736,
        1341,1,0,0,0,8737,8738,3,1346,673,0,8738,1343,1,0,0,0,8739,8743,
        7,153,0,0,8740,8741,4,672,103,0,8741,8743,5,851,0,0,8742,8739,1,
        0,0,0,8742,8740,1,0,0,0,8743,1345,1,0,0,0,8744,8747,3,1344,672,0,
        8745,8747,3,1426,713,0,8746,8744,1,0,0,0,8746,8745,1,0,0,0,8747,
        1347,1,0,0,0,8748,8753,3,1346,673,0,8749,8750,5,773,0,0,8750,8752,
        3,1346,673,0,8751,8749,1,0,0,0,8752,8755,1,0,0,0,8753,8751,1,0,0,
        0,8753,8754,1,0,0,0,8754,1349,1,0,0,0,8755,8753,1,0,0,0,8756,8757,
        5,776,0,0,8757,8758,3,1348,674,0,8758,8759,5,777,0,0,8759,1351,1,
        0,0,0,8760,8762,3,1346,673,0,8761,8763,3,1356,678,0,8762,8761,1,
        0,0,0,8762,8763,1,0,0,0,8763,1353,1,0,0,0,8764,8769,3,1346,673,0,
        8765,8767,3,1356,678,0,8766,8768,3,1356,678,0,8767,8766,1,0,0,0,
        8767,8768,1,0,0,0,8768,8770,1,0,0,0,8769,8765,1,0,0,0,8769,8770,
        1,0,0,0,8770,1355,1,0,0,0,8771,8772,5,772,0,0,8772,8773,3,1346,673,
        0,8773,1357,1,0,0,0,8774,8775,7,154,0,0,8775,1359,1,0,0,0,8776,8777,
        7,155,0,0,8777,1361,1,0,0,0,8778,8779,7,156,0,0,8779,1363,1,0,0,
        0,8780,8786,5,747,0,0,8781,8782,4,682,104,0,8782,8786,5,788,0,0,
        8783,8786,5,749,0,0,8784,8786,5,748,0,0,8785,8780,1,0,0,0,8785,8781,
        1,0,0,0,8785,8783,1,0,0,0,8785,8784,1,0,0,0,8786,1365,1,0,0,0,8787,
        8793,3,1370,685,0,8788,8789,5,758,0,0,8789,8793,3,1358,679,0,8790,
        8791,5,759,0,0,8791,8793,3,1358,679,0,8792,8787,1,0,0,0,8792,8788,
        1,0,0,0,8792,8790,1,0,0,0,8793,1367,1,0,0,0,8794,8798,3,1366,683,
        0,8795,8796,4,684,105,0,8796,8798,3,1374,687,0,8797,8794,1,0,0,0,
        8797,8795,1,0,0,0,8798,1369,1,0,0,0,8799,8809,3,1384,692,0,8800,
        8809,3,1390,695,0,8801,8809,3,1398,699,0,8802,8809,3,1394,697,0,
        8803,8809,3,1392,696,0,8804,8806,5,847,0,0,8805,8804,1,0,0,0,8805,
        8806,1,0,0,0,8806,8807,1,0,0,0,8807,8809,7,157,0,0,8808,8799,1,0,
        0,0,8808,8800,1,0,0,0,8808,8801,1,0,0,0,8808,8802,1,0,0,0,8808,8803,
        1,0,0,0,8808,8805,1,0,0,0,8809,1371,1,0,0,0,8810,8814,3,1370,685,
        0,8811,8812,4,686,106,0,8812,8814,3,1374,687,0,8813,8810,1,0,0,0,
        8813,8811,1,0,0,0,8814,1373,1,0,0,0,8815,8816,5,376,0,0,8816,1375,
        1,0,0,0,8817,8818,5,776,0,0,8818,8823,3,1380,690,0,8819,8820,5,773,
        0,0,8820,8822,3,1380,690,0,8821,8819,1,0,0,0,8822,8825,1,0,0,0,8823,
        8821,1,0,0,0,8823,8824,1,0,0,0,8824,8826,1,0,0,0,8825,8823,1,0,0,
        0,8826,8827,5,777,0,0,8827,1377,1,0,0,0,8828,8832,5,852,0,0,8829,
        8830,4,689,107,0,8830,8832,5,851,0,0,8831,8828,1,0,0,0,8831,8829,
        1,0,0,0,8832,1379,1,0,0,0,8833,8837,3,1378,689,0,8834,8837,5,788,
        0,0,8835,8837,5,789,0,0,8836,8833,1,0,0,0,8836,8834,1,0,0,0,8836,
        8835,1,0,0,0,8837,1381,1,0,0,0,8838,8842,3,1378,689,0,8839,8840,
        4,691,108,0,8840,8842,5,788,0,0,8841,8838,1,0,0,0,8841,8839,1,0,
        0,0,8842,1383,1,0,0,0,8843,8845,5,847,0,0,8844,8843,1,0,0,0,8844,
        8845,1,0,0,0,8845,8846,1,0,0,0,8846,8849,3,1378,689,0,8847,8849,
        5,849,0,0,8848,8844,1,0,0,0,8848,8847,1,0,0,0,8849,8853,1,0,0,0,
        8850,8852,3,1378,689,0,8851,8850,1,0,0,0,8852,8855,1,0,0,0,8853,
        8851,1,0,0,0,8853,8854,1,0,0,0,8854,1385,1,0,0,0,8855,8853,1,0,0,
        0,8856,8857,3,1378,689,0,8857,1387,1,0,0,0,8858,8863,3,1378,689,
        0,8859,8860,5,773,0,0,8860,8862,3,1378,689,0,8861,8859,1,0,0,0,8862,
        8865,1,0,0,0,8863,8861,1,0,0,0,8863,8864,1,0,0,0,8864,1389,1,0,0,
        0,8865,8863,1,0,0,0,8866,8870,3,1396,698,0,8867,8870,5,790,0,0,8868,
        8870,5,791,0,0,8869,8866,1,0,0,0,8869,8867,1,0,0,0,8869,8868,1,0,
        0,0,8870,1391,1,0,0,0,8871,8872,7,158,0,0,8872,1393,1,0,0,0,8873,
        8874,7,159,0,0,8874,1395,1,0,0,0,8875,8876,7,160,0,0,8876,1397,1,
        0,0,0,8877,8878,5,116,0,0,8878,8884,5,852,0,0,8879,8880,5,586,0,
        0,8880,8884,5,852,0,0,8881,8882,5,583,0,0,8882,8884,5,852,0,0,8883,
        8877,1,0,0,0,8883,8879,1,0,0,0,8883,8881,1,0,0,0,8884,1399,1,0,0,
        0,8885,8888,3,1116,558,0,8886,8888,3,1404,702,0,8887,8885,1,0,0,
        0,8887,8886,1,0,0,0,8888,1401,1,0,0,0,8889,8890,3,1404,702,0,8890,
        1403,1,0,0,0,8891,8892,5,776,0,0,8892,8893,5,747,0,0,8893,8894,5,
        773,0,0,8894,8895,5,747,0,0,8895,8896,5,777,0,0,8896,1405,1,0,0,
        0,8897,8900,3,1346,673,0,8898,8900,3,1378,689,0,8899,8897,1,0,0,
        0,8899,8898,1,0,0,0,8900,1407,1,0,0,0,8901,8904,3,1344,672,0,8902,
        8904,3,1440,720,0,8903,8901,1,0,0,0,8903,8902,1,0,0,0,8904,1409,
        1,0,0,0,8905,8908,3,1334,667,0,8906,8908,3,1378,689,0,8907,8905,
        1,0,0,0,8907,8906,1,0,0,0,8908,1411,1,0,0,0,8909,8912,3,1364,682,
        0,8910,8912,3,1344,672,0,8911,8909,1,0,0,0,8911,8910,1,0,0,0,8912,
        1413,1,0,0,0,8913,8914,5,776,0,0,8914,8915,5,777,0,0,8915,1415,1,
        0,0,0,8916,8917,7,161,0,0,8917,1417,1,0,0,0,8918,8919,7,162,0,0,
        8919,1419,1,0,0,0,8920,8921,5,214,0,0,8921,8927,5,772,0,0,8922,8923,
        5,284,0,0,8923,8927,5,772,0,0,8924,8925,5,502,0,0,8925,8927,5,772,
        0,0,8926,8920,1,0,0,0,8926,8922,1,0,0,0,8926,8924,1,0,0,0,8927,1421,
        1,0,0,0,8928,8929,7,162,0,0,8929,8930,5,772,0,0,8930,1423,1,0,0,
        0,8931,8932,3,1378,689,0,8932,1425,1,0,0,0,8933,8940,4,713,109,0,
        8934,8941,3,1432,716,0,8935,8941,3,1444,722,0,8936,8941,5,173,0,
        0,8937,8941,5,510,0,0,8938,8939,4,713,110,0,8939,8941,5,714,0,0,
        8940,8934,1,0,0,0,8940,8935,1,0,0,0,8940,8936,1,0,0,0,8940,8937,
        1,0,0,0,8940,8938,1,0,0,0,8941,8950,1,0,0,0,8942,8948,3,1436,718,
        0,8943,8948,3,1428,714,0,8944,8948,3,1430,715,0,8945,8948,3,1434,
        717,0,8946,8948,3,1442,721,0,8947,8942,1,0,0,0,8947,8943,1,0,0,0,
        8947,8944,1,0,0,0,8947,8945,1,0,0,0,8947,8946,1,0,0,0,8948,8950,
        1,0,0,0,8949,8933,1,0,0,0,8949,8947,1,0,0,0,8950,1427,1,0,0,0,8951,
        8952,7,163,0,0,8952,1429,1,0,0,0,8953,8954,7,164,0,0,8954,1431,1,
        0,0,0,8955,8966,4,716,111,0,8956,8967,3,1446,723,0,8957,8967,5,170,
        0,0,8958,8967,5,188,0,0,8959,8967,5,369,0,0,8960,8967,5,423,0,0,
        8961,8967,5,427,0,0,8962,8967,5,451,0,0,8963,8967,5,459,0,0,8964,
        8967,5,709,0,0,8965,8967,5,565,0,0,8966,8956,1,0,0,0,8966,8957,1,
        0,0,0,8966,8958,1,0,0,0,8966,8959,1,0,0,0,8966,8960,1,0,0,0,8966,
        8961,1,0,0,0,8966,8962,1,0,0,0,8966,8963,1,0,0,0,8966,8964,1,0,0,
        0,8966,8965,1,0,0,0,8967,8974,1,0,0,0,8968,8972,3,1436,718,0,8969,
        8972,3,1434,717,0,8970,8972,3,1442,721,0,8971,8968,1,0,0,0,8971,
        8969,1,0,0,0,8971,8970,1,0,0,0,8972,8974,1,0,0,0,8973,8955,1,0,0,
        0,8973,8971,1,0,0,0,8974,1433,1,0,0,0,8975,8976,7,165,0,0,8976,1435,
        1,0,0,0,8977,8981,7,166,0,0,8978,8979,4,718,112,0,8979,8981,7,167,
        0,0,8980,8977,1,0,0,0,8980,8978,1,0,0,0,8981,1437,1,0,0,0,8982,8985,
        4,719,113,0,8983,8986,3,1446,723,0,8984,8986,3,1444,722,0,8985,8983,
        1,0,0,0,8985,8984,1,0,0,0,8986,8993,1,0,0,0,8987,8991,3,1436,718,
        0,8988,8991,3,1430,715,0,8989,8991,3,1442,721,0,8990,8987,1,0,0,
        0,8990,8988,1,0,0,0,8990,8989,1,0,0,0,8991,8993,1,0,0,0,8992,8982,
        1,0,0,0,8992,8990,1,0,0,0,8993,1439,1,0,0,0,8994,8999,3,1436,718,
        0,8995,8999,3,1428,714,0,8996,8999,3,1430,715,0,8997,8999,3,1434,
        717,0,8998,8994,1,0,0,0,8998,8995,1,0,0,0,8998,8996,1,0,0,0,8998,
        8997,1,0,0,0,8999,1441,1,0,0,0,9000,9001,7,162,0,0,9001,1443,1,0,
        0,0,9002,9003,7,168,0,0,9003,1445,1,0,0,0,9004,9008,7,169,0,0,9005,
        9006,4,723,114,0,9006,9008,5,660,0,0,9007,9004,1,0,0,0,9007,9005,
        1,0,0,0,9008,1447,1,0,0,0,1149,1450,1453,1455,1532,1540,1545,1555,
        1562,1568,1571,1574,1581,1586,1589,1594,1600,1602,1606,1610,1619,
        1623,1628,1634,1641,1646,1651,1658,1661,1667,1670,1677,1687,1692,
        1697,1705,1711,1715,1720,1729,1735,1741,1747,1756,1762,1771,1783,
        1787,1793,1797,1803,1807,1812,1815,1821,1827,1833,1837,1842,1846,
        1850,1866,1874,1882,1889,1916,1931,1934,1940,1945,1951,1956,1960,
        1965,1969,1973,1977,1981,1985,1987,1997,2005,2012,2020,2024,2029,
        2036,2041,2046,2056,2060,2065,2068,2071,2074,2081,2088,2092,2117,
        2119,2127,2129,2149,2153,2159,2166,2169,2173,2180,2183,2192,2199,
        2204,2207,2212,2219,2222,2226,2232,2235,2240,2244,2253,2256,2262,
        2268,2272,2281,2284,2292,2298,2302,2312,2315,2320,2339,2342,2345,
        2350,2356,2366,2376,2379,2382,2386,2394,2407,2411,2416,2425,2442,
        2461,2470,2473,2481,2488,2490,2497,2502,2516,2520,2526,2532,2538,
        2544,2550,2555,2559,2567,2573,2579,2585,2590,2593,2596,2605,2608,
        2619,2623,2634,2642,2646,2655,2658,2664,2666,2670,2677,2690,2697,
        2703,2706,2723,2742,2746,2752,2758,2764,2769,2776,2783,2788,2791,
        2795,2799,2804,2808,2812,2818,2823,2826,2830,2836,2840,2844,2852,
        2860,2869,2878,2891,2894,2897,2903,2911,2916,2919,2922,2925,2928,
        2930,2936,2938,2954,2961,2964,2966,2968,2978,2980,2984,2987,2990,
        2994,2999,3005,3008,3011,3017,3020,3029,3039,3042,3045,3049,3055,
        3060,3065,3070,3074,3080,3091,3094,3099,3105,3108,3111,3114,3117,
        3131,3134,3138,3142,3150,3158,3162,3167,3170,3174,3180,3184,3187,
        3196,3206,3209,3213,3216,3220,3225,3228,3233,3239,3248,3254,3259,
        3262,3265,3268,3271,3274,3289,3293,3299,3302,3305,3311,3316,3320,
        3323,3330,3332,3345,3357,3362,3365,3368,3373,3379,3395,3415,3424,
        3428,3435,3440,3449,3463,3470,3479,3488,3494,3499,3505,3508,3514,
        3521,3525,3531,3537,3539,3542,3546,3556,3561,3566,3573,3582,3590,
        3595,3599,3605,3608,3611,3615,3619,3629,3633,3636,3639,3644,3650,
        3653,3659,3662,3664,3669,3681,3690,3703,3706,3711,3718,3722,3725,
        3731,3745,3752,3761,3767,3776,3780,3784,3794,3796,3804,3811,3816,
        3819,3823,3826,3832,3835,3838,3844,3851,3856,3860,3863,3866,3869,
        3871,3875,3882,3888,3892,3897,3900,3903,3906,3908,3913,3922,3931,
        3935,3941,3944,3947,3953,3960,3962,3970,3976,3978,3988,3990,3999,
        4008,4016,4023,4027,4031,4034,4036,4045,4054,4061,4068,4199,4253,
        4260,4264,4280,4292,4295,4307,4311,4317,4324,4331,4338,4345,4352,
        4359,4362,4369,4377,4385,4395,4401,4405,4408,4411,4414,4417,4420,
        4425,4428,4435,4441,4465,4472,4475,4484,4490,4511,4517,4523,4530,
        4538,4544,4556,4558,4564,4568,4570,4574,4585,4590,4596,4603,4606,
        4609,4615,4617,4625,4628,4630,4632,4639,4650,4653,4655,4659,4664,
        4666,4671,4677,4680,4682,4686,4689,4698,4707,4713,4715,4717,4726,
        4730,4736,4739,4741,4752,4757,4762,4768,4770,4774,4776,4784,4788,
        4793,4796,4801,4806,4812,4821,4832,4834,4846,4851,4859,4865,4867,
        4874,4876,4883,4888,4899,4904,4906,4910,4916,4919,4922,4932,4934,
        4940,4948,4959,4963,4968,4985,4991,5000,5008,5012,5018,5028,5032,
        5041,5046,5052,5054,5058,5069,5076,5082,5086,5091,5096,5104,5108,
        5113,5122,5135,5137,5151,5160,5162,5169,5174,5178,5183,5191,5198,
        5202,5208,5215,5218,5231,5237,5242,5265,5268,5284,5289,5292,5296,
        5299,5307,5313,5318,5321,5323,5327,5332,5334,5346,5352,5366,5378,
        5382,5384,5392,5396,5405,5418,5423,5427,5431,5434,5438,5442,5445,
        5450,5453,5459,5462,5468,5471,5493,5499,5502,5513,5520,5524,5527,
        5530,5537,5541,5544,5547,5551,5557,5560,5564,5585,5590,5598,5603,
        5606,5610,5614,5618,5624,5628,5633,5638,5649,5651,5657,5679,5701,
        5708,5735,5737,5741,5753,5763,5773,5777,5785,5788,5792,5801,5805,
        5812,5817,5825,5830,5836,5843,5848,5854,5857,5867,5869,5876,5881,
        5885,5888,5895,5900,5904,5915,5923,5927,5930,5933,5937,5941,5946,
        5952,5956,5967,5970,5973,5976,5984,5988,5993,6001,6009,6015,6029,
        6041,6055,6058,6062,6073,6075,6084,6096,6098,6105,6111,6117,6125,
        6136,6140,6169,6171,6177,6194,6201,6215,6226,6231,6242,6252,6259,
        6262,6296,6304,6306,6316,6321,6326,6333,6339,6344,6349,6355,6359,
        6364,6369,6376,6384,6389,6393,6397,6401,6403,6421,6429,6433,6440,
        6452,6455,6459,6464,6471,6475,6479,6485,6495,6504,6506,6509,6518,
        6525,6538,6543,6550,6556,6582,6592,6624,6643,6649,6653,6680,6692,
        6705,6709,6713,6741,6791,6801,6813,6818,6826,6846,6850,6866,6869,
        6874,6877,6886,6890,6896,6902,6906,6917,6923,6925,6932,6939,6943,
        6950,6955,6960,6969,6972,6976,6981,6983,6987,6991,7004,7008,7011,
        7015,7019,7023,7030,7034,7038,7046,7050,7057,7063,7071,7092,7097,
        7104,7126,7142,7152,7156,7163,7166,7177,7186,7189,7196,7201,7227,
        7233,7239,7243,7253,7257,7270,7282,7298,7306,7316,7319,7324,7328,
        7335,7340,7347,7355,7358,7363,7371,7374,7388,7391,7404,7408,7410,
        7415,7420,7426,7432,7438,7443,7446,7452,7457,7460,7466,7470,7476,
        7478,7481,7487,7493,7501,7503,7505,7509,7515,7519,7523,7528,7533,
        7536,7539,7549,7555,7562,7567,7580,7588,7594,7599,7610,7614,7619,
        7623,7626,7631,7635,7643,7651,7653,7662,7670,7677,7680,7688,7697,
        7699,7705,7709,7718,7724,7727,7738,7747,7750,7755,7757,7760,7763,
        7767,7770,7774,7779,7782,7786,7789,7793,7798,7802,7814,7818,7824,
        7827,7832,7836,7840,7845,7854,7857,7861,7865,7868,7872,7876,7881,
        7886,7891,7896,7901,7903,7908,7915,7923,7929,7931,7935,7939,7943,
        7947,7962,7968,7975,7979,7984,7989,7992,7996,7999,8004,8008,8014,
        8018,8022,8027,8032,8037,8042,8047,8052,8057,8062,8067,8072,8077,
        8082,8087,8097,8103,8109,8114,8121,8126,8135,8141,8146,8150,8153,
        8157,8162,8166,8171,8175,8184,8187,8190,8193,8197,8201,8205,8220,
        8223,8225,8230,8239,8242,8246,8258,8270,8275,8280,8289,8294,8303,
        8308,8312,8316,8320,8325,8330,8336,8341,8344,8351,8360,8367,8385,
        8397,8410,8418,8425,8434,8440,8448,8454,8465,8473,8479,8483,8486,
        8492,8500,8539,8564,8574,8579,8581,8588,8600,8602,8614,8623,8634,
        8656,8660,8684,8695,8697,8701,8708,8716,8723,8729,8742,8746,8753,
        8762,8767,8769,8785,8792,8797,8805,8808,8813,8823,8831,8836,8841,
        8844,8848,8853,8863,8869,8883,8887,8899,8903,8907,8911,8926,8940,
        8947,8949,8966,8971,8973,8980,8985,8990,8992,8998,9007
    ]);

    private static _atn: ATN;
    public getATN(): ATN {
        if (!MySQLParser._atn) {
            MySQLParser._atn = new ATNDeserializer().deserialize(MySQLParser._serializedATN);
        }

        return MySQLParser._atn;
    }


    private static readonly vocabulary = new Vocabulary(MySQLParser.literalNames, MySQLParser.symbolicNames, []);

    public override getVocabulary(): Vocabulary {
        return MySQLParser.vocabulary;
    }
}

export class QueryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public simpleStatement(): SimpleStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleStatement, 0);
    }
    public beginWork(): BeginWorkContext | null {
        return this.getRuleContext(MySQLParser.RULE_beginWork, 0);
    }
    public SEMICOLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_query;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQuery) {
             listener.enterQuery(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQuery) {
             listener.exitQuery(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterStatement, 0);
    }
    public createStatement(): CreateStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_createStatement, 0);
    }
    public dropStatement(): DropStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropStatement, 0);
    }
    public renameTableStatement(): RenameTableStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_renameTableStatement, 0);
    }
    public truncateTableStatement(): TruncateTableStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_truncateTableStatement, 0);
    }
    public importStatement(): ImportStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_importStatement, 0);
    }
    public callStatement(): CallStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_callStatement, 0);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_deleteStatement, 0);
    }
    public doStatement(): DoStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_doStatement, 0);
    }
    public handlerStatement(): HandlerStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_handlerStatement, 0);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertStatement, 0);
    }
    public loadStatement(): LoadStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadStatement, 0);
    }
    public replaceStatement(): ReplaceStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_replaceStatement, 0);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateStatement, 0);
    }
    public transactionOrLockingStatement(): TransactionOrLockingStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionOrLockingStatement, 0);
    }
    public replicationStatement(): ReplicationStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicationStatement, 0);
    }
    public preparedStatement(): PreparedStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_preparedStatement, 0);
    }
    public cloneStatement(): CloneStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_cloneStatement, 0);
    }
    public accountManagementStatement(): AccountManagementStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_accountManagementStatement, 0);
    }
    public tableAdministrationStatement(): TableAdministrationStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAdministrationStatement, 0);
    }
    public installUninstallStatement(): InstallUninstallStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_installUninstallStatement, 0);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_setStatement, 0);
    }
    public showDatabasesStatement(): ShowDatabasesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showDatabasesStatement, 0);
    }
    public showTablesStatement(): ShowTablesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showTablesStatement, 0);
    }
    public showTriggersStatement(): ShowTriggersStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showTriggersStatement, 0);
    }
    public showEventsStatement(): ShowEventsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEventsStatement, 0);
    }
    public showTableStatusStatement(): ShowTableStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showTableStatusStatement, 0);
    }
    public showOpenTablesStatement(): ShowOpenTablesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showOpenTablesStatement, 0);
    }
    public showPluginsStatement(): ShowPluginsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showPluginsStatement, 0);
    }
    public showEngineLogsStatement(): ShowEngineLogsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEngineLogsStatement, 0);
    }
    public showEngineMutexStatement(): ShowEngineMutexStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEngineMutexStatement, 0);
    }
    public showEngineStatusStatement(): ShowEngineStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEngineStatusStatement, 0);
    }
    public showColumnsStatement(): ShowColumnsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showColumnsStatement, 0);
    }
    public showBinaryLogsStatement(): ShowBinaryLogsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showBinaryLogsStatement, 0);
    }
    public showReplicasStatement(): ShowReplicasStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showReplicasStatement, 0);
    }
    public showBinlogEventsStatement(): ShowBinlogEventsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showBinlogEventsStatement, 0);
    }
    public showRelaylogEventsStatement(): ShowRelaylogEventsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showRelaylogEventsStatement, 0);
    }
    public showKeysStatement(): ShowKeysStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showKeysStatement, 0);
    }
    public showEnginesStatement(): ShowEnginesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEnginesStatement, 0);
    }
    public showCountWarningsStatement(): ShowCountWarningsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCountWarningsStatement, 0);
    }
    public showCountErrorsStatement(): ShowCountErrorsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCountErrorsStatement, 0);
    }
    public showWarningsStatement(): ShowWarningsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showWarningsStatement, 0);
    }
    public showErrorsStatement(): ShowErrorsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showErrorsStatement, 0);
    }
    public showProfilesStatement(): ShowProfilesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showProfilesStatement, 0);
    }
    public showProfileStatement(): ShowProfileStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showProfileStatement, 0);
    }
    public showStatusStatement(): ShowStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showStatusStatement, 0);
    }
    public showProcessListStatement(): ShowProcessListStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showProcessListStatement, 0);
    }
    public showVariablesStatement(): ShowVariablesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showVariablesStatement, 0);
    }
    public showCharacterSetStatement(): ShowCharacterSetStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCharacterSetStatement, 0);
    }
    public showCollationStatement(): ShowCollationStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCollationStatement, 0);
    }
    public showPrivilegesStatement(): ShowPrivilegesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showPrivilegesStatement, 0);
    }
    public showGrantsStatement(): ShowGrantsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showGrantsStatement, 0);
    }
    public showCreateDatabaseStatement(): ShowCreateDatabaseStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateDatabaseStatement, 0);
    }
    public showCreateTableStatement(): ShowCreateTableStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateTableStatement, 0);
    }
    public showCreateViewStatement(): ShowCreateViewStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateViewStatement, 0);
    }
    public showMasterStatusStatement(): ShowMasterStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showMasterStatusStatement, 0);
    }
    public showReplicaStatusStatement(): ShowReplicaStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showReplicaStatusStatement, 0);
    }
    public showCreateProcedureStatement(): ShowCreateProcedureStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureStatement, 0);
    }
    public showCreateFunctionStatement(): ShowCreateFunctionStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionStatement, 0);
    }
    public showCreateTriggerStatement(): ShowCreateTriggerStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateTriggerStatement, 0);
    }
    public showCreateProcedureStatusStatement(): ShowCreateProcedureStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureStatusStatement, 0);
    }
    public showCreateFunctionStatusStatement(): ShowCreateFunctionStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionStatusStatement, 0);
    }
    public showCreateProcedureCodeStatement(): ShowCreateProcedureCodeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureCodeStatement, 0);
    }
    public showCreateFunctionCodeStatement(): ShowCreateFunctionCodeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionCodeStatement, 0);
    }
    public showCreateEventStatement(): ShowCreateEventStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateEventStatement, 0);
    }
    public showCreateUserStatement(): ShowCreateUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateUserStatement, 0);
    }
    public resourceGroupManagement(): ResourceGroupManagementContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupManagement, 0);
    }
    public otherAdministrativeStatement(): OtherAdministrativeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_otherAdministrativeStatement, 0);
    }
    public utilityStatement(): UtilityStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_utilityStatement, 0);
    }
    public getDiagnosticsStatement(): GetDiagnosticsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_getDiagnosticsStatement, 0);
    }
    public signalStatement(): SignalStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalStatement, 0);
    }
    public resignalStatement(): ResignalStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_resignalStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleStatement) {
             listener.enterSimpleStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleStatement) {
             listener.exitSimpleStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleStatement) {
            return visitor.visitSimpleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public alterTable(): AlterTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTable, 0);
    }
    public alterDatabase(): AlterDatabaseContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterDatabase, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0);
    }
    public alterView(): AlterViewContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterView, 0);
    }
    public alterEvent(): AlterEventContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterEvent, 0);
    }
    public alterTablespace(): AlterTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTablespace, 0);
    }
    public alterUndoTablespace(): AlterUndoTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterUndoTablespace, 0);
    }
    public alterLogfileGroup(): AlterLogfileGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroup, 0);
    }
    public alterServer(): AlterServerContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterServer, 0);
    }
    public alterInstanceStatement(): AlterInstanceStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterInstanceStatement, 0);
    }
    public routineAlterOptions(): RoutineAlterOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineAlterOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterStatement) {
             listener.enterAlterStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterStatement) {
             listener.exitAlterStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterStatement) {
            return visitor.visitAlterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public alterDatabaseOption_list(): Vector<AlterDatabaseOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterDatabaseOption);
    }
    public alterDatabaseOption(i: number): AlterDatabaseOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterDatabaseOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterDatabase;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterDatabase) {
             listener.enterAlterDatabase(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterDatabase) {
             listener.exitAlterDatabase(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterDatabase) {
            return visitor.visitAlterDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseOption(): CreateDatabaseOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createDatabaseOption, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public ternaryOption(): TernaryOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_ternaryOption, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterDatabaseOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterDatabaseOption) {
             listener.enterAlterDatabaseOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterDatabaseOption) {
             listener.exitAlterDatabaseOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterDatabaseOption) {
            return visitor.visitAlterDatabaseOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public schedule(): ScheduleContext | null {
        return this.getRuleContext(MySQLParser.RULE_schedule, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterEvent;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterEvent) {
             listener.enterAlterEvent(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterEvent) {
             listener.exitAlterEvent(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterEvent) {
            return visitor.visitAlterEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroupOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterLogfileGroup) {
             listener.enterAlterLogfileGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterLogfileGroup) {
             listener.exitAlterLogfileGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterLogfileGroup) {
            return visitor.visitAlterLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLogfileGroupOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterLogfileGroupOption_list(): Vector<AlterLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterLogfileGroupOption);
    }
    public alterLogfileGroupOption(i: number): AlterLogfileGroupOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroupOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroupOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterLogfileGroupOptions) {
             listener.enterAlterLogfileGroupOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterLogfileGroupOptions) {
             listener.exitAlterLogfileGroupOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterLogfileGroupOptions) {
            return visitor.visitAlterLogfileGroupOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroupOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterLogfileGroupOption) {
             listener.enterAlterLogfileGroupOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterLogfileGroupOption) {
             listener.exitAlterLogfileGroupOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterLogfileGroupOption) {
            return visitor.visitAlterLogfileGroupOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverRef(): ServerRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverRef, 0);
    }
    public serverOptions(): ServerOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterServer;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterServer) {
             listener.enterAlterServer(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterServer) {
             listener.exitAlterServer(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterServer) {
            return visitor.visitAlterServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0);
    }
    public alterTableActions(): AlterTableActionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTableActions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTable) {
             listener.enterAlterTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTable) {
             listener.exitAlterTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTable) {
            return visitor.visitAlterTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableActionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandList(): AlterCommandListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandList, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionClause, 0);
    }
    public removePartitioning(): RemovePartitioningContext | null {
        return this.getRuleContext(MySQLParser.RULE_removePartitioning, 0);
    }
    public standaloneAlterCommands(): StandaloneAlterCommandsContext | null {
        return this.getRuleContext(MySQLParser.RULE_standaloneAlterCommands, 0);
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifierList, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTableActions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTableActions) {
             listener.enterAlterTableActions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTableActions) {
             listener.exitAlterTableActions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTableActions) {
            return visitor.visitAlterTableActions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterCommandListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifierList, 0);
    }
    public alterList(): AlterListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterList, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterCommandList) {
             listener.enterAlterCommandList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterCommandList) {
             listener.exitAlterCommandList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterCommandList) {
            return visitor.visitAlterCommandList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterCommandsModifierListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandsModifier_list(): Vector<AlterCommandsModifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterCommandsModifier);
    }
    public alterCommandsModifier(i: number): AlterCommandsModifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifier, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandsModifierList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterCommandsModifierList) {
             listener.enterAlterCommandsModifierList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterCommandsModifierList) {
             listener.exitAlterCommandsModifierList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterCommandsModifierList) {
            return visitor.visitAlterCommandsModifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneAlterCommandsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public alterPartition(): AlterPartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterPartition, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_standaloneAlterCommands;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStandaloneAlterCommands) {
             listener.enterStandaloneAlterCommands(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStandaloneAlterCommands) {
             listener.exitStandaloneAlterCommands(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStandaloneAlterCommands) {
            return visitor.visitStandaloneAlterCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinitions, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public noWriteToBinLog_list(): Vector<NoWriteToBinLogContext> {
        return this.getRuleContexts(MySQLParser.RULE_noWriteToBinLog);
    }
    public noWriteToBinLog(i: number): NoWriteToBinLogContext | null {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, i);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext | null {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0);
    }
    public OPTIMIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public checkOption_list(): Vector<CheckOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_checkOption);
    }
    public checkOption(i: number): CheckOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkOption, i);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public repairType_list(): Vector<RepairTypeContext> {
        return this.getRuleContexts(MySQLParser.RULE_repairType);
    }
    public repairType(i: number): RepairTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_repairType, i);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public EXCHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public withValidation(): WithValidationContext | null {
        return this.getRuleContext(MySQLParser.RULE_withValidation, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterPartition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterPartition) {
             listener.enterAlterPartition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterPartition) {
             listener.exitAlterPartition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterPartition) {
            return visitor.visitAlterPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterListItem_list(): Vector<AlterListItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterListItem);
    }
    public alterListItem(i: number): AlterListItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterListItem, i);
    }
    public createTableOptionsSpaceSeparated_list(): Vector<CreateTableOptionsSpaceSeparatedContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOptionsSpaceSeparated);
    }
    public createTableOptionsSpaceSeparated(i: number): CreateTableOptionsSpaceSeparatedContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOptionsSpaceSeparated, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public alterCommandsModifier_list(): Vector<AlterCommandsModifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterCommandsModifier);
    }
    public alterCommandsModifier(i: number): AlterCommandsModifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifier, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterList) {
             listener.enterAlterList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterList) {
             listener.exitAlterList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterList) {
            return visitor.visitAlterList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterCommandsModifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterAlgorithmOption, 0);
    }
    public alterLockOption(): AlterLockOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLockOption, 0);
    }
    public withValidation(): WithValidationContext | null {
        return this.getRuleContext(MySQLParser.RULE_withValidation, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandsModifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterCommandsModifier) {
             listener.enterAlterCommandsModifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterCommandsModifier) {
             listener.exitAlterCommandsModifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterCommandsModifier) {
            return visitor.visitAlterCommandsModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterListItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public fieldDefinition(): FieldDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldDefinition, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public tableElementList(): TableElementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableElementList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COLUMN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_SYMBOL, 0);
    }
    public checkOrReferences(): CheckOrReferencesContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkOrReferences, 0);
    }
    public place(): PlaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_place, 0);
    }
    public tableConstraintDef(): TableConstraintDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableConstraintDef, 0);
    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public columnInternalRef(): ColumnInternalRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRef, 0);
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public indexRef(): IndexRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexRef, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public CONSTRAINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
    }
    public restrict(): RestrictContext | null {
        return this.getRuleContext(MySQLParser.RULE_restrict, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext | null {
        return this.getRuleContext(MySQLParser.RULE_signedLiteralOrNull, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public alterOrderList(): AlterOrderListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterOrderList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterListItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterListItem) {
             listener.enterAlterListItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterListItem) {
             listener.exitAlterListItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterListItem) {
            return visitor.visitAlterListItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PlaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_place;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPlace) {
             listener.enterPlace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPlace) {
             listener.exitPlace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPlace) {
            return visitor.visitPlace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RestrictContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_restrict;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRestrict) {
             listener.enterRestrict(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRestrict) {
             listener.exitRestrict(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRestrict) {
            return visitor.visitRestrict(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterOrderListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier);
    }
    public identifier(i: number): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, i);
    }
    public direction_list(): Vector<DirectionContext> {
        return this.getRuleContexts(MySQLParser.RULE_direction);
    }
    public direction(i: number): DirectionContext | null {
        return this.getRuleContext(MySQLParser.RULE_direction, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterOrderList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterOrderList) {
             listener.enterAlterOrderList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterOrderList) {
             listener.exitAlterOrderList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterOrderList) {
            return visitor.visitAlterOrderList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterAlgorithmOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterAlgorithmOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterAlgorithmOption) {
             listener.enterAlterAlgorithmOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterAlgorithmOption) {
             listener.exitAlterAlgorithmOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterAlgorithmOption) {
            return visitor.visitAlterAlgorithmOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLockOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterLockOption) {
             listener.enterAlterLockOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterLockOption) {
             listener.exitAlterLockOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterLockOption) {
            return visitor.visitAlterLockOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexLockAndAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterAlgorithmOption, 0);
    }
    public alterLockOption(): AlterLockOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLockOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexLockAndAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexLockAndAlgorithm) {
             listener.enterIndexLockAndAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexLockAndAlgorithm) {
             listener.exitIndexLockAndAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexLockAndAlgorithm) {
            return visitor.visitIndexLockAndAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithValidationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALIDATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public WITHOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withValidation;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWithValidation) {
             listener.enterWithValidation(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWithValidation) {
             listener.exitWithValidation(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWithValidation) {
            return visitor.visitWithValidation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemovePartitioningContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_removePartitioning;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRemovePartitioning) {
             listener.enterRemovePartitioning(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRemovePartitioning) {
             listener.exitRemovePartitioning(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRemovePartitioning) {
            return visitor.visitRemovePartitioning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AllOrPartitionNameListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_allOrPartitionNameList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAllOrPartitionNameList) {
             listener.enterAllOrPartitionNameList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAllOrPartitionNameList) {
             listener.exitAllOrPartitionNameList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAllOrPartitionNameList) {
            return visitor.visitAllOrPartitionNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public alterTablespaceOptions(): AlterTablespaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTablespaceOptions, 0);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTablespace) {
             listener.enterAlterTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTablespace) {
             listener.exitAlterTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTablespace) {
            return visitor.visitAlterTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUndoTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterUndoTablespace) {
             listener.enterAlterUndoTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterUndoTablespace) {
             listener.exitAlterUndoTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterUndoTablespace) {
            return visitor.visitAlterUndoTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UndoTableSpaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public undoTableSpaceOption_list(): Vector<UndoTableSpaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_undoTableSpaceOption);
    }
    public undoTableSpaceOption(i: number): UndoTableSpaceOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_undoTableSpaceOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUndoTableSpaceOptions) {
             listener.enterUndoTableSpaceOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUndoTableSpaceOptions) {
             listener.exitUndoTableSpaceOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUndoTableSpaceOptions) {
            return visitor.visitUndoTableSpaceOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UndoTableSpaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_undoTableSpaceOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUndoTableSpaceOption) {
             listener.enterUndoTableSpaceOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUndoTableSpaceOption) {
             listener.exitUndoTableSpaceOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUndoTableSpaceOption) {
            return visitor.visitUndoTableSpaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTablespaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterTablespaceOption_list(): Vector<AlterTablespaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterTablespaceOption);
    }
    public alterTablespaceOption(i: number): AlterTablespaceOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTablespaceOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespaceOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTablespaceOptions) {
             listener.enterAlterTablespaceOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTablespaceOptions) {
             listener.exitAlterTablespaceOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTablespaceOptions) {
            return visitor.visitAlterTablespaceOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public tsOptionEncryption(): TsOptionEncryptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEncryption, 0);
    }
    public tsOptionEngineAttribute(): TsOptionEngineAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngineAttribute, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespaceOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTablespaceOption) {
             listener.enterAlterTablespaceOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTablespaceOption) {
             listener.exitAlterTablespaceOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTablespaceOption) {
            return visitor.visitAlterTablespaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeTablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeTablespaceOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeTablespaceOption) {
             listener.enterChangeTablespaceOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeTablespaceOption) {
             listener.exitChangeTablespaceOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeTablespaceOption) {
            return visitor.visitChangeTablespaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRef(): ViewRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewRef, 0);
    }
    public viewTail(): ViewTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewTail, 0);
    }
    public viewAlgorithm(): ViewAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewAlgorithm, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public viewSuid(): ViewSuidContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewSuid, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterView;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterView) {
             listener.enterAlterView(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterView) {
             listener.exitAlterView(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterView) {
            return visitor.visitAlterView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public viewQueryBlock(): ViewQueryBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewQueryBlock, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewTail;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewTail) {
             listener.enterViewTail(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewTail) {
             listener.exitViewTail(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewTail) {
            return visitor.visitViewTail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewQueryBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0);
    }
    public viewCheckOption(): ViewCheckOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewCheckOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewQueryBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewQueryBlock) {
             listener.enterViewQueryBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewQueryBlock) {
             listener.exitViewQueryBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewQueryBlock) {
            return visitor.visitViewQueryBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewCheckOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewCheckOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewCheckOption) {
             listener.enterViewCheckOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewCheckOption) {
             listener.exitViewCheckOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewCheckOption) {
            return visitor.visitViewCheckOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterInstanceStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public TLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TLS_SYMBOL, 0);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier);
    }
    public identifier(i: number): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, i);
    }
    public KEYRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYRING_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterInstanceStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterInstanceStatement) {
             listener.enterAlterInstanceStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterInstanceStatement) {
             listener.exitAlterInstanceStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterInstanceStatement) {
            return visitor.visitAlterInstanceStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public createDatabase(): CreateDatabaseContext | null {
        return this.getRuleContext(MySQLParser.RULE_createDatabase, 0);
    }
    public createTable(): CreateTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTable, 0);
    }
    public createFunction(): CreateFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createFunction, 0);
    }
    public createProcedure(): CreateProcedureContext | null {
        return this.getRuleContext(MySQLParser.RULE_createProcedure, 0);
    }
    public createUdf(): CreateUdfContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUdf, 0);
    }
    public createLogfileGroup(): CreateLogfileGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_createLogfileGroup, 0);
    }
    public createView(): CreateViewContext | null {
        return this.getRuleContext(MySQLParser.RULE_createView, 0);
    }
    public createTrigger(): CreateTriggerContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTrigger, 0);
    }
    public createIndex(): CreateIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_createIndex, 0);
    }
    public createServer(): CreateServerContext | null {
        return this.getRuleContext(MySQLParser.RULE_createServer, 0);
    }
    public createTablespace(): CreateTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTablespace, 0);
    }
    public createEvent(): CreateEventContext | null {
        return this.getRuleContext(MySQLParser.RULE_createEvent, 0);
    }
    public createRole(): CreateRoleContext | null {
        return this.getRuleContext(MySQLParser.RULE_createRole, 0);
    }
    public createSpatialReference(): CreateSpatialReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_createSpatialReference, 0);
    }
    public createUndoTablespace(): CreateUndoTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUndoTablespace, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateStatement) {
             listener.enterCreateStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateStatement) {
             listener.exitCreateStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateStatement) {
            return visitor.visitCreateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaName, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public createDatabaseOption_list(): Vector<CreateDatabaseOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createDatabaseOption);
    }
    public createDatabaseOption(i: number): CreateDatabaseOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createDatabaseOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createDatabase;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateDatabase) {
             listener.enterCreateDatabase(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateDatabase) {
             listener.exitCreateDatabase(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public defaultCharset(): DefaultCharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultCharset, 0);
    }
    public defaultCollation(): DefaultCollationContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultCollation, 0);
    }
    public defaultEncryption(): DefaultEncryptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultEncryption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createDatabaseOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateDatabaseOption) {
             listener.enterCreateDatabaseOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateDatabaseOption) {
             listener.exitCreateDatabaseOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateDatabaseOption) {
            return visitor.visitCreateDatabaseOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public tableElementList(): TableElementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableElementList, 0);
    }
    public createTableOptionsEtc(): CreateTableOptionsEtcContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOptionsEtc, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableElement_list(): Vector<TableElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableElement);
    }
    public tableElement(i: number): TableElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableElement, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableElementList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableElementList) {
             listener.enterTableElementList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableElementList) {
             listener.exitTableElementList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableElementList) {
            return visitor.visitTableElementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDefinition(): ColumnDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnDefinition, 0);
    }
    public tableConstraintDef(): TableConstraintDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableConstraintDef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableElement) {
             listener.enterTableElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableElement) {
             listener.exitTableElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableElement) {
            return visitor.visitTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DuplicateAsQeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public asCreateQueryExpression(): AsCreateQueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_asCreateQueryExpression, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_duplicateAsQe;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDuplicateAsQe) {
             listener.enterDuplicateAsQe(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDuplicateAsQe) {
             listener.exitDuplicateAsQe(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDuplicateAsQe) {
            return visitor.visitDuplicateAsQe(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AsCreateQueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_asCreateQueryExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAsCreateQueryExpression) {
             listener.enterAsCreateQueryExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAsCreateQueryExpression) {
             listener.exitAsCreateQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAsCreateQueryExpression) {
            return visitor.visitAsCreateQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionOrParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionOrParens;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpressionOrParens) {
             listener.enterQueryExpressionOrParens(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpressionOrParens) {
             listener.exitQueryExpressionOrParens(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpressionOrParens) {
            return visitor.visitQueryExpressionOrParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionWithOptLockingClausesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionWithOptLockingClauses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpressionWithOptLockingClauses) {
             listener.enterQueryExpressionWithOptLockingClauses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpressionWithOptLockingClauses) {
             listener.exitQueryExpressionWithOptLockingClauses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpressionWithOptLockingClauses) {
            return visitor.visitQueryExpressionWithOptLockingClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoutineContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public createProcedure(): CreateProcedureContext | null {
        return this.getRuleContext(MySQLParser.RULE_createProcedure, 0);
    }
    public createFunction(): CreateFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createFunction, 0);
    }
    public createUdf(): CreateUdfContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUdf, 0);
    }
    public SEMICOLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createRoutine;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateRoutine) {
             listener.enterCreateRoutine(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateRoutine) {
             listener.exitCreateRoutine(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateRoutine) {
            return visitor.visitCreateRoutine(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateProcedureContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureName(): ProcedureNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureName, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public procedureParameter_list(): Vector<ProcedureParameterContext> {
        return this.getRuleContexts(MySQLParser.RULE_procedureParameter);
    }
    public procedureParameter(i: number): ProcedureParameterContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureParameter, i);
    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption);
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createProcedure;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateProcedure) {
             listener.enterCreateProcedure(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateProcedure) {
             listener.exitCreateProcedure(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateProcedure) {
            return visitor.visitCreateProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionName, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public typeWithOptCollate(): TypeWithOptCollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeWithOptCollate, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public functionParameter_list(): Vector<FunctionParameterContext> {
        return this.getRuleContexts(MySQLParser.RULE_functionParameter);
    }
    public functionParameter(i: number): FunctionParameterContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionParameter, i);
    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption);
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUdfContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public udfName(): UdfNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_udfName, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUdf;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUdf) {
             listener.enterCreateUdf(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUdf) {
             listener.exitCreateUdf(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUdf) {
            return visitor.visitCreateUdf(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineCreateOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineOption(): RoutineOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineOption, 0);
    }
    public DETERMINISTIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineCreateOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoutineCreateOption) {
             listener.enterRoutineCreateOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoutineCreateOption) {
             listener.exitRoutineCreateOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoutineCreateOption) {
            return visitor.visitRoutineCreateOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineAlterOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption);
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineAlterOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoutineAlterOptions) {
             listener.enterRoutineAlterOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoutineAlterOptions) {
             listener.exitRoutineAlterOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoutineAlterOptions) {
            return visitor.visitRoutineAlterOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineOptionContext extends ParserRuleContext {
    public _option!: Token;
    public _security!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public SQL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public READS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READS_SYMBOL, 0);
    }
    public MODIFIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFIES_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoutineOption) {
             listener.enterRoutineOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoutineOption) {
             listener.exitRoutineOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoutineOption) {
            return visitor.visitRoutineOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0);
    }
    public createIndexTarget(): CreateIndexTargetContext | null {
        return this.getRuleContext(MySQLParser.RULE_createIndexTarget, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0);
    }
    public FULLTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexLockAndAlgorithm, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public indexTypeClause(): IndexTypeClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexTypeClause, 0);
    }
    public indexOption_list(): Vector<IndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexOption);
    }
    public indexOption(i: number): IndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexOption, i);
    }
    public fulltextIndexOption_list(): Vector<FulltextIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_fulltextIndexOption);
    }
    public fulltextIndexOption(i: number): FulltextIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fulltextIndexOption, i);
    }
    public spatialIndexOption_list(): Vector<SpatialIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_spatialIndexOption);
    }
    public spatialIndexOption(i: number): SpatialIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_spatialIndexOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createIndex;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateIndex) {
             listener.enterCreateIndex(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateIndex) {
             listener.exitCreateIndex(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateIndex) {
            return visitor.visitCreateIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexNameAndTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexType, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexNameAndType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexNameAndType) {
             listener.enterIndexNameAndType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexNameAndType) {
             listener.exitIndexNameAndType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexNameAndType) {
            return visitor.visitIndexNameAndType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexTargetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public keyListWithExpression(): KeyListWithExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyListWithExpression, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createIndexTarget;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateIndexTarget) {
             listener.enterCreateIndexTarget(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateIndexTarget) {
             listener.exitCreateIndexTarget(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateIndexTarget) {
            return visitor.visitCreateIndexTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupName(): LogfileGroupNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupName, 0);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public logfileGroupOptions(): LogfileGroupOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createLogfileGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateLogfileGroup) {
             listener.enterCreateLogfileGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateLogfileGroup) {
             listener.exitCreateLogfileGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateLogfileGroup) {
            return visitor.visitCreateLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogfileGroupOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public logfileGroupOption_list(): Vector<LogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_logfileGroupOption);
    }
    public logfileGroupOption(i: number): LogfileGroupOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogfileGroupOptions) {
             listener.enterLogfileGroupOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogfileGroupOptions) {
             listener.exitLogfileGroupOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogfileGroupOptions) {
            return visitor.visitLogfileGroupOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0);
    }
    public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionUndoRedoBufferSize, 0);
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionNodegroup, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public tsOptionComment(): TsOptionCommentContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionComment, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogfileGroupOption) {
             listener.enterLogfileGroupOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogfileGroupOption) {
             listener.exitLogfileGroupOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogfileGroupOption) {
            return visitor.visitLogfileGroupOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverName(): ServerNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverName, 0);
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public serverOptions(): ServerOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createServer;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateServer) {
             listener.enterCreateServer(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateServer) {
             listener.exitCreateServer(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateServer) {
            return visitor.visitCreateServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public serverOption_list(): Vector<ServerOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_serverOption);
    }
    public serverOption(i: number): ServerOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverOption, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerOptions) {
             listener.enterServerOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerOptions) {
             listener.exitServerOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerOptions) {
            return visitor.visitServerOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerOption) {
             listener.enterServerOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerOption) {
             listener.exitServerOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerOption) {
            return visitor.visitServerOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceName(): TablespaceNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceName, 0);
    }
    public tsDataFileName(): TsDataFileNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsDataFileName, 0);
    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0);
    }
    public tablespaceOptions(): TablespaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTablespace) {
             listener.enterCreateTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTablespace) {
             listener.exitCreateTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTablespace) {
            return visitor.visitCreateTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceName(): TablespaceNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceName, 0);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public tsDataFile(): TsDataFileContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsDataFile, 0);
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUndoTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUndoTablespace) {
             listener.enterCreateUndoTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUndoTablespace) {
             listener.exitCreateUndoTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUndoTablespace) {
            return visitor.visitCreateUndoTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsDataFileNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public tsDataFile(): TsDataFileContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsDataFile, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsDataFileName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsDataFileName) {
             listener.enterTsDataFileName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsDataFileName) {
             listener.exitTsDataFileName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsDataFileName) {
            return visitor.visitTsDataFileName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsDataFileContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsDataFile;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsDataFile) {
             listener.enterTsDataFile(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsDataFile) {
             listener.exitTsDataFile(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsDataFile) {
            return visitor.visitTsDataFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablespaceOption_list(): Vector<TablespaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_tablespaceOption);
    }
    public tablespaceOption(i: number): TablespaceOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablespaceOptions) {
             listener.enterTablespaceOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablespaceOptions) {
             listener.exitTablespaceOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablespaceOptions) {
            return visitor.visitTablespaceOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0);
    }
    public tsOptionExtentSize(): TsOptionExtentSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionExtentSize, 0);
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionNodegroup, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public tsOptionComment(): TsOptionCommentContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionComment, 0);
    }
    public tsOptionFileblockSize(): TsOptionFileblockSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionFileblockSize, 0);
    }
    public tsOptionEncryption(): TsOptionEncryptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEncryption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablespaceOption) {
             listener.enterTablespaceOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablespaceOption) {
             listener.exitTablespaceOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablespaceOption) {
            return visitor.visitTablespaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionInitialSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionInitialSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionInitialSize) {
             listener.enterTsOptionInitialSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionInitialSize) {
             listener.exitTsOptionInitialSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionInitialSize) {
            return visitor.visitTsOptionInitialSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionUndoRedoBufferSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionUndoRedoBufferSize) {
             listener.enterTsOptionUndoRedoBufferSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionUndoRedoBufferSize) {
             listener.exitTsOptionUndoRedoBufferSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionUndoRedoBufferSize) {
            return visitor.visitTsOptionUndoRedoBufferSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionAutoextendSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionAutoextendSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionAutoextendSize) {
             listener.enterTsOptionAutoextendSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionAutoextendSize) {
             listener.exitTsOptionAutoextendSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionAutoextendSize) {
            return visitor.visitTsOptionAutoextendSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionMaxSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionMaxSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionMaxSize) {
             listener.enterTsOptionMaxSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionMaxSize) {
             listener.exitTsOptionMaxSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionMaxSize) {
            return visitor.visitTsOptionMaxSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionExtentSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionExtentSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionExtentSize) {
             listener.enterTsOptionExtentSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionExtentSize) {
             listener.exitTsOptionExtentSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionExtentSize) {
            return visitor.visitTsOptionExtentSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionNodegroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionNodegroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionNodegroup) {
             listener.enterTsOptionNodegroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionNodegroup) {
             listener.exitTsOptionNodegroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionNodegroup) {
            return visitor.visitTsOptionNodegroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionEngineContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEngine;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionEngine) {
             listener.enterTsOptionEngine(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionEngine) {
             listener.exitTsOptionEngine(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionEngine) {
            return visitor.visitTsOptionEngine(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionWaitContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionWait;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionWait) {
             listener.enterTsOptionWait(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionWait) {
             listener.exitTsOptionWait(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionWait) {
            return visitor.visitTsOptionWait(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionCommentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionComment;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionComment) {
             listener.enterTsOptionComment(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionComment) {
             listener.exitTsOptionComment(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionComment) {
            return visitor.visitTsOptionComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionFileblockSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionFileblockSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionFileblockSize) {
             listener.enterTsOptionFileblockSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionFileblockSize) {
             listener.exitTsOptionFileblockSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionFileblockSize) {
            return visitor.visitTsOptionFileblockSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionEncryptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEncryption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionEncryption) {
             listener.enterTsOptionEncryption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionEncryption) {
             listener.exitTsOptionEncryption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionEncryption) {
            return visitor.visitTsOptionEncryption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionEngineAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEngineAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionEngineAttribute) {
             listener.enterTsOptionEngineAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionEngineAttribute) {
             listener.exitTsOptionEngineAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionEngineAttribute) {
            return visitor.visitTsOptionEngineAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewName, 0);
    }
    public viewTail(): ViewTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewTail, 0);
    }
    public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewReplaceOrAlgorithm, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public viewSuid(): ViewSuidContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewSuid, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createView;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public viewAlgorithm(): ViewAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewAlgorithm, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewReplaceOrAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewReplaceOrAlgorithm) {
             listener.enterViewReplaceOrAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewReplaceOrAlgorithm) {
             listener.exitViewReplaceOrAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewReplaceOrAlgorithm) {
            return visitor.visitViewReplaceOrAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewAlgorithmContext extends ParserRuleContext {
    public _algorithm!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewAlgorithm) {
             listener.enterViewAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewAlgorithm) {
             listener.exitViewAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewAlgorithm) {
            return visitor.visitViewAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewSuidContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewSuid;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewSuid) {
             listener.enterViewSuid(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewSuid) {
             listener.exitViewSuid(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewSuid) {
            return visitor.visitViewSuid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTriggerContext extends ParserRuleContext {
    public _timing!: Token;
    public _event!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerName(): TriggerNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_triggerName, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public EACH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EACH_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public BEFORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_triggerFollowsPrecedesClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTrigger;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTrigger) {
             listener.enterCreateTrigger(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTrigger) {
             listener.exitCreateTrigger(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTrigger) {
            return visitor.visitCreateTrigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
    public _ordering!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerFollowsPrecedesClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTriggerFollowsPrecedesClause) {
             listener.enterTriggerFollowsPrecedesClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTriggerFollowsPrecedesClause) {
             listener.exitTriggerFollowsPrecedesClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTriggerFollowsPrecedesClause) {
            return visitor.visitTriggerFollowsPrecedesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventName(): EventNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_eventName, 0);
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public schedule(): ScheduleContext | null {
        return this.getRuleContext(MySQLParser.RULE_schedule, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createEvent;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateEvent) {
             listener.enterCreateEvent(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateEvent) {
             listener.exitCreateEvent(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateEvent) {
            return visitor.visitCreateEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createRole;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateRole) {
             listener.enterCreateRole(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateRole) {
             listener.exitCreateRole(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateSpatialReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public srsAttribute_list(): Vector<SrsAttributeContext> {
        return this.getRuleContexts(MySQLParser.RULE_srsAttribute);
    }
    public srsAttribute(i: number): SrsAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_srsAttribute, i);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createSpatialReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateSpatialReference) {
             listener.enterCreateSpatialReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateSpatialReference) {
             listener.exitCreateSpatialReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateSpatialReference) {
            return visitor.visitCreateSpatialReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SrsAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public DEFINITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_srsAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSrsAttribute) {
             listener.enterSrsAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSrsAttribute) {
             listener.exitSrsAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSrsAttribute) {
            return visitor.visitSrsAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public dropDatabase(): DropDatabaseContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropDatabase, 0);
    }
    public dropEvent(): DropEventContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropEvent, 0);
    }
    public dropFunction(): DropFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropFunction, 0);
    }
    public dropProcedure(): DropProcedureContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropProcedure, 0);
    }
    public dropIndex(): DropIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropIndex, 0);
    }
    public dropLogfileGroup(): DropLogfileGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroup, 0);
    }
    public dropServer(): DropServerContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropServer, 0);
    }
    public dropTable(): DropTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropTable, 0);
    }
    public dropTableSpace(): DropTableSpaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropTableSpace, 0);
    }
    public dropTrigger(): DropTriggerContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropTrigger, 0);
    }
    public dropView(): DropViewContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropView, 0);
    }
    public dropRole(): DropRoleContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropRole, 0);
    }
    public dropSpatialReference(): DropSpatialReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropSpatialReference, 0);
    }
    public dropUndoTablespace(): DropUndoTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropUndoTablespace, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropStatement) {
             listener.enterDropStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropStatement) {
             listener.exitDropStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropStatement) {
            return visitor.visitDropStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropDatabase;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropDatabase) {
             listener.enterDropDatabase(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropDatabase) {
             listener.exitDropDatabase(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropDatabase) {
            return visitor.visitDropDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropEvent;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropEvent) {
             listener.enterDropEvent(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropEvent) {
             listener.exitDropEvent(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropEvent) {
            return visitor.visitDropEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropProcedureContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropProcedure;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropProcedure) {
             listener.enterDropProcedure(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropProcedure) {
             listener.exitDropProcedure(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropProcedure) {
            return visitor.visitDropProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexRef(): IndexRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexRef, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0);
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexLockAndAlgorithm, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropIndex;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropIndex) {
             listener.enterDropIndex(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropIndex) {
             listener.exitDropIndex(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropIndex) {
            return visitor.visitDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0);
    }
    public dropLogfileGroupOption_list(): Vector<DropLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_dropLogfileGroupOption);
    }
    public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroupOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropLogfileGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropLogfileGroup) {
             listener.enterDropLogfileGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropLogfileGroup) {
             listener.exitDropLogfileGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropLogfileGroup) {
            return visitor.visitDropLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropLogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropLogfileGroupOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropLogfileGroupOption) {
             listener.enterDropLogfileGroupOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropLogfileGroupOption) {
             listener.exitDropLogfileGroupOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropLogfileGroupOption) {
            return visitor.visitDropLogfileGroupOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverRef(): ServerRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropServer;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropServer) {
             listener.enterDropServer(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropServer) {
             listener.exitDropServer(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropServer) {
            return visitor.visitDropServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRefList(): TableRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableSpaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0);
    }
    public dropLogfileGroupOption_list(): Vector<DropLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_dropLogfileGroupOption);
    }
    public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroupOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTableSpace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropTableSpace) {
             listener.enterDropTableSpace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropTableSpace) {
             listener.exitDropTableSpace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropTableSpace) {
            return visitor.visitDropTableSpace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTriggerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerRef(): TriggerRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_triggerRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTrigger;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropTrigger) {
             listener.enterDropTrigger(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropTrigger) {
             listener.exitDropTrigger(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropTrigger) {
            return visitor.visitDropTrigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRefList(): ViewRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewRefList, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropView;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropRoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropRole;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropRole) {
             listener.enterDropRole(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropRole) {
             listener.exitDropRole(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropSpatialReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropSpatialReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropSpatialReference) {
             listener.enterDropSpatialReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropSpatialReference) {
             listener.exitDropSpatialReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropSpatialReference) {
            return visitor.visitDropSpatialReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0);
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropUndoTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropUndoTablespace) {
             listener.enterDropUndoTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropUndoTablespace) {
             listener.exitDropUndoTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropUndoTablespace) {
            return visitor.visitDropUndoTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public renamePair_list(): Vector<RenamePairContext> {
        return this.getRuleContexts(MySQLParser.RULE_renamePair);
    }
    public renamePair(i: number): RenamePairContext | null {
        return this.getRuleContext(MySQLParser.RULE_renamePair, i);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renameTableStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRenameTableStatement) {
             listener.enterRenameTableStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRenameTableStatement) {
             listener.exitRenameTableStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRenameTableStatement) {
            return visitor.visitRenameTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenamePairContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renamePair;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRenamePair) {
             listener.enterRenamePair(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRenamePair) {
             listener.exitRenamePair(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRenamePair) {
            return visitor.visitRenamePair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_truncateTableStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTruncateTableStatement) {
             listener.enterTruncateTableStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTruncateTableStatement) {
             listener.exitTruncateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTruncateTableStatement) {
            return visitor.visitTruncateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public textStringLiteralList(): TextStringLiteralListContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteralList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_importStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterImportStatement) {
             listener.enterImportStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitImportStatement) {
             listener.exitImportStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitImportStatement) {
            return visitor.visitImportStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CALL_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_callStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCallStatement) {
             listener.enterCallStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCallStatement) {
             listener.exitCallStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCallStatement) {
            return visitor.visitCallStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public tableAliasRefList(): TableAliasRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAliasRefList, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0);
    }
    public deleteStatementOption_list(): Vector<DeleteStatementOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_deleteStatementOption);
    }
    public deleteStatementOption(i: number): DeleteStatementOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_deleteStatementOption, i);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public partitionDelete(): PartitionDeleteContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionDelete, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public simpleLimitClause(): SimpleLimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleLimitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDeleteStatement) {
             listener.enterDeleteStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDeleteStatement) {
             listener.exitDeleteStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDeleteContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDelete;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDelete) {
             listener.enterPartitionDelete(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDelete) {
             listener.exitPartitionDelete(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDelete) {
            return visitor.visitPartitionDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteStatementOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDeleteStatementOption) {
             listener.enterDeleteStatementOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDeleteStatementOption) {
             listener.exitDeleteStatementOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDeleteStatementOption) {
            return visitor.visitDeleteStatementOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DoStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public selectItemList(): SelectItemListContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectItemList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_doStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDoStatement) {
             listener.enterDoStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDoStatement) {
             listener.exitDoStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDoStatement) {
            return visitor.visitDoStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public handlerReadOrScan(): HandlerReadOrScanContext | null {
        return this.getRuleContext(MySQLParser.RULE_handlerReadOrScan, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHandlerStatement) {
             listener.enterHandlerStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHandlerStatement) {
             listener.exitHandlerStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHandlerStatement) {
            return visitor.visitHandlerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerReadOrScanContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public values(): ValuesContext | null {
        return this.getRuleContext(MySQLParser.RULE_values, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public LESS_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
    }
    public GREATER_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
    }
    public LESS_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
    }
    public GREATER_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerReadOrScan;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHandlerReadOrScan) {
             listener.enterHandlerReadOrScan(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHandlerReadOrScan) {
             listener.exitHandlerReadOrScan(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHandlerReadOrScan) {
            return visitor.visitHandlerReadOrScan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public insertFromConstructor(): InsertFromConstructorContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertFromConstructor, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public insertQueryExpression(): InsertQueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertQueryExpression, 0);
    }
    public insertLockOption(): InsertLockOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertLockOption, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0);
    }
    public insertUpdateList(): InsertUpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertUpdateList, 0);
    }
    public valuesReference(): ValuesReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_valuesReference, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertStatement) {
             listener.enterInsertStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertStatement) {
             listener.exitInsertStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertLockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public DELAYED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
    }
    public HIGH_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertLockOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertLockOption) {
             listener.enterInsertLockOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertLockOption) {
             listener.exitInsertLockOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertLockOption) {
            return visitor.visitInsertLockOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertFromConstructorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertValues(): InsertValuesContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertValues, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fields(): FieldsContext | null {
        return this.getRuleContext(MySQLParser.RULE_fields, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertFromConstructor;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertFromConstructor) {
             listener.enterInsertFromConstructor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertFromConstructor) {
             listener.exitInsertFromConstructor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertFromConstructor) {
            return visitor.visitInsertFromConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertIdentifier_list(): Vector<InsertIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_insertIdentifier);
    }
    public insertIdentifier(i: number): InsertIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertIdentifier, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fields;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFields) {
             listener.enterFields(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFields) {
             listener.exitFields(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFields) {
            return visitor.visitFields(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertValuesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueList(): ValueListContext | null {
        return this.getRuleContext(MySQLParser.RULE_valueList, 0);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertValues;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertValues) {
             listener.enterInsertValues(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertValues) {
             listener.exitInsertValues(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertValues) {
            return visitor.visitInsertValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertQueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fields(): FieldsContext | null {
        return this.getRuleContext(MySQLParser.RULE_fields, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertQueryExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertQueryExpression) {
             listener.enterInsertQueryExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertQueryExpression) {
             listener.exitInsertQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertQueryExpression) {
            return visitor.visitInsertQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.OPEN_PAR_SYMBOL);
    }
    public OPEN_PAR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
    }
    public CLOSE_PAR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.CLOSE_PAR_SYMBOL);
    }
    public CLOSE_PAR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
    }
    public values_list(): Vector<ValuesContext> {
        return this.getRuleContexts(MySQLParser.RULE_values);
    }
    public values(i: number): ValuesContext | null {
        return this.getRuleContext(MySQLParser.RULE_values, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_valueList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterValueList) {
             listener.enterValueList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitValueList) {
             listener.exitValueList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitValueList) {
            return visitor.visitValueList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public DEFAULT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.DEFAULT_SYMBOL);
    }
    public DEFAULT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_values;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterValues) {
             listener.enterValues(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitValues) {
             listener.exitValues(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitValues) {
            return visitor.visitValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_valuesReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterValuesReference) {
             listener.enterValuesReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitValuesReference) {
             listener.exitValuesReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitValuesReference) {
            return visitor.visitValuesReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertUpdateListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertUpdateList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertUpdateList) {
             listener.enterInsertUpdateList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertUpdateList) {
             listener.exitInsertUpdateList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertUpdateList) {
            return visitor.visitInsertUpdateList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public dataOrXml(): DataOrXmlContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataOrXml, 0);
    }
    public INFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public loadDataFileTail(): LoadDataFileTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadDataFileTail, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0);
    }
    public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext | null {
        return this.getRuleContext(MySQLParser.RULE_xmlRowsIdentifiedBy, 0);
    }
    public fieldsClause(): FieldsClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldsClause, 0);
    }
    public linesClause(): LinesClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_linesClause, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadStatement) {
             listener.enterLoadStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadStatement) {
             listener.exitLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadStatement) {
            return visitor.visitLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataOrXmlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataOrXml;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDataOrXml) {
             listener.enterDataOrXml(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDataOrXml) {
             listener.exitDataOrXml(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDataOrXml) {
            return visitor.visitDataOrXml(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlRowsIdentifiedByContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xmlRowsIdentifiedBy;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterXmlRowsIdentifiedBy) {
             listener.enterXmlRowsIdentifiedBy(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitXmlRowsIdentifiedBy) {
             listener.exitXmlRowsIdentifiedBy(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitXmlRowsIdentifiedBy) {
            return visitor.visitXmlRowsIdentifiedBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadDataFileTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public loadDataFileTargetList(): LoadDataFileTargetListContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadDataFileTargetList, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public LINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINES_SYMBOL, 0);
    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadDataFileTail;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadDataFileTail) {
             listener.enterLoadDataFileTail(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadDataFileTail) {
             listener.exitLoadDataFileTail(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadDataFileTail) {
            return visitor.visitLoadDataFileTail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadDataFileTargetListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fieldOrVariableList(): FieldOrVariableListContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldOrVariableList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadDataFileTargetList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadDataFileTargetList) {
             listener.enterLoadDataFileTargetList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadDataFileTargetList) {
             listener.exitLoadDataFileTargetList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadDataFileTargetList) {
            return visitor.visitLoadDataFileTargetList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldOrVariableListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef_list(): Vector<ColumnRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnRef);
    }
    public columnRef(i: number): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, i);
    }
    public AT_SIGN_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AT_SIGN_SYMBOL);
    }
    public AT_SIGN_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, i);
    }
    public textOrIdentifier_list(): Vector<TextOrIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_textOrIdentifier);
    }
    public textOrIdentifier(i: number): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, i);
    }
    public AT_AT_SIGN_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AT_AT_SIGN_SYMBOL);
    }
    public AT_AT_SIGN_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public AT_TEXT_SUFFIX_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AT_TEXT_SUFFIX);
    }
    public AT_TEXT_SUFFIX(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldOrVariableList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldOrVariableList) {
             listener.enterFieldOrVariableList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldOrVariableList) {
             listener.exitFieldOrVariableList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldOrVariableList) {
            return visitor.visitFieldOrVariableList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public insertFromConstructor(): InsertFromConstructorContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertFromConstructor, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public insertQueryExpression(): InsertQueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertQueryExpression, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public DELAYED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replaceStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplaceStatement) {
             listener.enterReplaceStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplaceStatement) {
             listener.exitReplaceStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplaceStatement) {
            return visitor.visitReplaceStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0);
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatementWithInto, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithIntoContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatementWithInto, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_intoClause, 0);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectStatementWithInto;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectStatementWithInto) {
             listener.enterSelectStatementWithInto(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectStatementWithInto) {
             listener.exitSelectStatementWithInto(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectStatementWithInto) {
            return visitor.visitSelectStatementWithInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionBody(): QueryExpressionBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionBody, 0);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpression) {
             listener.enterQueryExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpression) {
             listener.exitQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpression) {
            return visitor.visitQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionBodyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryPrimary(): QueryPrimaryContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryPrimary, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public queryExpressionBody_list(): Vector<QueryExpressionBodyContext> {
        return this.getRuleContexts(MySQLParser.RULE_queryExpressionBody);
    }
    public queryExpressionBody(i: number): QueryExpressionBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionBody, i);
    }
    public UNION_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.UNION_SYMBOL);
    }
    public UNION_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.UNION_SYMBOL, i);
    }
    public EXCEPT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.EXCEPT_SYMBOL);
    }
    public EXCEPT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, i);
    }
    public INTERSECT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.INTERSECT_SYMBOL);
    }
    public INTERSECT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INTERSECT_SYMBOL, i);
    }
    public unionOption_list(): Vector<UnionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_unionOption);
    }
    public unionOption(i: number): UnionOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_unionOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionBody;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpressionBody) {
             listener.enterQueryExpressionBody(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpressionBody) {
             listener.exitQueryExpressionBody(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpressionBody) {
            return visitor.visitQueryExpressionBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionParens;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpressionParens) {
             listener.enterQueryExpressionParens(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpressionParens) {
             listener.exitQueryExpressionParens(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpressionParens) {
            return visitor.visitQueryExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(MySQLParser.RULE_querySpecification, 0);
    }
    public tableValueConstructor(): TableValueConstructorContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableValueConstructor, 0);
    }
    public explicitTable(): ExplicitTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_explicitTable, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryPrimary;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryPrimary) {
             listener.enterQueryPrimary(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryPrimary) {
             listener.exitQueryPrimary(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryPrimary) {
            return visitor.visitQueryPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
    }
    public selectItemList(): SelectItemListContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectItemList, 0);
    }
    public selectOption_list(): Vector<SelectOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_selectOption);
    }
    public selectOption(i: number): SelectOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectOption, i);
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_intoClause, 0);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_fromClause, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupByClause, 0);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_havingClause, 0);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_querySpecification;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubqueryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subquery;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSubquery) {
             listener.enterSubquery(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSubquery) {
             listener.exitSubquery(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSubquery) {
            return visitor.visitSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public STRAIGHT_JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
    }
    public HIGH_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
    }
    public SQL_SMALL_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0);
    }
    public SQL_BIG_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_CALC_FOUND_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_querySpecOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQuerySpecOption) {
             listener.enterQuerySpecOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQuerySpecOption) {
             listener.exitQuerySpecOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQuerySpecOption) {
            return visitor.visitQuerySpecOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
    }
    public limitOptions(): LimitOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleLimitClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
    }
    public limitOption(): LimitOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleLimitClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleLimitClause) {
             listener.enterSimpleLimitClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleLimitClause) {
             listener.exitSimpleLimitClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleLimitClause) {
            return visitor.visitSimpleLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public limitOption_list(): Vector<LimitOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_limitOption);
    }
    public limitOption(i: number): LimitOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitOption, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLimitOptions) {
             listener.enterLimitOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLimitOptions) {
             listener.exitLimitOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLimitOptions) {
            return visitor.visitLimitOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLimitOption) {
             listener.enterLimitOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLimitOption) {
             listener.exitLimitOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLimitOption) {
            return visitor.visitLimitOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntoClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public OUTFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTFILE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public textOrIdentifier_list(): Vector<TextOrIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_textOrIdentifier);
    }
    public textOrIdentifier(i: number): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, i);
    }
    public userVariable_list(): Vector<UserVariableContext> {
        return this.getRuleContexts(MySQLParser.RULE_userVariable);
    }
    public userVariable(i: number): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, i);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0);
    }
    public fieldsClause(): FieldsClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldsClause, 0);
    }
    public linesClause(): LinesClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_linesClause, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_intoClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIntoClause) {
             listener.enterIntoClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIntoClause) {
             listener.exitIntoClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIntoClause) {
            return visitor.visitIntoClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureAnalyseClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureAnalyseClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProcedureAnalyseClause) {
             listener.enterProcedureAnalyseClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProcedureAnalyseClause) {
             listener.exitProcedureAnalyseClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProcedureAnalyseClause) {
            return visitor.visitProcedureAnalyseClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HAVING_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_havingClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WINDOW_SYMBOL, 0);
    }
    public windowDefinition_list(): Vector<WindowDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_windowDefinition);
    }
    public windowDefinition(i: number): WindowDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowDefinition, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowClause) {
             listener.enterWindowClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowClause) {
             listener.exitWindowClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowSpec, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowDefinition) {
             listener.enterWindowDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowDefinition) {
             listener.exitWindowDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowDefinition) {
            return visitor.visitWindowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public windowSpecDetails(): WindowSpecDetailsContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowSpecDetails, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowSpec;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowSpec) {
             listener.enterWindowSpec(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowSpec) {
             listener.exitWindowSpec(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecDetailsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public windowFrameClause(): WindowFrameClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowSpecDetails;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowSpecDetails) {
             listener.enterWindowSpecDetails(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowSpecDetails) {
             listener.exitWindowSpecDetails(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowSpecDetails) {
            return visitor.visitWindowSpecDetails(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameUnits(): WindowFrameUnitsContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameUnits, 0);
    }
    public windowFrameExtent(): WindowFrameExtentContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameExtent, 0);
    }
    public windowFrameExclusion(): WindowFrameExclusionContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameExclusion, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameClause) {
             listener.enterWindowFrameClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameClause) {
             listener.exitWindowFrameClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameClause) {
            return visitor.visitWindowFrameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameUnitsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public RANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
    }
    public GROUPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUPS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameUnits;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameUnits) {
             listener.enterWindowFrameUnits(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameUnits) {
             listener.exitWindowFrameUnits(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameUnits) {
            return visitor.visitWindowFrameUnits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameExtentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameStart(): WindowFrameStartContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameStart, 0);
    }
    public windowFrameBetween(): WindowFrameBetweenContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameBetween, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameExtent;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameExtent) {
             listener.enterWindowFrameExtent(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameExtent) {
             listener.exitWindowFrameExtent(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameExtent) {
            return visitor.visitWindowFrameExtent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameStartContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameStart;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameStart) {
             listener.enterWindowFrameStart(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameStart) {
             listener.exitWindowFrameStart(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameStart) {
            return visitor.visitWindowFrameStart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameBetweenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BETWEEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
    }
    public windowFrameBound_list(): Vector<WindowFrameBoundContext> {
        return this.getRuleContexts(MySQLParser.RULE_windowFrameBound);
    }
    public windowFrameBound(i: number): WindowFrameBoundContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameBound, i);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameBetween;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameBetween) {
             listener.enterWindowFrameBetween(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameBetween) {
             listener.exitWindowFrameBetween(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameBetween) {
            return visitor.visitWindowFrameBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameBoundContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameStart(): WindowFrameStartContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameStart, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameBound;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameBound) {
             listener.enterWindowFrameBound(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameBound) {
             listener.exitWindowFrameBound(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameBound) {
            return visitor.visitWindowFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameExclusionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameExclusion;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameExclusion) {
             listener.enterWindowFrameExclusion(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameExclusion) {
             listener.exitWindowFrameExclusion(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameExclusion) {
            return visitor.visitWindowFrameExclusion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public commonTableExpression_list(): Vector<CommonTableExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_commonTableExpression);
    }
    public commonTableExpression(i: number): CommonTableExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_commonTableExpression, i);
    }
    public RECURSIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECURSIVE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWithClause) {
             listener.enterWithClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWithClause) {
             listener.exitWithClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonTableExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_commonTableExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCommonTableExpression) {
             listener.enterCommonTableExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCommonTableExpression) {
             listener.exitCommonTableExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCommonTableExpression) {
            return visitor.visitCommonTableExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0);
    }
    public olapOption(): OlapOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_olapOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupByClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OlapOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_olapOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOlapOption) {
             listener.enterOlapOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOlapOption) {
             listener.exitOlapOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOlapOption) {
            return visitor.visitOlapOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOrderClause) {
             listener.enterOrderClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOrderClause) {
             listener.exitOrderClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOrderClause) {
            return visitor.visitOrderClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DirectionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASC_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_direction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDirection) {
             listener.enterDirection(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDirection) {
             listener.exitDirection(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDirection) {
            return visitor.visitDirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public DUAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUAL_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fromClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableReferenceListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableReference_list(): Vector<TableReferenceContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableReference);
    }
    public tableReference(i: number): TableReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReference, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReferenceList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableReferenceList) {
             listener.enterTableReferenceList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableReferenceList) {
             listener.exitTableReferenceList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableReferenceList) {
            return visitor.visitTableReferenceList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableValueConstructorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public rowValueExplicit_list(): Vector<RowValueExplicitContext> {
        return this.getRuleContexts(MySQLParser.RULE_rowValueExplicit);
    }
    public rowValueExplicit(i: number): RowValueExplicitContext | null {
        return this.getRuleContext(MySQLParser.RULE_rowValueExplicit, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableValueConstructor;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableValueConstructor) {
             listener.enterTableValueConstructor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableValueConstructor) {
             listener.exitTableValueConstructor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableValueConstructor) {
            return visitor.visitTableValueConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplicitTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explicitTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExplicitTable) {
             listener.enterExplicitTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExplicitTable) {
             listener.exitExplicitTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExplicitTable) {
            return visitor.visitExplicitTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowValueExplicitContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public values(): ValuesContext | null {
        return this.getRuleContext(MySQLParser.RULE_values, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rowValueExplicit;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRowValueExplicit) {
             listener.enterRowValueExplicit(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRowValueExplicit) {
             listener.exitRowValueExplicit(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRowValueExplicit) {
            return visitor.visitRowValueExplicit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecOption(): QuerySpecOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_querySpecOption, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectOption) {
             listener.enterSelectOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectOption) {
             listener.exitSelectOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectOption) {
            return visitor.visitSelectOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockingClauseListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lockingClause_list(): Vector<LockingClauseContext> {
        return this.getRuleContexts(MySQLParser.RULE_lockingClause);
    }
    public lockingClause(i: number): LockingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClause, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockingClauseList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockingClauseList) {
             listener.enterLockingClauseList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockingClauseList) {
             listener.exitLockingClauseList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockingClauseList) {
            return visitor.visitLockingClauseList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public lockStrengh(): LockStrenghContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockStrengh, 0);
    }
    public OF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OF_SYMBOL, 0);
    }
    public tableAliasRefList(): TableAliasRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAliasRefList, 0);
    }
    public lockedRowAction(): LockedRowActionContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockedRowAction, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockingClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockingClause) {
             listener.enterLockingClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockingClause) {
             listener.exitLockingClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockingClause) {
            return visitor.visitLockingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockStrenghContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockStrengh;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockStrengh) {
             listener.enterLockStrengh(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockStrengh) {
             listener.exitLockStrengh(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockStrengh) {
            return visitor.visitLockStrengh(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockedRowActionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockedRowAction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockedRowAction) {
             listener.enterLockedRowAction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockedRowAction) {
             listener.exitLockedRowAction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockedRowAction) {
            return visitor.visitLockedRowAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectItem_list(): Vector<SelectItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_selectItem);
    }
    public selectItem(i: number): SelectItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectItem, i);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectItemList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectItemList) {
             listener.enterSelectItemList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectItemList) {
             listener.exitSelectItemList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectItemList) {
            return visitor.visitSelectItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableWild(): TableWildContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableWild, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public selectAlias(): SelectAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectAlias, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectItem) {
             listener.enterSelectItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectItem) {
             listener.exitSelectItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectItem) {
            return visitor.visitSelectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectAliasContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectAlias;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectAlias) {
             listener.enterSelectAlias(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectAlias) {
             listener.exitSelectAlias(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectAlias) {
            return visitor.visitSelectAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WHERE_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whereClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableFactor(): TableFactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0);
    }
    public OPEN_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
    }
    public escapedTableReference(): EscapedTableReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_escapedTableReference, 0);
    }
    public CLOSE_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
    }
    public joinedTable_list(): Vector<JoinedTableContext> {
        return this.getRuleContexts(MySQLParser.RULE_joinedTable);
    }
    public joinedTable(i: number): JoinedTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_joinedTable, i);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public OJ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OJ_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableReference) {
             listener.enterTableReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableReference) {
             listener.exitTableReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableReference) {
            return visitor.visitTableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EscapedTableReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableFactor(): TableFactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0);
    }
    public joinedTable_list(): Vector<JoinedTableContext> {
        return this.getRuleContexts(MySQLParser.RULE_joinedTable);
    }
    public joinedTable(i: number): JoinedTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_joinedTable, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_escapedTableReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEscapedTableReference) {
             listener.enterEscapedTableReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEscapedTableReference) {
             listener.exitEscapedTableReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEscapedTableReference) {
            return visitor.visitEscapedTableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinedTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public innerJoinType(): InnerJoinTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_innerJoinType, 0);
    }
    public tableReference(): TableReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReference, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0);
    }
    public outerJoinType(): OuterJoinTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_outerJoinType, 0);
    }
    public naturalJoinType(): NaturalJoinTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_naturalJoinType, 0);
    }
    public tableFactor(): TableFactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_joinedTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJoinedTable) {
             listener.enterJoinedTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJoinedTable) {
             listener.exitJoinedTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJoinedTable) {
            return visitor.visitJoinedTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NaturalJoinTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NATURAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public INNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INNER_SYMBOL, 0);
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public OUTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_naturalJoinType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNaturalJoinType) {
             listener.enterNaturalJoinType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNaturalJoinType) {
             listener.exitNaturalJoinType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNaturalJoinType) {
            return visitor.visitNaturalJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InnerJoinTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public INNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INNER_SYMBOL, 0);
    }
    public CROSS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CROSS_SYMBOL, 0);
    }
    public STRAIGHT_JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_innerJoinType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInnerJoinType) {
             listener.enterInnerJoinType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInnerJoinType) {
             listener.exitInnerJoinType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInnerJoinType) {
            return visitor.visitInnerJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OuterJoinTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public OUTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_outerJoinType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOuterJoinType) {
             listener.enterOuterJoinType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOuterJoinType) {
             listener.exitOuterJoinType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOuterJoinType) {
            return visitor.visitOuterJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFactorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleTable(): SingleTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_singleTable, 0);
    }
    public singleTableParens(): SingleTableParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_singleTableParens, 0);
    }
    public derivedTable(): DerivedTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_derivedTable, 0);
    }
    public tableReferenceListParens(): TableReferenceListParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceListParens, 0);
    }
    public tableFunction(): TableFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableFunction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableFactor;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableFactor) {
             listener.enterTableFactor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableFactor) {
             listener.exitTableFactor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableFactor) {
            return visitor.visitTableFactor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public indexHintList(): IndexHintListContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexHintList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_singleTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSingleTable) {
             listener.enterSingleTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSingleTable) {
             listener.exitSingleTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSingleTable) {
            return visitor.visitSingleTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleTableParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public singleTable(): SingleTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_singleTable, 0);
    }
    public singleTableParens(): SingleTableParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_singleTableParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_singleTableParens;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSingleTableParens) {
             listener.enterSingleTableParens(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSingleTableParens) {
             listener.exitSingleTableParens(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSingleTableParens) {
            return visitor.visitSingleTableParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DerivedTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public LATERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LATERAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_derivedTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDerivedTable) {
             listener.enterDerivedTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDerivedTable) {
             listener.exitDerivedTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDerivedTable) {
            return visitor.visitDerivedTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableReferenceListParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0);
    }
    public tableReferenceListParens(): TableReferenceListParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceListParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReferenceListParens;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableReferenceListParens) {
             listener.enterTableReferenceListParens(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableReferenceListParens) {
             listener.exitTableReferenceListParens(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableReferenceListParens) {
            return visitor.visitTableReferenceListParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnsClause, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableFunction) {
             listener.enterTableFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableFunction) {
             listener.exitTableFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableFunction) {
            return visitor.visitTableFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public jtColumn_list(): Vector<JtColumnContext> {
        return this.getRuleContexts(MySQLParser.RULE_jtColumn);
    }
    public jtColumn(i: number): JtColumnContext | null {
        return this.getRuleContext(MySQLParser.RULE_jtColumn, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnsClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnsClause) {
             listener.enterColumnsClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnsClause) {
             listener.exitColumnsClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnsClause) {
            return visitor.visitColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JtColumnContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public onEmptyOrErrorJsonTable(): OnEmptyOrErrorJsonTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrErrorJsonTable, 0);
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnsClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jtColumn;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJtColumn) {
             listener.enterJtColumn(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJtColumn) {
             listener.exitJtColumn(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJtColumn) {
            return visitor.visitJtColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnEmptyOrErrorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public onEmpty(): OnEmptyContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmpty, 0);
    }
    public onError(): OnErrorContext | null {
        return this.getRuleContext(MySQLParser.RULE_onError, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmptyOrError;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnEmptyOrError) {
             listener.enterOnEmptyOrError(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnEmptyOrError) {
             listener.exitOnEmptyOrError(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnEmptyOrError) {
            return visitor.visitOnEmptyOrError(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnEmptyOrErrorJsonTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public onEmptyOrError(): OnEmptyOrErrorContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrError, 0);
    }
    public onError(): OnErrorContext | null {
        return this.getRuleContext(MySQLParser.RULE_onError, 0);
    }
    public onEmpty(): OnEmptyContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmpty, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmptyOrErrorJsonTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnEmptyOrErrorJsonTable) {
             listener.enterOnEmptyOrErrorJsonTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnEmptyOrErrorJsonTable) {
             listener.exitOnEmptyOrErrorJsonTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnEmptyOrErrorJsonTable) {
            return visitor.visitOnEmptyOrErrorJsonTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnEmptyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonOnResponse(): JsonOnResponseContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonOnResponse, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public EMPTY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EMPTY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmpty;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnEmpty) {
             listener.enterOnEmpty(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnEmpty) {
             listener.exitOnEmpty(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnEmpty) {
            return visitor.visitOnEmpty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnErrorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonOnResponse(): JsonOnResponseContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonOnResponse, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onError;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnError) {
             listener.enterOnError(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnError) {
             listener.exitOnError(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnError) {
            return visitor.visitOnError(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonOnResponseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonOnResponse;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJsonOnResponse) {
             listener.enterJsonOnResponse(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJsonOnResponse) {
             listener.exitJsonOnResponse(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJsonOnResponse) {
            return visitor.visitJsonOnResponse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnionOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unionOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUnionOption) {
             listener.enterUnionOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUnionOption) {
             listener.exitUnionOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUnionOption) {
            return visitor.visitUnionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAlias;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexHint_list(): Vector<IndexHintContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexHint);
    }
    public indexHint(i: number): IndexHintContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexHint, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexHintList) {
             listener.enterIndexHintList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexHintList) {
             listener.exitIndexHintList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexHintList) {
            return visitor.visitIndexHintList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexHintType(): IndexHintTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexHintType, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public indexList(): IndexListContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public indexHintClause(): IndexHintClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexHintClause, 0);
    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHint;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexHint) {
             listener.enterIndexHint(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexHint) {
             listener.exitIndexHint(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexHint) {
            return visitor.visitIndexHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexHintType) {
             listener.enterIndexHintType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexHintType) {
             listener.exitIndexHintType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexHintType) {
            return visitor.visitIndexHintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyOrIndexContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyOrIndex;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyOrIndex) {
             listener.enterKeyOrIndex(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyOrIndex) {
             listener.exitKeyOrIndex(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyOrIndex) {
            return visitor.visitKeyOrIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintKeyTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintKeyType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConstraintKeyType) {
             listener.enterConstraintKeyType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConstraintKeyType) {
             listener.exitConstraintKeyType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConstraintKeyType) {
            return visitor.visitConstraintKeyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexHintClause) {
             listener.enterIndexHintClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexHintClause) {
             listener.exitIndexHintClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexHintClause) {
            return visitor.visitIndexHintClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexListElement_list(): Vector<IndexListElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexListElement);
    }
    public indexListElement(i: number): IndexListElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexListElement, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexList) {
             listener.enterIndexList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexList) {
             listener.exitIndexList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexList) {
            return visitor.visitIndexList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexListElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexListElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexListElement) {
             listener.enterIndexListElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexListElement) {
             listener.exitIndexListElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexListElement) {
            return visitor.visitIndexListElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public simpleLimitClause(): SimpleLimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleLimitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUpdateStatement) {
             listener.enterUpdateStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUpdateStatement) {
             listener.exitUpdateStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUpdateStatement) {
            return visitor.visitUpdateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionOrLockingStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionStatement(): TransactionStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionStatement, 0);
    }
    public savepointStatement(): SavepointStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_savepointStatement, 0);
    }
    public lockStatement(): LockStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockStatement, 0);
    }
    public xaStatement(): XaStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_xaStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionOrLockingStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTransactionOrLockingStatement) {
             listener.enterTransactionOrLockingStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTransactionOrLockingStatement) {
             listener.exitTransactionOrLockingStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTransactionOrLockingStatement) {
            return visitor.visitTransactionOrLockingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public startTransactionOptionList_list(): Vector<StartTransactionOptionListContext> {
        return this.getRuleContexts(MySQLParser.RULE_startTransactionOptionList);
    }
    public startTransactionOptionList(i: number): StartTransactionOptionListContext | null {
        return this.getRuleContext(MySQLParser.RULE_startTransactionOptionList, i);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public RELEASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
    }
    public NO_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.NO_SYMBOL);
    }
    public NO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTransactionStatement) {
             listener.enterTransactionStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTransactionStatement) {
             listener.exitTransactionStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTransactionStatement) {
            return visitor.visitTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeginWorkContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_beginWork;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterBeginWork) {
             listener.enterBeginWork(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitBeginWork) {
             listener.exitBeginWork(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitBeginWork) {
            return visitor.visitBeginWork(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartTransactionOptionListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startTransactionOptionList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStartTransactionOptionList) {
             listener.enterStartTransactionOptionList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStartTransactionOptionList) {
             listener.exitStartTransactionOptionList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStartTransactionOptionList) {
            return visitor.visitStartTransactionOptionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SavepointStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public RELEASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
    }
    public NO_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.NO_SYMBOL);
    }
    public NO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_savepointStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSavepointStatement) {
             listener.enterSavepointStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSavepointStatement) {
             listener.exitSavepointStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSavepointStatement) {
            return visitor.visitSavepointStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public lockItem_list(): Vector<LockItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_lockItem);
    }
    public lockItem(i: number): LockItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockItem, i);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public UNLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockStatement) {
             listener.enterLockStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockStatement) {
             listener.exitLockStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockStatement) {
            return visitor.visitLockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public lockOption(): LockOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockOption, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockItem) {
             listener.enterLockItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockItem) {
             listener.exitLockItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockItem) {
            return visitor.visitLockItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockOption) {
             listener.enterLockOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockOption) {
             listener.exitLockOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockOption) {
            return visitor.visitLockOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public xid(): XidContext | null {
        return this.getRuleContext(MySQLParser.RULE_xid, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public xaConvert(): XaConvertContext | null {
        return this.getRuleContext(MySQLParser.RULE_xaConvert, 0);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xaStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterXaStatement) {
             listener.enterXaStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitXaStatement) {
             listener.exitXaStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitXaStatement) {
            return visitor.visitXaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaConvertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xaConvert;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterXaConvert) {
             listener.enterXaConvert(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitXaConvert) {
             listener.exitXaConvert(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitXaConvert) {
            return visitor.visitXaConvert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XidContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString);
    }
    public textString(i: number): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xid;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterXid) {
             listener.enterXid(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitXid) {
             listener.exitXid(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitXid) {
            return visitor.visitXid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PURGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PURGE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public BEFORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public changeSource(): ChangeSourceContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeSource, 0);
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public resetOption_list(): Vector<ResetOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_resetOption);
    }
    public resetOption(i: number): ResetOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_resetOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public startReplicaStatement(): StartReplicaStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_startReplicaStatement, 0);
    }
    public stopReplicaStatement(): StopReplicaStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_stopReplicaStatement, 0);
    }
    public changeReplication(): ChangeReplicationContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplication, 0);
    }
    public replicationLoad(): ReplicationLoadContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicationLoad, 0);
    }
    public groupReplication(): GroupReplicationContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplication, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicationStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicationStatement) {
             listener.enterReplicationStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicationStatement) {
             listener.exitReplicationStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicationStatement) {
            return visitor.visitReplicationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResetOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public sourceResetOptions(): SourceResetOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceResetOptions, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resetOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResetOption) {
             listener.enterResetOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResetOption) {
             listener.exitResetOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResetOption) {
            return visitor.visitResetOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceResetOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceResetOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceResetOptions) {
             listener.enterSourceResetOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceResetOptions) {
             listener.exitSourceResetOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceResetOptions) {
            return visitor.visitSourceResetOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationLoadContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicationLoad;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicationLoad) {
             listener.enterReplicationLoad(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicationLoad) {
             listener.exitReplicationLoad(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicationLoad) {
            return visitor.visitReplicationLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSource;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSource) {
             listener.enterChangeReplicationSource(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSource) {
             listener.exitChangeReplicationSource(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSource) {
            return visitor.visitChangeReplicationSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeSourceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public changeReplicationSource(): ChangeReplicationSourceContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSource, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public sourceDefinitions(): SourceDefinitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceDefinitions, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeSource;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeSource) {
             listener.enterChangeSource(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeSource) {
             listener.exitChangeSource(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeSource) {
            return visitor.visitChangeSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceDefinition_list(): Vector<SourceDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_sourceDefinition);
    }
    public sourceDefinition(i: number): SourceDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceDefinition, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceDefinitions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceDefinitions) {
             listener.enterSourceDefinitions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceDefinitions) {
             listener.exitSourceDefinitions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceDefinitions) {
            return visitor.visitSourceDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public changeReplicationSourceHost(): ChangeReplicationSourceHostContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceHost, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public NETWORK_NAMESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
    }
    public changeReplicationSourceBind(): ChangeReplicationSourceBindContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceBind, 0);
    }
    public changeReplicationSourceUser(): ChangeReplicationSourceUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceUser, 0);
    }
    public changeReplicationSourcePassword(): ChangeReplicationSourcePasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePassword, 0);
    }
    public changeReplicationSourcePort(): ChangeReplicationSourcePortContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePort, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public changeReplicationSourceConnectRetry(): ChangeReplicationSourceConnectRetryContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceConnectRetry, 0);
    }
    public changeReplicationSourceRetryCount(): ChangeReplicationSourceRetryCountContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceRetryCount, 0);
    }
    public changeReplicationSourceDelay(): ChangeReplicationSourceDelayContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceDelay, 0);
    }
    public changeReplicationSourceSSL(): ChangeReplicationSourceSSLContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSL, 0);
    }
    public changeReplicationSourceSSLCA(): ChangeReplicationSourceSSLCAContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCA, 0);
    }
    public changeReplicationSourceSSLCApath(): ChangeReplicationSourceSSLCApathContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCApath, 0);
    }
    public changeReplicationSourceTLSVersion(): ChangeReplicationSourceTLSVersionContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceTLSVersion, 0);
    }
    public changeReplicationSourceSSLCert(): ChangeReplicationSourceSSLCertContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCert, 0);
    }
    public changeReplicationSourceTLSCiphersuites(): ChangeReplicationSourceTLSCiphersuitesContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceTLSCiphersuites, 0);
    }
    public sourceTlsCiphersuitesDef(): SourceTlsCiphersuitesDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceTlsCiphersuitesDef, 0);
    }
    public changeReplicationSourceSSLCipher(): ChangeReplicationSourceSSLCipherContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCipher, 0);
    }
    public changeReplicationSourceSSLKey(): ChangeReplicationSourceSSLKeyContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLKey, 0);
    }
    public changeReplicationSourceSSLVerifyServerCert(): ChangeReplicationSourceSSLVerifyServerCertContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert, 0);
    }
    public changeReplicationSourceSSLCLR(): ChangeReplicationSourceSSLCLRContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCLR, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public changeReplicationSourceSSLCLRpath(): ChangeReplicationSourceSSLCLRpathContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCLRpath, 0);
    }
    public changeReplicationSourcePublicKey(): ChangeReplicationSourcePublicKeyContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePublicKey, 0);
    }
    public changeReplicationSourceGetSourcePublicKey(): ChangeReplicationSourceGetSourcePublicKeyContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey, 0);
    }
    public changeReplicationSourceHeartbeatPeriod(): ChangeReplicationSourceHeartbeatPeriodContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public serverIdList(): ServerIdListContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverIdList, 0);
    }
    public changeReplicationSourceCompressionAlgorithm(): ChangeReplicationSourceCompressionAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public changeReplicationSourceZstdCompressionLevel(): ChangeReplicationSourceZstdCompressionLevelContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel, 0);
    }
    public changeReplicationSourceAutoPosition(): ChangeReplicationSourceAutoPositionContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceAutoPosition, 0);
    }
    public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
    }
    public privilegeCheckDef(): PrivilegeCheckDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_privilegeCheckDef, 0);
    }
    public REQUIRE_ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
    }
    public REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
    }
    public tablePrimaryKeyCheckDef(): TablePrimaryKeyCheckDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablePrimaryKeyCheckDef, 0);
    }
    public SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0);
    }
    public assignGtidsToAnonymousTransactionsDefinition(): AssignGtidsToAnonymousTransactionsDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition, 0);
    }
    public GTID_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GTID_ONLY_SYMBOL, 0);
    }
    public sourceFileDef(): SourceFileDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceFileDef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceDefinition) {
             listener.enterSourceDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceDefinition) {
             listener.exitSourceDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceDefinition) {
            return visitor.visitSourceDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceAutoPositionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public SOURCE_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceAutoPosition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceAutoPosition) {
             listener.enterChangeReplicationSourceAutoPosition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceAutoPosition) {
             listener.exitChangeReplicationSourceAutoPosition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceAutoPosition) {
            return visitor.visitChangeReplicationSourceAutoPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceHostContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public SOURCE_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceHost;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceHost) {
             listener.enterChangeReplicationSourceHost(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceHost) {
             listener.exitChangeReplicationSourceHost(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceHost) {
            return visitor.visitChangeReplicationSourceHost(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceBindContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0);
    }
    public SOURCE_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceBind;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceBind) {
             listener.enterChangeReplicationSourceBind(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceBind) {
             listener.exitChangeReplicationSourceBind(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceBind) {
            return visitor.visitChangeReplicationSourceBind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public SOURCE_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_USER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceUser) {
             listener.enterChangeReplicationSourceUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceUser) {
             listener.exitChangeReplicationSourceUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceUser) {
            return visitor.visitChangeReplicationSourceUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourcePasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public SOURCE_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourcePassword) {
             listener.enterChangeReplicationSourcePassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourcePassword) {
             listener.exitChangeReplicationSourcePassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourcePassword) {
            return visitor.visitChangeReplicationSourcePassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourcePortContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public SOURCE_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePort;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourcePort) {
             listener.enterChangeReplicationSourcePort(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourcePort) {
             listener.exitChangeReplicationSourcePort(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourcePort) {
            return visitor.visitChangeReplicationSourcePort(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceConnectRetryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public SOURCE_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceConnectRetry;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceConnectRetry) {
             listener.enterChangeReplicationSourceConnectRetry(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceConnectRetry) {
             listener.exitChangeReplicationSourceConnectRetry(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceConnectRetry) {
            return visitor.visitChangeReplicationSourceConnectRetry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceRetryCountContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public SOURCE_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceRetryCount;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceRetryCount) {
             listener.enterChangeReplicationSourceRetryCount(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceRetryCount) {
             listener.exitChangeReplicationSourceRetryCount(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceRetryCount) {
            return visitor.visitChangeReplicationSourceRetryCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceDelayContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public SOURCE_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceDelay;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceDelay) {
             listener.enterChangeReplicationSourceDelay(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceDelay) {
             listener.exitChangeReplicationSourceDelay(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceDelay) {
            return visitor.visitChangeReplicationSourceDelay(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public SOURCE_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSL;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSL) {
             listener.enterChangeReplicationSourceSSL(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSL) {
             listener.exitChangeReplicationSourceSSL(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSL) {
            return visitor.visitChangeReplicationSourceSSL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCAContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public SOURCE_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCA;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCA) {
             listener.enterChangeReplicationSourceSSLCA(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCA) {
             listener.exitChangeReplicationSourceSSLCA(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCA) {
            return visitor.visitChangeReplicationSourceSSLCA(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCApathContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCApath;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCApath) {
             listener.enterChangeReplicationSourceSSLCApath(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCApath) {
             listener.exitChangeReplicationSourceSSLCApath(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCApath) {
            return visitor.visitChangeReplicationSourceSSLCApath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCipherContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public SOURCE_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCipher;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCipher) {
             listener.enterChangeReplicationSourceSSLCipher(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCipher) {
             listener.exitChangeReplicationSourceSSLCipher(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCipher) {
            return visitor.visitChangeReplicationSourceSSLCipher(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCLRContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public SOURCE_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCLR;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCLR) {
             listener.enterChangeReplicationSourceSSLCLR(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCLR) {
             listener.exitChangeReplicationSourceSSLCLR(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCLR) {
            return visitor.visitChangeReplicationSourceSSLCLR(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCLRpathContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCLRpath;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCLRpath) {
             listener.enterChangeReplicationSourceSSLCLRpath(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCLRpath) {
             listener.exitChangeReplicationSourceSSLCLRpath(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCLRpath) {
            return visitor.visitChangeReplicationSourceSSLCLRpath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public SOURCE_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLKey;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLKey) {
             listener.enterChangeReplicationSourceSSLKey(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLKey) {
             listener.exitChangeReplicationSourceSSLKey(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLKey) {
            return visitor.visitChangeReplicationSourceSSLKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLVerifyServerCertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLVerifyServerCert) {
             listener.enterChangeReplicationSourceSSLVerifyServerCert(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLVerifyServerCert) {
             listener.exitChangeReplicationSourceSSLVerifyServerCert(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLVerifyServerCert) {
            return visitor.visitChangeReplicationSourceSSLVerifyServerCert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceTLSVersionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public SOURCE_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceTLSVersion;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceTLSVersion) {
             listener.enterChangeReplicationSourceTLSVersion(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceTLSVersion) {
             listener.exitChangeReplicationSourceTLSVersion(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceTLSVersion) {
            return visitor.visitChangeReplicationSourceTLSVersion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceTLSCiphersuitesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public SOURCE_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceTLSCiphersuites;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceTLSCiphersuites) {
             listener.enterChangeReplicationSourceTLSCiphersuites(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceTLSCiphersuites) {
             listener.exitChangeReplicationSourceTLSCiphersuites(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceTLSCiphersuites) {
            return visitor.visitChangeReplicationSourceTLSCiphersuites(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCert;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCert) {
             listener.enterChangeReplicationSourceSSLCert(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCert) {
             listener.exitChangeReplicationSourceSSLCert(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCert) {
            return visitor.visitChangeReplicationSourceSSLCert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourcePublicKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public SOURCE_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePublicKey;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourcePublicKey) {
             listener.enterChangeReplicationSourcePublicKey(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourcePublicKey) {
             listener.exitChangeReplicationSourcePublicKey(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourcePublicKey) {
            return visitor.visitChangeReplicationSourcePublicKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceGetSourcePublicKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
    }
    public GET_SOURCE_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceGetSourcePublicKey) {
             listener.enterChangeReplicationSourceGetSourcePublicKey(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceGetSourcePublicKey) {
             listener.exitChangeReplicationSourceGetSourcePublicKey(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceGetSourcePublicKey) {
            return visitor.visitChangeReplicationSourceGetSourcePublicKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceHeartbeatPeriodContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public SOURCE_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceHeartbeatPeriod) {
             listener.enterChangeReplicationSourceHeartbeatPeriod(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceHeartbeatPeriod) {
             listener.exitChangeReplicationSourceHeartbeatPeriod(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceHeartbeatPeriod) {
            return visitor.visitChangeReplicationSourceHeartbeatPeriod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceCompressionAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public SOURCE_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceCompressionAlgorithm) {
             listener.enterChangeReplicationSourceCompressionAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceCompressionAlgorithm) {
             listener.exitChangeReplicationSourceCompressionAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceCompressionAlgorithm) {
            return visitor.visitChangeReplicationSourceCompressionAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceZstdCompressionLevelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceZstdCompressionLevel) {
             listener.enterChangeReplicationSourceZstdCompressionLevel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceZstdCompressionLevel) {
             listener.exitChangeReplicationSourceZstdCompressionLevel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceZstdCompressionLevel) {
            return visitor.visitChangeReplicationSourceZstdCompressionLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeCheckDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext | null {
        return this.getRuleContext(MySQLParser.RULE_userIdentifierOrText, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_privilegeCheckDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrivilegeCheckDef) {
             listener.enterPrivilegeCheckDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrivilegeCheckDef) {
             listener.exitPrivilegeCheckDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrivilegeCheckDef) {
            return visitor.visitPrivilegeCheckDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePrimaryKeyCheckDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STREAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablePrimaryKeyCheckDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablePrimaryKeyCheckDef) {
             listener.enterTablePrimaryKeyCheckDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablePrimaryKeyCheckDef) {
             listener.exitTablePrimaryKeyCheckDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablePrimaryKeyCheckDef) {
            return visitor.visitTablePrimaryKeyCheckDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignGtidsToAnonymousTransactionsDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAssignGtidsToAnonymousTransactionsDefinition) {
             listener.enterAssignGtidsToAnonymousTransactionsDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAssignGtidsToAnonymousTransactionsDefinition) {
             listener.exitAssignGtidsToAnonymousTransactionsDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAssignGtidsToAnonymousTransactionsDefinition) {
            return visitor.visitAssignGtidsToAnonymousTransactionsDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceTlsCiphersuitesDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceTlsCiphersuitesDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceTlsCiphersuitesDef) {
             listener.enterSourceTlsCiphersuitesDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceTlsCiphersuitesDef) {
             listener.exitSourceTlsCiphersuitesDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceTlsCiphersuitesDef) {
            return visitor.visitSourceTlsCiphersuitesDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceFileDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceLogFile(): SourceLogFileContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceLogFile, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public sourceLogPos(): SourceLogPosContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceLogPos, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceFileDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceFileDef) {
             listener.enterSourceFileDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceFileDef) {
             listener.exitSourceFileDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceFileDef) {
            return visitor.visitSourceFileDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceLogFileContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public SOURCE_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceLogFile;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceLogFile) {
             listener.enterSourceLogFile(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceLogFile) {
             listener.exitSourceLogFile(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceLogFile) {
            return visitor.visitSourceLogFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceLogPosContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public SOURCE_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceLogPos;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceLogPos) {
             listener.enterSourceLogPos(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceLogPos) {
             listener.exitSourceLogPos(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceLogPos) {
            return visitor.visitSourceLogPos(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerIdListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number);
    }
    public ulong_number(i: number): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverIdList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerIdList) {
             listener.enterServerIdList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerIdList) {
             listener.exitServerIdList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerIdList) {
            return visitor.visitServerIdList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public filterDefinition_list(): Vector<FilterDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterDefinition);
    }
    public filterDefinition(i: number): FilterDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterDefinition, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplication;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplication) {
             listener.enterChangeReplication(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplication) {
             listener.exitChangeReplication(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplication) {
            return visitor.visitChangeReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public filterDbList(): FilterDbListContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterDbList, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public filterTableList(): FilterTableListContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterTableList, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public filterStringList(): FilterStringListContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterStringList, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public filterDbPairList(): FilterDbPairListContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterDbPairList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterDefinition) {
             listener.enterFilterDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterDefinition) {
             listener.exitFilterDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterDefinition) {
            return visitor.visitFilterDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterDbListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaRef_list(): Vector<SchemaRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaRef);
    }
    public schemaRef(i: number): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDbList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterDbList) {
             listener.enterFilterDbList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterDbList) {
             listener.exitFilterDbList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterDbList) {
            return visitor.visitFilterDbList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterTableListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public filterTableRef_list(): Vector<FilterTableRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterTableRef);
    }
    public filterTableRef(i: number): FilterTableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterTableRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterTableList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterTableList) {
             listener.enterFilterTableList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterTableList) {
             listener.exitFilterTableList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterTableList) {
            return visitor.visitFilterTableList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterStringListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public filterWildDbTableString_list(): Vector<FilterWildDbTableStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterWildDbTableString);
    }
    public filterWildDbTableString(i: number): FilterWildDbTableStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterWildDbTableString, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterStringList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterStringList) {
             listener.enterFilterStringList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterStringList) {
             listener.exitFilterStringList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterStringList) {
            return visitor.visitFilterStringList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterWildDbTableStringContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterWildDbTableString;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterWildDbTableString) {
             listener.enterFilterWildDbTableString(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterWildDbTableString) {
             listener.exitFilterWildDbTableString(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterWildDbTableString) {
            return visitor.visitFilterWildDbTableString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterDbPairListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaIdentifierPair_list(): Vector<SchemaIdentifierPairContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaIdentifierPair);
    }
    public schemaIdentifierPair(i: number): SchemaIdentifierPairContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaIdentifierPair, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDbPairList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterDbPairList) {
             listener.enterFilterDbPairList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterDbPairList) {
             listener.exitFilterDbPairList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterDbPairList) {
            return visitor.visitFilterDbPairList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartReplicaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOptions, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public replicaUntil(): ReplicaUntilContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicaUntil, 0);
    }
    public userOption(): UserOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_userOption, 0);
    }
    public passwordOption(): PasswordOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_passwordOption, 0);
    }
    public defaultAuthOption(): DefaultAuthOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultAuthOption, 0);
    }
    public pluginDirOption(): PluginDirOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_pluginDirOption, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startReplicaStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStartReplicaStatement) {
             listener.enterStartReplicaStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStartReplicaStatement) {
             listener.exitStartReplicaStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStartReplicaStatement) {
            return visitor.visitStartReplicaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StopReplicaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOptions, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stopReplicaStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStopReplicaStatement) {
             listener.enterStopReplicaStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStopReplicaStatement) {
             listener.exitStopReplicaStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStopReplicaStatement) {
            return visitor.visitStopReplicaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicaUntilContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceFileDef_list(): Vector<SourceFileDefContext> {
        return this.getRuleContexts(MySQLParser.RULE_sourceFileDef);
    }
    public sourceFileDef(i: number): SourceFileDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceFileDef, i);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaUntil;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicaUntil) {
             listener.enterReplicaUntil(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicaUntil) {
             listener.exitReplicaUntil(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicaUntil) {
            return visitor.visitReplicaUntil(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserOption) {
             listener.enterUserOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserOption) {
             listener.exitUserOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserOption) {
            return visitor.visitUserOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PasswordOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_passwordOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPasswordOption) {
             listener.enterPasswordOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPasswordOption) {
             listener.exitPasswordOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPasswordOption) {
            return visitor.visitPasswordOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultAuthOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultAuthOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultAuthOption) {
             listener.enterDefaultAuthOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultAuthOption) {
             listener.exitDefaultAuthOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultAuthOption) {
            return visitor.visitDefaultAuthOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PluginDirOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pluginDirOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPluginDirOption) {
             listener.enterPluginDirOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPluginDirOption) {
             listener.exitPluginDirOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPluginDirOption) {
            return visitor.visitPluginDirOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicaThreadOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public replicaThreadOption_list(): Vector<ReplicaThreadOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_replicaThreadOption);
    }
    public replicaThreadOption(i: number): ReplicaThreadOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaThreadOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicaThreadOptions) {
             listener.enterReplicaThreadOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicaThreadOptions) {
             listener.exitReplicaThreadOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicaThreadOptions) {
            return visitor.visitReplicaThreadOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicaThreadOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaThreadOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicaThreadOption) {
             listener.enterReplicaThreadOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicaThreadOption) {
             listener.exitReplicaThreadOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicaThreadOption) {
            return visitor.visitReplicaThreadOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public groupReplicationStartOptions(): GroupReplicationStartOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationStartOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplication;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplication) {
             listener.enterGroupReplication(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplication) {
             listener.exitGroupReplication(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplication) {
            return visitor.visitGroupReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationStartOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupReplicationStartOption_list(): Vector<GroupReplicationStartOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_groupReplicationStartOption);
    }
    public groupReplicationStartOption(i: number): GroupReplicationStartOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationStartOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationStartOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationStartOptions) {
             listener.enterGroupReplicationStartOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationStartOptions) {
             listener.exitGroupReplicationStartOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationStartOptions) {
            return visitor.visitGroupReplicationStartOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationStartOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupReplicationUser(): GroupReplicationUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationUser, 0);
    }
    public groupReplicationPassword(): GroupReplicationPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationPassword, 0);
    }
    public groupReplicationPluginAuth(): GroupReplicationPluginAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationPluginAuth, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationStartOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationStartOption) {
             listener.enterGroupReplicationStartOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationStartOption) {
             listener.exitGroupReplicationStartOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationStartOption) {
            return visitor.visitGroupReplicationStartOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationUser) {
             listener.enterGroupReplicationUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationUser) {
             listener.exitGroupReplicationUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationUser) {
            return visitor.visitGroupReplicationUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationPassword) {
             listener.enterGroupReplicationPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationPassword) {
             listener.exitGroupReplicationPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationPassword) {
            return visitor.visitGroupReplicationPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationPluginAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationPluginAuth;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationPluginAuth) {
             listener.enterGroupReplicationPluginAuth(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationPluginAuth) {
             listener.exitGroupReplicationPluginAuth(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationPluginAuth) {
            return visitor.visitGroupReplicationPluginAuth(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public REPLICA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replica;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplica) {
             listener.enterReplica(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplica) {
             listener.exitReplica(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplica) {
            return visitor.visitReplica(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreparedStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public executeStatement(): ExecuteStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_executeStatement, 0);
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preparedStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPreparedStatement) {
             listener.enterPreparedStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPreparedStatement) {
             listener.exitPreparedStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPreparedStatement) {
            return visitor.visitPreparedStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public executeVarList(): ExecuteVarListContext | null {
        return this.getRuleContext(MySQLParser.RULE_executeVarList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_executeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExecuteStatement) {
             listener.enterExecuteStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExecuteStatement) {
             listener.exitExecuteStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExecuteStatement) {
            return visitor.visitExecuteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteVarListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable_list(): Vector<UserVariableContext> {
        return this.getRuleContexts(MySQLParser.RULE_userVariable);
    }
    public userVariable(i: number): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_executeVarList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExecuteVarList) {
             listener.enterExecuteVarList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExecuteVarList) {
             listener.exitExecuteVarList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExecuteVarList) {
            return visitor.visitExecuteVarList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CloneStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public REMOTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public COLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLON_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public dataDirSSL(): DataDirSSLContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataDirSSL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cloneStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCloneStatement) {
             listener.enterCloneStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCloneStatement) {
             listener.exitCloneStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCloneStatement) {
            return visitor.visitCloneStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataDirSSLContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ssl(): SslContext | null {
        return this.getRuleContext(MySQLParser.RULE_ssl, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataDirSSL;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDataDirSSL) {
             listener.enterDataDirSSL(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDataDirSSL) {
             listener.exitDataDirSSL(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDataDirSSL) {
            return visitor.visitDataDirSSL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SslContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SSL_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ssl;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSsl) {
             listener.enterSsl(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSsl) {
             listener.exitSsl(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSsl) {
            return visitor.visitSsl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccountManagementStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterUserStatement(): AlterUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterUserStatement, 0);
    }
    public createUserStatement(): CreateUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserStatement, 0);
    }
    public dropUserStatement(): DropUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropUserStatement, 0);
    }
    public grantStatement(): GrantStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantStatement, 0);
    }
    public renameUserStatement(): RenameUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_renameUserStatement, 0);
    }
    public revokeStatement(): RevokeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_revokeStatement, 0);
    }
    public setRoleStatement(): SetRoleStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_setRoleStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_accountManagementStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAccountManagementStatement) {
             listener.enterAccountManagementStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAccountManagementStatement) {
             listener.exitAccountManagementStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAccountManagementStatement) {
            return visitor.visitAccountManagementStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public createUserTail(): CreateUserTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserTail, 0);
    }
    public userFunction(): UserFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_userFunction, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public createUserList(): CreateUserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0);
    }
    public alterUserList(): AlterUserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterUserList, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public replacePassword(): ReplacePasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_replacePassword, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0);
    }
    public userRegistration(): UserRegistrationContext | null {
        return this.getRuleContext(MySQLParser.RULE_userRegistration, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterUserStatement) {
             listener.enterAlterUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterUserStatement) {
             listener.exitAlterUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterUserStatement) {
            return visitor.visitAlterUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterUser_list(): Vector<AlterUserContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterUser);
    }
    public alterUser(i: number): AlterUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterUser, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUserList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterUserList) {
             listener.enterAlterUserList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterUserList) {
             listener.exitAlterUserList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterUserList) {
            return visitor.visitAlterUserList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public oldAlterUser(): OldAlterUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_oldAlterUser, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0);
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByPassword, 0);
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByRandomPassword, 0);
    }
    public ADD_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ADD_SYMBOL);
    }
    public ADD_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, i);
    }
    public factor_list(): Vector<FactorContext> {
        return this.getRuleContexts(MySQLParser.RULE_factor);
    }
    public factor(i: number): FactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_factor, i);
    }
    public identification_list(): Vector<IdentificationContext> {
        return this.getRuleContexts(MySQLParser.RULE_identification);
    }
    public identification(i: number): IdentificationContext | null {
        return this.getRuleContext(MySQLParser.RULE_identification, i);
    }
    public MODIFY_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MODIFY_SYMBOL);
    }
    public MODIFY_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, i);
    }
    public DROP_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.DROP_SYMBOL);
    }
    public DROP_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, i);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0);
    }
    public discardOldPassword(): DiscardOldPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_discardOldPassword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterUser) {
             listener.enterAlterUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterUser) {
             listener.exitAlterUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterUser) {
            return visitor.visitAlterUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OldAlterUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString);
    }
    public textString(i: number): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, i);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0);
    }
    public discardOldPassword(): DiscardOldPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_discardOldPassword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_oldAlterUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOldAlterUser) {
             listener.enterOldAlterUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOldAlterUser) {
             listener.exitOldAlterUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOldAlterUser) {
            return visitor.visitOldAlterUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserFunction) {
             listener.enterUserFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserFunction) {
             listener.exitUserFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserFunction) {
            return visitor.visitUserFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public createUserList(): CreateUserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0);
    }
    public createUserTail(): CreateUserTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserTail, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public defaultRoleClause(): DefaultRoleClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultRoleClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUserStatement) {
             listener.enterCreateUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUserStatement) {
             listener.exitCreateUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUserStatement) {
            return visitor.visitCreateUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireClause(): RequireClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_requireClause, 0);
    }
    public connectOptions(): ConnectOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_connectOptions, 0);
    }
    public accountLockPasswordExpireOptions_list(): Vector<AccountLockPasswordExpireOptionsContext> {
        return this.getRuleContexts(MySQLParser.RULE_accountLockPasswordExpireOptions);
    }
    public accountLockPasswordExpireOptions(i: number): AccountLockPasswordExpireOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_accountLockPasswordExpireOptions, i);
    }
    public userAttributes(): UserAttributesContext | null {
        return this.getRuleContext(MySQLParser.RULE_userAttributes, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserTail;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUserTail) {
             listener.enterCreateUserTail(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUserTail) {
             listener.exitCreateUserTail(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUserTail) {
            return visitor.visitCreateUserTail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserAttributesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userAttributes;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserAttributes) {
             listener.enterUserAttributes(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserAttributes) {
             listener.exitUserAttributes(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserAttributes) {
            return visitor.visitUserAttributes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultRoleClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultRoleClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultRoleClause) {
             listener.enterDefaultRoleClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultRoleClause) {
             listener.exitDefaultRoleClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultRoleClause) {
            return visitor.visitDefaultRoleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RequireClauseContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public requireList(): RequireListContext | null {
        return this.getRuleContext(MySQLParser.RULE_requireList, 0);
    }
    public SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SSL_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRequireClause) {
             listener.enterRequireClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRequireClause) {
             listener.exitRequireClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRequireClause) {
            return visitor.visitRequireClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConnectOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number);
    }
    public ulong_number(i: number): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
    }
    public MAX_USER_CONNECTIONS_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_connectOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConnectOptions) {
             listener.enterConnectOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConnectOptions) {
             listener.exitConnectOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConnectOptions) {
            return visitor.visitConnectOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public UNLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EXPIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
    }
    public PASSWORD_LOCK_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_accountLockPasswordExpireOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAccountLockPasswordExpireOptions) {
             listener.enterAccountLockPasswordExpireOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAccountLockPasswordExpireOptions) {
             listener.exitAccountLockPasswordExpireOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAccountLockPasswordExpireOptions) {
            return visitor.visitAccountLockPasswordExpireOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserAttribute) {
             listener.enterUserAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserAttribute) {
             listener.exitUserAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserAttribute) {
            return visitor.visitUserAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropUserStatement) {
             listener.enterDropUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropUserStatement) {
             listener.exitDropUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropUserStatement) {
            return visitor.visitDropUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.GRANT_SYMBOL);
    }
    public GRANT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, i);
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilegesList, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public grantIdentifier(): GrantIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantIdentifier, 0);
    }
    public grantTargetList(): GrantTargetListContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantTargetList, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public aclType(): AclTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_aclType, 0);
    }
    public versionedRequireClause(): VersionedRequireClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_versionedRequireClause, 0);
    }
    public grantOptions(): GrantOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantOptions, 0);
    }
    public grantAs(): GrantAsContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantAs, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantStatement) {
             listener.enterGrantStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantStatement) {
             listener.exitGrantStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantStatement) {
            return visitor.visitGrantStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantTargetListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createUserList(): CreateUserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantTargetList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantTargetList) {
             listener.enterGrantTargetList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantTargetList) {
             listener.exitGrantTargetList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantTargetList) {
            return visitor.visitGrantTargetList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public grantOption_list(): Vector<GrantOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_grantOption);
    }
    public grantOption(i: number): GrantOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantOptions) {
             listener.enterGrantOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantOptions) {
             listener.exitGrantOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantOptions) {
            return visitor.visitGrantOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExceptRoleListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCEPT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exceptRoleList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExceptRoleList) {
             listener.enterExceptRoleList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExceptRoleList) {
             listener.exitExceptRoleList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExceptRoleList) {
            return visitor.visitExceptRoleList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithRolesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public exceptRoleList(): ExceptRoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exceptRoleList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withRoles;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWithRoles) {
             listener.enterWithRoles(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWithRoles) {
             listener.exitWithRoles(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWithRoles) {
            return visitor.visitWithRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantAsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public withRoles(): WithRolesContext | null {
        return this.getRuleContext(MySQLParser.RULE_withRoles, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantAs;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantAs) {
             listener.enterGrantAs(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantAs) {
             listener.exitGrantAs(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantAs) {
            return visitor.visitGrantAs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VersionedRequireClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireClause(): RequireClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_requireClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_versionedRequireClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterVersionedRequireClause) {
             listener.enterVersionedRequireClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitVersionedRequireClause) {
             listener.exitVersionedRequireClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitVersionedRequireClause) {
            return visitor.visitVersionedRequireClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public user_list(): Vector<UserContext> {
        return this.getRuleContexts(MySQLParser.RULE_user);
    }
    public user(i: number): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, i);
    }
    public TO_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.TO_SYMBOL);
    }
    public TO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renameUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRenameUserStatement) {
             listener.enterRenameUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRenameUserStatement) {
             listener.exitRenameUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRenameUserStatement) {
            return visitor.visitRenameUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVOKE_SYMBOL, 0);
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilegesList, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public grantIdentifier(): GrantIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantIdentifier, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public ignoreUnknownUser(): IgnoreUnknownUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_ignoreUnknownUser, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public aclType(): AclTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_aclType, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_revokeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRevokeStatement) {
             listener.enterRevokeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRevokeStatement) {
             listener.exitRevokeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRevokeStatement) {
            return visitor.visitRevokeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AclTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_aclType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAclType) {
             listener.enterAclType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAclType) {
             listener.exitAclType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAclType) {
            return visitor.visitAclType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOrPrivilegesListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrPrivilege_list(): Vector<RoleOrPrivilegeContext> {
        return this.getRuleContexts(MySQLParser.RULE_roleOrPrivilege);
    }
    public roleOrPrivilege(i: number): RoleOrPrivilegeContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilege, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrPrivilegesList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleOrPrivilegesList) {
             listener.enterRoleOrPrivilegesList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleOrPrivilegesList) {
             listener.exitRoleOrPrivilegesList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleOrPrivilegesList) {
            return visitor.visitRoleOrPrivilegesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOrPrivilegeContext extends ParserRuleContext {
    public _object!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifierOrText, 0);
    }
    public AT_TEXT_SUFFIX(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public SELECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public REFERENCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public USAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USAGE_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public DATABASES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrPrivilege;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleOrPrivilege) {
             listener.enterRoleOrPrivilege(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleOrPrivilege) {
             listener.exitRoleOrPrivilege(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleOrPrivilege) {
            return visitor.visitRoleOrPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MULT_OPERATOR_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MULT_OPERATOR);
    }
    public MULT_OPERATOR(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, i);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantIdentifier) {
             listener.enterGrantIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantIdentifier) {
             listener.exitGrantIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantIdentifier) {
            return visitor.visitGrantIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RequireListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireListElement_list(): Vector<RequireListElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_requireListElement);
    }
    public requireListElement(i: number): RequireListElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_requireListElement, i);
    }
    public AND_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AND_SYMBOL);
    }
    public AND_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRequireList) {
             listener.enterRequireList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRequireList) {
             listener.exitRequireList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRequireList) {
            return visitor.visitRequireList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RequireListElementContext extends ParserRuleContext {
    public _element!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireListElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRequireListElement) {
             listener.enterRequireListElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRequireListElement) {
             listener.exitRequireListElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRequireListElement) {
            return visitor.visitRequireListElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantOption) {
             listener.enterGrantOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantOption) {
             listener.exitGrantOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantOption) {
            return visitor.visitGrantOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRoleStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList_list(): Vector<RoleListContext> {
        return this.getRuleContexts(MySQLParser.RULE_roleList);
    }
    public roleList(i: number): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, i);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public EXCEPT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setRoleStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetRoleStatement) {
             listener.enterSetRoleStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetRoleStatement) {
             listener.exitSetRoleStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetRoleStatement) {
            return visitor.visitSetRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public role_list(): Vector<RoleContext> {
        return this.getRuleContexts(MySQLParser.RULE_role);
    }
    public role(i: number): RoleContext | null {
        return this.getRuleContext(MySQLParser.RULE_role, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleList) {
             listener.enterRoleList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleList) {
             listener.exitRoleList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleList) {
            return visitor.visitRoleList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifierOrText, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_role;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRole) {
             listener.enterRole(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRole) {
             listener.exitRole(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRole) {
            return visitor.visitRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAdministrationStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRefList(): TableRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0);
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public noWriteToBinLog(): NoWriteToBinLogContext | null {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, 0);
    }
    public histogram(): HistogramContext | null {
        return this.getRuleContext(MySQLParser.RULE_histogram, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public checkOption_list(): Vector<CheckOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_checkOption);
    }
    public checkOption(i: number): CheckOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkOption, i);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public OPTIMIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public repairType_list(): Vector<RepairTypeContext> {
        return this.getRuleContexts(MySQLParser.RULE_repairType);
    }
    public repairType(i: number): RepairTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_repairType, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAdministrationStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableAdministrationStatement) {
             listener.enterTableAdministrationStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableAdministrationStatement) {
             listener.exitTableAdministrationStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableAdministrationStatement) {
            return visitor.visitTableAdministrationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HistogramContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_histogram;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHistogram) {
             listener.enterHistogram(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHistogram) {
             listener.exitHistogram(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHistogram) {
            return visitor.visitHistogram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCheckOption) {
             listener.enterCheckOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCheckOption) {
             listener.exitCheckOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCheckOption) {
            return visitor.visitCheckOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RepairTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_repairType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRepairType) {
             listener.enterRepairType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRepairType) {
             listener.exitRepairType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRepairType) {
            return visitor.visitRepairType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InstallUninstallStatementContext extends ParserRuleContext {
    public _action!: Token;
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public textStringLiteralList(): TextStringLiteralListContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteralList, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public pluginRef(): PluginRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_pluginRef, 0);
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public componentRef_list(): Vector<ComponentRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_componentRef);
    }
    public componentRef(i: number): ComponentRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_componentRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_installUninstallStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInstallUninstallStatement) {
             listener.enterInstallUninstallStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInstallUninstallStatement) {
             listener.exitInstallUninstallStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInstallUninstallStatement) {
            return visitor.visitInstallUninstallStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public startOptionValueList(): StartOptionValueListContext | null {
        return this.getRuleContext(MySQLParser.RULE_startOptionValueList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetStatement) {
             listener.enterSetStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetStatement) {
             listener.exitSetStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartOptionValueListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueNoOptionType, 0);
    }
    public optionValueListContinued(): OptionValueListContinuedContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueListContinued, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionCharacteristics, 0);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0);
    }
    public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_startOptionValueListFollowingOptionType, 0);
    }
    public PASSWORD_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.PASSWORD_SYMBOL);
    }
    public PASSWORD_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, i);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public replacePassword(): ReplacePasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_replacePassword, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startOptionValueList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStartOptionValueList) {
             listener.enterStartOptionValueList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStartOptionValueList) {
             listener.exitStartOptionValueList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStartOptionValueList) {
            return visitor.visitStartOptionValueList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionCharacteristicsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionAccessMode(): TransactionAccessModeContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionAccessMode, 0);
    }
    public isolationLevel(): IsolationLevelContext | null {
        return this.getRuleContext(MySQLParser.RULE_isolationLevel, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionCharacteristics;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTransactionCharacteristics) {
             listener.enterTransactionCharacteristics(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTransactionCharacteristics) {
             listener.exitTransactionCharacteristics(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTransactionCharacteristics) {
            return visitor.visitTransactionCharacteristics(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionAccessModeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionAccessMode;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsolationLevelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_isolationLevel;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIsolationLevel) {
             listener.enterIsolationLevel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIsolationLevel) {
             listener.exitIsolationLevel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionValueListContinuedContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public optionValue_list(): Vector<OptionValueContext> {
        return this.getRuleContexts(MySQLParser.RULE_optionValue);
    }
    public optionValue(i: number): OptionValueContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValue, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueListContinued;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionValueListContinued) {
             listener.enterOptionValueListContinued(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionValueListContinued) {
             listener.exitOptionValueListContinued(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionValueListContinued) {
            return visitor.visitOptionValueListContinued(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionValueNoOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public setExprOrDefault(): SetExprOrDefaultContext | null {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public setVarIdentType(): SetVarIdentTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_setVarIdentType, 0);
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueNoOptionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionValueNoOptionType) {
             listener.enterOptionValueNoOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionValueNoOptionType) {
             listener.exitOptionValueNoOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionValueNoOptionType) {
            return visitor.visitOptionValueNoOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionValueContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public setExprOrDefault(): SetExprOrDefaultContext | null {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0);
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueNoOptionType, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValue;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionValue) {
             listener.enterOptionValue(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionValue) {
             listener.exitOptionValue(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionValue) {
            return visitor.visitOptionValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetSystemVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public setVarIdentType(): SetVarIdentTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_setVarIdentType, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setSystemVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetSystemVariable) {
             listener.enterSetSystemVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetSystemVariable) {
             listener.exitSetSystemVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetSystemVariable) {
            return visitor.visitSetSystemVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueFollowingOptionType, 0);
    }
    public optionValueListContinued(): OptionValueListContinuedContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueListContinued, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionCharacteristics, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startOptionValueListFollowingOptionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStartOptionValueListFollowingOptionType) {
             listener.enterStartOptionValueListFollowingOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStartOptionValueListFollowingOptionType) {
             listener.exitStartOptionValueListFollowingOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStartOptionValueListFollowingOptionType) {
            return visitor.visitStartOptionValueListFollowingOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public setExprOrDefault(): SetExprOrDefaultContext | null {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueFollowingOptionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionValueFollowingOptionType) {
             listener.enterOptionValueFollowingOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionValueFollowingOptionType) {
             listener.exitOptionValueFollowingOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionValueFollowingOptionType) {
            return visitor.visitOptionValueFollowingOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetExprOrDefaultContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setExprOrDefault;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetExprOrDefault) {
             listener.enterSetExprOrDefault(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetExprOrDefault) {
             listener.exitSetExprOrDefault(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetExprOrDefault) {
            return visitor.visitSetExprOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowDatabasesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public DATABASES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showDatabasesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowDatabasesStatement) {
             listener.enterShowDatabasesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowDatabasesStatement) {
             listener.exitShowDatabasesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowDatabasesStatement) {
            return visitor.visitShowDatabasesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTablesStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public showCommandType(): ShowCommandTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCommandType, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTablesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowTablesStatement) {
             listener.enterShowTablesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowTablesStatement) {
             listener.exitShowTablesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowTablesStatement) {
            return visitor.visitShowTablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTriggersStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTriggersStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowTriggersStatement) {
             listener.enterShowTriggersStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowTriggersStatement) {
             listener.exitShowTriggersStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowTriggersStatement) {
            return visitor.visitShowTriggersStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEventsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEventsStatement) {
             listener.enterShowEventsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEventsStatement) {
             listener.exitShowEventsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEventsStatement) {
            return visitor.visitShowEventsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTableStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTableStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowTableStatusStatement) {
             listener.enterShowTableStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowTableStatusStatement) {
             listener.exitShowTableStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowTableStatusStatement) {
            return visitor.visitShowTableStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowOpenTablesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showOpenTablesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowOpenTablesStatement) {
             listener.enterShowOpenTablesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowOpenTablesStatement) {
             listener.exitShowOpenTablesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowOpenTablesStatement) {
            return visitor.visitShowOpenTablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowPluginsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showPluginsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowPluginsStatement) {
             listener.enterShowPluginsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowPluginsStatement) {
             listener.exitShowPluginsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowPluginsStatement) {
            return visitor.visitShowPluginsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEngineLogsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineLogsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEngineLogsStatement) {
             listener.enterShowEngineLogsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEngineLogsStatement) {
             listener.exitShowEngineLogsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEngineLogsStatement) {
            return visitor.visitShowEngineLogsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEngineMutexStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0);
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineMutexStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEngineMutexStatement) {
             listener.enterShowEngineMutexStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEngineMutexStatement) {
             listener.exitShowEngineMutexStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEngineMutexStatement) {
            return visitor.visitShowEngineMutexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEngineStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEngineStatusStatement) {
             listener.enterShowEngineStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEngineStatusStatement) {
             listener.exitShowEngineStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEngineStatusStatement) {
            return visitor.visitShowEngineStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowColumnsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public showCommandType(): ShowCommandTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCommandType, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showColumnsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowColumnsStatement) {
             listener.enterShowColumnsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowColumnsStatement) {
             listener.exitShowColumnsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowColumnsStatement) {
            return visitor.visitShowColumnsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowBinaryLogsStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showBinaryLogsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowBinaryLogsStatement) {
             listener.enterShowBinaryLogsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowBinaryLogsStatement) {
             listener.exitShowBinaryLogsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowBinaryLogsStatement) {
            return visitor.visitShowBinaryLogsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowReplicasStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public REPLICAS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICAS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showReplicasStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowReplicasStatement) {
             listener.enterShowReplicasStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowReplicasStatement) {
             listener.exitShowReplicasStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowReplicasStatement) {
            return visitor.visitShowReplicasStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowBinlogEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showBinlogEventsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowBinlogEventsStatement) {
             listener.enterShowBinlogEventsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowBinlogEventsStatement) {
             listener.exitShowBinlogEventsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowBinlogEventsStatement) {
            return visitor.visitShowBinlogEventsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRelaylogEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showRelaylogEventsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowRelaylogEventsStatement) {
             listener.enterShowRelaylogEventsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowRelaylogEventsStatement) {
             listener.exitShowRelaylogEventsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowRelaylogEventsStatement) {
            return visitor.visitShowRelaylogEventsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowKeysStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public fromOrIn(): FromOrInContext | null {
        return this.getRuleContext(MySQLParser.RULE_fromOrIn, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showKeysStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowKeysStatement) {
             listener.enterShowKeysStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowKeysStatement) {
             listener.exitShowKeysStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowKeysStatement) {
            return visitor.visitShowKeysStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEnginesStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEnginesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEnginesStatement) {
             listener.enterShowEnginesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEnginesStatement) {
             listener.exitShowEnginesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEnginesStatement) {
            return visitor.visitShowEnginesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCountWarningsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCountWarningsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCountWarningsStatement) {
             listener.enterShowCountWarningsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCountWarningsStatement) {
             listener.exitShowCountWarningsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCountWarningsStatement) {
            return visitor.visitShowCountWarningsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCountErrorsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCountErrorsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCountErrorsStatement) {
             listener.enterShowCountErrorsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCountErrorsStatement) {
             listener.exitShowCountErrorsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCountErrorsStatement) {
            return visitor.visitShowCountErrorsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowWarningsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showWarningsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowWarningsStatement) {
             listener.enterShowWarningsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowWarningsStatement) {
             listener.exitShowWarningsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowWarningsStatement) {
            return visitor.visitShowWarningsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowErrorsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showErrorsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowErrorsStatement) {
             listener.enterShowErrorsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowErrorsStatement) {
             listener.exitShowErrorsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowErrorsStatement) {
            return visitor.visitShowErrorsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowProfilesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProfilesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowProfilesStatement) {
             listener.enterShowProfilesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowProfilesStatement) {
             listener.exitShowProfilesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowProfilesStatement) {
            return visitor.visitShowProfilesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowProfileStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public profileDefinitions(): ProfileDefinitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_profileDefinitions, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProfileStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowProfileStatement) {
             listener.enterShowProfileStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowProfileStatement) {
             listener.exitShowProfileStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowProfileStatement) {
            return visitor.visitShowProfileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowStatusStatement) {
             listener.enterShowStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowStatusStatement) {
             listener.exitShowStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowStatusStatement) {
            return visitor.visitShowStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowProcessListStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProcessListStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowProcessListStatement) {
             listener.enterShowProcessListStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowProcessListStatement) {
             listener.exitShowProcessListStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowProcessListStatement) {
            return visitor.visitShowProcessListStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowVariablesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showVariablesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowVariablesStatement) {
             listener.enterShowVariablesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowVariablesStatement) {
             listener.exitShowVariablesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowVariablesStatement) {
            return visitor.visitShowVariablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCharacterSetStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCharacterSetStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCharacterSetStatement) {
             listener.enterShowCharacterSetStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCharacterSetStatement) {
             listener.exitShowCharacterSetStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCharacterSetStatement) {
            return visitor.visitShowCharacterSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCollationStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCollationStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCollationStatement) {
             listener.enterShowCollationStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCollationStatement) {
             listener.exitShowCollationStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCollationStatement) {
            return visitor.visitShowCollationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowPrivilegesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showPrivilegesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowPrivilegesStatement) {
             listener.enterShowPrivilegesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowPrivilegesStatement) {
             listener.exitShowPrivilegesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowPrivilegesStatement) {
            return visitor.visitShowPrivilegesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowGrantsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showGrantsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowGrantsStatement) {
             listener.enterShowGrantsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowGrantsStatement) {
             listener.exitShowGrantsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowGrantsStatement) {
            return visitor.visitShowGrantsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateDatabaseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateDatabaseStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateDatabaseStatement) {
             listener.enterShowCreateDatabaseStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateDatabaseStatement) {
             listener.exitShowCreateDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateDatabaseStatement) {
            return visitor.visitShowCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateTableStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateTableStatement) {
             listener.enterShowCreateTableStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateTableStatement) {
             listener.exitShowCreateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateTableStatement) {
            return visitor.visitShowCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateViewStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRef(): ViewRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateViewStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateViewStatement) {
             listener.enterShowCreateViewStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateViewStatement) {
             listener.exitShowCreateViewStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateViewStatement) {
            return visitor.visitShowCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowMasterStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showMasterStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowMasterStatusStatement) {
             listener.enterShowMasterStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowMasterStatusStatement) {
             listener.exitShowMasterStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowMasterStatusStatement) {
            return visitor.visitShowMasterStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowReplicaStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showReplicaStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowReplicaStatusStatement) {
             listener.enterShowReplicaStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowReplicaStatusStatement) {
             listener.exitShowReplicaStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowReplicaStatusStatement) {
            return visitor.visitShowReplicaStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateProcedureStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateProcedureStatement) {
             listener.enterShowCreateProcedureStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateProcedureStatement) {
             listener.exitShowCreateProcedureStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateProcedureStatement) {
            return visitor.visitShowCreateProcedureStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateFunctionStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateFunctionStatement) {
             listener.enterShowCreateFunctionStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateFunctionStatement) {
             listener.exitShowCreateFunctionStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateFunctionStatement) {
            return visitor.visitShowCreateFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateTriggerStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerRef(): TriggerRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_triggerRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateTriggerStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateTriggerStatement) {
             listener.enterShowCreateTriggerStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateTriggerStatement) {
             listener.exitShowCreateTriggerStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateTriggerStatement) {
            return visitor.visitShowCreateTriggerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateProcedureStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateProcedureStatusStatement) {
             listener.enterShowCreateProcedureStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateProcedureStatusStatement) {
             listener.exitShowCreateProcedureStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateProcedureStatusStatement) {
            return visitor.visitShowCreateProcedureStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateFunctionStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateFunctionStatusStatement) {
             listener.enterShowCreateFunctionStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateFunctionStatusStatement) {
             listener.exitShowCreateFunctionStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateFunctionStatusStatement) {
            return visitor.visitShowCreateFunctionStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateProcedureCodeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureCodeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateProcedureCodeStatement) {
             listener.enterShowCreateProcedureCodeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateProcedureCodeStatement) {
             listener.exitShowCreateProcedureCodeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateProcedureCodeStatement) {
            return visitor.visitShowCreateProcedureCodeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateFunctionCodeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionCodeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateFunctionCodeStatement) {
             listener.enterShowCreateFunctionCodeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateFunctionCodeStatement) {
             listener.exitShowCreateFunctionCodeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateFunctionCodeStatement) {
            return visitor.visitShowCreateFunctionCodeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateEventStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateEventStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateEventStatement) {
             listener.enterShowCreateEventStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateEventStatement) {
             listener.exitShowCreateEventStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateEventStatement) {
            return visitor.visitShowCreateEventStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateUserStatement) {
             listener.enterShowCreateUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateUserStatement) {
             listener.exitShowCreateUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateUserStatement) {
            return visitor.visitShowCreateUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCommandTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCommandType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCommandType) {
             listener.enterShowCommandType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCommandType) {
             listener.exitShowCommandType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCommandType) {
            return visitor.visitShowCommandType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineOrAllContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_engineOrAll;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEngineOrAll) {
             listener.enterEngineOrAll(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEngineOrAll) {
             listener.exitEngineOrAll(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEngineOrAll) {
            return visitor.visitEngineOrAll(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromOrInContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fromOrIn;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFromOrIn) {
             listener.enterFromOrIn(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFromOrIn) {
             listener.exitFromOrIn(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFromOrIn) {
            return visitor.visitFromOrIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InDbContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromOrIn(): FromOrInContext | null {
        return this.getRuleContext(MySQLParser.RULE_fromOrIn, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inDb;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInDb) {
             listener.enterInDb(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInDb) {
             listener.exitInDb(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInDb) {
            return visitor.visitInDb(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProfileDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public profileDefinition_list(): Vector<ProfileDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_profileDefinition);
    }
    public profileDefinition(i: number): ProfileDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_profileDefinition, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_profileDefinitions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProfileDefinitions) {
             listener.enterProfileDefinitions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProfileDefinitions) {
             listener.exitProfileDefinitions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProfileDefinitions) {
            return visitor.visitProfileDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProfileDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_profileDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProfileDefinition) {
             listener.enterProfileDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProfileDefinition) {
             listener.exitProfileDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProfileDefinition) {
            return visitor.visitProfileDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OtherAdministrativeStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public keyCacheListOrParts(): KeyCacheListOrPartsContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyCacheListOrParts, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public flushTables(): FlushTablesContext | null {
        return this.getRuleContext(MySQLParser.RULE_flushTables, 0);
    }
    public flushOption_list(): Vector<FlushOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_flushOption);
    }
    public flushOption(i: number): FlushOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_flushOption, i);
    }
    public noWriteToBinLog(): NoWriteToBinLogContext | null {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public KILL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KILL_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public preloadTail(): PreloadTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_preloadTail, 0);
    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_otherAdministrativeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOtherAdministrativeStatement) {
             listener.enterOtherAdministrativeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOtherAdministrativeStatement) {
             listener.exitOtherAdministrativeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOtherAdministrativeStatement) {
            return visitor.visitOtherAdministrativeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyCacheListOrPartsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyCacheList(): KeyCacheListContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyCacheList, 0);
    }
    public assignToKeycachePartition(): AssignToKeycachePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_assignToKeycachePartition, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyCacheListOrParts;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyCacheListOrParts) {
             listener.enterKeyCacheListOrParts(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyCacheListOrParts) {
             listener.exitKeyCacheListOrParts(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyCacheListOrParts) {
            return visitor.visitKeyCacheListOrParts(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyCacheListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignToKeycache_list(): Vector<AssignToKeycacheContext> {
        return this.getRuleContexts(MySQLParser.RULE_assignToKeycache);
    }
    public assignToKeycache(i: number): AssignToKeycacheContext | null {
        return this.getRuleContext(MySQLParser.RULE_assignToKeycache, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyCacheList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyCacheList) {
             listener.enterKeyCacheList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyCacheList) {
             listener.exitKeyCacheList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyCacheList) {
            return visitor.visitKeyCacheList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignToKeycacheContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignToKeycache;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAssignToKeycache) {
             listener.enterAssignToKeycache(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAssignToKeycache) {
             listener.exitAssignToKeycache(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAssignToKeycache) {
            return visitor.visitAssignToKeycache(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignToKeycachePartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext | null {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignToKeycachePartition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAssignToKeycachePartition) {
             listener.enterAssignToKeycachePartition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAssignToKeycachePartition) {
             listener.exitAssignToKeycachePartition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAssignToKeycachePartition) {
            return visitor.visitAssignToKeycachePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CacheKeyListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public keyUsageList(): KeyUsageListContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyUsageList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cacheKeyList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCacheKeyList) {
             listener.enterCacheKeyList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCacheKeyList) {
             listener.exitCacheKeyList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCacheKeyList) {
            return visitor.visitCacheKeyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyUsageElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyUsageElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyUsageElement) {
             listener.enterKeyUsageElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyUsageElement) {
             listener.exitKeyUsageElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyUsageElement) {
            return visitor.visitKeyUsageElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyUsageListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyUsageElement_list(): Vector<KeyUsageElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyUsageElement);
    }
    public keyUsageElement(i: number): KeyUsageElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyUsageElement, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyUsageList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyUsageList) {
             listener.enterKeyUsageList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyUsageList) {
             listener.exitKeyUsageList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyUsageList) {
            return visitor.visitKeyUsageList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public logType(): LogTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_logType, 0);
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public OPTIMIZER_COSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFlushOption) {
             listener.enterFlushOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFlushOption) {
             listener.exitFlushOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFlushOption) {
            return visitor.visitFlushOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogType) {
             listener.enterLogType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogType) {
             listener.exitLogType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogType) {
            return visitor.visitLogType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushTablesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public flushTablesOptions(): FlushTablesOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_flushTablesOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushTables;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFlushTables) {
             listener.enterFlushTables(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFlushTables) {
             listener.exitFlushTables(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFlushTables) {
            return visitor.visitFlushTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushTablesOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushTablesOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFlushTablesOptions) {
             listener.enterFlushTablesOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFlushTablesOptions) {
             listener.exitFlushTablesOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFlushTablesOptions) {
            return visitor.visitFlushTablesOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreloadTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public adminPartition(): AdminPartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_adminPartition, 0);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public preloadList(): PreloadListContext | null {
        return this.getRuleContext(MySQLParser.RULE_preloadList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadTail;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPreloadTail) {
             listener.enterPreloadTail(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPreloadTail) {
             listener.exitPreloadTail(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPreloadTail) {
            return visitor.visitPreloadTail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreloadListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public preloadKeys_list(): Vector<PreloadKeysContext> {
        return this.getRuleContexts(MySQLParser.RULE_preloadKeys);
    }
    public preloadKeys(i: number): PreloadKeysContext | null {
        return this.getRuleContext(MySQLParser.RULE_preloadKeys, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPreloadList) {
             listener.enterPreloadList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPreloadList) {
             listener.exitPreloadList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPreloadList) {
            return visitor.visitPreloadList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreloadKeysContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadKeys;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPreloadKeys) {
             listener.enterPreloadKeys(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPreloadKeys) {
             listener.exitPreloadKeys(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPreloadKeys) {
            return visitor.visitPreloadKeys(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdminPartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext | null {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_adminPartition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAdminPartition) {
             listener.enterAdminPartition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAdminPartition) {
             listener.exitAdminPartition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAdminPartition) {
            return visitor.visitAdminPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupManagementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createResourceGroup(): CreateResourceGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_createResourceGroup, 0);
    }
    public alterResourceGroup(): AlterResourceGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterResourceGroup, 0);
    }
    public setResourceGroup(): SetResourceGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_setResourceGroup, 0);
    }
    public dropResourceGroup(): DropResourceGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropResourceGroup, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupManagement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupManagement) {
             listener.enterResourceGroupManagement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupManagement) {
             listener.exitResourceGroupManagement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupManagement) {
            return visitor.visitResourceGroupManagement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupVcpuList, 0);
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupPriority, 0);
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupEnableDisable, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createResourceGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateResourceGroup) {
             listener.enterCreateResourceGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateResourceGroup) {
             listener.exitCreateResourceGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateResourceGroup) {
            return visitor.visitCreateResourceGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupVcpuListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public vcpuNumOrRange_list(): Vector<VcpuNumOrRangeContext> {
        return this.getRuleContexts(MySQLParser.RULE_vcpuNumOrRange);
    }
    public vcpuNumOrRange(i: number): VcpuNumOrRangeContext | null {
        return this.getRuleContext(MySQLParser.RULE_vcpuNumOrRange, i);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupVcpuList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupVcpuList) {
             listener.enterResourceGroupVcpuList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupVcpuList) {
             listener.exitResourceGroupVcpuList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupVcpuList) {
            return visitor.visitResourceGroupVcpuList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VcpuNumOrRangeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_vcpuNumOrRange;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterVcpuNumOrRange) {
             listener.enterVcpuNumOrRange(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitVcpuNumOrRange) {
             listener.exitVcpuNumOrRange(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitVcpuNumOrRange) {
            return visitor.visitVcpuNumOrRange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupPriorityContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupPriority;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupPriority) {
             listener.enterResourceGroupPriority(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupPriority) {
             listener.exitResourceGroupPriority(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupPriority) {
            return visitor.visitResourceGroupPriority(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupEnableDisableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupEnableDisable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupEnableDisable) {
             listener.enterResourceGroupEnableDisable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupEnableDisable) {
             listener.exitResourceGroupEnableDisable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupEnableDisable) {
            return visitor.visitResourceGroupEnableDisable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public resourceGroupRef(): ResourceGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupRef, 0);
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupVcpuList, 0);
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupPriority, 0);
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupEnableDisable, 0);
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterResourceGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterResourceGroup) {
             listener.enterAlterResourceGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterResourceGroup) {
             listener.exitAlterResourceGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterResourceGroup) {
            return visitor.visitAlterResourceGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public threadIdList(): ThreadIdListContext | null {
        return this.getRuleContext(MySQLParser.RULE_threadIdList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setResourceGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetResourceGroup) {
             listener.enterSetResourceGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetResourceGroup) {
             listener.exitSetResourceGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetResourceGroup) {
            return visitor.visitSetResourceGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ThreadIdListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulong_number_list(): Vector<Real_ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_real_ulong_number);
    }
    public real_ulong_number(i: number): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_threadIdList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterThreadIdList) {
             listener.enterThreadIdList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitThreadIdList) {
             listener.exitThreadIdList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitThreadIdList) {
            return visitor.visitThreadIdList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public resourceGroupRef(): ResourceGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupRef, 0);
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropResourceGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropResourceGroup) {
             listener.enterDropResourceGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropResourceGroup) {
             listener.exitDropResourceGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropResourceGroup) {
            return visitor.visitDropResourceGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UtilityStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public describeStatement(): DescribeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_describeStatement, 0);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_explainStatement, 0);
    }
    public helpCommand(): HelpCommandContext | null {
        return this.getRuleContext(MySQLParser.RULE_helpCommand, 0);
    }
    public useCommand(): UseCommandContext | null {
        return this.getRuleContext(MySQLParser.RULE_useCommand, 0);
    }
    public restartServer(): RestartServerContext | null {
        return this.getRuleContext(MySQLParser.RULE_restartServer, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_utilityStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUtilityStatement) {
             listener.enterUtilityStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUtilityStatement) {
             listener.exitUtilityStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUtilityStatement) {
            return visitor.visitUtilityStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public EXPLAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
    }
    public DESCRIBE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_describeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDescribeStatement) {
             listener.enterDescribeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDescribeStatement) {
             listener.exitDescribeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDescribeStatement) {
            return visitor.visitDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainableStatement(): ExplainableStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_explainableStatement, 0);
    }
    public EXPLAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
    }
    public DESCRIBE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explainStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_deleteStatement, 0);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertStatement, 0);
    }
    public replaceStatement(): ReplaceStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_replaceStatement, 0);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateStatement, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explainableStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExplainableStatement) {
             listener.enterExplainableStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExplainableStatement) {
             listener.exitExplainableStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExplainableStatement) {
            return visitor.visitExplainableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HelpCommandContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_helpCommand;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHelpCommand) {
             listener.enterHelpCommand(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHelpCommand) {
             listener.exitHelpCommand(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHelpCommand) {
            return visitor.visitHelpCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseCommandContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_useCommand;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUseCommand) {
             listener.enterUseCommand(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUseCommand) {
             listener.exitUseCommand(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUseCommand) {
            return visitor.visitUseCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RestartServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_restartServer;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRestartServer) {
             listener.enterRestartServer(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRestartServer) {
             listener.exitRestartServer(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRestartServer) {
            return visitor.visitRestartServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_expr;
    }
    public override copyFrom(ctx: ExprContext): void {
        super.copyFrom(ctx);
    }
}
export class ExprOrContext extends ExprContext {
    public _op!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public LOGICAL_OR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprOr) {
             listener.enterExprOr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprOr) {
             listener.exitExprOr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprOr) {
            return visitor.visitExprOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExprNotContext extends ExprContext {
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprNot) {
             listener.enterExprNot(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprNot) {
             listener.exitExprNot(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprNot) {
            return visitor.visitExprNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExprIsContext extends ExprContext {
    public _type_!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0);
    }
    public IS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IS_SYMBOL, 0);
    }
    public TRUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
    }
    public FALSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprIs) {
             listener.enterExprIs(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprIs) {
             listener.exitExprIs(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprIs) {
            return visitor.visitExprIs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExprAndContext extends ExprContext {
    public _op!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public LOGICAL_AND_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprAnd) {
             listener.enterExprAnd(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprAnd) {
             listener.exitExprAnd(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprAnd) {
            return visitor.visitExprAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExprXorContext extends ExprContext {
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public XOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XOR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprXor) {
             listener.enterExprXor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprXor) {
             listener.exitExprXor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprXor) {
            return visitor.visitExprXor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BoolPriContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_boolPri;
    }
    public override copyFrom(ctx: BoolPriContext): void {
        super.copyFrom(ctx);
    }
}
export class PrimaryExprPredicateContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrimaryExprPredicate) {
             listener.enterPrimaryExprPredicate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrimaryExprPredicate) {
             listener.exitPrimaryExprPredicate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrimaryExprPredicate) {
            return visitor.visitPrimaryExprPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryExprCompareContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0);
    }
    public compOp(): CompOpContext | null {
        return this.getRuleContext(MySQLParser.RULE_compOp, 0);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrimaryExprCompare) {
             listener.enterPrimaryExprCompare(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrimaryExprCompare) {
             listener.exitPrimaryExprCompare(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrimaryExprCompare) {
            return visitor.visitPrimaryExprCompare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryExprAllAnyContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0);
    }
    public compOp(): CompOpContext | null {
        return this.getRuleContext(MySQLParser.RULE_compOp, 0);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrimaryExprAllAny) {
             listener.enterPrimaryExprAllAny(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrimaryExprAllAny) {
             listener.exitPrimaryExprAllAny(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrimaryExprAllAny) {
            return visitor.visitPrimaryExprAllAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryExprIsNullContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0);
    }
    public IS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IS_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrimaryExprIsNull) {
             listener.enterPrimaryExprIsNull(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrimaryExprIsNull) {
             listener.exitPrimaryExprIsNull(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrimaryExprIsNull) {
            return visitor.visitPrimaryExprIsNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompOpContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public NULL_SAFE_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0);
    }
    public GREATER_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
    }
    public GREATER_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
    }
    public LESS_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
    }
    public LESS_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
    }
    public NOT_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compOp;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCompOp) {
             listener.enterCompOp(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCompOp) {
             listener.exitCompOp(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCompOp) {
            return visitor.visitCompOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bitExpr_list(): Vector<BitExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_bitExpr);
    }
    public bitExpr(i: number): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, i);
    }
    public predicateOperations(): PredicateOperationsContext | null {
        return this.getRuleContext(MySQLParser.RULE_predicateOperations, 0);
    }
    public MEMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExprWithParentheses, 0);
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public OF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OF_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_predicate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateOperationsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_predicateOperations;
    }
    public override copyFrom(ctx: PredicateOperationsContext): void {
        super.copyFrom(ctx);
    }
}
export class PredicateExprRegexContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REGEXP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGEXP_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicateExprRegex) {
             listener.enterPredicateExprRegex(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicateExprRegex) {
             listener.exitPredicateExprRegex(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicateExprRegex) {
            return visitor.visitPredicateExprRegex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicateExprBetweenContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicateExprBetween) {
             listener.enterPredicateExprBetween(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicateExprBetween) {
             listener.exitPredicateExprBetween(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicateExprBetween) {
            return visitor.visitPredicateExprBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicateExprInContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicateExprIn) {
             listener.enterPredicateExprIn(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicateExprIn) {
             listener.exitPredicateExprIn(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicateExprIn) {
            return visitor.visitPredicateExprIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicateExprLikeContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public simpleExpr_list(): Vector<SimpleExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleExpr);
    }
    public simpleExpr(i: number): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, i);
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicateExprLike) {
             listener.enterPredicateExprLike(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicateExprLike) {
             listener.exitPredicateExprLike(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicateExprLike) {
            return visitor.visitPredicateExprLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BitExprContext extends ParserRuleContext {
    public _op!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public bitExpr_list(): Vector<BitExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_bitExpr);
    }
    public bitExpr(i: number): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, i);
    }
    public BITWISE_XOR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public DIV_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.DIV_OPERATOR, 0);
    }
    public MOD_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_OPERATOR, 0);
    }
    public DIV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIV_SYMBOL, 0);
    }
    public MOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_SYMBOL, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public SHIFT_LEFT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0);
    }
    public SHIFT_RIGHT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0);
    }
    public BITWISE_AND_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0);
    }
    public BITWISE_OR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_bitExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterBitExpr) {
             listener.enterBitExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitBitExpr) {
             listener.exitBitExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitBitExpr) {
            return visitor.visitBitExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleExpr;
    }
    public override copyFrom(ctx: SimpleExprContext): void {
        super.copyFrom(ctx);
    }
}
export class SimpleExprConvertContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public castType(): CastTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_castType, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprConvert) {
             listener.enterSimpleExprConvert(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprConvert) {
             listener.exitSimpleExprConvert(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprConvert) {
            return visitor.visitSimpleExprConvert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprCastContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CAST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public castType(): CastTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_castType, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public arrayCast(): ArrayCastContext | null {
        return this.getRuleContext(MySQLParser.RULE_arrayCast, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprCast) {
             listener.enterSimpleExprCast(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprCast) {
             listener.exitSimpleExprCast(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprCast) {
            return visitor.visitSimpleExprCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprUnaryContext extends SimpleExprContext {
    public _op!: Token;
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public BITWISE_NOT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprUnary) {
             listener.enterSimpleExprUnary(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprUnary) {
             listener.exitSimpleExprUnary(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprUnary) {
            return visitor.visitSimpleExprUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExpressionRValueContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemOrUserVariable, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExpressionRValue) {
             listener.enterSimpleExpressionRValue(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExpressionRValue) {
             listener.exitSimpleExpressionRValue(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExpressionRValue) {
            return visitor.visitSimpleExpressionRValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprOdbcContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public CLOSE_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprOdbc) {
             listener.enterSimpleExprOdbc(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprOdbc) {
             listener.exitSimpleExprOdbc(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprOdbc) {
            return visitor.visitSimpleExprOdbc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public runtimeFunctionCall(): RuntimeFunctionCallContext | null {
        return this.getRuleContext(MySQLParser.RULE_runtimeFunctionCall, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprRuntimeFunction) {
             listener.enterSimpleExprRuntimeFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprRuntimeFunction) {
             listener.exitSimpleExprRuntimeFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprRuntimeFunction) {
            return visitor.visitSimpleExprRuntimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionCall(): FunctionCallContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionCall, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprFunction) {
             listener.enterSimpleExprFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprFunction) {
             listener.exitSimpleExprFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprFunction) {
            return visitor.visitSimpleExprFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprCollateContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprCollate) {
             listener.enterSimpleExprCollate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprCollate) {
             listener.exitSimpleExprCollate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprCollate) {
            return visitor.visitSimpleExprCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprMatchContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
    }
    public identListArg(): IdentListArgContext | null {
        return this.getRuleContext(MySQLParser.RULE_identListArg, 0);
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fulltextOptions(): FulltextOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_fulltextOptions, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprMatch) {
             listener.enterSimpleExprMatch(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprMatch) {
             listener.exitSimpleExprMatch(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprMatch) {
            return visitor.visitSimpleExprMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprWindowingFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowFunctionCall(): WindowFunctionCallContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFunctionCall, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprWindowingFunction) {
             listener.enterSimpleExprWindowingFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprWindowingFunction) {
             listener.exitSimpleExprWindowingFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprWindowingFunction) {
            return visitor.visitSimpleExprWindowingFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprBinaryContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprBinary) {
             listener.enterSimpleExprBinary(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprBinary) {
             listener.exitSimpleExprBinary(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprBinary) {
            return visitor.visitSimpleExprBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprColumnRefContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0);
    }
    public jsonOperator(): JsonOperatorContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonOperator, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprColumnRef) {
             listener.enterSimpleExprColumnRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprColumnRef) {
             listener.exitSimpleExprColumnRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprColumnRef) {
            return visitor.visitSimpleExprColumnRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprParamMarkerContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprParamMarker) {
             listener.enterSimpleExprParamMarker(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprParamMarker) {
             listener.exitSimpleExprParamMarker(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprParamMarker) {
            return visitor.visitSimpleExprParamMarker(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprSumContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sumExpr(): SumExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_sumExpr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprSum) {
             listener.enterSimpleExprSum(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprSum) {
             listener.exitSimpleExprSum(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprSum) {
            return visitor.visitSimpleExprSum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprCastTimeContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CAST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public ZONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ZONE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprCastTime) {
             listener.enterSimpleExprCastTime(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprCastTime) {
             listener.exitSimpleExprCastTime(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprCastTime) {
            return visitor.visitSimpleExprCastTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprConvertUsingContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprConvertUsing) {
             listener.enterSimpleExprConvertUsing(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprConvertUsing) {
             listener.exitSimpleExprConvertUsing(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprConvertUsing) {
            return visitor.visitSimpleExprConvertUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprSubQueryContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprSubQuery) {
             listener.enterSimpleExprSubQuery(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprSubQuery) {
             listener.exitSimpleExprSubQuery(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprSubQuery) {
            return visitor.visitSimpleExprSubQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprGroupingOperationContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingOperation(): GroupingOperationContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupingOperation, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprGroupingOperation) {
             listener.enterSimpleExprGroupingOperation(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprGroupingOperation) {
             listener.exitSimpleExprGroupingOperation(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprGroupingOperation) {
            return visitor.visitSimpleExprGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprNotContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public not2Rule(): Not2RuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_not2Rule, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprNot) {
             listener.enterSimpleExprNot(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprNot) {
             listener.exitSimpleExprNot(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprNot) {
            return visitor.visitSimpleExprNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprValuesContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleIdentifier(): SimpleIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprValues) {
             listener.enterSimpleExprValues(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprValues) {
             listener.exitSimpleExprValues(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprValues) {
            return visitor.visitSimpleExprValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprUserVariableAssignmentContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public inExpressionUserVariableAssignment(): InExpressionUserVariableAssignmentContext | null {
        return this.getRuleContext(MySQLParser.RULE_inExpressionUserVariableAssignment, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprUserVariableAssignment) {
             listener.enterSimpleExprUserVariableAssignment(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprUserVariableAssignment) {
             listener.exitSimpleExprUserVariableAssignment(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprUserVariableAssignment) {
            return visitor.visitSimpleExprUserVariableAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprDefaultContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleIdentifier(): SimpleIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprDefault) {
             listener.enterSimpleExprDefault(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprDefault) {
             listener.exitSimpleExprDefault(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprDefault) {
            return visitor.visitSimpleExprDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprListContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprList) {
             listener.enterSimpleExprList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprList) {
             listener.exitSimpleExprList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprList) {
            return visitor.visitSimpleExprList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprIntervalContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprInterval) {
             listener.enterSimpleExprInterval(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprInterval) {
             listener.exitSimpleExprInterval(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprInterval) {
            return visitor.visitSimpleExprInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprCaseContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASE_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public whenExpression_list(): Vector<WhenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_whenExpression);
    }
    public whenExpression(i: number): WhenExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_whenExpression, i);
    }
    public thenExpression_list(): Vector<ThenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_thenExpression);
    }
    public thenExpression(i: number): ThenExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_thenExpression, i);
    }
    public elseExpression(): ElseExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_elseExpression, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprCase) {
             listener.enterSimpleExprCase(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprCase) {
             listener.exitSimpleExprCase(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprCase) {
            return visitor.visitSimpleExprCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprConcatContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr_list(): Vector<SimpleExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleExpr);
    }
    public simpleExpr(i: number): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, i);
    }
    public CONCAT_PIPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprConcat) {
             listener.enterSimpleExprConcat(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprConcat) {
             listener.exitSimpleExprConcat(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprConcat) {
            return visitor.visitSimpleExprConcat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprLiteralContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literalOrNull(): LiteralOrNullContext | null {
        return this.getRuleContext(MySQLParser.RULE_literalOrNull, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprLiteral) {
             listener.enterSimpleExprLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprLiteral) {
             listener.exitSimpleExprLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprLiteral) {
            return visitor.visitSimpleExprLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayCastContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARRAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_arrayCast;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterArrayCast) {
             listener.enterArrayCast(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitArrayCast) {
             listener.exitArrayCast(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitArrayCast) {
            return visitor.visitArrayCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonOperatorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public JSON_UNQUOTED_SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonOperator;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJsonOperator) {
             listener.enterJsonOperator(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJsonOperator) {
             listener.exitJsonOperator(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJsonOperator) {
            return visitor.visitJsonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SumExprContext extends ParserRuleContext {
    public _name!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public inSumExpr(): InSumExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_inSumExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public windowingClause(): WindowingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0);
    }
    public BIT_AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_AND_SYMBOL, 0);
    }
    public BIT_OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_OR_SYMBOL, 0);
    }
    public BIT_XOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_XOR_SYMBOL, 0);
    }
    public jsonFunction(): JsonFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonFunction, 0);
    }
    public ST_COLLECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ST_COLLECT_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public MIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_SYMBOL, 0);
    }
    public MAX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SYMBOL, 0);
    }
    public STD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STD_SYMBOL, 0);
    }
    public VARIANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIANCE_SYMBOL, 0);
    }
    public STDDEV_SAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0);
    }
    public VAR_SAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0);
    }
    public SUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUM_SYMBOL, 0);
    }
    public GROUP_CONCAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEPARATOR_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sumExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSumExpr) {
             listener.enterSumExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSumExpr) {
             listener.exitSumExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSumExpr) {
            return visitor.visitSumExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingOperationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUPING_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupingOperation;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupingOperation) {
             listener.enterGroupingOperation(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupingOperation) {
             listener.exitGroupingOperation(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupingOperation) {
            return visitor.visitGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public windowingClause(): WindowingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0);
    }
    public ROW_NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0);
    }
    public RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANK_SYMBOL, 0);
    }
    public DENSE_RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0);
    }
    public CUME_DIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CUME_DIST_SYMBOL, 0);
    }
    public PERCENT_RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0);
    }
    public NTILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NTILE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public stableInteger(): StableIntegerContext | null {
        return this.getRuleContext(MySQLParser.RULE_stableInteger, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExprWithParentheses, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public LEAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAD_SYMBOL, 0);
    }
    public LAG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAG_SYMBOL, 0);
    }
    public leadLagInfo(): LeadLagInfoContext | null {
        return this.getRuleContext(MySQLParser.RULE_leadLagInfo, 0);
    }
    public nullTreatment(): NullTreatmentContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullTreatment, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public FIRST_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0);
    }
    public LAST_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0);
    }
    public NTH_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFunctionCall;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFunctionCall) {
             listener.enterWindowFunctionCall(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFunctionCall) {
             listener.exitWindowFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFunctionCall) {
            return visitor.visitWindowFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OVER_SYMBOL, 0);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowSpec, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowingClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowingClause) {
             listener.enterWindowingClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowingClause) {
             listener.exitWindowingClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowingClause) {
            return visitor.visitWindowingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LeadLagInfoContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public ulonglong_number(): Ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public stableInteger(): StableIntegerContext | null {
        return this.getRuleContext(MySQLParser.RULE_stableInteger, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_leadLagInfo;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLeadLagInfo) {
             listener.enterLeadLagInfo(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLeadLagInfo) {
             listener.exitLeadLagInfo(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLeadLagInfo) {
            return visitor.visitLeadLagInfo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StableIntegerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public int64Literal(): Int64LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_int64Literal, 0);
    }
    public paramOrVar(): ParamOrVarContext | null {
        return this.getRuleContext(MySQLParser.RULE_paramOrVar, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stableInteger;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStableInteger) {
             listener.enterStableInteger(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStableInteger) {
             listener.exitStableInteger(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStableInteger) {
            return visitor.visitStableInteger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParamOrVarContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_paramOrVar;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterParamOrVar) {
             listener.enterParamOrVar(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitParamOrVar) {
             listener.exitParamOrVar(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitParamOrVar) {
            return visitor.visitParamOrVar(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullTreatmentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullTreatment;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNullTreatment) {
             listener.enterNullTreatment(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNullTreatment) {
             listener.exitNullTreatment(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNullTreatment) {
            return visitor.visitNullTreatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_ARRAYAGG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public inSumExpr_list(): Vector<InSumExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_inSumExpr);
    }
    public inSumExpr(i: number): InSumExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_inSumExpr, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public windowingClause(): WindowingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0);
    }
    public JSON_OBJECTAGG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJsonFunction) {
             listener.enterJsonFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJsonFunction) {
             listener.exitJsonFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJsonFunction) {
            return visitor.visitJsonFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InSumExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inSumExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInSumExpr) {
             listener.enterInSumExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInSumExpr) {
             listener.exitInSumExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInSumExpr) {
            return visitor.visitInSumExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentListArgContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identList(): IdentListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identList, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identListArg;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentListArg) {
             listener.enterIdentListArg(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentListArg) {
             listener.exitIdentListArg(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentListArg) {
            return visitor.visitIdentListArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleIdentifier_list(): Vector<SimpleIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleIdentifier);
    }
    public simpleIdentifier(i: number): SimpleIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentList) {
             listener.enterIdentList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentList) {
             listener.exitIdentList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentList) {
            return visitor.visitIdentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FulltextOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public NATURAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fulltextOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFulltextOptions) {
             listener.enterFulltextOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFulltextOptions) {
             listener.exitFulltextOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFulltextOptions) {
            return visitor.visitFulltextOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RuntimeFunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public CURRENT_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public JSON_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_VALUE_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public onEmptyOrError(): OnEmptyOrErrorContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrError, 0);
    }
    public returningType(): ReturningTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_returningType, 0);
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public trimFunction(): TrimFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_trimFunction, 0);
    }
    public userFunction(): UserFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_userFunction, 0);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public CURDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURDATE_SYMBOL, 0);
    }
    public CURTIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURTIME_SYMBOL, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext | null {
        return this.getRuleContext(MySQLParser.RULE_timeFunctionParameters, 0);
    }
    public DATE_ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_ADD_SYMBOL, 0);
    }
    public DATE_SUB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SUB_SYMBOL, 0);
    }
    public EXTRACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTRACT_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public dateTimeTtype(): DateTimeTtypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dateTimeTtype, 0);
    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POSITION_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public substringFunction(): SubstringFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_substringFunction, 0);
    }
    public SYSDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSDATE_SYMBOL, 0);
    }
    public intervalTimeStamp(): IntervalTimeStampContext | null {
        return this.getRuleContext(MySQLParser.RULE_intervalTimeStamp, 0);
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public UTC_DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_DATE_SYMBOL, 0);
    }
    public UTC_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_TIME_SYMBOL, 0);
    }
    public UTC_TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprListWithParentheses, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public REPEAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEAT_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public wsNumCodepoints(): WsNumCodepointsContext | null {
        return this.getRuleContext(MySQLParser.RULE_wsNumCodepoints, 0);
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number);
    }
    public ulong_number(i: number): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i);
    }
    public geometryFunction(): GeometryFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_geometryFunction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_runtimeFunctionCall;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRuntimeFunctionCall) {
             listener.enterRuntimeFunctionCall(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRuntimeFunctionCall) {
             listener.exitRuntimeFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRuntimeFunctionCall) {
            return visitor.visitRuntimeFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturningTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNING_SYMBOL, 0);
    }
    public castType(): CastTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_castType, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_returningType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReturningType) {
             listener.enterReturningType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReturningType) {
             listener.exitReturningType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReturningType) {
            return visitor.visitReturningType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeometryFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprListWithParentheses, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_geometryFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGeometryFunction) {
             listener.enterGeometryFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGeometryFunction) {
             listener.exitGeometryFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGeometryFunction) {
            return visitor.visitGeometryFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeFunctionParametersContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fractionalPrecision(): FractionalPrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fractionalPrecision, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_timeFunctionParameters;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTimeFunctionParameters) {
             listener.enterTimeFunctionParameters(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTimeFunctionParameters) {
             listener.exitTimeFunctionParameters(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTimeFunctionParameters) {
            return visitor.visitTimeFunctionParameters(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FractionalPrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fractionalPrecision;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFractionalPrecision) {
             listener.enterFractionalPrecision(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFractionalPrecision) {
             listener.exitFractionalPrecision(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFractionalPrecision) {
            return visitor.visitFractionalPrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WeightStringLevelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public real_ulong_number_list(): Vector<Real_ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_real_ulong_number);
    }
    public real_ulong_number(i: number): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, i);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public weightStringLevelListItem_list(): Vector<WeightStringLevelListItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_weightStringLevelListItem);
    }
    public weightStringLevelListItem(i: number): WeightStringLevelListItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_weightStringLevelListItem, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_weightStringLevels;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWeightStringLevels) {
             listener.enterWeightStringLevels(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWeightStringLevels) {
             listener.exitWeightStringLevels(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWeightStringLevels) {
            return visitor.visitWeightStringLevels(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WeightStringLevelListItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ASC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASC_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_weightStringLevelListItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWeightStringLevelListItem) {
             listener.enterWeightStringLevelListItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWeightStringLevelListItem) {
             listener.exitWeightStringLevelListItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWeightStringLevelListItem) {
            return visitor.visitWeightStringLevelListItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateTimeTtypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dateTimeTtype;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDateTimeTtype) {
             listener.enterDateTimeTtype(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDateTimeTtype) {
             listener.exitDateTimeTtype(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDateTimeTtype) {
            return visitor.visitDateTimeTtype(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIM_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public LEADING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEADING_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public TRAILING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRAILING_SYMBOL, 0);
    }
    public BOTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOTH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_trimFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTrimFunction) {
             listener.enterTrimFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTrimFunction) {
             listener.exitTrimFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTrimFunction) {
            return visitor.visitTrimFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubstringFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBSTRING_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_substringFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSubstringFunction) {
             listener.enterSubstringFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSubstringFunction) {
             listener.exitSubstringFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSubstringFunction) {
            return visitor.visitSubstringFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public udfExprList(): UdfExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_udfExprList, 0);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionCall;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionCall) {
             listener.enterFunctionCall(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionCall) {
             listener.exitFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UdfExprListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public udfExpr_list(): Vector<UdfExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_udfExpr);
    }
    public udfExpr(i: number): UdfExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_udfExpr, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfExprList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUdfExprList) {
             listener.enterUdfExprList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUdfExprList) {
             listener.exitUdfExprList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUdfExprList) {
            return visitor.visitUdfExprList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UdfExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public selectAlias(): SelectAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectAlias, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUdfExpr) {
             listener.enterUdfExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUdfExpr) {
             listener.exitUdfExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUdfExpr) {
            return visitor.visitUdfExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public AT_TEXT_SUFFIX(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserVariable) {
             listener.enterUserVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserVariable) {
             listener.exitUserVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserVariable) {
            return visitor.visitUserVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InExpressionUserVariableAssignmentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public ASSIGN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inExpressionUserVariableAssignment;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInExpressionUserVariableAssignment) {
             listener.enterInExpressionUserVariableAssignment(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInExpressionUserVariableAssignment) {
             listener.exitInExpressionUserVariableAssignment(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInExpressionUserVariableAssignment) {
            return visitor.visitInExpressionUserVariableAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RvalueSystemOrUserVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public rvalueSystemVariable(): RvalueSystemVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemVariable, 0);
    }
    public rvalueSystemVariableType(): RvalueSystemVariableTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemVariableType, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemOrUserVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRvalueSystemOrUserVariable) {
             listener.enterRvalueSystemOrUserVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRvalueSystemOrUserVariable) {
             listener.exitRvalueSystemOrUserVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRvalueSystemOrUserVariable) {
            return visitor.visitRvalueSystemOrUserVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LvalueVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public lValueIdentifier(): LValueIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_lValueIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lvalueVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLvalueVariable) {
             listener.enterLvalueVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLvalueVariable) {
             listener.exitLvalueVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLvalueVariable) {
            return visitor.visitLvalueVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RvalueSystemVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRvalueSystemVariable) {
             listener.enterRvalueSystemVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRvalueSystemVariable) {
             listener.exitRvalueSystemVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRvalueSystemVariable) {
            return visitor.visitRvalueSystemVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WHEN_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whenExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWhenExpression) {
             listener.enterWhenExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWhenExpression) {
             listener.exitWhenExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWhenExpression) {
            return visitor.visitWhenExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ThenExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THEN_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_thenExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterThenExpression) {
             listener.enterThenExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitThenExpression) {
             listener.exitThenExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitThenExpression) {
            return visitor.visitThenExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_elseExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterElseExpression) {
             listener.enterElseExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitElseExpression) {
             listener.exitElseExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitElseExpression) {
            return visitor.visitElseExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetWithOptBinary, 0);
    }
    public nchar(): NcharContext | null {
        return this.getRuleContext(MySQLParser.RULE_nchar, 0);
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public UNSIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public floatOptions(): FloatOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_floatOptions, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public realType(): RealTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_realType, 0);
    }
    public FLOAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
    }
    public standardFloatOptions(): StandardFloatOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_standardFloatOptions, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_castType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCastType) {
             listener.enterCastType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCastType) {
             listener.exitCastType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCastType) {
            return visitor.visitCastType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprList) {
             listener.enterExprList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprList) {
             listener.exitExprList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprList) {
            return visitor.visitExprList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charset;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCharset) {
             listener.enterCharset(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCharset) {
             listener.exitCharset(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCharset) {
            return visitor.visitCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotRuleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public NOT2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_notRule;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNotRule) {
             listener.enterNotRule(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNotRule) {
             listener.exitNotRule(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNotRule) {
            return visitor.visitNotRule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Not2RuleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGICAL_NOT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0);
    }
    public NOT2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_not2Rule;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNot2Rule) {
             listener.enterNot2Rule(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNot2Rule) {
             listener.exitNot2Rule(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNot2Rule) {
            return visitor.visitNot2Rule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalTimeStamp(): IntervalTimeStampContext | null {
        return this.getRuleContext(MySQLParser.RULE_intervalTimeStamp, 0);
    }
    public SECOND_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0);
    }
    public MINUTE_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0);
    }
    public MINUTE_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0);
    }
    public HOUR_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0);
    }
    public HOUR_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0);
    }
    public HOUR_MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0);
    }
    public DAY_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0);
    }
    public DAY_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0);
    }
    public DAY_MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0);
    }
    public DAY_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0);
    }
    public YEAR_MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_interval;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalTimeStampContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_intervalTimeStamp;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIntervalTimeStamp) {
             listener.enterIntervalTimeStamp(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIntervalTimeStamp) {
             listener.exitIntervalTimeStamp(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIntervalTimeStamp) {
            return visitor.visitIntervalTimeStamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprListWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprListWithParentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprListWithParentheses) {
             listener.enterExprListWithParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprListWithParentheses) {
             listener.exitExprListWithParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprListWithParentheses) {
            return visitor.visitExprListWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprWithParentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprWithParentheses) {
             listener.enterExprWithParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprWithParentheses) {
             listener.exitExprWithParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprWithParentheses) {
            return visitor.visitExprWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleExprWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleExprWithParentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprWithParentheses) {
             listener.enterSimpleExprWithParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprWithParentheses) {
             listener.exitSimpleExprWithParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprWithParentheses) {
            return visitor.visitSimpleExprWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public orderExpression_list(): Vector<OrderExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_orderExpression);
    }
    public orderExpression(i: number): OrderExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderExpression, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOrderList) {
             listener.enterOrderList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOrderList) {
             listener.exitOrderList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOrderList) {
            return visitor.visitOrderList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(MySQLParser.RULE_direction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOrderExpression) {
             listener.enterOrderExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOrderExpression) {
             listener.exitOrderExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOrderExpression) {
            return visitor.visitOrderExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingExpression_list(): Vector<GroupingExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_groupingExpression);
    }
    public groupingExpression(i: number): GroupingExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupingExpression, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupList) {
             listener.enterGroupList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupList) {
             listener.exitGroupList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupList) {
            return visitor.visitGroupList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupingExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupingExpression) {
             listener.enterGroupingExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupingExpression) {
             listener.exitGroupingExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupingExpression) {
            return visitor.visitGroupingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChannelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_channel;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChannel) {
             listener.enterChannel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChannel) {
             listener.exitChannel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChannel) {
            return visitor.visitChannel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompoundStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleStatement(): SimpleStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleStatement, 0);
    }
    public returnStatement(): ReturnStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_returnStatement, 0);
    }
    public ifStatement(): IfStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifStatement, 0);
    }
    public caseStatement(): CaseStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_caseStatement, 0);
    }
    public labeledBlock(): LabeledBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_labeledBlock, 0);
    }
    public unlabeledBlock(): UnlabeledBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_unlabeledBlock, 0);
    }
    public labeledControl(): LabeledControlContext | null {
        return this.getRuleContext(MySQLParser.RULE_labeledControl, 0);
    }
    public unlabeledControl(): UnlabeledControlContext | null {
        return this.getRuleContext(MySQLParser.RULE_unlabeledControl, 0);
    }
    public leaveStatement(): LeaveStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_leaveStatement, 0);
    }
    public iterateStatement(): IterateStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_iterateStatement, 0);
    }
    public cursorOpen(): CursorOpenContext | null {
        return this.getRuleContext(MySQLParser.RULE_cursorOpen, 0);
    }
    public cursorFetch(): CursorFetchContext | null {
        return this.getRuleContext(MySQLParser.RULE_cursorFetch, 0);
    }
    public cursorClose(): CursorCloseContext | null {
        return this.getRuleContext(MySQLParser.RULE_cursorClose, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compoundStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCompoundStatement) {
             listener.enterCompoundStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCompoundStatement) {
             listener.exitCompoundStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCompoundStatement) {
            return visitor.visitCompoundStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURN_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_returnStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReturnStatement) {
             listener.enterReturnStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReturnStatement) {
             listener.exitReturnStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.IF_SYMBOL);
    }
    public IF_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, i);
    }
    public ifBody(): IfBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifBody, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfStatement) {
             listener.enterIfStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfStatement) {
             listener.exitIfStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfBodyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public thenStatement(): ThenStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_thenStatement, 0);
    }
    public ELSEIF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSEIF_SYMBOL, 0);
    }
    public ifBody(): IfBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifBody, 0);
    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifBody;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfBody) {
             listener.enterIfBody(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfBody) {
             listener.exitIfBody(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfBody) {
            return visitor.visitIfBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ThenStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THEN_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_thenStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterThenStatement) {
             listener.enterThenStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitThenStatement) {
             listener.exitThenStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitThenStatement) {
            return visitor.visitThenStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompoundStatementListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public compoundStatement_list(): Vector<CompoundStatementContext> {
        return this.getRuleContexts(MySQLParser.RULE_compoundStatement);
    }
    public compoundStatement(i: number): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, i);
    }
    public SEMICOLON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    }
    public SEMICOLON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compoundStatementList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCompoundStatementList) {
             listener.enterCompoundStatementList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCompoundStatementList) {
             listener.exitCompoundStatementList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCompoundStatementList) {
            return visitor.visitCompoundStatementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.CASE_SYMBOL);
    }
    public CASE_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.CASE_SYMBOL, i);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public whenExpression_list(): Vector<WhenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_whenExpression);
    }
    public whenExpression(i: number): WhenExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_whenExpression, i);
    }
    public thenStatement_list(): Vector<ThenStatementContext> {
        return this.getRuleContexts(MySQLParser.RULE_thenStatement);
    }
    public thenStatement(i: number): ThenStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_thenStatement, i);
    }
    public elseStatement(): ElseStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_elseStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_caseStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCaseStatement) {
             listener.enterCaseStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCaseStatement) {
             listener.exitCaseStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCaseStatement) {
            return visitor.visitCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_elseStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterElseStatement) {
             listener.enterElseStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitElseStatement) {
             listener.exitElseStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitElseStatement) {
            return visitor.visitElseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabeledBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public label(): LabelContext | null {
        return this.getRuleContext(MySQLParser.RULE_label, 0);
    }
    public beginEndBlock(): BeginEndBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_beginEndBlock, 0);
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labeledBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabeledBlock) {
             listener.enterLabeledBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabeledBlock) {
             listener.exitLabeledBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabeledBlock) {
            return visitor.visitLabeledBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlabeledBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public beginEndBlock(): BeginEndBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_beginEndBlock, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unlabeledBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUnlabeledBlock) {
             listener.enterUnlabeledBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUnlabeledBlock) {
             listener.exitUnlabeledBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUnlabeledBlock) {
            return visitor.visitUnlabeledBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelIdentifier(): LabelIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelIdentifier, 0);
    }
    public COLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_label;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabel) {
             listener.enterLabel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabel) {
             listener.exitLabel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabel) {
            return visitor.visitLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeginEndBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public spDeclarations(): SpDeclarationsContext | null {
        return this.getRuleContext(MySQLParser.RULE_spDeclarations, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_beginEndBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterBeginEndBlock) {
             listener.enterBeginEndBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitBeginEndBlock) {
             listener.exitBeginEndBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitBeginEndBlock) {
            return visitor.visitBeginEndBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabeledControlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public label(): LabelContext | null {
        return this.getRuleContext(MySQLParser.RULE_label, 0);
    }
    public unlabeledControl(): UnlabeledControlContext | null {
        return this.getRuleContext(MySQLParser.RULE_unlabeledControl, 0);
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labeledControl;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabeledControl) {
             listener.enterLabeledControl(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabeledControl) {
             listener.exitLabeledControl(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabeledControl) {
            return visitor.visitLabeledControl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlabeledControlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public loopBlock(): LoopBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_loopBlock, 0);
    }
    public whileDoBlock(): WhileDoBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_whileDoBlock, 0);
    }
    public repeatUntilBlock(): RepeatUntilBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_repeatUntilBlock, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unlabeledControl;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUnlabeledControl) {
             listener.enterUnlabeledControl(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUnlabeledControl) {
             listener.exitUnlabeledControl(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUnlabeledControl) {
            return visitor.visitUnlabeledControl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoopBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOOP_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.LOOP_SYMBOL);
    }
    public LOOP_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.LOOP_SYMBOL, i);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loopBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoopBlock) {
             listener.enterLoopBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoopBlock) {
             listener.exitLoopBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoopBlock) {
            return visitor.visitLoopBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhileDoBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHILE_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.WHILE_SYMBOL);
    }
    public WHILE_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.WHILE_SYMBOL, i);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whileDoBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWhileDoBlock) {
             listener.enterWhileDoBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWhileDoBlock) {
             listener.exitWhileDoBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWhileDoBlock) {
            return visitor.visitWhileDoBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RepeatUntilBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEAT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.REPEAT_SYMBOL);
    }
    public REPEAT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.REPEAT_SYMBOL, i);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_repeatUntilBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRepeatUntilBlock) {
             listener.enterRepeatUntilBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRepeatUntilBlock) {
             listener.exitRepeatUntilBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRepeatUntilBlock) {
            return visitor.visitRepeatUntilBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpDeclarationsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public spDeclaration_list(): Vector<SpDeclarationContext> {
        return this.getRuleContexts(MySQLParser.RULE_spDeclaration);
    }
    public spDeclaration(i: number): SpDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_spDeclaration, i);
    }
    public SEMICOLON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    }
    public SEMICOLON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spDeclarations;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSpDeclarations) {
             listener.enterSpDeclarations(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSpDeclarations) {
             listener.exitSpDeclarations(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSpDeclarations) {
            return visitor.visitSpDeclarations(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public variableDeclaration(): VariableDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_variableDeclaration, 0);
    }
    public conditionDeclaration(): ConditionDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_conditionDeclaration, 0);
    }
    public handlerDeclaration(): HandlerDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_handlerDeclaration, 0);
    }
    public cursorDeclaration(): CursorDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_cursorDeclaration, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSpDeclaration) {
             listener.enterSpDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSpDeclaration) {
             listener.exitSpDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSpDeclaration) {
            return visitor.visitSpDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_variableDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterVariableDeclaration) {
             listener.enterVariableDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitVariableDeclaration) {
             listener.exitVariableDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitVariableDeclaration) {
            return visitor.visitVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public CONDITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public spCondition(): SpConditionContext | null {
        return this.getRuleContext(MySQLParser.RULE_spCondition, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_conditionDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConditionDeclaration) {
             listener.enterConditionDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConditionDeclaration) {
             listener.exitConditionDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConditionDeclaration) {
            return visitor.visitConditionDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpConditionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spCondition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSpCondition) {
             listener.enterSpCondition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSpCondition) {
             listener.exitSpCondition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSpCondition) {
            return visitor.visitSpCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlstateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sqlstate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSqlstate) {
             listener.enterSqlstate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSqlstate) {
             listener.exitSqlstate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSqlstate) {
            return visitor.visitSqlstate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public handlerCondition_list(): Vector<HandlerConditionContext> {
        return this.getRuleContexts(MySQLParser.RULE_handlerCondition);
    }
    public handlerCondition(i: number): HandlerConditionContext | null {
        return this.getRuleContext(MySQLParser.RULE_handlerCondition, i);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public CONTINUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTINUE_SYMBOL, 0);
    }
    public EXIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXIT_SYMBOL, 0);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHandlerDeclaration) {
             listener.enterHandlerDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHandlerDeclaration) {
             listener.exitHandlerDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHandlerDeclaration) {
            return visitor.visitHandlerDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerConditionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public spCondition(): SpConditionContext | null {
        return this.getRuleContext(MySQLParser.RULE_spCondition, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public SQLWARNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLWARNING_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public SQLEXCEPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerCondition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHandlerCondition) {
             listener.enterHandlerCondition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHandlerCondition) {
             listener.exitHandlerCondition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHandlerCondition) {
            return visitor.visitHandlerCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public CURSOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCursorDeclaration) {
             listener.enterCursorDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCursorDeclaration) {
             listener.exitCursorDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCursorDeclaration) {
            return visitor.visitCursorDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IterateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ITERATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ITERATE_SYMBOL, 0);
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_iterateStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIterateStatement) {
             listener.enterIterateStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIterateStatement) {
             listener.exitIterateStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIterateStatement) {
            return visitor.visitIterateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LeaveStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVE_SYMBOL, 0);
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_leaveStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLeaveStatement) {
             listener.enterLeaveStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLeaveStatement) {
             listener.exitLeaveStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLeaveStatement) {
            return visitor.visitLeaveStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetDiagnosticsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public statementInformationItem_list(): Vector<StatementInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_statementInformationItem);
    }
    public statementInformationItem(i: number): StatementInformationItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_statementInformationItem, i);
    }
    public CONDITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
    }
    public signalAllowedExpr(): SignalAllowedExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalAllowedExpr, 0);
    }
    public conditionInformationItem_list(): Vector<ConditionInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_conditionInformationItem);
    }
    public conditionInformationItem(i: number): ConditionInformationItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_conditionInformationItem, i);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_getDiagnosticsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGetDiagnosticsStatement) {
             listener.enterGetDiagnosticsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGetDiagnosticsStatement) {
             listener.exitGetDiagnosticsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGetDiagnosticsStatement) {
            return visitor.visitGetDiagnosticsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalAllowedExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_literal, 0);
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemOrUserVariable, 0);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalAllowedExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignalAllowedExpr) {
             listener.enterSignalAllowedExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignalAllowedExpr) {
             listener.exitSignalAllowedExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignalAllowedExpr) {
            return visitor.visitSignalAllowedExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_statementInformationItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStatementInformationItem) {
             listener.enterStatementInformationItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStatementInformationItem) {
             listener.exitStatementInformationItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStatementInformationItem) {
            return visitor.visitStatementInformationItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public signalInformationItemName(): SignalInformationItemNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItemName, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_conditionInformationItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConditionInformationItem) {
             listener.enterConditionInformationItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConditionInformationItem) {
             listener.exitConditionInformationItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConditionInformationItem) {
            return visitor.visitConditionInformationItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalInformationItemNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalInformationItemName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignalInformationItemName) {
             listener.enterSignalInformationItemName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignalInformationItemName) {
             listener.exitSignalInformationItemName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignalInformationItemName) {
            return visitor.visitSignalInformationItemName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIGNAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNAL_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public signalInformationItem_list(): Vector<SignalInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_signalInformationItem);
    }
    public signalInformationItem(i: number): SignalInformationItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItem, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignalStatement) {
             listener.enterSignalStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignalStatement) {
             listener.exitSignalStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignalStatement) {
            return visitor.visitSignalStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResignalStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESIGNAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESIGNAL_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public signalInformationItem_list(): Vector<SignalInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_signalInformationItem);
    }
    public signalInformationItem(i: number): SignalInformationItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItem, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resignalStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResignalStatement) {
             listener.enterResignalStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResignalStatement) {
             listener.exitResignalStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResignalStatement) {
            return visitor.visitResignalStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signalInformationItemName(): SignalInformationItemNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItemName, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public signalAllowedExpr(): SignalAllowedExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalAllowedExpr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalInformationItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignalInformationItem) {
             listener.enterSignalInformationItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignalInformationItem) {
             listener.exitSignalInformationItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignalInformationItem) {
            return visitor.visitSignalInformationItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorOpenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorOpen;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCursorOpen) {
             listener.enterCursorOpen(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCursorOpen) {
             listener.exitCursorOpen(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCursorOpen) {
            return visitor.visitCursorOpen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorCloseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorClose;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCursorClose) {
             listener.enterCursorClose(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCursorClose) {
             listener.exitCursorClose(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCursorClose) {
            return visitor.visitCursorClose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorFetchContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FETCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FETCH_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorFetch;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCursorFetch) {
             listener.enterCursorFetch(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCursorFetch) {
             listener.exitCursorFetch(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCursorFetch) {
            return visitor.visitCursorFetch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScheduleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schedule;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSchedule) {
             listener.enterSchedule(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSchedule) {
             listener.exitSchedule(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSchedule) {
            return visitor.visitSchedule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnName, 0);
    }
    public fieldDefinition(): FieldDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldDefinition, 0);
    }
    public checkOrReferences(): CheckOrReferencesContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkOrReferences, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnDefinition) {
             listener.enterColumnDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnDefinition) {
             listener.exitColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnDefinition) {
            return visitor.visitColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckOrReferencesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0);
    }
    public references(): ReferencesContext | null {
        return this.getRuleContext(MySQLParser.RULE_references, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkOrReferences;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCheckOrReferences) {
             listener.enterCheckOrReferences(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCheckOrReferences) {
             listener.exitCheckOrReferences(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCheckOrReferences) {
            return visitor.visitCheckOrReferences(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckConstraintContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkConstraint;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCheckConstraint) {
             listener.enterCheckConstraint(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCheckConstraint) {
             listener.exitCheckConstraint(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCheckConstraint) {
            return visitor.visitCheckConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintEnforcementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENFORCED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintEnforcement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConstraintEnforcement) {
             listener.enterConstraintEnforcement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConstraintEnforcement) {
             listener.exitConstraintEnforcement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConstraintEnforcement) {
            return visitor.visitConstraintEnforcement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintDefContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyListWithExpression(): KeyListWithExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyListWithExpression, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public indexNameAndType(): IndexNameAndTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexNameAndType, 0);
    }
    public indexOption_list(): Vector<IndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexOption);
    }
    public indexOption(i: number): IndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexOption, i);
    }
    public FULLTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0);
    }
    public fulltextIndexOption_list(): Vector<FulltextIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_fulltextIndexOption);
    }
    public fulltextIndexOption(i: number): FulltextIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fulltextIndexOption, i);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public spatialIndexOption_list(): Vector<SpatialIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_spatialIndexOption);
    }
    public spatialIndexOption(i: number): SpatialIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_spatialIndexOption, i);
    }
    public keyList(): KeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyList, 0);
    }
    public references(): ReferencesContext | null {
        return this.getRuleContext(MySQLParser.RULE_references, 0);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0);
    }
    public constraintName(): ConstraintNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintName, 0);
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableConstraintDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableConstraintDef) {
             listener.enterTableConstraintDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableConstraintDef) {
             listener.exitTableConstraintDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableConstraintDef) {
            return visitor.visitTableConstraintDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONSTRAINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConstraintName) {
             listener.enterConstraintName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConstraintName) {
             listener.exitConstraintName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConstraintName) {
            return visitor.visitConstraintName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public columnAttribute_list(): Vector<ColumnAttributeContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnAttribute);
    }
    public columnAttribute(i: number): ColumnAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnAttribute, i);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public GENERATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERATED_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public VIRTUAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIRTUAL_SYMBOL, 0);
    }
    public STORED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldDefinition) {
             listener.enterFieldDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldDefinition) {
             listener.exitFieldDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldDefinition) {
            return visitor.visitFieldDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAttributeContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public nowOrSignedLiteral(): NowOrSignedLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nowOrSignedLiteral, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext | null {
        return this.getRuleContext(MySQLParser.RULE_timeFunctionParameters, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public columnFormat(): ColumnFormatContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnFormat, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public storageMedia(): StorageMediaContext | null {
        return this.getRuleContext(MySQLParser.RULE_storageMedia, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0);
    }
    public constraintName(): ConstraintNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintName, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnAttribute) {
             listener.enterColumnAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnAttribute) {
             listener.exitColumnAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnAttribute) {
            return visitor.visitColumnAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnFormatContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnFormat;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnFormat) {
             listener.enterColumnFormat(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnFormat) {
             listener.exitColumnFormat(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnFormat) {
            return visitor.visitColumnFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StorageMediaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_storageMedia;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStorageMedia) {
             listener.enterStorageMedia(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStorageMedia) {
             listener.exitStorageMedia(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStorageMedia) {
            return visitor.visitStorageMedia(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NowContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public functionDatetimePrecision(): FunctionDatetimePrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionDatetimePrecision, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_now;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNow) {
             listener.enterNow(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNow) {
             listener.exitNow(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNow) {
            return visitor.visitNow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NowOrSignedLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public now(): NowContext | null {
        return this.getRuleContext(MySQLParser.RULE_now, 0);
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext | null {
        return this.getRuleContext(MySQLParser.RULE_signedLiteralOrNull, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nowOrSignedLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNowOrSignedLiteral) {
             listener.enterNowOrSignedLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNowOrSignedLiteral) {
             listener.exitNowOrSignedLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNowOrSignedLiteral) {
            return visitor.visitNowOrSignedLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GcolAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_gcolAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGcolAttribute) {
             listener.enterGcolAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGcolAttribute) {
             listener.exitGcolAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGcolAttribute) {
            return visitor.visitGcolAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReferencesContext extends ParserRuleContext {
    public _match!: Token;
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REFERENCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0);
    }
    public MATCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public deleteOption_list(): Vector<DeleteOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_deleteOption);
    }
    public deleteOption(i: number): DeleteOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_deleteOption, i);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_references;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReferences) {
             listener.enterReferences(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReferences) {
             listener.exitReferences(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReferences) {
            return visitor.visitReferences(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDeleteOption) {
             listener.enterDeleteOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDeleteOption) {
             listener.exitDeleteOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDeleteOption) {
            return visitor.visitDeleteOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public keyPart_list(): Vector<KeyPartContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyPart);
    }
    public keyPart(i: number): KeyPartContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyPart, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyList) {
             listener.enterKeyList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyList) {
             listener.exitKeyList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyList) {
            return visitor.visitKeyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyPartContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0);
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(MySQLParser.RULE_direction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyPart;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyPart) {
             listener.enterKeyPart(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyPart) {
             listener.exitKeyPart(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyPart) {
            return visitor.visitKeyPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyListWithExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public keyPartOrExpression_list(): Vector<KeyPartOrExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyPartOrExpression);
    }
    public keyPartOrExpression(i: number): KeyPartOrExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyPartOrExpression, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyListWithExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyListWithExpression) {
             listener.enterKeyListWithExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyListWithExpression) {
             listener.exitKeyListWithExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyListWithExpression) {
            return visitor.visitKeyListWithExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyPartOrExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyPart(): KeyPartContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyPart, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(MySQLParser.RULE_direction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyPartOrExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyPartOrExpression) {
             listener.enterKeyPartOrExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyPartOrExpression) {
             listener.exitKeyPartOrExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyPartOrExpression) {
            return visitor.visitKeyPartOrExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexTypeContext extends ParserRuleContext {
    public _algorithm!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexType) {
             listener.enterIndexType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexType) {
             listener.exitIndexType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexType) {
            return visitor.visitIndexType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0);
    }
    public indexTypeClause(): IndexTypeClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexTypeClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexOption) {
             listener.enterIndexOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexOption) {
             listener.exitIndexOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexOption) {
            return visitor.visitIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_commonIndexOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCommonIndexOption) {
             listener.enterCommonIndexOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCommonIndexOption) {
             listener.exitCommonIndexOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCommonIndexOption) {
            return visitor.visitCommonIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VisibilityContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_visibility;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterVisibility) {
             listener.enterVisibility(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitVisibility) {
             listener.exitVisibility(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitVisibility) {
            return visitor.visitVisibility(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexTypeClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexType, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexTypeClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexTypeClause) {
             listener.enterIndexTypeClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexTypeClause) {
             listener.exitIndexTypeClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexTypeClause) {
            return visitor.visitIndexTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FulltextIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fulltextIndexOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFulltextIndexOption) {
             listener.enterFulltextIndexOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFulltextIndexOption) {
             listener.exitFulltextIndexOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFulltextIndexOption) {
            return visitor.visitFulltextIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpatialIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spatialIndexOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSpatialIndexOption) {
             listener.enterSpatialIndexOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSpatialIndexOption) {
             listener.exitSpatialIndexOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSpatialIndexOption) {
            return visitor.visitSpatialIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataTypeDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDataTypeDefinition) {
             listener.enterDataTypeDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDataTypeDefinition) {
             listener.exitDataTypeDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDataTypeDefinition) {
            return visitor.visitDataTypeDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public TINYINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYINT_SYMBOL, 0);
    }
    public SMALLINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SMALLINT_SYMBOL, 0);
    }
    public MEDIUMINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0);
    }
    public BIGINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIGINT_SYMBOL, 0);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0);
    }
    public fieldOptions(): FieldOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldOptions, 0);
    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DOUBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_precision, 0);
    }
    public PRECISION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
    }
    public FLOAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public NUMERIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMERIC_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public floatOptions(): FloatOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_floatOptions, 0);
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetWithOptBinary, 0);
    }
    public nchar(): NcharContext | null {
        return this.getRuleContext(MySQLParser.RULE_nchar, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public VARYING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARYING_SYMBOL, 0);
    }
    public VARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARCHAR_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public VARBINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARBINARY_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public TINYBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYBLOB_SYMBOL, 0);
    }
    public BLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOB_SYMBOL, 0);
    }
    public MEDIUMBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0);
    }
    public LONGBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONGBLOB_SYMBOL, 0);
    }
    public LONG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_SYMBOL, 0);
    }
    public TINYTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYTEXT_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public MEDIUMTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0);
    }
    public LONGTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONGTEXT_SYMBOL, 0);
    }
    public stringList(): StringListContext | null {
        return this.getRuleContext(MySQLParser.RULE_stringList, 0);
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDataType) {
             listener.enterDataType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDataType) {
             listener.exitDataType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDataType) {
            return visitor.visitDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NcharContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nchar;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNchar) {
             listener.enterNchar(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNchar) {
             listener.exitNchar(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNchar) {
            return visitor.visitNchar(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RealTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DOUBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
    }
    public PRECISION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_realType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRealType) {
             listener.enterRealType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRealType) {
             listener.exitRealType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRealType) {
            return visitor.visitRealType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldLengthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldLength;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldLength) {
             listener.enterFieldLength(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldLength) {
             listener.exitFieldLength(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldLength) {
            return visitor.visitFieldLength(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIGNED_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.SIGNED_SYMBOL);
    }
    public SIGNED_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, i);
    }
    public UNSIGNED_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.UNSIGNED_SYMBOL);
    }
    public UNSIGNED_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, i);
    }
    public ZEROFILL_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ZEROFILL_SYMBOL);
    }
    public ZEROFILL_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ZEROFILL_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldOptions) {
             listener.enterFieldOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldOptions) {
             listener.exitFieldOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldOptions) {
            return visitor.visitFieldOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetWithOptBinaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ascii(): AsciiContext | null {
        return this.getRuleContext(MySQLParser.RULE_ascii, 0);
    }
    public unicode(): UnicodeContext | null {
        return this.getRuleContext(MySQLParser.RULE_unicode, 0);
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetWithOptBinary;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCharsetWithOptBinary) {
             listener.enterCharsetWithOptBinary(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCharsetWithOptBinary) {
             listener.exitCharsetWithOptBinary(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCharsetWithOptBinary) {
            return visitor.visitCharsetWithOptBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AsciiContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ascii;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAscii) {
             listener.enterAscii(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAscii) {
             listener.exitAscii(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAscii) {
            return visitor.visitAscii(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnicodeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unicode;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUnicode) {
             listener.enterUnicode(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUnicode) {
             listener.exitUnicode(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUnicode) {
            return visitor.visitUnicode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WsNumCodepointsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_wsNumCodepoints;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWsNumCodepoints) {
             listener.enterWsNumCodepoints(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWsNumCodepoints) {
             listener.exitWsNumCodepoints(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWsNumCodepoints) {
            return visitor.visitWsNumCodepoints(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeDatetimePrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_typeDatetimePrecision;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTypeDatetimePrecision) {
             listener.enterTypeDatetimePrecision(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTypeDatetimePrecision) {
             listener.exitTypeDatetimePrecision(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTypeDatetimePrecision) {
            return visitor.visitTypeDatetimePrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionDatetimePrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionDatetimePrecision;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionDatetimePrecision) {
             listener.enterFunctionDatetimePrecision(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionDatetimePrecision) {
             listener.exitFunctionDatetimePrecision(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionDatetimePrecision) {
            return visitor.visitFunctionDatetimePrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCharsetName) {
             listener.enterCharsetName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCharsetName) {
             listener.exitCharsetName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCharsetName) {
            return visitor.visitCharsetName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollationNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_collationName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCollationName) {
             listener.enterCollationName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCollationName) {
             listener.exitCollationName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCollationName) {
            return visitor.visitCollationName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOption_list(): Vector<CreateTableOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOption);
    }
    public createTableOption(i: number): CreateTableOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTableOptions) {
             listener.enterCreateTableOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTableOptions) {
             listener.exitCreateTableOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTableOptions) {
            return visitor.visitCreateTableOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableOptionsEtcContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOptions(): CreateTableOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOptions, 0);
    }
    public createPartitioningEtc(): CreatePartitioningEtcContext | null {
        return this.getRuleContext(MySQLParser.RULE_createPartitioningEtc, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptionsEtc;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTableOptionsEtc) {
             listener.enterCreateTableOptionsEtc(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTableOptionsEtc) {
             listener.exitCreateTableOptionsEtc(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTableOptionsEtc) {
            return visitor.visitCreateTableOptionsEtc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePartitioningEtcContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionClause, 0);
    }
    public duplicateAsQe(): DuplicateAsQeContext | null {
        return this.getRuleContext(MySQLParser.RULE_duplicateAsQe, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createPartitioningEtc;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreatePartitioningEtc) {
             listener.enterCreatePartitioningEtc(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreatePartitioningEtc) {
             listener.exitCreatePartitioningEtc(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreatePartitioningEtc) {
            return visitor.visitCreatePartitioningEtc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOption_list(): Vector<CreateTableOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOption);
    }
    public createTableOption(i: number): CreateTableOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptionsSpaceSeparated;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTableOptionsSpaceSeparated) {
             listener.enterCreateTableOptionsSpaceSeparated(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTableOptionsSpaceSeparated) {
             listener.exitCreateTableOptionsSpaceSeparated(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTableOptionsSpaceSeparated) {
            return visitor.visitCreateTableOptionsSpaceSeparated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableOptionContext extends ParserRuleContext {
    public _option!: Token;
    public _format!: Token;
    public _method!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public ternaryOption(): TernaryOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_ternaryOption, 0);
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public tableRefList(): TableRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public UNION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNION_SYMBOL, 0);
    }
    public defaultCharset(): DefaultCharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultCharset, 0);
    }
    public defaultCollation(): DefaultCollationContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultCollation, 0);
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTableOption) {
             listener.enterCreateTableOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTableOption) {
             listener.exitCreateTableOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTableOption) {
            return visitor.visitCreateTableOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TernaryOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ternaryOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTernaryOption) {
             listener.enterTernaryOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTernaryOption) {
             listener.exitTernaryOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTernaryOption) {
            return visitor.visitTernaryOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultCollationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_collationName, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultCollation;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultCollation) {
             listener.enterDefaultCollation(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultCollation) {
             listener.exitDefaultCollation(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultCollation) {
            return visitor.visitDefaultCollation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultEncryptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultEncryption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultEncryption) {
             listener.enterDefaultEncryption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultEncryption) {
             listener.exitDefaultEncryption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultEncryption) {
            return visitor.visitDefaultEncryption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultCharsetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultCharset;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultCharset) {
             listener.enterDefaultCharset(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultCharset) {
             listener.exitDefaultCharset(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultCharset) {
            return visitor.visitDefaultCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public partitionTypeDef(): PartitionTypeDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionTypeDef, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public subPartitions(): SubPartitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_subPartitions, 0);
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinitions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionClause) {
             listener.enterPartitionClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionClause) {
             listener.exitPartitionClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionClause) {
            return visitor.visitPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTypeDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionTypeDef;
    }
    public override copyFrom(ctx: PartitionTypeDefContext): void {
        super.copyFrom(ctx);
    }
}
export class PartitionDefRangeListContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefRangeList) {
             listener.enterPartitionDefRangeList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefRangeList) {
             listener.exitPartitionDefRangeList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefRangeList) {
            return visitor.visitPartitionDefRangeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionDefKeyContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionKeyAlgorithm, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefKey) {
             listener.enterPartitionDefKey(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefKey) {
             listener.exitPartitionDefKey(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefKey) {
            return visitor.visitPartitionDefKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionDefHashContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefHash) {
             listener.enterPartitionDefHash(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefHash) {
             listener.exitPartitionDefHash(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefHash) {
            return visitor.visitPartitionDefHash(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubPartitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0);
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionKeyAlgorithm, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subPartitions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSubPartitions) {
             listener.enterSubPartitions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSubPartitions) {
             listener.exitSubPartitions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSubPartitions) {
            return visitor.visitSubPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionKeyAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionKeyAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionKeyAlgorithm) {
             listener.enterPartitionKeyAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionKeyAlgorithm) {
             listener.exitPartitionKeyAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionKeyAlgorithm) {
            return visitor.visitPartitionKeyAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public partitionDefinition_list(): Vector<PartitionDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionDefinition);
    }
    public partitionDefinition(i: number): PartitionDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinition, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDefinitions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefinitions) {
             listener.enterPartitionDefinitions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefinitions) {
             listener.exitPartitionDefinitions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefinitions) {
            return visitor.visitPartitionDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public partitionValuesIn(): PartitionValuesInContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionValuesIn, 0);
    }
    public partitionOption_list(): Vector<PartitionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionOption);
    }
    public partitionOption(i: number): PartitionOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionOption, i);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public subpartitionDefinition_list(): Vector<SubpartitionDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_subpartitionDefinition);
    }
    public subpartitionDefinition(i: number): SubpartitionDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_subpartitionDefinition, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public partitionValueItemListParen(): PartitionValueItemListParenContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItemListParen, 0);
    }
    public MAXVALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefinition) {
             listener.enterPartitionDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefinition) {
             listener.exitPartitionDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefinition) {
            return visitor.visitPartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValuesInContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionValueItemListParen_list(): Vector<PartitionValueItemListParenContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionValueItemListParen);
    }
    public partitionValueItemListParen(i: number): PartitionValueItemListParenContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItemListParen, i);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValuesIn;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionValuesIn) {
             listener.enterPartitionValuesIn(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionValuesIn) {
             listener.exitPartitionValuesIn(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionValuesIn) {
            return visitor.visitPartitionValuesIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionOption) {
             listener.enterPartitionOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionOption) {
             listener.exitPartitionOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionOption) {
            return visitor.visitPartitionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public partitionOption_list(): Vector<PartitionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionOption);
    }
    public partitionOption(i: number): PartitionOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subpartitionDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSubpartitionDefinition) {
             listener.enterSubpartitionDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSubpartitionDefinition) {
             listener.exitSubpartitionDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSubpartitionDefinition) {
            return visitor.visitSubpartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValueItemListParenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public partitionValueItem_list(): Vector<PartitionValueItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionValueItem);
    }
    public partitionValueItem(i: number): PartitionValueItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItem, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValueItemListParen;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionValueItemListParen) {
             listener.enterPartitionValueItemListParen(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionValueItemListParen) {
             listener.exitPartitionValueItemListParen(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionValueItemListParen) {
            return visitor.visitPartitionValueItemListParen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValueItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public MAXVALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValueItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionValueItem) {
             listener.enterPartitionValueItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionValueItem) {
             listener.exitPartitionValueItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionValueItem) {
            return visitor.visitPartitionValueItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinerClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_definerClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefinerClause) {
             listener.enterDefinerClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefinerClause) {
             listener.exitDefinerClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefinerClause) {
            return visitor.visitDefinerClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifExists;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifNotExists;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IgnoreUnknownUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ignoreUnknownUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIgnoreUnknownUser) {
             listener.enterIgnoreUnknownUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIgnoreUnknownUser) {
             listener.exitIgnoreUnknownUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIgnoreUnknownUser) {
            return visitor.visitIgnoreUnknownUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureParameterContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionParameter(): FunctionParameterContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionParameter, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public OUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUT_SYMBOL, 0);
    }
    public INOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INOUT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureParameter;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProcedureParameter) {
             listener.enterProcedureParameter(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProcedureParameter) {
             listener.exitProcedureParameter(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProcedureParameter) {
            return visitor.visitProcedureParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionParameterContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parameterName(): ParameterNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_parameterName, 0);
    }
    public typeWithOptCollate(): TypeWithOptCollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeWithOptCollate, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionParameter;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionParameter) {
             listener.enterFunctionParameter(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionParameter) {
             listener.exitFunctionParameter(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionParameter) {
            return visitor.visitFunctionParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_collationName, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_collate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCollate) {
             listener.enterCollate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCollate) {
             listener.exitCollate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCollate) {
            return visitor.visitCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeWithOptCollateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_typeWithOptCollate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTypeWithOptCollate) {
             listener.enterTypeWithOptCollate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTypeWithOptCollate) {
             listener.exitTypeWithOptCollate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTypeWithOptCollate) {
            return visitor.visitTypeWithOptCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaIdentifierPairContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public schemaRef_list(): Vector<SchemaRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaRef);
    }
    public schemaRef(i: number): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaIdentifierPair;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSchemaIdentifierPair) {
             listener.enterSchemaIdentifierPair(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSchemaIdentifierPair) {
             listener.exitSchemaIdentifierPair(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSchemaIdentifierPair) {
            return visitor.visitSchemaIdentifierPair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewRef_list(): Vector<ViewRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_viewRef);
    }
    public viewRef(i: number): ViewRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewRefList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewRefList) {
             listener.enterViewRefList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewRefList) {
             listener.exitViewRefList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewRefList) {
            return visitor.visitViewRefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public updateElement_list(): Vector<UpdateElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_updateElement);
    }
    public updateElement(i: number): UpdateElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateElement, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUpdateList) {
             listener.enterUpdateList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUpdateList) {
             listener.exitUpdateList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUpdateList) {
            return visitor.visitUpdateList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUpdateElement) {
             listener.enterUpdateElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUpdateElement) {
             listener.exitUpdateElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUpdateElement) {
            return visitor.visitUpdateElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCharsetClause) {
             listener.enterCharsetClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCharsetClause) {
             listener.exitCharsetClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCharsetClause) {
            return visitor.visitCharsetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldsClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public fieldTerm_list(): Vector<FieldTermContext> {
        return this.getRuleContexts(MySQLParser.RULE_fieldTerm);
    }
    public fieldTerm(i: number): FieldTermContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldTerm, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldsClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldsClause) {
             listener.enterFieldsClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldsClause) {
             listener.exitFieldsClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldsClause) {
            return visitor.visitFieldsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldTermContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TERMINATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public ENCLOSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCLOSED_SYMBOL, 0);
    }
    public OPTIONALLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0);
    }
    public ESCAPED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldTerm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldTerm) {
             listener.enterFieldTerm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldTerm) {
             listener.exitFieldTerm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldTerm) {
            return visitor.visitFieldTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LinesClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINES_SYMBOL, 0);
    }
    public lineTerm_list(): Vector<LineTermContext> {
        return this.getRuleContexts(MySQLParser.RULE_lineTerm);
    }
    public lineTerm(i: number): LineTermContext | null {
        return this.getRuleContext(MySQLParser.RULE_lineTerm, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_linesClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLinesClause) {
             listener.enterLinesClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLinesClause) {
             listener.exitLinesClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLinesClause) {
            return visitor.visitLinesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LineTermContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public TERMINATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
    }
    public STARTING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTING_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lineTerm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLineTerm) {
             listener.enterLineTerm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLineTerm) {
             listener.exitLineTerm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLineTerm) {
            return visitor.visitLineTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user_list(): Vector<UserContext> {
        return this.getRuleContexts(MySQLParser.RULE_user);
    }
    public user(i: number): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserList) {
             listener.enterUserList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserList) {
             listener.exitUserList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserList) {
            return visitor.visitUserList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createUser_list(): Vector<CreateUserContext> {
        return this.getRuleContexts(MySQLParser.RULE_createUser);
    }
    public createUser(i: number): CreateUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUser, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUserList) {
             listener.enterCreateUserList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUserList) {
             listener.exitCreateUserList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUserList) {
            return visitor.visitCreateUserList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public identification(): IdentificationContext | null {
        return this.getRuleContext(MySQLParser.RULE_identification, 0);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0);
    }
    public createUserWithMfa(): CreateUserWithMfaContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserWithMfa, 0);
    }
    public initialAuth(): InitialAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_initialAuth, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUser) {
             listener.enterCreateUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUser) {
             listener.exitCreateUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUser) {
            return visitor.visitCreateUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserWithMfaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AND_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AND_SYMBOL);
    }
    public AND_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, i);
    }
    public identification_list(): Vector<IdentificationContext> {
        return this.getRuleContexts(MySQLParser.RULE_identification);
    }
    public identification(i: number): IdentificationContext | null {
        return this.getRuleContext(MySQLParser.RULE_identification, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserWithMfa;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUserWithMfa) {
             listener.enterCreateUserWithMfa(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUserWithMfa) {
             listener.exitCreateUserWithMfa(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUserWithMfa) {
            return visitor.visitCreateUserWithMfa(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentificationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0);
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByPassword, 0);
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByRandomPassword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identification;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentification) {
             listener.enterIdentification(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentification) {
             listener.exitIdentification(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentification) {
            return visitor.visitIdentification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedByPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedByPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedByPassword) {
             listener.enterIdentifiedByPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedByPassword) {
             listener.exitIdentifiedByPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedByPassword) {
            return visitor.visitIdentifiedByPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedByRandomPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedByRandomPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedByRandomPassword) {
             listener.enterIdentifiedByRandomPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedByRandomPassword) {
             listener.exitIdentifiedByRandomPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedByRandomPassword) {
            return visitor.visitIdentifiedByRandomPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedWithPluginContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPlugin;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedWithPlugin) {
             listener.enterIdentifiedWithPlugin(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedWithPlugin) {
             listener.exitIdentifiedWithPlugin(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedWithPlugin) {
            return visitor.visitIdentifiedWithPlugin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedWithPluginAsAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginAsAuth;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedWithPluginAsAuth) {
             listener.enterIdentifiedWithPluginAsAuth(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedWithPluginAsAuth) {
             listener.exitIdentifiedWithPluginAsAuth(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedWithPluginAsAuth) {
            return visitor.visitIdentifiedWithPluginAsAuth(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedWithPluginByPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginByPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedWithPluginByPassword) {
             listener.enterIdentifiedWithPluginByPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedWithPluginByPassword) {
             listener.exitIdentifiedWithPluginByPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedWithPluginByPassword) {
            return visitor.visitIdentifiedWithPluginByPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedWithPluginByRandomPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginByRandomPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedWithPluginByRandomPassword) {
             listener.enterIdentifiedWithPluginByRandomPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedWithPluginByRandomPassword) {
             listener.exitIdentifiedWithPluginByRandomPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedWithPluginByRandomPassword) {
            return visitor.visitIdentifiedWithPluginByRandomPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InitialAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SYMBOL, 0);
    }
    public AUTHENTICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_initialAuth;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInitialAuth) {
             listener.enterInitialAuth(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInitialAuth) {
             listener.exitInitialAuth(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInitialAuth) {
            return visitor.visitInitialAuth(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RetainCurrentPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_retainCurrentPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRetainCurrentPassword) {
             listener.enterRetainCurrentPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRetainCurrentPassword) {
             listener.exitRetainCurrentPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRetainCurrentPassword) {
            return visitor.visitRetainCurrentPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DiscardOldPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_discardOldPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDiscardOldPassword) {
             listener.enterDiscardOldPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDiscardOldPassword) {
             listener.exitDiscardOldPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDiscardOldPassword) {
            return visitor.visitDiscardOldPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserRegistrationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public factor(): FactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_factor, 0);
    }
    public INITIATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIATE_SYMBOL, 0);
    }
    public REGISTRATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGISTRATION_SYMBOL, 0);
    }
    public UNREGISTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNREGISTER_SYMBOL, 0);
    }
    public FINISH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FINISH_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public CHALLENGE_RESPONSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userRegistration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserRegistration) {
             listener.enterUserRegistration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserRegistration) {
             listener.exitUserRegistration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserRegistration) {
            return visitor.visitUserRegistration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FactorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numLiteral(): NumLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_numLiteral, 0);
    }
    public FACTOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FACTOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_factor;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFactor) {
             listener.enterFactor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFactor) {
             listener.exitFactor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFactor) {
            return visitor.visitFactor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplacePasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replacePassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplacePassword) {
             listener.enterReplacePassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplacePassword) {
             listener.exitReplacePassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplacePassword) {
            return visitor.visitReplacePassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentifierOrTextContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userIdentifierOrText;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserIdentifierOrText) {
             listener.enterUserIdentifierOrText(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserIdentifierOrText) {
             listener.exitUserIdentifierOrText(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserIdentifierOrText) {
            return visitor.visitUserIdentifierOrText(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext | null {
        return this.getRuleContext(MySQLParser.RULE_userIdentifierOrText, 0);
    }
    public CURRENT_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_user;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUser) {
             listener.enterUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUser) {
             listener.exitUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUser) {
            return visitor.visitUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_likeClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLikeClause) {
             listener.enterLikeClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLikeClause) {
             listener.exitLikeClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLikeClause) {
            return visitor.visitLikeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeOrWhereContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public likeClause(): LikeClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeClause, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_likeOrWhere;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLikeOrWhere) {
             listener.enterLikeOrWhere(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLikeOrWhere) {
             listener.exitLikeOrWhere(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLikeOrWhere) {
            return visitor.visitLikeOrWhere(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnlineOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONLINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLINE_SYMBOL, 0);
    }
    public OFFLINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFLINE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onlineOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnlineOption) {
             listener.enterOnlineOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnlineOption) {
             listener.exitOnlineOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnlineOption) {
            return visitor.visitOnlineOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NoWriteToBinLogContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public NO_WRITE_TO_BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_noWriteToBinLog;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNoWriteToBinLog) {
             listener.enterNoWriteToBinLog(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNoWriteToBinLog) {
             listener.exitNoWriteToBinLog(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNoWriteToBinLog) {
            return visitor.visitNoWriteToBinLog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsePartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_usePartition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUsePartition) {
             listener.enterUsePartition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUsePartition) {
             listener.exitUsePartition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUsePartition) {
            return visitor.visitUsePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldIdentifier) {
             listener.enterFieldIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldIdentifier) {
             listener.exitFieldIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldIdentifier) {
            return visitor.visitFieldIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnInternalRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnInternalRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnInternalRef) {
             listener.enterColumnInternalRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnInternalRef) {
             listener.exitColumnInternalRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnInternalRef) {
            return visitor.visitColumnInternalRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnInternalRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public columnInternalRef_list(): Vector<ColumnInternalRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnInternalRef);
    }
    public columnInternalRef(i: number): ColumnInternalRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRef, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnInternalRefList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnInternalRefList) {
             listener.enterColumnInternalRefList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnInternalRefList) {
             listener.exitColumnInternalRefList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnInternalRefList) {
            return visitor.visitColumnInternalRefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldIdentifier(): FieldIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnRef) {
             listener.enterColumnRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnRef) {
             listener.exitColumnRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnRef) {
            return visitor.visitColumnRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0);
    }
    public tableWild(): TableWildContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableWild, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertIdentifier) {
             listener.enterInsertIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertIdentifier) {
             listener.exitInsertIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertIdentifier) {
            return visitor.visitInsertIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexName) {
             listener.enterIndexName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexName) {
             listener.exitIndexName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexName) {
            return visitor.visitIndexName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldIdentifier(): FieldIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexRef) {
             listener.enterIndexRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexRef) {
             listener.exitIndexRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexRef) {
            return visitor.visitIndexRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableWildContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier);
    }
    public identifier(i: number): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, i);
    }
    public DOT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.DOT_SYMBOL);
    }
    public DOT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, i);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableWild;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableWild) {
             listener.enterTableWild(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableWild) {
             listener.exitTableWild(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableWild) {
            return visitor.visitTableWild(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSchemaName) {
             listener.enterSchemaName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSchemaName) {
             listener.exitSchemaName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSchemaName) {
            return visitor.visitSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSchemaRef) {
             listener.enterSchemaRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSchemaRef) {
             listener.exitSchemaRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSchemaRef) {
            return visitor.visitSchemaRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProcedureName) {
             listener.enterProcedureName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProcedureName) {
             listener.exitProcedureName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProcedureName) {
            return visitor.visitProcedureName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProcedureRef) {
             listener.enterProcedureRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProcedureRef) {
             listener.exitProcedureRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProcedureRef) {
            return visitor.visitProcedureRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionRef) {
             listener.enterFunctionRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionRef) {
             listener.exitFunctionRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionRef) {
            return visitor.visitFunctionRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTriggerName) {
             listener.enterTriggerName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTriggerName) {
             listener.exitTriggerName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTriggerName) {
            return visitor.visitTriggerName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTriggerRef) {
             listener.enterTriggerRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTriggerRef) {
             listener.exitTriggerRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTriggerRef) {
            return visitor.visitTriggerRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewRef) {
             listener.enterViewRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewRef) {
             listener.exitViewRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewRef) {
            return visitor.visitViewRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablespaceName) {
             listener.enterTablespaceName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablespaceName) {
             listener.exitTablespaceName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablespaceName) {
            return visitor.visitTablespaceName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablespaceRef) {
             listener.enterTablespaceRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablespaceRef) {
             listener.exitTablespaceRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablespaceRef) {
            return visitor.visitTablespaceRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogfileGroupNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogfileGroupName) {
             listener.enterLogfileGroupName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogfileGroupName) {
             listener.exitLogfileGroupName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogfileGroupName) {
            return visitor.visitLogfileGroupName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogfileGroupRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogfileGroupRef) {
             listener.enterLogfileGroupRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogfileGroupRef) {
             listener.exitLogfileGroupRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogfileGroupRef) {
            return visitor.visitLogfileGroupRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EventNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_eventName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEventName) {
             listener.enterEventName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEventName) {
             listener.exitEventName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEventName) {
            return visitor.visitEventName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EventRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_eventRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEventRef) {
             listener.enterEventRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEventRef) {
             listener.exitEventRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEventRef) {
            return visitor.visitEventRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UdfNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUdfName) {
             listener.enterUdfName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUdfName) {
             listener.exitUdfName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUdfName) {
            return visitor.visitUdfName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerName) {
             listener.enterServerName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerName) {
             listener.exitServerName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerName) {
            return visitor.visitServerName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerRef) {
             listener.enterServerRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerRef) {
             listener.exitServerRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerRef) {
            return visitor.visitServerRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_engineRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEngineRef) {
             listener.enterEngineRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEngineRef) {
             listener.exitEngineRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEngineRef) {
            return visitor.visitEngineRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterTableRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterTableRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterTableRef) {
             listener.enterFilterTableRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterTableRef) {
             listener.exitFilterTableRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterTableRef) {
            return visitor.visitFilterTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRefWithWildcardContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRefWithWildcard;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableRefWithWildcard) {
             listener.enterTableRefWithWildcard(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableRefWithWildcard) {
             listener.exitTableRefWithWildcard(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableRefWithWildcard) {
            return visitor.visitTableRefWithWildcard(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableRef) {
             listener.enterTableRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableRef) {
             listener.exitTableRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableRef) {
            return visitor.visitTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef_list(): Vector<TableRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableRef);
    }
    public tableRef(i: number): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRefList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableRefList) {
             listener.enterTableRefList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableRefList) {
             listener.exitTableRefList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableRefList) {
            return visitor.visitTableRefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRefWithWildcard_list(): Vector<TableRefWithWildcardContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableRefWithWildcard);
    }
    public tableRefWithWildcard(i: number): TableRefWithWildcardContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRefWithWildcard, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAliasRefList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableAliasRefList) {
             listener.enterTableAliasRefList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableAliasRefList) {
             listener.exitTableAliasRefList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableAliasRefList) {
            return visitor.visitTableAliasRefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParameterNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_parameterName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterParameterName) {
             listener.enterParameterName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitParameterName) {
             listener.exitParameterName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitParameterName) {
            return visitor.visitParameterName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public labelKeyword(): LabelKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelKeyword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabelIdentifier) {
             listener.enterLabelIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabelIdentifier) {
             listener.exitLabelIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabelIdentifier) {
            return visitor.visitLabelIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelIdentifier(): LabelIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabelRef) {
             listener.enterLabelRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabelRef) {
             listener.exitLabelRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabelRef) {
            return visitor.visitLabelRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public roleKeyword(): RoleKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleKeyword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleIdentifier) {
             listener.enterRoleIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleIdentifier) {
             listener.exitRoleIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleIdentifier) {
            return visitor.visitRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PluginRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pluginRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPluginRef) {
             listener.enterPluginRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPluginRef) {
             listener.exitPluginRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPluginRef) {
            return visitor.visitPluginRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComponentRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_componentRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterComponentRef) {
             listener.enterComponentRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitComponentRef) {
             listener.exitComponentRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitComponentRef) {
            return visitor.visitComponentRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupRef) {
             listener.enterResourceGroupRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupRef) {
             listener.exitResourceGroupRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupRef) {
            return visitor.visitResourceGroupRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowName) {
             listener.enterWindowName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowName) {
             listener.exitWindowName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowName) {
            return visitor.visitWindowName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PureIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIER, 0);
    }
    public BACK_TICK_QUOTED_ID(): TerminalNode | null {
        return this.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0);
    }
    public DOUBLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pureIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPureIdentifier) {
             listener.enterPureIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPureIdentifier) {
             listener.exitPureIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPureIdentifier) {
            return visitor.visitPureIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public identifierKeyword(): IdentifierKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeyword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier);
    }
    public identifier(i: number): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierList) {
             listener.enterIdentifierList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierList) {
             listener.exitIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierListWithParentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierListWithParentheses) {
             listener.enterIdentifierListWithParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierListWithParentheses) {
             listener.exitIdentifierListWithParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierListWithParentheses) {
            return visitor.visitIdentifierListWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_qualifiedIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQualifiedIdentifier) {
             listener.enterQualifiedIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQualifiedIdentifier) {
             listener.exitQualifiedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQualifiedIdentifier) {
            return visitor.visitQualifiedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public dotIdentifier_list(): Vector<DotIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_dotIdentifier);
    }
    public dotIdentifier(i: number): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleIdentifier) {
             listener.enterSimpleIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleIdentifier) {
             listener.exitSimpleIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleIdentifier) {
            return visitor.visitSimpleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DotIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dotIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDotIdentifier) {
             listener.enterDotIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDotIdentifier) {
             listener.exitDotIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDotIdentifier) {
            return visitor.visitDotIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ulong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ulong_number;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUlong_number) {
             listener.enterUlong_number(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUlong_number) {
             listener.exitUlong_number(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUlong_number) {
            return visitor.visitUlong_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Real_ulong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_real_ulong_number;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReal_ulong_number) {
             listener.enterReal_ulong_number(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReal_ulong_number) {
             listener.exitReal_ulong_number(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReal_ulong_number) {
            return visitor.visitReal_ulong_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ulonglong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ulonglong_number;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUlonglong_number) {
             listener.enterUlonglong_number(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUlonglong_number) {
             listener.exitUlonglong_number(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUlonglong_number) {
            return visitor.visitUlonglong_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Real_ulonglong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_real_ulonglong_number;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReal_ulonglong_number) {
             listener.enterReal_ulonglong_number(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReal_ulonglong_number) {
             listener.exitReal_ulonglong_number(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReal_ulonglong_number) {
            return visitor.visitReal_ulonglong_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignedLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_literal, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signedLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignedLiteral) {
             listener.enterSignedLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignedLiteral) {
             listener.exitSignedLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignedLiteral) {
            return visitor.visitSignedLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignedLiteralOrNullContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signedLiteral(): SignedLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_signedLiteral, 0);
    }
    public nullAsLiteral(): NullAsLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullAsLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signedLiteralOrNull;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignedLiteralOrNull) {
             listener.enterSignedLiteralOrNull(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignedLiteralOrNull) {
             listener.exitSignedLiteralOrNull(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignedLiteralOrNull) {
            return visitor.visitSignedLiteralOrNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public numLiteral(): NumLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_numLiteral, 0);
    }
    public temporalLiteral(): TemporalLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_temporalLiteral, 0);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0);
    }
    public boolLiteral(): BoolLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolLiteral, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public BIN_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.BIN_NUMBER, 0);
    }
    public UNDERSCORE_CHARSET(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_literal;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLiteral) {
             listener.enterLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLiteral) {
             listener.exitLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralOrNullContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_literal, 0);
    }
    public nullAsLiteral(): NullAsLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullAsLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_literalOrNull;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLiteralOrNull) {
             listener.enterLiteralOrNull(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLiteralOrNull) {
             listener.exitLiteralOrNull(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLiteralOrNull) {
            return visitor.visitLiteralOrNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullAsLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullAsLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNullAsLiteral) {
             listener.enterNullAsLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNullAsLiteral) {
             listener.exitNullAsLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNullAsLiteral) {
            return visitor.visitNullAsLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString);
    }
    public textString(i: number): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stringList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStringList) {
             listener.enterStringList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStringList) {
             listener.exitStringList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStringList) {
            return visitor.visitStringList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringLiteralContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINGLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
    }
    public DOUBLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextStringLiteral) {
             listener.enterTextStringLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextStringLiteral) {
             listener.exitTextStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextStringLiteral) {
            return visitor.visitTextStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public BIN_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.BIN_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textString;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextString) {
             listener.enterTextString(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextString) {
             listener.exitTextString(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextString) {
            return visitor.visitTextString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringHashContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringHash;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextStringHash) {
             listener.enterTextStringHash(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextStringHash) {
             listener.exitTextStringHash(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextStringHash) {
            return visitor.visitTextStringHash(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral_list(): Vector<TextStringLiteralContext> {
        return this.getRuleContexts(MySQLParser.RULE_textStringLiteral);
    }
    public textStringLiteral(i: number): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, i);
    }
    public NCHAR_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_TEXT, 0);
    }
    public UNDERSCORE_CHARSET(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextLiteral) {
             listener.enterTextLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextLiteral) {
             listener.exitTextLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextLiteral) {
            return visitor.visitTextLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringNoLinebreakContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringNoLinebreak;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextStringNoLinebreak) {
             listener.enterTextStringNoLinebreak(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextStringNoLinebreak) {
             listener.exitTextStringNoLinebreak(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextStringNoLinebreak) {
            return visitor.visitTextStringNoLinebreak(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringLiteralListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral_list(): Vector<TextStringLiteralContext> {
        return this.getRuleContexts(MySQLParser.RULE_textStringLiteral);
    }
    public textStringLiteral(i: number): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringLiteralList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextStringLiteralList) {
             listener.enterTextStringLiteralList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextStringLiteralList) {
             listener.exitTextStringLiteralList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextStringLiteralList) {
            return visitor.visitTextStringLiteralList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public int64Literal(): Int64LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_int64Literal, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_numLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNumLiteral) {
             listener.enterNumLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNumLiteral) {
             listener.exitNumLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNumLiteral) {
            return visitor.visitNumLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BoolLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
    }
    public FALSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_boolLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterBoolLiteral) {
             listener.enterBoolLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitBoolLiteral) {
             listener.exitBoolLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitBoolLiteral) {
            return visitor.visitBoolLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public NULL2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNullLiteral) {
             listener.enterNullLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNullLiteral) {
             listener.exitNullLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Int64LiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_int64Literal;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInt64Literal) {
             listener.enterInt64Literal(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInt64Literal) {
             listener.exitInt64Literal(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInt64Literal) {
            return visitor.visitInt64Literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public SINGLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_temporalLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTemporalLiteral) {
             listener.enterTemporalLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTemporalLiteral) {
             listener.exitTemporalLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTemporalLiteral) {
            return visitor.visitTemporalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloatOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_precision, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_floatOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFloatOptions) {
             listener.enterFloatOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFloatOptions) {
             listener.exitFloatOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFloatOptions) {
            return visitor.visitFloatOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandardFloatOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_precision, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_standardFloatOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStandardFloatOptions) {
             listener.enterStandardFloatOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStandardFloatOptions) {
             listener.exitStandardFloatOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStandardFloatOptions) {
            return visitor.visitStandardFloatOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_precision;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrecision) {
             listener.enterPrecision(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrecision) {
             listener.exitPrecision(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrecision) {
            return visitor.visitPrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextOrIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textOrIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextOrIdentifier) {
             listener.enterTextOrIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextOrIdentifier) {
             listener.exitTextOrIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextOrIdentifier) {
            return visitor.visitTextOrIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LValueIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public lValueKeyword(): LValueKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_lValueKeyword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lValueIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLValueIdentifier) {
             listener.enterLValueIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLValueIdentifier) {
             listener.exitLValueIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLValueIdentifier) {
            return visitor.visitLValueIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierOrTextContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifier, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleIdentifierOrText;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleIdentifierOrText) {
             listener.enterRoleIdentifierOrText(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleIdentifierOrText) {
             listener.exitRoleIdentifierOrText(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleIdentifierOrText) {
            return visitor.visitRoleIdentifierOrText(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SizeNumberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sizeNumber;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSizeNumber) {
             listener.enterSizeNumber(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSizeNumber) {
             listener.exitSizeNumber(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSizeNumber) {
            return visitor.visitSizeNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_parentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterParentheses) {
             listener.enterParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitParentheses) {
             listener.exitParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitParentheses) {
            return visitor.visitParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EqualContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public ASSIGN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_equal;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEqual) {
             listener.enterEqual(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEqual) {
             listener.exitEqual(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEqual) {
            return visitor.visitEqual(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionType) {
             listener.enterOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionType) {
             listener.exitOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionType) {
            return visitor.visitOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RvalueSystemVariableTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemVariableType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRvalueSystemVariableType) {
             listener.enterRvalueSystemVariableType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRvalueSystemVariableType) {
             listener.exitRvalueSystemVariableType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRvalueSystemVariableType) {
            return visitor.visitRvalueSystemVariableType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetVarIdentTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setVarIdentType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetVarIdentType) {
             listener.enterSetVarIdentType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetVarIdentType) {
             listener.exitSetVarIdentType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetVarIdentType) {
            return visitor.visitSetVarIdentType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJsonAttribute) {
             listener.enterJsonAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJsonAttribute) {
             listener.exitJsonAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJsonAttribute) {
            return visitor.visitJsonAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelKeyword(): LabelKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelKeyword, 0);
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrIdentifierKeyword, 0);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0);
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels, 0);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeyword) {
             listener.enterIdentifierKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeyword) {
             listener.exitIdentifierKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeyword) {
            return visitor.visitIdentifierKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels) {
             listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels) {
             listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsAmbiguous1RolesAndLabels) {
            return visitor.visitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous2Labels;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsAmbiguous2Labels) {
             listener.enterIdentifierKeywordsAmbiguous2Labels(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsAmbiguous2Labels) {
             listener.exitIdentifierKeywordsAmbiguous2Labels(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsAmbiguous2Labels) {
            return visitor.visitIdentifierKeywordsAmbiguous2Labels(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrLabelKeyword, 0);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabelKeyword) {
             listener.enterLabelKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabelKeyword) {
             listener.exitLabelKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabelKeyword) {
            return visitor.visitLabelKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous3Roles;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsAmbiguous3Roles) {
             listener.enterIdentifierKeywordsAmbiguous3Roles(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsAmbiguous3Roles) {
             listener.exitIdentifierKeywordsAmbiguous3Roles(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsAmbiguous3Roles) {
            return visitor.visitIdentifierKeywordsAmbiguous3Roles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public AUTHENTICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public CHALLENGE_RESPONSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public DEFINITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public ENFORCED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public EXCHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public EXPIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public FACTOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FACTOR_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public FINISH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FINISH_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
    }
    public GET_SOURCE_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public GTID_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GTID_ONLY_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public INITIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SYMBOL, 0);
    }
    public INITIATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIATE_SYMBOL, 0);
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public JSON_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_VALUE_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public KEYRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYRING_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public LOCKS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public NETWORK_NAMESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public NDBCLUSTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public NEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEW_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public OJ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OJ_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public READ_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public REGISTRATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGISTRATION_SYMBOL, 0);
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public REPLICAS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICAS_SYMBOL, 0);
    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICA_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public RESTORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public RETURNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNING_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public SOURCE_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0);
    }
    public SOURCE_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0);
    }
    public SOURCE_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0);
    }
    public SOURCE_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0);
    }
    public SOURCE_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0);
    }
    public SOURCE_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public SOURCE_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0);
    }
    public SOURCE_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0);
    }
    public SOURCE_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0);
    }
    public SOURCE_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0);
    }
    public SOURCE_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0);
    }
    public SOURCE_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public SOURCE_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0);
    }
    public SOURCE_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0);
    }
    public SOURCE_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0);
    }
    public SOURCE_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0);
    }
    public SOURCE_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0);
    }
    public SOURCE_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0);
    }
    public SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SOURCE_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public SOURCE_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0);
    }
    public SOURCE_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_USER_SYMBOL, 0);
    }
    public SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public ST_COLLECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ST_COLLECT_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TLS_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public TYPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public UNREGISTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNREGISTER_SYMBOL, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public VALIDATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public WITHOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ZONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ZONE_SYMBOL, 0);
    }
    public ARRAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
    }
    public MEMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public PASSWORD_LOCK_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public REQUIRE_ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
    }
    public REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
    }
    public STREAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsUnambiguous;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsUnambiguous) {
             listener.enterIdentifierKeywordsUnambiguous(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsUnambiguous) {
             listener.exitIdentifierKeywordsUnambiguous(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsUnambiguous) {
            return visitor.visitIdentifierKeywordsUnambiguous(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrLabelKeyword, 0);
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrIdentifierKeyword, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleKeyword) {
             listener.enterRoleKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleKeyword) {
             listener.exitRoleKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleKeyword) {
            return visitor.visitRoleKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LValueKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0);
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels, 0);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lValueKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLValueKeyword) {
             listener.enterLValueKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLValueKeyword) {
             listener.exitLValueKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLValueKeyword) {
            return visitor.visitLValueKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsAmbiguous4SystemVariables) {
             listener.enterIdentifierKeywordsAmbiguous4SystemVariables(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsAmbiguous4SystemVariables) {
             listener.exitIdentifierKeywordsAmbiguous4SystemVariables(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsAmbiguous4SystemVariables) {
            return visitor.visitIdentifierKeywordsAmbiguous4SystemVariables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOrIdentifierKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public RESTORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrIdentifierKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleOrIdentifierKeyword) {
             listener.enterRoleOrIdentifierKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleOrIdentifierKeyword) {
             listener.exitRoleOrIdentifierKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleOrIdentifierKeyword) {
            return visitor.visitRoleOrIdentifierKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOrLabelKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public LOCKS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public NDBCLUSTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public NEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEW_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public READ_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public REMOTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TYPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public UDF_RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrLabelKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleOrLabelKeyword) {
             listener.enterRoleOrLabelKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleOrLabelKeyword) {
             listener.exitRoleOrLabelKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleOrLabelKeyword) {
            return visitor.visitRoleOrLabelKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
