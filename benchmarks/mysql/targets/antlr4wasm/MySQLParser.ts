// Generated from ./targets/antlr4wasm/MySQLParser.g4 by ANTLR 4.13.0


/* Copyright (c) 2020, 2024, Oracle and/or its affiliates. */

/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-useless-escape, no-lone-blocks */

/* cspell: disable */

import { SqlMode } from "./MySQLRecognizerCommon.js";


import {
    DFA, ParserATNSimulator, PredictionContextCache, RuleContext, Token, SerializedATNView, ATN,
    ATNDeserializer, StringVector, Vocabulary, ParserRuleContext as PRC, TokenStream, FailedPredicateException,
    RecognitionException, NoViableAltException, TerminalNode, Vector
} from "../../../../src/antlr4-runtime.js";

import MySQLParserListener from "./MySQLParserListener.js";
import MySQLParserVisitor from "./MySQLParserVisitor.js";

const ParserRuleContext = PRC.extend<PRC>("PRC", {});
type ParserRuleContext = InstanceType<typeof ParserRuleContext>;

import MySQLBaseRecognizer from "./MySQLBaseRecognizer.js";

export default class MySQLParser extends MySQLBaseRecognizer {
    public static readonly NOT2_SYMBOL = 1;
    public static readonly CONCAT_PIPES_SYMBOL = 2;
    public static readonly INT_NUMBER = 3;
    public static readonly LONG_NUMBER = 4;
    public static readonly ULONGLONG_NUMBER = 5;
    public static readonly EQUAL_OPERATOR = 6;
    public static readonly ASSIGN_OPERATOR = 7;
    public static readonly NULL_SAFE_EQUAL_OPERATOR = 8;
    public static readonly GREATER_OR_EQUAL_OPERATOR = 9;
    public static readonly GREATER_THAN_OPERATOR = 10;
    public static readonly LESS_OR_EQUAL_OPERATOR = 11;
    public static readonly LESS_THAN_OPERATOR = 12;
    public static readonly NOT_EQUAL_OPERATOR = 13;
    public static readonly PLUS_OPERATOR = 14;
    public static readonly MINUS_OPERATOR = 15;
    public static readonly MULT_OPERATOR = 16;
    public static readonly DIV_OPERATOR = 17;
    public static readonly MOD_OPERATOR = 18;
    public static readonly LOGICAL_NOT_OPERATOR = 19;
    public static readonly BITWISE_NOT_OPERATOR = 20;
    public static readonly SHIFT_LEFT_OPERATOR = 21;
    public static readonly SHIFT_RIGHT_OPERATOR = 22;
    public static readonly LOGICAL_AND_OPERATOR = 23;
    public static readonly BITWISE_AND_OPERATOR = 24;
    public static readonly BITWISE_XOR_OPERATOR = 25;
    public static readonly LOGICAL_OR_OPERATOR = 26;
    public static readonly BITWISE_OR_OPERATOR = 27;
    public static readonly DOT_SYMBOL = 28;
    public static readonly COMMA_SYMBOL = 29;
    public static readonly SEMICOLON_SYMBOL = 30;
    public static readonly COLON_SYMBOL = 31;
    public static readonly OPEN_PAR_SYMBOL = 32;
    public static readonly CLOSE_PAR_SYMBOL = 33;
    public static readonly OPEN_CURLY_SYMBOL = 34;
    public static readonly CLOSE_CURLY_SYMBOL = 35;
    public static readonly UNDERLINE_SYMBOL = 36;
    public static readonly JSON_SEPARATOR_SYMBOL = 37;
    public static readonly JSON_UNQUOTED_SEPARATOR_SYMBOL = 38;
    public static readonly AT_SIGN_SYMBOL = 39;
    public static readonly AT_TEXT_SUFFIX = 40;
    public static readonly AT_AT_SIGN_SYMBOL = 41;
    public static readonly NULL2_SYMBOL = 42;
    public static readonly PARAM_MARKER = 43;
    public static readonly HEX_NUMBER = 44;
    public static readonly BIN_NUMBER = 45;
    public static readonly DECIMAL_NUMBER = 46;
    public static readonly FLOAT_NUMBER = 47;
    public static readonly ACCESSIBLE_SYMBOL = 48;
    public static readonly ACCOUNT_SYMBOL = 49;
    public static readonly ACTION_SYMBOL = 50;
    public static readonly ADD_SYMBOL = 51;
    public static readonly ADDDATE_SYMBOL = 52;
    public static readonly AFTER_SYMBOL = 53;
    public static readonly AGAINST_SYMBOL = 54;
    public static readonly AGGREGATE_SYMBOL = 55;
    public static readonly ALGORITHM_SYMBOL = 56;
    public static readonly ALL_SYMBOL = 57;
    public static readonly ALTER_SYMBOL = 58;
    public static readonly ALWAYS_SYMBOL = 59;
    public static readonly ANALYZE_SYMBOL = 60;
    public static readonly AND_SYMBOL = 61;
    public static readonly ANY_SYMBOL = 62;
    public static readonly AS_SYMBOL = 63;
    public static readonly ASC_SYMBOL = 64;
    public static readonly ASCII_SYMBOL = 65;
    public static readonly ASENSITIVE_SYMBOL = 66;
    public static readonly AT_SYMBOL = 67;
    public static readonly AUTOEXTEND_SIZE_SYMBOL = 68;
    public static readonly AUTO_INCREMENT_SYMBOL = 69;
    public static readonly AVG_ROW_LENGTH_SYMBOL = 70;
    public static readonly AVG_SYMBOL = 71;
    public static readonly BACKUP_SYMBOL = 72;
    public static readonly BEFORE_SYMBOL = 73;
    public static readonly BEGIN_SYMBOL = 74;
    public static readonly BETWEEN_SYMBOL = 75;
    public static readonly BIGINT_SYMBOL = 76;
    public static readonly BINARY_SYMBOL = 77;
    public static readonly BINLOG_SYMBOL = 78;
    public static readonly BIT_AND_SYMBOL = 79;
    public static readonly BIT_OR_SYMBOL = 80;
    public static readonly BIT_SYMBOL = 81;
    public static readonly BIT_XOR_SYMBOL = 82;
    public static readonly BLOB_SYMBOL = 83;
    public static readonly BLOCK_SYMBOL = 84;
    public static readonly BOOLEAN_SYMBOL = 85;
    public static readonly BOOL_SYMBOL = 86;
    public static readonly BOTH_SYMBOL = 87;
    public static readonly BTREE_SYMBOL = 88;
    public static readonly BY_SYMBOL = 89;
    public static readonly BYTE_SYMBOL = 90;
    public static readonly CACHE_SYMBOL = 91;
    public static readonly CALL_SYMBOL = 92;
    public static readonly CASCADE_SYMBOL = 93;
    public static readonly CASCADED_SYMBOL = 94;
    public static readonly CASE_SYMBOL = 95;
    public static readonly CAST_SYMBOL = 96;
    public static readonly CATALOG_NAME_SYMBOL = 97;
    public static readonly CHAIN_SYMBOL = 98;
    public static readonly CHANGE_SYMBOL = 99;
    public static readonly CHANGED_SYMBOL = 100;
    public static readonly CHANNEL_SYMBOL = 101;
    public static readonly CHARSET_SYMBOL = 102;
    public static readonly CHAR_SYMBOL = 103;
    public static readonly CHECKSUM_SYMBOL = 104;
    public static readonly CHECK_SYMBOL = 105;
    public static readonly CIPHER_SYMBOL = 106;
    public static readonly CLASS_ORIGIN_SYMBOL = 107;
    public static readonly CLIENT_SYMBOL = 108;
    public static readonly CLOSE_SYMBOL = 109;
    public static readonly COALESCE_SYMBOL = 110;
    public static readonly CODE_SYMBOL = 111;
    public static readonly COLLATE_SYMBOL = 112;
    public static readonly COLLATION_SYMBOL = 113;
    public static readonly COLUMNS_SYMBOL = 114;
    public static readonly COLUMN_SYMBOL = 115;
    public static readonly COLUMN_NAME_SYMBOL = 116;
    public static readonly COLUMN_FORMAT_SYMBOL = 117;
    public static readonly COMMENT_SYMBOL = 118;
    public static readonly COMMITTED_SYMBOL = 119;
    public static readonly COMMIT_SYMBOL = 120;
    public static readonly COMPACT_SYMBOL = 121;
    public static readonly COMPLETION_SYMBOL = 122;
    public static readonly COMPRESSED_SYMBOL = 123;
    public static readonly COMPRESSION_SYMBOL = 124;
    public static readonly CONCURRENT_SYMBOL = 125;
    public static readonly CONDITION_SYMBOL = 126;
    public static readonly CONNECTION_SYMBOL = 127;
    public static readonly CONSISTENT_SYMBOL = 128;
    public static readonly CONSTRAINT_SYMBOL = 129;
    public static readonly CONSTRAINT_CATALOG_SYMBOL = 130;
    public static readonly CONSTRAINT_NAME_SYMBOL = 131;
    public static readonly CONSTRAINT_SCHEMA_SYMBOL = 132;
    public static readonly CONTAINS_SYMBOL = 133;
    public static readonly CONTEXT_SYMBOL = 134;
    public static readonly CONTINUE_SYMBOL = 135;
    public static readonly CONVERT_SYMBOL = 136;
    public static readonly COUNT_SYMBOL = 137;
    public static readonly CPU_SYMBOL = 138;
    public static readonly CREATE_SYMBOL = 139;
    public static readonly CROSS_SYMBOL = 140;
    public static readonly CUBE_SYMBOL = 141;
    public static readonly CURDATE_SYMBOL = 142;
    public static readonly CURRENT_SYMBOL = 143;
    public static readonly CURRENT_DATE_SYMBOL = 144;
    public static readonly CURRENT_TIME_SYMBOL = 145;
    public static readonly CURRENT_USER_SYMBOL = 146;
    public static readonly CURSOR_SYMBOL = 147;
    public static readonly CURSOR_NAME_SYMBOL = 148;
    public static readonly CURTIME_SYMBOL = 149;
    public static readonly DATABASE_SYMBOL = 150;
    public static readonly DATABASES_SYMBOL = 151;
    public static readonly DATAFILE_SYMBOL = 152;
    public static readonly DATA_SYMBOL = 153;
    public static readonly DATETIME_SYMBOL = 154;
    public static readonly DATE_ADD_SYMBOL = 155;
    public static readonly DATE_SUB_SYMBOL = 156;
    public static readonly DATE_SYMBOL = 157;
    public static readonly DAY_HOUR_SYMBOL = 158;
    public static readonly DAY_MICROSECOND_SYMBOL = 159;
    public static readonly DAY_MINUTE_SYMBOL = 160;
    public static readonly DAY_SECOND_SYMBOL = 161;
    public static readonly DAY_SYMBOL = 162;
    public static readonly DEALLOCATE_SYMBOL = 163;
    public static readonly DECIMAL_SYMBOL = 164;
    public static readonly DECLARE_SYMBOL = 165;
    public static readonly DEFAULT_SYMBOL = 166;
    public static readonly DEFAULT_AUTH_SYMBOL = 167;
    public static readonly DEFINER_SYMBOL = 168;
    public static readonly DELAYED_SYMBOL = 169;
    public static readonly DELAY_KEY_WRITE_SYMBOL = 170;
    public static readonly DELETE_SYMBOL = 171;
    public static readonly DESC_SYMBOL = 172;
    public static readonly DESCRIBE_SYMBOL = 173;
    public static readonly DETERMINISTIC_SYMBOL = 174;
    public static readonly DIAGNOSTICS_SYMBOL = 175;
    public static readonly DIRECTORY_SYMBOL = 176;
    public static readonly DISABLE_SYMBOL = 177;
    public static readonly DISCARD_SYMBOL = 178;
    public static readonly DISK_SYMBOL = 179;
    public static readonly DISTINCT_SYMBOL = 180;
    public static readonly DIV_SYMBOL = 181;
    public static readonly DOUBLE_SYMBOL = 182;
    public static readonly DO_SYMBOL = 183;
    public static readonly DROP_SYMBOL = 184;
    public static readonly DUAL_SYMBOL = 185;
    public static readonly DUMPFILE_SYMBOL = 186;
    public static readonly DUPLICATE_SYMBOL = 187;
    public static readonly DYNAMIC_SYMBOL = 188;
    public static readonly EACH_SYMBOL = 189;
    public static readonly ELSE_SYMBOL = 190;
    public static readonly ELSEIF_SYMBOL = 191;
    public static readonly ENABLE_SYMBOL = 192;
    public static readonly ENCLOSED_SYMBOL = 193;
    public static readonly ENCRYPTION_SYMBOL = 194;
    public static readonly END_SYMBOL = 195;
    public static readonly ENDS_SYMBOL = 196;
    public static readonly ENGINES_SYMBOL = 197;
    public static readonly ENGINE_SYMBOL = 198;
    public static readonly ENUM_SYMBOL = 199;
    public static readonly ERROR_SYMBOL = 200;
    public static readonly ERRORS_SYMBOL = 201;
    public static readonly ESCAPED_SYMBOL = 202;
    public static readonly ESCAPE_SYMBOL = 203;
    public static readonly EVENTS_SYMBOL = 204;
    public static readonly EVENT_SYMBOL = 205;
    public static readonly EVERY_SYMBOL = 206;
    public static readonly EXCHANGE_SYMBOL = 207;
    public static readonly EXECUTE_SYMBOL = 208;
    public static readonly EXISTS_SYMBOL = 209;
    public static readonly EXIT_SYMBOL = 210;
    public static readonly EXPANSION_SYMBOL = 211;
    public static readonly EXPIRE_SYMBOL = 212;
    public static readonly EXPLAIN_SYMBOL = 213;
    public static readonly EXPORT_SYMBOL = 214;
    public static readonly EXTENDED_SYMBOL = 215;
    public static readonly EXTENT_SIZE_SYMBOL = 216;
    public static readonly EXTRACT_SYMBOL = 217;
    public static readonly FALSE_SYMBOL = 218;
    public static readonly FAST_SYMBOL = 219;
    public static readonly FAULTS_SYMBOL = 220;
    public static readonly FETCH_SYMBOL = 221;
    public static readonly FILE_SYMBOL = 222;
    public static readonly FILE_BLOCK_SIZE_SYMBOL = 223;
    public static readonly FILTER_SYMBOL = 224;
    public static readonly FIRST_SYMBOL = 225;
    public static readonly FIXED_SYMBOL = 226;
    public static readonly FLOAT_SYMBOL = 227;
    public static readonly FLUSH_SYMBOL = 228;
    public static readonly FOLLOWS_SYMBOL = 229;
    public static readonly FORCE_SYMBOL = 230;
    public static readonly FOREIGN_SYMBOL = 231;
    public static readonly FOR_SYMBOL = 232;
    public static readonly FORMAT_SYMBOL = 233;
    public static readonly FOUND_SYMBOL = 234;
    public static readonly FROM_SYMBOL = 235;
    public static readonly FULL_SYMBOL = 236;
    public static readonly FULLTEXT_SYMBOL = 237;
    public static readonly FUNCTION_SYMBOL = 238;
    public static readonly GET_SYMBOL = 239;
    public static readonly GENERAL_SYMBOL = 240;
    public static readonly GENERATED_SYMBOL = 241;
    public static readonly GROUP_REPLICATION_SYMBOL = 242;
    public static readonly GEOMETRYCOLLECTION_SYMBOL = 243;
    public static readonly GEOMETRY_SYMBOL = 244;
    public static readonly GET_FORMAT_SYMBOL = 245;
    public static readonly GLOBAL_SYMBOL = 246;
    public static readonly GRANT_SYMBOL = 247;
    public static readonly GRANTS_SYMBOL = 248;
    public static readonly GROUP_SYMBOL = 249;
    public static readonly GROUP_CONCAT_SYMBOL = 250;
    public static readonly HANDLER_SYMBOL = 251;
    public static readonly HASH_SYMBOL = 252;
    public static readonly HAVING_SYMBOL = 253;
    public static readonly HELP_SYMBOL = 254;
    public static readonly HIGH_PRIORITY_SYMBOL = 255;
    public static readonly HOST_SYMBOL = 256;
    public static readonly HOSTS_SYMBOL = 257;
    public static readonly HOUR_MICROSECOND_SYMBOL = 258;
    public static readonly HOUR_MINUTE_SYMBOL = 259;
    public static readonly HOUR_SECOND_SYMBOL = 260;
    public static readonly HOUR_SYMBOL = 261;
    public static readonly IDENTIFIED_SYMBOL = 262;
    public static readonly IF_SYMBOL = 263;
    public static readonly IGNORE_SYMBOL = 264;
    public static readonly IGNORE_SERVER_IDS_SYMBOL = 265;
    public static readonly IMPORT_SYMBOL = 266;
    public static readonly INDEXES_SYMBOL = 267;
    public static readonly INDEX_SYMBOL = 268;
    public static readonly INFILE_SYMBOL = 269;
    public static readonly INITIAL_SIZE_SYMBOL = 270;
    public static readonly INNER_SYMBOL = 271;
    public static readonly INOUT_SYMBOL = 272;
    public static readonly INSENSITIVE_SYMBOL = 273;
    public static readonly INSERT_SYMBOL = 274;
    public static readonly INSERT_METHOD_SYMBOL = 275;
    public static readonly INSTANCE_SYMBOL = 276;
    public static readonly INSTALL_SYMBOL = 277;
    public static readonly INTERVAL_SYMBOL = 278;
    public static readonly INTO_SYMBOL = 279;
    public static readonly INT_SYMBOL = 280;
    public static readonly INVOKER_SYMBOL = 281;
    public static readonly IN_SYMBOL = 282;
    public static readonly IO_AFTER_GTIDS_SYMBOL = 283;
    public static readonly IO_BEFORE_GTIDS_SYMBOL = 284;
    public static readonly IO_SYMBOL = 285;
    public static readonly IPC_SYMBOL = 286;
    public static readonly IS_SYMBOL = 287;
    public static readonly ISOLATION_SYMBOL = 288;
    public static readonly ISSUER_SYMBOL = 289;
    public static readonly ITERATE_SYMBOL = 290;
    public static readonly JOIN_SYMBOL = 291;
    public static readonly JSON_SYMBOL = 292;
    public static readonly KEYS_SYMBOL = 293;
    public static readonly KEY_BLOCK_SIZE_SYMBOL = 294;
    public static readonly KEY_SYMBOL = 295;
    public static readonly KILL_SYMBOL = 296;
    public static readonly LANGUAGE_SYMBOL = 297;
    public static readonly LAST_SYMBOL = 298;
    public static readonly LEADING_SYMBOL = 299;
    public static readonly LEAVES_SYMBOL = 300;
    public static readonly LEAVE_SYMBOL = 301;
    public static readonly LEFT_SYMBOL = 302;
    public static readonly LESS_SYMBOL = 303;
    public static readonly LEVEL_SYMBOL = 304;
    public static readonly LIKE_SYMBOL = 305;
    public static readonly LIMIT_SYMBOL = 306;
    public static readonly LINEAR_SYMBOL = 307;
    public static readonly LINES_SYMBOL = 308;
    public static readonly LINESTRING_SYMBOL = 309;
    public static readonly LIST_SYMBOL = 310;
    public static readonly LOAD_SYMBOL = 311;
    public static readonly LOCAL_SYMBOL = 312;
    public static readonly LOCKS_SYMBOL = 313;
    public static readonly LOCK_SYMBOL = 314;
    public static readonly LOGFILE_SYMBOL = 315;
    public static readonly LOGS_SYMBOL = 316;
    public static readonly LONGBLOB_SYMBOL = 317;
    public static readonly LONGTEXT_SYMBOL = 318;
    public static readonly LONG_SYMBOL = 319;
    public static readonly LOOP_SYMBOL = 320;
    public static readonly LOW_PRIORITY_SYMBOL = 321;
    public static readonly MASTER_AUTO_POSITION_SYMBOL = 322;
    public static readonly MASTER_BIND_SYMBOL = 323;
    public static readonly MASTER_CONNECT_RETRY_SYMBOL = 324;
    public static readonly MASTER_DELAY_SYMBOL = 325;
    public static readonly MASTER_HOST_SYMBOL = 326;
    public static readonly MASTER_LOG_FILE_SYMBOL = 327;
    public static readonly MASTER_LOG_POS_SYMBOL = 328;
    public static readonly MASTER_PASSWORD_SYMBOL = 329;
    public static readonly MASTER_PORT_SYMBOL = 330;
    public static readonly MASTER_RETRY_COUNT_SYMBOL = 331;
    public static readonly MASTER_SSL_CAPATH_SYMBOL = 332;
    public static readonly MASTER_SSL_CA_SYMBOL = 333;
    public static readonly MASTER_SSL_CERT_SYMBOL = 334;
    public static readonly MASTER_SSL_CIPHER_SYMBOL = 335;
    public static readonly MASTER_SSL_CRL_SYMBOL = 336;
    public static readonly MASTER_SSL_CRLPATH_SYMBOL = 337;
    public static readonly MASTER_SSL_KEY_SYMBOL = 338;
    public static readonly MASTER_SSL_SYMBOL = 339;
    public static readonly MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 340;
    public static readonly MASTER_SYMBOL = 341;
    public static readonly MASTER_TLS_VERSION_SYMBOL = 342;
    public static readonly MASTER_USER_SYMBOL = 343;
    public static readonly MASTER_HEARTBEAT_PERIOD_SYMBOL = 344;
    public static readonly MATCH_SYMBOL = 345;
    public static readonly MAX_CONNECTIONS_PER_HOUR_SYMBOL = 346;
    public static readonly MAX_QUERIES_PER_HOUR_SYMBOL = 347;
    public static readonly MAX_ROWS_SYMBOL = 348;
    public static readonly MAX_SIZE_SYMBOL = 349;
    public static readonly MAX_SYMBOL = 350;
    public static readonly MAX_UPDATES_PER_HOUR_SYMBOL = 351;
    public static readonly MAX_USER_CONNECTIONS_SYMBOL = 352;
    public static readonly MAXVALUE_SYMBOL = 353;
    public static readonly MEDIUMBLOB_SYMBOL = 354;
    public static readonly MEDIUMINT_SYMBOL = 355;
    public static readonly MEDIUMTEXT_SYMBOL = 356;
    public static readonly MEDIUM_SYMBOL = 357;
    public static readonly MEMORY_SYMBOL = 358;
    public static readonly MERGE_SYMBOL = 359;
    public static readonly MESSAGE_TEXT_SYMBOL = 360;
    public static readonly MICROSECOND_SYMBOL = 361;
    public static readonly MID_SYMBOL = 362;
    public static readonly MIGRATE_SYMBOL = 363;
    public static readonly MINUTE_MICROSECOND_SYMBOL = 364;
    public static readonly MINUTE_SECOND_SYMBOL = 365;
    public static readonly MINUTE_SYMBOL = 366;
    public static readonly MIN_ROWS_SYMBOL = 367;
    public static readonly MIN_SYMBOL = 368;
    public static readonly MODE_SYMBOL = 369;
    public static readonly MODIFIES_SYMBOL = 370;
    public static readonly MODIFY_SYMBOL = 371;
    public static readonly MOD_SYMBOL = 372;
    public static readonly MONTH_SYMBOL = 373;
    public static readonly MULTILINESTRING_SYMBOL = 374;
    public static readonly MULTIPOINT_SYMBOL = 375;
    public static readonly MULTIPOLYGON_SYMBOL = 376;
    public static readonly MUTEX_SYMBOL = 377;
    public static readonly MYSQL_ERRNO_SYMBOL = 378;
    public static readonly NAMES_SYMBOL = 379;
    public static readonly NAME_SYMBOL = 380;
    public static readonly NATIONAL_SYMBOL = 381;
    public static readonly NATURAL_SYMBOL = 382;
    public static readonly NCHAR_SYMBOL = 383;
    public static readonly NDBCLUSTER_SYMBOL = 384;
    public static readonly NEVER_SYMBOL = 385;
    public static readonly NEW_SYMBOL = 386;
    public static readonly NEXT_SYMBOL = 387;
    public static readonly NODEGROUP_SYMBOL = 388;
    public static readonly NONE_SYMBOL = 389;
    public static readonly NOT_SYMBOL = 390;
    public static readonly NOW_SYMBOL = 391;
    public static readonly NO_SYMBOL = 392;
    public static readonly NO_WAIT_SYMBOL = 393;
    public static readonly NO_WRITE_TO_BINLOG_SYMBOL = 394;
    public static readonly NULL_SYMBOL = 395;
    public static readonly NUMBER_SYMBOL = 396;
    public static readonly NUMERIC_SYMBOL = 397;
    public static readonly NVARCHAR_SYMBOL = 398;
    public static readonly OFFLINE_SYMBOL = 399;
    public static readonly OFFSET_SYMBOL = 400;
    public static readonly ON_SYMBOL = 401;
    public static readonly ONE_SYMBOL = 402;
    public static readonly ONLINE_SYMBOL = 403;
    public static readonly ONLY_SYMBOL = 404;
    public static readonly OPEN_SYMBOL = 405;
    public static readonly OPTIMIZE_SYMBOL = 406;
    public static readonly OPTIMIZER_COSTS_SYMBOL = 407;
    public static readonly OPTIONS_SYMBOL = 408;
    public static readonly OPTION_SYMBOL = 409;
    public static readonly OPTIONALLY_SYMBOL = 410;
    public static readonly ORDER_SYMBOL = 411;
    public static readonly OR_SYMBOL = 412;
    public static readonly OUTER_SYMBOL = 413;
    public static readonly OUTFILE_SYMBOL = 414;
    public static readonly OUT_SYMBOL = 415;
    public static readonly OWNER_SYMBOL = 416;
    public static readonly PACK_KEYS_SYMBOL = 417;
    public static readonly PAGE_SYMBOL = 418;
    public static readonly PARSER_SYMBOL = 419;
    public static readonly PARTIAL_SYMBOL = 420;
    public static readonly PARTITIONING_SYMBOL = 421;
    public static readonly PARTITIONS_SYMBOL = 422;
    public static readonly PARTITION_SYMBOL = 423;
    public static readonly PASSWORD_SYMBOL = 424;
    public static readonly PHASE_SYMBOL = 425;
    public static readonly PLUGINS_SYMBOL = 426;
    public static readonly PLUGIN_DIR_SYMBOL = 427;
    public static readonly PLUGIN_SYMBOL = 428;
    public static readonly POINT_SYMBOL = 429;
    public static readonly POLYGON_SYMBOL = 430;
    public static readonly PORT_SYMBOL = 431;
    public static readonly POSITION_SYMBOL = 432;
    public static readonly PRECEDES_SYMBOL = 433;
    public static readonly PRECISION_SYMBOL = 434;
    public static readonly PREPARE_SYMBOL = 435;
    public static readonly PRESERVE_SYMBOL = 436;
    public static readonly PREV_SYMBOL = 437;
    public static readonly PRIMARY_SYMBOL = 438;
    public static readonly PRIVILEGES_SYMBOL = 439;
    public static readonly PROCEDURE_SYMBOL = 440;
    public static readonly PROCESS_SYMBOL = 441;
    public static readonly PROCESSLIST_SYMBOL = 442;
    public static readonly PROFILE_SYMBOL = 443;
    public static readonly PROFILES_SYMBOL = 444;
    public static readonly PROXY_SYMBOL = 445;
    public static readonly PURGE_SYMBOL = 446;
    public static readonly QUARTER_SYMBOL = 447;
    public static readonly QUERY_SYMBOL = 448;
    public static readonly QUICK_SYMBOL = 449;
    public static readonly RANGE_SYMBOL = 450;
    public static readonly READS_SYMBOL = 451;
    public static readonly READ_ONLY_SYMBOL = 452;
    public static readonly READ_SYMBOL = 453;
    public static readonly READ_WRITE_SYMBOL = 454;
    public static readonly REAL_SYMBOL = 455;
    public static readonly REBUILD_SYMBOL = 456;
    public static readonly RECOVER_SYMBOL = 457;
    public static readonly REDO_BUFFER_SIZE_SYMBOL = 458;
    public static readonly REDUNDANT_SYMBOL = 459;
    public static readonly REFERENCES_SYMBOL = 460;
    public static readonly REGEXP_SYMBOL = 461;
    public static readonly RELAY_SYMBOL = 462;
    public static readonly RELAYLOG_SYMBOL = 463;
    public static readonly RELAY_LOG_FILE_SYMBOL = 464;
    public static readonly RELAY_LOG_POS_SYMBOL = 465;
    public static readonly RELAY_THREAD_SYMBOL = 466;
    public static readonly RELEASE_SYMBOL = 467;
    public static readonly RELOAD_SYMBOL = 468;
    public static readonly REMOVE_SYMBOL = 469;
    public static readonly RENAME_SYMBOL = 470;
    public static readonly REORGANIZE_SYMBOL = 471;
    public static readonly REPAIR_SYMBOL = 472;
    public static readonly REPEATABLE_SYMBOL = 473;
    public static readonly REPEAT_SYMBOL = 474;
    public static readonly REPLACE_SYMBOL = 475;
    public static readonly REPLICATION_SYMBOL = 476;
    public static readonly REPLICATE_DO_DB_SYMBOL = 477;
    public static readonly REPLICATE_IGNORE_DB_SYMBOL = 478;
    public static readonly REPLICATE_DO_TABLE_SYMBOL = 479;
    public static readonly REPLICATE_IGNORE_TABLE_SYMBOL = 480;
    public static readonly REPLICATE_WILD_DO_TABLE_SYMBOL = 481;
    public static readonly REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 482;
    public static readonly REPLICATE_REWRITE_DB_SYMBOL = 483;
    public static readonly REQUIRE_SYMBOL = 484;
    public static readonly RESET_SYMBOL = 485;
    public static readonly RESIGNAL_SYMBOL = 486;
    public static readonly RESTORE_SYMBOL = 487;
    public static readonly RESTRICT_SYMBOL = 488;
    public static readonly RESUME_SYMBOL = 489;
    public static readonly RETURNED_SQLSTATE_SYMBOL = 490;
    public static readonly RETURNS_SYMBOL = 491;
    public static readonly RETURN_SYMBOL = 492;
    public static readonly REVERSE_SYMBOL = 493;
    public static readonly REVOKE_SYMBOL = 494;
    public static readonly RIGHT_SYMBOL = 495;
    public static readonly ROLLBACK_SYMBOL = 496;
    public static readonly ROLLUP_SYMBOL = 497;
    public static readonly ROTATE_SYMBOL = 498;
    public static readonly ROUTINE_SYMBOL = 499;
    public static readonly ROWS_SYMBOL = 500;
    public static readonly ROW_COUNT_SYMBOL = 501;
    public static readonly ROW_FORMAT_SYMBOL = 502;
    public static readonly ROW_SYMBOL = 503;
    public static readonly RTREE_SYMBOL = 504;
    public static readonly SAVEPOINT_SYMBOL = 505;
    public static readonly SCHEDULE_SYMBOL = 506;
    public static readonly SCHEMA_NAME_SYMBOL = 507;
    public static readonly SECOND_MICROSECOND_SYMBOL = 508;
    public static readonly SECOND_SYMBOL = 509;
    public static readonly SECURITY_SYMBOL = 510;
    public static readonly SELECT_SYMBOL = 511;
    public static readonly SENSITIVE_SYMBOL = 512;
    public static readonly SEPARATOR_SYMBOL = 513;
    public static readonly SERIALIZABLE_SYMBOL = 514;
    public static readonly SERIAL_SYMBOL = 515;
    public static readonly SESSION_SYMBOL = 516;
    public static readonly SERVER_SYMBOL = 517;
    public static readonly SESSION_USER_SYMBOL = 518;
    public static readonly SET_SYMBOL = 519;
    public static readonly SHARE_SYMBOL = 520;
    public static readonly SHOW_SYMBOL = 521;
    public static readonly SHUTDOWN_SYMBOL = 522;
    public static readonly SIGNAL_SYMBOL = 523;
    public static readonly SIGNED_SYMBOL = 524;
    public static readonly SIMPLE_SYMBOL = 525;
    public static readonly SLAVE_SYMBOL = 526;
    public static readonly SLOW_SYMBOL = 527;
    public static readonly SMALLINT_SYMBOL = 528;
    public static readonly SNAPSHOT_SYMBOL = 529;
    public static readonly SOCKET_SYMBOL = 530;
    public static readonly SONAME_SYMBOL = 531;
    public static readonly SOUNDS_SYMBOL = 532;
    public static readonly SOURCE_SYMBOL = 533;
    public static readonly SPATIAL_SYMBOL = 534;
    public static readonly SPECIFIC_SYMBOL = 535;
    public static readonly SQLEXCEPTION_SYMBOL = 536;
    public static readonly SQLSTATE_SYMBOL = 537;
    public static readonly SQLWARNING_SYMBOL = 538;
    public static readonly SQL_AFTER_GTIDS_SYMBOL = 539;
    public static readonly SQL_AFTER_MTS_GAPS_SYMBOL = 540;
    public static readonly SQL_BEFORE_GTIDS_SYMBOL = 541;
    public static readonly SQL_BIG_RESULT_SYMBOL = 542;
    public static readonly SQL_BUFFER_RESULT_SYMBOL = 543;
    public static readonly SQL_CALC_FOUND_ROWS_SYMBOL = 544;
    public static readonly SQL_NO_CACHE_SYMBOL = 545;
    public static readonly SQL_SMALL_RESULT_SYMBOL = 546;
    public static readonly SQL_SYMBOL = 547;
    public static readonly SQL_THREAD_SYMBOL = 548;
    public static readonly SSL_SYMBOL = 549;
    public static readonly STACKED_SYMBOL = 550;
    public static readonly STARTING_SYMBOL = 551;
    public static readonly STARTS_SYMBOL = 552;
    public static readonly START_SYMBOL = 553;
    public static readonly STATS_AUTO_RECALC_SYMBOL = 554;
    public static readonly STATS_PERSISTENT_SYMBOL = 555;
    public static readonly STATS_SAMPLE_PAGES_SYMBOL = 556;
    public static readonly STATUS_SYMBOL = 557;
    public static readonly STDDEV_SAMP_SYMBOL = 558;
    public static readonly STDDEV_SYMBOL = 559;
    public static readonly STDDEV_POP_SYMBOL = 560;
    public static readonly STD_SYMBOL = 561;
    public static readonly STOP_SYMBOL = 562;
    public static readonly STORAGE_SYMBOL = 563;
    public static readonly STORED_SYMBOL = 564;
    public static readonly STRAIGHT_JOIN_SYMBOL = 565;
    public static readonly STRING_SYMBOL = 566;
    public static readonly SUBCLASS_ORIGIN_SYMBOL = 567;
    public static readonly SUBDATE_SYMBOL = 568;
    public static readonly SUBJECT_SYMBOL = 569;
    public static readonly SUBPARTITIONS_SYMBOL = 570;
    public static readonly SUBPARTITION_SYMBOL = 571;
    public static readonly SUBSTR_SYMBOL = 572;
    public static readonly SUBSTRING_SYMBOL = 573;
    public static readonly SUM_SYMBOL = 574;
    public static readonly SUPER_SYMBOL = 575;
    public static readonly SUSPEND_SYMBOL = 576;
    public static readonly SWAPS_SYMBOL = 577;
    public static readonly SWITCHES_SYMBOL = 578;
    public static readonly SYSDATE_SYMBOL = 579;
    public static readonly SYSTEM_USER_SYMBOL = 580;
    public static readonly TABLES_SYMBOL = 581;
    public static readonly TABLESPACE_SYMBOL = 582;
    public static readonly TABLE_SYMBOL = 583;
    public static readonly TABLE_CHECKSUM_SYMBOL = 584;
    public static readonly TABLE_NAME_SYMBOL = 585;
    public static readonly TEMPORARY_SYMBOL = 586;
    public static readonly TEMPTABLE_SYMBOL = 587;
    public static readonly TERMINATED_SYMBOL = 588;
    public static readonly TEXT_SYMBOL = 589;
    public static readonly THAN_SYMBOL = 590;
    public static readonly THEN_SYMBOL = 591;
    public static readonly TIMESTAMP_SYMBOL = 592;
    public static readonly TIMESTAMPADD_SYMBOL = 593;
    public static readonly TIMESTAMPDIFF_SYMBOL = 594;
    public static readonly TIME_SYMBOL = 595;
    public static readonly TINYBLOB_SYMBOL = 596;
    public static readonly TINYINT_SYMBOL = 597;
    public static readonly TINYTEXT_SYMBOL = 598;
    public static readonly TO_SYMBOL = 599;
    public static readonly TRAILING_SYMBOL = 600;
    public static readonly TRANSACTION_SYMBOL = 601;
    public static readonly TRIGGERS_SYMBOL = 602;
    public static readonly TRIGGER_SYMBOL = 603;
    public static readonly TRIM_SYMBOL = 604;
    public static readonly TRUE_SYMBOL = 605;
    public static readonly TRUNCATE_SYMBOL = 606;
    public static readonly TYPES_SYMBOL = 607;
    public static readonly TYPE_SYMBOL = 608;
    public static readonly UDF_RETURNS_SYMBOL = 609;
    public static readonly UNCOMMITTED_SYMBOL = 610;
    public static readonly UNDEFINED_SYMBOL = 611;
    public static readonly UNDOFILE_SYMBOL = 612;
    public static readonly UNDO_BUFFER_SIZE_SYMBOL = 613;
    public static readonly UNDO_SYMBOL = 614;
    public static readonly UNICODE_SYMBOL = 615;
    public static readonly UNINSTALL_SYMBOL = 616;
    public static readonly UNION_SYMBOL = 617;
    public static readonly UNIQUE_SYMBOL = 618;
    public static readonly UNKNOWN_SYMBOL = 619;
    public static readonly UNLOCK_SYMBOL = 620;
    public static readonly UNSIGNED_SYMBOL = 621;
    public static readonly UNTIL_SYMBOL = 622;
    public static readonly UPDATE_SYMBOL = 623;
    public static readonly UPGRADE_SYMBOL = 624;
    public static readonly USAGE_SYMBOL = 625;
    public static readonly USER_RESOURCES_SYMBOL = 626;
    public static readonly USER_SYMBOL = 627;
    public static readonly USE_FRM_SYMBOL = 628;
    public static readonly USE_SYMBOL = 629;
    public static readonly USING_SYMBOL = 630;
    public static readonly UTC_DATE_SYMBOL = 631;
    public static readonly UTC_TIMESTAMP_SYMBOL = 632;
    public static readonly UTC_TIME_SYMBOL = 633;
    public static readonly VALIDATION_SYMBOL = 634;
    public static readonly VALUES_SYMBOL = 635;
    public static readonly VALUE_SYMBOL = 636;
    public static readonly VARBINARY_SYMBOL = 637;
    public static readonly VARCHAR_SYMBOL = 638;
    public static readonly VARIABLES_SYMBOL = 639;
    public static readonly VARIANCE_SYMBOL = 640;
    public static readonly VARYING_SYMBOL = 641;
    public static readonly VAR_POP_SYMBOL = 642;
    public static readonly VAR_SAMP_SYMBOL = 643;
    public static readonly VIEW_SYMBOL = 644;
    public static readonly VIRTUAL_SYMBOL = 645;
    public static readonly WAIT_SYMBOL = 646;
    public static readonly WARNINGS_SYMBOL = 647;
    public static readonly WEEK_SYMBOL = 648;
    public static readonly WEIGHT_STRING_SYMBOL = 649;
    public static readonly WHEN_SYMBOL = 650;
    public static readonly WHERE_SYMBOL = 651;
    public static readonly WHILE_SYMBOL = 652;
    public static readonly WITH_SYMBOL = 653;
    public static readonly WITHOUT_SYMBOL = 654;
    public static readonly WORK_SYMBOL = 655;
    public static readonly WRAPPER_SYMBOL = 656;
    public static readonly WRITE_SYMBOL = 657;
    public static readonly X509_SYMBOL = 658;
    public static readonly XA_SYMBOL = 659;
    public static readonly XID_SYMBOL = 660;
    public static readonly XML_SYMBOL = 661;
    public static readonly XOR_SYMBOL = 662;
    public static readonly YEAR_MONTH_SYMBOL = 663;
    public static readonly YEAR_SYMBOL = 664;
    public static readonly ZEROFILL_SYMBOL = 665;
    public static readonly PERSIST_SYMBOL = 666;
    public static readonly ROLE_SYMBOL = 667;
    public static readonly ADMIN_SYMBOL = 668;
    public static readonly INVISIBLE_SYMBOL = 669;
    public static readonly VISIBLE_SYMBOL = 670;
    public static readonly EXCEPT_SYMBOL = 671;
    public static readonly COMPONENT_SYMBOL = 672;
    public static readonly RECURSIVE_SYMBOL = 673;
    public static readonly JSON_OBJECTAGG_SYMBOL = 674;
    public static readonly JSON_ARRAYAGG_SYMBOL = 675;
    public static readonly OF_SYMBOL = 676;
    public static readonly SKIP_SYMBOL = 677;
    public static readonly LOCKED_SYMBOL = 678;
    public static readonly NOWAIT_SYMBOL = 679;
    public static readonly GROUPING_SYMBOL = 680;
    public static readonly PERSIST_ONLY_SYMBOL = 681;
    public static readonly HISTOGRAM_SYMBOL = 682;
    public static readonly BUCKETS_SYMBOL = 683;
    public static readonly REMOTE_SYMBOL = 684;
    public static readonly CLONE_SYMBOL = 685;
    public static readonly CUME_DIST_SYMBOL = 686;
    public static readonly DENSE_RANK_SYMBOL = 687;
    public static readonly EXCLUDE_SYMBOL = 688;
    public static readonly FIRST_VALUE_SYMBOL = 689;
    public static readonly FOLLOWING_SYMBOL = 690;
    public static readonly GROUPS_SYMBOL = 691;
    public static readonly LAG_SYMBOL = 692;
    public static readonly LAST_VALUE_SYMBOL = 693;
    public static readonly LEAD_SYMBOL = 694;
    public static readonly NTH_VALUE_SYMBOL = 695;
    public static readonly NTILE_SYMBOL = 696;
    public static readonly NULLS_SYMBOL = 697;
    public static readonly OTHERS_SYMBOL = 698;
    public static readonly OVER_SYMBOL = 699;
    public static readonly PERCENT_RANK_SYMBOL = 700;
    public static readonly PRECEDING_SYMBOL = 701;
    public static readonly RANK_SYMBOL = 702;
    public static readonly RESPECT_SYMBOL = 703;
    public static readonly ROW_NUMBER_SYMBOL = 704;
    public static readonly TIES_SYMBOL = 705;
    public static readonly UNBOUNDED_SYMBOL = 706;
    public static readonly WINDOW_SYMBOL = 707;
    public static readonly EMPTY_SYMBOL = 708;
    public static readonly JSON_TABLE_SYMBOL = 709;
    public static readonly NESTED_SYMBOL = 710;
    public static readonly ORDINALITY_SYMBOL = 711;
    public static readonly PATH_SYMBOL = 712;
    public static readonly HISTORY_SYMBOL = 713;
    public static readonly REUSE_SYMBOL = 714;
    public static readonly SRID_SYMBOL = 715;
    public static readonly THREAD_PRIORITY_SYMBOL = 716;
    public static readonly RESOURCE_SYMBOL = 717;
    public static readonly SYSTEM_SYMBOL = 718;
    public static readonly VCPU_SYMBOL = 719;
    public static readonly MASTER_PUBLIC_KEY_PATH_SYMBOL = 720;
    public static readonly GET_MASTER_PUBLIC_KEY_SYMBOL = 721;
    public static readonly RESTART_SYMBOL = 722;
    public static readonly DEFINITION_SYMBOL = 723;
    public static readonly DESCRIPTION_SYMBOL = 724;
    public static readonly ORGANIZATION_SYMBOL = 725;
    public static readonly REFERENCE_SYMBOL = 726;
    public static readonly OPTIONAL_SYMBOL = 727;
    public static readonly SECONDARY_SYMBOL = 728;
    public static readonly SECONDARY_ENGINE_SYMBOL = 729;
    public static readonly SECONDARY_LOAD_SYMBOL = 730;
    public static readonly SECONDARY_UNLOAD_SYMBOL = 731;
    public static readonly ACTIVE_SYMBOL = 732;
    public static readonly INACTIVE_SYMBOL = 733;
    public static readonly LATERAL_SYMBOL = 734;
    public static readonly RETAIN_SYMBOL = 735;
    public static readonly OLD_SYMBOL = 736;
    public static readonly NETWORK_NAMESPACE_SYMBOL = 737;
    public static readonly ENFORCED_SYMBOL = 738;
    public static readonly ARRAY_SYMBOL = 739;
    public static readonly OJ_SYMBOL = 740;
    public static readonly MEMBER_SYMBOL = 741;
    public static readonly RANDOM_SYMBOL = 742;
    public static readonly MASTER_COMPRESSION_ALGORITHM_SYMBOL = 743;
    public static readonly MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 744;
    public static readonly PRIVILEGE_CHECKS_USER_SYMBOL = 745;
    public static readonly MASTER_TLS_CIPHERSUITES_SYMBOL = 746;
    public static readonly REQUIRE_ROW_FORMAT_SYMBOL = 747;
    public static readonly PASSWORD_LOCK_TIME_SYMBOL = 748;
    public static readonly FAILED_LOGIN_ATTEMPTS_SYMBOL = 749;
    public static readonly REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL = 750;
    public static readonly STREAM_SYMBOL = 751;
    public static readonly OFF_SYMBOL = 752;
    public static readonly RETURNING_SYMBOL = 753;
    public static readonly JSON_VALUE_SYMBOL = 754;
    public static readonly TLS_SYMBOL = 755;
    public static readonly ATTRIBUTE_SYMBOL = 756;
    public static readonly ENGINE_ATTRIBUTE_SYMBOL = 757;
    public static readonly SECONDARY_ENGINE_ATTRIBUTE_SYMBOL = 758;
    public static readonly SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL = 759;
    public static readonly ZONE_SYMBOL = 760;
    public static readonly GRAMMAR_SELECTOR_DERIVED_EXPR = 761;
    public static readonly REPLICA_SYMBOL = 762;
    public static readonly REPLICAS_SYMBOL = 763;
    public static readonly ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL = 764;
    public static readonly GET_SOURCE_PUBLIC_KEY_SYMBOL = 765;
    public static readonly SOURCE_AUTO_POSITION_SYMBOL = 766;
    public static readonly SOURCE_BIND_SYMBOL = 767;
    public static readonly SOURCE_COMPRESSION_ALGORITHM_SYMBOL = 768;
    public static readonly SOURCE_CONNECT_RETRY_SYMBOL = 769;
    public static readonly SOURCE_DELAY_SYMBOL = 770;
    public static readonly SOURCE_HEARTBEAT_PERIOD_SYMBOL = 771;
    public static readonly SOURCE_HOST_SYMBOL = 772;
    public static readonly SOURCE_LOG_FILE_SYMBOL = 773;
    public static readonly SOURCE_LOG_POS_SYMBOL = 774;
    public static readonly SOURCE_PASSWORD_SYMBOL = 775;
    public static readonly SOURCE_PORT_SYMBOL = 776;
    public static readonly SOURCE_PUBLIC_KEY_PATH_SYMBOL = 777;
    public static readonly SOURCE_RETRY_COUNT_SYMBOL = 778;
    public static readonly SOURCE_SSL_SYMBOL = 779;
    public static readonly SOURCE_SSL_CA_SYMBOL = 780;
    public static readonly SOURCE_SSL_CAPATH_SYMBOL = 781;
    public static readonly SOURCE_SSL_CERT_SYMBOL = 782;
    public static readonly SOURCE_SSL_CIPHER_SYMBOL = 783;
    public static readonly SOURCE_SSL_CRL_SYMBOL = 784;
    public static readonly SOURCE_SSL_CRLPATH_SYMBOL = 785;
    public static readonly SOURCE_SSL_KEY_SYMBOL = 786;
    public static readonly SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL = 787;
    public static readonly SOURCE_TLS_CIPHERSUITES_SYMBOL = 788;
    public static readonly SOURCE_TLS_VERSION_SYMBOL = 789;
    public static readonly SOURCE_USER_SYMBOL = 790;
    public static readonly SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL = 791;
    public static readonly ST_COLLECT_SYMBOL = 792;
    public static readonly KEYRING_SYMBOL = 793;
    public static readonly AUTHENTICATION_SYMBOL = 794;
    public static readonly FACTOR_SYMBOL = 795;
    public static readonly FINISH_SYMBOL = 796;
    public static readonly INITIATE_SYMBOL = 797;
    public static readonly REGISTRATION_SYMBOL = 798;
    public static readonly UNREGISTER_SYMBOL = 799;
    public static readonly INITIAL_SYMBOL = 800;
    public static readonly CHALLENGE_RESPONSE_SYMBOL = 801;
    public static readonly GTID_ONLY_SYMBOL = 802;
    public static readonly INTERSECT_SYMBOL = 803;
    public static readonly BULK_SYMBOL = 804;
    public static readonly URL_SYMBOL = 805;
    public static readonly GENERATE_SYMBOL = 806;
    public static readonly PARSE_TREE_SYMBOL = 807;
    public static readonly LOG_SYMBOL = 808;
    public static readonly GTIDS_SYMBOL = 809;
    public static readonly PARALLEL_SYMBOL = 810;
    public static readonly S3_SYMBOL = 811;
    public static readonly QUALIFY_SYMBOL = 812;
    public static readonly AUTO_SYMBOL = 813;
    public static readonly MANUAL_SYMBOL = 814;
    public static readonly BENROULLI_SYMBOL = 815;
    public static readonly TABLESAMPLE_SYMBOL = 816;
    public static readonly WHITESPACE = 817;
    public static readonly INVALID_INPUT = 818;
    public static readonly UNDERSCORE_CHARSET = 819;
    public static readonly IDENTIFIER = 820;
    public static readonly NCHAR_TEXT = 821;
    public static readonly BACK_TICK_QUOTED_ID = 822;
    public static readonly DOUBLE_QUOTED_TEXT = 823;
    public static readonly SINGLE_QUOTED_TEXT = 824;
    public static readonly DOLLAR_QUOTED_STRING_TEXT = 825;
    public static readonly VERSION_COMMENT_START = 826;
    public static readonly MYSQL_COMMENT_START = 827;
    public static readonly VERSION_COMMENT_END = 828;
    public static readonly BLOCK_COMMENT = 829;
    public static readonly INVALID_BLOCK_COMMENT = 830;
    public static readonly POUND_COMMENT = 831;
    public static readonly DASHDASH_COMMENT = 832;
    public static readonly NOT_EQUAL2_OPERATOR = 833;
    public static readonly EOF = Token.EOF;
    public static readonly RULE_query = 0;
    public static readonly RULE_simpleStatement = 1;
    public static readonly RULE_alterStatement = 2;
    public static readonly RULE_alterDatabase = 3;
    public static readonly RULE_alterDatabaseOption = 4;
    public static readonly RULE_alterEvent = 5;
    public static readonly RULE_alterLogfileGroup = 6;
    public static readonly RULE_alterLogfileGroupOptions = 7;
    public static readonly RULE_alterLogfileGroupOption = 8;
    public static readonly RULE_alterServer = 9;
    public static readonly RULE_alterTable = 10;
    public static readonly RULE_alterTableActions = 11;
    public static readonly RULE_alterCommandList = 12;
    public static readonly RULE_alterCommandsModifierList = 13;
    public static readonly RULE_standaloneAlterCommands = 14;
    public static readonly RULE_alterPartition = 15;
    public static readonly RULE_alterList = 16;
    public static readonly RULE_alterCommandsModifier = 17;
    public static readonly RULE_alterListItem = 18;
    public static readonly RULE_place = 19;
    public static readonly RULE_restrict = 20;
    public static readonly RULE_alterOrderList = 21;
    public static readonly RULE_alterAlgorithmOption = 22;
    public static readonly RULE_alterLockOption = 23;
    public static readonly RULE_indexLockAndAlgorithm = 24;
    public static readonly RULE_withValidation = 25;
    public static readonly RULE_removePartitioning = 26;
    public static readonly RULE_allOrPartitionNameList = 27;
    public static readonly RULE_alterTablespace = 28;
    public static readonly RULE_alterUndoTablespace = 29;
    public static readonly RULE_undoTableSpaceOptions = 30;
    public static readonly RULE_undoTableSpaceOption = 31;
    public static readonly RULE_alterTablespaceOptions = 32;
    public static readonly RULE_alterTablespaceOption = 33;
    public static readonly RULE_changeTablespaceOption = 34;
    public static readonly RULE_alterView = 35;
    public static readonly RULE_viewTail = 36;
    public static readonly RULE_viewQueryBlock = 37;
    public static readonly RULE_viewCheckOption = 38;
    public static readonly RULE_alterInstanceStatement = 39;
    public static readonly RULE_createStatement = 40;
    public static readonly RULE_createDatabase = 41;
    public static readonly RULE_createDatabaseOption = 42;
    public static readonly RULE_createTable = 43;
    public static readonly RULE_tableElementList = 44;
    public static readonly RULE_tableElement = 45;
    public static readonly RULE_duplicateAsQe = 46;
    public static readonly RULE_asCreateQueryExpression = 47;
    public static readonly RULE_queryExpressionOrParens = 48;
    public static readonly RULE_queryExpressionWithOptLockingClauses = 49;
    public static readonly RULE_createRoutine = 50;
    public static readonly RULE_createProcedure = 51;
    public static readonly RULE_routineString = 52;
    public static readonly RULE_storedRoutineBody = 53;
    public static readonly RULE_createFunction = 54;
    public static readonly RULE_createUdf = 55;
    public static readonly RULE_routineCreateOption = 56;
    public static readonly RULE_routineAlterOptions = 57;
    public static readonly RULE_routineOption = 58;
    public static readonly RULE_createIndex = 59;
    public static readonly RULE_indexNameAndType = 60;
    public static readonly RULE_createIndexTarget = 61;
    public static readonly RULE_createLogfileGroup = 62;
    public static readonly RULE_logfileGroupOptions = 63;
    public static readonly RULE_logfileGroupOption = 64;
    public static readonly RULE_createServer = 65;
    public static readonly RULE_serverOptions = 66;
    public static readonly RULE_serverOption = 67;
    public static readonly RULE_createTablespace = 68;
    public static readonly RULE_createUndoTablespace = 69;
    public static readonly RULE_tsDataFileName = 70;
    public static readonly RULE_tsDataFile = 71;
    public static readonly RULE_tablespaceOptions = 72;
    public static readonly RULE_tablespaceOption = 73;
    public static readonly RULE_tsOptionInitialSize = 74;
    public static readonly RULE_tsOptionUndoRedoBufferSize = 75;
    public static readonly RULE_tsOptionAutoextendSize = 76;
    public static readonly RULE_tsOptionMaxSize = 77;
    public static readonly RULE_tsOptionExtentSize = 78;
    public static readonly RULE_tsOptionNodegroup = 79;
    public static readonly RULE_tsOptionEngine = 80;
    public static readonly RULE_tsOptionWait = 81;
    public static readonly RULE_tsOptionComment = 82;
    public static readonly RULE_tsOptionFileblockSize = 83;
    public static readonly RULE_tsOptionEncryption = 84;
    public static readonly RULE_tsOptionEngineAttribute = 85;
    public static readonly RULE_createView = 86;
    public static readonly RULE_viewReplaceOrAlgorithm = 87;
    public static readonly RULE_viewAlgorithm = 88;
    public static readonly RULE_viewSuid = 89;
    public static readonly RULE_createTrigger = 90;
    public static readonly RULE_triggerFollowsPrecedesClause = 91;
    public static readonly RULE_createEvent = 92;
    public static readonly RULE_createRole = 93;
    public static readonly RULE_createSpatialReference = 94;
    public static readonly RULE_srsAttribute = 95;
    public static readonly RULE_dropStatement = 96;
    public static readonly RULE_dropDatabase = 97;
    public static readonly RULE_dropEvent = 98;
    public static readonly RULE_dropFunction = 99;
    public static readonly RULE_dropProcedure = 100;
    public static readonly RULE_dropIndex = 101;
    public static readonly RULE_dropLogfileGroup = 102;
    public static readonly RULE_dropLogfileGroupOption = 103;
    public static readonly RULE_dropServer = 104;
    public static readonly RULE_dropTable = 105;
    public static readonly RULE_dropTableSpace = 106;
    public static readonly RULE_dropTrigger = 107;
    public static readonly RULE_dropView = 108;
    public static readonly RULE_dropRole = 109;
    public static readonly RULE_dropSpatialReference = 110;
    public static readonly RULE_dropUndoTablespace = 111;
    public static readonly RULE_renameTableStatement = 112;
    public static readonly RULE_renamePair = 113;
    public static readonly RULE_truncateTableStatement = 114;
    public static readonly RULE_importStatement = 115;
    public static readonly RULE_callStatement = 116;
    public static readonly RULE_deleteStatement = 117;
    public static readonly RULE_partitionDelete = 118;
    public static readonly RULE_deleteStatementOption = 119;
    public static readonly RULE_doStatement = 120;
    public static readonly RULE_handlerStatement = 121;
    public static readonly RULE_handlerReadOrScan = 122;
    public static readonly RULE_insertStatement = 123;
    public static readonly RULE_insertLockOption = 124;
    public static readonly RULE_insertFromConstructor = 125;
    public static readonly RULE_fields = 126;
    public static readonly RULE_insertValues = 127;
    public static readonly RULE_insertQueryExpression = 128;
    public static readonly RULE_valueList = 129;
    public static readonly RULE_values = 130;
    public static readonly RULE_valuesReference = 131;
    public static readonly RULE_insertUpdateList = 132;
    public static readonly RULE_loadStatement = 133;
    public static readonly RULE_dataOrXml = 134;
    public static readonly RULE_loadDataLock = 135;
    public static readonly RULE_loadFrom = 136;
    public static readonly RULE_loadSourceType = 137;
    public static readonly RULE_sourceCount = 138;
    public static readonly RULE_sourceOrder = 139;
    public static readonly RULE_xmlRowsIdentifiedBy = 140;
    public static readonly RULE_loadDataFileTail = 141;
    public static readonly RULE_loadDataFileTargetList = 142;
    public static readonly RULE_fieldOrVariableList = 143;
    public static readonly RULE_loadAlgorithm = 144;
    public static readonly RULE_loadParallel = 145;
    public static readonly RULE_loadMemory = 146;
    public static readonly RULE_replaceStatement = 147;
    public static readonly RULE_selectStatement = 148;
    public static readonly RULE_selectStatementWithInto = 149;
    public static readonly RULE_queryExpression = 150;
    public static readonly RULE_queryExpressionBody = 151;
    public static readonly RULE_queryExpressionParens = 152;
    public static readonly RULE_queryPrimary = 153;
    public static readonly RULE_querySpecification = 154;
    public static readonly RULE_subquery = 155;
    public static readonly RULE_querySpecOption = 156;
    public static readonly RULE_limitClause = 157;
    public static readonly RULE_simpleLimitClause = 158;
    public static readonly RULE_limitOptions = 159;
    public static readonly RULE_limitOption = 160;
    public static readonly RULE_intoClause = 161;
    public static readonly RULE_procedureAnalyseClause = 162;
    public static readonly RULE_havingClause = 163;
    public static readonly RULE_qualifyClause = 164;
    public static readonly RULE_windowClause = 165;
    public static readonly RULE_windowDefinition = 166;
    public static readonly RULE_windowSpec = 167;
    public static readonly RULE_windowSpecDetails = 168;
    public static readonly RULE_windowFrameClause = 169;
    public static readonly RULE_windowFrameUnits = 170;
    public static readonly RULE_windowFrameExtent = 171;
    public static readonly RULE_windowFrameStart = 172;
    public static readonly RULE_windowFrameBetween = 173;
    public static readonly RULE_windowFrameBound = 174;
    public static readonly RULE_windowFrameExclusion = 175;
    public static readonly RULE_withClause = 176;
    public static readonly RULE_commonTableExpression = 177;
    public static readonly RULE_groupByClause = 178;
    public static readonly RULE_olapOption = 179;
    public static readonly RULE_orderClause = 180;
    public static readonly RULE_direction = 181;
    public static readonly RULE_fromClause = 182;
    public static readonly RULE_tableReferenceList = 183;
    public static readonly RULE_tableValueConstructor = 184;
    public static readonly RULE_explicitTable = 185;
    public static readonly RULE_rowValueExplicit = 186;
    public static readonly RULE_selectOption = 187;
    public static readonly RULE_lockingClauseList = 188;
    public static readonly RULE_lockingClause = 189;
    public static readonly RULE_lockStrengh = 190;
    public static readonly RULE_lockedRowAction = 191;
    public static readonly RULE_selectItemList = 192;
    public static readonly RULE_selectItem = 193;
    public static readonly RULE_selectAlias = 194;
    public static readonly RULE_whereClause = 195;
    public static readonly RULE_tableReference = 196;
    public static readonly RULE_escapedTableReference = 197;
    public static readonly RULE_joinedTable = 198;
    public static readonly RULE_naturalJoinType = 199;
    public static readonly RULE_innerJoinType = 200;
    public static readonly RULE_outerJoinType = 201;
    public static readonly RULE_tableFactor = 202;
    public static readonly RULE_singleTable = 203;
    public static readonly RULE_singleTableParens = 204;
    public static readonly RULE_derivedTable = 205;
    public static readonly RULE_tableReferenceListParens = 206;
    public static readonly RULE_tableFunction = 207;
    public static readonly RULE_columnsClause = 208;
    public static readonly RULE_jtColumn = 209;
    public static readonly RULE_onEmptyOrError = 210;
    public static readonly RULE_onEmptyOrErrorJsonTable = 211;
    public static readonly RULE_onEmpty = 212;
    public static readonly RULE_onError = 213;
    public static readonly RULE_jsonOnResponse = 214;
    public static readonly RULE_unionOption = 215;
    public static readonly RULE_tableAlias = 216;
    public static readonly RULE_indexHintList = 217;
    public static readonly RULE_indexHint = 218;
    public static readonly RULE_indexHintType = 219;
    public static readonly RULE_keyOrIndex = 220;
    public static readonly RULE_constraintKeyType = 221;
    public static readonly RULE_indexHintClause = 222;
    public static readonly RULE_indexList = 223;
    public static readonly RULE_indexListElement = 224;
    public static readonly RULE_updateStatement = 225;
    public static readonly RULE_transactionOrLockingStatement = 226;
    public static readonly RULE_transactionStatement = 227;
    public static readonly RULE_beginWork = 228;
    public static readonly RULE_startTransactionOptionList = 229;
    public static readonly RULE_savepointStatement = 230;
    public static readonly RULE_lockStatement = 231;
    public static readonly RULE_lockItem = 232;
    public static readonly RULE_lockOption = 233;
    public static readonly RULE_xaStatement = 234;
    public static readonly RULE_xaConvert = 235;
    public static readonly RULE_xid = 236;
    public static readonly RULE_replicationStatement = 237;
    public static readonly RULE_purgeOptions = 238;
    public static readonly RULE_resetOption = 239;
    public static readonly RULE_masterOrBinaryLogsAndGtids = 240;
    public static readonly RULE_sourceResetOptions = 241;
    public static readonly RULE_replicationLoad = 242;
    public static readonly RULE_changeReplicationSource = 243;
    public static readonly RULE_changeSource = 244;
    public static readonly RULE_sourceDefinitions = 245;
    public static readonly RULE_sourceDefinition = 246;
    public static readonly RULE_changeReplicationSourceAutoPosition = 247;
    public static readonly RULE_changeReplicationSourceHost = 248;
    public static readonly RULE_changeReplicationSourceBind = 249;
    public static readonly RULE_changeReplicationSourceUser = 250;
    public static readonly RULE_changeReplicationSourcePassword = 251;
    public static readonly RULE_changeReplicationSourcePort = 252;
    public static readonly RULE_changeReplicationSourceConnectRetry = 253;
    public static readonly RULE_changeReplicationSourceRetryCount = 254;
    public static readonly RULE_changeReplicationSourceDelay = 255;
    public static readonly RULE_changeReplicationSourceSSL = 256;
    public static readonly RULE_changeReplicationSourceSSLCA = 257;
    public static readonly RULE_changeReplicationSourceSSLCApath = 258;
    public static readonly RULE_changeReplicationSourceSSLCipher = 259;
    public static readonly RULE_changeReplicationSourceSSLCLR = 260;
    public static readonly RULE_changeReplicationSourceSSLCLRpath = 261;
    public static readonly RULE_changeReplicationSourceSSLKey = 262;
    public static readonly RULE_changeReplicationSourceSSLVerifyServerCert = 263;
    public static readonly RULE_changeReplicationSourceTLSVersion = 264;
    public static readonly RULE_changeReplicationSourceTLSCiphersuites = 265;
    public static readonly RULE_changeReplicationSourceSSLCert = 266;
    public static readonly RULE_changeReplicationSourcePublicKey = 267;
    public static readonly RULE_changeReplicationSourceGetSourcePublicKey = 268;
    public static readonly RULE_changeReplicationSourceHeartbeatPeriod = 269;
    public static readonly RULE_changeReplicationSourceCompressionAlgorithm = 270;
    public static readonly RULE_changeReplicationSourceZstdCompressionLevel = 271;
    public static readonly RULE_privilegeCheckDef = 272;
    public static readonly RULE_tablePrimaryKeyCheckDef = 273;
    public static readonly RULE_assignGtidsToAnonymousTransactionsDefinition = 274;
    public static readonly RULE_sourceTlsCiphersuitesDef = 275;
    public static readonly RULE_sourceFileDef = 276;
    public static readonly RULE_sourceLogFile = 277;
    public static readonly RULE_sourceLogPos = 278;
    public static readonly RULE_serverIdList = 279;
    public static readonly RULE_changeReplication = 280;
    public static readonly RULE_filterDefinition = 281;
    public static readonly RULE_filterDbList = 282;
    public static readonly RULE_filterTableList = 283;
    public static readonly RULE_filterStringList = 284;
    public static readonly RULE_filterWildDbTableString = 285;
    public static readonly RULE_filterDbPairList = 286;
    public static readonly RULE_startReplicaStatement = 287;
    public static readonly RULE_stopReplicaStatement = 288;
    public static readonly RULE_replicaUntil = 289;
    public static readonly RULE_userOption = 290;
    public static readonly RULE_passwordOption = 291;
    public static readonly RULE_defaultAuthOption = 292;
    public static readonly RULE_pluginDirOption = 293;
    public static readonly RULE_replicaThreadOptions = 294;
    public static readonly RULE_replicaThreadOption = 295;
    public static readonly RULE_groupReplication = 296;
    public static readonly RULE_groupReplicationStartOptions = 297;
    public static readonly RULE_groupReplicationStartOption = 298;
    public static readonly RULE_groupReplicationUser = 299;
    public static readonly RULE_groupReplicationPassword = 300;
    public static readonly RULE_groupReplicationPluginAuth = 301;
    public static readonly RULE_replica = 302;
    public static readonly RULE_preparedStatement = 303;
    public static readonly RULE_executeStatement = 304;
    public static readonly RULE_executeVarList = 305;
    public static readonly RULE_cloneStatement = 306;
    public static readonly RULE_dataDirSSL = 307;
    public static readonly RULE_ssl = 308;
    public static readonly RULE_accountManagementStatement = 309;
    public static readonly RULE_alterUserStatement = 310;
    public static readonly RULE_alterUserList = 311;
    public static readonly RULE_alterUser = 312;
    public static readonly RULE_oldAlterUser = 313;
    public static readonly RULE_userFunction = 314;
    public static readonly RULE_createUserStatement = 315;
    public static readonly RULE_createUserTail = 316;
    public static readonly RULE_userAttributes = 317;
    public static readonly RULE_defaultRoleClause = 318;
    public static readonly RULE_requireClause = 319;
    public static readonly RULE_connectOptions = 320;
    public static readonly RULE_accountLockPasswordExpireOptions = 321;
    public static readonly RULE_userAttribute = 322;
    public static readonly RULE_dropUserStatement = 323;
    public static readonly RULE_grantStatement = 324;
    public static readonly RULE_grantTargetList = 325;
    public static readonly RULE_grantOptions = 326;
    public static readonly RULE_exceptRoleList = 327;
    public static readonly RULE_withRoles = 328;
    public static readonly RULE_grantAs = 329;
    public static readonly RULE_versionedRequireClause = 330;
    public static readonly RULE_renameUserStatement = 331;
    public static readonly RULE_revokeStatement = 332;
    public static readonly RULE_aclType = 333;
    public static readonly RULE_roleOrPrivilegesList = 334;
    public static readonly RULE_roleOrPrivilege = 335;
    public static readonly RULE_grantIdentifier = 336;
    public static readonly RULE_requireList = 337;
    public static readonly RULE_requireListElement = 338;
    public static readonly RULE_grantOption = 339;
    public static readonly RULE_setRoleStatement = 340;
    public static readonly RULE_roleList = 341;
    public static readonly RULE_role = 342;
    public static readonly RULE_tableAdministrationStatement = 343;
    public static readonly RULE_histogramAutoUpdate = 344;
    public static readonly RULE_histogramUpdateParam = 345;
    public static readonly RULE_histogramNumBuckets = 346;
    public static readonly RULE_histogram = 347;
    public static readonly RULE_checkOption = 348;
    public static readonly RULE_repairType = 349;
    public static readonly RULE_uninstallStatement = 350;
    public static readonly RULE_installStatement = 351;
    public static readonly RULE_installOptionType = 352;
    public static readonly RULE_installSetRvalue = 353;
    public static readonly RULE_installSetValue = 354;
    public static readonly RULE_installSetValueList = 355;
    public static readonly RULE_setStatement = 356;
    public static readonly RULE_startOptionValueList = 357;
    public static readonly RULE_transactionCharacteristics = 358;
    public static readonly RULE_transactionAccessMode = 359;
    public static readonly RULE_isolationLevel = 360;
    public static readonly RULE_optionValueListContinued = 361;
    public static readonly RULE_optionValueNoOptionType = 362;
    public static readonly RULE_optionValue = 363;
    public static readonly RULE_setSystemVariable = 364;
    public static readonly RULE_startOptionValueListFollowingOptionType = 365;
    public static readonly RULE_optionValueFollowingOptionType = 366;
    public static readonly RULE_setExprOrDefault = 367;
    public static readonly RULE_showDatabasesStatement = 368;
    public static readonly RULE_showTablesStatement = 369;
    public static readonly RULE_showTriggersStatement = 370;
    public static readonly RULE_showEventsStatement = 371;
    public static readonly RULE_showTableStatusStatement = 372;
    public static readonly RULE_showOpenTablesStatement = 373;
    public static readonly RULE_showParseTreeStatement = 374;
    public static readonly RULE_showPluginsStatement = 375;
    public static readonly RULE_showEngineLogsStatement = 376;
    public static readonly RULE_showEngineMutexStatement = 377;
    public static readonly RULE_showEngineStatusStatement = 378;
    public static readonly RULE_showColumnsStatement = 379;
    public static readonly RULE_showBinaryLogsStatement = 380;
    public static readonly RULE_showBinaryLogStatusStatement = 381;
    public static readonly RULE_showReplicasStatement = 382;
    public static readonly RULE_showBinlogEventsStatement = 383;
    public static readonly RULE_showRelaylogEventsStatement = 384;
    public static readonly RULE_showKeysStatement = 385;
    public static readonly RULE_showEnginesStatement = 386;
    public static readonly RULE_showCountWarningsStatement = 387;
    public static readonly RULE_showCountErrorsStatement = 388;
    public static readonly RULE_showWarningsStatement = 389;
    public static readonly RULE_showErrorsStatement = 390;
    public static readonly RULE_showProfilesStatement = 391;
    public static readonly RULE_showProfileStatement = 392;
    public static readonly RULE_showStatusStatement = 393;
    public static readonly RULE_showProcessListStatement = 394;
    public static readonly RULE_showVariablesStatement = 395;
    public static readonly RULE_showCharacterSetStatement = 396;
    public static readonly RULE_showCollationStatement = 397;
    public static readonly RULE_showPrivilegesStatement = 398;
    public static readonly RULE_showGrantsStatement = 399;
    public static readonly RULE_showCreateDatabaseStatement = 400;
    public static readonly RULE_showCreateTableStatement = 401;
    public static readonly RULE_showCreateViewStatement = 402;
    public static readonly RULE_showMasterStatusStatement = 403;
    public static readonly RULE_showReplicaStatusStatement = 404;
    public static readonly RULE_showCreateProcedureStatement = 405;
    public static readonly RULE_showCreateFunctionStatement = 406;
    public static readonly RULE_showCreateTriggerStatement = 407;
    public static readonly RULE_showCreateProcedureStatusStatement = 408;
    public static readonly RULE_showCreateFunctionStatusStatement = 409;
    public static readonly RULE_showCreateProcedureCodeStatement = 410;
    public static readonly RULE_showCreateFunctionCodeStatement = 411;
    public static readonly RULE_showCreateEventStatement = 412;
    public static readonly RULE_showCreateUserStatement = 413;
    public static readonly RULE_showCommandType = 414;
    public static readonly RULE_engineOrAll = 415;
    public static readonly RULE_fromOrIn = 416;
    public static readonly RULE_inDb = 417;
    public static readonly RULE_profileDefinitions = 418;
    public static readonly RULE_profileDefinition = 419;
    public static readonly RULE_otherAdministrativeStatement = 420;
    public static readonly RULE_keyCacheListOrParts = 421;
    public static readonly RULE_keyCacheList = 422;
    public static readonly RULE_assignToKeycache = 423;
    public static readonly RULE_assignToKeycachePartition = 424;
    public static readonly RULE_cacheKeyList = 425;
    public static readonly RULE_keyUsageElement = 426;
    public static readonly RULE_keyUsageList = 427;
    public static readonly RULE_flushOption = 428;
    public static readonly RULE_logType = 429;
    public static readonly RULE_flushTables = 430;
    public static readonly RULE_flushTablesOptions = 431;
    public static readonly RULE_preloadTail = 432;
    public static readonly RULE_preloadList = 433;
    public static readonly RULE_preloadKeys = 434;
    public static readonly RULE_adminPartition = 435;
    public static readonly RULE_resourceGroupManagement = 436;
    public static readonly RULE_createResourceGroup = 437;
    public static readonly RULE_resourceGroupVcpuList = 438;
    public static readonly RULE_vcpuNumOrRange = 439;
    public static readonly RULE_resourceGroupPriority = 440;
    public static readonly RULE_resourceGroupEnableDisable = 441;
    public static readonly RULE_alterResourceGroup = 442;
    public static readonly RULE_setResourceGroup = 443;
    public static readonly RULE_threadIdList = 444;
    public static readonly RULE_dropResourceGroup = 445;
    public static readonly RULE_utilityStatement = 446;
    public static readonly RULE_describeStatement = 447;
    public static readonly RULE_explainStatement = 448;
    public static readonly RULE_explainOptions = 449;
    public static readonly RULE_explainableStatement = 450;
    public static readonly RULE_explainInto = 451;
    public static readonly RULE_helpCommand = 452;
    public static readonly RULE_useCommand = 453;
    public static readonly RULE_restartServer = 454;
    public static readonly RULE_expr = 455;
    public static readonly RULE_boolPri = 456;
    public static readonly RULE_compOp = 457;
    public static readonly RULE_predicate = 458;
    public static readonly RULE_predicateOperations = 459;
    public static readonly RULE_bitExpr = 460;
    public static readonly RULE_simpleExpr = 461;
    public static readonly RULE_arrayCast = 462;
    public static readonly RULE_jsonOperator = 463;
    public static readonly RULE_sumExpr = 464;
    public static readonly RULE_groupingOperation = 465;
    public static readonly RULE_windowFunctionCall = 466;
    public static readonly RULE_samplingMethod = 467;
    public static readonly RULE_samplingPercentage = 468;
    public static readonly RULE_tablesampleClause = 469;
    public static readonly RULE_windowingClause = 470;
    public static readonly RULE_leadLagInfo = 471;
    public static readonly RULE_stableInteger = 472;
    public static readonly RULE_paramOrVar = 473;
    public static readonly RULE_nullTreatment = 474;
    public static readonly RULE_jsonFunction = 475;
    public static readonly RULE_inSumExpr = 476;
    public static readonly RULE_identListArg = 477;
    public static readonly RULE_identList = 478;
    public static readonly RULE_fulltextOptions = 479;
    public static readonly RULE_runtimeFunctionCall = 480;
    public static readonly RULE_returningType = 481;
    public static readonly RULE_geometryFunction = 482;
    public static readonly RULE_timeFunctionParameters = 483;
    public static readonly RULE_fractionalPrecision = 484;
    public static readonly RULE_weightStringLevels = 485;
    public static readonly RULE_weightStringLevelListItem = 486;
    public static readonly RULE_dateTimeTtype = 487;
    public static readonly RULE_trimFunction = 488;
    public static readonly RULE_substringFunction = 489;
    public static readonly RULE_functionCall = 490;
    public static readonly RULE_udfExprList = 491;
    public static readonly RULE_udfExpr = 492;
    public static readonly RULE_userVariable = 493;
    public static readonly RULE_inExpressionUserVariableAssignment = 494;
    public static readonly RULE_rvalueSystemOrUserVariable = 495;
    public static readonly RULE_lvalueVariable = 496;
    public static readonly RULE_rvalueSystemVariable = 497;
    public static readonly RULE_whenExpression = 498;
    public static readonly RULE_thenExpression = 499;
    public static readonly RULE_elseExpression = 500;
    public static readonly RULE_castType = 501;
    public static readonly RULE_exprList = 502;
    public static readonly RULE_charset = 503;
    public static readonly RULE_notRule = 504;
    public static readonly RULE_not2Rule = 505;
    public static readonly RULE_interval = 506;
    public static readonly RULE_intervalTimeStamp = 507;
    public static readonly RULE_exprListWithParentheses = 508;
    public static readonly RULE_exprWithParentheses = 509;
    public static readonly RULE_simpleExprWithParentheses = 510;
    public static readonly RULE_orderList = 511;
    public static readonly RULE_orderExpression = 512;
    public static readonly RULE_groupList = 513;
    public static readonly RULE_groupingExpression = 514;
    public static readonly RULE_channel = 515;
    public static readonly RULE_compoundStatement = 516;
    public static readonly RULE_returnStatement = 517;
    public static readonly RULE_ifStatement = 518;
    public static readonly RULE_ifBody = 519;
    public static readonly RULE_thenStatement = 520;
    public static readonly RULE_compoundStatementList = 521;
    public static readonly RULE_caseStatement = 522;
    public static readonly RULE_elseStatement = 523;
    public static readonly RULE_labeledBlock = 524;
    public static readonly RULE_unlabeledBlock = 525;
    public static readonly RULE_label = 526;
    public static readonly RULE_beginEndBlock = 527;
    public static readonly RULE_labeledControl = 528;
    public static readonly RULE_unlabeledControl = 529;
    public static readonly RULE_loopBlock = 530;
    public static readonly RULE_whileDoBlock = 531;
    public static readonly RULE_repeatUntilBlock = 532;
    public static readonly RULE_spDeclarations = 533;
    public static readonly RULE_spDeclaration = 534;
    public static readonly RULE_variableDeclaration = 535;
    public static readonly RULE_conditionDeclaration = 536;
    public static readonly RULE_spCondition = 537;
    public static readonly RULE_sqlstate = 538;
    public static readonly RULE_handlerDeclaration = 539;
    public static readonly RULE_handlerCondition = 540;
    public static readonly RULE_cursorDeclaration = 541;
    public static readonly RULE_iterateStatement = 542;
    public static readonly RULE_leaveStatement = 543;
    public static readonly RULE_getDiagnosticsStatement = 544;
    public static readonly RULE_signalAllowedExpr = 545;
    public static readonly RULE_statementInformationItem = 546;
    public static readonly RULE_conditionInformationItem = 547;
    public static readonly RULE_signalInformationItemName = 548;
    public static readonly RULE_signalStatement = 549;
    public static readonly RULE_resignalStatement = 550;
    public static readonly RULE_signalInformationItem = 551;
    public static readonly RULE_cursorOpen = 552;
    public static readonly RULE_cursorClose = 553;
    public static readonly RULE_cursorFetch = 554;
    public static readonly RULE_schedule = 555;
    public static readonly RULE_columnDefinition = 556;
    public static readonly RULE_checkOrReferences = 557;
    public static readonly RULE_checkConstraint = 558;
    public static readonly RULE_constraintEnforcement = 559;
    public static readonly RULE_tableConstraintDef = 560;
    public static readonly RULE_constraintName = 561;
    public static readonly RULE_fieldDefinition = 562;
    public static readonly RULE_columnAttribute = 563;
    public static readonly RULE_columnFormat = 564;
    public static readonly RULE_storageMedia = 565;
    public static readonly RULE_now = 566;
    public static readonly RULE_nowOrSignedLiteral = 567;
    public static readonly RULE_gcolAttribute = 568;
    public static readonly RULE_references = 569;
    public static readonly RULE_deleteOption = 570;
    public static readonly RULE_keyList = 571;
    public static readonly RULE_keyPart = 572;
    public static readonly RULE_keyListWithExpression = 573;
    public static readonly RULE_keyPartOrExpression = 574;
    public static readonly RULE_indexType = 575;
    public static readonly RULE_indexOption = 576;
    public static readonly RULE_commonIndexOption = 577;
    public static readonly RULE_visibility = 578;
    public static readonly RULE_indexTypeClause = 579;
    public static readonly RULE_fulltextIndexOption = 580;
    public static readonly RULE_spatialIndexOption = 581;
    public static readonly RULE_dataTypeDefinition = 582;
    public static readonly RULE_dataType = 583;
    public static readonly RULE_nchar = 584;
    public static readonly RULE_realType = 585;
    public static readonly RULE_fieldLength = 586;
    public static readonly RULE_fieldOptions = 587;
    public static readonly RULE_charsetWithOptBinary = 588;
    public static readonly RULE_ascii = 589;
    public static readonly RULE_unicode = 590;
    public static readonly RULE_wsNumCodepoints = 591;
    public static readonly RULE_typeDatetimePrecision = 592;
    public static readonly RULE_functionDatetimePrecision = 593;
    public static readonly RULE_charsetName = 594;
    public static readonly RULE_collationName = 595;
    public static readonly RULE_createTableOptions = 596;
    public static readonly RULE_createTableOptionsEtc = 597;
    public static readonly RULE_createPartitioningEtc = 598;
    public static readonly RULE_createTableOptionsSpaceSeparated = 599;
    public static readonly RULE_createTableOption = 600;
    public static readonly RULE_ternaryOption = 601;
    public static readonly RULE_defaultCollation = 602;
    public static readonly RULE_defaultEncryption = 603;
    public static readonly RULE_defaultCharset = 604;
    public static readonly RULE_partitionClause = 605;
    public static readonly RULE_partitionTypeDef = 606;
    public static readonly RULE_subPartitions = 607;
    public static readonly RULE_partitionKeyAlgorithm = 608;
    public static readonly RULE_partitionDefinitions = 609;
    public static readonly RULE_partitionDefinition = 610;
    public static readonly RULE_partitionValuesIn = 611;
    public static readonly RULE_partitionOption = 612;
    public static readonly RULE_subpartitionDefinition = 613;
    public static readonly RULE_partitionValueItemListParen = 614;
    public static readonly RULE_partitionValueItem = 615;
    public static readonly RULE_definerClause = 616;
    public static readonly RULE_ifExists = 617;
    public static readonly RULE_ifExistsIdentifier = 618;
    public static readonly RULE_persistedVariableIdentifier = 619;
    public static readonly RULE_ifNotExists = 620;
    public static readonly RULE_ignoreUnknownUser = 621;
    public static readonly RULE_procedureParameter = 622;
    public static readonly RULE_functionParameter = 623;
    public static readonly RULE_collate = 624;
    public static readonly RULE_typeWithOptCollate = 625;
    public static readonly RULE_schemaIdentifierPair = 626;
    public static readonly RULE_viewRefList = 627;
    public static readonly RULE_updateList = 628;
    public static readonly RULE_updateElement = 629;
    public static readonly RULE_charsetClause = 630;
    public static readonly RULE_fieldsClause = 631;
    public static readonly RULE_fieldTerm = 632;
    public static readonly RULE_linesClause = 633;
    public static readonly RULE_lineTerm = 634;
    public static readonly RULE_userList = 635;
    public static readonly RULE_createUserList = 636;
    public static readonly RULE_createUser = 637;
    public static readonly RULE_createUserWithMfa = 638;
    public static readonly RULE_identification = 639;
    public static readonly RULE_identifiedByPassword = 640;
    public static readonly RULE_identifiedByRandomPassword = 641;
    public static readonly RULE_identifiedWithPlugin = 642;
    public static readonly RULE_identifiedWithPluginAsAuth = 643;
    public static readonly RULE_identifiedWithPluginByPassword = 644;
    public static readonly RULE_identifiedWithPluginByRandomPassword = 645;
    public static readonly RULE_initialAuth = 646;
    public static readonly RULE_retainCurrentPassword = 647;
    public static readonly RULE_discardOldPassword = 648;
    public static readonly RULE_userRegistration = 649;
    public static readonly RULE_factor = 650;
    public static readonly RULE_replacePassword = 651;
    public static readonly RULE_userIdentifierOrText = 652;
    public static readonly RULE_user = 653;
    public static readonly RULE_likeClause = 654;
    public static readonly RULE_likeOrWhere = 655;
    public static readonly RULE_onlineOption = 656;
    public static readonly RULE_noWriteToBinLog = 657;
    public static readonly RULE_usePartition = 658;
    public static readonly RULE_fieldIdentifier = 659;
    public static readonly RULE_columnName = 660;
    public static readonly RULE_columnInternalRef = 661;
    public static readonly RULE_columnInternalRefList = 662;
    public static readonly RULE_columnRef = 663;
    public static readonly RULE_insertIdentifier = 664;
    public static readonly RULE_indexName = 665;
    public static readonly RULE_indexRef = 666;
    public static readonly RULE_tableWild = 667;
    public static readonly RULE_schemaName = 668;
    public static readonly RULE_schemaRef = 669;
    public static readonly RULE_procedureName = 670;
    public static readonly RULE_procedureRef = 671;
    public static readonly RULE_functionName = 672;
    public static readonly RULE_functionRef = 673;
    public static readonly RULE_triggerName = 674;
    public static readonly RULE_triggerRef = 675;
    public static readonly RULE_viewName = 676;
    public static readonly RULE_viewRef = 677;
    public static readonly RULE_tablespaceName = 678;
    public static readonly RULE_tablespaceRef = 679;
    public static readonly RULE_logfileGroupName = 680;
    public static readonly RULE_logfileGroupRef = 681;
    public static readonly RULE_eventName = 682;
    public static readonly RULE_eventRef = 683;
    public static readonly RULE_udfName = 684;
    public static readonly RULE_serverName = 685;
    public static readonly RULE_serverRef = 686;
    public static readonly RULE_engineRef = 687;
    public static readonly RULE_tableName = 688;
    public static readonly RULE_filterTableRef = 689;
    public static readonly RULE_tableRefWithWildcard = 690;
    public static readonly RULE_tableRef = 691;
    public static readonly RULE_tableRefList = 692;
    public static readonly RULE_tableAliasRefList = 693;
    public static readonly RULE_parameterName = 694;
    public static readonly RULE_labelIdentifier = 695;
    public static readonly RULE_labelRef = 696;
    public static readonly RULE_roleIdentifier = 697;
    public static readonly RULE_pluginRef = 698;
    public static readonly RULE_componentRef = 699;
    public static readonly RULE_resourceGroupRef = 700;
    public static readonly RULE_windowName = 701;
    public static readonly RULE_pureIdentifier = 702;
    public static readonly RULE_identifier = 703;
    public static readonly RULE_identifierList = 704;
    public static readonly RULE_identifierListWithParentheses = 705;
    public static readonly RULE_qualifiedIdentifier = 706;
    public static readonly RULE_simpleIdentifier = 707;
    public static readonly RULE_dotIdentifier = 708;
    public static readonly RULE_ulong_number = 709;
    public static readonly RULE_real_ulong_number = 710;
    public static readonly RULE_ulonglongNumber = 711;
    public static readonly RULE_real_ulonglong_number = 712;
    public static readonly RULE_signedLiteral = 713;
    public static readonly RULE_signedLiteralOrNull = 714;
    public static readonly RULE_literal = 715;
    public static readonly RULE_literalOrNull = 716;
    public static readonly RULE_nullAsLiteral = 717;
    public static readonly RULE_stringList = 718;
    public static readonly RULE_textStringLiteral = 719;
    public static readonly RULE_textString = 720;
    public static readonly RULE_textStringHash = 721;
    public static readonly RULE_textLiteral = 722;
    public static readonly RULE_textStringNoLinebreak = 723;
    public static readonly RULE_textStringLiteralList = 724;
    public static readonly RULE_numLiteral = 725;
    public static readonly RULE_boolLiteral = 726;
    public static readonly RULE_nullLiteral = 727;
    public static readonly RULE_int64Literal = 728;
    public static readonly RULE_temporalLiteral = 729;
    public static readonly RULE_floatOptions = 730;
    public static readonly RULE_standardFloatOptions = 731;
    public static readonly RULE_precision = 732;
    public static readonly RULE_textOrIdentifier = 733;
    public static readonly RULE_lValueIdentifier = 734;
    public static readonly RULE_roleIdentifierOrText = 735;
    public static readonly RULE_sizeNumber = 736;
    public static readonly RULE_parentheses = 737;
    public static readonly RULE_equal = 738;
    public static readonly RULE_optionType = 739;
    public static readonly RULE_rvalueSystemVariableType = 740;
    public static readonly RULE_setVarIdentType = 741;
    public static readonly RULE_jsonAttribute = 742;
    public static readonly RULE_identifierKeyword = 743;
    public static readonly RULE_identifierKeywordsAmbiguous1RolesAndLabels = 744;
    public static readonly RULE_identifierKeywordsAmbiguous2Labels = 745;
    public static readonly RULE_labelKeyword = 746;
    public static readonly RULE_identifierKeywordsAmbiguous3Roles = 747;
    public static readonly RULE_identifierKeywordsUnambiguous = 748;
    public static readonly RULE_roleKeyword = 749;
    public static readonly RULE_lValueKeyword = 750;
    public static readonly RULE_identifierKeywordsAmbiguous4SystemVariables = 751;
    public static readonly RULE_roleOrIdentifierKeyword = 752;
    public static readonly RULE_roleOrLabelKeyword = 753;
    public static readonly literalNames: string[] = [
        "", "", "", "", "", "", "'='", "':='", "'<=>'", "'>='", "'>'", "'<='", 
        "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", 
        "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", 
        "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", 
        "'@'", "", "'@@'", "'\\N'", "'?'", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
        "", "", "", "", "", "", "", "", "", "", "", "", "", "'<>'"
    ];
    public static readonly symbolicNames: string[] = [
        "", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", "LONG_NUMBER", 
        "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", 
        "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
        "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
        "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", 
        "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", 
        "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", 
        "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
        "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL", 
        "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", 
        "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", 
        "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", 
        "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL", 
        "ACCOUNT_SYMBOL", "ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", 
        "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", 
        "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYZE_SYMBOL", 
        "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", "ASCII_SYMBOL", 
        "ASENSITIVE_SYMBOL", "AT_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", "AUTO_INCREMENT_SYMBOL", 
        "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL", "BEFORE_SYMBOL", 
        "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
        "BINLOG_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", "BIT_SYMBOL", 
        "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", 
        "BOOL_SYMBOL", "BOTH_SYMBOL", "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", 
        "CACHE_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", 
        "CASE_SYMBOL", "CAST_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", 
        "CHANGE_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", 
        "CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", "CIPHER_SYMBOL", 
        "CLASS_ORIGIN_SYMBOL", "CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL", 
        "CODE_SYMBOL", "COLLATE_SYMBOL", "COLLATION_SYMBOL", "COLUMNS_SYMBOL", 
        "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL", 
        "COMMITTED_SYMBOL", "COMMIT_SYMBOL", "COMPACT_SYMBOL", "COMPLETION_SYMBOL", 
        "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", "CONCURRENT_SYMBOL", 
        "CONDITION_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL", 
        "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", 
        "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL", 
        "COUNT_SYMBOL", "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", "CUBE_SYMBOL", 
        "CURDATE_SYMBOL", "CURRENT_SYMBOL", "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", 
        "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL", 
        "DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATAFILE_SYMBOL", "DATA_SYMBOL", 
        "DATETIME_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
        "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", 
        "DAY_SECOND_SYMBOL", "DAY_SYMBOL", "DEALLOCATE_SYMBOL", "DECIMAL_SYMBOL", 
        "DECLARE_SYMBOL", "DEFAULT_SYMBOL", "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", 
        "DELAYED_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", 
        "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", 
        "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", "DISK_SYMBOL", 
        "DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", 
        "DUAL_SYMBOL", "DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", 
        "EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", 
        "ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", "END_SYMBOL", "ENDS_SYMBOL", 
        "ENGINES_SYMBOL", "ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", 
        "ERRORS_SYMBOL", "ESCAPED_SYMBOL", "ESCAPE_SYMBOL", "EVENTS_SYMBOL", 
        "EVENT_SYMBOL", "EVERY_SYMBOL", "EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", 
        "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL", "EXPIRE_SYMBOL", 
        "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", 
        "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FAST_SYMBOL", "FAULTS_SYMBOL", 
        "FETCH_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", 
        "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT_SYMBOL", "FLUSH_SYMBOL", 
        "FOLLOWS_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", 
        "FORMAT_SYMBOL", "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", "FULLTEXT_SYMBOL", 
        "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", "GENERATED_SYMBOL", 
        "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", "GEOMETRY_SYMBOL", 
        "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", "GRANT_SYMBOL", "GRANTS_SYMBOL", 
        "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", "HANDLER_SYMBOL", "HASH_SYMBOL", 
        "HAVING_SYMBOL", "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOST_SYMBOL", 
        "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
        "HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", 
        "IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL", 
        "INDEX_SYMBOL", "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
        "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL", 
        "INSTANCE_SYMBOL", "INSTALL_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
        "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
        "IO_BEFORE_GTIDS_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", "IS_SYMBOL", 
        "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
        "JSON_SYMBOL", "KEYS_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", 
        "KILL_SYMBOL", "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", 
        "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL", "LESS_SYMBOL", "LEVEL_SYMBOL", 
        "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", 
        "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOAD_SYMBOL", "LOCAL_SYMBOL", 
        "LOCKS_SYMBOL", "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", 
        "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", 
        "LOW_PRIORITY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", 
        "MASTER_CONNECT_RETRY_SYMBOL", "MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", 
        "MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", 
        "MASTER_PORT_SYMBOL", "MASTER_RETRY_COUNT_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
        "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", 
        "MASTER_SSL_CRL_SYMBOL", "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
        "MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", 
        "MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", 
        "MATCH_SYMBOL", "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", 
        "MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", 
        "MAX_USER_CONNECTIONS_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", 
        "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", "MEMORY_SYMBOL", 
        "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", "MID_SYMBOL", 
        "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
        "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", "MODE_SYMBOL", 
        "MODIFIES_SYMBOL", "MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL", 
        "MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", 
        "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", 
        "NATIONAL_SYMBOL", "NATURAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", 
        "NEVER_SYMBOL", "NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", 
        "NONE_SYMBOL", "NOT_SYMBOL", "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", 
        "NO_WRITE_TO_BINLOG_SYMBOL", "NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", 
        "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL", "OFFSET_SYMBOL", "ON_SYMBOL", 
        "ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", "OPEN_SYMBOL", "OPTIMIZE_SYMBOL", 
        "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", 
        "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", 
        "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARSER_SYMBOL", 
        "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", 
        "PASSWORD_SYMBOL", "PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", 
        "PLUGIN_SYMBOL", "POINT_SYMBOL", "POLYGON_SYMBOL", "PORT_SYMBOL", 
        "POSITION_SYMBOL", "PRECEDES_SYMBOL", "PRECISION_SYMBOL", "PREPARE_SYMBOL", 
        "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", 
        "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", 
        "PROFILES_SYMBOL", "PROXY_SYMBOL", "PURGE_SYMBOL", "QUARTER_SYMBOL", 
        "QUERY_SYMBOL", "QUICK_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", 
        "READ_ONLY_SYMBOL", "READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", 
        "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", 
        "REFERENCES_SYMBOL", "REGEXP_SYMBOL", "RELAY_SYMBOL", "RELAYLOG_SYMBOL", 
        "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
        "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", "RENAME_SYMBOL", 
        "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL", "REPEAT_SYMBOL", 
        "REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
        "REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
        "REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
        "REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", 
        "RESIGNAL_SYMBOL", "RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", 
        "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", "RETURN_SYMBOL", "REVERSE_SYMBOL", 
        "REVOKE_SYMBOL", "RIGHT_SYMBOL", "ROLLBACK_SYMBOL", "ROLLUP_SYMBOL", 
        "ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", 
        "ROW_FORMAT_SYMBOL", "ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", 
        "SCHEDULE_SYMBOL", "SCHEMA_NAME_SYMBOL", "SECOND_MICROSECOND_SYMBOL", 
        "SECOND_SYMBOL", "SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", 
        "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", "SESSION_SYMBOL", 
        "SERVER_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL", "SHARE_SYMBOL", 
        "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", "SIGNED_SYMBOL", 
        "SIMPLE_SYMBOL", "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", 
        "SNAPSHOT_SYMBOL", "SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", 
        "SOURCE_SYMBOL", "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", 
        "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", 
        "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL", "SQL_BIG_RESULT_SYMBOL", 
        "SQL_BUFFER_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", "SQL_NO_CACHE_SYMBOL", 
        "SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", 
        "STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
        "STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
        "STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", 
        "STD_SYMBOL", "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", 
        "STRAIGHT_JOIN_SYMBOL", "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
        "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", 
        "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", "SUM_SYMBOL", "SUPER_SYMBOL", 
        "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "SYSDATE_SYMBOL", 
        "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL", "TABLE_SYMBOL", 
        "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL", 
        "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL", 
        "THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMPADD_SYMBOL", "TIMESTAMPDIFF_SYMBOL", 
        "TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", 
        "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL", 
        "TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", 
        "TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
        "UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", 
        "UNDO_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", "UNION_SYMBOL", 
        "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", 
        "UNTIL_SYMBOL", "UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", 
        "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", "USE_SYMBOL", 
        "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
        "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VALUE_SYMBOL", "VARBINARY_SYMBOL", 
        "VARCHAR_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL", "VARYING_SYMBOL", 
        "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", "VIEW_SYMBOL", "VIRTUAL_SYMBOL", 
        "WAIT_SYMBOL", "WARNINGS_SYMBOL", "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", 
        "WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", 
        "WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", "X509_SYMBOL", 
        "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", 
        "YEAR_SYMBOL", "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", "ROLE_SYMBOL", 
        "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", 
        "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", 
        "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", 
        "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", 
        "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", "CUME_DIST_SYMBOL", 
        "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", 
        "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", 
        "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", 
        "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", "RANK_SYMBOL", 
        "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
        "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", "NESTED_SYMBOL", 
        "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", "REUSE_SYMBOL", 
        "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", 
        "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
        "RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
        "REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
        "SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", 
        "INACTIVE_SYMBOL", "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", 
        "NETWORK_NAMESPACE_SYMBOL", "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", 
        "MEMBER_SYMBOL", "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
        "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
        "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", "PASSWORD_LOCK_TIME_SYMBOL", 
        "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", 
        "STREAM_SYMBOL", "OFF_SYMBOL", "RETURNING_SYMBOL", "JSON_VALUE_SYMBOL", 
        "TLS_SYMBOL", "ATTRIBUTE_SYMBOL", "ENGINE_ATTRIBUTE_SYMBOL", "SECONDARY_ENGINE_ATTRIBUTE_SYMBOL", 
        "SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL", "ZONE_SYMBOL", "GRAMMAR_SELECTOR_DERIVED_EXPR", 
        "REPLICA_SYMBOL", "REPLICAS_SYMBOL", "ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL", 
        "GET_SOURCE_PUBLIC_KEY_SYMBOL", "SOURCE_AUTO_POSITION_SYMBOL", "SOURCE_BIND_SYMBOL", 
        "SOURCE_COMPRESSION_ALGORITHM_SYMBOL", "SOURCE_CONNECT_RETRY_SYMBOL", 
        "SOURCE_DELAY_SYMBOL", "SOURCE_HEARTBEAT_PERIOD_SYMBOL", "SOURCE_HOST_SYMBOL", 
        "SOURCE_LOG_FILE_SYMBOL", "SOURCE_LOG_POS_SYMBOL", "SOURCE_PASSWORD_SYMBOL", 
        "SOURCE_PORT_SYMBOL", "SOURCE_PUBLIC_KEY_PATH_SYMBOL", "SOURCE_RETRY_COUNT_SYMBOL", 
        "SOURCE_SSL_SYMBOL", "SOURCE_SSL_CA_SYMBOL", "SOURCE_SSL_CAPATH_SYMBOL", 
        "SOURCE_SSL_CERT_SYMBOL", "SOURCE_SSL_CIPHER_SYMBOL", "SOURCE_SSL_CRL_SYMBOL", 
        "SOURCE_SSL_CRLPATH_SYMBOL", "SOURCE_SSL_KEY_SYMBOL", "SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL", 
        "SOURCE_TLS_CIPHERSUITES_SYMBOL", "SOURCE_TLS_VERSION_SYMBOL", "SOURCE_USER_SYMBOL", 
        "SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL", "ST_COLLECT_SYMBOL", "KEYRING_SYMBOL", 
        "AUTHENTICATION_SYMBOL", "FACTOR_SYMBOL", "FINISH_SYMBOL", "INITIATE_SYMBOL", 
        "REGISTRATION_SYMBOL", "UNREGISTER_SYMBOL", "INITIAL_SYMBOL", "CHALLENGE_RESPONSE_SYMBOL", 
        "GTID_ONLY_SYMBOL", "INTERSECT_SYMBOL", "BULK_SYMBOL", "URL_SYMBOL", 
        "GENERATE_SYMBOL", "PARSE_TREE_SYMBOL", "LOG_SYMBOL", "GTIDS_SYMBOL", 
        "PARALLEL_SYMBOL", "S3_SYMBOL", "QUALIFY_SYMBOL", "AUTO_SYMBOL", 
        "MANUAL_SYMBOL", "BENROULLI_SYMBOL", "TABLESAMPLE_SYMBOL", "WHITESPACE", 
        "INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", 
        "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", 
        "DOLLAR_QUOTED_STRING_TEXT", "VERSION_COMMENT_START", "MYSQL_COMMENT_START", 
        "VERSION_COMMENT_END", "BLOCK_COMMENT", "INVALID_BLOCK_COMMENT", 
        "POUND_COMMENT", "DASHDASH_COMMENT", "NOT_EQUAL2_OPERATOR"
    ];

    public static readonly ruleNames: string[] = [
        "query", "simpleStatement", "alterStatement", "alterDatabase", "alterDatabaseOption", 
        "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
        "alterServer", "alterTable", "alterTableActions", "alterCommandList", 
        "alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
        "alterList", "alterCommandsModifier", "alterListItem", "place", 
        "restrict", "alterOrderList", "alterAlgorithmOption", "alterLockOption", 
        "indexLockAndAlgorithm", "withValidation", "removePartitioning", 
        "allOrPartitionNameList", "alterTablespace", "alterUndoTablespace", 
        "undoTableSpaceOptions", "undoTableSpaceOption", "alterTablespaceOptions", 
        "alterTablespaceOption", "changeTablespaceOption", "alterView", 
        "viewTail", "viewQueryBlock", "viewCheckOption", "alterInstanceStatement", 
        "createStatement", "createDatabase", "createDatabaseOption", "createTable", 
        "tableElementList", "tableElement", "duplicateAsQe", "asCreateQueryExpression", 
        "queryExpressionOrParens", "queryExpressionWithOptLockingClauses", 
        "createRoutine", "createProcedure", "routineString", "storedRoutineBody", 
        "createFunction", "createUdf", "routineCreateOption", "routineAlterOptions", 
        "routineOption", "createIndex", "indexNameAndType", "createIndexTarget", 
        "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
        "createServer", "serverOptions", "serverOption", "createTablespace", 
        "createUndoTablespace", "tsDataFileName", "tsDataFile", "tablespaceOptions", 
        "tablespaceOption", "tsOptionInitialSize", "tsOptionUndoRedoBufferSize", 
        "tsOptionAutoextendSize", "tsOptionMaxSize", "tsOptionExtentSize", 
        "tsOptionNodegroup", "tsOptionEngine", "tsOptionWait", "tsOptionComment", 
        "tsOptionFileblockSize", "tsOptionEncryption", "tsOptionEngineAttribute", 
        "createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", 
        "createTrigger", "triggerFollowsPrecedesClause", "createEvent", 
        "createRole", "createSpatialReference", "srsAttribute", "dropStatement", 
        "dropDatabase", "dropEvent", "dropFunction", "dropProcedure", "dropIndex", 
        "dropLogfileGroup", "dropLogfileGroupOption", "dropServer", "dropTable", 
        "dropTableSpace", "dropTrigger", "dropView", "dropRole", "dropSpatialReference", 
        "dropUndoTablespace", "renameTableStatement", "renamePair", "truncateTableStatement", 
        "importStatement", "callStatement", "deleteStatement", "partitionDelete", 
        "deleteStatementOption", "doStatement", "handlerStatement", "handlerReadOrScan", 
        "insertStatement", "insertLockOption", "insertFromConstructor", 
        "fields", "insertValues", "insertQueryExpression", "valueList", 
        "values", "valuesReference", "insertUpdateList", "loadStatement", 
        "dataOrXml", "loadDataLock", "loadFrom", "loadSourceType", "sourceCount", 
        "sourceOrder", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
        "fieldOrVariableList", "loadAlgorithm", "loadParallel", "loadMemory", 
        "replaceStatement", "selectStatement", "selectStatementWithInto", 
        "queryExpression", "queryExpressionBody", "queryExpressionParens", 
        "queryPrimary", "querySpecification", "subquery", "querySpecOption", 
        "limitClause", "simpleLimitClause", "limitOptions", "limitOption", 
        "intoClause", "procedureAnalyseClause", "havingClause", "qualifyClause", 
        "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
        "windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
        "windowFrameBetween", "windowFrameBound", "windowFrameExclusion", 
        "withClause", "commonTableExpression", "groupByClause", "olapOption", 
        "orderClause", "direction", "fromClause", "tableReferenceList", 
        "tableValueConstructor", "explicitTable", "rowValueExplicit", "selectOption", 
        "lockingClauseList", "lockingClause", "lockStrengh", "lockedRowAction", 
        "selectItemList", "selectItem", "selectAlias", "whereClause", "tableReference", 
        "escapedTableReference", "joinedTable", "naturalJoinType", "innerJoinType", 
        "outerJoinType", "tableFactor", "singleTable", "singleTableParens", 
        "derivedTable", "tableReferenceListParens", "tableFunction", "columnsClause", 
        "jtColumn", "onEmptyOrError", "onEmptyOrErrorJsonTable", "onEmpty", 
        "onError", "jsonOnResponse", "unionOption", "tableAlias", "indexHintList", 
        "indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", 
        "indexHintClause", "indexList", "indexListElement", "updateStatement", 
        "transactionOrLockingStatement", "transactionStatement", "beginWork", 
        "startTransactionOptionList", "savepointStatement", "lockStatement", 
        "lockItem", "lockOption", "xaStatement", "xaConvert", "xid", "replicationStatement", 
        "purgeOptions", "resetOption", "masterOrBinaryLogsAndGtids", "sourceResetOptions", 
        "replicationLoad", "changeReplicationSource", "changeSource", "sourceDefinitions", 
        "sourceDefinition", "changeReplicationSourceAutoPosition", "changeReplicationSourceHost", 
        "changeReplicationSourceBind", "changeReplicationSourceUser", "changeReplicationSourcePassword", 
        "changeReplicationSourcePort", "changeReplicationSourceConnectRetry", 
        "changeReplicationSourceRetryCount", "changeReplicationSourceDelay", 
        "changeReplicationSourceSSL", "changeReplicationSourceSSLCA", "changeReplicationSourceSSLCApath", 
        "changeReplicationSourceSSLCipher", "changeReplicationSourceSSLCLR", 
        "changeReplicationSourceSSLCLRpath", "changeReplicationSourceSSLKey", 
        "changeReplicationSourceSSLVerifyServerCert", "changeReplicationSourceTLSVersion", 
        "changeReplicationSourceTLSCiphersuites", "changeReplicationSourceSSLCert", 
        "changeReplicationSourcePublicKey", "changeReplicationSourceGetSourcePublicKey", 
        "changeReplicationSourceHeartbeatPeriod", "changeReplicationSourceCompressionAlgorithm", 
        "changeReplicationSourceZstdCompressionLevel", "privilegeCheckDef", 
        "tablePrimaryKeyCheckDef", "assignGtidsToAnonymousTransactionsDefinition", 
        "sourceTlsCiphersuitesDef", "sourceFileDef", "sourceLogFile", "sourceLogPos", 
        "serverIdList", "changeReplication", "filterDefinition", "filterDbList", 
        "filterTableList", "filterStringList", "filterWildDbTableString", 
        "filterDbPairList", "startReplicaStatement", "stopReplicaStatement", 
        "replicaUntil", "userOption", "passwordOption", "defaultAuthOption", 
        "pluginDirOption", "replicaThreadOptions", "replicaThreadOption", 
        "groupReplication", "groupReplicationStartOptions", "groupReplicationStartOption", 
        "groupReplicationUser", "groupReplicationPassword", "groupReplicationPluginAuth", 
        "replica", "preparedStatement", "executeStatement", "executeVarList", 
        "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
        "alterUserStatement", "alterUserList", "alterUser", "oldAlterUser", 
        "userFunction", "createUserStatement", "createUserTail", "userAttributes", 
        "defaultRoleClause", "requireClause", "connectOptions", "accountLockPasswordExpireOptions", 
        "userAttribute", "dropUserStatement", "grantStatement", "grantTargetList", 
        "grantOptions", "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause", 
        "renameUserStatement", "revokeStatement", "aclType", "roleOrPrivilegesList", 
        "roleOrPrivilege", "grantIdentifier", "requireList", "requireListElement", 
        "grantOption", "setRoleStatement", "roleList", "role", "tableAdministrationStatement", 
        "histogramAutoUpdate", "histogramUpdateParam", "histogramNumBuckets", 
        "histogram", "checkOption", "repairType", "uninstallStatement", 
        "installStatement", "installOptionType", "installSetRvalue", "installSetValue", 
        "installSetValueList", "setStatement", "startOptionValueList", "transactionCharacteristics", 
        "transactionAccessMode", "isolationLevel", "optionValueListContinued", 
        "optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
        "optionValueFollowingOptionType", "setExprOrDefault", "showDatabasesStatement", 
        "showTablesStatement", "showTriggersStatement", "showEventsStatement", 
        "showTableStatusStatement", "showOpenTablesStatement", "showParseTreeStatement", 
        "showPluginsStatement", "showEngineLogsStatement", "showEngineMutexStatement", 
        "showEngineStatusStatement", "showColumnsStatement", "showBinaryLogsStatement", 
        "showBinaryLogStatusStatement", "showReplicasStatement", "showBinlogEventsStatement", 
        "showRelaylogEventsStatement", "showKeysStatement", "showEnginesStatement", 
        "showCountWarningsStatement", "showCountErrorsStatement", "showWarningsStatement", 
        "showErrorsStatement", "showProfilesStatement", "showProfileStatement", 
        "showStatusStatement", "showProcessListStatement", "showVariablesStatement", 
        "showCharacterSetStatement", "showCollationStatement", "showPrivilegesStatement", 
        "showGrantsStatement", "showCreateDatabaseStatement", "showCreateTableStatement", 
        "showCreateViewStatement", "showMasterStatusStatement", "showReplicaStatusStatement", 
        "showCreateProcedureStatement", "showCreateFunctionStatement", "showCreateTriggerStatement", 
        "showCreateProcedureStatusStatement", "showCreateFunctionStatusStatement", 
        "showCreateProcedureCodeStatement", "showCreateFunctionCodeStatement", 
        "showCreateEventStatement", "showCreateUserStatement", "showCommandType", 
        "engineOrAll", "fromOrIn", "inDb", "profileDefinitions", "profileDefinition", 
        "otherAdministrativeStatement", "keyCacheListOrParts", "keyCacheList", 
        "assignToKeycache", "assignToKeycachePartition", "cacheKeyList", 
        "keyUsageElement", "keyUsageList", "flushOption", "logType", "flushTables", 
        "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
        "adminPartition", "resourceGroupManagement", "createResourceGroup", 
        "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
        "resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
        "threadIdList", "dropResourceGroup", "utilityStatement", "describeStatement", 
        "explainStatement", "explainOptions", "explainableStatement", "explainInto", 
        "helpCommand", "useCommand", "restartServer", "expr", "boolPri", 
        "compOp", "predicate", "predicateOperations", "bitExpr", "simpleExpr", 
        "arrayCast", "jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
        "samplingMethod", "samplingPercentage", "tablesampleClause", "windowingClause", 
        "leadLagInfo", "stableInteger", "paramOrVar", "nullTreatment", "jsonFunction", 
        "inSumExpr", "identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
        "returningType", "geometryFunction", "timeFunctionParameters", "fractionalPrecision", 
        "weightStringLevels", "weightStringLevelListItem", "dateTimeTtype", 
        "trimFunction", "substringFunction", "functionCall", "udfExprList", 
        "udfExpr", "userVariable", "inExpressionUserVariableAssignment", 
        "rvalueSystemOrUserVariable", "lvalueVariable", "rvalueSystemVariable", 
        "whenExpression", "thenExpression", "elseExpression", "castType", 
        "exprList", "charset", "notRule", "not2Rule", "interval", "intervalTimeStamp", 
        "exprListWithParentheses", "exprWithParentheses", "simpleExprWithParentheses", 
        "orderList", "orderExpression", "groupList", "groupingExpression", 
        "channel", "compoundStatement", "returnStatement", "ifStatement", 
        "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
        "elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
        "labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", 
        "repeatUntilBlock", "spDeclarations", "spDeclaration", "variableDeclaration", 
        "conditionDeclaration", "spCondition", "sqlstate", "handlerDeclaration", 
        "handlerCondition", "cursorDeclaration", "iterateStatement", "leaveStatement", 
        "getDiagnosticsStatement", "signalAllowedExpr", "statementInformationItem", 
        "conditionInformationItem", "signalInformationItemName", "signalStatement", 
        "resignalStatement", "signalInformationItem", "cursorOpen", "cursorClose", 
        "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
        "checkConstraint", "constraintEnforcement", "tableConstraintDef", 
        "constraintName", "fieldDefinition", "columnAttribute", "columnFormat", 
        "storageMedia", "now", "nowOrSignedLiteral", "gcolAttribute", "references", 
        "deleteOption", "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
        "indexType", "indexOption", "commonIndexOption", "visibility", "indexTypeClause", 
        "fulltextIndexOption", "spatialIndexOption", "dataTypeDefinition", 
        "dataType", "nchar", "realType", "fieldLength", "fieldOptions", 
        "charsetWithOptBinary", "ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", 
        "functionDatetimePrecision", "charsetName", "collationName", "createTableOptions", 
        "createTableOptionsEtc", "createPartitioningEtc", "createTableOptionsSpaceSeparated", 
        "createTableOption", "ternaryOption", "defaultCollation", "defaultEncryption", 
        "defaultCharset", "partitionClause", "partitionTypeDef", "subPartitions", 
        "partitionKeyAlgorithm", "partitionDefinitions", "partitionDefinition", 
        "partitionValuesIn", "partitionOption", "subpartitionDefinition", 
        "partitionValueItemListParen", "partitionValueItem", "definerClause", 
        "ifExists", "ifExistsIdentifier", "persistedVariableIdentifier", 
        "ifNotExists", "ignoreUnknownUser", "procedureParameter", "functionParameter", 
        "collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
        "updateList", "updateElement", "charsetClause", "fieldsClause", 
        "fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
        "createUser", "createUserWithMfa", "identification", "identifiedByPassword", 
        "identifiedByRandomPassword", "identifiedWithPlugin", "identifiedWithPluginAsAuth", 
        "identifiedWithPluginByPassword", "identifiedWithPluginByRandomPassword", 
        "initialAuth", "retainCurrentPassword", "discardOldPassword", "userRegistration", 
        "factor", "replacePassword", "userIdentifierOrText", "user", "likeClause", 
        "likeOrWhere", "onlineOption", "noWriteToBinLog", "usePartition", 
        "fieldIdentifier", "columnName", "columnInternalRef", "columnInternalRefList", 
        "columnRef", "insertIdentifier", "indexName", "indexRef", "tableWild", 
        "schemaName", "schemaRef", "procedureName", "procedureRef", "functionName", 
        "functionRef", "triggerName", "triggerRef", "viewName", "viewRef", 
        "tablespaceName", "tablespaceRef", "logfileGroupName", "logfileGroupRef", 
        "eventName", "eventRef", "udfName", "serverName", "serverRef", "engineRef", 
        "tableName", "filterTableRef", "tableRefWithWildcard", "tableRef", 
        "tableRefList", "tableAliasRefList", "parameterName", "labelIdentifier", 
        "labelRef", "roleIdentifier", "pluginRef", "componentRef", "resourceGroupRef", 
        "windowName", "pureIdentifier", "identifier", "identifierList", 
        "identifierListWithParentheses", "qualifiedIdentifier", "simpleIdentifier", 
        "dotIdentifier", "ulong_number", "real_ulong_number", "ulonglongNumber", 
        "real_ulonglong_number", "signedLiteral", "signedLiteralOrNull", 
        "literal", "literalOrNull", "nullAsLiteral", "stringList", "textStringLiteral", 
        "textString", "textStringHash", "textLiteral", "textStringNoLinebreak", 
        "textStringLiteralList", "numLiteral", "boolLiteral", "nullLiteral", 
        "int64Literal", "temporalLiteral", "floatOptions", "standardFloatOptions", 
        "precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
        "sizeNumber", "parentheses", "equal", "optionType", "rvalueSystemVariableType", 
        "setVarIdentType", "jsonAttribute", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", 
        "identifierKeywordsAmbiguous2Labels", "labelKeyword", "identifierKeywordsAmbiguous3Roles", 
        "identifierKeywordsUnambiguous", "roleKeyword", "lValueKeyword", 
        "identifierKeywordsAmbiguous4SystemVariables", "roleOrIdentifierKeyword", 
        "roleOrLabelKeyword",
    ];
    public getGrammarFileName(): string { return "MySQLParser.g4"; }
    public getLiteralNames(): string[] { return MySQLParser.literalNames; }
    public getSymbolicNames(): string[] { return MySQLParser.symbolicNames; }

    public override getRuleNames(): StringVector {
        const result = new StringVector();
        MySQLParser.ruleNames.forEach((ruleName) => { result.push_back(ruleName); });

        return result;
    }

    public override getSerializedATN(): SerializedATNView { return MySQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
        if (predicate === undefined) {
            return new FailedPredicateException(this);
        } else if (message === undefined) {
            return new FailedPredicateException(this, predicate);
        }

        return new FailedPredicateException(this, predicate, message);
    }

    constructor(input: TokenStream) {
        super(input);

        const atn = this.getATN();
        const decisionsToDFA: DFA[] = [];
        const vector = atn.decisionToState;
        for (let i = 0; i < vector.size(); i++) {
            decisionsToDFA.push(new DFA(vector.get(i), i));
        }

        this.setInterpreter(new ParserATNSimulator(this, atn, decisionsToDFA, new PredictionContextCache()));
    }
    public query(): QueryContext {
        let localctx = new QueryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 0, MySQLParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1515);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 2, this.getContext())) {
                case 1:
                    {
                    this.setState(1510);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 0, this.getContext())) {
                        case 1:
                            {
                            this.setState(1508);
                            this.simpleStatement();
                            }
                            break;
                        case 2:
                            {
                            this.setState(1509);
                            this.beginWork();
                            }
                            break;
                    }
                    this.setState(1513);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 30) {
                        {
                        this.setState(1512);
                        this.match(MySQLParser.SEMICOLON_SYMBOL);
                        }
                    }

                    }
                    break;
            }
            this.setState(1517);
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public simpleStatement(): SimpleStatementContext {
        let localctx = new SimpleStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 2, MySQLParser.RULE_simpleStatement);
        try {
            this.setState(1595);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 3, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1519);
                    this.alterStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1520);
                    this.createStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(1521);
                    this.dropStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(1522);
                    this.renameTableStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(1523);
                    this.truncateTableStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(1524);
                    this.importStatement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(1525);
                    this.callStatement();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(1526);
                    this.deleteStatement();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(1527);
                    this.doStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(1528);
                    this.handlerStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(1529);
                    this.insertStatement();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(1530);
                    this.loadStatement();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(1531);
                    this.replaceStatement();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(1532);
                    this.selectStatement();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(1533);
                    this.updateStatement();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(1534);
                    this.transactionOrLockingStatement();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(1535);
                    this.replicationStatement();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(1536);
                    this.preparedStatement();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(1537);
                    this.cloneStatement();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(1538);
                    this.accountManagementStatement();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(1539);
                    this.tableAdministrationStatement();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(1540);
                    this.uninstallStatement();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(1541);
                    this.installStatement();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(1542);
                    this.setStatement();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(1543);
                    this.showDatabasesStatement();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(1544);
                    this.showTablesStatement();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(1545);
                    this.showTriggersStatement();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(1546);
                    this.showEventsStatement();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(1547);
                    this.showTableStatusStatement();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                    this.setState(1548);
                    this.showOpenTablesStatement();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                    this.setState(1549);
                    this.showParseTreeStatement();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                    this.setState(1550);
                    this.showPluginsStatement();
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                    this.setState(1551);
                    this.showEngineLogsStatement();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                    this.setState(1552);
                    this.showEngineMutexStatement();
                    }
                    break;
                case 35:
                    this.enterOuterAlt(localctx, 35);
                    {
                    this.setState(1553);
                    this.showEngineStatusStatement();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(localctx, 36);
                    {
                    this.setState(1554);
                    this.showColumnsStatement();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(localctx, 37);
                    {
                    this.setState(1555);
                    this.showBinaryLogsStatement();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(localctx, 38);
                    {
                    this.setState(1556);
                    this.showBinaryLogStatusStatement();
                    }
                    break;
                case 39:
                    this.enterOuterAlt(localctx, 39);
                    {
                    this.setState(1557);
                    this.showReplicasStatement();
                    }
                    break;
                case 40:
                    this.enterOuterAlt(localctx, 40);
                    {
                    this.setState(1558);
                    this.showBinlogEventsStatement();
                    }
                    break;
                case 41:
                    this.enterOuterAlt(localctx, 41);
                    {
                    this.setState(1559);
                    this.showRelaylogEventsStatement();
                    }
                    break;
                case 42:
                    this.enterOuterAlt(localctx, 42);
                    {
                    this.setState(1560);
                    this.showKeysStatement();
                    }
                    break;
                case 43:
                    this.enterOuterAlt(localctx, 43);
                    {
                    this.setState(1561);
                    this.showEnginesStatement();
                    }
                    break;
                case 44:
                    this.enterOuterAlt(localctx, 44);
                    {
                    this.setState(1562);
                    this.showCountWarningsStatement();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(localctx, 45);
                    {
                    this.setState(1563);
                    this.showCountErrorsStatement();
                    }
                    break;
                case 46:
                    this.enterOuterAlt(localctx, 46);
                    {
                    this.setState(1564);
                    this.showWarningsStatement();
                    }
                    break;
                case 47:
                    this.enterOuterAlt(localctx, 47);
                    {
                    this.setState(1565);
                    this.showErrorsStatement();
                    }
                    break;
                case 48:
                    this.enterOuterAlt(localctx, 48);
                    {
                    this.setState(1566);
                    this.showProfilesStatement();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(localctx, 49);
                    {
                    this.setState(1567);
                    this.showProfileStatement();
                    }
                    break;
                case 50:
                    this.enterOuterAlt(localctx, 50);
                    {
                    this.setState(1568);
                    this.showStatusStatement();
                    }
                    break;
                case 51:
                    this.enterOuterAlt(localctx, 51);
                    {
                    this.setState(1569);
                    this.showProcessListStatement();
                    }
                    break;
                case 52:
                    this.enterOuterAlt(localctx, 52);
                    {
                    this.setState(1570);
                    this.showVariablesStatement();
                    }
                    break;
                case 53:
                    this.enterOuterAlt(localctx, 53);
                    {
                    this.setState(1571);
                    this.showCharacterSetStatement();
                    }
                    break;
                case 54:
                    this.enterOuterAlt(localctx, 54);
                    {
                    this.setState(1572);
                    this.showCollationStatement();
                    }
                    break;
                case 55:
                    this.enterOuterAlt(localctx, 55);
                    {
                    this.setState(1573);
                    this.showPrivilegesStatement();
                    }
                    break;
                case 56:
                    this.enterOuterAlt(localctx, 56);
                    {
                    this.setState(1574);
                    this.showGrantsStatement();
                    }
                    break;
                case 57:
                    this.enterOuterAlt(localctx, 57);
                    {
                    this.setState(1575);
                    this.showCreateDatabaseStatement();
                    }
                    break;
                case 58:
                    this.enterOuterAlt(localctx, 58);
                    {
                    this.setState(1576);
                    this.showCreateTableStatement();
                    }
                    break;
                case 59:
                    this.enterOuterAlt(localctx, 59);
                    {
                    this.setState(1577);
                    this.showCreateViewStatement();
                    }
                    break;
                case 60:
                    this.enterOuterAlt(localctx, 60);
                    {
                    this.setState(1578);
                    this.showMasterStatusStatement();
                    }
                    break;
                case 61:
                    this.enterOuterAlt(localctx, 61);
                    {
                    this.setState(1579);
                    this.showReplicaStatusStatement();
                    }
                    break;
                case 62:
                    this.enterOuterAlt(localctx, 62);
                    {
                    this.setState(1580);
                    this.showCreateProcedureStatement();
                    }
                    break;
                case 63:
                    this.enterOuterAlt(localctx, 63);
                    {
                    this.setState(1581);
                    this.showCreateFunctionStatement();
                    }
                    break;
                case 64:
                    this.enterOuterAlt(localctx, 64);
                    {
                    this.setState(1582);
                    this.showCreateTriggerStatement();
                    }
                    break;
                case 65:
                    this.enterOuterAlt(localctx, 65);
                    {
                    this.setState(1583);
                    this.showCreateProcedureStatusStatement();
                    }
                    break;
                case 66:
                    this.enterOuterAlt(localctx, 66);
                    {
                    this.setState(1584);
                    this.showCreateFunctionStatusStatement();
                    }
                    break;
                case 67:
                    this.enterOuterAlt(localctx, 67);
                    {
                    this.setState(1585);
                    this.showCreateProcedureCodeStatement();
                    }
                    break;
                case 68:
                    this.enterOuterAlt(localctx, 68);
                    {
                    this.setState(1586);
                    this.showCreateFunctionCodeStatement();
                    }
                    break;
                case 69:
                    this.enterOuterAlt(localctx, 69);
                    {
                    this.setState(1587);
                    this.showCreateEventStatement();
                    }
                    break;
                case 70:
                    this.enterOuterAlt(localctx, 70);
                    {
                    this.setState(1588);
                    this.showCreateUserStatement();
                    }
                    break;
                case 71:
                    this.enterOuterAlt(localctx, 71);
                    {
                    this.setState(1589);
                    this.resourceGroupManagement();
                    }
                    break;
                case 72:
                    this.enterOuterAlt(localctx, 72);
                    {
                    this.setState(1590);
                    this.otherAdministrativeStatement();
                    }
                    break;
                case 73:
                    this.enterOuterAlt(localctx, 73);
                    {
                    this.setState(1591);
                    this.utilityStatement();
                    }
                    break;
                case 74:
                    this.enterOuterAlt(localctx, 74);
                    {
                    this.setState(1592);
                    this.getDiagnosticsStatement();
                    }
                    break;
                case 75:
                    this.enterOuterAlt(localctx, 75);
                    {
                    this.setState(1593);
                    this.signalStatement();
                    }
                    break;
                case 76:
                    this.enterOuterAlt(localctx, 76);
                    {
                    this.setState(1594);
                    this.resignalStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterStatement(): AlterStatementContext {
        let localctx = new AlterStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 4, MySQLParser.RULE_alterStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1597);
            this.match(MySQLParser.ALTER_SYMBOL);
            this.setState(1618);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 6, this.getContext())) {
                case 1:
                    {
                    this.setState(1598);
                    this.alterTable();
                    }
                    break;
                case 2:
                    {
                    this.setState(1599);
                    this.alterDatabase();
                    }
                    break;
                case 3:
                    {
                    this.setState(1600);
                    this.match(MySQLParser.PROCEDURE_SYMBOL);
                    this.setState(1601);
                    this.procedureRef();
                    this.setState(1603);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 118 || _la === 133 || _la === 174 || _la === 297 || ((((_la - 370)) & ~0x1F) === 0 && ((1 << (_la - 370)) & 5242881) !== 0) || _la === 451 || _la === 547) {
                        {
                        this.setState(1602);
                        this.routineAlterOptions();
                        }
                    }

                    }
                    break;
                case 4:
                    {
                    this.setState(1605);
                    this.match(MySQLParser.FUNCTION_SYMBOL);
                    this.setState(1606);
                    this.functionRef();
                    this.setState(1608);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 118 || _la === 133 || _la === 174 || _la === 297 || ((((_la - 370)) & ~0x1F) === 0 && ((1 << (_la - 370)) & 5242881) !== 0) || _la === 451 || _la === 547) {
                        {
                        this.setState(1607);
                        this.routineAlterOptions();
                        }
                    }

                    }
                    break;
                case 5:
                    {
                    this.setState(1610);
                    this.alterView();
                    }
                    break;
                case 6:
                    {
                    this.setState(1611);
                    this.alterEvent();
                    }
                    break;
                case 7:
                    {
                    this.setState(1612);
                    this.alterTablespace();
                    }
                    break;
                case 8:
                    {
                    this.setState(1613);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(1614);
                    this.alterUndoTablespace();
                    }
                    break;
                case 9:
                    {
                    this.setState(1615);
                    this.alterLogfileGroup();
                    }
                    break;
                case 10:
                    {
                    this.setState(1616);
                    this.alterServer();
                    }
                    break;
                case 11:
                    {
                    this.setState(1617);
                    this.alterInstanceStatement();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterDatabase(): AlterDatabaseContext {
        let localctx = new AlterDatabaseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 6, MySQLParser.RULE_alterDatabase);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1620);
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.setState(1621);
            this.schemaRef();
            this.setState(1623);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(1622);
                            this.alterDatabaseOption();
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(1625);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 7, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterDatabaseOption(): AlterDatabaseOptionContext {
        let localctx = new AlterDatabaseOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 8, MySQLParser.RULE_alterDatabaseOption);
        let _la: number;
        try {
            this.setState(1634);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 9, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1627);
                    this.createDatabaseOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1628);
                    this.match(MySQLParser.READ_SYMBOL);
                    this.setState(1629);
                    this.match(MySQLParser.ONLY_SYMBOL);
                    this.setState(1631);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(1630);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(1633);
                    this.ternaryOption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterEvent(): AlterEventContext {
        let localctx = new AlterEventContext(this.getContext(), this.getState());
        this.enterRule(localctx, 10, MySQLParser.RULE_alterEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1637);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 168) {
                {
                this.setState(1636);
                this.definerClause();
                }
            }

            this.setState(1639);
            this.match(MySQLParser.EVENT_SYMBOL);
            this.setState(1640);
            this.eventRef();
            this.setState(1644);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 11, this.getContext())) {
                case 1:
                    {
                    this.setState(1641);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(1642);
                    this.match(MySQLParser.SCHEDULE_SYMBOL);
                    this.setState(1643);
                    this.schedule();
                    }
                    break;
            }
            this.setState(1652);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 401) {
                {
                this.setState(1646);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(1647);
                this.match(MySQLParser.COMPLETION_SYMBOL);
                this.setState(1649);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 390) {
                    {
                    this.setState(1648);
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.setState(1651);
                this.match(MySQLParser.PRESERVE_SYMBOL);
                }
            }

            this.setState(1657);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 470) {
                {
                this.setState(1654);
                this.match(MySQLParser.RENAME_SYMBOL);
                this.setState(1655);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(1656);
                this.identifier();
                }
            }

            this.setState(1665);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ENABLE_SYMBOL:
                {
                this.setState(1659);
                this.match(MySQLParser.ENABLE_SYMBOL);
                }
                break;
            case MySQLParser.DISABLE_SYMBOL:
                {
                this.setState(1660);
                this.match(MySQLParser.DISABLE_SYMBOL);
                this.setState(1663);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 401) {
                    {
                    this.setState(1661);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(1662);
                    this.replica();
                    }
                }

                }
                break;
            case MySQLParser.EOF:
            case MySQLParser.SEMICOLON_SYMBOL:
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.DO_SYMBOL:
                break;
            default:
                break;
            }
            this.setState(1669);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 118) {
                {
                this.setState(1667);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(1668);
                this.textLiteral();
                }
            }

            this.setState(1673);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 183) {
                {
                this.setState(1671);
                this.match(MySQLParser.DO_SYMBOL);
                this.setState(1672);
                this.compoundStatement();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterLogfileGroup(): AlterLogfileGroupContext {
        let localctx = new AlterLogfileGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 12, MySQLParser.RULE_alterLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1675);
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.setState(1676);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(1677);
            this.logfileGroupRef();
            this.setState(1678);
            this.match(MySQLParser.ADD_SYMBOL);
            this.setState(1679);
            this.match(MySQLParser.UNDOFILE_SYMBOL);
            this.setState(1680);
            this.textLiteral();
            this.setState(1682);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 198 || _la === 270 || _la === 393 || _la === 563 || _la === 646) {
                {
                this.setState(1681);
                this.alterLogfileGroupOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext {
        let localctx = new AlterLogfileGroupOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 14, MySQLParser.RULE_alterLogfileGroupOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1684);
            this.alterLogfileGroupOption();
            this.setState(1691);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29 || _la === 198 || _la === 270 || _la === 393 || _la === 563 || _la === 646) {
                {
                {
                this.setState(1686);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(1685);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(1688);
                this.alterLogfileGroupOption();
                }
                }
                this.setState(1693);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterLogfileGroupOption(): AlterLogfileGroupOptionContext {
        let localctx = new AlterLogfileGroupOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 16, MySQLParser.RULE_alterLogfileGroupOption);
        try {
            this.setState(1697);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(1694);
                this.tsOptionInitialSize();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(1695);
                this.tsOptionEngine();
                }
                break;
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(1696);
                this.tsOptionWait();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterServer(): AlterServerContext {
        let localctx = new AlterServerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 18, MySQLParser.RULE_alterServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1699);
            this.match(MySQLParser.SERVER_SYMBOL);
            this.setState(1700);
            this.serverRef();
            this.setState(1701);
            this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTable(): AlterTableContext {
        let localctx = new AlterTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 20, MySQLParser.RULE_alterTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1704);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 399 || _la === 403) {
                {
                this.setState(1703);
                this.onlineOption();
                }
            }

            this.setState(1706);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(1707);
            this.tableRef();
            this.setState(1709);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 24, this.getContext())) {
                case 1:
                    {
                    this.setState(1708);
                    this.alterTableActions();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTableActions(): AlterTableActionsContext {
        let localctx = new AlterTableActionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 22, MySQLParser.RULE_alterTableActions);
        try {
            this.setState(1724);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 27, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1711);
                    this.alterCommandList();
                    this.setState(1714);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.PARTITION_SYMBOL:
                        {
                        this.setState(1712);
                        this.partitionClause();
                        }
                        break;
                    case MySQLParser.REMOVE_SYMBOL:
                        {
                        this.setState(1713);
                        this.removePartitioning();
                        }
                        break;
                    case MySQLParser.EOF:
                    case MySQLParser.SEMICOLON_SYMBOL:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1716);
                    this.partitionClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(1717);
                    this.removePartitioning();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(1721);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 26, this.getContext())) {
                        case 1:
                            {
                            this.setState(1718);
                            this.alterCommandsModifierList();
                            this.setState(1719);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1723);
                    this.standaloneAlterCommands();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterCommandList(): AlterCommandListContext {
        let localctx = new AlterCommandListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 24, MySQLParser.RULE_alterCommandList);
        try {
            this.setState(1733);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 29, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1726);
                    this.alterCommandsModifierList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1730);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 28, this.getContext())) {
                        case 1:
                            {
                            this.setState(1727);
                            this.alterCommandsModifierList();
                            this.setState(1728);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1732);
                    this.alterList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext {
        let localctx = new AlterCommandsModifierListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 26, MySQLParser.RULE_alterCommandsModifierList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1735);
            this.alterCommandsModifier();
            this.setState(1740);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 30, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(1736);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(1737);
                    this.alterCommandsModifier();
                    }
                    }
                }
                this.setState(1742);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 30, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public standaloneAlterCommands(): StandaloneAlterCommandsContext {
        let localctx = new StandaloneAlterCommandsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 28, MySQLParser.RULE_standaloneAlterCommands);
        let _la: number;
        try {
            this.setState(1750);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 31, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1743);
                    this.match(MySQLParser.DISCARD_SYMBOL);
                    this.setState(1744);
                    this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1745);
                    this.match(MySQLParser.IMPORT_SYMBOL);
                    this.setState(1746);
                    this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(1747);
                    this.alterPartition();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(1748);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(1749);
                    _la = this.input().LA(1);
                    if(!(_la === 730 || _la === 731)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterPartition(): AlterPartitionContext {
        let localctx = new AlterPartitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 30, MySQLParser.RULE_alterPartition);
        let _la: number;
        try {
            this.setState(1846);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ADD_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(1752);
                this.match(MySQLParser.ADD_SYMBOL);
                this.setState(1753);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1755);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.setState(1754);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(1760);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.OPEN_PAR_SYMBOL:
                    {
                    this.setState(1757);
                    this.partitionDefinitions();
                    }
                    break;
                case MySQLParser.PARTITIONS_SYMBOL:
                    {
                    this.setState(1758);
                    this.match(MySQLParser.PARTITIONS_SYMBOL);
                    this.setState(1759);
                    this.real_ulong_number();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(1762);
                this.match(MySQLParser.DROP_SYMBOL);
                this.setState(1763);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1764);
                this.identifierList();
                }
                break;
            case MySQLParser.REBUILD_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(1765);
                this.match(MySQLParser.REBUILD_SYMBOL);
                this.setState(1766);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1768);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 34, this.getContext())) {
                    case 1:
                        {
                        this.setState(1767);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1770);
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.OPTIMIZE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(1771);
                this.match(MySQLParser.OPTIMIZE_SYMBOL);
                this.setState(1772);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1774);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 35, this.getContext())) {
                    case 1:
                        {
                        this.setState(1773);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1776);
                this.allOrPartitionNameList();
                this.setState(1778);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.setState(1777);
                    this.noWriteToBinLog();
                    }
                }

                }
                break;
            case MySQLParser.ANALYZE_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(1780);
                this.match(MySQLParser.ANALYZE_SYMBOL);
                this.setState(1781);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1783);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 37, this.getContext())) {
                    case 1:
                        {
                        this.setState(1782);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1785);
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.CHECK_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(1786);
                this.match(MySQLParser.CHECK_SYMBOL);
                this.setState(1787);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1788);
                this.allOrPartitionNameList();
                this.setState(1792);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 100 || ((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 131089) !== 0) || _la === 357 || _la === 449) {
                    {
                    {
                    this.setState(1789);
                    this.checkOption();
                    }
                    }
                    this.setState(1794);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.REPAIR_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(1795);
                this.match(MySQLParser.REPAIR_SYMBOL);
                this.setState(1796);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1798);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 39, this.getContext())) {
                    case 1:
                        {
                        this.setState(1797);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1800);
                this.allOrPartitionNameList();
                this.setState(1804);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 215 || _la === 449 || _la === 628) {
                    {
                    {
                    this.setState(1801);
                    this.repairType();
                    }
                    }
                    this.setState(1806);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.COALESCE_SYMBOL:
                this.enterOuterAlt(localctx, 8);
                {
                this.setState(1807);
                this.match(MySQLParser.COALESCE_SYMBOL);
                this.setState(1808);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1810);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.setState(1809);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(1812);
                this.real_ulong_number();
                }
                break;
            case MySQLParser.TRUNCATE_SYMBOL:
                this.enterOuterAlt(localctx, 9);
                {
                this.setState(1813);
                this.match(MySQLParser.TRUNCATE_SYMBOL);
                this.setState(1814);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1815);
                this.allOrPartitionNameList();
                }
                break;
            case MySQLParser.REORGANIZE_SYMBOL:
                this.enterOuterAlt(localctx, 10);
                {
                this.setState(1816);
                this.match(MySQLParser.REORGANIZE_SYMBOL);
                this.setState(1817);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1819);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 42, this.getContext())) {
                    case 1:
                        {
                        this.setState(1818);
                        this.noWriteToBinLog();
                        }
                        break;
                }
                this.setState(1825);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 43, this.getContext())) {
                    case 1:
                        {
                        this.setState(1821);
                        this.identifierList();
                        this.setState(1822);
                        this.match(MySQLParser.INTO_SYMBOL);
                        this.setState(1823);
                        this.partitionDefinitions();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.EXCHANGE_SYMBOL:
                this.enterOuterAlt(localctx, 11);
                {
                this.setState(1827);
                this.match(MySQLParser.EXCHANGE_SYMBOL);
                this.setState(1828);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1829);
                this.identifier();
                this.setState(1830);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(1831);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(1832);
                this.tableRef();
                this.setState(1834);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 653 || _la === 654) {
                    {
                    this.setState(1833);
                    this.withValidation();
                    }
                }

                }
                break;
            case MySQLParser.DISCARD_SYMBOL:
                this.enterOuterAlt(localctx, 12);
                {
                this.setState(1836);
                this.match(MySQLParser.DISCARD_SYMBOL);
                this.setState(1837);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1838);
                this.allOrPartitionNameList();
                this.setState(1839);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                }
                break;
            case MySQLParser.IMPORT_SYMBOL:
                this.enterOuterAlt(localctx, 13);
                {
                this.setState(1841);
                this.match(MySQLParser.IMPORT_SYMBOL);
                this.setState(1842);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(1843);
                this.allOrPartitionNameList();
                this.setState(1844);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterList(): AlterListContext {
        let localctx = new AlterListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 32, MySQLParser.RULE_alterList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(1850);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 46, this.getContext())) {
                case 1:
                    {
                    this.setState(1848);
                    this.alterListItem();
                    }
                    break;
                case 2:
                    {
                    this.setState(1849);
                    this.createTableOptionsSpaceSeparated();
                    }
                    break;
            }
            this.setState(1860);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(1852);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(1856);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 47, this.getContext())) {
                    case 1:
                        {
                        this.setState(1853);
                        this.alterListItem();
                        }
                        break;
                    case 2:
                        {
                        this.setState(1854);
                        this.alterCommandsModifier();
                        }
                        break;
                    case 3:
                        {
                        this.setState(1855);
                        this.createTableOptionsSpaceSeparated();
                        }
                        break;
                }
                }
                }
                this.setState(1862);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterCommandsModifier(): AlterCommandsModifierContext {
        let localctx = new AlterCommandsModifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 34, MySQLParser.RULE_alterCommandsModifier);
        try {
            this.setState(1866);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(1863);
                this.alterAlgorithmOption();
                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(1864);
                this.alterLockOption();
                }
                break;
            case MySQLParser.WITH_SYMBOL:
            case MySQLParser.WITHOUT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(1865);
                this.withValidation();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterListItem(): AlterListItemContext {
        let localctx = new AlterListItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 36, MySQLParser.RULE_alterListItem);
        let _la: number;
        try {
            this.setState(2003);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 67, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(1868);
                    this.match(MySQLParser.ADD_SYMBOL);
                    this.setState(1870);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 50, this.getContext())) {
                        case 1:
                            {
                            this.setState(1869);
                            this.match(MySQLParser.COLUMN_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1884);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 53, this.getContext())) {
                        case 1:
                            {
                            this.setState(1872);
                            this.identifier();
                            this.setState(1873);
                            this.fieldDefinition();
                            this.setState(1875);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 51, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(1874);
                                    this.checkOrReferences();
                                    }
                                    break;
                            }
                            this.setState(1878);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 53 || _la === 225) {
                                {
                                this.setState(1877);
                                this.place();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(1880);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(1881);
                            this.tableElementList();
                            this.setState(1882);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(1886);
                    this.match(MySQLParser.ADD_SYMBOL);
                    this.setState(1887);
                    this.tableConstraintDef();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(1888);
                    this.match(MySQLParser.CHANGE_SYMBOL);
                    this.setState(1890);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 54, this.getContext())) {
                        case 1:
                            {
                            this.setState(1889);
                            this.match(MySQLParser.COLUMN_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1892);
                    this.columnInternalRef();
                    this.setState(1893);
                    this.identifier();
                    this.setState(1894);
                    this.fieldDefinition();
                    this.setState(1896);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 53 || _la === 225) {
                        {
                        this.setState(1895);
                        this.place();
                        }
                    }

                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(1898);
                    this.match(MySQLParser.MODIFY_SYMBOL);
                    this.setState(1900);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 56, this.getContext())) {
                        case 1:
                            {
                            this.setState(1899);
                            this.match(MySQLParser.COLUMN_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1902);
                    this.columnInternalRef();
                    this.setState(1903);
                    this.fieldDefinition();
                    this.setState(1905);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 53 || _la === 225) {
                        {
                        this.setState(1904);
                        this.place();
                        }
                    }

                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(1907);
                    this.match(MySQLParser.DROP_SYMBOL);
                    this.setState(1929);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 60, this.getContext())) {
                        case 1:
                            {
                            this.setState(1909);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 58, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(1908);
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                    }
                                    break;
                            }
                            this.setState(1911);
                            this.columnInternalRef();
                            this.setState(1913);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 93 || _la === 488) {
                                {
                                this.setState(1912);
                                this.restrict();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(1915);
                            this.match(MySQLParser.FOREIGN_SYMBOL);
                            this.setState(1916);
                            this.match(MySQLParser.KEY_SYMBOL);
                            this.setState(1917);
                            this.columnInternalRef();
                            }
                            break;
                        case 3:
                            {
                            this.setState(1918);
                            this.match(MySQLParser.PRIMARY_SYMBOL);
                            this.setState(1919);
                            this.match(MySQLParser.KEY_SYMBOL);
                            }
                            break;
                        case 4:
                            {
                            this.setState(1920);
                            this.keyOrIndex();
                            this.setState(1921);
                            this.indexRef();
                            }
                            break;
                        case 5:
                            {
                            this.setState(1923);
                            if (!(this.serverVersion >= 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80017");
                            }
                            this.setState(1924);
                            this.match(MySQLParser.CHECK_SYMBOL);
                            this.setState(1925);
                            this.identifier();
                            }
                            break;
                        case 6:
                            {
                            this.setState(1926);
                            if (!(this.serverVersion >= 80019)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80019");
                            }
                            this.setState(1927);
                            this.match(MySQLParser.CONSTRAINT_SYMBOL);
                            this.setState(1928);
                            this.identifier();
                            }
                            break;
                    }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(1931);
                    this.match(MySQLParser.DISABLE_SYMBOL);
                    this.setState(1932);
                    this.match(MySQLParser.KEYS_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(1933);
                    this.match(MySQLParser.ENABLE_SYMBOL);
                    this.setState(1934);
                    this.match(MySQLParser.KEYS_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(1935);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(1937);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 61, this.getContext())) {
                        case 1:
                            {
                            this.setState(1936);
                            this.match(MySQLParser.COLUMN_SYMBOL);
                            }
                            break;
                    }
                    this.setState(1939);
                    this.columnInternalRef();
                    this.setState(1952);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 63, this.getContext())) {
                        case 1:
                            {
                            this.setState(1940);
                            this.match(MySQLParser.SET_SYMBOL);
                            this.setState(1941);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            this.setState(1945);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 62, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(1942);
                                    if (!(this.serverVersion >= 80014)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                                    }
                                    this.setState(1943);
                                    this.exprWithParentheses();
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(1944);
                                    this.signedLiteralOrNull();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(1947);
                            this.match(MySQLParser.DROP_SYMBOL);
                            this.setState(1948);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                        case 3:
                            {
                            this.setState(1949);
                            if (!(this.serverVersion >= 80024)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80024");
                            }
                            this.setState(1950);
                            this.match(MySQLParser.SET_SYMBOL);
                            this.setState(1951);
                            this.visibility();
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(1954);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(1955);
                    this.match(MySQLParser.INDEX_SYMBOL);
                    this.setState(1956);
                    this.indexRef();
                    this.setState(1957);
                    this.visibility();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(1959);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(1960);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(1961);
                    this.match(MySQLParser.CHECK_SYMBOL);
                    this.setState(1962);
                    this.identifier();
                    this.setState(1963);
                    this.constraintEnforcement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(1965);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(1966);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(1967);
                    this.match(MySQLParser.CONSTRAINT_SYMBOL);
                    this.setState(1968);
                    this.identifier();
                    this.setState(1969);
                    this.constraintEnforcement();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(1971);
                    this.match(MySQLParser.RENAME_SYMBOL);
                    this.setState(1972);
                    this.match(MySQLParser.COLUMN_SYMBOL);
                    this.setState(1973);
                    this.columnInternalRef();
                    this.setState(1974);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(1975);
                    this.identifier();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(1977);
                    this.match(MySQLParser.RENAME_SYMBOL);
                    this.setState(1979);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 64, this.getContext())) {
                        case 1:
                            {
                            this.setState(1978);
                            _la = this.input().LA(1);
                            if(!(_la === 63 || _la === 599)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                    }
                    this.setState(1981);
                    this.tableName();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(1982);
                    this.match(MySQLParser.RENAME_SYMBOL);
                    this.setState(1983);
                    this.keyOrIndex();
                    this.setState(1984);
                    this.indexRef();
                    this.setState(1985);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(1986);
                    this.indexName();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(1988);
                    this.match(MySQLParser.CONVERT_SYMBOL);
                    this.setState(1989);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(1990);
                    this.charset();
                    this.setState(1994);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 65, this.getContext())) {
                        case 1:
                            {
                            this.setState(1991);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(1992);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(1993);
                            this.charsetName();
                            }
                            break;
                    }
                    this.setState(1997);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 112) {
                        {
                        this.setState(1996);
                        this.collate();
                        }
                    }

                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(1999);
                    this.match(MySQLParser.FORCE_SYMBOL);
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(2000);
                    this.match(MySQLParser.ORDER_SYMBOL);
                    this.setState(2001);
                    this.match(MySQLParser.BY_SYMBOL);
                    this.setState(2002);
                    this.alterOrderList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public place(): PlaceContext {
        let localctx = new PlaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 38, MySQLParser.RULE_place);
        try {
            this.setState(2008);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.AFTER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2005);
                this.match(MySQLParser.AFTER_SYMBOL);
                this.setState(2006);
                this.identifier();
                }
                break;
            case MySQLParser.FIRST_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2007);
                this.match(MySQLParser.FIRST_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public restrict(): RestrictContext {
        let localctx = new RestrictContext(this.getContext(), this.getState());
        this.enterRule(localctx, 40, MySQLParser.RULE_restrict);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2010);
            _la = this.input().LA(1);
            if(!(_la === 93 || _la === 488)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterOrderList(): AlterOrderListContext {
        let localctx = new AlterOrderListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 42, MySQLParser.RULE_alterOrderList);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2012);
            this.identifier();
            this.setState(2014);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 64 || _la === 172) {
                {
                this.setState(2013);
                this.direction();
                }
            }

            this.setState(2023);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 71, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2016);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(2017);
                    this.identifier();
                    this.setState(2019);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 64 || _la === 172) {
                        {
                        this.setState(2018);
                        this.direction();
                        }
                    }

                    }
                    }
                }
                this.setState(2025);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 71, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext {
        let localctx = new AlterAlgorithmOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 44, MySQLParser.RULE_alterAlgorithmOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2026);
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.setState(2028);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 72, this.getContext())) {
                case 1:
                    {
                    this.setState(2027);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2032);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 73, this.getContext())) {
                case 1:
                    {
                    this.setState(2030);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(2031);
                    this.identifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterLockOption(): AlterLockOptionContext {
        let localctx = new AlterLockOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 46, MySQLParser.RULE_alterLockOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2034);
            this.match(MySQLParser.LOCK_SYMBOL);
            this.setState(2036);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 74, this.getContext())) {
                case 1:
                    {
                    this.setState(2035);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2040);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 75, this.getContext())) {
                case 1:
                    {
                    this.setState(2038);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(2039);
                    this.identifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
        let localctx = new IndexLockAndAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 48, MySQLParser.RULE_indexLockAndAlgorithm);
        let _la: number;
        try {
            this.setState(2050);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2042);
                this.alterAlgorithmOption();
                this.setState(2044);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 314) {
                    {
                    this.setState(2043);
                    this.alterLockOption();
                    }
                }

                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2046);
                this.alterLockOption();
                this.setState(2048);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 56) {
                    {
                    this.setState(2047);
                    this.alterAlgorithmOption();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public withValidation(): WithValidationContext {
        let localctx = new WithValidationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 50, MySQLParser.RULE_withValidation);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2052);
            _la = this.input().LA(1);
            if(!(_la === 653 || _la === 654)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2053);
            this.match(MySQLParser.VALIDATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public removePartitioning(): RemovePartitioningContext {
        let localctx = new RemovePartitioningContext(this.getContext(), this.getState());
        this.enterRule(localctx, 52, MySQLParser.RULE_removePartitioning);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2055);
            this.match(MySQLParser.REMOVE_SYMBOL);
            this.setState(2056);
            this.match(MySQLParser.PARTITIONING_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        let localctx = new AllOrPartitionNameListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 54, MySQLParser.RULE_allOrPartitionNameList);
        try {
            this.setState(2060);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 79, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2058);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2059);
                    this.identifierList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTablespace(): AlterTablespaceContext {
        let localctx = new AlterTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 56, MySQLParser.RULE_alterTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2062);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2063);
            this.tablespaceRef();
            this.setState(2075);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 81, this.getContext())) {
                case 1:
                    {
                    this.setState(2064);
                    _la = this.input().LA(1);
                    if(!(_la === 51 || _la === 184)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(2065);
                    this.match(MySQLParser.DATAFILE_SYMBOL);
                    this.setState(2066);
                    this.textLiteral();
                    this.setState(2068);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 80, this.getContext())) {
                        case 1:
                            {
                            this.setState(2067);
                            this.alterTablespaceOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(2070);
                    this.match(MySQLParser.RENAME_SYMBOL);
                    this.setState(2071);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(2072);
                    this.identifier();
                    }
                    break;
                case 3:
                    {
                    this.setState(2073);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2074);
                    this.alterTablespaceOptions();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterUndoTablespace(): AlterUndoTablespaceContext {
        let localctx = new AlterUndoTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 58, MySQLParser.RULE_alterUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2077);
            this.match(MySQLParser.UNDO_SYMBOL);
            this.setState(2078);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2079);
            this.tablespaceRef();
            this.setState(2080);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(2081);
            _la = this.input().LA(1);
            if(!(_la === 732 || _la === 733)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2083);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 198 || _la === 563) {
                {
                this.setState(2082);
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
        let localctx = new UndoTableSpaceOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 60, MySQLParser.RULE_undoTableSpaceOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2085);
            this.undoTableSpaceOption();
            this.setState(2092);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29 || _la === 198 || _la === 563) {
                {
                {
                this.setState(2087);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(2086);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(2089);
                this.undoTableSpaceOption();
                }
                }
                this.setState(2094);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public undoTableSpaceOption(): UndoTableSpaceOptionContext {
        let localctx = new UndoTableSpaceOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 62, MySQLParser.RULE_undoTableSpaceOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2095);
            this.tsOptionEngine();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTablespaceOptions(): AlterTablespaceOptionsContext {
        let localctx = new AlterTablespaceOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 64, MySQLParser.RULE_alterTablespaceOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2097);
            this.alterTablespaceOption();
            this.setState(2104);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 86, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2099);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 85, this.getContext())) {
                        case 1:
                            {
                            this.setState(2098);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(2101);
                    this.alterTablespaceOption();
                    }
                    }
                }
                this.setState(2106);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 86, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterTablespaceOption(): AlterTablespaceOptionContext {
        let localctx = new AlterTablespaceOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 66, MySQLParser.RULE_alterTablespaceOption);
        try {
            this.setState(2119);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 88, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2107);
                    this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                    this.setState(2109);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 87, this.getContext())) {
                        case 1:
                            {
                            this.setState(2108);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(2111);
                    this.sizeNumber();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2112);
                    this.tsOptionAutoextendSize();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(2113);
                    this.tsOptionMaxSize();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(2114);
                    this.tsOptionEngine();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(2115);
                    this.tsOptionWait();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(2116);
                    this.tsOptionEncryption();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(2117);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(2118);
                    this.tsOptionEngineAttribute();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeTablespaceOption(): ChangeTablespaceOptionContext {
        let localctx = new ChangeTablespaceOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 68, MySQLParser.RULE_changeTablespaceOption);
        try {
            this.setState(2128);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2121);
                this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                this.setState(2123);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 89, this.getContext())) {
                    case 1:
                        {
                        this.setState(2122);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2125);
                this.sizeNumber();
                }
                break;
            case MySQLParser.AUTOEXTEND_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2126);
                this.tsOptionAutoextendSize();
                }
                break;
            case MySQLParser.MAX_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2127);
                this.tsOptionMaxSize();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterView(): AlterViewContext {
        let localctx = new AlterViewContext(this.getContext(), this.getState());
        this.enterRule(localctx, 70, MySQLParser.RULE_alterView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2131);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 56) {
                {
                this.setState(2130);
                this.viewAlgorithm();
                }
            }

            this.setState(2134);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 168) {
                {
                this.setState(2133);
                this.definerClause();
                }
            }

            this.setState(2137);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 547) {
                {
                this.setState(2136);
                this.viewSuid();
                }
            }

            this.setState(2139);
            this.match(MySQLParser.VIEW_SYMBOL);
            this.setState(2140);
            this.viewRef();
            this.setState(2141);
            this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewTail(): ViewTailContext {
        let localctx = new ViewTailContext(this.getContext(), this.getState());
        this.enterRule(localctx, 72, MySQLParser.RULE_viewTail);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2144);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 32) {
                {
                this.setState(2143);
                this.columnInternalRefList();
                }
            }

            this.setState(2146);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(2147);
            this.viewQueryBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewQueryBlock(): ViewQueryBlockContext {
        let localctx = new ViewQueryBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 74, MySQLParser.RULE_viewQueryBlock);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2149);
            this.queryExpressionWithOptLockingClauses();
            this.setState(2151);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 653) {
                {
                this.setState(2150);
                this.viewCheckOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewCheckOption(): ViewCheckOptionContext {
        let localctx = new ViewCheckOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 76, MySQLParser.RULE_viewCheckOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2153);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(2155);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 94 || _la === 312) {
                {
                this.setState(2154);
                _la = this.input().LA(1);
                if(!(_la === 94 || _la === 312)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(2157);
            this.match(MySQLParser.CHECK_SYMBOL);
            this.setState(2158);
            this.match(MySQLParser.OPTION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterInstanceStatement(): AlterInstanceStatementContext {
        let localctx = new AlterInstanceStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 78, MySQLParser.RULE_alterInstanceStatement);
        let _la: number;
        try {
            this.setState(2192);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 100, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2160);
                    this.match(MySQLParser.INSTANCE_SYMBOL);
                    this.setState(2161);
                    this.match(MySQLParser.ROTATE_SYMBOL);
                    this.setState(2162);
                    this.textOrIdentifier();
                    this.setState(2163);
                    this.match(MySQLParser.MASTER_SYMBOL);
                    this.setState(2164);
                    this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2166);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(2190);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 99, this.getContext())) {
                        case 1:
                            {
                            this.setState(2167);
                            this.match(MySQLParser.RELOAD_SYMBOL);
                            this.setState(2168);
                            this.match(MySQLParser.TLS_SYMBOL);
                            this.setState(2182);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                            case MySQLParser.NO_SYMBOL:
                                {
                                this.setState(2169);
                                this.match(MySQLParser.NO_SYMBOL);
                                this.setState(2170);
                                this.match(MySQLParser.ROLLBACK_SYMBOL);
                                this.setState(2171);
                                this.match(MySQLParser.ON_SYMBOL);
                                this.setState(2172);
                                this.match(MySQLParser.ERROR_SYMBOL);
                                }
                                break;
                            case MySQLParser.FOR_SYMBOL:
                                {
                                this.setState(2173);
                                this.match(MySQLParser.FOR_SYMBOL);
                                this.setState(2174);
                                this.match(MySQLParser.CHANNEL_SYMBOL);
                                this.setState(2175);
                                this.identifier();
                                this.setState(2180);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                                if (_la === 392) {
                                    {
                                    this.setState(2176);
                                    this.match(MySQLParser.NO_SYMBOL);
                                    this.setState(2177);
                                    this.match(MySQLParser.ROLLBACK_SYMBOL);
                                    this.setState(2178);
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.setState(2179);
                                    this.match(MySQLParser.ERROR_SYMBOL);
                                    }
                                }

                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(2184);
                            _la = this.input().LA(1);
                            if(!(_la === 177 || _la === 192)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(2185);
                            this.identifier();
                            this.setState(2186);
                            this.identifier();
                            }
                            break;
                        case 3:
                            {
                            this.setState(2188);
                            this.match(MySQLParser.RELOAD_SYMBOL);
                            this.setState(2189);
                            this.match(MySQLParser.KEYRING_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createStatement(): CreateStatementContext {
        let localctx = new CreateStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 80, MySQLParser.RULE_createStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2194);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(2212);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 101, this.getContext())) {
                case 1:
                    {
                    this.setState(2195);
                    this.createDatabase();
                    }
                    break;
                case 2:
                    {
                    this.setState(2196);
                    this.createTable();
                    }
                    break;
                case 3:
                    {
                    this.setState(2197);
                    this.createFunction();
                    }
                    break;
                case 4:
                    {
                    this.setState(2198);
                    this.createProcedure();
                    }
                    break;
                case 5:
                    {
                    this.setState(2199);
                    this.createUdf();
                    }
                    break;
                case 6:
                    {
                    this.setState(2200);
                    this.createLogfileGroup();
                    }
                    break;
                case 7:
                    {
                    this.setState(2201);
                    this.createView();
                    }
                    break;
                case 8:
                    {
                    this.setState(2202);
                    this.createTrigger();
                    }
                    break;
                case 9:
                    {
                    this.setState(2203);
                    this.createIndex();
                    }
                    break;
                case 10:
                    {
                    this.setState(2204);
                    this.createServer();
                    }
                    break;
                case 11:
                    {
                    this.setState(2205);
                    this.createTablespace();
                    }
                    break;
                case 12:
                    {
                    this.setState(2206);
                    this.createEvent();
                    }
                    break;
                case 13:
                    {
                    this.setState(2207);
                    this.createRole();
                    }
                    break;
                case 14:
                    {
                    this.setState(2208);
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.setState(2209);
                    this.createSpatialReference();
                    }
                    break;
                case 15:
                    {
                    this.setState(2210);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2211);
                    this.createUndoTablespace();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createDatabase(): CreateDatabaseContext {
        let localctx = new CreateDatabaseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 82, MySQLParser.RULE_createDatabase);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2214);
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.setState(2216);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 102, this.getContext())) {
                case 1:
                    {
                    this.setState(2215);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2218);
            this.schemaName();
            this.setState(2222);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 103, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2219);
                    this.createDatabaseOption();
                    }
                    }
                }
                this.setState(2224);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 103, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createDatabaseOption(): CreateDatabaseOptionContext {
        let localctx = new CreateDatabaseOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 84, MySQLParser.RULE_createDatabaseOption);
        try {
            this.setState(2229);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 104, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2225);
                    this.defaultCharset();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2226);
                    this.defaultCollation();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(2227);
                    if (!(this.serverVersion >= 80016)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80016");
                    }
                    this.setState(2228);
                    this.defaultEncryption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTable(): CreateTableContext {
        let localctx = new CreateTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 86, MySQLParser.RULE_createTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2232);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 586) {
                {
                this.setState(2231);
                this.match(MySQLParser.TEMPORARY_SYMBOL);
                }
            }

            this.setState(2234);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(2236);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 106, this.getContext())) {
                case 1:
                    {
                    this.setState(2235);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2238);
            this.tableName();
            this.setState(2255);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 109, this.getContext())) {
                case 1:
                    {
                    this.setState(2243);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 107, this.getContext())) {
                        case 1:
                            {
                            this.setState(2239);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(2240);
                            this.tableElementList();
                            this.setState(2241);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                            break;
                    }
                    this.setState(2246);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 108, this.getContext())) {
                        case 1:
                            {
                            this.setState(2245);
                            this.createTableOptionsEtc();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(2248);
                    this.match(MySQLParser.LIKE_SYMBOL);
                    this.setState(2249);
                    this.tableRef();
                    }
                    break;
                case 3:
                    {
                    this.setState(2250);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(2251);
                    this.match(MySQLParser.LIKE_SYMBOL);
                    this.setState(2252);
                    this.tableRef();
                    this.setState(2253);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableElementList(): TableElementListContext {
        let localctx = new TableElementListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 88, MySQLParser.RULE_tableElementList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2257);
            this.tableElement();
            this.setState(2262);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(2258);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(2259);
                this.tableElement();
                }
                }
                this.setState(2264);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableElement(): TableElementContext {
        let localctx = new TableElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 90, MySQLParser.RULE_tableElement);
        try {
            this.setState(2267);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 111, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2265);
                    this.columnDefinition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2266);
                    this.tableConstraintDef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public duplicateAsQe(): DuplicateAsQeContext {
        let localctx = new DuplicateAsQeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 92, MySQLParser.RULE_duplicateAsQe);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2270);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 112, this.getContext())) {
                case 1:
                    {
                    this.setState(2269);
                    _la = this.input().LA(1);
                    if(!(_la === 264 || _la === 475)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
            this.setState(2272);
            this.asCreateQueryExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public asCreateQueryExpression(): AsCreateQueryExpressionContext {
        let localctx = new AsCreateQueryExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 94, MySQLParser.RULE_asCreateQueryExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2275);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 113, this.getContext())) {
                case 1:
                    {
                    this.setState(2274);
                    this.match(MySQLParser.AS_SYMBOL);
                    }
                    break;
            }
            this.setState(2277);
            this.queryExpressionWithOptLockingClauses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpressionOrParens(): QueryExpressionOrParensContext {
        let localctx = new QueryExpressionOrParensContext(this.getContext(), this.getState());
        this.enterRule(localctx, 96, MySQLParser.RULE_queryExpressionOrParens);
        try {
            this.setState(2284);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 115, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2279);
                    this.queryExpression();
                    this.setState(2281);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 114, this.getContext())) {
                        case 1:
                            {
                            this.setState(2280);
                            this.lockingClauseList();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2283);
                    this.queryExpressionParens();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        let localctx = new QueryExpressionWithOptLockingClausesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 98, MySQLParser.RULE_queryExpressionWithOptLockingClauses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2286);
            this.queryExpression();
            this.setState(2288);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 116, this.getContext())) {
                case 1:
                    {
                    this.setState(2287);
                    this.lockingClauseList();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createRoutine(): CreateRoutineContext {
        let localctx = new CreateRoutineContext(this.getContext(), this.getState());
        this.enterRule(localctx, 100, MySQLParser.RULE_createRoutine);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2290);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(2294);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 117, this.getContext())) {
                case 1:
                    {
                    this.setState(2291);
                    this.createProcedure();
                    }
                    break;
                case 2:
                    {
                    this.setState(2292);
                    this.createFunction();
                    }
                    break;
                case 3:
                    {
                    this.setState(2293);
                    this.createUdf();
                    }
                    break;
            }
            this.setState(2297);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 30) {
                {
                this.setState(2296);
                this.match(MySQLParser.SEMICOLON_SYMBOL);
                }
            }

            this.setState(2299);
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createProcedure(): CreateProcedureContext {
        let localctx = new CreateProcedureContext(this.getContext(), this.getState());
        this.enterRule(localctx, 102, MySQLParser.RULE_createProcedure);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2302);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 168) {
                {
                this.setState(2301);
                this.definerClause();
                }
            }

            this.setState(2304);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(2306);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 120, this.getContext())) {
                case 1:
                    {
                    this.setState(2305);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2308);
            this.procedureName();
            this.setState(2309);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(2318);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 122, this.getContext())) {
                case 1:
                    {
                    this.setState(2310);
                    this.procedureParameter();
                    this.setState(2315);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(2311);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(2312);
                        this.procedureParameter();
                        }
                        }
                        this.setState(2317);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
            this.setState(2320);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(2324);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 123, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2321);
                    this.routineCreateOption();
                    }
                    }
                }
                this.setState(2326);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 123, this.getContext());
            }
            this.setState(2327);
            this.storedRoutineBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public routineString(): RoutineStringContext {
        let localctx = new RoutineStringContext(this.getContext(), this.getState());
        this.enterRule(localctx, 104, MySQLParser.RULE_routineString);
        try {
            this.setState(2331);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 124, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2329);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2330);
                    this.match(MySQLParser.DOLLAR_QUOTED_STRING_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public storedRoutineBody(): StoredRoutineBodyContext {
        let localctx = new StoredRoutineBodyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 106, MySQLParser.RULE_storedRoutineBody);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2333);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createFunction(): CreateFunctionContext {
        let localctx = new CreateFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 108, MySQLParser.RULE_createFunction);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2336);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 168) {
                {
                this.setState(2335);
                this.definerClause();
                }
            }

            this.setState(2338);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(2340);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 126, this.getContext())) {
                case 1:
                    {
                    this.setState(2339);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2342);
            this.functionName();
            this.setState(2343);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(2352);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 128, this.getContext())) {
                case 1:
                    {
                    this.setState(2344);
                    this.functionParameter();
                    this.setState(2349);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(2345);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(2346);
                        this.functionParameter();
                        }
                        }
                        this.setState(2351);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
            this.setState(2354);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(2355);
            this.match(MySQLParser.RETURNS_SYMBOL);
            this.setState(2356);
            this.typeWithOptCollate();
            this.setState(2360);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 129, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2357);
                    this.routineCreateOption();
                    }
                    }
                }
                this.setState(2362);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 129, this.getContext());
            }
            this.setState(2363);
            this.storedRoutineBody();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUdf(): CreateUdfContext {
        let localctx = new CreateUdfContext(this.getContext(), this.getState());
        this.enterRule(localctx, 110, MySQLParser.RULE_createUdf);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2366);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 55) {
                {
                this.setState(2365);
                this.match(MySQLParser.AGGREGATE_SYMBOL);
                }
            }

            this.setState(2368);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(2370);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 131, this.getContext())) {
                case 1:
                    {
                    this.setState(2369);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2372);
            this.udfName();
            this.setState(2373);
            this.match(MySQLParser.RETURNS_SYMBOL);
            this.setState(2374);
            localctx._type_ = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 164 || _la === 280 || _la === 455 || _la === 566)) {
                localctx._type_ = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2375);
            this.match(MySQLParser.SONAME_SYMBOL);
            this.setState(2376);
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public routineCreateOption(): RoutineCreateOptionContext {
        let localctx = new RoutineCreateOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 112, MySQLParser.RULE_routineCreateOption);
        let _la: number;
        try {
            this.setState(2383);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.CONTAINS_SYMBOL:
            case MySQLParser.LANGUAGE_SYMBOL:
            case MySQLParser.MODIFIES_SYMBOL:
            case MySQLParser.NO_SYMBOL:
            case MySQLParser.READS_SYMBOL:
            case MySQLParser.SQL_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2378);
                this.routineOption();
                }
                break;
            case MySQLParser.DETERMINISTIC_SYMBOL:
            case MySQLParser.NOT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2380);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 390) {
                    {
                    this.setState(2379);
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.setState(2382);
                this.match(MySQLParser.DETERMINISTIC_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public routineAlterOptions(): RoutineAlterOptionsContext {
        let localctx = new RoutineAlterOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 114, MySQLParser.RULE_routineAlterOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2386);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            do {
                {
                {
                this.setState(2385);
                this.routineCreateOption();
                }
                }
                this.setState(2388);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            } while (_la === 118 || _la === 133 || _la === 174 || _la === 297 || ((((_la - 370)) & ~0x1F) === 0 && ((1 << (_la - 370)) & 5242881) !== 0) || _la === 451 || _la === 547);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public routineOption(): RoutineOptionContext {
        let localctx = new RoutineOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 116, MySQLParser.RULE_routineOption);
        let _la: number;
        try {
            this.setState(2411);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2390);
                localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(2391);
                this.textLiteral();
                }
                break;
            case MySQLParser.LANGUAGE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2392);
                localctx._option = this.match(MySQLParser.LANGUAGE_SYMBOL);
                this.setState(2396);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 135, this.getContext())) {
                    case 1:
                        {
                        this.setState(2393);
                        this.match(MySQLParser.SQL_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                        this.setState(2394);
                        if (!(this.serverVersion >= 80032)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80032");
                        }
                        this.setState(2395);
                        this.identifier();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.NO_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2398);
                localctx._option = this.match(MySQLParser.NO_SYMBOL);
                this.setState(2399);
                this.match(MySQLParser.SQL_SYMBOL);
                }
                break;
            case MySQLParser.CONTAINS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(2400);
                localctx._option = this.match(MySQLParser.CONTAINS_SYMBOL);
                this.setState(2401);
                this.match(MySQLParser.SQL_SYMBOL);
                }
                break;
            case MySQLParser.READS_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(2402);
                localctx._option = this.match(MySQLParser.READS_SYMBOL);
                this.setState(2403);
                this.match(MySQLParser.SQL_SYMBOL);
                this.setState(2404);
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.MODIFIES_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(2405);
                localctx._option = this.match(MySQLParser.MODIFIES_SYMBOL);
                this.setState(2406);
                this.match(MySQLParser.SQL_SYMBOL);
                this.setState(2407);
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.SQL_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(2408);
                localctx._option = this.match(MySQLParser.SQL_SYMBOL);
                this.setState(2409);
                this.match(MySQLParser.SECURITY_SYMBOL);
                this.setState(2410);
                localctx._security = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 168 || _la === 281)) {
                    localctx._security = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createIndex(): CreateIndexContext {
        let localctx = new CreateIndexContext(this.getContext(), this.getState());
        this.enterRule(localctx, 118, MySQLParser.RULE_createIndex);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2414);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 399 || _la === 403) {
                {
                this.setState(2413);
                this.onlineOption();
                }
            }

            this.setState(2451);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INDEX_SYMBOL:
            case MySQLParser.UNIQUE_SYMBOL:
                {
                this.setState(2417);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 618) {
                    {
                    this.setState(2416);
                    this.match(MySQLParser.UNIQUE_SYMBOL);
                    }
                }

                this.setState(2419);
                localctx._type_ = this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(2420);
                this.indexName();
                this.setState(2422);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 608 || _la === 630) {
                    {
                    this.setState(2421);
                    this.indexTypeClause();
                    }
                }

                this.setState(2424);
                this.createIndexTarget();
                this.setState(2428);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 140, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(2425);
                        this.indexOption();
                        }
                        }
                    }
                    this.setState(2430);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 140, this.getContext());
                }
                }
                break;
            case MySQLParser.FULLTEXT_SYMBOL:
                {
                this.setState(2431);
                localctx._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
                this.setState(2432);
                this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(2433);
                this.indexName();
                this.setState(2434);
                this.createIndexTarget();
                this.setState(2438);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 141, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(2435);
                        this.fulltextIndexOption();
                        }
                        }
                    }
                    this.setState(2440);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 141, this.getContext());
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                {
                this.setState(2441);
                localctx._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(2442);
                this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(2443);
                this.indexName();
                this.setState(2444);
                this.createIndexTarget();
                this.setState(2448);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 142, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(2445);
                        this.spatialIndexOption();
                        }
                        }
                    }
                    this.setState(2450);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 142, this.getContext());
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(2454);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 56 || _la === 314) {
                {
                this.setState(2453);
                this.indexLockAndAlgorithm();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexNameAndType(): IndexNameAndTypeContext {
        let localctx = new IndexNameAndTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 120, MySQLParser.RULE_indexNameAndType);
        try {
            this.setState(2466);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 146, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2456);
                    this.indexName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2458);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 145, this.getContext())) {
                        case 1:
                            {
                            this.setState(2457);
                            this.indexName();
                            }
                            break;
                    }
                    this.setState(2460);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(2461);
                    this.indexType();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(2462);
                    this.indexName();
                    this.setState(2463);
                    this.match(MySQLParser.TYPE_SYMBOL);
                    this.setState(2464);
                    this.indexType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createIndexTarget(): CreateIndexTargetContext {
        let localctx = new CreateIndexTargetContext(this.getContext(), this.getState());
        this.enterRule(localctx, 122, MySQLParser.RULE_createIndexTarget);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2468);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(2469);
            this.tableRef();
            this.setState(2470);
            this.keyListWithExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createLogfileGroup(): CreateLogfileGroupContext {
        let localctx = new CreateLogfileGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 124, MySQLParser.RULE_createLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2472);
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.setState(2473);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(2474);
            this.logfileGroupName();
            this.setState(2475);
            this.match(MySQLParser.ADD_SYMBOL);
            this.setState(2476);
            this.match(MySQLParser.UNDOFILE_SYMBOL);
            this.setState(2477);
            this.textLiteral();
            this.setState(2479);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 118 || _la === 198 || _la === 270 || _la === 388 || _la === 393 || _la === 458 || _la === 563 || _la === 613 || _la === 646) {
                {
                this.setState(2478);
                this.logfileGroupOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logfileGroupOptions(): LogfileGroupOptionsContext {
        let localctx = new LogfileGroupOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 126, MySQLParser.RULE_logfileGroupOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2481);
            this.logfileGroupOption();
            this.setState(2488);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29 || _la === 118 || _la === 198 || _la === 270 || _la === 388 || _la === 393 || _la === 458 || _la === 563 || _la === 613 || _la === 646) {
                {
                {
                this.setState(2483);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(2482);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(2485);
                this.logfileGroupOption();
                }
                }
                this.setState(2490);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logfileGroupOption(): LogfileGroupOptionContext {
        let localctx = new LogfileGroupOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 128, MySQLParser.RULE_logfileGroupOption);
        try {
            this.setState(2497);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INITIAL_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2491);
                this.tsOptionInitialSize();
                }
                break;
            case MySQLParser.REDO_BUFFER_SIZE_SYMBOL:
            case MySQLParser.UNDO_BUFFER_SIZE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2492);
                this.tsOptionUndoRedoBufferSize();
                }
                break;
            case MySQLParser.NODEGROUP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2493);
                this.tsOptionNodegroup();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(2494);
                this.tsOptionEngine();
                }
                break;
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(2495);
                this.tsOptionWait();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(2496);
                this.tsOptionComment();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createServer(): CreateServerContext {
        let localctx = new CreateServerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 130, MySQLParser.RULE_createServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2499);
            this.match(MySQLParser.SERVER_SYMBOL);
            this.setState(2500);
            this.serverName();
            this.setState(2501);
            this.match(MySQLParser.FOREIGN_SYMBOL);
            this.setState(2502);
            this.match(MySQLParser.DATA_SYMBOL);
            this.setState(2503);
            this.match(MySQLParser.WRAPPER_SYMBOL);
            this.setState(2504);
            this.textOrIdentifier();
            this.setState(2505);
            this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverOptions(): ServerOptionsContext {
        let localctx = new ServerOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 132, MySQLParser.RULE_serverOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2507);
            this.match(MySQLParser.OPTIONS_SYMBOL);
            this.setState(2508);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(2509);
            this.serverOption();
            this.setState(2514);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(2510);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(2511);
                this.serverOption();
                }
                }
                this.setState(2516);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(2517);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverOption(): ServerOptionContext {
        let localctx = new ServerOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 134, MySQLParser.RULE_serverOption);
        try {
            this.setState(2533);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.HOST_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2519);
                localctx._option = this.match(MySQLParser.HOST_SYMBOL);
                this.setState(2520);
                this.textLiteral();
                }
                break;
            case MySQLParser.DATABASE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2521);
                localctx._option = this.match(MySQLParser.DATABASE_SYMBOL);
                this.setState(2522);
                this.textLiteral();
                }
                break;
            case MySQLParser.USER_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2523);
                localctx._option = this.match(MySQLParser.USER_SYMBOL);
                this.setState(2524);
                this.textLiteral();
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(2525);
                localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                this.setState(2526);
                this.textLiteral();
                }
                break;
            case MySQLParser.SOCKET_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(2527);
                localctx._option = this.match(MySQLParser.SOCKET_SYMBOL);
                this.setState(2528);
                this.textLiteral();
                }
                break;
            case MySQLParser.OWNER_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(2529);
                localctx._option = this.match(MySQLParser.OWNER_SYMBOL);
                this.setState(2530);
                this.textLiteral();
                }
                break;
            case MySQLParser.PORT_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(2531);
                localctx._option = this.match(MySQLParser.PORT_SYMBOL);
                this.setState(2532);
                this.ulong_number();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTablespace(): CreateTablespaceContext {
        let localctx = new CreateTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 136, MySQLParser.RULE_createTablespace);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2535);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2536);
            this.tablespaceName();
            this.setState(2537);
            this.tsDataFileName();
            this.setState(2542);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 153, this.getContext())) {
                case 1:
                    {
                    this.setState(2538);
                    this.match(MySQLParser.USE_SYMBOL);
                    this.setState(2539);
                    this.match(MySQLParser.LOGFILE_SYMBOL);
                    this.setState(2540);
                    this.match(MySQLParser.GROUP_SYMBOL);
                    this.setState(2541);
                    this.logfileGroupRef();
                    }
                    break;
            }
            this.setState(2545);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 154, this.getContext())) {
                case 1:
                    {
                    this.setState(2544);
                    this.tablespaceOptions();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUndoTablespace(): CreateUndoTablespaceContext {
        let localctx = new CreateUndoTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 138, MySQLParser.RULE_createUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2547);
            this.match(MySQLParser.UNDO_SYMBOL);
            this.setState(2548);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2549);
            this.tablespaceName();
            this.setState(2550);
            this.match(MySQLParser.ADD_SYMBOL);
            this.setState(2551);
            this.tsDataFile();
            this.setState(2553);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 198 || _la === 563) {
                {
                this.setState(2552);
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsDataFileName(): TsDataFileNameContext {
        let localctx = new TsDataFileNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 140, MySQLParser.RULE_tsDataFileName);
        try {
            this.setState(2562);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 157, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2555);
                    this.match(MySQLParser.ADD_SYMBOL);
                    this.setState(2556);
                    this.tsDataFile();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2557);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2560);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 156, this.getContext())) {
                        case 1:
                            {
                            this.setState(2558);
                            this.match(MySQLParser.ADD_SYMBOL);
                            this.setState(2559);
                            this.tsDataFile();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsDataFile(): TsDataFileContext {
        let localctx = new TsDataFileContext(this.getContext(), this.getState());
        this.enterRule(localctx, 142, MySQLParser.RULE_tsDataFile);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2564);
            this.match(MySQLParser.DATAFILE_SYMBOL);
            this.setState(2565);
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablespaceOptions(): TablespaceOptionsContext {
        let localctx = new TablespaceOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 144, MySQLParser.RULE_tablespaceOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2567);
            this.tablespaceOption();
            this.setState(2574);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 159, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2569);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 158, this.getContext())) {
                        case 1:
                            {
                            this.setState(2568);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(2571);
                    this.tablespaceOption();
                    }
                    }
                }
                this.setState(2576);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 159, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablespaceOption(): TablespaceOptionContext {
        let localctx = new TablespaceOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 146, MySQLParser.RULE_tablespaceOption);
        try {
            this.setState(2588);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 160, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(2577);
                    this.tsOptionInitialSize();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(2578);
                    this.tsOptionAutoextendSize();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(2579);
                    this.tsOptionMaxSize();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(2580);
                    this.tsOptionExtentSize();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(2581);
                    this.tsOptionNodegroup();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(2582);
                    this.tsOptionEngine();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(2583);
                    this.tsOptionWait();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(2584);
                    this.tsOptionComment();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(2585);
                    this.tsOptionFileblockSize();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(2586);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2587);
                    this.tsOptionEncryption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext {
        let localctx = new TsOptionInitialSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 148, MySQLParser.RULE_tsOptionInitialSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2590);
            this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
            this.setState(2592);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 161, this.getContext())) {
                case 1:
                    {
                    this.setState(2591);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2594);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext {
        let localctx = new TsOptionUndoRedoBufferSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 150, MySQLParser.RULE_tsOptionUndoRedoBufferSize);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2596);
            _la = this.input().LA(1);
            if(!(_la === 458 || _la === 613)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2598);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 162, this.getContext())) {
                case 1:
                    {
                    this.setState(2597);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2600);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
        let localctx = new TsOptionAutoextendSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 152, MySQLParser.RULE_tsOptionAutoextendSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2602);
            this.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL);
            this.setState(2604);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 163, this.getContext())) {
                case 1:
                    {
                    this.setState(2603);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2606);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext {
        let localctx = new TsOptionMaxSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 154, MySQLParser.RULE_tsOptionMaxSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2608);
            this.match(MySQLParser.MAX_SIZE_SYMBOL);
            this.setState(2610);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 164, this.getContext())) {
                case 1:
                    {
                    this.setState(2609);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2612);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionExtentSize(): TsOptionExtentSizeContext {
        let localctx = new TsOptionExtentSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 156, MySQLParser.RULE_tsOptionExtentSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2614);
            this.match(MySQLParser.EXTENT_SIZE_SYMBOL);
            this.setState(2616);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 165, this.getContext())) {
                case 1:
                    {
                    this.setState(2615);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2618);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext {
        let localctx = new TsOptionNodegroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 158, MySQLParser.RULE_tsOptionNodegroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2620);
            this.match(MySQLParser.NODEGROUP_SYMBOL);
            this.setState(2622);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 6) {
                {
                this.setState(2621);
                this.match(MySQLParser.EQUAL_OPERATOR);
                }
            }

            this.setState(2624);
            this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionEngine(): TsOptionEngineContext {
        let localctx = new TsOptionEngineContext(this.getContext(), this.getState());
        this.enterRule(localctx, 160, MySQLParser.RULE_tsOptionEngine);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2627);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 563) {
                {
                this.setState(2626);
                this.match(MySQLParser.STORAGE_SYMBOL);
                }
            }

            this.setState(2629);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(2631);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 168, this.getContext())) {
                case 1:
                    {
                    this.setState(2630);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2633);
            this.engineRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionWait(): TsOptionWaitContext {
        let localctx = new TsOptionWaitContext(this.getContext(), this.getState());
        this.enterRule(localctx, 162, MySQLParser.RULE_tsOptionWait);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2635);
            _la = this.input().LA(1);
            if(!(_la === 393 || _la === 646)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionComment(): TsOptionCommentContext {
        let localctx = new TsOptionCommentContext(this.getContext(), this.getState());
        this.enterRule(localctx, 164, MySQLParser.RULE_tsOptionComment);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2637);
            this.match(MySQLParser.COMMENT_SYMBOL);
            this.setState(2639);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 169, this.getContext())) {
                case 1:
                    {
                    this.setState(2638);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2641);
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionFileblockSize(): TsOptionFileblockSizeContext {
        let localctx = new TsOptionFileblockSizeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 166, MySQLParser.RULE_tsOptionFileblockSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2643);
            this.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL);
            this.setState(2645);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 170, this.getContext())) {
                case 1:
                    {
                    this.setState(2644);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2647);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionEncryption(): TsOptionEncryptionContext {
        let localctx = new TsOptionEncryptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 168, MySQLParser.RULE_tsOptionEncryption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2649);
            this.match(MySQLParser.ENCRYPTION_SYMBOL);
            this.setState(2651);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 171, this.getContext())) {
                case 1:
                    {
                    this.setState(2650);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2653);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tsOptionEngineAttribute(): TsOptionEngineAttributeContext {
        let localctx = new TsOptionEngineAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 170, MySQLParser.RULE_tsOptionEngineAttribute);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2655);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(2657);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 172, this.getContext())) {
                case 1:
                    {
                    this.setState(2656);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(2659);
            this.jsonAttribute();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createView(): CreateViewContext {
        let localctx = new CreateViewContext(this.getContext(), this.getState());
        this.enterRule(localctx, 172, MySQLParser.RULE_createView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2662);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 56 || _la === 412) {
                {
                this.setState(2661);
                this.viewReplaceOrAlgorithm();
                }
            }

            this.setState(2665);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 168) {
                {
                this.setState(2664);
                this.definerClause();
                }
            }

            this.setState(2668);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 547) {
                {
                this.setState(2667);
                this.viewSuid();
                }
            }

            this.setState(2670);
            this.match(MySQLParser.VIEW_SYMBOL);
            this.setState(2671);
            this.viewName();
            this.setState(2672);
            this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext {
        let localctx = new ViewReplaceOrAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 174, MySQLParser.RULE_viewReplaceOrAlgorithm);
        let _la: number;
        try {
            this.setState(2680);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.OR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2674);
                this.match(MySQLParser.OR_SYMBOL);
                this.setState(2675);
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.setState(2677);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 56) {
                    {
                    this.setState(2676);
                    this.viewAlgorithm();
                    }
                }

                }
                break;
            case MySQLParser.ALGORITHM_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2679);
                this.viewAlgorithm();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewAlgorithm(): ViewAlgorithmContext {
        let localctx = new ViewAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 176, MySQLParser.RULE_viewAlgorithm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2682);
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.setState(2683);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(2684);
            localctx._algorithm = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 359 || _la === 587 || _la === 611)) {
                localctx._algorithm = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewSuid(): ViewSuidContext {
        let localctx = new ViewSuidContext(this.getContext(), this.getState());
        this.enterRule(localctx, 178, MySQLParser.RULE_viewSuid);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2686);
            this.match(MySQLParser.SQL_SYMBOL);
            this.setState(2687);
            this.match(MySQLParser.SECURITY_SYMBOL);
            this.setState(2688);
            _la = this.input().LA(1);
            if(!(_la === 168 || _la === 281)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTrigger(): CreateTriggerContext {
        let localctx = new CreateTriggerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 180, MySQLParser.RULE_createTrigger);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2691);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 168) {
                {
                this.setState(2690);
                this.definerClause();
                }
            }

            this.setState(2693);
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.setState(2695);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 179, this.getContext())) {
                case 1:
                    {
                    this.setState(2694);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2697);
            this.triggerName();
            this.setState(2698);
            localctx._timing = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 53 || _la === 73)) {
                localctx._timing = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2699);
            localctx._event = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 171 || _la === 274 || _la === 623)) {
                localctx._event = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2700);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(2701);
            this.tableRef();
            this.setState(2702);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(2703);
            this.match(MySQLParser.EACH_SYMBOL);
            this.setState(2704);
            this.match(MySQLParser.ROW_SYMBOL);
            this.setState(2706);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 180, this.getContext())) {
                case 1:
                    {
                    this.setState(2705);
                    this.triggerFollowsPrecedesClause();
                    }
                    break;
            }
            this.setState(2708);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext {
        let localctx = new TriggerFollowsPrecedesClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 182, MySQLParser.RULE_triggerFollowsPrecedesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2710);
            localctx._ordering = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 229 || _la === 433)) {
                localctx._ordering = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2711);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createEvent(): CreateEventContext {
        let localctx = new CreateEventContext(this.getContext(), this.getState());
        this.enterRule(localctx, 184, MySQLParser.RULE_createEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2714);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 168) {
                {
                this.setState(2713);
                this.definerClause();
                }
            }

            this.setState(2716);
            this.match(MySQLParser.EVENT_SYMBOL);
            this.setState(2718);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 182, this.getContext())) {
                case 1:
                    {
                    this.setState(2717);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2720);
            this.eventName();
            this.setState(2721);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(2722);
            this.match(MySQLParser.SCHEDULE_SYMBOL);
            this.setState(2723);
            this.schedule();
            this.setState(2730);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 401) {
                {
                this.setState(2724);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(2725);
                this.match(MySQLParser.COMPLETION_SYMBOL);
                this.setState(2727);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 390) {
                    {
                    this.setState(2726);
                    this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.setState(2729);
                this.match(MySQLParser.PRESERVE_SYMBOL);
                }
            }

            this.setState(2738);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ENABLE_SYMBOL:
                {
                this.setState(2732);
                this.match(MySQLParser.ENABLE_SYMBOL);
                }
                break;
            case MySQLParser.DISABLE_SYMBOL:
                {
                this.setState(2733);
                this.match(MySQLParser.DISABLE_SYMBOL);
                this.setState(2736);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 401) {
                    {
                    this.setState(2734);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(2735);
                    this.replica();
                    }
                }

                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
            case MySQLParser.DO_SYMBOL:
                break;
            default:
                break;
            }
            this.setState(2742);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 118) {
                {
                this.setState(2740);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(2741);
                this.textLiteral();
                }
            }

            this.setState(2744);
            this.match(MySQLParser.DO_SYMBOL);
            this.setState(2745);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createRole(): CreateRoleContext {
        let localctx = new CreateRoleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 186, MySQLParser.RULE_createRole);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2747);
            this.match(MySQLParser.ROLE_SYMBOL);
            this.setState(2749);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 188, this.getContext())) {
                case 1:
                    {
                    this.setState(2748);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(2751);
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createSpatialReference(): CreateSpatialReferenceContext {
        let localctx = new CreateSpatialReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 188, MySQLParser.RULE_createSpatialReference);
        let _la: number;
        try {
            this.setState(2778);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.OR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2753);
                this.match(MySQLParser.OR_SYMBOL);
                this.setState(2754);
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.setState(2755);
                this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(2756);
                this.match(MySQLParser.REFERENCE_SYMBOL);
                this.setState(2757);
                this.match(MySQLParser.SYSTEM_SYMBOL);
                this.setState(2758);
                this.real_ulonglong_number();
                this.setState(2762);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 380 || ((((_la - 723)) & ~0x1F) === 0 && ((1 << (_la - 723)) & 7) !== 0)) {
                    {
                    {
                    this.setState(2759);
                    this.srsAttribute();
                    }
                    }
                    this.setState(2764);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2765);
                this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(2766);
                this.match(MySQLParser.REFERENCE_SYMBOL);
                this.setState(2767);
                this.match(MySQLParser.SYSTEM_SYMBOL);
                this.setState(2769);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 190, this.getContext())) {
                    case 1:
                        {
                        this.setState(2768);
                        this.ifNotExists();
                        }
                        break;
                }
                this.setState(2771);
                this.real_ulonglong_number();
                this.setState(2775);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 380 || ((((_la - 723)) & ~0x1F) === 0 && ((1 << (_la - 723)) & 7) !== 0)) {
                    {
                    {
                    this.setState(2772);
                    this.srsAttribute();
                    }
                    }
                    this.setState(2777);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public srsAttribute(): SrsAttributeContext {
        let localctx = new SrsAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 190, MySQLParser.RULE_srsAttribute);
        try {
            this.setState(2795);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.NAME_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2780);
                this.match(MySQLParser.NAME_SYMBOL);
                this.setState(2781);
                this.match(MySQLParser.TEXT_SYMBOL);
                this.setState(2782);
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.DEFINITION_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2783);
                this.match(MySQLParser.DEFINITION_SYMBOL);
                this.setState(2784);
                this.match(MySQLParser.TEXT_SYMBOL);
                this.setState(2785);
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.ORGANIZATION_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(2786);
                this.match(MySQLParser.ORGANIZATION_SYMBOL);
                this.setState(2787);
                this.textStringNoLinebreak();
                this.setState(2788);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(2789);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(2790);
                this.real_ulonglong_number();
                }
                break;
            case MySQLParser.DESCRIPTION_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(2792);
                this.match(MySQLParser.DESCRIPTION_SYMBOL);
                this.setState(2793);
                this.match(MySQLParser.TEXT_SYMBOL);
                this.setState(2794);
                this.textStringNoLinebreak();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropStatement(): DropStatementContext {
        let localctx = new DropStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 192, MySQLParser.RULE_dropStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2797);
            this.match(MySQLParser.DROP_SYMBOL);
            this.setState(2814);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 194, this.getContext())) {
                case 1:
                    {
                    this.setState(2798);
                    this.dropDatabase();
                    }
                    break;
                case 2:
                    {
                    this.setState(2799);
                    this.dropEvent();
                    }
                    break;
                case 3:
                    {
                    this.setState(2800);
                    this.dropFunction();
                    }
                    break;
                case 4:
                    {
                    this.setState(2801);
                    this.dropProcedure();
                    }
                    break;
                case 5:
                    {
                    this.setState(2802);
                    this.dropIndex();
                    }
                    break;
                case 6:
                    {
                    this.setState(2803);
                    this.dropLogfileGroup();
                    }
                    break;
                case 7:
                    {
                    this.setState(2804);
                    this.dropServer();
                    }
                    break;
                case 8:
                    {
                    this.setState(2805);
                    this.dropTable();
                    }
                    break;
                case 9:
                    {
                    this.setState(2806);
                    this.dropTableSpace();
                    }
                    break;
                case 10:
                    {
                    this.setState(2807);
                    this.dropTrigger();
                    }
                    break;
                case 11:
                    {
                    this.setState(2808);
                    this.dropView();
                    }
                    break;
                case 12:
                    {
                    this.setState(2809);
                    this.dropRole();
                    }
                    break;
                case 13:
                    {
                    this.setState(2810);
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.setState(2811);
                    this.dropSpatialReference();
                    }
                    break;
                case 14:
                    {
                    this.setState(2812);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(2813);
                    this.dropUndoTablespace();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropDatabase(): DropDatabaseContext {
        let localctx = new DropDatabaseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 194, MySQLParser.RULE_dropDatabase);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2816);
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.setState(2818);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 195, this.getContext())) {
                case 1:
                    {
                    this.setState(2817);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2820);
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropEvent(): DropEventContext {
        let localctx = new DropEventContext(this.getContext(), this.getState());
        this.enterRule(localctx, 196, MySQLParser.RULE_dropEvent);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2822);
            this.match(MySQLParser.EVENT_SYMBOL);
            this.setState(2824);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 196, this.getContext())) {
                case 1:
                    {
                    this.setState(2823);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2826);
            this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropFunction(): DropFunctionContext {
        let localctx = new DropFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 198, MySQLParser.RULE_dropFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2828);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(2830);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 197, this.getContext())) {
                case 1:
                    {
                    this.setState(2829);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2832);
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropProcedure(): DropProcedureContext {
        let localctx = new DropProcedureContext(this.getContext(), this.getState());
        this.enterRule(localctx, 200, MySQLParser.RULE_dropProcedure);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2834);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(2836);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 198, this.getContext())) {
                case 1:
                    {
                    this.setState(2835);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2838);
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropIndex(): DropIndexContext {
        let localctx = new DropIndexContext(this.getContext(), this.getState());
        this.enterRule(localctx, 202, MySQLParser.RULE_dropIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2841);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 399 || _la === 403) {
                {
                this.setState(2840);
                this.onlineOption();
                }
            }

            this.setState(2843);
            localctx._type_ = this.match(MySQLParser.INDEX_SYMBOL);
            this.setState(2844);
            this.indexRef();
            this.setState(2845);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(2846);
            this.tableRef();
            this.setState(2848);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 56 || _la === 314) {
                {
                this.setState(2847);
                this.indexLockAndAlgorithm();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropLogfileGroup(): DropLogfileGroupContext {
        let localctx = new DropLogfileGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 204, MySQLParser.RULE_dropLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2850);
            this.match(MySQLParser.LOGFILE_SYMBOL);
            this.setState(2851);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(2852);
            this.logfileGroupRef();
            this.setState(2863);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 198 || _la === 393 || _la === 563 || _la === 646) {
                {
                this.setState(2853);
                this.dropLogfileGroupOption();
                this.setState(2860);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 29 || _la === 198 || _la === 393 || _la === 563 || _la === 646) {
                    {
                    {
                    this.setState(2855);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 29) {
                        {
                        this.setState(2854);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                    }

                    this.setState(2857);
                    this.dropLogfileGroupOption();
                    }
                    }
                    this.setState(2862);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropLogfileGroupOption(): DropLogfileGroupOptionContext {
        let localctx = new DropLogfileGroupOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 206, MySQLParser.RULE_dropLogfileGroupOption);
        try {
            this.setState(2867);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.NO_WAIT_SYMBOL:
            case MySQLParser.WAIT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(2865);
                this.tsOptionWait();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(2866);
                this.tsOptionEngine();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropServer(): DropServerContext {
        let localctx = new DropServerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 208, MySQLParser.RULE_dropServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2869);
            this.match(MySQLParser.SERVER_SYMBOL);
            this.setState(2871);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 205, this.getContext())) {
                case 1:
                    {
                    this.setState(2870);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2873);
            this.serverRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropTable(): DropTableContext {
        let localctx = new DropTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 210, MySQLParser.RULE_dropTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2876);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 586) {
                {
                this.setState(2875);
                this.match(MySQLParser.TEMPORARY_SYMBOL);
                }
            }

            this.setState(2878);
            localctx._type_ = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 581 || _la === 583)) {
                localctx._type_ = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2880);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 207, this.getContext())) {
                case 1:
                    {
                    this.setState(2879);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2882);
            this.tableRefList();
            this.setState(2884);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 93 || _la === 488) {
                {
                this.setState(2883);
                _la = this.input().LA(1);
                if(!(_la === 93 || _la === 488)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropTableSpace(): DropTableSpaceContext {
        let localctx = new DropTableSpaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 212, MySQLParser.RULE_dropTableSpace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2886);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2887);
            this.tablespaceRef();
            this.setState(2898);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 198 || _la === 393 || _la === 563 || _la === 646) {
                {
                this.setState(2888);
                this.dropLogfileGroupOption();
                this.setState(2895);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 29 || _la === 198 || _la === 393 || _la === 563 || _la === 646) {
                    {
                    {
                    this.setState(2890);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 29) {
                        {
                        this.setState(2889);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        }
                    }

                    this.setState(2892);
                    this.dropLogfileGroupOption();
                    }
                    }
                    this.setState(2897);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropTrigger(): DropTriggerContext {
        let localctx = new DropTriggerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 214, MySQLParser.RULE_dropTrigger);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2900);
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.setState(2902);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 212, this.getContext())) {
                case 1:
                    {
                    this.setState(2901);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2904);
            this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropView(): DropViewContext {
        let localctx = new DropViewContext(this.getContext(), this.getState());
        this.enterRule(localctx, 216, MySQLParser.RULE_dropView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2906);
            this.match(MySQLParser.VIEW_SYMBOL);
            this.setState(2908);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 213, this.getContext())) {
                case 1:
                    {
                    this.setState(2907);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2910);
            this.viewRefList();
            this.setState(2912);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 93 || _la === 488) {
                {
                this.setState(2911);
                _la = this.input().LA(1);
                if(!(_la === 93 || _la === 488)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropRole(): DropRoleContext {
        let localctx = new DropRoleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 218, MySQLParser.RULE_dropRole);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2914);
            this.match(MySQLParser.ROLE_SYMBOL);
            this.setState(2916);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 215, this.getContext())) {
                case 1:
                    {
                    this.setState(2915);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2918);
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropSpatialReference(): DropSpatialReferenceContext {
        let localctx = new DropSpatialReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 220, MySQLParser.RULE_dropSpatialReference);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2920);
            this.match(MySQLParser.SPATIAL_SYMBOL);
            this.setState(2921);
            this.match(MySQLParser.REFERENCE_SYMBOL);
            this.setState(2922);
            this.match(MySQLParser.SYSTEM_SYMBOL);
            this.setState(2924);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 216, this.getContext())) {
                case 1:
                    {
                    this.setState(2923);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(2926);
            this.real_ulonglong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropUndoTablespace(): DropUndoTablespaceContext {
        let localctx = new DropUndoTablespaceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 222, MySQLParser.RULE_dropUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2928);
            this.match(MySQLParser.UNDO_SYMBOL);
            this.setState(2929);
            this.match(MySQLParser.TABLESPACE_SYMBOL);
            this.setState(2930);
            this.tablespaceRef();
            this.setState(2932);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 198 || _la === 563) {
                {
                this.setState(2931);
                this.undoTableSpaceOptions();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public renameTableStatement(): RenameTableStatementContext {
        let localctx = new RenameTableStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 224, MySQLParser.RULE_renameTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2934);
            this.match(MySQLParser.RENAME_SYMBOL);
            this.setState(2935);
            _la = this.input().LA(1);
            if(!(_la === 581 || _la === 583)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(2936);
            this.renamePair();
            this.setState(2941);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(2937);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(2938);
                this.renamePair();
                }
                }
                this.setState(2943);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public renamePair(): RenamePairContext {
        let localctx = new RenamePairContext(this.getContext(), this.getState());
        this.enterRule(localctx, 226, MySQLParser.RULE_renamePair);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2944);
            this.tableRef();
            this.setState(2945);
            this.match(MySQLParser.TO_SYMBOL);
            this.setState(2946);
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public truncateTableStatement(): TruncateTableStatementContext {
        let localctx = new TruncateTableStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 228, MySQLParser.RULE_truncateTableStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2948);
            this.match(MySQLParser.TRUNCATE_SYMBOL);
            this.setState(2950);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 219, this.getContext())) {
                case 1:
                    {
                    this.setState(2949);
                    this.match(MySQLParser.TABLE_SYMBOL);
                    }
                    break;
            }
            this.setState(2952);
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public importStatement(): ImportStatementContext {
        let localctx = new ImportStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 230, MySQLParser.RULE_importStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2954);
            this.match(MySQLParser.IMPORT_SYMBOL);
            this.setState(2955);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(2956);
            this.match(MySQLParser.FROM_SYMBOL);
            this.setState(2957);
            this.textStringLiteralList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public callStatement(): CallStatementContext {
        let localctx = new CallStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 232, MySQLParser.RULE_callStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2959);
            this.match(MySQLParser.CALL_SYMBOL);
            this.setState(2960);
            this.procedureRef();
            this.setState(2966);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 32) {
                {
                this.setState(2961);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(2963);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 220, this.getContext())) {
                    case 1:
                        {
                        this.setState(2962);
                        this.exprList();
                        }
                        break;
                }
                this.setState(2965);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public deleteStatement(): DeleteStatementContext {
        let localctx = new DeleteStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 234, MySQLParser.RULE_deleteStatement);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(2969);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 653) {
                {
                this.setState(2968);
                this.withClause();
                }
            }

            this.setState(2971);
            this.match(MySQLParser.DELETE_SYMBOL);
            this.setState(2975);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 223, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(2972);
                    this.deleteStatementOption();
                    }
                    }
                }
                this.setState(2977);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 223, this.getContext());
            }
            this.setState(3010);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 232, this.getContext())) {
                case 1:
                    {
                    this.setState(2978);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(3002);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 230, this.getContext())) {
                        case 1:
                            {
                            this.setState(2979);
                            this.tableAliasRefList();
                            this.setState(2980);
                            this.match(MySQLParser.USING_SYMBOL);
                            this.setState(2981);
                            this.tableReferenceList();
                            this.setState(2983);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 651) {
                                {
                                this.setState(2982);
                                this.whereClause();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(2985);
                            this.tableRef();
                            this.setState(2988);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 225, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(2986);
                                    if (!(this.serverVersion >= 80017)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                                    }
                                    this.setState(2987);
                                    this.tableAlias();
                                    }
                                    break;
                            }
                            this.setState(2991);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 423) {
                                {
                                this.setState(2990);
                                this.partitionDelete();
                                }
                            }

                            this.setState(2994);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 651) {
                                {
                                this.setState(2993);
                                this.whereClause();
                                }
                            }

                            this.setState(2997);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 411) {
                                {
                                this.setState(2996);
                                this.orderClause();
                                }
                            }

                            this.setState(3000);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 306) {
                                {
                                this.setState(2999);
                                this.simpleLimitClause();
                                }
                            }

                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(3004);
                    this.tableAliasRefList();
                    this.setState(3005);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(3006);
                    this.tableReferenceList();
                    this.setState(3008);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 651) {
                        {
                        this.setState(3007);
                        this.whereClause();
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionDelete(): PartitionDeleteContext {
        let localctx = new PartitionDeleteContext(this.getContext(), this.getState());
        this.enterRule(localctx, 236, MySQLParser.RULE_partitionDelete);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3012);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(3013);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3014);
            this.identifierList();
            this.setState(3015);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public deleteStatementOption(): DeleteStatementOptionContext {
        let localctx = new DeleteStatementOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 238, MySQLParser.RULE_deleteStatementOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3017);
            _la = this.input().LA(1);
            if(!(_la === 264 || _la === 321 || _la === 449)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public doStatement(): DoStatementContext {
        let localctx = new DoStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 240, MySQLParser.RULE_doStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3019);
            this.match(MySQLParser.DO_SYMBOL);
            this.setState(3020);
            this.selectItemList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public handlerStatement(): HandlerStatementContext {
        let localctx = new HandlerStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 242, MySQLParser.RULE_handlerStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3022);
            this.match(MySQLParser.HANDLER_SYMBOL);
            this.setState(3040);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 237, this.getContext())) {
                case 1:
                    {
                    this.setState(3023);
                    this.tableRef();
                    this.setState(3024);
                    this.match(MySQLParser.OPEN_SYMBOL);
                    this.setState(3026);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 233, this.getContext())) {
                        case 1:
                            {
                            this.setState(3025);
                            this.tableAlias();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(3028);
                    this.identifier();
                    this.setState(3038);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.CLOSE_SYMBOL:
                        {
                        this.setState(3029);
                        this.match(MySQLParser.CLOSE_SYMBOL);
                        }
                        break;
                    case MySQLParser.READ_SYMBOL:
                        {
                        this.setState(3030);
                        this.match(MySQLParser.READ_SYMBOL);
                        this.setState(3031);
                        this.handlerReadOrScan();
                        this.setState(3033);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 651) {
                            {
                            this.setState(3032);
                            this.whereClause();
                            }
                        }

                        this.setState(3036);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 306) {
                            {
                            this.setState(3035);
                            this.limitClause();
                            }
                        }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public handlerReadOrScan(): HandlerReadOrScanContext {
        let localctx = new HandlerReadOrScanContext(this.getContext(), this.getState());
        this.enterRule(localctx, 244, MySQLParser.RULE_handlerReadOrScan);
        let _la: number;
        try {
            this.setState(3052);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 239, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3042);
                    _la = this.input().LA(1);
                    if(!(_la === 225 || _la === 387)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3043);
                    this.identifier();
                    this.setState(3050);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.FIRST_SYMBOL:
                    case MySQLParser.LAST_SYMBOL:
                    case MySQLParser.NEXT_SYMBOL:
                    case MySQLParser.PREV_SYMBOL:
                        {
                        this.setState(3044);
                        _la = this.input().LA(1);
                        if(!(_la === 225 || _la === 298 || _la === 387 || _la === 437)) {
                        this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    case MySQLParser.EQUAL_OPERATOR:
                    case MySQLParser.GREATER_OR_EQUAL_OPERATOR:
                    case MySQLParser.GREATER_THAN_OPERATOR:
                    case MySQLParser.LESS_OR_EQUAL_OPERATOR:
                    case MySQLParser.LESS_THAN_OPERATOR:
                        {
                        this.setState(3045);
                        _la = this.input().LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 7744) !== 0))) {
                        this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(3046);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(3047);
                        this.values();
                        this.setState(3048);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertStatement(): InsertStatementContext {
        let localctx = new InsertStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 246, MySQLParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3054);
            this.match(MySQLParser.INSERT_SYMBOL);
            this.setState(3056);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 240, this.getContext())) {
                case 1:
                    {
                    this.setState(3055);
                    this.insertLockOption();
                    }
                    break;
            }
            this.setState(3059);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 241, this.getContext())) {
                case 1:
                    {
                    this.setState(3058);
                    this.match(MySQLParser.IGNORE_SYMBOL);
                    }
                    break;
            }
            this.setState(3062);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 242, this.getContext())) {
                case 1:
                    {
                    this.setState(3061);
                    this.match(MySQLParser.INTO_SYMBOL);
                    }
                    break;
            }
            this.setState(3064);
            this.tableRef();
            this.setState(3066);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 243, this.getContext())) {
                case 1:
                    {
                    this.setState(3065);
                    this.usePartition();
                    }
                    break;
            }
            this.setState(3078);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 246, this.getContext())) {
                case 1:
                    {
                    this.setState(3068);
                    this.insertFromConstructor();
                    this.setState(3070);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 244, this.getContext())) {
                        case 1:
                            {
                            this.setState(3069);
                            this.valuesReference();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(3072);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(3073);
                    this.updateList();
                    this.setState(3075);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 245, this.getContext())) {
                        case 1:
                            {
                            this.setState(3074);
                            this.valuesReference();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.setState(3077);
                    this.insertQueryExpression();
                    }
                    break;
            }
            this.setState(3081);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 401) {
                {
                this.setState(3080);
                this.insertUpdateList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertLockOption(): InsertLockOptionContext {
        let localctx = new InsertLockOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 248, MySQLParser.RULE_insertLockOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3083);
            _la = this.input().LA(1);
            if(!(_la === 169 || _la === 255 || _la === 321)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertFromConstructor(): InsertFromConstructorContext {
        let localctx = new InsertFromConstructorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 250, MySQLParser.RULE_insertFromConstructor);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3090);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 32) {
                {
                this.setState(3085);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3087);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 248, this.getContext())) {
                    case 1:
                        {
                        this.setState(3086);
                        this.fields();
                        }
                        break;
                }
                this.setState(3089);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            this.setState(3092);
            this.insertValues();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fields(): FieldsContext {
        let localctx = new FieldsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 252, MySQLParser.RULE_fields);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3094);
            this.insertIdentifier();
            this.setState(3099);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(3095);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3096);
                this.insertIdentifier();
                }
                }
                this.setState(3101);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertValues(): InsertValuesContext {
        let localctx = new InsertValuesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 254, MySQLParser.RULE_insertValues);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3102);
            _la = this.input().LA(1);
            if(!(_la === 635 || _la === 636)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(3103);
            this.valueList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertQueryExpression(): InsertQueryExpressionContext {
        let localctx = new InsertQueryExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 256, MySQLParser.RULE_insertQueryExpression);
        try {
            this.setState(3115);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 253, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3105);
                    this.queryExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3106);
                    this.queryExpressionParens();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3112);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 252, this.getContext())) {
                        case 1:
                            {
                            this.setState(3107);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(3109);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 251, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(3108);
                                    this.fields();
                                    }
                                    break;
                            }
                            this.setState(3111);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                            break;
                    }
                    this.setState(3114);
                    this.queryExpressionWithOptLockingClauses();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public valueList(): ValueListContext {
        let localctx = new ValueListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 258, MySQLParser.RULE_valueList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3117);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3119);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 254, this.getContext())) {
                case 1:
                    {
                    this.setState(3118);
                    this.values();
                    }
                    break;
            }
            this.setState(3121);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(3130);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 256, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3122);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3123);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(3125);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 255, this.getContext())) {
                        case 1:
                            {
                            this.setState(3124);
                            this.values();
                            }
                            break;
                    }
                    this.setState(3127);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    }
                }
                this.setState(3132);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 256, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public values(): ValuesContext {
        let localctx = new ValuesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 260, MySQLParser.RULE_values);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3135);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 257, this.getContext())) {
                case 1:
                    {
                    this.setState(3133);
                    this.expr(0);
                    }
                    break;
                case 2:
                    {
                    this.setState(3134);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
            this.setState(3144);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(3137);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3140);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 258, this.getContext())) {
                    case 1:
                        {
                        this.setState(3138);
                        this.expr(0);
                        }
                        break;
                    case 2:
                        {
                        this.setState(3139);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
                }
                }
                this.setState(3146);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public valuesReference(): ValuesReferenceContext {
        let localctx = new ValuesReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 262, MySQLParser.RULE_valuesReference);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3147);
            if (!( this.serverVersion >= 80018)) {
                throw this.createFailedPredicateException(" this.serverVersion >= 80018");
            }
            this.setState(3148);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(3149);
            this.identifier();
            this.setState(3151);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 32) {
                {
                this.setState(3150);
                this.columnInternalRefList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertUpdateList(): InsertUpdateListContext {
        let localctx = new InsertUpdateListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 264, MySQLParser.RULE_insertUpdateList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3153);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(3154);
            this.match(MySQLParser.DUPLICATE_SYMBOL);
            this.setState(3155);
            this.match(MySQLParser.KEY_SYMBOL);
            this.setState(3156);
            this.match(MySQLParser.UPDATE_SYMBOL);
            this.setState(3157);
            this.updateList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadStatement(): LoadStatementContext {
        let localctx = new LoadStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 266, MySQLParser.RULE_loadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3159);
            this.match(MySQLParser.LOAD_SYMBOL);
            this.setState(3160);
            this.dataOrXml();
            this.setState(3162);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 261, this.getContext())) {
                case 1:
                    {
                    this.setState(3161);
                    this.loadDataLock();
                    }
                    break;
            }
            this.setState(3165);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 262, this.getContext())) {
                case 1:
                    {
                    this.setState(3164);
                    this.loadFrom();
                    }
                    break;
            }
            this.setState(3168);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 263, this.getContext())) {
                case 1:
                    {
                    this.setState(3167);
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                    break;
            }
            this.setState(3171);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 264, this.getContext())) {
                case 1:
                    {
                    this.setState(3170);
                    this.loadSourceType();
                    }
                    break;
            }
            this.setState(3173);
            this.textStringLiteral();
            this.setState(3175);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 265, this.getContext())) {
                case 1:
                    {
                    this.setState(3174);
                    this.sourceCount();
                    }
                    break;
            }
            this.setState(3178);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 266, this.getContext())) {
                case 1:
                    {
                    this.setState(3177);
                    this.sourceOrder();
                    }
                    break;
            }
            this.setState(3181);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 264 || _la === 475) {
                {
                this.setState(3180);
                _la = this.input().LA(1);
                if(!(_la === 264 || _la === 475)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(3183);
            this.match(MySQLParser.INTO_SYMBOL);
            this.setState(3184);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(3185);
            this.tableRef();
            this.setState(3187);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 268, this.getContext())) {
                case 1:
                    {
                    this.setState(3186);
                    this.usePartition();
                    }
                    break;
            }
            this.setState(3190);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 269, this.getContext())) {
                case 1:
                    {
                    this.setState(3189);
                    this.charsetClause();
                    }
                    break;
            }
            this.setState(3193);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 270, this.getContext())) {
                case 1:
                    {
                    this.setState(3192);
                    this.xmlRowsIdentifiedBy();
                    }
                    break;
            }
            this.setState(3196);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 271, this.getContext())) {
                case 1:
                    {
                    this.setState(3195);
                    this.fieldsClause();
                    }
                    break;
            }
            this.setState(3199);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 272, this.getContext())) {
                case 1:
                    {
                    this.setState(3198);
                    this.linesClause();
                    }
                    break;
            }
            this.setState(3201);
            this.loadDataFileTail();
            this.setState(3203);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 273, this.getContext())) {
                case 1:
                    {
                    this.setState(3202);
                    this.loadParallel();
                    }
                    break;
            }
            this.setState(3206);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 274, this.getContext())) {
                case 1:
                    {
                    this.setState(3205);
                    this.loadMemory();
                    }
                    break;
            }
            this.setState(3209);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 275, this.getContext())) {
                case 1:
                    {
                    this.setState(3208);
                    this.loadAlgorithm();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dataOrXml(): DataOrXmlContext {
        let localctx = new DataOrXmlContext(this.getContext(), this.getState());
        this.enterRule(localctx, 268, MySQLParser.RULE_dataOrXml);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3211);
            _la = this.input().LA(1);
            if(!(_la === 153 || _la === 661)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadDataLock(): LoadDataLockContext {
        let localctx = new LoadDataLockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 270, MySQLParser.RULE_loadDataLock);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3213);
            _la = this.input().LA(1);
            if(!(_la === 125 || _la === 321)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadFrom(): LoadFromContext {
        let localctx = new LoadFromContext(this.getContext(), this.getState());
        this.enterRule(localctx, 272, MySQLParser.RULE_loadFrom);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3215);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(3216);
            this.match(MySQLParser.FROM_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadSourceType(): LoadSourceTypeContext {
        let localctx = new LoadSourceTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 274, MySQLParser.RULE_loadSourceType);
        let _la: number;
        try {
            this.setState(3221);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 276, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3218);
                    this.match(MySQLParser.INFILE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3219);
                    if (!(this.serverVersion >= 80200)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80200");
                    }
                    this.setState(3220);
                    _la = this.input().LA(1);
                    if(!(_la === 805 || _la === 811)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceCount(): SourceCountContext {
        let localctx = new SourceCountContext(this.getContext(), this.getState());
        this.enterRule(localctx, 276, MySQLParser.RULE_sourceCount);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3223);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(3229);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 277, this.getContext())) {
                case 1:
                    {
                    this.setState(3224);
                    this.match(MySQLParser.COUNT_SYMBOL);
                    this.setState(3225);
                    this.match(MySQLParser.INT_NUMBER);
                    }
                    break;
                case 2:
                    {
                    this.setState(3226);
                    this.pureIdentifier();
                    this.setState(3227);
                    this.match(MySQLParser.INT_NUMBER);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceOrder(): SourceOrderContext {
        let localctx = new SourceOrderContext(this.getContext(), this.getState());
        this.enterRule(localctx, 278, MySQLParser.RULE_sourceOrder);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3231);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(3232);
            this.match(MySQLParser.IN_SYMBOL);
            this.setState(3233);
            this.match(MySQLParser.PRIMARY_SYMBOL);
            this.setState(3234);
            this.match(MySQLParser.KEY_SYMBOL);
            this.setState(3235);
            this.match(MySQLParser.ORDER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext {
        let localctx = new XmlRowsIdentifiedByContext(this.getContext(), this.getState());
        this.enterRule(localctx, 280, MySQLParser.RULE_xmlRowsIdentifiedBy);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3237);
            this.match(MySQLParser.ROWS_SYMBOL);
            this.setState(3238);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(3239);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(3240);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadDataFileTail(): LoadDataFileTailContext {
        let localctx = new LoadDataFileTailContext(this.getContext(), this.getState());
        this.enterRule(localctx, 282, MySQLParser.RULE_loadDataFileTail);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3245);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 278, this.getContext())) {
                case 1:
                    {
                    this.setState(3242);
                    this.match(MySQLParser.IGNORE_SYMBOL);
                    this.setState(3243);
                    this.match(MySQLParser.INT_NUMBER);
                    this.setState(3244);
                    _la = this.input().LA(1);
                    if(!(_la === 308 || _la === 500)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
            this.setState(3248);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 279, this.getContext())) {
                case 1:
                    {
                    this.setState(3247);
                    this.loadDataFileTargetList();
                    }
                    break;
            }
            this.setState(3252);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 280, this.getContext())) {
                case 1:
                    {
                    this.setState(3250);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(3251);
                    this.updateList();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadDataFileTargetList(): LoadDataFileTargetListContext {
        let localctx = new LoadDataFileTargetListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 284, MySQLParser.RULE_loadDataFileTargetList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3254);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3256);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 281, this.getContext())) {
                case 1:
                    {
                    this.setState(3255);
                    this.fieldOrVariableList();
                    }
                    break;
            }
            this.setState(3258);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldOrVariableList(): FieldOrVariableListContext {
        let localctx = new FieldOrVariableListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 286, MySQLParser.RULE_fieldOrVariableList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3264);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 282, this.getContext())) {
                case 1:
                    {
                    this.setState(3260);
                    this.columnRef();
                    }
                    break;
                case 2:
                    {
                    this.setState(3261);
                    this.match(MySQLParser.AT_SIGN_SYMBOL);
                    this.setState(3262);
                    this.textOrIdentifier();
                    }
                    break;
                case 3:
                    {
                    this.setState(3263);
                    this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                    }
                    break;
            }
            this.setState(3276);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(3266);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3272);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 283, this.getContext())) {
                    case 1:
                        {
                        this.setState(3267);
                        this.columnRef();
                        }
                        break;
                    case 2:
                        {
                        this.setState(3268);
                        this.match(MySQLParser.AT_SIGN_SYMBOL);
                        this.setState(3269);
                        this.textOrIdentifier();
                        }
                        break;
                    case 3:
                        {
                        this.setState(3270);
                        this.match(MySQLParser.AT_TEXT_SUFFIX);
                        }
                        break;
                    case 4:
                        {
                        this.setState(3271);
                        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                        }
                        break;
                }
                }
                }
                this.setState(3278);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadAlgorithm(): LoadAlgorithmContext {
        let localctx = new LoadAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 288, MySQLParser.RULE_loadAlgorithm);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3279);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(3280);
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.setState(3281);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(3282);
            this.match(MySQLParser.BULK_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadParallel(): LoadParallelContext {
        let localctx = new LoadParallelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 290, MySQLParser.RULE_loadParallel);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3284);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(3285);
            this.match(MySQLParser.PARALLEL_SYMBOL);
            this.setState(3286);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(3287);
            this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loadMemory(): LoadMemoryContext {
        let localctx = new LoadMemoryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 292, MySQLParser.RULE_loadMemory);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3289);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(3290);
            this.match(MySQLParser.MEMORY_SYMBOL);
            this.setState(3291);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(3292);
            this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replaceStatement(): ReplaceStatementContext {
        let localctx = new ReplaceStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 294, MySQLParser.RULE_replaceStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3294);
            this.match(MySQLParser.REPLACE_SYMBOL);
            this.setState(3296);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 285, this.getContext())) {
                case 1:
                    {
                    this.setState(3295);
                    _la = this.input().LA(1);
                    if(!(_la === 169 || _la === 321)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
            this.setState(3299);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 286, this.getContext())) {
                case 1:
                    {
                    this.setState(3298);
                    this.match(MySQLParser.INTO_SYMBOL);
                    }
                    break;
            }
            this.setState(3301);
            this.tableRef();
            this.setState(3303);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 287, this.getContext())) {
                case 1:
                    {
                    this.setState(3302);
                    this.usePartition();
                    }
                    break;
            }
            this.setState(3309);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 288, this.getContext())) {
                case 1:
                    {
                    this.setState(3305);
                    this.insertFromConstructor();
                    }
                    break;
                case 2:
                    {
                    this.setState(3306);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(3307);
                    this.updateList();
                    }
                    break;
                case 3:
                    {
                    this.setState(3308);
                    this.insertQueryExpression();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectStatement(): SelectStatementContext {
        let localctx = new SelectStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 296, MySQLParser.RULE_selectStatement);
        try {
            this.setState(3316);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 290, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3311);
                    this.queryExpression();
                    this.setState(3313);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 289, this.getContext())) {
                        case 1:
                            {
                            this.setState(3312);
                            this.lockingClauseList();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3315);
                    this.selectStatementWithInto();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext {
        let localctx = new SelectStatementWithIntoContext(this.getContext(), this.getState());
        this.enterRule(localctx, 298, MySQLParser.RULE_selectStatementWithInto);
        try {
            this.setState(3335);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 292, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3318);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(3319);
                    this.selectStatementWithInto();
                    this.setState(3320);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3322);
                    this.queryExpression();
                    this.setState(3323);
                    this.intoClause();
                    this.setState(3325);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 291, this.getContext())) {
                        case 1:
                            {
                            this.setState(3324);
                            this.lockingClauseList();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3327);
                    this.queryExpression();
                    this.setState(3328);
                    this.lockingClauseList();
                    this.setState(3329);
                    this.intoClause();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(3331);
                    if (!(this.serverVersion >= 80024 && this.serverVersion < 80031)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024 && this.serverVersion < 80031");
                    }
                    this.setState(3332);
                    this.queryExpressionParens();
                    this.setState(3333);
                    this.intoClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpression(): QueryExpressionContext {
        let localctx = new QueryExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 300, MySQLParser.RULE_queryExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3338);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 293, this.getContext())) {
                case 1:
                    {
                    this.setState(3337);
                    this.withClause();
                    }
                    break;
            }
            this.setState(3340);
            this.queryExpressionBody();
            this.setState(3342);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 294, this.getContext())) {
                case 1:
                    {
                    this.setState(3341);
                    this.orderClause();
                    }
                    break;
            }
            this.setState(3345);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 295, this.getContext())) {
                case 1:
                    {
                    this.setState(3344);
                    this.limitClause();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpressionBody(): QueryExpressionBodyContext {
        let localctx = new QueryExpressionBodyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 302, MySQLParser.RULE_queryExpressionBody);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3349);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 296, this.getContext())) {
                case 1:
                    {
                    this.setState(3347);
                    this.queryPrimary();
                    }
                    break;
                case 2:
                    {
                    this.setState(3348);
                    this.queryExpressionParens();
                    }
                    break;
            }
            this.setState(3362);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 299, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3354);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 297, this.getContext())) {
                        case 1:
                            {
                            this.setState(3351);
                            this.match(MySQLParser.UNION_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(3352);
                            if (!(this.serverVersion >= 80031)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80031");
                            }
                            this.setState(3353);
                            _la = this.input().LA(1);
                            if(!(_la === 671 || _la === 803)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                    }
                    this.setState(3357);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 298, this.getContext())) {
                        case 1:
                            {
                            this.setState(3356);
                            this.unionOption();
                            }
                            break;
                    }
                    this.setState(3359);
                    this.queryExpressionBody();
                    }
                    }
                }
                this.setState(3364);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 299, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        let localctx = new QueryExpressionParensContext(this.getContext(), this.getState());
        this.enterRule(localctx, 304, MySQLParser.RULE_queryExpressionParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3365);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3368);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 300, this.getContext())) {
                case 1:
                    {
                    this.setState(3366);
                    this.queryExpressionParens();
                    }
                    break;
                case 2:
                    {
                    this.setState(3367);
                    this.queryExpressionWithOptLockingClauses();
                    }
                    break;
            }
            this.setState(3370);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localctx = new QueryPrimaryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 306, MySQLParser.RULE_queryPrimary);
        try {
            this.setState(3377);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 301, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3372);
                    this.querySpecification();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3373);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(3374);
                    this.tableValueConstructor();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3375);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(3376);
                    this.explicitTable();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public querySpecification(): QuerySpecificationContext {
        let localctx = new QuerySpecificationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 308, MySQLParser.RULE_querySpecification);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3379);
            this.match(MySQLParser.SELECT_SYMBOL);
            this.setState(3383);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 302, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3380);
                    this.selectOption();
                    }
                    }
                }
                this.setState(3385);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 302, this.getContext());
            }
            this.setState(3386);
            this.selectItemList();
            this.setState(3388);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 303, this.getContext())) {
                case 1:
                    {
                    this.setState(3387);
                    this.intoClause();
                    }
                    break;
            }
            this.setState(3391);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 304, this.getContext())) {
                case 1:
                    {
                    this.setState(3390);
                    this.fromClause();
                    }
                    break;
            }
            this.setState(3394);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 305, this.getContext())) {
                case 1:
                    {
                    this.setState(3393);
                    this.whereClause();
                    }
                    break;
            }
            this.setState(3397);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 306, this.getContext())) {
                case 1:
                    {
                    this.setState(3396);
                    this.groupByClause();
                    }
                    break;
            }
            this.setState(3400);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 307, this.getContext())) {
                case 1:
                    {
                    this.setState(3399);
                    this.havingClause();
                    }
                    break;
            }
            this.setState(3403);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 308, this.getContext())) {
                case 1:
                    {
                    this.setState(3402);
                    this.windowClause();
                    }
                    break;
            }
            this.setState(3406);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 309, this.getContext())) {
                case 1:
                    {
                    this.setState(3405);
                    this.qualifyClause();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public subquery(): SubqueryContext {
        let localctx = new SubqueryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 310, MySQLParser.RULE_subquery);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3408);
            this.queryExpressionParens();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public querySpecOption(): QuerySpecOptionContext {
        let localctx = new QuerySpecOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 312, MySQLParser.RULE_querySpecOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3410);
            _la = this.input().LA(1);
            if(!(_la === 57 || _la === 180 || _la === 255 || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & 8388631) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public limitClause(): LimitClauseContext {
        let localctx = new LimitClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 314, MySQLParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3412);
            this.match(MySQLParser.LIMIT_SYMBOL);
            this.setState(3413);
            this.limitOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public simpleLimitClause(): SimpleLimitClauseContext {
        let localctx = new SimpleLimitClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 316, MySQLParser.RULE_simpleLimitClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3415);
            this.match(MySQLParser.LIMIT_SYMBOL);
            this.setState(3416);
            this.limitOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public limitOptions(): LimitOptionsContext {
        let localctx = new LimitOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 318, MySQLParser.RULE_limitOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3418);
            this.limitOption();
            this.setState(3421);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 310, this.getContext())) {
                case 1:
                    {
                    this.setState(3419);
                    _la = this.input().LA(1);
                    if(!(_la === 29 || _la === 400)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(3420);
                    this.limitOption();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public limitOption(): LimitOptionContext {
        let localctx = new LimitOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 320, MySQLParser.RULE_limitOption);
        let _la: number;
        try {
            this.setState(3425);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 311, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3423);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3424);
                    _la = this.input().LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 43)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public intoClause(): IntoClauseContext {
        let localctx = new IntoClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 322, MySQLParser.RULE_intoClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3427);
            this.match(MySQLParser.INTO_SYMBOL);
            this.setState(3455);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 318, this.getContext())) {
                case 1:
                    {
                    this.setState(3428);
                    this.match(MySQLParser.OUTFILE_SYMBOL);
                    this.setState(3429);
                    this.textStringLiteral();
                    this.setState(3431);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 312, this.getContext())) {
                        case 1:
                            {
                            this.setState(3430);
                            this.charsetClause();
                            }
                            break;
                    }
                    this.setState(3434);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 313, this.getContext())) {
                        case 1:
                            {
                            this.setState(3433);
                            this.fieldsClause();
                            }
                            break;
                    }
                    this.setState(3437);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 314, this.getContext())) {
                        case 1:
                            {
                            this.setState(3436);
                            this.linesClause();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(3439);
                    this.match(MySQLParser.DUMPFILE_SYMBOL);
                    this.setState(3440);
                    this.textStringLiteral();
                    }
                    break;
                case 3:
                    {
                    this.setState(3443);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 315, this.getContext())) {
                        case 1:
                            {
                            this.setState(3441);
                            this.textOrIdentifier();
                            }
                            break;
                        case 2:
                            {
                            this.setState(3442);
                            this.userVariable();
                            }
                            break;
                    }
                    this.setState(3452);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 317, this.getContext());
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                            {
                            this.setState(3445);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(3448);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 316, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(3446);
                                    this.textOrIdentifier();
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(3447);
                                    this.userVariable();
                                    }
                                    break;
                            }
                            }
                            }
                        }
                        this.setState(3454);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 317, this.getContext());
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public procedureAnalyseClause(): ProcedureAnalyseClauseContext {
        let localctx = new ProcedureAnalyseClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 324, MySQLParser.RULE_procedureAnalyseClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3457);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(3458);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3464);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 3) {
                {
                this.setState(3459);
                this.match(MySQLParser.INT_NUMBER);
                this.setState(3462);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(3460);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3461);
                    this.match(MySQLParser.INT_NUMBER);
                    }
                }

                }
            }

            this.setState(3466);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public havingClause(): HavingClauseContext {
        let localctx = new HavingClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 326, MySQLParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3468);
            this.match(MySQLParser.HAVING_SYMBOL);
            this.setState(3469);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public qualifyClause(): QualifyClauseContext {
        let localctx = new QualifyClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 328, MySQLParser.RULE_qualifyClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3471);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(3472);
            this.match(MySQLParser.QUALIFY_SYMBOL);
            this.setState(3473);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowClause(): WindowClauseContext {
        let localctx = new WindowClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 330, MySQLParser.RULE_windowClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3475);
            this.match(MySQLParser.WINDOW_SYMBOL);
            this.setState(3476);
            this.windowDefinition();
            this.setState(3481);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 321, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3477);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3478);
                    this.windowDefinition();
                    }
                    }
                }
                this.setState(3483);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 321, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localctx = new WindowDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 332, MySQLParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3484);
            this.windowName();
            this.setState(3485);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(3486);
            this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowSpec(): WindowSpecContext {
        let localctx = new WindowSpecContext(this.getContext(), this.getState());
        this.enterRule(localctx, 334, MySQLParser.RULE_windowSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3488);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3489);
            this.windowSpecDetails();
            this.setState(3490);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowSpecDetails(): WindowSpecDetailsContext {
        let localctx = new WindowSpecDetailsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 336, MySQLParser.RULE_windowSpecDetails);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3493);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 322, this.getContext())) {
                case 1:
                    {
                    this.setState(3492);
                    this.windowName();
                    }
                    break;
            }
            this.setState(3498);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 423) {
                {
                this.setState(3495);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(3496);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(3497);
                this.orderList();
                }
            }

            this.setState(3501);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 411) {
                {
                this.setState(3500);
                this.orderClause();
                }
            }

            this.setState(3504);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 450 || _la === 500 || _la === 691) {
                {
                this.setState(3503);
                this.windowFrameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameClause(): WindowFrameClauseContext {
        let localctx = new WindowFrameClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 338, MySQLParser.RULE_windowFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3506);
            this.windowFrameUnits();
            this.setState(3507);
            this.windowFrameExtent();
            this.setState(3509);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 688) {
                {
                this.setState(3508);
                this.windowFrameExclusion();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameUnits(): WindowFrameUnitsContext {
        let localctx = new WindowFrameUnitsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 340, MySQLParser.RULE_windowFrameUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3511);
            _la = this.input().LA(1);
            if(!(_la === 450 || _la === 500 || _la === 691)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameExtent(): WindowFrameExtentContext {
        let localctx = new WindowFrameExtentContext(this.getContext(), this.getState());
        this.enterRule(localctx, 342, MySQLParser.RULE_windowFrameExtent);
        try {
            this.setState(3515);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.PARAM_MARKER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
            case MySQLParser.CURRENT_SYMBOL:
            case MySQLParser.INTERVAL_SYMBOL:
            case MySQLParser.UNBOUNDED_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3513);
                this.windowFrameStart();
                }
                break;
            case MySQLParser.BETWEEN_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3514);
                this.windowFrameBetween();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameStart(): WindowFrameStartContext {
        let localctx = new WindowFrameStartContext(this.getContext(), this.getState());
        this.enterRule(localctx, 344, MySQLParser.RULE_windowFrameStart);
        try {
            this.setState(3531);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.UNBOUNDED_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3517);
                this.match(MySQLParser.UNBOUNDED_SYMBOL);
                this.setState(3518);
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3519);
                this.ulonglongNumber();
                this.setState(3520);
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.PARAM_MARKER:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3522);
                this.match(MySQLParser.PARAM_MARKER);
                this.setState(3523);
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.INTERVAL_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(3524);
                this.match(MySQLParser.INTERVAL_SYMBOL);
                this.setState(3525);
                this.expr(0);
                this.setState(3526);
                this.interval();
                this.setState(3527);
                this.match(MySQLParser.PRECEDING_SYMBOL);
                }
                break;
            case MySQLParser.CURRENT_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(3529);
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.setState(3530);
                this.match(MySQLParser.ROW_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameBetween(): WindowFrameBetweenContext {
        let localctx = new WindowFrameBetweenContext(this.getContext(), this.getState());
        this.enterRule(localctx, 346, MySQLParser.RULE_windowFrameBetween);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3533);
            this.match(MySQLParser.BETWEEN_SYMBOL);
            this.setState(3534);
            this.windowFrameBound();
            this.setState(3535);
            this.match(MySQLParser.AND_SYMBOL);
            this.setState(3536);
            this.windowFrameBound();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameBound(): WindowFrameBoundContext {
        let localctx = new WindowFrameBoundContext(this.getContext(), this.getState());
        this.enterRule(localctx, 348, MySQLParser.RULE_windowFrameBound);
        try {
            this.setState(3551);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 329, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3538);
                    this.windowFrameStart();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3539);
                    this.match(MySQLParser.UNBOUNDED_SYMBOL);
                    this.setState(3540);
                    this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3541);
                    this.ulonglongNumber();
                    this.setState(3542);
                    this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(3544);
                    this.match(MySQLParser.PARAM_MARKER);
                    this.setState(3545);
                    this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(3546);
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.setState(3547);
                    this.expr(0);
                    this.setState(3548);
                    this.interval();
                    this.setState(3549);
                    this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFrameExclusion(): WindowFrameExclusionContext {
        let localctx = new WindowFrameExclusionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 350, MySQLParser.RULE_windowFrameExclusion);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3553);
            this.match(MySQLParser.EXCLUDE_SYMBOL);
            this.setState(3560);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CURRENT_SYMBOL:
                {
                this.setState(3554);
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.setState(3555);
                this.match(MySQLParser.ROW_SYMBOL);
                }
                break;
            case MySQLParser.GROUP_SYMBOL:
                {
                this.setState(3556);
                this.match(MySQLParser.GROUP_SYMBOL);
                }
                break;
            case MySQLParser.TIES_SYMBOL:
                {
                this.setState(3557);
                this.match(MySQLParser.TIES_SYMBOL);
                }
                break;
            case MySQLParser.NO_SYMBOL:
                {
                this.setState(3558);
                this.match(MySQLParser.NO_SYMBOL);
                this.setState(3559);
                this.match(MySQLParser.OTHERS_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public withClause(): WithClauseContext {
        let localctx = new WithClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 352, MySQLParser.RULE_withClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3562);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(3564);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 331, this.getContext())) {
                case 1:
                    {
                    this.setState(3563);
                    this.match(MySQLParser.RECURSIVE_SYMBOL);
                    }
                    break;
            }
            this.setState(3566);
            this.commonTableExpression();
            this.setState(3571);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 332, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3567);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3568);
                    this.commonTableExpression();
                    }
                    }
                }
                this.setState(3573);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 332, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public commonTableExpression(): CommonTableExpressionContext {
        let localctx = new CommonTableExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 354, MySQLParser.RULE_commonTableExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3574);
            this.identifier();
            this.setState(3576);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 32) {
                {
                this.setState(3575);
                this.columnInternalRefList();
                }
            }

            this.setState(3578);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(3579);
            this.subquery();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupByClause(): GroupByClauseContext {
        let localctx = new GroupByClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 356, MySQLParser.RULE_groupByClause);
        let _la: number;
        try {
            this.setState(3595);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 335, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3581);
                    this.match(MySQLParser.GROUP_SYMBOL);
                    this.setState(3582);
                    this.match(MySQLParser.BY_SYMBOL);
                    this.setState(3583);
                    this.orderList();
                    this.setState(3585);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 334, this.getContext())) {
                        case 1:
                            {
                            this.setState(3584);
                            this.olapOption();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3587);
                    if (!(this.serverVersion >= 80032)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80032");
                    }
                    this.setState(3588);
                    this.match(MySQLParser.GROUP_SYMBOL);
                    this.setState(3589);
                    this.match(MySQLParser.BY_SYMBOL);
                    this.setState(3590);
                    _la = this.input().LA(1);
                    if(!(_la === 141 || _la === 497)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(3591);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(3592);
                    this.groupList();
                    this.setState(3593);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public olapOption(): OlapOptionContext {
        let localctx = new OlapOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 358, MySQLParser.RULE_olapOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3597);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(3598);
            this.match(MySQLParser.ROLLUP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public orderClause(): OrderClauseContext {
        let localctx = new OrderClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 360, MySQLParser.RULE_orderClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3600);
            this.match(MySQLParser.ORDER_SYMBOL);
            this.setState(3601);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(3602);
            this.orderList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public direction(): DirectionContext {
        let localctx = new DirectionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 362, MySQLParser.RULE_direction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3604);
            _la = this.input().LA(1);
            if(!(_la === 64 || _la === 172)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fromClause(): FromClauseContext {
        let localctx = new FromClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 364, MySQLParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3606);
            this.match(MySQLParser.FROM_SYMBOL);
            this.setState(3609);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 336, this.getContext())) {
                case 1:
                    {
                    this.setState(3607);
                    this.match(MySQLParser.DUAL_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(3608);
                    this.tableReferenceList();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableReferenceList(): TableReferenceListContext {
        let localctx = new TableReferenceListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 366, MySQLParser.RULE_tableReferenceList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3611);
            this.tableReference();
            this.setState(3616);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 337, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3612);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3613);
                    this.tableReference();
                    }
                    }
                }
                this.setState(3618);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 337, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableValueConstructor(): TableValueConstructorContext {
        let localctx = new TableValueConstructorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 368, MySQLParser.RULE_tableValueConstructor);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3619);
            this.match(MySQLParser.VALUES_SYMBOL);
            this.setState(3620);
            this.rowValueExplicit();
            this.setState(3625);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 338, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3621);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3622);
                    this.rowValueExplicit();
                    }
                    }
                }
                this.setState(3627);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 338, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public explicitTable(): ExplicitTableContext {
        let localctx = new ExplicitTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 370, MySQLParser.RULE_explicitTable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3628);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(3629);
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public rowValueExplicit(): RowValueExplicitContext {
        let localctx = new RowValueExplicitContext(this.getContext(), this.getState());
        this.enterRule(localctx, 372, MySQLParser.RULE_rowValueExplicit);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3631);
            this.match(MySQLParser.ROW_SYMBOL);
            this.setState(3632);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3634);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 339, this.getContext())) {
                case 1:
                    {
                    this.setState(3633);
                    this.values();
                    }
                    break;
            }
            this.setState(3636);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectOption(): SelectOptionContext {
        let localctx = new SelectOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 374, MySQLParser.RULE_selectOption);
        try {
            this.setState(3640);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ALL_SYMBOL:
            case MySQLParser.DISTINCT_SYMBOL:
            case MySQLParser.HIGH_PRIORITY_SYMBOL:
            case MySQLParser.SQL_BIG_RESULT_SYMBOL:
            case MySQLParser.SQL_BUFFER_RESULT_SYMBOL:
            case MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL:
            case MySQLParser.SQL_SMALL_RESULT_SYMBOL:
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3638);
                this.querySpecOption();
                }
                break;
            case MySQLParser.SQL_NO_CACHE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3639);
                this.match(MySQLParser.SQL_NO_CACHE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockingClauseList(): LockingClauseListContext {
        let localctx = new LockingClauseListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 376, MySQLParser.RULE_lockingClauseList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3642);
            if (!(this.serverVersion >= 80031)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80031");
            }
            this.setState(3644);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            do {
                {
                {
                this.setState(3643);
                this.lockingClause();
                }
                }
                this.setState(3646);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            } while (_la === 232 || _la === 314);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockingClause(): LockingClauseContext {
        let localctx = new LockingClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 378, MySQLParser.RULE_lockingClause);
        let _la: number;
        try {
            this.setState(3661);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3648);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(3649);
                this.lockStrengh();
                this.setState(3652);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 676) {
                    {
                    this.setState(3650);
                    this.match(MySQLParser.OF_SYMBOL);
                    this.setState(3651);
                    this.tableAliasRefList();
                    }
                }

                this.setState(3655);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 677 || _la === 679) {
                    {
                    this.setState(3654);
                    this.lockedRowAction();
                    }
                }

                }
                break;
            case MySQLParser.LOCK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3657);
                this.match(MySQLParser.LOCK_SYMBOL);
                this.setState(3658);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(3659);
                this.match(MySQLParser.SHARE_SYMBOL);
                this.setState(3660);
                this.match(MySQLParser.MODE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockStrengh(): LockStrenghContext {
        let localctx = new LockStrenghContext(this.getContext(), this.getState());
        this.enterRule(localctx, 380, MySQLParser.RULE_lockStrengh);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3663);
            _la = this.input().LA(1);
            if(!(_la === 520 || _la === 623)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockedRowAction(): LockedRowActionContext {
        let localctx = new LockedRowActionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 382, MySQLParser.RULE_lockedRowAction);
        try {
            this.setState(3668);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.SKIP_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3665);
                this.match(MySQLParser.SKIP_SYMBOL);
                this.setState(3666);
                this.match(MySQLParser.LOCKED_SYMBOL);
                }
                break;
            case MySQLParser.NOWAIT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3667);
                this.match(MySQLParser.NOWAIT_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectItemList(): SelectItemListContext {
        let localctx = new SelectItemListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 384, MySQLParser.RULE_selectItemList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3672);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 346, this.getContext())) {
                case 1:
                    {
                    this.setState(3670);
                    this.selectItem();
                    }
                    break;
                case 2:
                    {
                    this.setState(3671);
                    this.match(MySQLParser.MULT_OPERATOR);
                    }
                    break;
            }
            this.setState(3678);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 347, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3674);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3675);
                    this.selectItem();
                    }
                    }
                }
                this.setState(3680);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 347, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectItem(): SelectItemContext {
        let localctx = new SelectItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 386, MySQLParser.RULE_selectItem);
        try {
            this.setState(3686);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 349, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3681);
                    this.tableWild();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3682);
                    this.expr(0);
                    this.setState(3684);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 348, this.getContext())) {
                        case 1:
                            {
                            this.setState(3683);
                            this.selectAlias();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public selectAlias(): SelectAliasContext {
        let localctx = new SelectAliasContext(this.getContext(), this.getState());
        this.enterRule(localctx, 388, MySQLParser.RULE_selectAlias);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3689);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 350, this.getContext())) {
                case 1:
                    {
                    this.setState(3688);
                    this.match(MySQLParser.AS_SYMBOL);
                    }
                    break;
            }
            this.setState(3693);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 351, this.getContext())) {
                case 1:
                    {
                    this.setState(3691);
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.setState(3692);
                    this.textStringLiteral();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public whereClause(): WhereClauseContext {
        let localctx = new WhereClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 390, MySQLParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3695);
            this.match(MySQLParser.WHERE_SYMBOL);
            this.setState(3696);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableReference(): TableReferenceContext {
        let localctx = new TableReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 392, MySQLParser.RULE_tableReference);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3708);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 353, this.getContext())) {
                case 1:
                    {
                    this.setState(3698);
                    this.tableFactor();
                    }
                    break;
                case 2:
                    {
                    this.setState(3699);
                    this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                    this.setState(3703);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 352, this.getContext())) {
                        case 1:
                            {
                            this.setState(3700);
                            if (!(this.serverVersion < 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80017");
                            }
                            this.setState(3701);
                            this.identifier();
                            }
                            break;
                        case 2:
                            {
                            this.setState(3702);
                            this.match(MySQLParser.OJ_SYMBOL);
                            }
                            break;
                    }
                    this.setState(3705);
                    this.escapedTableReference();
                    this.setState(3706);
                    this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                    }
                    break;
            }
            this.setState(3713);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 354, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3710);
                    this.joinedTable();
                    }
                    }
                }
                this.setState(3715);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 354, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public escapedTableReference(): EscapedTableReferenceContext {
        let localctx = new EscapedTableReferenceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 394, MySQLParser.RULE_escapedTableReference);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3716);
            this.tableFactor();
            this.setState(3720);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 140 || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 2148532225) !== 0) || _la === 382 || _la === 495 || _la === 565) {
                {
                {
                this.setState(3717);
                this.joinedTable();
                }
                }
                this.setState(3722);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public joinedTable(): JoinedTableContext {
        let localctx = new JoinedTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 396, MySQLParser.RULE_joinedTable);
        try {
            this.setState(3742);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CROSS_SYMBOL:
            case MySQLParser.INNER_SYMBOL:
            case MySQLParser.JOIN_SYMBOL:
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3723);
                this.innerJoinType();
                this.setState(3724);
                this.tableReference();
                this.setState(3729);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 356, this.getContext())) {
                    case 1:
                        {
                        this.setState(3725);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(3726);
                        this.expr(0);
                        }
                        break;
                    case 2:
                        {
                        this.setState(3727);
                        this.match(MySQLParser.USING_SYMBOL);
                        this.setState(3728);
                        this.identifierListWithParentheses();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.LEFT_SYMBOL:
            case MySQLParser.RIGHT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3731);
                this.outerJoinType();
                this.setState(3732);
                this.tableReference();
                this.setState(3737);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.ON_SYMBOL:
                    {
                    this.setState(3733);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(3734);
                    this.expr(0);
                    }
                    break;
                case MySQLParser.USING_SYMBOL:
                    {
                    this.setState(3735);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(3736);
                    this.identifierListWithParentheses();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.NATURAL_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3739);
                this.naturalJoinType();
                this.setState(3740);
                this.tableFactor();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public naturalJoinType(): NaturalJoinTypeContext {
        let localctx = new NaturalJoinTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 398, MySQLParser.RULE_naturalJoinType);
        let _la: number;
        try {
            this.setState(3755);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 361, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3744);
                    this.match(MySQLParser.NATURAL_SYMBOL);
                    this.setState(3746);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 271) {
                        {
                        this.setState(3745);
                        this.match(MySQLParser.INNER_SYMBOL);
                        }
                    }

                    this.setState(3748);
                    this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3749);
                    this.match(MySQLParser.NATURAL_SYMBOL);
                    this.setState(3750);
                    _la = this.input().LA(1);
                    if(!(_la === 302 || _la === 495)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(3752);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 413) {
                        {
                        this.setState(3751);
                        this.match(MySQLParser.OUTER_SYMBOL);
                        }
                    }

                    this.setState(3754);
                    this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public innerJoinType(): InnerJoinTypeContext {
        let localctx = new InnerJoinTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 400, MySQLParser.RULE_innerJoinType);
        let _la: number;
        try {
            this.setState(3762);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CROSS_SYMBOL:
            case MySQLParser.INNER_SYMBOL:
            case MySQLParser.JOIN_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3758);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 140 || _la === 271) {
                    {
                    this.setState(3757);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 140 || _la === 271)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.setState(3760);
                this.match(MySQLParser.JOIN_SYMBOL);
                }
                break;
            case MySQLParser.STRAIGHT_JOIN_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3761);
                localctx._type_ = this.match(MySQLParser.STRAIGHT_JOIN_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public outerJoinType(): OuterJoinTypeContext {
        let localctx = new OuterJoinTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 402, MySQLParser.RULE_outerJoinType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3764);
            localctx._type_ = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 302 || _la === 495)) {
                localctx._type_ = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(3766);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 413) {
                {
                this.setState(3765);
                this.match(MySQLParser.OUTER_SYMBOL);
                }
            }

            this.setState(3768);
            this.match(MySQLParser.JOIN_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableFactor(): TableFactorContext {
        let localctx = new TableFactorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 404, MySQLParser.RULE_tableFactor);
        try {
            this.setState(3776);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 365, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3770);
                    this.singleTable();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3771);
                    this.singleTableParens();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3772);
                    this.derivedTable();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(3773);
                    this.tableReferenceListParens();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(3774);
                    if (!(this.serverVersion >= 80004)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80004");
                    }
                    this.setState(3775);
                    this.tableFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public singleTable(): SingleTableContext {
        let localctx = new SingleTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 406, MySQLParser.RULE_singleTable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3778);
            this.tableRef();
            this.setState(3780);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 366, this.getContext())) {
                case 1:
                    {
                    this.setState(3779);
                    this.usePartition();
                    }
                    break;
            }
            this.setState(3783);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 367, this.getContext())) {
                case 1:
                    {
                    this.setState(3782);
                    this.tableAlias();
                    }
                    break;
            }
            this.setState(3786);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 368, this.getContext())) {
                case 1:
                    {
                    this.setState(3785);
                    this.indexHintList();
                    }
                    break;
            }
            this.setState(3789);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 369, this.getContext())) {
                case 1:
                    {
                    this.setState(3788);
                    this.tablesampleClause();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public singleTableParens(): SingleTableParensContext {
        let localctx = new SingleTableParensContext(this.getContext(), this.getState());
        this.enterRule(localctx, 408, MySQLParser.RULE_singleTableParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3791);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3794);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 370, this.getContext())) {
                case 1:
                    {
                    this.setState(3792);
                    this.singleTable();
                    }
                    break;
                case 2:
                    {
                    this.setState(3793);
                    this.singleTableParens();
                    }
                    break;
            }
            this.setState(3796);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public derivedTable(): DerivedTableContext {
        let localctx = new DerivedTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 410, MySQLParser.RULE_derivedTable);
        try {
            this.setState(3814);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 375, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3798);
                    this.subquery();
                    this.setState(3800);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 371, this.getContext())) {
                        case 1:
                            {
                            this.setState(3799);
                            this.tableAlias();
                            }
                            break;
                    }
                    this.setState(3803);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 372, this.getContext())) {
                        case 1:
                            {
                            this.setState(3802);
                            this.columnInternalRefList();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3805);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(3806);
                    this.match(MySQLParser.LATERAL_SYMBOL);
                    this.setState(3807);
                    this.subquery();
                    this.setState(3809);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 373, this.getContext())) {
                        case 1:
                            {
                            this.setState(3808);
                            this.tableAlias();
                            }
                            break;
                    }
                    this.setState(3812);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 374, this.getContext())) {
                        case 1:
                            {
                            this.setState(3811);
                            this.columnInternalRefList();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableReferenceListParens(): TableReferenceListParensContext {
        let localctx = new TableReferenceListParensContext(this.getContext(), this.getState());
        this.enterRule(localctx, 412, MySQLParser.RULE_tableReferenceListParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3816);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3819);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 376, this.getContext())) {
                case 1:
                    {
                    this.setState(3817);
                    this.tableReferenceList();
                    }
                    break;
                case 2:
                    {
                    this.setState(3818);
                    this.tableReferenceListParens();
                    }
                    break;
            }
            this.setState(3821);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableFunction(): TableFunctionContext {
        let localctx = new TableFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 414, MySQLParser.RULE_tableFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3823);
            this.match(MySQLParser.JSON_TABLE_SYMBOL);
            this.setState(3824);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3825);
            this.expr(0);
            this.setState(3826);
            this.match(MySQLParser.COMMA_SYMBOL);
            this.setState(3827);
            this.textStringLiteral();
            this.setState(3828);
            this.columnsClause();
            this.setState(3829);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(3831);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 377, this.getContext())) {
                case 1:
                    {
                    this.setState(3830);
                    this.tableAlias();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnsClause(): ColumnsClauseContext {
        let localctx = new ColumnsClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 416, MySQLParser.RULE_columnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3833);
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.setState(3834);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(3835);
            this.jtColumn();
            this.setState(3840);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(3836);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3837);
                this.jtColumn();
                }
                }
                this.setState(3842);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(3843);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jtColumn(): JtColumnContext {
        let localctx = new JtColumnContext(this.getContext(), this.getState());
        this.enterRule(localctx, 418, MySQLParser.RULE_jtColumn);
        let _la: number;
        try {
            this.setState(3868);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 382, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3845);
                    this.identifier();
                    this.setState(3846);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(3847);
                    this.match(MySQLParser.ORDINALITY_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3849);
                    this.identifier();
                    this.setState(3850);
                    this.dataType();
                    this.setState(3853);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 379, this.getContext())) {
                        case 1:
                            {
                            this.setState(3851);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(3852);
                            this.collate();
                            }
                            break;
                    }
                    this.setState(3856);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 209) {
                        {
                        this.setState(3855);
                        this.match(MySQLParser.EXISTS_SYMBOL);
                        }
                    }

                    this.setState(3858);
                    this.match(MySQLParser.PATH_SYMBOL);
                    this.setState(3859);
                    this.textStringLiteral();
                    this.setState(3861);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 166 || _la === 200 || _la === 395) {
                        {
                        this.setState(3860);
                        this.onEmptyOrErrorJsonTable();
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(3863);
                    this.match(MySQLParser.NESTED_SYMBOL);
                    this.setState(3864);
                    this.match(MySQLParser.PATH_SYMBOL);
                    this.setState(3865);
                    this.textStringLiteral();
                    this.setState(3866);
                    this.columnsClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onEmptyOrError(): OnEmptyOrErrorContext {
        let localctx = new OnEmptyOrErrorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 420, MySQLParser.RULE_onEmptyOrError);
        let _la: number;
        try {
            this.setState(3875);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 384, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3870);
                    this.onEmpty();
                    this.setState(3872);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 166 || _la === 200 || _la === 395) {
                        {
                        this.setState(3871);
                        this.onError();
                        }
                    }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3874);
                    this.onError();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onEmptyOrErrorJsonTable(): OnEmptyOrErrorJsonTableContext {
        let localctx = new OnEmptyOrErrorJsonTableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 422, MySQLParser.RULE_onEmptyOrErrorJsonTable);
        try {
            this.setState(3881);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 385, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3877);
                    this.onEmptyOrError();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3878);
                    this.onError();
                    this.setState(3879);
                    this.onEmpty();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onEmpty(): OnEmptyContext {
        let localctx = new OnEmptyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 424, MySQLParser.RULE_onEmpty);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3883);
            this.jsonOnResponse();
            this.setState(3884);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(3885);
            this.match(MySQLParser.EMPTY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onError(): OnErrorContext {
        let localctx = new OnErrorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 426, MySQLParser.RULE_onError);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3887);
            this.jsonOnResponse();
            this.setState(3888);
            this.match(MySQLParser.ON_SYMBOL);
            this.setState(3889);
            this.match(MySQLParser.ERROR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jsonOnResponse(): JsonOnResponseContext {
        let localctx = new JsonOnResponseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 428, MySQLParser.RULE_jsonOnResponse);
        try {
            this.setState(3895);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ERROR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3891);
                this.match(MySQLParser.ERROR_SYMBOL);
                }
                break;
            case MySQLParser.NULL_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3892);
                this.match(MySQLParser.NULL_SYMBOL);
                }
                break;
            case MySQLParser.DEFAULT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3893);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.setState(3894);
                this.textStringLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public unionOption(): UnionOptionContext {
        let localctx = new UnionOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 430, MySQLParser.RULE_unionOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3897);
            _la = this.input().LA(1);
            if(!(_la === 57 || _la === 180)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableAlias(): TableAliasContext {
        let localctx = new TableAliasContext(this.getContext(), this.getState());
        this.enterRule(localctx, 432, MySQLParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3902);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 387, this.getContext())) {
                case 1:
                    {
                    this.setState(3899);
                    this.match(MySQLParser.AS_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(3900);
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.setState(3901);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(3904);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexHintList(): IndexHintListContext {
        let localctx = new IndexHintListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 434, MySQLParser.RULE_indexHintList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3906);
            this.indexHint();
            this.setState(3911);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 388, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(3907);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(3908);
                    this.indexHint();
                    }
                    }
                }
                this.setState(3913);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 388, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexHint(): IndexHintContext {
        let localctx = new IndexHintContext(this.getContext(), this.getState());
        this.enterRule(localctx, 436, MySQLParser.RULE_indexHint);
        let _la: number;
        try {
            this.setState(3934);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FORCE_SYMBOL:
            case MySQLParser.IGNORE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3914);
                this.indexHintType();
                this.setState(3915);
                this.keyOrIndex();
                this.setState(3917);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232) {
                    {
                    this.setState(3916);
                    this.indexHintClause();
                    }
                }

                this.setState(3919);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3920);
                this.indexList();
                this.setState(3921);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.USE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3923);
                this.match(MySQLParser.USE_SYMBOL);
                this.setState(3924);
                this.keyOrIndex();
                this.setState(3926);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232) {
                    {
                    this.setState(3925);
                    this.indexHintClause();
                    }
                }

                this.setState(3928);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3930);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 391, this.getContext())) {
                    case 1:
                        {
                        this.setState(3929);
                        this.indexList();
                        }
                        break;
                }
                this.setState(3932);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexHintType(): IndexHintTypeContext {
        let localctx = new IndexHintTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 438, MySQLParser.RULE_indexHintType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3936);
            _la = this.input().LA(1);
            if(!(_la === 230 || _la === 264)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyOrIndex(): KeyOrIndexContext {
        let localctx = new KeyOrIndexContext(this.getContext(), this.getState());
        this.enterRule(localctx, 440, MySQLParser.RULE_keyOrIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3938);
            _la = this.input().LA(1);
            if(!(_la === 268 || _la === 295)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public constraintKeyType(): ConstraintKeyTypeContext {
        let localctx = new ConstraintKeyTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 442, MySQLParser.RULE_constraintKeyType);
        let _la: number;
        try {
            this.setState(3946);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.PRIMARY_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3940);
                this.match(MySQLParser.PRIMARY_SYMBOL);
                this.setState(3941);
                this.match(MySQLParser.KEY_SYMBOL);
                }
                break;
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3942);
                this.match(MySQLParser.UNIQUE_SYMBOL);
                this.setState(3944);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 268 || _la === 295) {
                    {
                    this.setState(3943);
                    this.keyOrIndex();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexHintClause(): IndexHintClauseContext {
        let localctx = new IndexHintClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 444, MySQLParser.RULE_indexHintClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3948);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(3954);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.JOIN_SYMBOL:
                {
                this.setState(3949);
                this.match(MySQLParser.JOIN_SYMBOL);
                }
                break;
            case MySQLParser.ORDER_SYMBOL:
                {
                this.setState(3950);
                this.match(MySQLParser.ORDER_SYMBOL);
                this.setState(3951);
                this.match(MySQLParser.BY_SYMBOL);
                }
                break;
            case MySQLParser.GROUP_SYMBOL:
                {
                this.setState(3952);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(3953);
                this.match(MySQLParser.BY_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexList(): IndexListContext {
        let localctx = new IndexListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 446, MySQLParser.RULE_indexList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3956);
            this.indexListElement();
            this.setState(3961);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(3957);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3958);
                this.indexListElement();
                }
                }
                this.setState(3963);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexListElement(): IndexListElementContext {
        let localctx = new IndexListElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 448, MySQLParser.RULE_indexListElement);
        try {
            this.setState(3966);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 397, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(3964);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(3965);
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public updateStatement(): UpdateStatementContext {
        let localctx = new UpdateStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 450, MySQLParser.RULE_updateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(3969);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 653) {
                {
                this.setState(3968);
                this.withClause();
                }
            }

            this.setState(3971);
            this.match(MySQLParser.UPDATE_SYMBOL);
            this.setState(3973);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 399, this.getContext())) {
                case 1:
                    {
                    this.setState(3972);
                    this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                    }
                    break;
            }
            this.setState(3976);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 400, this.getContext())) {
                case 1:
                    {
                    this.setState(3975);
                    this.match(MySQLParser.IGNORE_SYMBOL);
                    }
                    break;
            }
            this.setState(3978);
            this.tableReferenceList();
            this.setState(3979);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(3980);
            this.updateList();
            this.setState(3982);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 651) {
                {
                this.setState(3981);
                this.whereClause();
                }
            }

            this.setState(3985);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 411) {
                {
                this.setState(3984);
                this.orderClause();
                }
            }

            this.setState(3988);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 306) {
                {
                this.setState(3987);
                this.simpleLimitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public transactionOrLockingStatement(): TransactionOrLockingStatementContext {
        let localctx = new TransactionOrLockingStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 452, MySQLParser.RULE_transactionOrLockingStatement);
        try {
            this.setState(3994);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.COMMIT_SYMBOL:
            case MySQLParser.START_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3990);
                this.transactionStatement();
                }
                break;
            case MySQLParser.RELEASE_SYMBOL:
            case MySQLParser.ROLLBACK_SYMBOL:
            case MySQLParser.SAVEPOINT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(3991);
                this.savepointStatement();
                }
                break;
            case MySQLParser.LOCK_SYMBOL:
            case MySQLParser.UNLOCK_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(3992);
                this.lockStatement();
                }
                break;
            case MySQLParser.XA_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(3993);
                this.xaStatement();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public transactionStatement(): TransactionStatementContext {
        let localctx = new TransactionStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 454, MySQLParser.RULE_transactionStatement);
        let _la: number;
        try {
            this.setState(4021);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.START_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(3996);
                this.match(MySQLParser.START_SYMBOL);
                this.setState(3997);
                this.match(MySQLParser.TRANSACTION_SYMBOL);
                this.setState(4001);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 453 || _la === 653) {
                    {
                    {
                    this.setState(3998);
                    this.startTransactionOptionList();
                    }
                    }
                    this.setState(4003);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.COMMIT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4004);
                this.match(MySQLParser.COMMIT_SYMBOL);
                this.setState(4006);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 655) {
                    {
                    this.setState(4005);
                    this.match(MySQLParser.WORK_SYMBOL);
                    }
                }

                this.setState(4013);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 61) {
                    {
                    this.setState(4008);
                    this.match(MySQLParser.AND_SYMBOL);
                    this.setState(4010);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 392) {
                        {
                        this.setState(4009);
                        this.match(MySQLParser.NO_SYMBOL);
                        }
                    }

                    this.setState(4012);
                    this.match(MySQLParser.CHAIN_SYMBOL);
                    }
                }

                this.setState(4019);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 392 || _la === 467) {
                    {
                    this.setState(4016);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 392) {
                        {
                        this.setState(4015);
                        this.match(MySQLParser.NO_SYMBOL);
                        }
                    }

                    this.setState(4018);
                    this.match(MySQLParser.RELEASE_SYMBOL);
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public beginWork(): BeginWorkContext {
        let localctx = new BeginWorkContext(this.getContext(), this.getState());
        this.enterRule(localctx, 456, MySQLParser.RULE_beginWork);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4023);
            this.match(MySQLParser.BEGIN_SYMBOL);
            this.setState(4025);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 655) {
                {
                this.setState(4024);
                this.match(MySQLParser.WORK_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public startTransactionOptionList(): StartTransactionOptionListContext {
        let localctx = new StartTransactionOptionListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 458, MySQLParser.RULE_startTransactionOptionList);
        let _la: number;
        try {
            this.setState(4032);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.WITH_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4027);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(4028);
                this.match(MySQLParser.CONSISTENT_SYMBOL);
                this.setState(4029);
                this.match(MySQLParser.SNAPSHOT_SYMBOL);
                }
                break;
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4030);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(4031);
                _la = this.input().LA(1);
                if(!(_la === 404 || _la === 657)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public savepointStatement(): SavepointStatementContext {
        let localctx = new SavepointStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 460, MySQLParser.RULE_savepointStatement);
        let _la: number;
        try {
            this.setState(4063);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.SAVEPOINT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4034);
                this.match(MySQLParser.SAVEPOINT_SYMBOL);
                this.setState(4035);
                this.identifier();
                }
                break;
            case MySQLParser.ROLLBACK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4036);
                this.match(MySQLParser.ROLLBACK_SYMBOL);
                this.setState(4038);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 655) {
                    {
                    this.setState(4037);
                    this.match(MySQLParser.WORK_SYMBOL);
                    }
                }

                this.setState(4058);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.TO_SYMBOL:
                    {
                    this.setState(4040);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(4042);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 415, this.getContext())) {
                        case 1:
                            {
                            this.setState(4041);
                            this.match(MySQLParser.SAVEPOINT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(4044);
                    this.identifier();
                    }
                    break;
                case MySQLParser.EOF:
                case MySQLParser.SEMICOLON_SYMBOL:
                case MySQLParser.AND_SYMBOL:
                case MySQLParser.NO_SYMBOL:
                case MySQLParser.RELEASE_SYMBOL:
                    {
                    this.setState(4050);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 61) {
                        {
                        this.setState(4045);
                        this.match(MySQLParser.AND_SYMBOL);
                        this.setState(4047);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 392) {
                            {
                            this.setState(4046);
                            this.match(MySQLParser.NO_SYMBOL);
                            }
                        }

                        this.setState(4049);
                        this.match(MySQLParser.CHAIN_SYMBOL);
                        }
                    }

                    this.setState(4056);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 392 || _la === 467) {
                        {
                        this.setState(4053);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 392) {
                            {
                            this.setState(4052);
                            this.match(MySQLParser.NO_SYMBOL);
                            }
                        }

                        this.setState(4055);
                        this.match(MySQLParser.RELEASE_SYMBOL);
                        }
                    }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.RELEASE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4060);
                this.match(MySQLParser.RELEASE_SYMBOL);
                this.setState(4061);
                this.match(MySQLParser.SAVEPOINT_SYMBOL);
                this.setState(4062);
                this.identifier();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockStatement(): LockStatementContext {
        let localctx = new LockStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 462, MySQLParser.RULE_lockStatement);
        let _la: number;
        try {
            this.setState(4081);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 423, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4065);
                    this.match(MySQLParser.LOCK_SYMBOL);
                    this.setState(4066);
                    _la = this.input().LA(1);
                    if(!(_la === 581 || _la === 583)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(4067);
                    this.lockItem();
                    this.setState(4072);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(4068);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(4069);
                        this.lockItem();
                        }
                        }
                        this.setState(4074);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4075);
                    this.match(MySQLParser.LOCK_SYMBOL);
                    this.setState(4076);
                    this.match(MySQLParser.INSTANCE_SYMBOL);
                    this.setState(4077);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(4078);
                    this.match(MySQLParser.BACKUP_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4079);
                    this.match(MySQLParser.UNLOCK_SYMBOL);
                    this.setState(4080);
                    _la = this.input().LA(1);
                    if(!(_la === 276 || _la === 581 || _la === 583)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockItem(): LockItemContext {
        let localctx = new LockItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 464, MySQLParser.RULE_lockItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4083);
            this.tableRef();
            this.setState(4085);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 424, this.getContext())) {
                case 1:
                    {
                    this.setState(4084);
                    this.tableAlias();
                    }
                    break;
            }
            this.setState(4087);
            this.lockOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lockOption(): LockOptionContext {
        let localctx = new LockOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 466, MySQLParser.RULE_lockOption);
        let _la: number;
        try {
            this.setState(4097);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4089);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(4091);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 312) {
                    {
                    this.setState(4090);
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.LOW_PRIORITY_SYMBOL:
            case MySQLParser.WRITE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4094);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 321) {
                    {
                    this.setState(4093);
                    this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                    }
                }

                this.setState(4096);
                this.match(MySQLParser.WRITE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public xaStatement(): XaStatementContext {
        let localctx = new XaStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 468, MySQLParser.RULE_xaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4099);
            this.match(MySQLParser.XA_SYMBOL);
            this.setState(4128);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.BEGIN_SYMBOL:
            case MySQLParser.START_SYMBOL:
                {
                this.setState(4100);
                _la = this.input().LA(1);
                if(!(_la === 74 || _la === 553)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(4101);
                this.xid();
                this.setState(4103);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 291 || _la === 489) {
                    {
                    this.setState(4102);
                    _la = this.input().LA(1);
                    if(!(_la === 291 || _la === 489)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case MySQLParser.END_SYMBOL:
                {
                this.setState(4105);
                this.match(MySQLParser.END_SYMBOL);
                this.setState(4106);
                this.xid();
                this.setState(4112);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 576) {
                    {
                    this.setState(4107);
                    this.match(MySQLParser.SUSPEND_SYMBOL);
                    this.setState(4110);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 232) {
                        {
                        this.setState(4108);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(4109);
                        this.match(MySQLParser.MIGRATE_SYMBOL);
                        }
                    }

                    }
                }

                }
                break;
            case MySQLParser.PREPARE_SYMBOL:
                {
                this.setState(4114);
                this.match(MySQLParser.PREPARE_SYMBOL);
                this.setState(4115);
                this.xid();
                }
                break;
            case MySQLParser.COMMIT_SYMBOL:
                {
                this.setState(4116);
                this.match(MySQLParser.COMMIT_SYMBOL);
                this.setState(4117);
                this.xid();
                this.setState(4120);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 402) {
                    {
                    this.setState(4118);
                    this.match(MySQLParser.ONE_SYMBOL);
                    this.setState(4119);
                    this.match(MySQLParser.PHASE_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.ROLLBACK_SYMBOL:
                {
                this.setState(4122);
                this.match(MySQLParser.ROLLBACK_SYMBOL);
                this.setState(4123);
                this.xid();
                }
                break;
            case MySQLParser.RECOVER_SYMBOL:
                {
                this.setState(4124);
                this.match(MySQLParser.RECOVER_SYMBOL);
                this.setState(4126);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 136) {
                    {
                    this.setState(4125);
                    this.xaConvert();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public xaConvert(): XaConvertContext {
        let localctx = new XaConvertContext(this.getContext(), this.getState());
        this.enterRule(localctx, 470, MySQLParser.RULE_xaConvert);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4130);
            this.match(MySQLParser.CONVERT_SYMBOL);
            this.setState(4131);
            this.match(MySQLParser.XID_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public xid(): XidContext {
        let localctx = new XidContext(this.getContext(), this.getState());
        this.enterRule(localctx, 472, MySQLParser.RULE_xid);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4133);
            this.textString();
            this.setState(4140);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 29) {
                {
                this.setState(4134);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4135);
                this.textString();
                this.setState(4138);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(4136);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(4137);
                    this.ulong_number();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicationStatement(): ReplicationStatementContext {
        let localctx = new ReplicationStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 474, MySQLParser.RULE_replicationStatement);
        let _la: number;
        try {
            this.setState(4164);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 438, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4142);
                    this.match(MySQLParser.PURGE_SYMBOL);
                    this.setState(4143);
                    this.purgeOptions();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4144);
                    this.changeSource();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4145);
                    this.match(MySQLParser.RESET_SYMBOL);
                    this.setState(4146);
                    this.resetOption();
                    this.setState(4151);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(4147);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(4148);
                        this.resetOption();
                        }
                        }
                        this.setState(4153);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(4154);
                    this.match(MySQLParser.RESET_SYMBOL);
                    this.setState(4155);
                    this.match(MySQLParser.PERSIST_SYMBOL);
                    this.setState(4157);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 263) {
                        {
                        this.setState(4156);
                        this.ifExistsIdentifier();
                        }
                    }

                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(4159);
                    this.startReplicaStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(4160);
                    this.stopReplicaStatement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(4161);
                    this.changeReplication();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(4162);
                    this.replicationLoad();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(4163);
                    this.groupReplication();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public purgeOptions(): PurgeOptionsContext {
        let localctx = new PurgeOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 476, MySQLParser.RULE_purgeOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4166);
            _la = this.input().LA(1);
            if(!(_la === 77 || _la === 341)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(4167);
            this.match(MySQLParser.LOGS_SYMBOL);
            this.setState(4172);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.TO_SYMBOL:
                {
                this.setState(4168);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(4169);
                this.textLiteral();
                }
                break;
            case MySQLParser.BEFORE_SYMBOL:
                {
                this.setState(4170);
                this.match(MySQLParser.BEFORE_SYMBOL);
                this.setState(4171);
                this.expr(0);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resetOption(): ResetOptionContext {
        let localctx = new ResetOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 478, MySQLParser.RULE_resetOption);
        let _la: number;
        try {
            this.setState(4185);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 443, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4174);
                    this.masterOrBinaryLogsAndGtids();
                    this.setState(4176);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 599) {
                        {
                        this.setState(4175);
                        this.sourceResetOptions();
                        }
                    }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4178);
                    this.replica();
                    this.setState(4180);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 57) {
                        {
                        this.setState(4179);
                        this.match(MySQLParser.ALL_SYMBOL);
                        }
                    }

                    this.setState(4183);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 232) {
                        {
                        this.setState(4182);
                        this.channel();
                        }
                    }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public masterOrBinaryLogsAndGtids(): MasterOrBinaryLogsAndGtidsContext {
        let localctx = new MasterOrBinaryLogsAndGtidsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 480, MySQLParser.RULE_masterOrBinaryLogsAndGtids);
        try {
            this.setState(4193);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 444, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4187);
                    this.match(MySQLParser.MASTER_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4188);
                    if (!(this.serverVersion >= 80032)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80032");
                    }
                    this.setState(4189);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(4190);
                    this.match(MySQLParser.LOGS_SYMBOL);
                    this.setState(4191);
                    this.match(MySQLParser.AND_SYMBOL);
                    this.setState(4192);
                    this.match(MySQLParser.GTIDS_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceResetOptions(): SourceResetOptionsContext {
        let localctx = new SourceResetOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 482, MySQLParser.RULE_sourceResetOptions);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4195);
            this.match(MySQLParser.TO_SYMBOL);
            this.setState(4196);
            this.real_ulonglong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicationLoad(): ReplicationLoadContext {
        let localctx = new ReplicationLoadContext(this.getContext(), this.getState());
        this.enterRule(localctx, 484, MySQLParser.RULE_replicationLoad);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4198);
            this.match(MySQLParser.LOAD_SYMBOL);
            this.setState(4202);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.DATA_SYMBOL:
                {
                this.setState(4199);
                this.match(MySQLParser.DATA_SYMBOL);
                }
                break;
            case MySQLParser.TABLE_SYMBOL:
                {
                this.setState(4200);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(4201);
                this.tableRef();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(4204);
            this.match(MySQLParser.FROM_SYMBOL);
            this.setState(4205);
            this.match(MySQLParser.MASTER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSource(): ChangeReplicationSourceContext {
        let localctx = new ChangeReplicationSourceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 486, MySQLParser.RULE_changeReplicationSource);
        try {
            this.setState(4211);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 446, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4207);
                    this.match(MySQLParser.MASTER_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4208);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(4209);
                    this.match(MySQLParser.REPLICATION_SYMBOL);
                    this.setState(4210);
                    this.match(MySQLParser.SOURCE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeSource(): ChangeSourceContext {
        let localctx = new ChangeSourceContext(this.getContext(), this.getState());
        this.enterRule(localctx, 488, MySQLParser.RULE_changeSource);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4213);
            this.match(MySQLParser.CHANGE_SYMBOL);
            this.setState(4214);
            this.changeReplicationSource();
            this.setState(4215);
            this.match(MySQLParser.TO_SYMBOL);
            this.setState(4216);
            this.sourceDefinitions();
            this.setState(4218);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(4217);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceDefinitions(): SourceDefinitionsContext {
        let localctx = new SourceDefinitionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 490, MySQLParser.RULE_sourceDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4220);
            this.sourceDefinition();
            this.setState(4225);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4221);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4222);
                this.sourceDefinition();
                }
                }
                this.setState(4227);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceDefinition(): SourceDefinitionContext {
        let localctx = new SourceDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 492, MySQLParser.RULE_sourceDefinition);
        try {
            this.setState(4356);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 449, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4228);
                    this.changeReplicationSourceHost();
                    this.setState(4229);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4230);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4232);
                    this.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL);
                    this.setState(4233);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4234);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4235);
                    this.changeReplicationSourceBind();
                    this.setState(4236);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4237);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(4239);
                    this.changeReplicationSourceUser();
                    this.setState(4240);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4241);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(4243);
                    this.changeReplicationSourcePassword();
                    this.setState(4244);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4245);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(4247);
                    this.changeReplicationSourcePort();
                    this.setState(4248);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4249);
                    this.ulong_number();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(4251);
                    this.changeReplicationSourceConnectRetry();
                    this.setState(4252);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4253);
                    this.ulong_number();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(4255);
                    this.changeReplicationSourceRetryCount();
                    this.setState(4256);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4257);
                    this.ulong_number();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(4259);
                    this.changeReplicationSourceDelay();
                    this.setState(4260);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4261);
                    this.ulong_number();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(4263);
                    this.changeReplicationSourceSSL();
                    this.setState(4264);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4265);
                    this.ulong_number();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(4267);
                    this.changeReplicationSourceSSLCA();
                    this.setState(4268);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4269);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(4271);
                    this.changeReplicationSourceSSLCApath();
                    this.setState(4272);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4273);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(4275);
                    this.changeReplicationSourceTLSVersion();
                    this.setState(4276);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4277);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(4279);
                    this.changeReplicationSourceSSLCert();
                    this.setState(4280);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4281);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(4283);
                    this.changeReplicationSourceTLSCiphersuites();
                    this.setState(4284);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4285);
                    this.sourceTlsCiphersuitesDef();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(4287);
                    this.changeReplicationSourceSSLCipher();
                    this.setState(4288);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4289);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(4291);
                    this.changeReplicationSourceSSLKey();
                    this.setState(4292);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4293);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(4295);
                    this.changeReplicationSourceSSLVerifyServerCert();
                    this.setState(4296);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4297);
                    this.ulong_number();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(4299);
                    this.changeReplicationSourceSSLCLR();
                    this.setState(4300);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4301);
                    this.textLiteral();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(4303);
                    this.changeReplicationSourceSSLCLRpath();
                    this.setState(4304);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4305);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(4307);
                    this.changeReplicationSourcePublicKey();
                    this.setState(4308);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4309);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(4311);
                    this.changeReplicationSourceGetSourcePublicKey();
                    this.setState(4312);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4313);
                    this.ulong_number();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(4315);
                    this.changeReplicationSourceHeartbeatPeriod();
                    this.setState(4316);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4317);
                    this.ulong_number();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(4319);
                    this.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL);
                    this.setState(4320);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4321);
                    this.serverIdList();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(4322);
                    this.changeReplicationSourceCompressionAlgorithm();
                    this.setState(4323);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4324);
                    this.textStringLiteral();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(4326);
                    this.changeReplicationSourceZstdCompressionLevel();
                    this.setState(4327);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4328);
                    this.ulong_number();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(4330);
                    this.changeReplicationSourceAutoPosition();
                    this.setState(4331);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4332);
                    this.ulong_number();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(4334);
                    this.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
                    this.setState(4335);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4336);
                    this.privilegeCheckDef();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(4337);
                    this.match(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL);
                    this.setState(4338);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4339);
                    this.ulong_number();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                    this.setState(4340);
                    this.match(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
                    this.setState(4341);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4342);
                    this.tablePrimaryKeyCheckDef();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                    this.setState(4343);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(4344);
                    this.match(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL);
                    this.setState(4345);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4346);
                    this.real_ulong_number();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                    this.setState(4347);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(4348);
                    this.match(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL);
                    this.setState(4349);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4350);
                    this.assignGtidsToAnonymousTransactionsDefinition();
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                    this.setState(4351);
                    if (!(this.serverVersion >= 80027)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80027");
                    }
                    this.setState(4352);
                    this.match(MySQLParser.GTID_ONLY_SYMBOL);
                    this.setState(4353);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(4354);
                    this.real_ulong_number();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                    this.setState(4355);
                    this.sourceFileDef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceAutoPosition(): ChangeReplicationSourceAutoPositionContext {
        let localctx = new ChangeReplicationSourceAutoPositionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 494, MySQLParser.RULE_changeReplicationSourceAutoPosition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4358);
            _la = this.input().LA(1);
            if(!(_la === 322 || _la === 766)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceHost(): ChangeReplicationSourceHostContext {
        let localctx = new ChangeReplicationSourceHostContext(this.getContext(), this.getState());
        this.enterRule(localctx, 496, MySQLParser.RULE_changeReplicationSourceHost);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4360);
            _la = this.input().LA(1);
            if(!(_la === 326 || _la === 772)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceBind(): ChangeReplicationSourceBindContext {
        let localctx = new ChangeReplicationSourceBindContext(this.getContext(), this.getState());
        this.enterRule(localctx, 498, MySQLParser.RULE_changeReplicationSourceBind);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4362);
            _la = this.input().LA(1);
            if(!(_la === 323 || _la === 767)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceUser(): ChangeReplicationSourceUserContext {
        let localctx = new ChangeReplicationSourceUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 500, MySQLParser.RULE_changeReplicationSourceUser);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4364);
            _la = this.input().LA(1);
            if(!(_la === 343 || _la === 790)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourcePassword(): ChangeReplicationSourcePasswordContext {
        let localctx = new ChangeReplicationSourcePasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 502, MySQLParser.RULE_changeReplicationSourcePassword);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4366);
            _la = this.input().LA(1);
            if(!(_la === 329 || _la === 775)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourcePort(): ChangeReplicationSourcePortContext {
        let localctx = new ChangeReplicationSourcePortContext(this.getContext(), this.getState());
        this.enterRule(localctx, 504, MySQLParser.RULE_changeReplicationSourcePort);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4368);
            _la = this.input().LA(1);
            if(!(_la === 330 || _la === 776)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceConnectRetry(): ChangeReplicationSourceConnectRetryContext {
        let localctx = new ChangeReplicationSourceConnectRetryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 506, MySQLParser.RULE_changeReplicationSourceConnectRetry);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4370);
            _la = this.input().LA(1);
            if(!(_la === 324 || _la === 769)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceRetryCount(): ChangeReplicationSourceRetryCountContext {
        let localctx = new ChangeReplicationSourceRetryCountContext(this.getContext(), this.getState());
        this.enterRule(localctx, 508, MySQLParser.RULE_changeReplicationSourceRetryCount);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4372);
            _la = this.input().LA(1);
            if(!(_la === 331 || _la === 778)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceDelay(): ChangeReplicationSourceDelayContext {
        let localctx = new ChangeReplicationSourceDelayContext(this.getContext(), this.getState());
        this.enterRule(localctx, 510, MySQLParser.RULE_changeReplicationSourceDelay);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4374);
            _la = this.input().LA(1);
            if(!(_la === 325 || _la === 770)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSL(): ChangeReplicationSourceSSLContext {
        let localctx = new ChangeReplicationSourceSSLContext(this.getContext(), this.getState());
        this.enterRule(localctx, 512, MySQLParser.RULE_changeReplicationSourceSSL);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4376);
            _la = this.input().LA(1);
            if(!(_la === 339 || _la === 779)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCA(): ChangeReplicationSourceSSLCAContext {
        let localctx = new ChangeReplicationSourceSSLCAContext(this.getContext(), this.getState());
        this.enterRule(localctx, 514, MySQLParser.RULE_changeReplicationSourceSSLCA);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4378);
            _la = this.input().LA(1);
            if(!(_la === 333 || _la === 780)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCApath(): ChangeReplicationSourceSSLCApathContext {
        let localctx = new ChangeReplicationSourceSSLCApathContext(this.getContext(), this.getState());
        this.enterRule(localctx, 516, MySQLParser.RULE_changeReplicationSourceSSLCApath);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4380);
            _la = this.input().LA(1);
            if(!(_la === 332 || _la === 781)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCipher(): ChangeReplicationSourceSSLCipherContext {
        let localctx = new ChangeReplicationSourceSSLCipherContext(this.getContext(), this.getState());
        this.enterRule(localctx, 518, MySQLParser.RULE_changeReplicationSourceSSLCipher);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4382);
            _la = this.input().LA(1);
            if(!(_la === 335 || _la === 783)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCLR(): ChangeReplicationSourceSSLCLRContext {
        let localctx = new ChangeReplicationSourceSSLCLRContext(this.getContext(), this.getState());
        this.enterRule(localctx, 520, MySQLParser.RULE_changeReplicationSourceSSLCLR);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4384);
            _la = this.input().LA(1);
            if(!(_la === 336 || _la === 784)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCLRpath(): ChangeReplicationSourceSSLCLRpathContext {
        let localctx = new ChangeReplicationSourceSSLCLRpathContext(this.getContext(), this.getState());
        this.enterRule(localctx, 522, MySQLParser.RULE_changeReplicationSourceSSLCLRpath);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4386);
            _la = this.input().LA(1);
            if(!(_la === 337 || _la === 785)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLKey(): ChangeReplicationSourceSSLKeyContext {
        let localctx = new ChangeReplicationSourceSSLKeyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 524, MySQLParser.RULE_changeReplicationSourceSSLKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4388);
            _la = this.input().LA(1);
            if(!(_la === 338 || _la === 786)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLVerifyServerCert(): ChangeReplicationSourceSSLVerifyServerCertContext {
        let localctx = new ChangeReplicationSourceSSLVerifyServerCertContext(this.getContext(), this.getState());
        this.enterRule(localctx, 526, MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4390);
            _la = this.input().LA(1);
            if(!(_la === 340 || _la === 787)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceTLSVersion(): ChangeReplicationSourceTLSVersionContext {
        let localctx = new ChangeReplicationSourceTLSVersionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 528, MySQLParser.RULE_changeReplicationSourceTLSVersion);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4392);
            _la = this.input().LA(1);
            if(!(_la === 342 || _la === 789)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceTLSCiphersuites(): ChangeReplicationSourceTLSCiphersuitesContext {
        let localctx = new ChangeReplicationSourceTLSCiphersuitesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 530, MySQLParser.RULE_changeReplicationSourceTLSCiphersuites);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4394);
            _la = this.input().LA(1);
            if(!(_la === 746 || _la === 788)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceSSLCert(): ChangeReplicationSourceSSLCertContext {
        let localctx = new ChangeReplicationSourceSSLCertContext(this.getContext(), this.getState());
        this.enterRule(localctx, 532, MySQLParser.RULE_changeReplicationSourceSSLCert);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4396);
            _la = this.input().LA(1);
            if(!(_la === 334 || _la === 782)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourcePublicKey(): ChangeReplicationSourcePublicKeyContext {
        let localctx = new ChangeReplicationSourcePublicKeyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 534, MySQLParser.RULE_changeReplicationSourcePublicKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4398);
            _la = this.input().LA(1);
            if(!(_la === 720 || _la === 777)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceGetSourcePublicKey(): ChangeReplicationSourceGetSourcePublicKeyContext {
        let localctx = new ChangeReplicationSourceGetSourcePublicKeyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 536, MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4400);
            _la = this.input().LA(1);
            if(!(_la === 721 || _la === 765)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceHeartbeatPeriod(): ChangeReplicationSourceHeartbeatPeriodContext {
        let localctx = new ChangeReplicationSourceHeartbeatPeriodContext(this.getContext(), this.getState());
        this.enterRule(localctx, 538, MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4402);
            _la = this.input().LA(1);
            if(!(_la === 344 || _la === 771)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceCompressionAlgorithm(): ChangeReplicationSourceCompressionAlgorithmContext {
        let localctx = new ChangeReplicationSourceCompressionAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 540, MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4404);
            _la = this.input().LA(1);
            if(!(_la === 743 || _la === 768)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplicationSourceZstdCompressionLevel(): ChangeReplicationSourceZstdCompressionLevelContext {
        let localctx = new ChangeReplicationSourceZstdCompressionLevelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 542, MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4406);
            _la = this.input().LA(1);
            if(!(_la === 744 || _la === 791)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public privilegeCheckDef(): PrivilegeCheckDefContext {
        let localctx = new PrivilegeCheckDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 544, MySQLParser.RULE_privilegeCheckDef);
        try {
            this.setState(4410);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 450, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4408);
                    this.userIdentifierOrText();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4409);
                    this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablePrimaryKeyCheckDef(): TablePrimaryKeyCheckDefContext {
        let localctx = new TablePrimaryKeyCheckDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 546, MySQLParser.RULE_tablePrimaryKeyCheckDef);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4412);
            _la = this.input().LA(1);
            if(!(_la === 401 || _la === 751 || _la === 752 || _la === 806)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public assignGtidsToAnonymousTransactionsDefinition(): AssignGtidsToAnonymousTransactionsDefinitionContext {
        let localctx = new AssignGtidsToAnonymousTransactionsDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 548, MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition);
        try {
            this.setState(4417);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 451, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4414);
                    this.match(MySQLParser.OFF_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4415);
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4416);
                    this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceTlsCiphersuitesDef(): SourceTlsCiphersuitesDefContext {
        let localctx = new SourceTlsCiphersuitesDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 550, MySQLParser.RULE_sourceTlsCiphersuitesDef);
        try {
            this.setState(4421);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 452, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4419);
                    this.textStringNoLinebreak();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4420);
                    this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceFileDef(): SourceFileDefContext {
        let localctx = new SourceFileDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 552, MySQLParser.RULE_sourceFileDef);
        try {
            this.setState(4437);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.SOURCE_LOG_FILE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4423);
                this.sourceLogFile();
                this.setState(4424);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4425);
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.SOURCE_LOG_POS_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4427);
                this.sourceLogPos();
                this.setState(4428);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4429);
                this.ulonglongNumber();
                }
                break;
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4431);
                this.match(MySQLParser.RELAY_LOG_FILE_SYMBOL);
                this.setState(4432);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4433);
                this.textStringNoLinebreak();
                }
                break;
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(4434);
                this.match(MySQLParser.RELAY_LOG_POS_SYMBOL);
                this.setState(4435);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4436);
                this.ulong_number();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceLogFile(): SourceLogFileContext {
        let localctx = new SourceLogFileContext(this.getContext(), this.getState());
        this.enterRule(localctx, 554, MySQLParser.RULE_sourceLogFile);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4439);
            _la = this.input().LA(1);
            if(!(_la === 327 || _la === 773)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sourceLogPos(): SourceLogPosContext {
        let localctx = new SourceLogPosContext(this.getContext(), this.getState());
        this.enterRule(localctx, 556, MySQLParser.RULE_sourceLogPos);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4441);
            _la = this.input().LA(1);
            if(!(_la === 328 || _la === 774)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverIdList(): ServerIdListContext {
        let localctx = new ServerIdListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 558, MySQLParser.RULE_serverIdList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4443);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(4452);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 13) !== 0)) {
                {
                this.setState(4444);
                this.ulong_number();
                this.setState(4449);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 29) {
                    {
                    {
                    this.setState(4445);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(4446);
                    this.ulong_number();
                    }
                    }
                    this.setState(4451);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            this.setState(4454);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public changeReplication(): ChangeReplicationContext {
        let localctx = new ChangeReplicationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 560, MySQLParser.RULE_changeReplication);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4456);
            this.match(MySQLParser.CHANGE_SYMBOL);
            this.setState(4457);
            this.match(MySQLParser.REPLICATION_SYMBOL);
            this.setState(4458);
            this.match(MySQLParser.FILTER_SYMBOL);
            this.setState(4459);
            this.filterDefinition();
            this.setState(4464);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4460);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4461);
                this.filterDefinition();
                }
                }
                this.setState(4466);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(4468);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(4467);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterDefinition(): FilterDefinitionContext {
        let localctx = new FilterDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 562, MySQLParser.RULE_filterDefinition);
        let _la: number;
        try {
            this.setState(4519);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.REPLICATE_DO_DB_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4470);
                this.match(MySQLParser.REPLICATE_DO_DB_SYMBOL);
                this.setState(4471);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4472);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4474);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 458, this.getContext())) {
                    case 1:
                        {
                        this.setState(4473);
                        this.filterDbList();
                        }
                        break;
                }
                this.setState(4476);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_IGNORE_DB_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4477);
                this.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
                this.setState(4478);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4479);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4481);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 459, this.getContext())) {
                    case 1:
                        {
                        this.setState(4480);
                        this.filterDbList();
                        }
                        break;
                }
                this.setState(4483);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_DO_TABLE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4484);
                this.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL);
                this.setState(4485);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4486);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4488);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 460, this.getContext())) {
                    case 1:
                        {
                        this.setState(4487);
                        this.filterTableList();
                        }
                        break;
                }
                this.setState(4490);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(4491);
                this.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
                this.setState(4492);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4493);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4495);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 461, this.getContext())) {
                    case 1:
                        {
                        this.setState(4494);
                        this.filterTableList();
                        }
                        break;
                }
                this.setState(4497);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(4498);
                this.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
                this.setState(4499);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4500);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4502);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 462, this.getContext())) {
                    case 1:
                        {
                        this.setState(4501);
                        this.filterStringList();
                        }
                        break;
                }
                this.setState(4504);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(4505);
                this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
                this.setState(4506);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4507);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4509);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 463, this.getContext())) {
                    case 1:
                        {
                        this.setState(4508);
                        this.filterStringList();
                        }
                        break;
                }
                this.setState(4511);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.REPLICATE_REWRITE_DB_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(4512);
                this.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
                this.setState(4513);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4514);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4516);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 32) {
                    {
                    this.setState(4515);
                    this.filterDbPairList();
                    }
                }

                this.setState(4518);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterDbList(): FilterDbListContext {
        let localctx = new FilterDbListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 564, MySQLParser.RULE_filterDbList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4521);
            this.schemaRef();
            this.setState(4526);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4522);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4523);
                this.schemaRef();
                }
                }
                this.setState(4528);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterTableList(): FilterTableListContext {
        let localctx = new FilterTableListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 566, MySQLParser.RULE_filterTableList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4529);
            this.filterTableRef();
            this.setState(4534);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4530);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4531);
                this.filterTableRef();
                }
                }
                this.setState(4536);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterStringList(): FilterStringListContext {
        let localctx = new FilterStringListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 568, MySQLParser.RULE_filterStringList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4537);
            this.filterWildDbTableString();
            this.setState(4542);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4538);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4539);
                this.filterWildDbTableString();
                }
                }
                this.setState(4544);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterWildDbTableString(): FilterWildDbTableStringContext {
        let localctx = new FilterWildDbTableStringContext(this.getContext(), this.getState());
        this.enterRule(localctx, 570, MySQLParser.RULE_filterWildDbTableString);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4545);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterDbPairList(): FilterDbPairListContext {
        let localctx = new FilterDbPairListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 572, MySQLParser.RULE_filterDbPairList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4547);
            this.schemaIdentifierPair();
            this.setState(4552);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4548);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4549);
                this.schemaIdentifierPair();
                }
                }
                this.setState(4554);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public startReplicaStatement(): StartReplicaStatementContext {
        let localctx = new StartReplicaStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 574, MySQLParser.RULE_startReplicaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4555);
            this.match(MySQLParser.START_SYMBOL);
            this.setState(4556);
            this.replica();
            this.setState(4558);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 466 || _la === 548) {
                {
                this.setState(4557);
                this.replicaThreadOptions();
                }
            }

            this.setState(4562);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 622) {
                {
                this.setState(4560);
                this.match(MySQLParser.UNTIL_SYMBOL);
                this.setState(4561);
                this.replicaUntil();
                }
            }

            this.setState(4565);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 627) {
                {
                this.setState(4564);
                this.userOption();
                }
            }

            this.setState(4568);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 424) {
                {
                this.setState(4567);
                this.passwordOption();
                }
            }

            this.setState(4571);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 167) {
                {
                this.setState(4570);
                this.defaultAuthOption();
                }
            }

            this.setState(4574);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 427) {
                {
                this.setState(4573);
                this.pluginDirOption();
                }
            }

            this.setState(4577);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(4576);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public stopReplicaStatement(): StopReplicaStatementContext {
        let localctx = new StopReplicaStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 576, MySQLParser.RULE_stopReplicaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4579);
            this.match(MySQLParser.STOP_SYMBOL);
            this.setState(4580);
            this.replica();
            this.setState(4582);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 466 || _la === 548) {
                {
                this.setState(4581);
                this.replicaThreadOptions();
                }
            }

            this.setState(4585);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(4584);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicaUntil(): ReplicaUntilContext {
        let localctx = new ReplicaUntilContext(this.getContext(), this.getState());
        this.enterRule(localctx, 578, MySQLParser.RULE_replicaUntil);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4592);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.MASTER_LOG_FILE_SYMBOL:
            case MySQLParser.MASTER_LOG_POS_SYMBOL:
            case MySQLParser.RELAY_LOG_FILE_SYMBOL:
            case MySQLParser.RELAY_LOG_POS_SYMBOL:
            case MySQLParser.SOURCE_LOG_FILE_SYMBOL:
            case MySQLParser.SOURCE_LOG_POS_SYMBOL:
                {
                this.setState(4587);
                this.sourceFileDef();
                }
                break;
            case MySQLParser.SQL_AFTER_GTIDS_SYMBOL:
            case MySQLParser.SQL_BEFORE_GTIDS_SYMBOL:
                {
                this.setState(4588);
                _la = this.input().LA(1);
                if(!(_la === 539 || _la === 541)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(4589);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4590);
                this.textString();
                }
                break;
            case MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL:
                {
                this.setState(4591);
                this.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(4598);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4594);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4595);
                this.sourceFileDef();
                }
                }
                this.setState(4600);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userOption(): UserOptionContext {
        let localctx = new UserOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 580, MySQLParser.RULE_userOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4601);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4602);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4603);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public passwordOption(): PasswordOptionContext {
        let localctx = new PasswordOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 582, MySQLParser.RULE_passwordOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4605);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.setState(4606);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4607);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultAuthOption(): DefaultAuthOptionContext {
        let localctx = new DefaultAuthOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 584, MySQLParser.RULE_defaultAuthOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4609);
            this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
            this.setState(4610);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4611);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public pluginDirOption(): PluginDirOptionContext {
        let localctx = new PluginDirOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 586, MySQLParser.RULE_pluginDirOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4613);
            this.match(MySQLParser.PLUGIN_DIR_SYMBOL);
            this.setState(4614);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4615);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext {
        let localctx = new ReplicaThreadOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 588, MySQLParser.RULE_replicaThreadOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4617);
            this.replicaThreadOption();
            this.setState(4622);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4618);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4619);
                this.replicaThreadOption();
                }
                }
                this.setState(4624);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replicaThreadOption(): ReplicaThreadOptionContext {
        let localctx = new ReplicaThreadOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 590, MySQLParser.RULE_replicaThreadOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4625);
            _la = this.input().LA(1);
            if(!(_la === 466 || _la === 548)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplication(): GroupReplicationContext {
        let localctx = new GroupReplicationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 592, MySQLParser.RULE_groupReplication);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4632);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.START_SYMBOL:
                {
                this.setState(4627);
                this.match(MySQLParser.START_SYMBOL);
                this.setState(4629);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 167 || _la === 424 || _la === 627) {
                    {
                    this.setState(4628);
                    this.groupReplicationStartOptions();
                    }
                }

                }
                break;
            case MySQLParser.STOP_SYMBOL:
                {
                this.setState(4631);
                this.match(MySQLParser.STOP_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(4634);
            this.match(MySQLParser.GROUP_REPLICATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationStartOptions(): GroupReplicationStartOptionsContext {
        let localctx = new GroupReplicationStartOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 594, MySQLParser.RULE_groupReplicationStartOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4636);
            this.groupReplicationStartOption();
            this.setState(4641);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4637);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4638);
                this.groupReplicationStartOption();
                }
                }
                this.setState(4643);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationStartOption(): GroupReplicationStartOptionContext {
        let localctx = new GroupReplicationStartOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 596, MySQLParser.RULE_groupReplicationStartOption);
        try {
            this.setState(4647);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.USER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4644);
                this.groupReplicationUser();
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4645);
                this.groupReplicationPassword();
                }
                break;
            case MySQLParser.DEFAULT_AUTH_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4646);
                this.groupReplicationPluginAuth();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationUser(): GroupReplicationUserContext {
        let localctx = new GroupReplicationUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 598, MySQLParser.RULE_groupReplicationUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4649);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4650);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4651);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationPassword(): GroupReplicationPasswordContext {
        let localctx = new GroupReplicationPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 600, MySQLParser.RULE_groupReplicationPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4653);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            this.setState(4654);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4655);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupReplicationPluginAuth(): GroupReplicationPluginAuthContext {
        let localctx = new GroupReplicationPluginAuthContext(this.getContext(), this.getState());
        this.enterRule(localctx, 602, MySQLParser.RULE_groupReplicationPluginAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4657);
            this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
            this.setState(4658);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(4659);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replica(): ReplicaContext {
        let localctx = new ReplicaContext(this.getContext(), this.getState());
        this.enterRule(localctx, 604, MySQLParser.RULE_replica);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4661);
            _la = this.input().LA(1);
            if(!(_la === 526 || _la === 762)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public preparedStatement(): PreparedStatementContext {
        let localctx = new PreparedStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 606, MySQLParser.RULE_preparedStatement);
        let _la: number;
        try {
            this.setState(4674);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.PREPARE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4663);
                localctx._type_ = this.match(MySQLParser.PREPARE_SYMBOL);
                this.setState(4664);
                this.identifier();
                this.setState(4665);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(4668);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 486, this.getContext())) {
                    case 1:
                        {
                        this.setState(4666);
                        this.textLiteral();
                        }
                        break;
                    case 2:
                        {
                        this.setState(4667);
                        this.userVariable();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.EXECUTE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4670);
                this.executeStatement();
                }
                break;
            case MySQLParser.DEALLOCATE_SYMBOL:
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4671);
                localctx._type_ = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 163 || _la === 184)) {
                    localctx._type_ = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(4672);
                this.match(MySQLParser.PREPARE_SYMBOL);
                this.setState(4673);
                this.identifier();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public executeStatement(): ExecuteStatementContext {
        let localctx = new ExecuteStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 608, MySQLParser.RULE_executeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4676);
            this.match(MySQLParser.EXECUTE_SYMBOL);
            this.setState(4677);
            this.identifier();
            this.setState(4680);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 630) {
                {
                this.setState(4678);
                this.match(MySQLParser.USING_SYMBOL);
                this.setState(4679);
                this.executeVarList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public executeVarList(): ExecuteVarListContext {
        let localctx = new ExecuteVarListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 610, MySQLParser.RULE_executeVarList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4682);
            this.userVariable();
            this.setState(4687);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(4683);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(4684);
                this.userVariable();
                }
                }
                this.setState(4689);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cloneStatement(): CloneStatementContext {
        let localctx = new CloneStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 612, MySQLParser.RULE_cloneStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4690);
            this.match(MySQLParser.CLONE_SYMBOL);
            this.setState(4715);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 493, this.getContext())) {
                case 1:
                    {
                    this.setState(4691);
                    this.match(MySQLParser.LOCAL_SYMBOL);
                    this.setState(4692);
                    this.match(MySQLParser.DATA_SYMBOL);
                    this.setState(4693);
                    this.match(MySQLParser.DIRECTORY_SYMBOL);
                    this.setState(4695);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 490, this.getContext())) {
                        case 1:
                            {
                            this.setState(4694);
                            this.equal();
                            }
                            break;
                    }
                    this.setState(4697);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.setState(4698);
                    this.match(MySQLParser.REMOTE_SYMBOL);
                    this.setState(4701);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 232) {
                        {
                        this.setState(4699);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(4700);
                        this.match(MySQLParser.REPLICATION_SYMBOL);
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.setState(4703);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(4704);
                    this.match(MySQLParser.INSTANCE_SYMBOL);
                    this.setState(4705);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(4706);
                    this.user();
                    this.setState(4707);
                    this.match(MySQLParser.COLON_SYMBOL);
                    this.setState(4708);
                    this.ulong_number();
                    this.setState(4709);
                    this.match(MySQLParser.IDENTIFIED_SYMBOL);
                    this.setState(4710);
                    this.match(MySQLParser.BY_SYMBOL);
                    this.setState(4711);
                    this.textStringLiteral();
                    this.setState(4713);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 153 || _la === 484) {
                        {
                        this.setState(4712);
                        this.dataDirSSL();
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dataDirSSL(): DataDirSSLContext {
        let localctx = new DataDirSSLContext(this.getContext(), this.getState());
        this.enterRule(localctx, 614, MySQLParser.RULE_dataDirSSL);
        let _la: number;
        try {
            this.setState(4727);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.REQUIRE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4717);
                this.ssl();
                }
                break;
            case MySQLParser.DATA_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4718);
                this.match(MySQLParser.DATA_SYMBOL);
                this.setState(4719);
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.setState(4721);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 494, this.getContext())) {
                    case 1:
                        {
                        this.setState(4720);
                        this.equal();
                        }
                        break;
                }
                this.setState(4723);
                this.textStringLiteral();
                this.setState(4725);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 484) {
                    {
                    this.setState(4724);
                    this.ssl();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ssl(): SslContext {
        let localctx = new SslContext(this.getContext(), this.getState());
        this.enterRule(localctx, 616, MySQLParser.RULE_ssl);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4729);
            this.match(MySQLParser.REQUIRE_SYMBOL);
            this.setState(4731);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 392) {
                {
                this.setState(4730);
                this.match(MySQLParser.NO_SYMBOL);
                }
            }

            this.setState(4733);
            this.match(MySQLParser.SSL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public accountManagementStatement(): AccountManagementStatementContext {
        let localctx = new AccountManagementStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 618, MySQLParser.RULE_accountManagementStatement);
        try {
            this.setState(4742);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ALTER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4735);
                this.alterUserStatement();
                }
                break;
            case MySQLParser.CREATE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4736);
                this.createUserStatement();
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(4737);
                this.dropUserStatement();
                }
                break;
            case MySQLParser.GRANT_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(4738);
                this.grantStatement();
                }
                break;
            case MySQLParser.RENAME_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(4739);
                this.renameUserStatement();
                }
                break;
            case MySQLParser.REVOKE_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(4740);
                this.revokeStatement();
                }
                break;
            case MySQLParser.SET_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(4741);
                this.setRoleStatement();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterUserStatement(): AlterUserStatementContext {
        let localctx = new AlterUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 620, MySQLParser.RULE_alterUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4744);
            this.match(MySQLParser.ALTER_SYMBOL);
            this.setState(4745);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4747);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 499, this.getContext())) {
                case 1:
                    {
                    this.setState(4746);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(4789);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 509, this.getContext())) {
                case 1:
                    {
                    this.setState(4753);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 500, this.getContext())) {
                        case 1:
                            {
                            this.setState(4749);
                            if (!(this.serverVersion < 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80014");
                            }
                            this.setState(4750);
                            this.createUserList();
                            }
                            break;
                        case 2:
                            {
                            this.setState(4751);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(4752);
                            this.alterUserList();
                            }
                            break;
                    }
                    this.setState(4755);
                    this.createUserTail();
                    }
                    break;
                case 2:
                    {
                    this.setState(4757);
                    this.userFunction();
                    this.setState(4774);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.IDENTIFIED_SYMBOL:
                        {
                        this.setState(4760);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 501, this.getContext())) {
                            case 1:
                                {
                                this.setState(4758);
                                this.identifiedByRandomPassword();
                                }
                                break;
                            case 2:
                                {
                                this.setState(4759);
                                this.identifiedByPassword();
                                }
                                break;
                        }
                        this.setState(4763);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 475) {
                            {
                            this.setState(4762);
                            this.replacePassword();
                            }
                        }

                        this.setState(4766);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 735) {
                            {
                            this.setState(4765);
                            this.retainCurrentPassword();
                            }
                        }

                        }
                        break;
                    case MySQLParser.DISCARD_SYMBOL:
                        {
                        this.setState(4768);
                        this.match(MySQLParser.DISCARD_SYMBOL);
                        this.setState(4769);
                        this.match(MySQLParser.OLD_SYMBOL);
                        this.setState(4770);
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        }
                        break;
                    case MySQLParser.EOF:
                    case MySQLParser.INT_NUMBER:
                    case MySQLParser.LONG_NUMBER:
                    case MySQLParser.ULONGLONG_NUMBER:
                    case MySQLParser.SEMICOLON_SYMBOL:
                    case MySQLParser.DECIMAL_NUMBER:
                    case MySQLParser.FLOAT_NUMBER:
                        {
                        this.setState(4772);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 46 || _la === 47) {
                            {
                            this.setState(4771);
                            this.userRegistration();
                            }
                        }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
                case 3:
                    {
                    this.setState(4776);
                    this.user();
                    this.setState(4787);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.DEFAULT_SYMBOL:
                        {
                        this.setState(4777);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.setState(4778);
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.setState(4782);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 506, this.getContext())) {
                            case 1:
                                {
                                this.setState(4779);
                                this.match(MySQLParser.ALL_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                this.setState(4780);
                                this.match(MySQLParser.NONE_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                this.setState(4781);
                                this.roleList();
                                }
                                break;
                        }
                        }
                        break;
                    case MySQLParser.EOF:
                    case MySQLParser.INT_NUMBER:
                    case MySQLParser.LONG_NUMBER:
                    case MySQLParser.ULONGLONG_NUMBER:
                    case MySQLParser.SEMICOLON_SYMBOL:
                    case MySQLParser.DECIMAL_NUMBER:
                    case MySQLParser.FLOAT_NUMBER:
                        {
                        this.setState(4785);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 46 || _la === 47) {
                            {
                            this.setState(4784);
                            this.userRegistration();
                            }
                        }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterUserList(): AlterUserListContext {
        let localctx = new AlterUserListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 622, MySQLParser.RULE_alterUserList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4791);
            this.alterUser();
            this.setState(4796);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 510, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(4792);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(4793);
                    this.alterUser();
                    }
                    }
                }
                this.setState(4798);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 510, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterUser(): AlterUserContext {
        let localctx = new AlterUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 624, MySQLParser.RULE_alterUser);
        try {
            this.setState(4874);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 527, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4799);
                    if (!(this.serverVersion < 80025)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80025");
                    }
                    this.setState(4800);
                    this.oldAlterUser();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4801);
                    if (!(this.serverVersion >= 80025)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80025");
                    }
                    {
                    this.setState(4802);
                    this.user();
                    this.setState(4872);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 526, this.getContext())) {
                        case 1:
                            {
                            this.setState(4803);
                            this.identifiedByPassword();
                            this.setState(4812);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 513, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4804);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4805);
                                    this.textStringLiteral();
                                    this.setState(4807);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 511, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4806);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(4810);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 512, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4809);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(4814);
                            this.identifiedByRandomPassword();
                            this.setState(4823);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 516, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4816);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 514, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4815);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(4818);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4819);
                                    this.textStringLiteral();
                                    this.setState(4821);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 515, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4820);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case 3:
                            {
                            this.setState(4825);
                            this.identifiedWithPlugin();
                            }
                            break;
                        case 4:
                            {
                            this.setState(4826);
                            this.identifiedWithPluginAsAuth();
                            this.setState(4828);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 517, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4827);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 5:
                            {
                            this.setState(4830);
                            this.identifiedWithPluginByPassword();
                            this.setState(4839);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 520, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4831);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4832);
                                    this.textStringLiteral();
                                    this.setState(4834);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 518, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4833);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                                case 2:
                                    {
                                    this.setState(4837);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 519, this.getContext())) {
                                        case 1:
                                            {
                                            this.setState(4836);
                                            this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case 6:
                            {
                            this.setState(4841);
                            this.identifiedWithPluginByRandomPassword();
                            this.setState(4843);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 521, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4842);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 7:
                            {
                            this.setState(4846);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 522, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4845);
                                    this.discardOldPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 8:
                            {
                            this.setState(4848);
                            this.match(MySQLParser.ADD_SYMBOL);
                            this.setState(4849);
                            this.factor();
                            this.setState(4850);
                            this.identification();
                            this.setState(4855);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 523, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4851);
                                    this.match(MySQLParser.ADD_SYMBOL);
                                    this.setState(4852);
                                    this.factor();
                                    this.setState(4853);
                                    this.identification();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 9:
                            {
                            this.setState(4857);
                            this.match(MySQLParser.MODIFY_SYMBOL);
                            this.setState(4858);
                            this.factor();
                            this.setState(4859);
                            this.identification();
                            this.setState(4864);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 524, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4860);
                                    this.match(MySQLParser.MODIFY_SYMBOL);
                                    this.setState(4861);
                                    this.factor();
                                    this.setState(4862);
                                    this.identification();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 10:
                            {
                            this.setState(4866);
                            this.match(MySQLParser.DROP_SYMBOL);
                            this.setState(4867);
                            this.factor();
                            this.setState(4870);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 525, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4868);
                                    this.match(MySQLParser.DROP_SYMBOL);
                                    this.setState(4869);
                                    this.factor();
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public oldAlterUser(): OldAlterUserContext {
        let localctx = new OldAlterUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 626, MySQLParser.RULE_oldAlterUser);
        try {
            this.setState(4933);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 539, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(4876);
                    this.user();
                    this.setState(4877);
                    this.match(MySQLParser.IDENTIFIED_SYMBOL);
                    this.setState(4878);
                    this.match(MySQLParser.BY_SYMBOL);
                    this.setState(4898);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 532, this.getContext())) {
                        case 1:
                            {
                            this.setState(4879);
                            this.textString();
                            this.setState(4880);
                            this.match(MySQLParser.REPLACE_SYMBOL);
                            this.setState(4881);
                            this.textString();
                            this.setState(4883);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 528, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4882);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(4885);
                            this.textString();
                            this.setState(4887);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 529, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4886);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 3:
                            {
                            this.setState(4889);
                            this.match(MySQLParser.RANDOM_SYMBOL);
                            this.setState(4890);
                            this.match(MySQLParser.PASSWORD_SYMBOL);
                            this.setState(4893);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 530, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4891);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4892);
                                    this.textString();
                                    }
                                    break;
                            }
                            this.setState(4896);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 531, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4895);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(4900);
                    this.user();
                    this.setState(4901);
                    this.match(MySQLParser.IDENTIFIED_SYMBOL);
                    this.setState(4902);
                    this.match(MySQLParser.WITH_SYMBOL);
                    {
                    this.setState(4903);
                    this.textOrIdentifier();
                    this.setState(4927);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 537, this.getContext())) {
                        case 1:
                            {
                            this.setState(4904);
                            this.match(MySQLParser.BY_SYMBOL);
                            this.setState(4905);
                            this.textString();
                            this.setState(4906);
                            this.match(MySQLParser.REPLACE_SYMBOL);
                            this.setState(4907);
                            this.textString();
                            this.setState(4909);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 533, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4908);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 2:
                            {
                            this.setState(4911);
                            this.match(MySQLParser.AS_SYMBOL);
                            this.setState(4912);
                            this.textStringHash();
                            this.setState(4914);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 534, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4913);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 3:
                            {
                            this.setState(4916);
                            this.match(MySQLParser.BY_SYMBOL);
                            this.setState(4917);
                            this.textString();
                            this.setState(4919);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 535, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4918);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                        case 4:
                            {
                            this.setState(4921);
                            this.match(MySQLParser.BY_SYMBOL);
                            this.setState(4922);
                            this.match(MySQLParser.RANDOM_SYMBOL);
                            this.setState(4923);
                            this.match(MySQLParser.PASSWORD_SYMBOL);
                            this.setState(4925);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 536, this.getContext())) {
                                case 1:
                                    {
                                    this.setState(4924);
                                    this.retainCurrentPassword();
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(4929);
                    this.user();
                    this.setState(4931);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 538, this.getContext())) {
                        case 1:
                            {
                            this.setState(4930);
                            this.discardOldPassword();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userFunction(): UserFunctionContext {
        let localctx = new UserFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 628, MySQLParser.RULE_userFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4935);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4936);
            this.parentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUserStatement(): CreateUserStatementContext {
        let localctx = new CreateUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 630, MySQLParser.RULE_createUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4938);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(4939);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(4941);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 540, this.getContext())) {
                case 1:
                    {
                    this.setState(4940);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(4943);
            this.createUserList();
            this.setState(4945);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 541, this.getContext())) {
                case 1:
                    {
                    this.setState(4944);
                    this.defaultRoleClause();
                    }
                    break;
            }
            this.setState(4947);
            this.createUserTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUserTail(): CreateUserTailContext {
        let localctx = new CreateUserTailContext(this.getContext(), this.getState());
        this.enterRule(localctx, 632, MySQLParser.RULE_createUserTail);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4950);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 542, this.getContext())) {
                case 1:
                    {
                    this.setState(4949);
                    this.requireClause();
                    }
                    break;
            }
            this.setState(4953);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 543, this.getContext())) {
                case 1:
                    {
                    this.setState(4952);
                    this.connectOptions();
                    }
                    break;
            }
            this.setState(4958);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 544, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(4955);
                    this.accountLockPasswordExpireOptions();
                    }
                    }
                }
                this.setState(4960);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 544, this.getContext());
            }
            this.setState(4963);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 545, this.getContext())) {
                case 1:
                    {
                    this.setState(4961);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(4962);
                    this.userAttributes();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userAttributes(): UserAttributesContext {
        let localctx = new UserAttributesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 634, MySQLParser.RULE_userAttributes);
        try {
            this.setState(4969);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ATTRIBUTE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4965);
                this.match(MySQLParser.ATTRIBUTE_SYMBOL);
                this.setState(4966);
                this.textStringLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4967);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(4968);
                this.textStringLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultRoleClause(): DefaultRoleClauseContext {
        let localctx = new DefaultRoleClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 636, MySQLParser.RULE_defaultRoleClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4971);
            this.match(MySQLParser.DEFAULT_SYMBOL);
            this.setState(4972);
            this.match(MySQLParser.ROLE_SYMBOL);
            this.setState(4973);
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public requireClause(): RequireClauseContext {
        let localctx = new RequireClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 638, MySQLParser.RULE_requireClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4975);
            this.match(MySQLParser.REQUIRE_SYMBOL);
            this.setState(4978);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CIPHER_SYMBOL:
            case MySQLParser.ISSUER_SYMBOL:
            case MySQLParser.SUBJECT_SYMBOL:
                {
                this.setState(4976);
                this.requireList();
                }
                break;
            case MySQLParser.NONE_SYMBOL:
            case MySQLParser.SSL_SYMBOL:
            case MySQLParser.X509_SYMBOL:
                {
                this.setState(4977);
                localctx._option = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 389 || _la === 549 || _la === 658)) {
                    localctx._option = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public connectOptions(): ConnectOptionsContext {
        let localctx = new ConnectOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 640, MySQLParser.RULE_connectOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(4980);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(4989);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            this.setState(4989);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                            case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                                {
                                this.setState(4981);
                                this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                                this.setState(4982);
                                this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                                {
                                this.setState(4983);
                                this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                                this.setState(4984);
                                this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                                {
                                this.setState(4985);
                                this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                                this.setState(4986);
                                this.ulong_number();
                                }
                                break;
                            case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                                {
                                this.setState(4987);
                                this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                                this.setState(4988);
                                this.ulong_number();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(4991);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 549, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public accountLockPasswordExpireOptions(): AccountLockPasswordExpireOptionsContext {
        let localctx = new AccountLockPasswordExpireOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 642, MySQLParser.RULE_accountLockPasswordExpireOptions);
        let _la: number;
        try {
            this.setState(5033);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ACCOUNT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(4993);
                this.match(MySQLParser.ACCOUNT_SYMBOL);
                this.setState(4994);
                _la = this.input().LA(1);
                if(!(_la === 314 || _la === 620)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.PASSWORD_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(4995);
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.setState(5024);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 554, this.getContext())) {
                    case 1:
                        {
                        this.setState(4996);
                        this.match(MySQLParser.EXPIRE_SYMBOL);
                        this.setState(5003);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 550, this.getContext())) {
                            case 1:
                                {
                                this.setState(4997);
                                this.match(MySQLParser.INTERVAL_SYMBOL);
                                this.setState(4998);
                                this.real_ulong_number();
                                this.setState(4999);
                                this.match(MySQLParser.DAY_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                this.setState(5001);
                                this.match(MySQLParser.NEVER_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                this.setState(5002);
                                this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                        }
                        }
                        break;
                    case 2:
                        {
                        this.setState(5005);
                        this.match(MySQLParser.HISTORY_SYMBOL);
                        this.setState(5008);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                        case MySQLParser.INT_NUMBER:
                        case MySQLParser.LONG_NUMBER:
                        case MySQLParser.ULONGLONG_NUMBER:
                        case MySQLParser.HEX_NUMBER:
                            {
                            this.setState(5006);
                            this.real_ulong_number();
                            }
                            break;
                        case MySQLParser.DEFAULT_SYMBOL:
                            {
                            this.setState(5007);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        }
                        break;
                    case 3:
                        {
                        this.setState(5010);
                        this.match(MySQLParser.REUSE_SYMBOL);
                        this.setState(5011);
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.setState(5016);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                        case MySQLParser.INT_NUMBER:
                        case MySQLParser.LONG_NUMBER:
                        case MySQLParser.ULONGLONG_NUMBER:
                        case MySQLParser.HEX_NUMBER:
                            {
                            this.setState(5012);
                            this.real_ulong_number();
                            this.setState(5013);
                            this.match(MySQLParser.DAY_SYMBOL);
                            }
                            break;
                        case MySQLParser.DEFAULT_SYMBOL:
                            {
                            this.setState(5015);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        }
                        break;
                    case 4:
                        {
                        this.setState(5018);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(5019);
                        this.match(MySQLParser.REQUIRE_SYMBOL);
                        this.setState(5020);
                        this.match(MySQLParser.CURRENT_SYMBOL);
                        this.setState(5022);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 553, this.getContext())) {
                            case 1:
                                {
                                this.setState(5021);
                                _la = this.input().LA(1);
                                if(!(_la === 166 || _la === 727)) {
                                this.getErrorHandler().recoverInline(this);
                                }
                                else {
                                    this.getErrorHandler().reportMatch(this);
                                    this.consume();
                                }
                                }
                                break;
                        }
                        }
                        break;
                }
                }
                break;
            case MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5026);
                this.match(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL);
                this.setState(5027);
                this.real_ulong_number();
                }
                break;
            case MySQLParser.PASSWORD_LOCK_TIME_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5028);
                this.match(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL);
                this.setState(5031);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.INT_NUMBER:
                case MySQLParser.LONG_NUMBER:
                case MySQLParser.ULONGLONG_NUMBER:
                case MySQLParser.HEX_NUMBER:
                    {
                    this.setState(5029);
                    this.real_ulong_number();
                    }
                    break;
                case MySQLParser.UNBOUNDED_SYMBOL:
                    {
                    this.setState(5030);
                    this.match(MySQLParser.UNBOUNDED_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userAttribute(): UserAttributeContext {
        let localctx = new UserAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 644, MySQLParser.RULE_userAttribute);
        try {
            this.setState(5040);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.EOF:
                this.enterOuterAlt(localctx, 1);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            case MySQLParser.ATTRIBUTE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5036);
                this.match(MySQLParser.ATTRIBUTE_SYMBOL);
                this.setState(5037);
                this.textStringLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5038);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(5039);
                this.textStringLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropUserStatement(): DropUserStatementContext {
        let localctx = new DropUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 646, MySQLParser.RULE_dropUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5042);
            this.match(MySQLParser.DROP_SYMBOL);
            this.setState(5043);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(5045);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 558, this.getContext())) {
                case 1:
                    {
                    this.setState(5044);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(5047);
            this.userList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantStatement(): GrantStatementContext {
        let localctx = new GrantStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 648, MySQLParser.RULE_grantStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5049);
            this.match(MySQLParser.GRANT_SYMBOL);
            this.setState(5091);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 567, this.getContext())) {
                case 1:
                    {
                    this.setState(5050);
                    this.roleOrPrivilegesList();
                    this.setState(5051);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(5052);
                    this.userList();
                    this.setState(5056);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 653) {
                        {
                        this.setState(5053);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(5054);
                        this.match(MySQLParser.ADMIN_SYMBOL);
                        this.setState(5055);
                        this.match(MySQLParser.OPTION_SYMBOL);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.setState(5063);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 561, this.getContext())) {
                        case 1:
                            {
                            this.setState(5058);
                            this.roleOrPrivilegesList();
                            }
                            break;
                        case 2:
                            {
                            this.setState(5059);
                            this.match(MySQLParser.ALL_SYMBOL);
                            this.setState(5061);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 439) {
                                {
                                this.setState(5060);
                                this.match(MySQLParser.PRIVILEGES_SYMBOL);
                                }
                            }

                            }
                            break;
                    }
                    this.setState(5065);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(5067);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 562, this.getContext())) {
                        case 1:
                            {
                            this.setState(5066);
                            this.aclType();
                            }
                            break;
                    }
                    this.setState(5069);
                    this.grantIdentifier();
                    this.setState(5070);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(5071);
                    this.grantTargetList();
                    this.setState(5073);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 563, this.getContext())) {
                        case 1:
                            {
                            this.setState(5072);
                            this.versionedRequireClause();
                            }
                            break;
                    }
                    this.setState(5076);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 653) {
                        {
                        this.setState(5075);
                        this.grantOptions();
                        }
                    }

                    this.setState(5079);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 63) {
                        {
                        this.setState(5078);
                        this.grantAs();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.setState(5081);
                    this.match(MySQLParser.PROXY_SYMBOL);
                    this.setState(5082);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(5083);
                    this.user();
                    this.setState(5084);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(5085);
                    this.grantTargetList();
                    this.setState(5089);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 653) {
                        {
                        this.setState(5086);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(5087);
                        this.match(MySQLParser.GRANT_SYMBOL);
                        this.setState(5088);
                        this.match(MySQLParser.OPTION_SYMBOL);
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantTargetList(): GrantTargetListContext {
        let localctx = new GrantTargetListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 650, MySQLParser.RULE_grantTargetList);
        try {
            this.setState(5097);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 568, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5093);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(5094);
                    this.createUserList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5095);
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.setState(5096);
                    this.userList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantOptions(): GrantOptionsContext {
        let localctx = new GrantOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 652, MySQLParser.RULE_grantOptions);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5099);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(5100);
            this.grantOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public exceptRoleList(): ExceptRoleListContext {
        let localctx = new ExceptRoleListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 654, MySQLParser.RULE_exceptRoleList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5102);
            this.match(MySQLParser.EXCEPT_SYMBOL);
            this.setState(5103);
            this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public withRoles(): WithRolesContext {
        let localctx = new WithRolesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 656, MySQLParser.RULE_withRoles);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5105);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(5106);
            this.match(MySQLParser.ROLE_SYMBOL);
            this.setState(5114);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 570, this.getContext())) {
                case 1:
                    {
                    this.setState(5107);
                    this.roleList();
                    }
                    break;
                case 2:
                    {
                    this.setState(5108);
                    this.match(MySQLParser.ALL_SYMBOL);
                    this.setState(5110);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 671) {
                        {
                        this.setState(5109);
                        this.exceptRoleList();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.setState(5112);
                    this.match(MySQLParser.NONE_SYMBOL);
                    }
                    break;
                case 4:
                    {
                    this.setState(5113);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantAs(): GrantAsContext {
        let localctx = new GrantAsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 658, MySQLParser.RULE_grantAs);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5116);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(5117);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(5119);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 653) {
                {
                this.setState(5118);
                this.withRoles();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public versionedRequireClause(): VersionedRequireClauseContext {
        let localctx = new VersionedRequireClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 660, MySQLParser.RULE_versionedRequireClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5121);
            if (!(this.serverVersion < 80011)) {
                throw this.createFailedPredicateException("this.serverVersion < 80011");
            }
            this.setState(5122);
            this.requireClause();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public renameUserStatement(): RenameUserStatementContext {
        let localctx = new RenameUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 662, MySQLParser.RULE_renameUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5124);
            this.match(MySQLParser.RENAME_SYMBOL);
            this.setState(5125);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(5126);
            this.user();
            this.setState(5127);
            this.match(MySQLParser.TO_SYMBOL);
            this.setState(5128);
            this.user();
            this.setState(5136);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(5129);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5130);
                this.user();
                this.setState(5131);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(5132);
                this.user();
                }
                }
                this.setState(5138);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public revokeStatement(): RevokeStatementContext {
        let localctx = new RevokeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 664, MySQLParser.RULE_revokeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5139);
            this.match(MySQLParser.REVOKE_SYMBOL);
            this.setState(5142);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 573, this.getContext())) {
                case 1:
                    {
                    this.setState(5140);
                    if (!(this.serverVersion >= 80031)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80031");
                    }
                    this.setState(5141);
                    this.ifExists();
                    }
                    break;
            }
            this.setState(5179);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 578, this.getContext())) {
                case 1:
                    {
                    this.setState(5144);
                    this.roleOrPrivilegesList();
                    this.setState(5145);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(5146);
                    this.userList();
                    }
                    break;
                case 2:
                    {
                    this.setState(5148);
                    this.roleOrPrivilegesList();
                    this.setState(5149);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(5151);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 574, this.getContext())) {
                        case 1:
                            {
                            this.setState(5150);
                            this.aclType();
                            }
                            break;
                    }
                    this.setState(5153);
                    this.grantIdentifier();
                    this.setState(5154);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(5155);
                    this.userList();
                    }
                    break;
                case 3:
                    {
                    this.setState(5157);
                    this.match(MySQLParser.ALL_SYMBOL);
                    this.setState(5159);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 439) {
                        {
                        this.setState(5158);
                        this.match(MySQLParser.PRIVILEGES_SYMBOL);
                        }
                    }

                    this.setState(5169);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.ON_SYMBOL:
                        {
                        this.setState(5161);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(5163);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 576, this.getContext())) {
                            case 1:
                                {
                                this.setState(5162);
                                this.aclType();
                                }
                                break;
                        }
                        this.setState(5165);
                        this.grantIdentifier();
                        }
                        break;
                    case MySQLParser.COMMA_SYMBOL:
                        {
                        this.setState(5166);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(5167);
                        this.match(MySQLParser.GRANT_SYMBOL);
                        this.setState(5168);
                        this.match(MySQLParser.OPTION_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    this.setState(5171);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(5172);
                    this.userList();
                    }
                    break;
                case 4:
                    {
                    this.setState(5173);
                    this.match(MySQLParser.PROXY_SYMBOL);
                    this.setState(5174);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(5175);
                    this.user();
                    this.setState(5176);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(5177);
                    this.userList();
                    }
                    break;
            }
            this.setState(5183);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 579, this.getContext())) {
                case 1:
                    {
                    this.setState(5181);
                    if (!(this.serverVersion >= 80031)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80031");
                    }
                    this.setState(5182);
                    this.ignoreUnknownUser();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public aclType(): AclTypeContext {
        let localctx = new AclTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 666, MySQLParser.RULE_aclType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5185);
            _la = this.input().LA(1);
            if(!(_la === 238 || _la === 440 || _la === 583)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
        let localctx = new RoleOrPrivilegesListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 668, MySQLParser.RULE_roleOrPrivilegesList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5187);
            this.roleOrPrivilege();
            this.setState(5192);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(5188);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5189);
                this.roleOrPrivilege();
                }
                }
                this.setState(5194);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleOrPrivilege(): RoleOrPrivilegeContext {
        let localctx = new RoleOrPrivilegeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 670, MySQLParser.RULE_roleOrPrivilege);
        let _la: number;
        try {
            this.setState(5237);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 588, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5205);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 583, this.getContext())) {
                        case 1:
                            {
                            this.setState(5195);
                            this.roleIdentifierOrText();
                            this.setState(5197);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 32) {
                                {
                                this.setState(5196);
                                this.columnInternalRefList();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(5199);
                            this.roleIdentifierOrText();
                            this.setState(5203);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                            case MySQLParser.AT_TEXT_SUFFIX:
                                {
                                this.setState(5200);
                                this.match(MySQLParser.AT_TEXT_SUFFIX);
                                }
                                break;
                            case MySQLParser.AT_SIGN_SYMBOL:
                                {
                                this.setState(5201);
                                this.match(MySQLParser.AT_SIGN_SYMBOL);
                                this.setState(5202);
                                this.textOrIdentifier();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5207);
                    _la = this.input().LA(1);
                    if(!(_la === 274 || _la === 460 || _la === 511 || _la === 623)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(5209);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 32) {
                        {
                        this.setState(5208);
                        this.columnInternalRefList();
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5211);
                    _la = this.input().LA(1);
                    if(!(_la === 171 || _la === 184 || ((((_la - 205)) & ~0x1F) === 0 && ((1 << (_la - 205)) & 131081) !== 0) || _la === 268 || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & 134217745) !== 0) || _la === 522 || _la === 575 || _la === 603 || _la === 625)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5212);
                    this.match(MySQLParser.GRANT_SYMBOL);
                    this.setState(5213);
                    this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(5214);
                    this.match(MySQLParser.SHOW_SYMBOL);
                    this.setState(5215);
                    this.match(MySQLParser.DATABASES_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(5216);
                    this.match(MySQLParser.CREATE_SYMBOL);
                    this.setState(5220);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.TEMPORARY_SYMBOL:
                        {
                        this.setState(5217);
                        this.match(MySQLParser.TEMPORARY_SYMBOL);
                        this.setState(5218);
                        localctx._object = this.match(MySQLParser.TABLES_SYMBOL);
                        }
                        break;
                    case MySQLParser.ROUTINE_SYMBOL:
                    case MySQLParser.TABLESPACE_SYMBOL:
                    case MySQLParser.USER_SYMBOL:
                    case MySQLParser.VIEW_SYMBOL:
                        {
                        this.setState(5219);
                        localctx._object = this.input().LT(1);
                        _la = this.input().LA(1);
                        if(!(_la === 499 || _la === 582 || _la === 627 || _la === 644)) {
                            localctx._object = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    case MySQLParser.COMMA_SYMBOL:
                    case MySQLParser.FROM_SYMBOL:
                    case MySQLParser.ON_SYMBOL:
                    case MySQLParser.TO_SYMBOL:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(5222);
                    this.match(MySQLParser.LOCK_SYMBOL);
                    this.setState(5223);
                    this.match(MySQLParser.TABLES_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(5224);
                    this.match(MySQLParser.REPLICATION_SYMBOL);
                    this.setState(5227);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.CLIENT_SYMBOL:
                        {
                        this.setState(5225);
                        this.match(MySQLParser.CLIENT_SYMBOL);
                        }
                        break;
                    case MySQLParser.SLAVE_SYMBOL:
                    case MySQLParser.REPLICA_SYMBOL:
                        {
                        this.setState(5226);
                        this.replica();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(5229);
                    this.match(MySQLParser.SHOW_SYMBOL);
                    this.setState(5230);
                    this.match(MySQLParser.VIEW_SYMBOL);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(5231);
                    this.match(MySQLParser.ALTER_SYMBOL);
                    this.setState(5233);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 499) {
                        {
                        this.setState(5232);
                        this.match(MySQLParser.ROUTINE_SYMBOL);
                        }
                    }

                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(5235);
                    _la = this.input().LA(1);
                    if(!(_la === 139 || _la === 184)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(5236);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantIdentifier(): GrantIdentifierContext {
        let localctx = new GrantIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 672, MySQLParser.RULE_grantIdentifier);
        let _la: number;
        try {
            this.setState(5255);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 591, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5239);
                    this.match(MySQLParser.MULT_OPERATOR);
                    this.setState(5242);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 28) {
                        {
                        this.setState(5240);
                        this.match(MySQLParser.DOT_SYMBOL);
                        this.setState(5241);
                        this.match(MySQLParser.MULT_OPERATOR);
                        }
                    }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5244);
                    this.schemaRef();
                    this.setState(5247);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 28) {
                        {
                        this.setState(5245);
                        this.match(MySQLParser.DOT_SYMBOL);
                        this.setState(5246);
                        this.match(MySQLParser.MULT_OPERATOR);
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5249);
                    this.tableRef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5250);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(5251);
                    this.schemaRef();
                    this.setState(5252);
                    this.match(MySQLParser.DOT_SYMBOL);
                    this.setState(5253);
                    this.tableRef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public requireList(): RequireListContext {
        let localctx = new RequireListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 674, MySQLParser.RULE_requireList);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5257);
            this.requireListElement();
            this.setState(5264);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 593, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(5259);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 61) {
                        {
                        this.setState(5258);
                        this.match(MySQLParser.AND_SYMBOL);
                        }
                    }

                    this.setState(5261);
                    this.requireListElement();
                    }
                    }
                }
                this.setState(5266);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 593, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public requireListElement(): RequireListElementContext {
        let localctx = new RequireListElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 676, MySQLParser.RULE_requireListElement);
        try {
            this.setState(5273);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CIPHER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5267);
                localctx._element = this.match(MySQLParser.CIPHER_SYMBOL);
                this.setState(5268);
                this.textString();
                }
                break;
            case MySQLParser.ISSUER_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5269);
                localctx._element = this.match(MySQLParser.ISSUER_SYMBOL);
                this.setState(5270);
                this.textString();
                }
                break;
            case MySQLParser.SUBJECT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5271);
                localctx._element = this.match(MySQLParser.SUBJECT_SYMBOL);
                this.setState(5272);
                this.textString();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public grantOption(): GrantOptionContext {
        let localctx = new GrantOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 678, MySQLParser.RULE_grantOption);
        try {
            this.setState(5288);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 596, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5275);
                    localctx._option = this.match(MySQLParser.GRANT_SYMBOL);
                    this.setState(5276);
                    this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5277);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(5286);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL:
                        {
                        this.setState(5278);
                        localctx._option = this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                        this.setState(5279);
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL:
                        {
                        this.setState(5280);
                        localctx._option = this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                        this.setState(5281);
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL:
                        {
                        this.setState(5282);
                        localctx._option = this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                        this.setState(5283);
                        this.ulong_number();
                        }
                        break;
                    case MySQLParser.MAX_USER_CONNECTIONS_SYMBOL:
                        {
                        this.setState(5284);
                        localctx._option = this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                        this.setState(5285);
                        this.ulong_number();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setRoleStatement(): SetRoleStatementContext {
        let localctx = new SetRoleStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 680, MySQLParser.RULE_setRoleStatement);
        let _la: number;
        try {
            this.setState(5313);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 599, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5290);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(5291);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.setState(5292);
                    this.roleList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5293);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(5294);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.setState(5295);
                    _la = this.input().LA(1);
                    if(!(_la === 166 || _la === 389)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5296);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(5297);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(5298);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.setState(5302);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 597, this.getContext())) {
                        case 1:
                            {
                            this.setState(5299);
                            this.roleList();
                            }
                            break;
                        case 2:
                            {
                            this.setState(5300);
                            this.match(MySQLParser.NONE_SYMBOL);
                            }
                            break;
                        case 3:
                            {
                            this.setState(5301);
                            this.match(MySQLParser.ALL_SYMBOL);
                            }
                            break;
                    }
                    this.setState(5304);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(5305);
                    this.roleList();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5306);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(5307);
                    this.match(MySQLParser.ROLE_SYMBOL);
                    this.setState(5308);
                    this.match(MySQLParser.ALL_SYMBOL);
                    this.setState(5311);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 671) {
                        {
                        this.setState(5309);
                        this.match(MySQLParser.EXCEPT_SYMBOL);
                        this.setState(5310);
                        this.roleList();
                        }
                    }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleList(): RoleListContext {
        let localctx = new RoleListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 682, MySQLParser.RULE_roleList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5315);
            this.role();
            this.setState(5320);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 600, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(5316);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(5317);
                    this.role();
                    }
                    }
                }
                this.setState(5322);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 600, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public role(): RoleContext {
        let localctx = new RoleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 684, MySQLParser.RULE_role);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5323);
            this.roleIdentifierOrText();
            this.setState(5325);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 601, this.getContext())) {
                case 1:
                    {
                    this.setState(5324);
                    this.userVariable();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableAdministrationStatement(): TableAdministrationStatementContext {
        let localctx = new TableAdministrationStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 686, MySQLParser.RULE_tableAdministrationStatement);
        let _la: number;
        try {
            this.setState(5369);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ANALYZE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5327);
                localctx._type_ = this.match(MySQLParser.ANALYZE_SYMBOL);
                this.setState(5329);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.setState(5328);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(5331);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5332);
                this.tableRefList();
                this.setState(5334);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 184 || _la === 623) {
                    {
                    this.setState(5333);
                    this.histogram();
                    }
                }

                }
                break;
            case MySQLParser.CHECK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5336);
                localctx._type_ = this.match(MySQLParser.CHECK_SYMBOL);
                this.setState(5337);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5338);
                this.tableRefList();
                this.setState(5342);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 100 || ((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 131089) !== 0) || _la === 357 || _la === 449) {
                    {
                    {
                    this.setState(5339);
                    this.checkOption();
                    }
                    }
                    this.setState(5344);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            case MySQLParser.CHECKSUM_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5345);
                localctx._type_ = this.match(MySQLParser.CHECKSUM_SYMBOL);
                this.setState(5346);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5347);
                this.tableRefList();
                this.setState(5349);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 215 || _la === 449) {
                    {
                    this.setState(5348);
                    _la = this.input().LA(1);
                    if(!(_la === 215 || _la === 449)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case MySQLParser.OPTIMIZE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5351);
                localctx._type_ = this.match(MySQLParser.OPTIMIZE_SYMBOL);
                this.setState(5353);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.setState(5352);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(5355);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5356);
                this.tableRefList();
                }
                break;
            case MySQLParser.REPAIR_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(5357);
                localctx._type_ = this.match(MySQLParser.REPAIR_SYMBOL);
                this.setState(5359);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.setState(5358);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(5361);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5362);
                this.tableRefList();
                this.setState(5366);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 215 || _la === 449 || _la === 628) {
                    {
                    {
                    this.setState(5363);
                    this.repairType();
                    }
                    }
                    this.setState(5368);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public histogramAutoUpdate(): HistogramAutoUpdateContext {
        let localctx = new HistogramAutoUpdateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 688, MySQLParser.RULE_histogramAutoUpdate);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5371);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(5372);
            _la = this.input().LA(1);
            if(!(_la === 813 || _la === 814)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5373);
            this.match(MySQLParser.UPDATE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public histogramUpdateParam(): HistogramUpdateParamContext {
        let localctx = new HistogramUpdateParamContext(this.getContext(), this.getState());
        this.enterRule(localctx, 690, MySQLParser.RULE_histogramUpdateParam);
        try {
            this.setState(5385);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 612, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5376);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 610, this.getContext())) {
                        case 1:
                            {
                            this.setState(5375);
                            this.histogramNumBuckets();
                            }
                            break;
                    }
                    this.setState(5379);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 611, this.getContext())) {
                        case 1:
                            {
                            this.setState(5378);
                            this.histogramAutoUpdate();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5381);
                    if (!(this.serverVersion >= 80031)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80031");
                    }
                    this.setState(5382);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(5383);
                    this.match(MySQLParser.DATA_SYMBOL);
                    this.setState(5384);
                    this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public histogramNumBuckets(): HistogramNumBucketsContext {
        let localctx = new HistogramNumBucketsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 692, MySQLParser.RULE_histogramNumBuckets);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5387);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(5388);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(5389);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(5390);
            this.match(MySQLParser.BUCKETS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public histogram(): HistogramContext {
        let localctx = new HistogramContext(this.getContext(), this.getState());
        this.enterRule(localctx, 694, MySQLParser.RULE_histogram);
        try {
            this.setState(5402);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.UPDATE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5392);
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.setState(5393);
                this.match(MySQLParser.HISTOGRAM_SYMBOL);
                this.setState(5394);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(5395);
                this.identifierList();
                this.setState(5396);
                this.histogramUpdateParam();
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5398);
                this.match(MySQLParser.DROP_SYMBOL);
                this.setState(5399);
                this.match(MySQLParser.HISTOGRAM_SYMBOL);
                this.setState(5400);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(5401);
                this.identifierList();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public checkOption(): CheckOptionContext {
        let localctx = new CheckOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 696, MySQLParser.RULE_checkOption);
        let _la: number;
        try {
            this.setState(5407);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5404);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(5405);
                this.match(MySQLParser.UPGRADE_SYMBOL);
                }
                break;
            case MySQLParser.CHANGED_SYMBOL:
            case MySQLParser.EXTENDED_SYMBOL:
            case MySQLParser.FAST_SYMBOL:
            case MySQLParser.MEDIUM_SYMBOL:
            case MySQLParser.QUICK_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5406);
                _la = this.input().LA(1);
                if(!(_la === 100 || _la === 215 || _la === 219 || _la === 357 || _la === 449)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public repairType(): RepairTypeContext {
        let localctx = new RepairTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 698, MySQLParser.RULE_repairType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5409);
            _la = this.input().LA(1);
            if(!(_la === 215 || _la === 449 || _la === 628)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public uninstallStatement(): UninstallStatementContext {
        let localctx = new UninstallStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 700, MySQLParser.RULE_uninstallStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5411);
            this.match(MySQLParser.UNINSTALL_SYMBOL);
            this.setState(5423);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.PLUGIN_SYMBOL:
                {
                this.setState(5412);
                this.match(MySQLParser.PLUGIN_SYMBOL);
                this.setState(5413);
                this.pluginRef();
                }
                break;
            case MySQLParser.COMPONENT_SYMBOL:
                {
                this.setState(5414);
                this.match(MySQLParser.COMPONENT_SYMBOL);
                this.setState(5415);
                this.componentRef();
                this.setState(5420);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 29) {
                    {
                    {
                    this.setState(5416);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(5417);
                    this.componentRef();
                    }
                    }
                    this.setState(5422);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public installStatement(): InstallStatementContext {
        let localctx = new InstallStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 702, MySQLParser.RULE_installStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5425);
            this.match(MySQLParser.INSTALL_SYMBOL);
            this.setState(5436);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.PLUGIN_SYMBOL:
                {
                this.setState(5426);
                this.match(MySQLParser.PLUGIN_SYMBOL);
                this.setState(5427);
                this.identifier();
                this.setState(5428);
                this.match(MySQLParser.SONAME_SYMBOL);
                this.setState(5429);
                this.textStringLiteral();
                }
                break;
            case MySQLParser.COMPONENT_SYMBOL:
                {
                this.setState(5431);
                this.match(MySQLParser.COMPONENT_SYMBOL);
                this.setState(5432);
                this.textStringLiteralList();
                this.setState(5434);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 617, this.getContext())) {
                    case 1:
                        {
                        this.setState(5433);
                        this.installSetValueList();
                        }
                        break;
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public installOptionType(): InstallOptionTypeContext {
        let localctx = new InstallOptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 704, MySQLParser.RULE_installOptionType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5438);
            _la = this.input().LA(1);
            if(!(_la === 246 || _la === 666)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public installSetRvalue(): InstallSetRvalueContext {
        let localctx = new InstallSetRvalueContext(this.getContext(), this.getState());
        this.enterRule(localctx, 706, MySQLParser.RULE_installSetRvalue);
        try {
            this.setState(5442);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 619, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5440);
                    this.expr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5441);
                    this.match(MySQLParser.ON_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public installSetValue(): InstallSetValueContext {
        let localctx = new InstallSetValueContext(this.getContext(), this.getState());
        this.enterRule(localctx, 708, MySQLParser.RULE_installSetValue);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5444);
            this.installOptionType();
            this.setState(5445);
            this.lvalueVariable();
            this.setState(5446);
            this.equal();
            this.setState(5447);
            this.installSetRvalue();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public installSetValueList(): InstallSetValueListContext {
        let localctx = new InstallSetValueListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 710, MySQLParser.RULE_installSetValueList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5449);
            if (!(this.serverVersion >= 80032)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80032");
            }
            this.setState(5450);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(5451);
            this.installSetValue();
            this.setState(5456);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(5452);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5453);
                this.installSetValue();
                }
                }
                this.setState(5458);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setStatement(): SetStatementContext {
        let localctx = new SetStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 712, MySQLParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5459);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(5460);
            this.startOptionValueList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public startOptionValueList(): StartOptionValueListContext {
        let localctx = new StartOptionValueListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 714, MySQLParser.RULE_startOptionValueList);
        let _la: number;
        try {
            this.setState(5512);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 630, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5462);
                    this.optionValueNoOptionType();
                    this.setState(5463);
                    this.optionValueListContinued();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5465);
                    this.match(MySQLParser.TRANSACTION_SYMBOL);
                    this.setState(5466);
                    this.transactionCharacteristics();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5467);
                    this.optionType();
                    this.setState(5468);
                    this.startOptionValueListFollowingOptionType();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5470);
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.setState(5473);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 232) {
                        {
                        this.setState(5471);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(5472);
                        this.user();
                        }
                    }

                    this.setState(5475);
                    this.equal();
                    this.setState(5496);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 626, this.getContext())) {
                        case 1:
                            {
                            this.setState(5476);
                            this.textString();
                            this.setState(5478);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 475) {
                                {
                                this.setState(5477);
                                this.replacePassword();
                                }
                            }

                            this.setState(5481);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 735) {
                                {
                                this.setState(5480);
                                this.retainCurrentPassword();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(5483);
                            this.textString();
                            this.setState(5485);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 475) {
                                {
                                this.setState(5484);
                                this.replacePassword();
                                }
                            }

                            this.setState(5488);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 735) {
                                {
                                this.setState(5487);
                                this.retainCurrentPassword();
                                }
                            }

                            }
                            break;
                        case 3:
                            {
                            this.setState(5490);
                            if (!(this.serverVersion < 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80014");
                            }
                            this.setState(5491);
                            this.match(MySQLParser.PASSWORD_SYMBOL);
                            this.setState(5492);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(5493);
                            this.textString();
                            this.setState(5494);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(5498);
                    if (!(this.serverVersion >= 80018)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80018");
                    }
                    this.setState(5499);
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.setState(5502);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 232) {
                        {
                        this.setState(5500);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(5501);
                        this.user();
                        }
                    }

                    this.setState(5504);
                    this.match(MySQLParser.TO_SYMBOL);
                    this.setState(5505);
                    this.match(MySQLParser.RANDOM_SYMBOL);
                    this.setState(5507);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 475) {
                        {
                        this.setState(5506);
                        this.replacePassword();
                        }
                    }

                    this.setState(5510);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 735) {
                        {
                        this.setState(5509);
                        this.retainCurrentPassword();
                        }
                    }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext {
        let localctx = new TransactionCharacteristicsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 716, MySQLParser.RULE_transactionCharacteristics);
        let _la: number;
        try {
            this.setState(5523);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.READ_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5514);
                this.transactionAccessMode();
                this.setState(5516);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 288) {
                    {
                    this.setState(5515);
                    this.isolationLevel();
                    }
                }

                }
                break;
            case MySQLParser.ISOLATION_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5518);
                this.isolationLevel();
                this.setState(5521);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(5519);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(5520);
                    this.transactionAccessMode();
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public transactionAccessMode(): TransactionAccessModeContext {
        let localctx = new TransactionAccessModeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 718, MySQLParser.RULE_transactionAccessMode);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5525);
            this.match(MySQLParser.READ_SYMBOL);
            this.setState(5526);
            _la = this.input().LA(1);
            if(!(_la === 404 || _la === 657)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public isolationLevel(): IsolationLevelContext {
        let localctx = new IsolationLevelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 720, MySQLParser.RULE_isolationLevel);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5528);
            this.match(MySQLParser.ISOLATION_SYMBOL);
            this.setState(5529);
            this.match(MySQLParser.LEVEL_SYMBOL);
            this.setState(5535);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.REPEATABLE_SYMBOL:
                {
                this.setState(5530);
                this.match(MySQLParser.REPEATABLE_SYMBOL);
                this.setState(5531);
                this.match(MySQLParser.READ_SYMBOL);
                }
                break;
            case MySQLParser.READ_SYMBOL:
                {
                this.setState(5532);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(5533);
                _la = this.input().LA(1);
                if(!(_la === 119 || _la === 610)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.SERIALIZABLE_SYMBOL:
                {
                this.setState(5534);
                this.match(MySQLParser.SERIALIZABLE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionValueListContinued(): OptionValueListContinuedContext {
        let localctx = new OptionValueListContinuedContext(this.getContext(), this.getState());
        this.enterRule(localctx, 722, MySQLParser.RULE_optionValueListContinued);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5541);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(5537);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5538);
                this.optionValue();
                }
                }
                this.setState(5543);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
        let localctx = new OptionValueNoOptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 724, MySQLParser.RULE_optionValueNoOptionType);
        let _la: number;
        try {
            this.setState(5573);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 639, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5544);
                    this.lvalueVariable();
                    this.setState(5545);
                    this.equal();
                    this.setState(5546);
                    this.setExprOrDefault();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5548);
                    this.charsetClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5549);
                    this.userVariable();
                    this.setState(5550);
                    this.equal();
                    this.setState(5551);
                    this.expr(0);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5553);
                    this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                    this.setState(5555);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 636, this.getContext())) {
                        case 1:
                            {
                            this.setState(5554);
                            this.setVarIdentType();
                            }
                            break;
                    }
                    this.setState(5557);
                    this.lvalueVariable();
                    this.setState(5558);
                    this.equal();
                    this.setState(5559);
                    this.setExprOrDefault();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(5561);
                    this.match(MySQLParser.NAMES_SYMBOL);
                    this.setState(5571);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 638, this.getContext())) {
                        case 1:
                            {
                            this.setState(5562);
                            this.equal();
                            this.setState(5563);
                            this.expr(0);
                            }
                            break;
                        case 2:
                            {
                            this.setState(5565);
                            this.charsetName();
                            this.setState(5567);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 112) {
                                {
                                this.setState(5566);
                                this.collate();
                                }
                            }

                            }
                            break;
                        case 3:
                            {
                            this.setState(5569);
                            if (!(this.serverVersion >= 80011)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80011");
                            }
                            this.setState(5570);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionValue(): OptionValueContext {
        let localctx = new OptionValueContext(this.getContext(), this.getState());
        this.enterRule(localctx, 726, MySQLParser.RULE_optionValue);
        try {
            this.setState(5581);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 640, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5575);
                    this.optionType();
                    this.setState(5576);
                    this.lvalueVariable();
                    this.setState(5577);
                    this.equal();
                    this.setState(5578);
                    this.setExprOrDefault();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5580);
                    this.optionValueNoOptionType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setSystemVariable(): SetSystemVariableContext {
        let localctx = new SetSystemVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 728, MySQLParser.RULE_setSystemVariable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5583);
            this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
            this.setState(5585);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 641, this.getContext())) {
                case 1:
                    {
                    this.setState(5584);
                    this.setVarIdentType();
                    }
                    break;
            }
            this.setState(5587);
            this.lvalueVariable();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext {
        let localctx = new StartOptionValueListFollowingOptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 730, MySQLParser.RULE_startOptionValueListFollowingOptionType);
        try {
            this.setState(5594);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 642, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5589);
                    this.optionValueFollowingOptionType();
                    this.setState(5590);
                    this.optionValueListContinued();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5592);
                    this.match(MySQLParser.TRANSACTION_SYMBOL);
                    this.setState(5593);
                    this.transactionCharacteristics();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext {
        let localctx = new OptionValueFollowingOptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 732, MySQLParser.RULE_optionValueFollowingOptionType);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5596);
            this.lvalueVariable();
            this.setState(5597);
            this.equal();
            this.setState(5598);
            this.setExprOrDefault();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setExprOrDefault(): SetExprOrDefaultContext {
        let localctx = new SetExprOrDefaultContext(this.getContext(), this.getState());
        this.enterRule(localctx, 734, MySQLParser.RULE_setExprOrDefault);
        try {
            this.setState(5607);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 643, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5600);
                    this.expr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5601);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(5602);
                    this.match(MySQLParser.ON_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(5603);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(5604);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(5605);
                    this.match(MySQLParser.ROW_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(5606);
                    this.match(MySQLParser.SYSTEM_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showDatabasesStatement(): ShowDatabasesStatementContext {
        let localctx = new ShowDatabasesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 736, MySQLParser.RULE_showDatabasesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5609);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5610);
            this.match(MySQLParser.DATABASES_SYMBOL);
            this.setState(5612);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5611);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showTablesStatement(): ShowTablesStatementContext {
        let localctx = new ShowTablesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 738, MySQLParser.RULE_showTablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5614);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5616);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 215 || _la === 236) {
                {
                this.setState(5615);
                this.showCommandType();
                }
            }

            this.setState(5618);
            localctx._value = this.match(MySQLParser.TABLES_SYMBOL);
            this.setState(5620);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.setState(5619);
                this.inDb();
                }
            }

            this.setState(5623);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5622);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showTriggersStatement(): ShowTriggersStatementContext {
        let localctx = new ShowTriggersStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 740, MySQLParser.RULE_showTriggersStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5625);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5627);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 236) {
                {
                this.setState(5626);
                this.match(MySQLParser.FULL_SYMBOL);
                }
            }

            this.setState(5629);
            this.match(MySQLParser.TRIGGERS_SYMBOL);
            this.setState(5631);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.setState(5630);
                this.inDb();
                }
            }

            this.setState(5634);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5633);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEventsStatement(): ShowEventsStatementContext {
        let localctx = new ShowEventsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 742, MySQLParser.RULE_showEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5636);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5637);
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.setState(5639);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.setState(5638);
                this.inDb();
                }
            }

            this.setState(5642);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5641);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showTableStatusStatement(): ShowTableStatusStatementContext {
        let localctx = new ShowTableStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 744, MySQLParser.RULE_showTableStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5644);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5645);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(5646);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5648);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.setState(5647);
                this.inDb();
                }
            }

            this.setState(5651);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5650);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showOpenTablesStatement(): ShowOpenTablesStatementContext {
        let localctx = new ShowOpenTablesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 746, MySQLParser.RULE_showOpenTablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5653);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5654);
            this.match(MySQLParser.OPEN_SYMBOL);
            this.setState(5655);
            this.match(MySQLParser.TABLES_SYMBOL);
            this.setState(5657);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.setState(5656);
                this.inDb();
                }
            }

            this.setState(5660);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5659);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showParseTreeStatement(): ShowParseTreeStatementContext {
        let localctx = new ShowParseTreeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 748, MySQLParser.RULE_showParseTreeStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5662);
            if (!(this.serverVersion >= 80100)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80100");
            }
            this.setState(5663);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5664);
            this.match(MySQLParser.PARSE_TREE_SYMBOL);
            this.setState(5665);
            this.simpleStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showPluginsStatement(): ShowPluginsStatementContext {
        let localctx = new ShowPluginsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 750, MySQLParser.RULE_showPluginsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5667);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5668);
            this.match(MySQLParser.PLUGINS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEngineLogsStatement(): ShowEngineLogsStatementContext {
        let localctx = new ShowEngineLogsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 752, MySQLParser.RULE_showEngineLogsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5670);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5671);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(5672);
            this.engineOrAll();
            this.setState(5673);
            this.match(MySQLParser.LOGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEngineMutexStatement(): ShowEngineMutexStatementContext {
        let localctx = new ShowEngineMutexStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 754, MySQLParser.RULE_showEngineMutexStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5675);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5676);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(5677);
            this.engineOrAll();
            this.setState(5678);
            this.match(MySQLParser.MUTEX_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEngineStatusStatement(): ShowEngineStatusStatementContext {
        let localctx = new ShowEngineStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 756, MySQLParser.RULE_showEngineStatusStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5680);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5681);
            this.match(MySQLParser.ENGINE_SYMBOL);
            this.setState(5682);
            this.engineOrAll();
            this.setState(5683);
            this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showColumnsStatement(): ShowColumnsStatementContext {
        let localctx = new ShowColumnsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 758, MySQLParser.RULE_showColumnsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5685);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5687);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 215 || _la === 236) {
                {
                this.setState(5686);
                this.showCommandType();
                }
            }

            this.setState(5689);
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.setState(5690);
            _la = this.input().LA(1);
            if(!(_la === 235 || _la === 282)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5691);
            this.tableRef();
            this.setState(5693);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.setState(5692);
                this.inDb();
                }
            }

            this.setState(5696);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5695);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showBinaryLogsStatement(): ShowBinaryLogsStatementContext {
        let localctx = new ShowBinaryLogsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 760, MySQLParser.RULE_showBinaryLogsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5698);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5699);
            _la = this.input().LA(1);
            if(!(_la === 77 || _la === 341)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5700);
            localctx._value = this.match(MySQLParser.LOGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showBinaryLogStatusStatement(): ShowBinaryLogStatusStatementContext {
        let localctx = new ShowBinaryLogStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 762, MySQLParser.RULE_showBinaryLogStatusStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5702);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5703);
            this.match(MySQLParser.BINARY_SYMBOL);
            this.setState(5704);
            this.match(MySQLParser.LOG_SYMBOL);
            this.setState(5705);
            this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showReplicasStatement(): ShowReplicasStatementContext {
        let localctx = new ShowReplicasStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 764, MySQLParser.RULE_showReplicasStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5707);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5712);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.SLAVE_SYMBOL:
            case MySQLParser.REPLICA_SYMBOL:
                {
                this.setState(5708);
                this.replica();
                this.setState(5709);
                this.match(MySQLParser.HOSTS_SYMBOL);
                }
                break;
            case MySQLParser.REPLICAS_SYMBOL:
                {
                this.setState(5711);
                this.match(MySQLParser.REPLICAS_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showBinlogEventsStatement(): ShowBinlogEventsStatementContext {
        let localctx = new ShowBinlogEventsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 766, MySQLParser.RULE_showBinlogEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5714);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5715);
            this.match(MySQLParser.BINLOG_SYMBOL);
            this.setState(5716);
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.setState(5719);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 282) {
                {
                this.setState(5717);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(5718);
                this.textString();
                }
            }

            this.setState(5723);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235) {
                {
                this.setState(5721);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(5722);
                this.ulonglongNumber();
                }
            }

            this.setState(5726);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 306) {
                {
                this.setState(5725);
                this.limitClause();
                }
            }

            this.setState(5729);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(5728);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showRelaylogEventsStatement(): ShowRelaylogEventsStatementContext {
        let localctx = new ShowRelaylogEventsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 768, MySQLParser.RULE_showRelaylogEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5731);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5732);
            this.match(MySQLParser.RELAYLOG_SYMBOL);
            this.setState(5733);
            this.match(MySQLParser.EVENTS_SYMBOL);
            this.setState(5736);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 282) {
                {
                this.setState(5734);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(5735);
                this.textString();
                }
            }

            this.setState(5740);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235) {
                {
                this.setState(5738);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(5739);
                this.ulonglongNumber();
                }
            }

            this.setState(5743);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 306) {
                {
                this.setState(5742);
                this.limitClause();
                }
            }

            this.setState(5746);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(5745);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showKeysStatement(): ShowKeysStatementContext {
        let localctx = new ShowKeysStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 770, MySQLParser.RULE_showKeysStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5748);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5750);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 215) {
                {
                this.setState(5749);
                this.match(MySQLParser.EXTENDED_SYMBOL);
                }
            }

            this.setState(5752);
            _la = this.input().LA(1);
            if(!(((((_la - 267)) & ~0x1F) === 0 && ((1 << (_la - 267)) & 67108867) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(5753);
            this.fromOrIn();
            this.setState(5754);
            this.tableRef();
            this.setState(5756);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 235 || _la === 282) {
                {
                this.setState(5755);
                this.inDb();
                }
            }

            this.setState(5759);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 651) {
                {
                this.setState(5758);
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showEnginesStatement(): ShowEnginesStatementContext {
        let localctx = new ShowEnginesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 772, MySQLParser.RULE_showEnginesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5761);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5763);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 563) {
                {
                this.setState(5762);
                this.match(MySQLParser.STORAGE_SYMBOL);
                }
            }

            this.setState(5765);
            localctx._value = this.match(MySQLParser.ENGINES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCountWarningsStatement(): ShowCountWarningsStatementContext {
        let localctx = new ShowCountWarningsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 774, MySQLParser.RULE_showCountWarningsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5767);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5768);
            this.match(MySQLParser.COUNT_SYMBOL);
            this.setState(5769);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(5770);
            this.match(MySQLParser.MULT_OPERATOR);
            this.setState(5771);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(5772);
            this.match(MySQLParser.WARNINGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCountErrorsStatement(): ShowCountErrorsStatementContext {
        let localctx = new ShowCountErrorsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 776, MySQLParser.RULE_showCountErrorsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5774);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5775);
            this.match(MySQLParser.COUNT_SYMBOL);
            this.setState(5776);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(5777);
            this.match(MySQLParser.MULT_OPERATOR);
            this.setState(5778);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(5779);
            this.match(MySQLParser.ERRORS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showWarningsStatement(): ShowWarningsStatementContext {
        let localctx = new ShowWarningsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 778, MySQLParser.RULE_showWarningsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5781);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5782);
            this.match(MySQLParser.WARNINGS_SYMBOL);
            this.setState(5784);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 306) {
                {
                this.setState(5783);
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showErrorsStatement(): ShowErrorsStatementContext {
        let localctx = new ShowErrorsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 780, MySQLParser.RULE_showErrorsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5786);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5787);
            this.match(MySQLParser.ERRORS_SYMBOL);
            this.setState(5789);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 306) {
                {
                this.setState(5788);
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showProfilesStatement(): ShowProfilesStatementContext {
        let localctx = new ShowProfilesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 782, MySQLParser.RULE_showProfilesStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5791);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5792);
            this.match(MySQLParser.PROFILES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showProfileStatement(): ShowProfileStatementContext {
        let localctx = new ShowProfileStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 784, MySQLParser.RULE_showProfileStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5794);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5795);
            this.match(MySQLParser.PROFILE_SYMBOL);
            this.setState(5797);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 57 || _la === 84 || _la === 134 || _la === 138 || _la === 286 || _la === 358 || _la === 418 || _la === 533 || _la === 577) {
                {
                this.setState(5796);
                this.profileDefinitions();
                }
            }

            this.setState(5802);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(5799);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(5800);
                this.match(MySQLParser.QUERY_SYMBOL);
                this.setState(5801);
                this.match(MySQLParser.INT_NUMBER);
                }
            }

            this.setState(5805);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 306) {
                {
                this.setState(5804);
                this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showStatusStatement(): ShowStatusStatementContext {
        let localctx = new ShowStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 786, MySQLParser.RULE_showStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5807);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5809);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681) {
                {
                this.setState(5808);
                this.optionType();
                }
            }

            this.setState(5811);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5813);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5812);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showProcessListStatement(): ShowProcessListStatementContext {
        let localctx = new ShowProcessListStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 788, MySQLParser.RULE_showProcessListStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5815);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5817);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 236) {
                {
                this.setState(5816);
                this.match(MySQLParser.FULL_SYMBOL);
                }
            }

            this.setState(5819);
            this.match(MySQLParser.PROCESSLIST_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showVariablesStatement(): ShowVariablesStatementContext {
        let localctx = new ShowVariablesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 790, MySQLParser.RULE_showVariablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5821);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5823);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681) {
                {
                this.setState(5822);
                this.optionType();
                }
            }

            this.setState(5825);
            this.match(MySQLParser.VARIABLES_SYMBOL);
            this.setState(5827);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5826);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCharacterSetStatement(): ShowCharacterSetStatementContext {
        let localctx = new ShowCharacterSetStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 792, MySQLParser.RULE_showCharacterSetStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5829);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5830);
            this.charset();
            this.setState(5832);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5831);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCollationStatement(): ShowCollationStatementContext {
        let localctx = new ShowCollationStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 794, MySQLParser.RULE_showCollationStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5834);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5835);
            this.match(MySQLParser.COLLATION_SYMBOL);
            this.setState(5837);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5836);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showPrivilegesStatement(): ShowPrivilegesStatementContext {
        let localctx = new ShowPrivilegesStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 796, MySQLParser.RULE_showPrivilegesStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5839);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5840);
            this.match(MySQLParser.PRIVILEGES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showGrantsStatement(): ShowGrantsStatementContext {
        let localctx = new ShowGrantsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 798, MySQLParser.RULE_showGrantsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5842);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5843);
            this.match(MySQLParser.GRANTS_SYMBOL);
            this.setState(5850);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(5844);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(5845);
                this.user();
                this.setState(5848);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 630) {
                    {
                    this.setState(5846);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(5847);
                    this.userList();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateDatabaseStatement(): ShowCreateDatabaseStatementContext {
        let localctx = new ShowCreateDatabaseStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 800, MySQLParser.RULE_showCreateDatabaseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5852);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5853);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5854);
            this.match(MySQLParser.DATABASE_SYMBOL);
            this.setState(5856);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 687, this.getContext())) {
                case 1:
                    {
                    this.setState(5855);
                    this.ifNotExists();
                    }
                    break;
            }
            this.setState(5858);
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateTableStatement(): ShowCreateTableStatementContext {
        let localctx = new ShowCreateTableStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 802, MySQLParser.RULE_showCreateTableStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5860);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5861);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5862);
            this.match(MySQLParser.TABLE_SYMBOL);
            this.setState(5863);
            this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateViewStatement(): ShowCreateViewStatementContext {
        let localctx = new ShowCreateViewStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 804, MySQLParser.RULE_showCreateViewStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5865);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5866);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5867);
            this.match(MySQLParser.VIEW_SYMBOL);
            this.setState(5868);
            this.viewRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showMasterStatusStatement(): ShowMasterStatusStatementContext {
        let localctx = new ShowMasterStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 806, MySQLParser.RULE_showMasterStatusStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5870);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5871);
            this.match(MySQLParser.MASTER_SYMBOL);
            this.setState(5872);
            this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showReplicaStatusStatement(): ShowReplicaStatusStatementContext {
        let localctx = new ShowReplicaStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 808, MySQLParser.RULE_showReplicaStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5874);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5875);
            this.replica();
            this.setState(5876);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5878);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(5877);
                this.channel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateProcedureStatement(): ShowCreateProcedureStatementContext {
        let localctx = new ShowCreateProcedureStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 810, MySQLParser.RULE_showCreateProcedureStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5880);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5881);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5882);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(5883);
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateFunctionStatement(): ShowCreateFunctionStatementContext {
        let localctx = new ShowCreateFunctionStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 812, MySQLParser.RULE_showCreateFunctionStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5885);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5886);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5887);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(5888);
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateTriggerStatement(): ShowCreateTriggerStatementContext {
        let localctx = new ShowCreateTriggerStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 814, MySQLParser.RULE_showCreateTriggerStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5890);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5891);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5892);
            this.match(MySQLParser.TRIGGER_SYMBOL);
            this.setState(5893);
            this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateProcedureStatusStatement(): ShowCreateProcedureStatusStatementContext {
        let localctx = new ShowCreateProcedureStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 816, MySQLParser.RULE_showCreateProcedureStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5895);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5896);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5897);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(5898);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5900);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5899);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateFunctionStatusStatement(): ShowCreateFunctionStatusStatementContext {
        let localctx = new ShowCreateFunctionStatusStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 818, MySQLParser.RULE_showCreateFunctionStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5902);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5903);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5904);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(5905);
            this.match(MySQLParser.STATUS_SYMBOL);
            this.setState(5907);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 305 || _la === 651) {
                {
                this.setState(5906);
                this.likeOrWhere();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateProcedureCodeStatement(): ShowCreateProcedureCodeStatementContext {
        let localctx = new ShowCreateProcedureCodeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 820, MySQLParser.RULE_showCreateProcedureCodeStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5909);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5910);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5911);
            this.match(MySQLParser.PROCEDURE_SYMBOL);
            this.setState(5912);
            this.match(MySQLParser.CODE_SYMBOL);
            this.setState(5913);
            this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateFunctionCodeStatement(): ShowCreateFunctionCodeStatementContext {
        let localctx = new ShowCreateFunctionCodeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 822, MySQLParser.RULE_showCreateFunctionCodeStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5915);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5916);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5917);
            this.match(MySQLParser.FUNCTION_SYMBOL);
            this.setState(5918);
            this.match(MySQLParser.CODE_SYMBOL);
            this.setState(5919);
            this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateEventStatement(): ShowCreateEventStatementContext {
        let localctx = new ShowCreateEventStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 824, MySQLParser.RULE_showCreateEventStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5921);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5922);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5923);
            this.match(MySQLParser.EVENT_SYMBOL);
            this.setState(5924);
            this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCreateUserStatement(): ShowCreateUserStatementContext {
        let localctx = new ShowCreateUserStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 826, MySQLParser.RULE_showCreateUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5926);
            this.match(MySQLParser.SHOW_SYMBOL);
            this.setState(5927);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(5928);
            this.match(MySQLParser.USER_SYMBOL);
            this.setState(5929);
            this.user();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public showCommandType(): ShowCommandTypeContext {
        let localctx = new ShowCommandTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 828, MySQLParser.RULE_showCommandType);
        let _la: number;
        try {
            this.setState(5936);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FULL_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5931);
                this.match(MySQLParser.FULL_SYMBOL);
                }
                break;
            case MySQLParser.EXTENDED_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5932);
                this.match(MySQLParser.EXTENDED_SYMBOL);
                this.setState(5934);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 236) {
                    {
                    this.setState(5933);
                    this.match(MySQLParser.FULL_SYMBOL);
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public engineOrAll(): EngineOrAllContext {
        let localctx = new EngineOrAllContext(this.getContext(), this.getState());
        this.enterRule(localctx, 830, MySQLParser.RULE_engineOrAll);
        try {
            this.setState(5940);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 693, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(5938);
                    this.engineRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(5939);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fromOrIn(): FromOrInContext {
        let localctx = new FromOrInContext(this.getContext(), this.getState());
        this.enterRule(localctx, 832, MySQLParser.RULE_fromOrIn);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5942);
            _la = this.input().LA(1);
            if(!(_la === 235 || _la === 282)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public inDb(): InDbContext {
        let localctx = new InDbContext(this.getContext(), this.getState());
        this.enterRule(localctx, 834, MySQLParser.RULE_inDb);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5944);
            this.fromOrIn();
            this.setState(5945);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public profileDefinitions(): ProfileDefinitionsContext {
        let localctx = new ProfileDefinitionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 836, MySQLParser.RULE_profileDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(5947);
            this.profileDefinition();
            this.setState(5952);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(5948);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(5949);
                this.profileDefinition();
                }
                }
                this.setState(5954);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public profileDefinition(): ProfileDefinitionContext {
        let localctx = new ProfileDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 838, MySQLParser.RULE_profileDefinition);
        let _la: number;
        try {
            this.setState(5962);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.BLOCK_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5955);
                this.match(MySQLParser.BLOCK_SYMBOL);
                this.setState(5956);
                this.match(MySQLParser.IO_SYMBOL);
                }
                break;
            case MySQLParser.CONTEXT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5957);
                this.match(MySQLParser.CONTEXT_SYMBOL);
                this.setState(5958);
                this.match(MySQLParser.SWITCHES_SYMBOL);
                }
                break;
            case MySQLParser.PAGE_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5959);
                this.match(MySQLParser.PAGE_SYMBOL);
                this.setState(5960);
                this.match(MySQLParser.FAULTS_SYMBOL);
                }
                break;
            case MySQLParser.ALL_SYMBOL:
            case MySQLParser.CPU_SYMBOL:
            case MySQLParser.IPC_SYMBOL:
            case MySQLParser.MEMORY_SYMBOL:
            case MySQLParser.SOURCE_SYMBOL:
            case MySQLParser.SWAPS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5961);
                _la = this.input().LA(1);
                if(!(_la === 57 || _la === 138 || _la === 286 || _la === 358 || _la === 533 || _la === 577)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public otherAdministrativeStatement(): OtherAdministrativeStatementContext {
        let localctx = new OtherAdministrativeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 840, MySQLParser.RULE_otherAdministrativeStatement);
        let _la: number;
        try {
            this.setState(6000);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.BINLOG_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(5964);
                localctx._type_ = this.match(MySQLParser.BINLOG_SYMBOL);
                this.setState(5965);
                this.textLiteral();
                }
                break;
            case MySQLParser.CACHE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(5966);
                localctx._type_ = this.match(MySQLParser.CACHE_SYMBOL);
                this.setState(5967);
                this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(5968);
                this.keyCacheListOrParts();
                this.setState(5969);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(5972);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 696, this.getContext())) {
                    case 1:
                        {
                        this.setState(5970);
                        this.identifier();
                        }
                        break;
                    case 2:
                        {
                        this.setState(5971);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.FLUSH_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(5974);
                localctx._type_ = this.match(MySQLParser.FLUSH_SYMBOL);
                this.setState(5976);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 312 || _la === 394) {
                    {
                    this.setState(5975);
                    this.noWriteToBinLog();
                    }
                }

                this.setState(5987);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.TABLES_SYMBOL:
                case MySQLParser.TABLE_SYMBOL:
                    {
                    this.setState(5978);
                    this.flushTables();
                    }
                    break;
                case MySQLParser.BINARY_SYMBOL:
                case MySQLParser.ENGINE_SYMBOL:
                case MySQLParser.ERROR_SYMBOL:
                case MySQLParser.GENERAL_SYMBOL:
                case MySQLParser.HOSTS_SYMBOL:
                case MySQLParser.LOGS_SYMBOL:
                case MySQLParser.OPTIMIZER_COSTS_SYMBOL:
                case MySQLParser.PRIVILEGES_SYMBOL:
                case MySQLParser.RELAY_SYMBOL:
                case MySQLParser.SLOW_SYMBOL:
                case MySQLParser.STATUS_SYMBOL:
                case MySQLParser.USER_RESOURCES_SYMBOL:
                    {
                    this.setState(5979);
                    this.flushOption();
                    this.setState(5984);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(5980);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(5981);
                        this.flushOption();
                        }
                        }
                        this.setState(5986);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            case MySQLParser.KILL_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(5989);
                localctx._type_ = this.match(MySQLParser.KILL_SYMBOL);
                this.setState(5991);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 700, this.getContext())) {
                    case 1:
                        {
                        this.setState(5990);
                        _la = this.input().LA(1);
                        if(!(_la === 127 || _la === 448)) {
                        this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                }
                this.setState(5993);
                this.expr(0);
                }
                break;
            case MySQLParser.LOAD_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(5994);
                localctx._type_ = this.match(MySQLParser.LOAD_SYMBOL);
                this.setState(5995);
                this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(5996);
                this.match(MySQLParser.INTO_SYMBOL);
                this.setState(5997);
                this.match(MySQLParser.CACHE_SYMBOL);
                this.setState(5998);
                this.preloadTail();
                }
                break;
            case MySQLParser.SHUTDOWN_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(5999);
                localctx._type_ = this.match(MySQLParser.SHUTDOWN_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyCacheListOrParts(): KeyCacheListOrPartsContext {
        let localctx = new KeyCacheListOrPartsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 842, MySQLParser.RULE_keyCacheListOrParts);
        try {
            this.setState(6004);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 702, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6002);
                    this.keyCacheList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6003);
                    this.assignToKeycachePartition();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyCacheList(): KeyCacheListContext {
        let localctx = new KeyCacheListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 844, MySQLParser.RULE_keyCacheList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6006);
            this.assignToKeycache();
            this.setState(6011);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(6007);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6008);
                this.assignToKeycache();
                }
                }
                this.setState(6013);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public assignToKeycache(): AssignToKeycacheContext {
        let localctx = new AssignToKeycacheContext(this.getContext(), this.getState());
        this.enterRule(localctx, 846, MySQLParser.RULE_assignToKeycache);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6014);
            this.tableRef();
            this.setState(6016);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 268 || _la === 295) {
                {
                this.setState(6015);
                this.cacheKeyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public assignToKeycachePartition(): AssignToKeycachePartitionContext {
        let localctx = new AssignToKeycachePartitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 848, MySQLParser.RULE_assignToKeycachePartition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6018);
            this.tableRef();
            this.setState(6019);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(6020);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6021);
            this.allOrPartitionNameList();
            this.setState(6022);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            this.setState(6024);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 268 || _la === 295) {
                {
                this.setState(6023);
                this.cacheKeyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cacheKeyList(): CacheKeyListContext {
        let localctx = new CacheKeyListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 850, MySQLParser.RULE_cacheKeyList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6026);
            this.keyOrIndex();
            this.setState(6027);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6029);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 706, this.getContext())) {
                case 1:
                    {
                    this.setState(6028);
                    this.keyUsageList();
                    }
                    break;
            }
            this.setState(6031);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyUsageElement(): KeyUsageElementContext {
        let localctx = new KeyUsageElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 852, MySQLParser.RULE_keyUsageElement);
        try {
            this.setState(6035);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 707, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6033);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6034);
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyUsageList(): KeyUsageListContext {
        let localctx = new KeyUsageListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 854, MySQLParser.RULE_keyUsageList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6037);
            this.keyUsageElement();
            this.setState(6042);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(6038);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6039);
                this.keyUsageElement();
                }
                }
                this.setState(6044);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public flushOption(): FlushOptionContext {
        let localctx = new FlushOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 856, MySQLParser.RULE_flushOption);
        let _la: number;
        try {
            this.setState(6056);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.HOSTS_SYMBOL:
            case MySQLParser.PRIVILEGES_SYMBOL:
            case MySQLParser.STATUS_SYMBOL:
            case MySQLParser.USER_RESOURCES_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6045);
                localctx._option = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 257 || _la === 439 || _la === 557 || _la === 626)) {
                    localctx._option = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.ERROR_SYMBOL:
            case MySQLParser.GENERAL_SYMBOL:
            case MySQLParser.LOGS_SYMBOL:
            case MySQLParser.SLOW_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6047);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 77 || _la === 198 || _la === 200 || _la === 240 || _la === 527) {
                    {
                    this.setState(6046);
                    this.logType();
                    }
                }

                this.setState(6049);
                localctx._option = this.match(MySQLParser.LOGS_SYMBOL);
                }
                break;
            case MySQLParser.RELAY_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(6050);
                localctx._option = this.match(MySQLParser.RELAY_SYMBOL);
                this.setState(6051);
                this.match(MySQLParser.LOGS_SYMBOL);
                this.setState(6053);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232) {
                    {
                    this.setState(6052);
                    this.channel();
                    }
                }

                }
                break;
            case MySQLParser.OPTIMIZER_COSTS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(6055);
                localctx._option = this.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logType(): LogTypeContext {
        let localctx = new LogTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 858, MySQLParser.RULE_logType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6058);
            _la = this.input().LA(1);
            if(!(_la === 77 || _la === 198 || _la === 200 || _la === 240 || _la === 527)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public flushTables(): FlushTablesContext {
        let localctx = new FlushTablesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 860, MySQLParser.RULE_flushTables);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6060);
            _la = this.input().LA(1);
            if(!(_la === 581 || _la === 583)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(6068);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 713, this.getContext())) {
                case 1:
                    {
                    this.setState(6061);
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.setState(6062);
                    this.match(MySQLParser.READ_SYMBOL);
                    this.setState(6063);
                    this.match(MySQLParser.LOCK_SYMBOL);
                    }
                    break;
                case 2:
                    {
                    this.setState(6064);
                    this.identifierList();
                    this.setState(6066);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 232 || _la === 653) {
                        {
                        this.setState(6065);
                        this.flushTablesOptions();
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public flushTablesOptions(): FlushTablesOptionsContext {
        let localctx = new FlushTablesOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 862, MySQLParser.RULE_flushTablesOptions);
        try {
            this.setState(6075);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.FOR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6070);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(6071);
                this.match(MySQLParser.EXPORT_SYMBOL);
                }
                break;
            case MySQLParser.WITH_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6072);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(6073);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(6074);
                this.match(MySQLParser.LOCK_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public preloadTail(): PreloadTailContext {
        let localctx = new PreloadTailContext(this.getContext(), this.getState());
        this.enterRule(localctx, 864, MySQLParser.RULE_preloadTail);
        let _la: number;
        try {
            this.setState(6087);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 717, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6077);
                    this.tableRef();
                    this.setState(6078);
                    this.adminPartition();
                    this.setState(6080);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 268 || _la === 295) {
                        {
                        this.setState(6079);
                        this.cacheKeyList();
                        }
                    }

                    this.setState(6084);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 264) {
                        {
                        this.setState(6082);
                        this.match(MySQLParser.IGNORE_SYMBOL);
                        this.setState(6083);
                        this.match(MySQLParser.LEAVES_SYMBOL);
                        }
                    }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6086);
                    this.preloadList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public preloadList(): PreloadListContext {
        let localctx = new PreloadListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 866, MySQLParser.RULE_preloadList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6089);
            this.preloadKeys();
            this.setState(6094);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(6090);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6091);
                this.preloadKeys();
                }
                }
                this.setState(6096);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public preloadKeys(): PreloadKeysContext {
        let localctx = new PreloadKeysContext(this.getContext(), this.getState());
        this.enterRule(localctx, 868, MySQLParser.RULE_preloadKeys);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6097);
            this.tableRef();
            this.setState(6099);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 268 || _la === 295) {
                {
                this.setState(6098);
                this.cacheKeyList();
                }
            }

            this.setState(6103);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 264) {
                {
                this.setState(6101);
                this.match(MySQLParser.IGNORE_SYMBOL);
                this.setState(6102);
                this.match(MySQLParser.LEAVES_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public adminPartition(): AdminPartitionContext {
        let localctx = new AdminPartitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 870, MySQLParser.RULE_adminPartition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6105);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(6106);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6107);
            this.allOrPartitionNameList();
            this.setState(6108);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupManagement(): ResourceGroupManagementContext {
        let localctx = new ResourceGroupManagementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 872, MySQLParser.RULE_resourceGroupManagement);
        try {
            this.setState(6114);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CREATE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6110);
                this.createResourceGroup();
                }
                break;
            case MySQLParser.ALTER_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6111);
                this.alterResourceGroup();
                }
                break;
            case MySQLParser.SET_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(6112);
                this.setResourceGroup();
                }
                break;
            case MySQLParser.DROP_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(6113);
                this.dropResourceGroup();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createResourceGroup(): CreateResourceGroupContext {
        let localctx = new CreateResourceGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 874, MySQLParser.RULE_createResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6116);
            this.match(MySQLParser.CREATE_SYMBOL);
            this.setState(6117);
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.setState(6118);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(6119);
            this.identifier();
            this.setState(6120);
            this.match(MySQLParser.TYPE_SYMBOL);
            this.setState(6122);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 6 || _la === 7) {
                {
                this.setState(6121);
                this.equal();
                }
            }

            this.setState(6124);
            _la = this.input().LA(1);
            if(!(_la === 627 || _la === 718)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(6126);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 719) {
                {
                this.setState(6125);
                this.resourceGroupVcpuList();
                }
            }

            this.setState(6129);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 716) {
                {
                this.setState(6128);
                this.resourceGroupPriority();
                }
            }

            this.setState(6132);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 177 || _la === 192) {
                {
                this.setState(6131);
                this.resourceGroupEnableDisable();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
        let localctx = new ResourceGroupVcpuListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 876, MySQLParser.RULE_resourceGroupVcpuList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6134);
            this.match(MySQLParser.VCPU_SYMBOL);
            this.setState(6136);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 6 || _la === 7) {
                {
                this.setState(6135);
                this.equal();
                }
            }

            this.setState(6138);
            this.vcpuNumOrRange();
            this.setState(6145);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 3 || _la === 29) {
                {
                {
                this.setState(6140);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(6139);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(6142);
                this.vcpuNumOrRange();
                }
                }
                this.setState(6147);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public vcpuNumOrRange(): VcpuNumOrRangeContext {
        let localctx = new VcpuNumOrRangeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 878, MySQLParser.RULE_vcpuNumOrRange);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6148);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(6151);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 15) {
                {
                this.setState(6149);
                this.match(MySQLParser.MINUS_OPERATOR);
                this.setState(6150);
                this.match(MySQLParser.INT_NUMBER);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext {
        let localctx = new ResourceGroupPriorityContext(this.getContext(), this.getState());
        this.enterRule(localctx, 880, MySQLParser.RULE_resourceGroupPriority);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6153);
            this.match(MySQLParser.THREAD_PRIORITY_SYMBOL);
            this.setState(6155);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 6 || _la === 7) {
                {
                this.setState(6154);
                this.equal();
                }
            }

            this.setState(6157);
            this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
        let localctx = new ResourceGroupEnableDisableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 882, MySQLParser.RULE_resourceGroupEnableDisable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6159);
            _la = this.input().LA(1);
            if(!(_la === 177 || _la === 192)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public alterResourceGroup(): AlterResourceGroupContext {
        let localctx = new AlterResourceGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 884, MySQLParser.RULE_alterResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6161);
            this.match(MySQLParser.ALTER_SYMBOL);
            this.setState(6162);
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.setState(6163);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(6164);
            this.resourceGroupRef();
            this.setState(6166);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 719) {
                {
                this.setState(6165);
                this.resourceGroupVcpuList();
                }
            }

            this.setState(6169);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 716) {
                {
                this.setState(6168);
                this.resourceGroupPriority();
                }
            }

            this.setState(6172);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 177 || _la === 192) {
                {
                this.setState(6171);
                this.resourceGroupEnableDisable();
                }
            }

            this.setState(6175);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 230) {
                {
                this.setState(6174);
                this.match(MySQLParser.FORCE_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setResourceGroup(): SetResourceGroupContext {
        let localctx = new SetResourceGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 886, MySQLParser.RULE_setResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6177);
            this.match(MySQLParser.SET_SYMBOL);
            this.setState(6178);
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.setState(6179);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(6180);
            this.identifier();
            this.setState(6183);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 232) {
                {
                this.setState(6181);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(6182);
                this.threadIdList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public threadIdList(): ThreadIdListContext {
        let localctx = new ThreadIdListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 888, MySQLParser.RULE_threadIdList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6185);
            this.real_ulong_number();
            this.setState(6192);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 536870968) !== 0) || _la === 44) {
                {
                {
                this.setState(6187);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(6186);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    }
                }

                this.setState(6189);
                this.real_ulong_number();
                }
                }
                this.setState(6194);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dropResourceGroup(): DropResourceGroupContext {
        let localctx = new DropResourceGroupContext(this.getContext(), this.getState());
        this.enterRule(localctx, 890, MySQLParser.RULE_dropResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6195);
            this.match(MySQLParser.DROP_SYMBOL);
            this.setState(6196);
            this.match(MySQLParser.RESOURCE_SYMBOL);
            this.setState(6197);
            this.match(MySQLParser.GROUP_SYMBOL);
            this.setState(6198);
            this.resourceGroupRef();
            this.setState(6200);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 230) {
                {
                this.setState(6199);
                this.match(MySQLParser.FORCE_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public utilityStatement(): UtilityStatementContext {
        let localctx = new UtilityStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 892, MySQLParser.RULE_utilityStatement);
        try {
            this.setState(6208);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 739, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6202);
                    this.describeStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6203);
                    this.explainStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6204);
                    this.helpCommand();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6205);
                    this.useCommand();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(6206);
                    if (!(this.serverVersion >= 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                    }
                    this.setState(6207);
                    this.restartServer();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public describeStatement(): DescribeStatementContext {
        let localctx = new DescribeStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 894, MySQLParser.RULE_describeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6210);
            _la = this.input().LA(1);
            if(!(_la === 172 || _la === 173 || _la === 213)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(6211);
            this.tableRef();
            this.setState(6214);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 740, this.getContext())) {
                case 1:
                    {
                    this.setState(6212);
                    this.textString();
                    }
                    break;
                case 2:
                    {
                    this.setState(6213);
                    this.columnRef();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public explainStatement(): ExplainStatementContext {
        let localctx = new ExplainStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 896, MySQLParser.RULE_explainStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6216);
            _la = this.input().LA(1);
            if(!(_la === 172 || _la === 173 || _la === 213)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(6218);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 741, this.getContext())) {
                case 1:
                    {
                    this.setState(6217);
                    this.explainOptions();
                    }
                    break;
            }
            this.setState(6224);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 742, this.getContext())) {
                case 1:
                    {
                    this.setState(6220);
                    if (!(this.serverVersion >= 80032)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80032");
                    }
                    this.setState(6221);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(6222);
                    this.match(MySQLParser.DATABASE_SYMBOL);
                    this.setState(6223);
                    this.textOrIdentifier();
                    }
                    break;
            }
            this.setState(6226);
            this.explainableStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public explainOptions(): ExplainOptionsContext {
        let localctx = new ExplainOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 898, MySQLParser.RULE_explainOptions);
        try {
            this.setState(6244);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 744, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6228);
                    this.match(MySQLParser.FORMAT_SYMBOL);
                    this.setState(6229);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(6230);
                    this.textOrIdentifier();
                    this.setState(6233);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 743, this.getContext())) {
                        case 1:
                            {
                            this.setState(6231);
                            if (!(this.serverVersion >= 80032)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80032");
                            }
                            this.setState(6232);
                            this.explainInto();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6235);
                    if (!(this.serverVersion < 80012)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80012");
                    }
                    this.setState(6236);
                    this.match(MySQLParser.EXTENDED_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6237);
                    if (!(this.serverVersion >= 80018)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80018");
                    }
                    this.setState(6238);
                    this.match(MySQLParser.ANALYZE_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6239);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(6240);
                    this.match(MySQLParser.ANALYZE_SYMBOL);
                    this.setState(6241);
                    this.match(MySQLParser.FORMAT_SYMBOL);
                    this.setState(6242);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    this.setState(6243);
                    this.textOrIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public explainableStatement(): ExplainableStatementContext {
        let localctx = new ExplainableStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 900, MySQLParser.RULE_explainableStatement);
        try {
            this.setState(6254);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 745, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6246);
                    this.selectStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6247);
                    this.deleteStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6248);
                    this.insertStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6249);
                    this.replaceStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(6250);
                    this.updateStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(6251);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(6252);
                    this.match(MySQLParser.CONNECTION_SYMBOL);
                    this.setState(6253);
                    this.real_ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public explainInto(): ExplainIntoContext {
        let localctx = new ExplainIntoContext(this.getContext(), this.getState());
        this.enterRule(localctx, 902, MySQLParser.RULE_explainInto);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6256);
            this.match(MySQLParser.INTO_SYMBOL);
            this.setState(6257);
            this.match(MySQLParser.AT_SIGN_SYMBOL);
            this.setState(6258);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public helpCommand(): HelpCommandContext {
        let localctx = new HelpCommandContext(this.getContext(), this.getState());
        this.enterRule(localctx, 904, MySQLParser.RULE_helpCommand);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6260);
            this.match(MySQLParser.HELP_SYMBOL);
            this.setState(6261);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public useCommand(): UseCommandContext {
        let localctx = new UseCommandContext(this.getContext(), this.getState());
        this.enterRule(localctx, 906, MySQLParser.RULE_useCommand);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6263);
            this.match(MySQLParser.USE_SYMBOL);
            this.setState(6264);
            this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public restartServer(): RestartServerContext {
        let localctx = new RestartServerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 908, MySQLParser.RULE_restartServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6266);
            this.match(MySQLParser.RESTART_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public expr(): ExprContext;
    public expr(_p: number): ExprContext;
    public expr(_p?: number): ExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        const _parentctx = this.getContext();
        const _parentState = this.getState();
        let localctx = new ExprContext(this.getContext(), _parentState);
        let _prevctx: ExprContext = localctx;
        const _startState = 910;
        this.enterRecursionRule(localctx, 910, MySQLParser.RULE_expr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6279);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 748, this.getContext())) {
                case 1:
                    {
                    localctx = new ExprIsContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;

                    this.setState(6269);
                    this.boolPri(0);
                    this.setState(6275);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 747, this.getContext())) {
                        case 1:
                            {
                            this.setState(6270);
                            this.match(MySQLParser.IS_SYMBOL);
                            this.setState(6272);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 1 || _la === 390) {
                                {
                                this.setState(6271);
                                this.notRule();
                                }
                            }

                            this.setState(6274);
                            (localctx as ExprIsContext)._type_ = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 218 || _la === 605 || _la === 619)) {
                                (localctx as ExprIsContext)._type_ = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    localctx = new ExprNotContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6277);
                    this.match(MySQLParser.NOT_SYMBOL);
                    this.setState(6278);
                    this.expr(4);
                    }
                    break;
            }
            this.getContext()?.setStop(this.input().LT(-1));
            this.setState(6292);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 750, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this.getParseListeners() != null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    {
                    this.setState(6290);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 749, this.getContext())) {
                        case 1:
                            {
                            localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                            this.setState(6281);
                            if (!(this.precpred(this.getContext(), 3))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 3)");
                            }
                            this.setState(6282);
                            (localctx as ExprAndContext)._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 23 || _la === 61)) {
                                (localctx as ExprAndContext)._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6283);
                            this.expr(4);
                            }
                            break;
                        case 2:
                            {
                            localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                            this.setState(6284);
                            if (!(this.precpred(this.getContext(), 2))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 2)");
                            }
                            this.setState(6285);
                            this.match(MySQLParser.XOR_SYMBOL);
                            this.setState(6286);
                            this.expr(3);
                            }
                            break;
                        case 3:
                            {
                            localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                            this.setState(6287);
                            if (!(this.precpred(this.getContext(), 1))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 1)");
                            }
                            this.setState(6288);
                            (localctx as ExprOrContext)._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 26 || _la === 412)) {
                                (localctx as ExprOrContext)._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6289);
                            this.expr(2);
                            }
                            break;
                    }
                    }
                }
                this.setState(6294);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 750, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }

    public boolPri(): BoolPriContext;
    public boolPri(_p: number): BoolPriContext;
    public boolPri(_p?: number): BoolPriContext {
        if (_p === undefined) {
            _p = 0;
        }

        const _parentctx = this.getContext();
        const _parentState = this.getState();
        let localctx = new BoolPriContext(this.getContext(), _parentState);
        let _prevctx: BoolPriContext = localctx;
        const _startState = 912;
        this.enterRecursionRule(localctx, 912, MySQLParser.RULE_boolPri, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            {
            localctx = new PrimaryExprPredicateContext(localctx);
            this.setContext(localctx);
            _prevctx = localctx;

            this.setState(6296);
            this.predicate();
            }
            this.getContext()?.setStop(this.input().LT(-1));
            this.setState(6315);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 753, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this.getParseListeners() != null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    {
                    this.setState(6313);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 752, this.getContext())) {
                        case 1:
                            {
                            localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                            this.setState(6298);
                            if (!(this.precpred(this.getContext(), 3))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 3)");
                            }
                            this.setState(6299);
                            this.match(MySQLParser.IS_SYMBOL);
                            this.setState(6301);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 1 || _la === 390) {
                                {
                                this.setState(6300);
                                this.notRule();
                                }
                            }

                            this.setState(6303);
                            this.match(MySQLParser.NULL_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                            this.setState(6304);
                            if (!(this.precpred(this.getContext(), 2))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 2)");
                            }
                            this.setState(6305);
                            this.compOp();
                            this.setState(6306);
                            this.predicate();
                            }
                            break;
                        case 3:
                            {
                            localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                            this.setState(6308);
                            if (!(this.precpred(this.getContext(), 1))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 1)");
                            }
                            this.setState(6309);
                            this.compOp();
                            this.setState(6310);
                            _la = this.input().LA(1);
                            if(!(_la === 57 || _la === 62)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6311);
                            this.subquery();
                            }
                            break;
                    }
                    }
                }
                this.setState(6317);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 753, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    public compOp(): CompOpContext {
        let localctx = new CompOpContext(this.getContext(), this.getState());
        this.enterRule(localctx, 914, MySQLParser.RULE_compOp);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6318);
            _la = this.input().LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 16192) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public predicate(): PredicateContext {
        let localctx = new PredicateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 916, MySQLParser.RULE_predicate);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6320);
            this.bitExpr(0);
            this.setState(6334);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 756, this.getContext())) {
                case 1:
                    {
                    this.setState(6322);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 1 || _la === 390) {
                        {
                        this.setState(6321);
                        this.notRule();
                        }
                    }

                    this.setState(6324);
                    this.predicateOperations();
                    }
                    break;
                case 2:
                    {
                    this.setState(6325);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(6326);
                    this.match(MySQLParser.MEMBER_SYMBOL);
                    this.setState(6328);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 676) {
                        {
                        this.setState(6327);
                        this.match(MySQLParser.OF_SYMBOL);
                        }
                    }

                    this.setState(6330);
                    this.simpleExprWithParentheses();
                    }
                    break;
                case 3:
                    {
                    this.setState(6331);
                    this.match(MySQLParser.SOUNDS_SYMBOL);
                    this.setState(6332);
                    this.match(MySQLParser.LIKE_SYMBOL);
                    this.setState(6333);
                    this.bitExpr(0);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public predicateOperations(): PredicateOperationsContext {
        let localctx = new PredicateOperationsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 918, MySQLParser.RULE_predicateOperations);
        try {
            this.setState(6357);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.IN_SYMBOL:
                localctx = new PredicateExprInContext(localctx);
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6336);
                this.match(MySQLParser.IN_SYMBOL);
                this.setState(6342);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 757, this.getContext())) {
                    case 1:
                        {
                        this.setState(6337);
                        this.subquery();
                        }
                        break;
                    case 2:
                        {
                        this.setState(6338);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6339);
                        this.exprList();
                        this.setState(6340);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.BETWEEN_SYMBOL:
                localctx = new PredicateExprBetweenContext(localctx);
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6344);
                this.match(MySQLParser.BETWEEN_SYMBOL);
                this.setState(6345);
                this.bitExpr(0);
                this.setState(6346);
                this.match(MySQLParser.AND_SYMBOL);
                this.setState(6347);
                this.predicate();
                }
                break;
            case MySQLParser.LIKE_SYMBOL:
                localctx = new PredicateExprLikeContext(localctx);
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(6349);
                this.match(MySQLParser.LIKE_SYMBOL);
                this.setState(6350);
                this.simpleExpr(0);
                this.setState(6353);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 758, this.getContext())) {
                    case 1:
                        {
                        this.setState(6351);
                        this.match(MySQLParser.ESCAPE_SYMBOL);
                        this.setState(6352);
                        this.simpleExpr(0);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.REGEXP_SYMBOL:
                localctx = new PredicateExprRegexContext(localctx);
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(6355);
                this.match(MySQLParser.REGEXP_SYMBOL);
                this.setState(6356);
                this.bitExpr(0);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public bitExpr(): BitExprContext;
    public bitExpr(_p: number): BitExprContext;
    public bitExpr(_p?: number): BitExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        const _parentctx = this.getContext();
        const _parentState = this.getState();
        let localctx = new BitExprContext(this.getContext(), _parentState);
        let _prevctx: BitExprContext = localctx;
        const _startState = 920;
        this.enterRecursionRule(localctx, 920, MySQLParser.RULE_bitExpr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            {
            this.setState(6360);
            this.simpleExpr(0);
            }
            this.getContext()?.setStop(this.input().LT(-1));
            this.setState(6388);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 761, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this.getParseListeners() != null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    {
                    this.setState(6386);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 760, this.getContext())) {
                        case 1:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6362);
                            if (!(this.precpred(this.getContext(), 7))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 7)");
                            }
                            this.setState(6363);
                            localctx._op = this.match(MySQLParser.BITWISE_XOR_OPERATOR);
                            this.setState(6364);
                            this.bitExpr(8);
                            }
                            break;
                        case 2:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6365);
                            if (!(this.precpred(this.getContext(), 6))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 6)");
                            }
                            this.setState(6366);
                            localctx._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 458752) !== 0) || _la === 181 || _la === 372)) {
                                localctx._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6367);
                            this.bitExpr(7);
                            }
                            break;
                        case 3:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6368);
                            if (!(this.precpred(this.getContext(), 5))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 5)");
                            }
                            this.setState(6369);
                            localctx._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 14 || _la === 15)) {
                                localctx._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6370);
                            this.bitExpr(6);
                            }
                            break;
                        case 4:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6371);
                            if (!(this.precpred(this.getContext(), 3))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 3)");
                            }
                            this.setState(6372);
                            localctx._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 21 || _la === 22)) {
                                localctx._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6373);
                            this.bitExpr(4);
                            }
                            break;
                        case 5:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6374);
                            if (!(this.precpred(this.getContext(), 2))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 2)");
                            }
                            this.setState(6375);
                            localctx._op = this.match(MySQLParser.BITWISE_AND_OPERATOR);
                            this.setState(6376);
                            this.bitExpr(3);
                            }
                            break;
                        case 6:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6377);
                            if (!(this.precpred(this.getContext(), 1))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 1)");
                            }
                            this.setState(6378);
                            localctx._op = this.match(MySQLParser.BITWISE_OR_OPERATOR);
                            this.setState(6379);
                            this.bitExpr(2);
                            }
                            break;
                        case 7:
                            {
                            localctx = new BitExprContext(_parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                            this.setState(6380);
                            if (!(this.precpred(this.getContext(), 4))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 4)");
                            }
                            this.setState(6381);
                            localctx._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if(!(_la === 14 || _la === 15)) {
                                localctx._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6382);
                            this.match(MySQLParser.INTERVAL_SYMBOL);
                            this.setState(6383);
                            this.expr(0);
                            this.setState(6384);
                            this.interval();
                            }
                            break;
                    }
                    }
                }
                this.setState(6390);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 761, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }

    public simpleExpr(): SimpleExprContext;
    public simpleExpr(_p: number): SimpleExprContext;
    public simpleExpr(_p?: number): SimpleExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        const _parentctx = this.getContext();
        const _parentState = this.getState();
        let localctx = new SimpleExprContext(this.getContext(), _parentState);
        let _prevctx: SimpleExprContext = localctx;
        const _startState = 922;
        this.enterRecursionRule(localctx, 922, MySQLParser.RULE_simpleExpr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6513);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 772, this.getContext())) {
                case 1:
                    {
                    localctx = new SimpleExprColumnRefContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;

                    this.setState(6392);
                    this.columnRef();
                    this.setState(6394);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 762, this.getContext())) {
                        case 1:
                            {
                            this.setState(6393);
                            this.jsonOperator();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    localctx = new SimpleExprRuntimeFunctionContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6396);
                    this.runtimeFunctionCall();
                    }
                    break;
                case 3:
                    {
                    localctx = new SimpleExprFunctionContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6397);
                    this.functionCall();
                    }
                    break;
                case 4:
                    {
                    localctx = new SimpleExprLiteralContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6398);
                    this.literalOrNull();
                    }
                    break;
                case 5:
                    {
                    localctx = new SimpleExprParamMarkerContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6399);
                    this.match(MySQLParser.PARAM_MARKER);
                    }
                    break;
                case 6:
                    {
                    localctx = new SimpleExpressionRValueContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6400);
                    this.rvalueSystemOrUserVariable();
                    }
                    break;
                case 7:
                    {
                    localctx = new SimpleExprUserVariableAssignmentContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6401);
                    this.inExpressionUserVariableAssignment();
                    }
                    break;
                case 8:
                    {
                    localctx = new SimpleExprSumContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6402);
                    this.sumExpr();
                    }
                    break;
                case 9:
                    {
                    localctx = new SimpleExprGroupingOperationContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6403);
                    this.groupingOperation();
                    }
                    break;
                case 10:
                    {
                    localctx = new SimpleExprWindowingFunctionContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6404);
                    this.windowFunctionCall();
                    }
                    break;
                case 11:
                    {
                    localctx = new SimpleExprUnaryContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6405);
                    (localctx as SimpleExprUnaryContext)._op = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 1097728) !== 0))) {
                        (localctx as SimpleExprUnaryContext)._op = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6406);
                    this.simpleExpr(15);
                    }
                    break;
                case 12:
                    {
                    localctx = new SimpleExprNotContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6407);
                    this.not2Rule();
                    this.setState(6408);
                    this.simpleExpr(14);
                    }
                    break;
                case 13:
                    {
                    localctx = new SimpleExprListContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6411);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 503) {
                        {
                        this.setState(6410);
                        this.match(MySQLParser.ROW_SYMBOL);
                        }
                    }

                    this.setState(6413);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6414);
                    this.exprList();
                    this.setState(6415);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 14:
                    {
                    localctx = new SimpleExprSubQueryContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6418);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 209) {
                        {
                        this.setState(6417);
                        this.match(MySQLParser.EXISTS_SYMBOL);
                        }
                    }

                    this.setState(6420);
                    this.subquery();
                    }
                    break;
                case 15:
                    {
                    localctx = new SimpleExprOdbcContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6421);
                    this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                    this.setState(6422);
                    this.identifier();
                    this.setState(6423);
                    this.expr(0);
                    this.setState(6424);
                    this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                    }
                    break;
                case 16:
                    {
                    localctx = new SimpleExprMatchContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6426);
                    this.match(MySQLParser.MATCH_SYMBOL);
                    this.setState(6427);
                    this.identListArg();
                    this.setState(6428);
                    this.match(MySQLParser.AGAINST_SYMBOL);
                    this.setState(6429);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6430);
                    this.bitExpr(0);
                    this.setState(6432);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 282 || _la === 653) {
                        {
                        this.setState(6431);
                        this.fulltextOptions();
                        }
                    }

                    this.setState(6434);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 17:
                    {
                    localctx = new SimpleExprBinaryContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6436);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(6437);
                    this.simpleExpr(9);
                    }
                    break;
                case 18:
                    {
                    localctx = new SimpleExprCastContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6438);
                    this.match(MySQLParser.CAST_SYMBOL);
                    this.setState(6439);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6440);
                    this.expr(0);
                    this.setState(6443);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 67) {
                        {
                        this.setState(6441);
                        this.match(MySQLParser.AT_SYMBOL);
                        this.setState(6442);
                        this.match(MySQLParser.LOCAL_SYMBOL);
                        }
                    }

                    this.setState(6445);
                    this.match(MySQLParser.AS_SYMBOL);
                    this.setState(6446);
                    this.castType();
                    this.setState(6448);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 767, this.getContext())) {
                        case 1:
                            {
                            this.setState(6447);
                            this.arrayCast();
                            }
                            break;
                    }
                    this.setState(6450);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 19:
                    {
                    localctx = new SimpleExprCastTimeContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6452);
                    this.match(MySQLParser.CAST_SYMBOL);
                    this.setState(6453);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6454);
                    this.expr(0);
                    this.setState(6455);
                    this.match(MySQLParser.AT_SYMBOL);
                    this.setState(6456);
                    this.match(MySQLParser.TIME_SYMBOL);
                    this.setState(6457);
                    this.match(MySQLParser.ZONE_SYMBOL);
                    this.setState(6459);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 768, this.getContext())) {
                        case 1:
                            {
                            this.setState(6458);
                            this.match(MySQLParser.INTERVAL_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6461);
                    this.textStringLiteral();
                    this.setState(6462);
                    this.match(MySQLParser.AS_SYMBOL);
                    this.setState(6463);
                    this.match(MySQLParser.DATETIME_SYMBOL);
                    this.setState(6464);
                    this.typeDatetimePrecision();
                    this.setState(6465);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 20:
                    {
                    localctx = new SimpleExprCaseContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6467);
                    this.match(MySQLParser.CASE_SYMBOL);
                    this.setState(6469);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 769, this.getContext())) {
                        case 1:
                            {
                            this.setState(6468);
                            this.expr(0);
                            }
                            break;
                    }
                    this.setState(6474);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    do {
                        {
                        {
                        this.setState(6471);
                        this.whenExpression();
                        this.setState(6472);
                        this.thenExpression();
                        }
                        }
                        this.setState(6476);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    } while (_la === 650);
                    this.setState(6479);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 190) {
                        {
                        this.setState(6478);
                        this.elseExpression();
                        }
                    }

                    this.setState(6481);
                    this.match(MySQLParser.END_SYMBOL);
                    }
                    break;
                case 21:
                    {
                    localctx = new SimpleExprConvertContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6483);
                    this.match(MySQLParser.CONVERT_SYMBOL);
                    this.setState(6484);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6485);
                    this.expr(0);
                    this.setState(6486);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6487);
                    this.castType();
                    this.setState(6488);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 22:
                    {
                    localctx = new SimpleExprConvertUsingContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6490);
                    this.match(MySQLParser.CONVERT_SYMBOL);
                    this.setState(6491);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6492);
                    this.expr(0);
                    this.setState(6493);
                    this.match(MySQLParser.USING_SYMBOL);
                    this.setState(6494);
                    this.charsetName();
                    this.setState(6495);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 23:
                    {
                    localctx = new SimpleExprDefaultContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6497);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(6498);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6499);
                    this.simpleIdentifier();
                    this.setState(6500);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 24:
                    {
                    localctx = new SimpleExprValuesContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6502);
                    this.match(MySQLParser.VALUES_SYMBOL);
                    this.setState(6503);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6504);
                    this.simpleIdentifier();
                    this.setState(6505);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 25:
                    {
                    localctx = new SimpleExprIntervalContext(localctx);
                    this.setContext(localctx);
                    _prevctx = localctx;
                    this.setState(6507);
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.setState(6508);
                    this.expr(0);
                    this.setState(6509);
                    this.interval();
                    this.setState(6510);
                    this.match(MySQLParser.PLUS_OPERATOR);
                    this.setState(6511);
                    this.expr(0);
                    }
                    break;
            }
            this.getContext()?.setStop(this.input().LT(-1));
            this.setState(6523);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 774, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this.getParseListeners() != null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    {
                    this.setState(6521);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 773, this.getContext())) {
                        case 1:
                            {
                            localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
                            this.setState(6515);
                            if (!(this.precpred(this.getContext(), 16))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 16)");
                            }
                            this.setState(6516);
                            this.match(MySQLParser.CONCAT_PIPES_SYMBOL);
                            this.setState(6517);
                            this.simpleExpr(17);
                            }
                            break;
                        case 2:
                            {
                            localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
                            this.setState(6518);
                            if (!(this.precpred(this.getContext(), 24))) {
                                throw this.createFailedPredicateException("this.precpred(this.getContext(), 24)");
                            }
                            this.setState(6519);
                            this.match(MySQLParser.COLLATE_SYMBOL);
                            this.setState(6520);
                            this.textOrIdentifier();
                            }
                            break;
                    }
                    }
                }
                this.setState(6525);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 774, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    public arrayCast(): ArrayCastContext {
        let localctx = new ArrayCastContext(this.getContext(), this.getState());
        this.enterRule(localctx, 924, MySQLParser.RULE_arrayCast);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6526);
            if (!(this.serverVersion >= 80017)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80017");
            }
            this.setState(6527);
            this.match(MySQLParser.ARRAY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jsonOperator(): JsonOperatorContext {
        let localctx = new JsonOperatorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 926, MySQLParser.RULE_jsonOperator);
        try {
            this.setState(6533);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.JSON_SEPARATOR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6529);
                this.match(MySQLParser.JSON_SEPARATOR_SYMBOL);
                this.setState(6530);
                this.textStringLiteral();
                }
                break;
            case MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6531);
                this.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
                this.setState(6532);
                this.textStringLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sumExpr(): SumExprContext {
        let localctx = new SumExprContext(this.getContext(), this.getState());
        this.enterRule(localctx, 928, MySQLParser.RULE_sumExpr);
        let _la: number;
        try {
            this.setState(6620);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 792, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6535);
                    localctx._name = this.match(MySQLParser.AVG_SYMBOL);
                    this.setState(6536);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6538);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 776, this.getContext())) {
                        case 1:
                            {
                            this.setState(6537);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6540);
                    this.inSumExpr();
                    this.setState(6541);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6543);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 777, this.getContext())) {
                        case 1:
                            {
                            this.setState(6542);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6545);
                    localctx._name = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(((((_la - 79)) & ~0x1F) === 0 && ((1 << (_la - 79)) & 11) !== 0))) {
                        localctx._name = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6546);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6547);
                    this.inSumExpr();
                    this.setState(6548);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6550);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 778, this.getContext())) {
                        case 1:
                            {
                            this.setState(6549);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6552);
                    this.jsonFunction();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6553);
                    localctx._name = this.match(MySQLParser.ST_COLLECT_SYMBOL);
                    this.setState(6554);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6556);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 779, this.getContext())) {
                        case 1:
                            {
                            this.setState(6555);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6558);
                    this.inSumExpr();
                    this.setState(6559);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6561);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 780, this.getContext())) {
                        case 1:
                            {
                            this.setState(6560);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(6563);
                    localctx._name = this.match(MySQLParser.COUNT_SYMBOL);
                    this.setState(6564);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6572);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 782, this.getContext())) {
                        case 1:
                            {
                            this.setState(6566);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 57) {
                                {
                                this.setState(6565);
                                this.match(MySQLParser.ALL_SYMBOL);
                                }
                            }

                            this.setState(6568);
                            this.match(MySQLParser.MULT_OPERATOR);
                            }
                            break;
                        case 2:
                            {
                            this.setState(6569);
                            this.inSumExpr();
                            }
                            break;
                        case 3:
                            {
                            this.setState(6570);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            this.setState(6571);
                            this.exprList();
                            }
                            break;
                    }
                    this.setState(6574);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6576);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 783, this.getContext())) {
                        case 1:
                            {
                            this.setState(6575);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(6578);
                    localctx._name = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 350 || _la === 368)) {
                        localctx._name = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6579);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6581);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 784, this.getContext())) {
                        case 1:
                            {
                            this.setState(6580);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6583);
                    this.inSumExpr();
                    this.setState(6584);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6586);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 785, this.getContext())) {
                        case 1:
                            {
                            this.setState(6585);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(6588);
                    localctx._name = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(((((_la - 558)) & ~0x1F) === 0 && ((1 << (_la - 558)) & 65545) !== 0) || _la === 640 || _la === 643)) {
                        localctx._name = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6589);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6590);
                    this.inSumExpr();
                    this.setState(6591);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6593);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 786, this.getContext())) {
                        case 1:
                            {
                            this.setState(6592);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(6595);
                    localctx._name = this.match(MySQLParser.SUM_SYMBOL);
                    this.setState(6596);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6597);
                    this.match(MySQLParser.DISTINCT_SYMBOL);
                    this.setState(6598);
                    this.inSumExpr();
                    this.setState(6599);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6601);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 787, this.getContext())) {
                        case 1:
                            {
                            this.setState(6600);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(6603);
                    localctx._name = this.match(MySQLParser.GROUP_CONCAT_SYMBOL);
                    this.setState(6604);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6606);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 788, this.getContext())) {
                        case 1:
                            {
                            this.setState(6605);
                            this.match(MySQLParser.DISTINCT_SYMBOL);
                            }
                            break;
                    }
                    this.setState(6608);
                    this.exprList();
                    this.setState(6610);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 411) {
                        {
                        this.setState(6609);
                        this.orderClause();
                        }
                    }

                    this.setState(6614);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 513) {
                        {
                        this.setState(6612);
                        this.match(MySQLParser.SEPARATOR_SYMBOL);
                        this.setState(6613);
                        this.textString();
                        }
                    }

                    this.setState(6616);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    this.setState(6618);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 791, this.getContext())) {
                        case 1:
                            {
                            this.setState(6617);
                            this.windowingClause();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupingOperation(): GroupingOperationContext {
        let localctx = new GroupingOperationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 930, MySQLParser.RULE_groupingOperation);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6622);
            this.match(MySQLParser.GROUPING_SYMBOL);
            this.setState(6623);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6624);
            this.exprList();
            this.setState(6625);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowFunctionCall(): WindowFunctionCallContext {
        let localctx = new WindowFunctionCallContext(this.getContext(), this.getState());
        this.enterRule(localctx, 932, MySQLParser.RULE_windowFunctionCall);
        let _la: number;
        try {
            this.setState(6676);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CUME_DIST_SYMBOL:
            case MySQLParser.DENSE_RANK_SYMBOL:
            case MySQLParser.PERCENT_RANK_SYMBOL:
            case MySQLParser.RANK_SYMBOL:
            case MySQLParser.ROW_NUMBER_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6627);
                _la = this.input().LA(1);
                if(!(((((_la - 686)) & ~0x1F) === 0 && ((1 << (_la - 686)) & 344067) !== 0))) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6628);
                this.parentheses();
                this.setState(6629);
                this.windowingClause();
                }
                break;
            case MySQLParser.NTILE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6631);
                this.match(MySQLParser.NTILE_SYMBOL);
                this.setState(6638);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 793, this.getContext())) {
                    case 1:
                        {
                        this.setState(6632);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6633);
                        this.stableInteger();
                        this.setState(6634);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                        this.setState(6636);
                        if (!(this.serverVersion < 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80024");
                        }
                        this.setState(6637);
                        this.simpleExprWithParentheses();
                        }
                        break;
                }
                this.setState(6640);
                this.windowingClause();
                }
                break;
            case MySQLParser.LAG_SYMBOL:
            case MySQLParser.LEAD_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(6642);
                _la = this.input().LA(1);
                if(!(_la === 692 || _la === 694)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6643);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6644);
                this.expr(0);
                this.setState(6646);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(6645);
                    this.leadLagInfo();
                    }
                }

                this.setState(6648);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(6650);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 264 || _la === 703) {
                    {
                    this.setState(6649);
                    this.nullTreatment();
                    }
                }

                this.setState(6652);
                this.windowingClause();
                }
                break;
            case MySQLParser.FIRST_VALUE_SYMBOL:
            case MySQLParser.LAST_VALUE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(6654);
                _la = this.input().LA(1);
                if(!(_la === 689 || _la === 693)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6655);
                this.exprWithParentheses();
                this.setState(6657);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 264 || _la === 703) {
                    {
                    this.setState(6656);
                    this.nullTreatment();
                    }
                }

                this.setState(6659);
                this.windowingClause();
                }
                break;
            case MySQLParser.NTH_VALUE_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(6661);
                this.match(MySQLParser.NTH_VALUE_SYMBOL);
                this.setState(6662);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6663);
                this.expr(0);
                this.setState(6664);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6665);
                this.simpleExpr(0);
                this.setState(6666);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(6669);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 235) {
                    {
                    this.setState(6667);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(6668);
                    _la = this.input().LA(1);
                    if(!(_la === 225 || _la === 298)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.setState(6672);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 264 || _la === 703) {
                    {
                    this.setState(6671);
                    this.nullTreatment();
                    }
                }

                this.setState(6674);
                this.windowingClause();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public samplingMethod(): SamplingMethodContext {
        let localctx = new SamplingMethodContext(this.getContext(), this.getState());
        this.enterRule(localctx, 934, MySQLParser.RULE_samplingMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6678);
            _la = this.input().LA(1);
            if(!(_la === 718 || _la === 815)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public samplingPercentage(): SamplingPercentageContext {
        let localctx = new SamplingPercentageContext(this.getContext(), this.getState());
        this.enterRule(localctx, 936, MySQLParser.RULE_samplingPercentage);
        try {
            this.setState(6684);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6680);
                this.ulonglongNumber();
                }
                break;
            case MySQLParser.AT_SIGN_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6681);
                this.match(MySQLParser.AT_SIGN_SYMBOL);
                this.setState(6682);
                this.textOrIdentifier();
                }
                break;
            case MySQLParser.PARAM_MARKER:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(6683);
                this.match(MySQLParser.PARAM_MARKER);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablesampleClause(): TablesampleClauseContext {
        let localctx = new TablesampleClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 938, MySQLParser.RULE_tablesampleClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6686);
            if (!(this.serverVersion >= 80200)) {
                throw this.createFailedPredicateException("this.serverVersion >= 80200");
            }
            this.setState(6687);
            this.match(MySQLParser.TABLESAMPLE_SYMBOL);
            this.setState(6688);
            this.samplingMethod();
            this.setState(6689);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(6690);
            this.samplingPercentage();
            this.setState(6691);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowingClause(): WindowingClauseContext {
        let localctx = new WindowingClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 940, MySQLParser.RULE_windowingClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6693);
            this.match(MySQLParser.OVER_SYMBOL);
            this.setState(6696);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 801, this.getContext())) {
                case 1:
                    {
                    this.setState(6694);
                    this.windowName();
                    }
                    break;
                case 2:
                    {
                    this.setState(6695);
                    this.windowSpec();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public leadLagInfo(): LeadLagInfoContext {
        let localctx = new LeadLagInfoContext(this.getContext(), this.getState());
        this.enterRule(localctx, 942, MySQLParser.RULE_leadLagInfo);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6698);
            this.match(MySQLParser.COMMA_SYMBOL);
            this.setState(6703);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 802, this.getContext())) {
                case 1:
                    {
                    this.setState(6699);
                    this.ulonglongNumber();
                    }
                    break;
                case 2:
                    {
                    this.setState(6700);
                    this.match(MySQLParser.PARAM_MARKER);
                    }
                    break;
                case 3:
                    {
                    this.setState(6701);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(6702);
                    this.stableInteger();
                    }
                    break;
            }
            this.setState(6707);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 29) {
                {
                this.setState(6705);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6706);
                this.expr(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public stableInteger(): StableIntegerContext {
        let localctx = new StableIntegerContext(this.getContext(), this.getState());
        this.enterRule(localctx, 944, MySQLParser.RULE_stableInteger);
        try {
            this.setState(6711);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 804, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6709);
                    this.int64Literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6710);
                    this.paramOrVar();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public paramOrVar(): ParamOrVarContext {
        let localctx = new ParamOrVarContext(this.getContext(), this.getState());
        this.enterRule(localctx, 946, MySQLParser.RULE_paramOrVar);
        try {
            this.setState(6717);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 805, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6713);
                    this.match(MySQLParser.PARAM_MARKER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6714);
                    this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6715);
                    this.match(MySQLParser.AT_SIGN_SYMBOL);
                    this.setState(6716);
                    this.textOrIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nullTreatment(): NullTreatmentContext {
        let localctx = new NullTreatmentContext(this.getContext(), this.getState());
        this.enterRule(localctx, 948, MySQLParser.RULE_nullTreatment);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6719);
            _la = this.input().LA(1);
            if(!(_la === 264 || _la === 703)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(6720);
            this.match(MySQLParser.NULLS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jsonFunction(): JsonFunctionContext {
        let localctx = new JsonFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 950, MySQLParser.RULE_jsonFunction);
        try {
            this.setState(6738);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.JSON_ARRAYAGG_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(6722);
                this.match(MySQLParser.JSON_ARRAYAGG_SYMBOL);
                this.setState(6723);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6724);
                this.inSumExpr();
                this.setState(6725);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(6727);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 806, this.getContext())) {
                    case 1:
                        {
                        this.setState(6726);
                        this.windowingClause();
                        }
                        break;
                }
                }
                break;
            case MySQLParser.JSON_OBJECTAGG_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(6729);
                this.match(MySQLParser.JSON_OBJECTAGG_SYMBOL);
                this.setState(6730);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6731);
                this.inSumExpr();
                this.setState(6732);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6733);
                this.inSumExpr();
                this.setState(6734);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(6736);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 807, this.getContext())) {
                    case 1:
                        {
                        this.setState(6735);
                        this.windowingClause();
                        }
                        break;
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public inSumExpr(): InSumExprContext {
        let localctx = new InSumExprContext(this.getContext(), this.getState());
        this.enterRule(localctx, 952, MySQLParser.RULE_inSumExpr);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6741);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 809, this.getContext())) {
                case 1:
                    {
                    this.setState(6740);
                    this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
            }
            this.setState(6743);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identListArg(): IdentListArgContext {
        let localctx = new IdentListArgContext(this.getContext(), this.getState());
        this.enterRule(localctx, 954, MySQLParser.RULE_identListArg);
        try {
            this.setState(6750);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 810, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6745);
                    this.identList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6746);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6747);
                    this.identList();
                    this.setState(6748);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identList(): IdentListContext {
        let localctx = new IdentListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 956, MySQLParser.RULE_identList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(6752);
            this.simpleIdentifier();
            this.setState(6757);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(6753);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6754);
                this.simpleIdentifier();
                }
                }
                this.setState(6759);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fulltextOptions(): FulltextOptionsContext {
        let localctx = new FulltextOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 958, MySQLParser.RULE_fulltextOptions);
        let _la: number;
        try {
            this.setState(6775);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 813, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6760);
                    this.match(MySQLParser.IN_SYMBOL);
                    this.setState(6761);
                    this.match(MySQLParser.BOOLEAN_SYMBOL);
                    this.setState(6762);
                    this.match(MySQLParser.MODE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6763);
                    this.match(MySQLParser.IN_SYMBOL);
                    this.setState(6764);
                    this.match(MySQLParser.NATURAL_SYMBOL);
                    this.setState(6765);
                    this.match(MySQLParser.LANGUAGE_SYMBOL);
                    this.setState(6766);
                    this.match(MySQLParser.MODE_SYMBOL);
                    this.setState(6770);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 653) {
                        {
                        this.setState(6767);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(6768);
                        this.match(MySQLParser.QUERY_SYMBOL);
                        this.setState(6769);
                        this.match(MySQLParser.EXPANSION_SYMBOL);
                        }
                    }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6772);
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.setState(6773);
                    this.match(MySQLParser.QUERY_SYMBOL);
                    this.setState(6774);
                    this.match(MySQLParser.EXPANSION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public runtimeFunctionCall(): RuntimeFunctionCallContext {
        let localctx = new RuntimeFunctionCallContext(this.getContext(), this.getState());
        this.enterRule(localctx, 960, MySQLParser.RULE_runtimeFunctionCall);
        let _la: number;
        try {
            this.setState(7060);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 832, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(6777);
                    this.match(MySQLParser.CHAR_SYMBOL);
                    this.setState(6778);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6779);
                    this.exprList();
                    this.setState(6782);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 630) {
                        {
                        this.setState(6780);
                        this.match(MySQLParser.USING_SYMBOL);
                        this.setState(6781);
                        this.charsetName();
                        }
                    }

                    this.setState(6784);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(6786);
                    this.match(MySQLParser.CURRENT_USER_SYMBOL);
                    this.setState(6788);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 815, this.getContext())) {
                        case 1:
                            {
                            this.setState(6787);
                            this.parentheses();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(6790);
                    this.match(MySQLParser.DATE_SYMBOL);
                    this.setState(6791);
                    this.exprWithParentheses();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(6792);
                    this.match(MySQLParser.DAY_SYMBOL);
                    this.setState(6793);
                    this.exprWithParentheses();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(6794);
                    this.match(MySQLParser.HOUR_SYMBOL);
                    this.setState(6795);
                    this.exprWithParentheses();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(6796);
                    this.match(MySQLParser.INSERT_SYMBOL);
                    this.setState(6797);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6798);
                    this.expr(0);
                    this.setState(6799);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6800);
                    this.expr(0);
                    this.setState(6801);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6802);
                    this.expr(0);
                    this.setState(6803);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6804);
                    this.expr(0);
                    this.setState(6805);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(6807);
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.setState(6808);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6809);
                    this.expr(0);
                    this.setState(6812);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    do {
                        {
                        {
                        this.setState(6810);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6811);
                        this.expr(0);
                        }
                        }
                        this.setState(6814);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    } while (_la === 29);
                    this.setState(6816);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(6818);
                    this.match(MySQLParser.JSON_VALUE_SYMBOL);
                    this.setState(6819);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6820);
                    this.simpleExpr(0);
                    this.setState(6821);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6822);
                    this.textLiteral();
                    this.setState(6824);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 753) {
                        {
                        this.setState(6823);
                        this.returningType();
                        }
                    }

                    this.setState(6826);
                    this.onEmptyOrError();
                    this.setState(6827);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(6829);
                    this.match(MySQLParser.LEFT_SYMBOL);
                    this.setState(6830);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6831);
                    this.expr(0);
                    this.setState(6832);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6833);
                    this.expr(0);
                    this.setState(6834);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(6836);
                    this.match(MySQLParser.MINUTE_SYMBOL);
                    this.setState(6837);
                    this.exprWithParentheses();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(6838);
                    this.match(MySQLParser.MONTH_SYMBOL);
                    this.setState(6839);
                    this.exprWithParentheses();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(6840);
                    this.match(MySQLParser.RIGHT_SYMBOL);
                    this.setState(6841);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6842);
                    this.expr(0);
                    this.setState(6843);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6844);
                    this.expr(0);
                    this.setState(6845);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(6847);
                    this.match(MySQLParser.SECOND_SYMBOL);
                    this.setState(6848);
                    this.exprWithParentheses();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(6849);
                    this.match(MySQLParser.TIME_SYMBOL);
                    this.setState(6850);
                    this.exprWithParentheses();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(6851);
                    this.match(MySQLParser.TIMESTAMP_SYMBOL);
                    this.setState(6852);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6853);
                    this.expr(0);
                    this.setState(6856);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 29) {
                        {
                        this.setState(6854);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6855);
                        this.expr(0);
                        }
                    }

                    this.setState(6858);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(6860);
                    this.trimFunction();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(6861);
                    this.userFunction();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(6862);
                    this.match(MySQLParser.VALUES_SYMBOL);
                    this.setState(6863);
                    this.exprWithParentheses();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(6864);
                    this.match(MySQLParser.YEAR_SYMBOL);
                    this.setState(6865);
                    this.exprWithParentheses();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(6866);
                    _la = this.input().LA(1);
                    if(!(_la === 52 || _la === 568)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6867);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6868);
                    this.expr(0);
                    this.setState(6869);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6875);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 819, this.getContext())) {
                        case 1:
                            {
                            this.setState(6870);
                            this.expr(0);
                            }
                            break;
                        case 2:
                            {
                            this.setState(6871);
                            this.match(MySQLParser.INTERVAL_SYMBOL);
                            this.setState(6872);
                            this.expr(0);
                            this.setState(6873);
                            this.interval();
                            }
                            break;
                    }
                    this.setState(6877);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(6879);
                    this.match(MySQLParser.CURDATE_SYMBOL);
                    this.setState(6881);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 820, this.getContext())) {
                        case 1:
                            {
                            this.setState(6880);
                            this.parentheses();
                            }
                            break;
                    }
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(6883);
                    this.match(MySQLParser.CURTIME_SYMBOL);
                    this.setState(6885);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 821, this.getContext())) {
                        case 1:
                            {
                            this.setState(6884);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(6887);
                    _la = this.input().LA(1);
                    if(!(_la === 155 || _la === 156)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6888);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6889);
                    this.expr(0);
                    this.setState(6890);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6891);
                    this.match(MySQLParser.INTERVAL_SYMBOL);
                    this.setState(6892);
                    this.expr(0);
                    this.setState(6893);
                    this.interval();
                    this.setState(6894);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(6896);
                    this.match(MySQLParser.EXTRACT_SYMBOL);
                    this.setState(6897);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6898);
                    this.interval();
                    this.setState(6899);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(6900);
                    this.expr(0);
                    this.setState(6901);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(6903);
                    this.match(MySQLParser.GET_FORMAT_SYMBOL);
                    this.setState(6904);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6905);
                    this.dateTimeTtype();
                    this.setState(6906);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6907);
                    this.expr(0);
                    this.setState(6908);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(6910);
                    if (!(this.serverVersion >= 80032)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80032");
                    }
                    this.setState(6911);
                    this.match(MySQLParser.LOG_SYMBOL);
                    this.setState(6912);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6913);
                    this.expr(0);
                    this.setState(6916);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 29) {
                        {
                        this.setState(6914);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6915);
                        this.expr(0);
                        }
                    }

                    this.setState(6918);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(6920);
                    this.match(MySQLParser.NOW_SYMBOL);
                    this.setState(6922);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 823, this.getContext())) {
                        case 1:
                            {
                            this.setState(6921);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(6924);
                    this.match(MySQLParser.POSITION_SYMBOL);
                    this.setState(6925);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6926);
                    this.bitExpr(0);
                    this.setState(6927);
                    this.match(MySQLParser.IN_SYMBOL);
                    this.setState(6928);
                    this.expr(0);
                    this.setState(6929);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(6931);
                    this.substringFunction();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                    this.setState(6932);
                    this.match(MySQLParser.SYSDATE_SYMBOL);
                    this.setState(6934);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 824, this.getContext())) {
                        case 1:
                            {
                            this.setState(6933);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                    this.setState(6936);
                    _la = this.input().LA(1);
                    if(!(_la === 593 || _la === 594)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(6937);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6938);
                    this.intervalTimeStamp();
                    this.setState(6939);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6940);
                    this.expr(0);
                    this.setState(6941);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6942);
                    this.expr(0);
                    this.setState(6943);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                    this.setState(6945);
                    this.match(MySQLParser.UTC_DATE_SYMBOL);
                    this.setState(6947);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 825, this.getContext())) {
                        case 1:
                            {
                            this.setState(6946);
                            this.parentheses();
                            }
                            break;
                    }
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                    this.setState(6949);
                    this.match(MySQLParser.UTC_TIME_SYMBOL);
                    this.setState(6951);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 826, this.getContext())) {
                        case 1:
                            {
                            this.setState(6950);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                    this.setState(6953);
                    this.match(MySQLParser.UTC_TIMESTAMP_SYMBOL);
                    this.setState(6955);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 827, this.getContext())) {
                        case 1:
                            {
                            this.setState(6954);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 35:
                    this.enterOuterAlt(localctx, 35);
                    {
                    this.setState(6957);
                    this.match(MySQLParser.ASCII_SYMBOL);
                    this.setState(6958);
                    this.exprWithParentheses();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(localctx, 36);
                    {
                    this.setState(6959);
                    this.match(MySQLParser.CHARSET_SYMBOL);
                    this.setState(6960);
                    this.exprWithParentheses();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(localctx, 37);
                    {
                    this.setState(6961);
                    this.match(MySQLParser.COALESCE_SYMBOL);
                    this.setState(6962);
                    this.exprListWithParentheses();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(localctx, 38);
                    {
                    this.setState(6963);
                    this.match(MySQLParser.COLLATION_SYMBOL);
                    this.setState(6964);
                    this.exprWithParentheses();
                    }
                    break;
                case 39:
                    this.enterOuterAlt(localctx, 39);
                    {
                    this.setState(6965);
                    this.match(MySQLParser.DATABASE_SYMBOL);
                    this.setState(6966);
                    this.parentheses();
                    }
                    break;
                case 40:
                    this.enterOuterAlt(localctx, 40);
                    {
                    this.setState(6967);
                    this.match(MySQLParser.IF_SYMBOL);
                    this.setState(6968);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6969);
                    this.expr(0);
                    this.setState(6970);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6971);
                    this.expr(0);
                    this.setState(6972);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6973);
                    this.expr(0);
                    this.setState(6974);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 41:
                    this.enterOuterAlt(localctx, 41);
                    {
                    this.setState(6976);
                    this.match(MySQLParser.FORMAT_SYMBOL);
                    this.setState(6977);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6978);
                    this.expr(0);
                    this.setState(6979);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6980);
                    this.expr(0);
                    this.setState(6983);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 29) {
                        {
                        this.setState(6981);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6982);
                        this.expr(0);
                        }
                    }

                    this.setState(6985);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 42:
                    this.enterOuterAlt(localctx, 42);
                    {
                    this.setState(6987);
                    this.match(MySQLParser.MICROSECOND_SYMBOL);
                    this.setState(6988);
                    this.exprWithParentheses();
                    }
                    break;
                case 43:
                    this.enterOuterAlt(localctx, 43);
                    {
                    this.setState(6989);
                    this.match(MySQLParser.MOD_SYMBOL);
                    this.setState(6990);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(6991);
                    this.expr(0);
                    this.setState(6992);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(6993);
                    this.expr(0);
                    this.setState(6994);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 44:
                    this.enterOuterAlt(localctx, 44);
                    {
                    this.setState(6996);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(6997);
                    this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.setState(6998);
                    this.exprWithParentheses();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(localctx, 45);
                    {
                    this.setState(6999);
                    this.match(MySQLParser.QUARTER_SYMBOL);
                    this.setState(7000);
                    this.exprWithParentheses();
                    }
                    break;
                case 46:
                    this.enterOuterAlt(localctx, 46);
                    {
                    this.setState(7001);
                    this.match(MySQLParser.REPEAT_SYMBOL);
                    this.setState(7002);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(7003);
                    this.expr(0);
                    this.setState(7004);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7005);
                    this.expr(0);
                    this.setState(7006);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 47:
                    this.enterOuterAlt(localctx, 47);
                    {
                    this.setState(7008);
                    this.match(MySQLParser.REPLACE_SYMBOL);
                    this.setState(7009);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(7010);
                    this.expr(0);
                    this.setState(7011);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7012);
                    this.expr(0);
                    this.setState(7013);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7014);
                    this.expr(0);
                    this.setState(7015);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 48:
                    this.enterOuterAlt(localctx, 48);
                    {
                    this.setState(7017);
                    this.match(MySQLParser.REVERSE_SYMBOL);
                    this.setState(7018);
                    this.exprWithParentheses();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(localctx, 49);
                    {
                    this.setState(7019);
                    this.match(MySQLParser.ROW_COUNT_SYMBOL);
                    this.setState(7020);
                    this.parentheses();
                    }
                    break;
                case 50:
                    this.enterOuterAlt(localctx, 50);
                    {
                    this.setState(7021);
                    this.match(MySQLParser.TRUNCATE_SYMBOL);
                    this.setState(7022);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(7023);
                    this.expr(0);
                    this.setState(7024);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7025);
                    this.expr(0);
                    this.setState(7026);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 51:
                    this.enterOuterAlt(localctx, 51);
                    {
                    this.setState(7028);
                    this.match(MySQLParser.WEEK_SYMBOL);
                    this.setState(7029);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(7030);
                    this.expr(0);
                    this.setState(7033);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 29) {
                        {
                        this.setState(7031);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(7032);
                        this.expr(0);
                        }
                    }

                    this.setState(7035);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 52:
                    this.enterOuterAlt(localctx, 52);
                    {
                    this.setState(7037);
                    this.match(MySQLParser.WEIGHT_STRING_SYMBOL);
                    this.setState(7038);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(7039);
                    this.expr(0);
                    this.setState(7055);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 831, this.getContext())) {
                        case 1:
                            {
                            this.setState(7043);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 63) {
                                {
                                this.setState(7040);
                                this.match(MySQLParser.AS_SYMBOL);
                                this.setState(7041);
                                this.match(MySQLParser.CHAR_SYMBOL);
                                this.setState(7042);
                                this.wsNumCodepoints();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(7045);
                            this.match(MySQLParser.AS_SYMBOL);
                            this.setState(7046);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            this.setState(7047);
                            this.wsNumCodepoints();
                            }
                            break;
                        case 3:
                            {
                            this.setState(7048);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(7049);
                            this.ulong_number();
                            this.setState(7050);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(7051);
                            this.ulong_number();
                            this.setState(7052);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(7053);
                            this.ulong_number();
                            }
                            break;
                    }
                    this.setState(7057);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 53:
                    this.enterOuterAlt(localctx, 53);
                    {
                    this.setState(7059);
                    this.geometryFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public returningType(): ReturningTypeContext {
        let localctx = new ReturningTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 962, MySQLParser.RULE_returningType);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7062);
            this.match(MySQLParser.RETURNING_SYMBOL);
            this.setState(7063);
            this.castType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public geometryFunction(): GeometryFunctionContext {
        let localctx = new GeometryFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 964, MySQLParser.RULE_geometryFunction);
        try {
            this.setState(7088);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.GEOMETRYCOLLECTION_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7065);
                this.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL);
                this.setState(7066);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(7068);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 833, this.getContext())) {
                    case 1:
                        {
                        this.setState(7067);
                        this.exprList();
                        }
                        break;
                }
                this.setState(7070);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.LINESTRING_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7071);
                this.match(MySQLParser.LINESTRING_SYMBOL);
                this.setState(7072);
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTILINESTRING_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(7073);
                this.match(MySQLParser.MULTILINESTRING_SYMBOL);
                this.setState(7074);
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTIPOINT_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(7075);
                this.match(MySQLParser.MULTIPOINT_SYMBOL);
                this.setState(7076);
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.MULTIPOLYGON_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(7077);
                this.match(MySQLParser.MULTIPOLYGON_SYMBOL);
                this.setState(7078);
                this.exprListWithParentheses();
                }
                break;
            case MySQLParser.POINT_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(7079);
                this.match(MySQLParser.POINT_SYMBOL);
                this.setState(7080);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(7081);
                this.expr(0);
                this.setState(7082);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7083);
                this.expr(0);
                this.setState(7084);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.POLYGON_SYMBOL:
                this.enterOuterAlt(localctx, 7);
                {
                this.setState(7086);
                this.match(MySQLParser.POLYGON_SYMBOL);
                this.setState(7087);
                this.exprListWithParentheses();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public timeFunctionParameters(): TimeFunctionParametersContext {
        let localctx = new TimeFunctionParametersContext(this.getContext(), this.getState());
        this.enterRule(localctx, 966, MySQLParser.RULE_timeFunctionParameters);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7090);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7092);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 3) {
                {
                this.setState(7091);
                this.fractionalPrecision();
                }
            }

            this.setState(7094);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fractionalPrecision(): FractionalPrecisionContext {
        let localctx = new FractionalPrecisionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 968, MySQLParser.RULE_fractionalPrecision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7096);
            this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public weightStringLevels(): WeightStringLevelsContext {
        let localctx = new WeightStringLevelsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 970, MySQLParser.RULE_weightStringLevels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7098);
            this.match(MySQLParser.LEVEL_SYMBOL);
            this.setState(7111);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 837, this.getContext())) {
                case 1:
                    {
                    this.setState(7099);
                    this.real_ulong_number();
                    this.setState(7100);
                    this.match(MySQLParser.MINUS_OPERATOR);
                    this.setState(7101);
                    this.real_ulong_number();
                    }
                    break;
                case 2:
                    {
                    this.setState(7103);
                    this.weightStringLevelListItem();
                    this.setState(7108);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(7104);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(7105);
                        this.weightStringLevelListItem();
                        }
                        }
                        this.setState(7110);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public weightStringLevelListItem(): WeightStringLevelListItemContext {
        let localctx = new WeightStringLevelListItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 972, MySQLParser.RULE_weightStringLevelListItem);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7113);
            this.real_ulong_number();
            this.setState(7119);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ASC_SYMBOL:
            case MySQLParser.DESC_SYMBOL:
                {
                this.setState(7114);
                _la = this.input().LA(1);
                if(!(_la === 64 || _la === 172)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(7116);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 493) {
                    {
                    this.setState(7115);
                    this.match(MySQLParser.REVERSE_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.REVERSE_SYMBOL:
                {
                this.setState(7118);
                this.match(MySQLParser.REVERSE_SYMBOL);
                }
                break;
            case MySQLParser.EOF:
            case MySQLParser.COMMA_SYMBOL:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dateTimeTtype(): DateTimeTtypeContext {
        let localctx = new DateTimeTtypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 974, MySQLParser.RULE_dateTimeTtype);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7121);
            _la = this.input().LA(1);
            if(!(_la === 154 || _la === 157 || _la === 592 || _la === 595)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public trimFunction(): TrimFunctionContext {
        let localctx = new TrimFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 976, MySQLParser.RULE_trimFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7123);
            this.match(MySQLParser.TRIM_SYMBOL);
            this.setState(7124);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7148);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 844, this.getContext())) {
                case 1:
                    {
                    this.setState(7125);
                    this.expr(0);
                    this.setState(7128);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 235) {
                        {
                        this.setState(7126);
                        this.match(MySQLParser.FROM_SYMBOL);
                        this.setState(7127);
                        this.expr(0);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.setState(7130);
                    this.match(MySQLParser.LEADING_SYMBOL);
                    this.setState(7132);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 841, this.getContext())) {
                        case 1:
                            {
                            this.setState(7131);
                            this.expr(0);
                            }
                            break;
                    }
                    this.setState(7134);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(7135);
                    this.expr(0);
                    }
                    break;
                case 3:
                    {
                    this.setState(7136);
                    this.match(MySQLParser.TRAILING_SYMBOL);
                    this.setState(7138);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 842, this.getContext())) {
                        case 1:
                            {
                            this.setState(7137);
                            this.expr(0);
                            }
                            break;
                    }
                    this.setState(7140);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(7141);
                    this.expr(0);
                    }
                    break;
                case 4:
                    {
                    this.setState(7142);
                    this.match(MySQLParser.BOTH_SYMBOL);
                    this.setState(7144);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 843, this.getContext())) {
                        case 1:
                            {
                            this.setState(7143);
                            this.expr(0);
                            }
                            break;
                    }
                    this.setState(7146);
                    this.match(MySQLParser.FROM_SYMBOL);
                    this.setState(7147);
                    this.expr(0);
                    }
                    break;
            }
            this.setState(7150);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public substringFunction(): SubstringFunctionContext {
        let localctx = new SubstringFunctionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 978, MySQLParser.RULE_substringFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7152);
            this.match(MySQLParser.SUBSTRING_SYMBOL);
            this.setState(7153);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7154);
            this.expr(0);
            this.setState(7167);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.COMMA_SYMBOL:
                {
                this.setState(7155);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7156);
                this.expr(0);
                this.setState(7159);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 29) {
                    {
                    this.setState(7157);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7158);
                    this.expr(0);
                    }
                }

                }
                break;
            case MySQLParser.FROM_SYMBOL:
                {
                this.setState(7161);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(7162);
                this.expr(0);
                this.setState(7165);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232) {
                    {
                    this.setState(7163);
                    this.match(MySQLParser.FOR_SYMBOL);
                    this.setState(7164);
                    this.expr(0);
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(7169);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionCall(): FunctionCallContext {
        let localctx = new FunctionCallContext(this.getContext(), this.getState());
        this.enterRule(localctx, 980, MySQLParser.RULE_functionCall);
        try {
            this.setState(7185);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 850, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7171);
                    this.pureIdentifier();
                    this.setState(7172);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(7174);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 848, this.getContext())) {
                        case 1:
                            {
                            this.setState(7173);
                            this.udfExprList();
                            }
                            break;
                    }
                    this.setState(7176);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7178);
                    this.qualifiedIdentifier();
                    this.setState(7179);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(7181);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 849, this.getContext())) {
                        case 1:
                            {
                            this.setState(7180);
                            this.exprList();
                            }
                            break;
                    }
                    this.setState(7183);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public udfExprList(): UdfExprListContext {
        let localctx = new UdfExprListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 982, MySQLParser.RULE_udfExprList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7187);
            this.udfExpr();
            this.setState(7192);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(7188);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7189);
                this.udfExpr();
                }
                }
                this.setState(7194);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public udfExpr(): UdfExprContext {
        let localctx = new UdfExprContext(this.getContext(), this.getState());
        this.enterRule(localctx, 984, MySQLParser.RULE_udfExpr);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7195);
            this.expr(0);
            this.setState(7197);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 852, this.getContext())) {
                case 1:
                    {
                    this.setState(7196);
                    this.selectAlias();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userVariable(): UserVariableContext {
        let localctx = new UserVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 986, MySQLParser.RULE_userVariable);
        try {
            this.setState(7202);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.AT_SIGN_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7199);
                this.match(MySQLParser.AT_SIGN_SYMBOL);
                this.setState(7200);
                this.textOrIdentifier();
                }
                break;
            case MySQLParser.AT_TEXT_SUFFIX:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7201);
                this.match(MySQLParser.AT_TEXT_SUFFIX);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public inExpressionUserVariableAssignment(): InExpressionUserVariableAssignmentContext {
        let localctx = new InExpressionUserVariableAssignmentContext(this.getContext(), this.getState());
        this.enterRule(localctx, 988, MySQLParser.RULE_inExpressionUserVariableAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7204);
            this.userVariable();
            this.setState(7205);
            this.match(MySQLParser.ASSIGN_OPERATOR);
            this.setState(7206);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext {
        let localctx = new RvalueSystemOrUserVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 990, MySQLParser.RULE_rvalueSystemOrUserVariable);
        try {
            this.setState(7214);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.AT_SIGN_SYMBOL:
            case MySQLParser.AT_TEXT_SUFFIX:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7208);
                this.userVariable();
                }
                break;
            case MySQLParser.AT_AT_SIGN_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7209);
                this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                this.setState(7211);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 854, this.getContext())) {
                    case 1:
                        {
                        this.setState(7210);
                        this.rvalueSystemVariableType();
                        }
                        break;
                }
                this.setState(7213);
                this.rvalueSystemVariable();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lvalueVariable(): LvalueVariableContext {
        let localctx = new LvalueVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 992, MySQLParser.RULE_lvalueVariable);
        let _la: number;
        try {
            this.setState(7229);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 859, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7225);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 858, this.getContext())) {
                        case 1:
                            {
                            this.setState(7216);
                            this.identifier();
                            this.setState(7218);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 28) {
                                {
                                this.setState(7217);
                                this.dotIdentifier();
                                }
                            }

                            }
                            break;
                        case 2:
                            {
                            this.setState(7220);
                            if (!(this.serverVersion >= 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80017");
                            }
                            this.setState(7221);
                            this.lValueIdentifier();
                            this.setState(7223);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 28) {
                                {
                                this.setState(7222);
                                this.dotIdentifier();
                                }
                            }

                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7227);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(7228);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public rvalueSystemVariable(): RvalueSystemVariableContext {
        let localctx = new RvalueSystemVariableContext(this.getContext(), this.getState());
        this.enterRule(localctx, 994, MySQLParser.RULE_rvalueSystemVariable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7231);
            this.textOrIdentifier();
            this.setState(7233);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 860, this.getContext())) {
                case 1:
                    {
                    this.setState(7232);
                    this.dotIdentifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public whenExpression(): WhenExpressionContext {
        let localctx = new WhenExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 996, MySQLParser.RULE_whenExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7235);
            this.match(MySQLParser.WHEN_SYMBOL);
            this.setState(7236);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public thenExpression(): ThenExpressionContext {
        let localctx = new ThenExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 998, MySQLParser.RULE_thenExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7238);
            this.match(MySQLParser.THEN_SYMBOL);
            this.setState(7239);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public elseExpression(): ElseExpressionContext {
        let localctx = new ElseExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1000, MySQLParser.RULE_elseExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7241);
            this.match(MySQLParser.ELSE_SYMBOL);
            this.setState(7242);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public castType(): CastTypeContext {
        let localctx = new CastTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1002, MySQLParser.RULE_castType);
        let _la: number;
        try {
            this.setState(7292);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 871, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7244);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(7246);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 861, this.getContext())) {
                        case 1:
                            {
                            this.setState(7245);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7248);
                    this.match(MySQLParser.CHAR_SYMBOL);
                    this.setState(7250);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 862, this.getContext())) {
                        case 1:
                            {
                            this.setState(7249);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(7253);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 863, this.getContext())) {
                        case 1:
                            {
                            this.setState(7252);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7255);
                    this.nchar();
                    this.setState(7257);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 864, this.getContext())) {
                        case 1:
                            {
                            this.setState(7256);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7259);
                    this.match(MySQLParser.SIGNED_SYMBOL);
                    this.setState(7261);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 865, this.getContext())) {
                        case 1:
                            {
                            this.setState(7260);
                            this.match(MySQLParser.INT_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7263);
                    this.match(MySQLParser.UNSIGNED_SYMBOL);
                    this.setState(7265);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 866, this.getContext())) {
                        case 1:
                            {
                            this.setState(7264);
                            this.match(MySQLParser.INT_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(7267);
                    this.match(MySQLParser.DATE_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(7268);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7269);
                    this.match(MySQLParser.YEAR_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(7270);
                    this.match(MySQLParser.TIME_SYMBOL);
                    this.setState(7272);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 867, this.getContext())) {
                        case 1:
                            {
                            this.setState(7271);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(7274);
                    this.match(MySQLParser.DATETIME_SYMBOL);
                    this.setState(7276);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 868, this.getContext())) {
                        case 1:
                            {
                            this.setState(7275);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(7278);
                    this.match(MySQLParser.DECIMAL_SYMBOL);
                    this.setState(7280);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 869, this.getContext())) {
                        case 1:
                            {
                            this.setState(7279);
                            this.floatOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(7282);
                    this.match(MySQLParser.JSON_SYMBOL);
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(7283);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(7284);
                    this.realType();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(7285);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(7286);
                    this.match(MySQLParser.FLOAT_SYMBOL);
                    this.setState(7288);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 870, this.getContext())) {
                        case 1:
                            {
                            this.setState(7287);
                            this.standardFloatOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(7290);
                    if (!(this.serverVersion >= 80027)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80027");
                    }
                    this.setState(7291);
                    _la = this.input().LA(1);
                    if(!(_la === 243 || _la === 309 || ((((_la - 374)) & ~0x1F) === 0 && ((1 << (_la - 374)) & 7) !== 0) || _la === 429 || _la === 430)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public exprList(): ExprListContext {
        let localctx = new ExprListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1004, MySQLParser.RULE_exprList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7294);
            this.expr(0);
            this.setState(7299);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(7295);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7296);
                this.expr(0);
                }
                }
                this.setState(7301);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public charset(): CharsetContext {
        let localctx = new CharsetContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1006, MySQLParser.RULE_charset);
        try {
            this.setState(7305);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CHAR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7302);
                this.match(MySQLParser.CHAR_SYMBOL);
                this.setState(7303);
                this.match(MySQLParser.SET_SYMBOL);
                }
                break;
            case MySQLParser.CHARSET_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7304);
                this.match(MySQLParser.CHARSET_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public notRule(): NotRuleContext {
        let localctx = new NotRuleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1008, MySQLParser.RULE_notRule);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7307);
            _la = this.input().LA(1);
            if(!(_la === 1 || _la === 390)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public not2Rule(): Not2RuleContext {
        let localctx = new Not2RuleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1010, MySQLParser.RULE_not2Rule);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7309);
            _la = this.input().LA(1);
            if(!(_la === 1 || _la === 19)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public interval(): IntervalContext {
        let localctx = new IntervalContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1012, MySQLParser.RULE_interval);
        let _la: number;
        try {
            this.setState(7313);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.DAY_SYMBOL:
            case MySQLParser.HOUR_SYMBOL:
            case MySQLParser.MICROSECOND_SYMBOL:
            case MySQLParser.MINUTE_SYMBOL:
            case MySQLParser.MONTH_SYMBOL:
            case MySQLParser.QUARTER_SYMBOL:
            case MySQLParser.SECOND_SYMBOL:
            case MySQLParser.WEEK_SYMBOL:
            case MySQLParser.YEAR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7311);
                this.intervalTimeStamp();
                }
                break;
            case MySQLParser.DAY_HOUR_SYMBOL:
            case MySQLParser.DAY_MICROSECOND_SYMBOL:
            case MySQLParser.DAY_MINUTE_SYMBOL:
            case MySQLParser.DAY_SECOND_SYMBOL:
            case MySQLParser.HOUR_MICROSECOND_SYMBOL:
            case MySQLParser.HOUR_MINUTE_SYMBOL:
            case MySQLParser.HOUR_SECOND_SYMBOL:
            case MySQLParser.MINUTE_MICROSECOND_SYMBOL:
            case MySQLParser.MINUTE_SECOND_SYMBOL:
            case MySQLParser.SECOND_MICROSECOND_SYMBOL:
            case MySQLParser.YEAR_MONTH_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7312);
                _la = this.input().LA(1);
                if(!(((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 7) !== 0) || _la === 364 || _la === 365 || _la === 508 || _la === 663)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public intervalTimeStamp(): IntervalTimeStampContext {
        let localctx = new IntervalTimeStampContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1014, MySQLParser.RULE_intervalTimeStamp);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7315);
            _la = this.input().LA(1);
            if(!(_la === 162 || _la === 261 || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 4129) !== 0) || _la === 447 || _la === 509 || _la === 648 || _la === 664)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext {
        let localctx = new ExprListWithParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1016, MySQLParser.RULE_exprListWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7317);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7318);
            this.exprList();
            this.setState(7319);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        let localctx = new ExprWithParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1018, MySQLParser.RULE_exprWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7321);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7322);
            this.expr(0);
            this.setState(7323);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
        let localctx = new SimpleExprWithParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1020, MySQLParser.RULE_simpleExprWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7325);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7326);
            this.simpleExpr(0);
            this.setState(7327);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public orderList(): OrderListContext {
        let localctx = new OrderListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1022, MySQLParser.RULE_orderList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7329);
            this.orderExpression();
            this.setState(7334);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 875, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(7330);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7331);
                    this.orderExpression();
                    }
                    }
                }
                this.setState(7336);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 875, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public orderExpression(): OrderExpressionContext {
        let localctx = new OrderExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1024, MySQLParser.RULE_orderExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7337);
            this.expr(0);
            this.setState(7339);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 876, this.getContext())) {
                case 1:
                    {
                    this.setState(7338);
                    this.direction();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupList(): GroupListContext {
        let localctx = new GroupListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1026, MySQLParser.RULE_groupList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7341);
            this.groupingExpression();
            this.setState(7346);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(7342);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7343);
                this.groupingExpression();
                }
                }
                this.setState(7348);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public groupingExpression(): GroupingExpressionContext {
        let localctx = new GroupingExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1028, MySQLParser.RULE_groupingExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7349);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public channel(): ChannelContext {
        let localctx = new ChannelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1030, MySQLParser.RULE_channel);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7351);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(7352);
            this.match(MySQLParser.CHANNEL_SYMBOL);
            this.setState(7353);
            this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public compoundStatement(): CompoundStatementContext {
        let localctx = new CompoundStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1032, MySQLParser.RULE_compoundStatement);
        try {
            this.setState(7368);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 878, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7355);
                    this.simpleStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7356);
                    this.returnStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7357);
                    this.ifStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7358);
                    this.caseStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7359);
                    this.labeledBlock();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(7360);
                    this.unlabeledBlock();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(7361);
                    this.labeledControl();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(7362);
                    this.unlabeledControl();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(7363);
                    this.leaveStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(7364);
                    this.iterateStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(7365);
                    this.cursorOpen();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(7366);
                    this.cursorFetch();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(7367);
                    this.cursorClose();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public returnStatement(): ReturnStatementContext {
        let localctx = new ReturnStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1034, MySQLParser.RULE_returnStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7370);
            this.match(MySQLParser.RETURN_SYMBOL);
            this.setState(7371);
            this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifStatement(): IfStatementContext {
        let localctx = new IfStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1036, MySQLParser.RULE_ifStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7373);
            this.match(MySQLParser.IF_SYMBOL);
            this.setState(7374);
            this.ifBody();
            this.setState(7375);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7376);
            this.match(MySQLParser.IF_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifBody(): IfBodyContext {
        let localctx = new IfBodyContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1038, MySQLParser.RULE_ifBody);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7378);
            this.expr(0);
            this.setState(7379);
            this.thenStatement();
            this.setState(7384);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ELSEIF_SYMBOL:
                {
                this.setState(7380);
                this.match(MySQLParser.ELSEIF_SYMBOL);
                this.setState(7381);
                this.ifBody();
                }
                break;
            case MySQLParser.ELSE_SYMBOL:
                {
                this.setState(7382);
                this.match(MySQLParser.ELSE_SYMBOL);
                this.setState(7383);
                this.compoundStatementList();
                }
                break;
            case MySQLParser.END_SYMBOL:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public thenStatement(): ThenStatementContext {
        let localctx = new ThenStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1040, MySQLParser.RULE_thenStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7386);
            this.match(MySQLParser.THEN_SYMBOL);
            this.setState(7387);
            this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public compoundStatementList(): CompoundStatementListContext {
        let localctx = new CompoundStatementListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1042, MySQLParser.RULE_compoundStatementList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7392);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(7389);
                            this.compoundStatement();
                            this.setState(7390);
                            this.match(MySQLParser.SEMICOLON_SYMBOL);
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(7394);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 880, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public caseStatement(): CaseStatementContext {
        let localctx = new CaseStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1044, MySQLParser.RULE_caseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7396);
            this.match(MySQLParser.CASE_SYMBOL);
            this.setState(7398);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 881, this.getContext())) {
                case 1:
                    {
                    this.setState(7397);
                    this.expr(0);
                    }
                    break;
            }
            this.setState(7403);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            do {
                {
                {
                this.setState(7400);
                this.whenExpression();
                this.setState(7401);
                this.thenStatement();
                }
                }
                this.setState(7405);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            } while (_la === 650);
            this.setState(7408);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 190) {
                {
                this.setState(7407);
                this.elseStatement();
                }
            }

            this.setState(7410);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7411);
            this.match(MySQLParser.CASE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public elseStatement(): ElseStatementContext {
        let localctx = new ElseStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1046, MySQLParser.RULE_elseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7413);
            this.match(MySQLParser.ELSE_SYMBOL);
            this.setState(7414);
            this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labeledBlock(): LabeledBlockContext {
        let localctx = new LabeledBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1048, MySQLParser.RULE_labeledBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7416);
            this.label();
            this.setState(7417);
            this.beginEndBlock();
            this.setState(7419);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 884, this.getContext())) {
                case 1:
                    {
                    this.setState(7418);
                    this.labelRef();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public unlabeledBlock(): UnlabeledBlockContext {
        let localctx = new UnlabeledBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1050, MySQLParser.RULE_unlabeledBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7421);
            this.beginEndBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public label(): LabelContext {
        let localctx = new LabelContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1052, MySQLParser.RULE_label);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7423);
            this.labelIdentifier();
            this.setState(7424);
            this.match(MySQLParser.COLON_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public beginEndBlock(): BeginEndBlockContext {
        let localctx = new BeginEndBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1054, MySQLParser.RULE_beginEndBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7426);
            this.match(MySQLParser.BEGIN_SYMBOL);
            this.setState(7428);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 885, this.getContext())) {
                case 1:
                    {
                    this.setState(7427);
                    this.spDeclarations();
                    }
                    break;
            }
            this.setState(7431);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 886, this.getContext())) {
                case 1:
                    {
                    this.setState(7430);
                    this.compoundStatementList();
                    }
                    break;
            }
            this.setState(7433);
            this.match(MySQLParser.END_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labeledControl(): LabeledControlContext {
        let localctx = new LabeledControlContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1056, MySQLParser.RULE_labeledControl);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7435);
            this.label();
            this.setState(7436);
            this.unlabeledControl();
            this.setState(7438);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 887, this.getContext())) {
                case 1:
                    {
                    this.setState(7437);
                    this.labelRef();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public unlabeledControl(): UnlabeledControlContext {
        let localctx = new UnlabeledControlContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1058, MySQLParser.RULE_unlabeledControl);
        try {
            this.setState(7443);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.LOOP_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7440);
                this.loopBlock();
                }
                break;
            case MySQLParser.WHILE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7441);
                this.whileDoBlock();
                }
                break;
            case MySQLParser.REPEAT_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(7442);
                this.repeatUntilBlock();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public loopBlock(): LoopBlockContext {
        let localctx = new LoopBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1060, MySQLParser.RULE_loopBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7445);
            this.match(MySQLParser.LOOP_SYMBOL);
            this.setState(7446);
            this.compoundStatementList();
            this.setState(7447);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7448);
            this.match(MySQLParser.LOOP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public whileDoBlock(): WhileDoBlockContext {
        let localctx = new WhileDoBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1062, MySQLParser.RULE_whileDoBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7450);
            this.match(MySQLParser.WHILE_SYMBOL);
            this.setState(7451);
            this.expr(0);
            this.setState(7452);
            this.match(MySQLParser.DO_SYMBOL);
            this.setState(7453);
            this.compoundStatementList();
            this.setState(7454);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7455);
            this.match(MySQLParser.WHILE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public repeatUntilBlock(): RepeatUntilBlockContext {
        let localctx = new RepeatUntilBlockContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1064, MySQLParser.RULE_repeatUntilBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7457);
            this.match(MySQLParser.REPEAT_SYMBOL);
            this.setState(7458);
            this.compoundStatementList();
            this.setState(7459);
            this.match(MySQLParser.UNTIL_SYMBOL);
            this.setState(7460);
            this.expr(0);
            this.setState(7461);
            this.match(MySQLParser.END_SYMBOL);
            this.setState(7462);
            this.match(MySQLParser.REPEAT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public spDeclarations(): SpDeclarationsContext {
        let localctx = new SpDeclarationsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1066, MySQLParser.RULE_spDeclarations);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7467);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(7464);
                            this.spDeclaration();
                            this.setState(7465);
                            this.match(MySQLParser.SEMICOLON_SYMBOL);
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(7469);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 889, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public spDeclaration(): SpDeclarationContext {
        let localctx = new SpDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1068, MySQLParser.RULE_spDeclaration);
        try {
            this.setState(7475);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 890, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7471);
                    this.variableDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7472);
                    this.conditionDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7473);
                    this.handlerDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7474);
                    this.cursorDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public variableDeclaration(): VariableDeclarationContext {
        let localctx = new VariableDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1070, MySQLParser.RULE_variableDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7477);
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.setState(7478);
            this.identifierList();
            this.setState(7479);
            this.dataType();
            this.setState(7481);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 112) {
                {
                this.setState(7480);
                this.collate();
                }
            }

            this.setState(7485);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 166) {
                {
                this.setState(7483);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.setState(7484);
                this.expr(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public conditionDeclaration(): ConditionDeclarationContext {
        let localctx = new ConditionDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1072, MySQLParser.RULE_conditionDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7487);
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.setState(7488);
            this.identifier();
            this.setState(7489);
            this.match(MySQLParser.CONDITION_SYMBOL);
            this.setState(7490);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(7491);
            this.spCondition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public spCondition(): SpConditionContext {
        let localctx = new SpConditionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1074, MySQLParser.RULE_spCondition);
        try {
            this.setState(7495);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.HEX_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7493);
                this.ulong_number();
                }
                break;
            case MySQLParser.SQLSTATE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7494);
                this.sqlstate();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sqlstate(): SqlstateContext {
        let localctx = new SqlstateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1076, MySQLParser.RULE_sqlstate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7497);
            this.match(MySQLParser.SQLSTATE_SYMBOL);
            this.setState(7499);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 894, this.getContext())) {
                case 1:
                    {
                    this.setState(7498);
                    this.match(MySQLParser.VALUE_SYMBOL);
                    }
                    break;
            }
            this.setState(7501);
            this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public handlerDeclaration(): HandlerDeclarationContext {
        let localctx = new HandlerDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1078, MySQLParser.RULE_handlerDeclaration);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7503);
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.setState(7504);
            _la = this.input().LA(1);
            if(!(_la === 135 || _la === 210 || _la === 614)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(7505);
            this.match(MySQLParser.HANDLER_SYMBOL);
            this.setState(7506);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(7507);
            this.handlerCondition();
            this.setState(7512);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 895, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(7508);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7509);
                    this.handlerCondition();
                    }
                    }
                }
                this.setState(7514);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 895, this.getContext());
            }
            this.setState(7515);
            this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public handlerCondition(): HandlerConditionContext {
        let localctx = new HandlerConditionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1080, MySQLParser.RULE_handlerCondition);
        try {
            this.setState(7524);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 896, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7517);
                    this.spCondition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7518);
                    this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7519);
                    this.match(MySQLParser.SQLWARNING_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7520);
                    this.notRule();
                    this.setState(7521);
                    this.match(MySQLParser.FOUND_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7523);
                    this.match(MySQLParser.SQLEXCEPTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cursorDeclaration(): CursorDeclarationContext {
        let localctx = new CursorDeclarationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1082, MySQLParser.RULE_cursorDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7526);
            this.match(MySQLParser.DECLARE_SYMBOL);
            this.setState(7527);
            this.identifier();
            this.setState(7528);
            this.match(MySQLParser.CURSOR_SYMBOL);
            this.setState(7529);
            this.match(MySQLParser.FOR_SYMBOL);
            this.setState(7530);
            this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public iterateStatement(): IterateStatementContext {
        let localctx = new IterateStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1084, MySQLParser.RULE_iterateStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7532);
            this.match(MySQLParser.ITERATE_SYMBOL);
            this.setState(7533);
            this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public leaveStatement(): LeaveStatementContext {
        let localctx = new LeaveStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1086, MySQLParser.RULE_leaveStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7535);
            this.match(MySQLParser.LEAVE_SYMBOL);
            this.setState(7536);
            this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public getDiagnosticsStatement(): GetDiagnosticsStatementContext {
        let localctx = new GetDiagnosticsStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1088, MySQLParser.RULE_getDiagnosticsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7538);
            this.match(MySQLParser.GET_SYMBOL);
            this.setState(7540);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 143 || _la === 550) {
                {
                this.setState(7539);
                _la = this.input().LA(1);
                if(!(_la === 143 || _la === 550)) {
                this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(7542);
            this.match(MySQLParser.DIAGNOSTICS_SYMBOL);
            this.setState(7561);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 900, this.getContext())) {
                case 1:
                    {
                    this.setState(7543);
                    this.statementInformationItem();
                    this.setState(7548);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(7544);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(7545);
                        this.statementInformationItem();
                        }
                        }
                        this.setState(7550);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(7551);
                    this.match(MySQLParser.CONDITION_SYMBOL);
                    this.setState(7552);
                    this.signalAllowedExpr();
                    this.setState(7553);
                    this.conditionInformationItem();
                    this.setState(7558);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(7554);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(7555);
                        this.conditionInformationItem();
                        }
                        }
                        this.setState(7560);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signalAllowedExpr(): SignalAllowedExprContext {
        let localctx = new SignalAllowedExprContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1090, MySQLParser.RULE_signalAllowedExpr);
        try {
            this.setState(7566);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 901, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7563);
                    this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7564);
                    this.rvalueSystemOrUserVariable();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7565);
                    this.qualifiedIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public statementInformationItem(): StatementInformationItemContext {
        let localctx = new StatementInformationItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1092, MySQLParser.RULE_statementInformationItem);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7570);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 902, this.getContext())) {
                case 1:
                    {
                    this.setState(7568);
                    this.userVariable();
                    }
                    break;
                case 2:
                    {
                    this.setState(7569);
                    this.identifier();
                    }
                    break;
            }
            this.setState(7572);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(7573);
            _la = this.input().LA(1);
            if(!(_la === 396 || _la === 501)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public conditionInformationItem(): ConditionInformationItemContext {
        let localctx = new ConditionInformationItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1094, MySQLParser.RULE_conditionInformationItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7577);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 903, this.getContext())) {
                case 1:
                    {
                    this.setState(7575);
                    this.userVariable();
                    }
                    break;
                case 2:
                    {
                    this.setState(7576);
                    this.identifier();
                    }
                    break;
            }
            this.setState(7579);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(7582);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.CATALOG_NAME_SYMBOL:
            case MySQLParser.CLASS_ORIGIN_SYMBOL:
            case MySQLParser.COLUMN_NAME_SYMBOL:
            case MySQLParser.CONSTRAINT_CATALOG_SYMBOL:
            case MySQLParser.CONSTRAINT_NAME_SYMBOL:
            case MySQLParser.CONSTRAINT_SCHEMA_SYMBOL:
            case MySQLParser.CURSOR_NAME_SYMBOL:
            case MySQLParser.MESSAGE_TEXT_SYMBOL:
            case MySQLParser.MYSQL_ERRNO_SYMBOL:
            case MySQLParser.SCHEMA_NAME_SYMBOL:
            case MySQLParser.SUBCLASS_ORIGIN_SYMBOL:
            case MySQLParser.TABLE_NAME_SYMBOL:
                {
                this.setState(7580);
                this.signalInformationItemName();
                }
                break;
            case MySQLParser.RETURNED_SQLSTATE_SYMBOL:
                {
                this.setState(7581);
                this.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signalInformationItemName(): SignalInformationItemNameContext {
        let localctx = new SignalInformationItemNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1096, MySQLParser.RULE_signalInformationItemName);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7584);
            _la = this.input().LA(1);
            if(!(((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 525313) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 262151) !== 0) || _la === 360 || _la === 378 || _la === 507 || _la === 567 || _la === 585)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signalStatement(): SignalStatementContext {
        let localctx = new SignalStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1098, MySQLParser.RULE_signalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7586);
            this.match(MySQLParser.SIGNAL_SYMBOL);
            this.setState(7589);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 905, this.getContext())) {
                case 1:
                    {
                    this.setState(7587);
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.setState(7588);
                    this.sqlstate();
                    }
                    break;
            }
            this.setState(7600);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 519) {
                {
                this.setState(7591);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(7592);
                this.signalInformationItem();
                this.setState(7597);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 29) {
                    {
                    {
                    this.setState(7593);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7594);
                    this.signalInformationItem();
                    }
                    }
                    this.setState(7599);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resignalStatement(): ResignalStatementContext {
        let localctx = new ResignalStatementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1100, MySQLParser.RULE_resignalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7602);
            this.match(MySQLParser.RESIGNAL_SYMBOL);
            this.setState(7605);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 908, this.getContext())) {
                case 1:
                    {
                    this.setState(7603);
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.setState(7604);
                    this.sqlstate();
                    }
                    break;
            }
            this.setState(7616);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 519) {
                {
                this.setState(7607);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(7608);
                this.signalInformationItem();
                this.setState(7613);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 29) {
                    {
                    {
                    this.setState(7609);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(7610);
                    this.signalInformationItem();
                    }
                    }
                    this.setState(7615);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signalInformationItem(): SignalInformationItemContext {
        let localctx = new SignalInformationItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1102, MySQLParser.RULE_signalInformationItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7618);
            this.signalInformationItemName();
            this.setState(7619);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(7620);
            this.signalAllowedExpr();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cursorOpen(): CursorOpenContext {
        let localctx = new CursorOpenContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1104, MySQLParser.RULE_cursorOpen);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7622);
            this.match(MySQLParser.OPEN_SYMBOL);
            this.setState(7623);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cursorClose(): CursorCloseContext {
        let localctx = new CursorCloseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1106, MySQLParser.RULE_cursorClose);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7625);
            this.match(MySQLParser.CLOSE_SYMBOL);
            this.setState(7626);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public cursorFetch(): CursorFetchContext {
        let localctx = new CursorFetchContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1108, MySQLParser.RULE_cursorFetch);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7628);
            this.match(MySQLParser.FETCH_SYMBOL);
            this.setState(7633);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 912, this.getContext())) {
                case 1:
                    {
                    this.setState(7630);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 387) {
                        {
                        this.setState(7629);
                        this.match(MySQLParser.NEXT_SYMBOL);
                        }
                    }

                    this.setState(7632);
                    this.match(MySQLParser.FROM_SYMBOL);
                    }
                    break;
            }
            this.setState(7635);
            this.identifier();
            this.setState(7636);
            this.match(MySQLParser.INTO_SYMBOL);
            this.setState(7637);
            this.identifierList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public schedule(): ScheduleContext {
        let localctx = new ScheduleContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1110, MySQLParser.RULE_schedule);
        let _la: number;
        try {
            this.setState(7652);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.AT_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7639);
                this.match(MySQLParser.AT_SYMBOL);
                this.setState(7640);
                this.expr(0);
                }
                break;
            case MySQLParser.EVERY_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7641);
                this.match(MySQLParser.EVERY_SYMBOL);
                this.setState(7642);
                this.expr(0);
                this.setState(7643);
                this.interval();
                this.setState(7646);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 552) {
                    {
                    this.setState(7644);
                    this.match(MySQLParser.STARTS_SYMBOL);
                    this.setState(7645);
                    this.expr(0);
                    }
                }

                this.setState(7650);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 196) {
                    {
                    this.setState(7648);
                    this.match(MySQLParser.ENDS_SYMBOL);
                    this.setState(7649);
                    this.expr(0);
                    }
                }

                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localctx = new ColumnDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1112, MySQLParser.RULE_columnDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7654);
            this.columnName();
            this.setState(7655);
            this.fieldDefinition();
            this.setState(7657);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 916, this.getContext())) {
                case 1:
                    {
                    this.setState(7656);
                    this.checkOrReferences();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public checkOrReferences(): CheckOrReferencesContext {
        let localctx = new CheckOrReferencesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1114, MySQLParser.RULE_checkOrReferences);
        try {
            this.setState(7662);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 917, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7659);
                    if (!(this.serverVersion < 80016)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80016");
                    }
                    this.setState(7660);
                    this.checkConstraint();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7661);
                    this.references();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public checkConstraint(): CheckConstraintContext {
        let localctx = new CheckConstraintContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1116, MySQLParser.RULE_checkConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7664);
            this.match(MySQLParser.CHECK_SYMBOL);
            this.setState(7665);
            this.exprWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public constraintEnforcement(): ConstraintEnforcementContext {
        let localctx = new ConstraintEnforcementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1118, MySQLParser.RULE_constraintEnforcement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7667);
            if (!( this.serverVersion >= 80017)) {
                throw this.createFailedPredicateException(" this.serverVersion >= 80017");
            }
            this.setState(7669);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 390) {
                {
                this.setState(7668);
                this.match(MySQLParser.NOT_SYMBOL);
                }
            }

            this.setState(7671);
            this.match(MySQLParser.ENFORCED_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableConstraintDef(): TableConstraintDefContext {
        let localctx = new TableConstraintDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1120, MySQLParser.RULE_tableConstraintDef);
        let _la: number;
        try {
            let _alt: number;
            this.setState(7747);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INDEX_SYMBOL:
            case MySQLParser.KEY_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7673);
                localctx._type_ = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 268 || _la === 295)) {
                    localctx._type_ = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(7675);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 919, this.getContext())) {
                    case 1:
                        {
                        this.setState(7674);
                        this.indexNameAndType();
                        }
                        break;
                }
                this.setState(7677);
                this.keyListWithExpression();
                this.setState(7681);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 920, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(7678);
                        this.indexOption();
                        }
                        }
                    }
                    this.setState(7683);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 920, this.getContext());
                }
                }
                break;
            case MySQLParser.FULLTEXT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7684);
                localctx._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
                this.setState(7686);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 921, this.getContext())) {
                    case 1:
                        {
                        this.setState(7685);
                        this.keyOrIndex();
                        }
                        break;
                }
                this.setState(7689);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 922, this.getContext())) {
                    case 1:
                        {
                        this.setState(7688);
                        this.indexName();
                        }
                        break;
                }
                this.setState(7691);
                this.keyListWithExpression();
                this.setState(7695);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 923, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(7692);
                        this.fulltextIndexOption();
                        }
                        }
                    }
                    this.setState(7697);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 923, this.getContext());
                }
                }
                break;
            case MySQLParser.SPATIAL_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(7698);
                localctx._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(7700);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 924, this.getContext())) {
                    case 1:
                        {
                        this.setState(7699);
                        this.keyOrIndex();
                        }
                        break;
                }
                this.setState(7703);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 925, this.getContext())) {
                    case 1:
                        {
                        this.setState(7702);
                        this.indexName();
                        }
                        break;
                }
                this.setState(7705);
                this.keyListWithExpression();
                this.setState(7709);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 926, this.getContext());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                        {
                        this.setState(7706);
                        this.spatialIndexOption();
                        }
                        }
                    }
                    this.setState(7711);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 926, this.getContext());
                }
                }
                break;
            case MySQLParser.CHECK_SYMBOL:
            case MySQLParser.CONSTRAINT_SYMBOL:
            case MySQLParser.FOREIGN_SYMBOL:
            case MySQLParser.PRIMARY_SYMBOL:
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(7713);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 129) {
                    {
                    this.setState(7712);
                    this.constraintName();
                    }
                }

                this.setState(7745);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                case MySQLParser.PRIMARY_SYMBOL:
                case MySQLParser.UNIQUE_SYMBOL:
                    {
                    this.setState(7721);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.PRIMARY_SYMBOL:
                        {
                        this.setState(7715);
                        localctx._type_ = this.match(MySQLParser.PRIMARY_SYMBOL);
                        this.setState(7716);
                        this.match(MySQLParser.KEY_SYMBOL);
                        }
                        break;
                    case MySQLParser.UNIQUE_SYMBOL:
                        {
                        this.setState(7717);
                        localctx._type_ = this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.setState(7719);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 928, this.getContext())) {
                            case 1:
                                {
                                this.setState(7718);
                                this.keyOrIndex();
                                }
                                break;
                        }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    this.setState(7724);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 930, this.getContext())) {
                        case 1:
                            {
                            this.setState(7723);
                            this.indexNameAndType();
                            }
                            break;
                    }
                    this.setState(7726);
                    this.keyListWithExpression();
                    this.setState(7730);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 931, this.getContext());
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                            {
                            this.setState(7727);
                            this.indexOption();
                            }
                            }
                        }
                        this.setState(7732);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 931, this.getContext());
                    }
                    }
                    break;
                case MySQLParser.FOREIGN_SYMBOL:
                    {
                    this.setState(7733);
                    localctx._type_ = this.match(MySQLParser.FOREIGN_SYMBOL);
                    this.setState(7734);
                    this.match(MySQLParser.KEY_SYMBOL);
                    this.setState(7736);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 932, this.getContext())) {
                        case 1:
                            {
                            this.setState(7735);
                            this.indexName();
                            }
                            break;
                    }
                    this.setState(7738);
                    this.keyList();
                    this.setState(7739);
                    this.references();
                    }
                    break;
                case MySQLParser.CHECK_SYMBOL:
                    {
                    this.setState(7741);
                    this.checkConstraint();
                    this.setState(7743);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 933, this.getContext())) {
                        case 1:
                            {
                            this.setState(7742);
                            this.constraintEnforcement();
                            }
                            break;
                    }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public constraintName(): ConstraintNameContext {
        let localctx = new ConstraintNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1122, MySQLParser.RULE_constraintName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7749);
            this.match(MySQLParser.CONSTRAINT_SYMBOL);
            this.setState(7751);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 936, this.getContext())) {
                case 1:
                    {
                    this.setState(7750);
                    this.identifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldDefinition(): FieldDefinitionContext {
        let localctx = new FieldDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1124, MySQLParser.RULE_fieldDefinition);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7753);
            this.dataType();
            this.setState(7778);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 942, this.getContext())) {
                case 1:
                    {
                    this.setState(7757);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 937, this.getContext());
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                            {
                            this.setState(7754);
                            this.columnAttribute();
                            }
                            }
                        }
                        this.setState(7759);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 937, this.getContext());
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(7761);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 112) {
                        {
                        this.setState(7760);
                        this.collate();
                        }
                    }

                    this.setState(7765);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 241) {
                        {
                        this.setState(7763);
                        this.match(MySQLParser.GENERATED_SYMBOL);
                        this.setState(7764);
                        this.match(MySQLParser.ALWAYS_SYMBOL);
                        }
                    }

                    this.setState(7767);
                    this.match(MySQLParser.AS_SYMBOL);
                    this.setState(7768);
                    this.exprWithParentheses();
                    this.setState(7770);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 940, this.getContext())) {
                        case 1:
                            {
                            this.setState(7769);
                            _la = this.input().LA(1);
                            if(!(_la === 564 || _la === 645)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                    }
                    this.setState(7775);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 941, this.getContext());
                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            {
                            {
                            this.setState(7772);
                            this.columnAttribute();
                            }
                            }
                        }
                        this.setState(7777);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 941, this.getContext());
                    }
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnAttribute(): ColumnAttributeContext {
        let localctx = new ColumnAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1126, MySQLParser.RULE_columnAttribute);
        let _la: number;
        try {
            this.setState(7841);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 951, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7781);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 390) {
                        {
                        this.setState(7780);
                        this.match(MySQLParser.NOT_SYMBOL);
                        }
                    }

                    this.setState(7783);
                    this.nullLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7784);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(7785);
                    this.match(MySQLParser.NOT_SYMBOL);
                    this.setState(7786);
                    this.match(MySQLParser.SECONDARY_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7787);
                    localctx._value = this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(7791);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 944, this.getContext())) {
                        case 1:
                            {
                            this.setState(7788);
                            this.nowOrSignedLiteral();
                            }
                            break;
                        case 2:
                            {
                            this.setState(7789);
                            if (!(this.serverVersion >= 80013)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80013");
                            }
                            this.setState(7790);
                            this.exprWithParentheses();
                            }
                            break;
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7793);
                    localctx._value = this.match(MySQLParser.ON_SYMBOL);
                    this.setState(7794);
                    this.match(MySQLParser.UPDATE_SYMBOL);
                    this.setState(7795);
                    this.match(MySQLParser.NOW_SYMBOL);
                    this.setState(7797);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 945, this.getContext())) {
                        case 1:
                            {
                            this.setState(7796);
                            this.timeFunctionParameters();
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7799);
                    localctx._value = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(7800);
                    localctx._value = this.match(MySQLParser.SERIAL_SYMBOL);
                    this.setState(7801);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    this.setState(7802);
                    this.match(MySQLParser.VALUE_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(7804);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 438) {
                        {
                        this.setState(7803);
                        this.match(MySQLParser.PRIMARY_SYMBOL);
                        }
                    }

                    this.setState(7806);
                    localctx._value = this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(7807);
                    localctx._value = this.match(MySQLParser.UNIQUE_SYMBOL);
                    this.setState(7809);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 947, this.getContext())) {
                        case 1:
                            {
                            this.setState(7808);
                            this.match(MySQLParser.KEY_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(7811);
                    localctx._value = this.match(MySQLParser.COMMENT_SYMBOL);
                    this.setState(7812);
                    this.textLiteral();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(7813);
                    this.collate();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(7814);
                    localctx._value = this.match(MySQLParser.COLUMN_FORMAT_SYMBOL);
                    this.setState(7815);
                    this.columnFormat();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(7816);
                    localctx._value = this.match(MySQLParser.STORAGE_SYMBOL);
                    this.setState(7817);
                    this.storageMedia();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(7818);
                    localctx._value = this.match(MySQLParser.SRID_SYMBOL);
                    this.setState(7819);
                    this.real_ulonglong_number();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(7820);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(7822);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 129) {
                        {
                        this.setState(7821);
                        this.constraintName();
                        }
                    }

                    this.setState(7824);
                    this.checkConstraint();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(7825);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(7826);
                    this.constraintEnforcement();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(7827);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7828);
                    localctx._value = this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(7830);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 949, this.getContext())) {
                        case 1:
                            {
                            this.setState(7829);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(7832);
                    this.jsonAttribute();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(7833);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7834);
                    localctx._value = this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(7836);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 950, this.getContext())) {
                        case 1:
                            {
                            this.setState(7835);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(7838);
                    this.jsonAttribute();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(7839);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7840);
                    this.visibility();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnFormat(): ColumnFormatContext {
        let localctx = new ColumnFormatContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1128, MySQLParser.RULE_columnFormat);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7843);
            _la = this.input().LA(1);
            if(!(_la === 166 || _la === 188 || _la === 226)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public storageMedia(): StorageMediaContext {
        let localctx = new StorageMediaContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1130, MySQLParser.RULE_storageMedia);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7845);
            _la = this.input().LA(1);
            if(!(_la === 166 || _la === 179 || _la === 358)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public now(): NowContext {
        let localctx = new NowContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1132, MySQLParser.RULE_now);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7847);
            this.match(MySQLParser.NOW_SYMBOL);
            this.setState(7848);
            this.functionDatetimePrecision();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nowOrSignedLiteral(): NowOrSignedLiteralContext {
        let localctx = new NowOrSignedLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1134, MySQLParser.RULE_nowOrSignedLiteral);
        try {
            this.setState(7852);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 952, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7850);
                    this.now();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7851);
                    this.signedLiteralOrNull();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public gcolAttribute(): GcolAttributeContext {
        let localctx = new GcolAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1136, MySQLParser.RULE_gcolAttribute);
        let _la: number;
        try {
            this.setState(7868);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.UNIQUE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(7854);
                this.match(MySQLParser.UNIQUE_SYMBOL);
                this.setState(7856);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 295) {
                    {
                    this.setState(7855);
                    this.match(MySQLParser.KEY_SYMBOL);
                    }
                }

                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(7858);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(7859);
                this.textString();
                }
                break;
            case MySQLParser.NOT2_SYMBOL:
            case MySQLParser.NOT_SYMBOL:
            case MySQLParser.NULL_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(7861);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 1 || _la === 390) {
                    {
                    this.setState(7860);
                    this.notRule();
                    }
                }

                this.setState(7863);
                this.match(MySQLParser.NULL_SYMBOL);
                }
                break;
            case MySQLParser.KEY_SYMBOL:
            case MySQLParser.PRIMARY_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(7865);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 438) {
                    {
                    this.setState(7864);
                    this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                }

                this.setState(7867);
                this.match(MySQLParser.KEY_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public references(): ReferencesContext {
        let localctx = new ReferencesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1138, MySQLParser.RULE_references);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7870);
            this.match(MySQLParser.REFERENCES_SYMBOL);
            this.setState(7871);
            this.tableRef();
            this.setState(7873);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 32) {
                {
                this.setState(7872);
                this.identifierListWithParentheses();
                }
            }

            this.setState(7877);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 345) {
                {
                this.setState(7875);
                this.match(MySQLParser.MATCH_SYMBOL);
                this.setState(7876);
                localctx._match = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 236 || _la === 420 || _la === 525)) {
                    localctx._match = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                }
            }

            this.setState(7895);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 961, this.getContext())) {
                case 1:
                    {
                    this.setState(7879);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(7880);
                    localctx._option = this.match(MySQLParser.UPDATE_SYMBOL);
                    this.setState(7881);
                    this.deleteOption();
                    this.setState(7885);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 401) {
                        {
                        this.setState(7882);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(7883);
                        this.match(MySQLParser.DELETE_SYMBOL);
                        this.setState(7884);
                        this.deleteOption();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.setState(7887);
                    this.match(MySQLParser.ON_SYMBOL);
                    this.setState(7888);
                    localctx._option = this.match(MySQLParser.DELETE_SYMBOL);
                    this.setState(7889);
                    this.deleteOption();
                    this.setState(7893);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 401) {
                        {
                        this.setState(7890);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(7891);
                        this.match(MySQLParser.UPDATE_SYMBOL);
                        this.setState(7892);
                        this.deleteOption();
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public deleteOption(): DeleteOptionContext {
        let localctx = new DeleteOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1140, MySQLParser.RULE_deleteOption);
        let _la: number;
        try {
            this.setState(7904);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 962, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7897);
                    _la = this.input().LA(1);
                    if(!(_la === 93 || _la === 488)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7898);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(7899);
                    this.nullLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7900);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(7901);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7902);
                    this.match(MySQLParser.NO_SYMBOL);
                    this.setState(7903);
                    this.match(MySQLParser.ACTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyList(): KeyListContext {
        let localctx = new KeyListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1142, MySQLParser.RULE_keyList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7906);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7907);
            this.keyPart();
            this.setState(7912);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(7908);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7909);
                this.keyPart();
                }
                }
                this.setState(7914);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(7915);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyPart(): KeyPartContext {
        let localctx = new KeyPartContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1144, MySQLParser.RULE_keyPart);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7917);
            this.identifier();
            this.setState(7919);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 32) {
                {
                this.setState(7918);
                this.fieldLength();
                }
            }

            this.setState(7922);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 64 || _la === 172) {
                {
                this.setState(7921);
                this.direction();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyListWithExpression(): KeyListWithExpressionContext {
        let localctx = new KeyListWithExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1146, MySQLParser.RULE_keyListWithExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7924);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(7925);
            this.keyPartOrExpression();
            this.setState(7930);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(7926);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(7927);
                this.keyPartOrExpression();
                }
                }
                this.setState(7932);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(7933);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public keyPartOrExpression(): KeyPartOrExpressionContext {
        let localctx = new KeyPartOrExpressionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1148, MySQLParser.RULE_keyPartOrExpression);
        let _la: number;
        try {
            this.setState(7941);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 968, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7935);
                    this.keyPart();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7936);
                    if (!(this.serverVersion >= 80013)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80013");
                    }
                    this.setState(7937);
                    this.exprWithParentheses();
                    this.setState(7939);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 64 || _la === 172) {
                        {
                        this.setState(7938);
                        this.direction();
                        }
                    }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexType(): IndexTypeContext {
        let localctx = new IndexTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1150, MySQLParser.RULE_indexType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7943);
            localctx._algorithm = this.input().LT(1);
            _la = this.input().LA(1);
            if(!(_la === 88 || _la === 252 || _la === 504)) {
                localctx._algorithm = this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexOption(): IndexOptionContext {
        let localctx = new IndexOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1152, MySQLParser.RULE_indexOption);
        try {
            this.setState(7947);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 969, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7945);
                    this.commonIndexOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7946);
                    this.indexTypeClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public commonIndexOption(): CommonIndexOptionContext {
        let localctx = new CommonIndexOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1154, MySQLParser.RULE_commonIndexOption);
        let _la: number;
        try {
            this.setState(7969);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 973, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7949);
                    this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                    this.setState(7951);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(7950);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(7953);
                    this.ulong_number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7954);
                    this.match(MySQLParser.COMMENT_SYMBOL);
                    this.setState(7955);
                    this.textLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(7956);
                    this.visibility();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(7957);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7958);
                    this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(7960);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 971, this.getContext())) {
                        case 1:
                            {
                            this.setState(7959);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(7962);
                    this.jsonAttribute();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(7963);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(7964);
                    this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(7966);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 972, this.getContext())) {
                        case 1:
                            {
                            this.setState(7965);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(7968);
                    this.jsonAttribute();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public visibility(): VisibilityContext {
        let localctx = new VisibilityContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1156, MySQLParser.RULE_visibility);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7971);
            _la = this.input().LA(1);
            if(!(_la === 669 || _la === 670)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexTypeClause(): IndexTypeClauseContext {
        let localctx = new IndexTypeClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1158, MySQLParser.RULE_indexTypeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7973);
            _la = this.input().LA(1);
            if(!(_la === 608 || _la === 630)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(7974);
            this.indexType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fulltextIndexOption(): FulltextIndexOptionContext {
        let localctx = new FulltextIndexOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1160, MySQLParser.RULE_fulltextIndexOption);
        try {
            this.setState(7980);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 974, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7976);
                    this.commonIndexOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7977);
                    this.match(MySQLParser.WITH_SYMBOL);
                    this.setState(7978);
                    this.match(MySQLParser.PARSER_SYMBOL);
                    this.setState(7979);
                    this.identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public spatialIndexOption(): SpatialIndexOptionContext {
        let localctx = new SpatialIndexOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1162, MySQLParser.RULE_spatialIndexOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7982);
            this.commonIndexOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dataTypeDefinition(): DataTypeDefinitionContext {
        let localctx = new DataTypeDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1164, MySQLParser.RULE_dataTypeDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(7984);
            this.dataType();
            this.setState(7985);
            this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dataType(): DataTypeContext {
        let localctx = new DataTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1166, MySQLParser.RULE_dataType);
        let _la: number;
        try {
            this.setState(8133);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1008, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(7987);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 76 || _la === 280 || _la === 355 || _la === 528 || _la === 597)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(7989);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 975, this.getContext())) {
                        case 1:
                            {
                            this.setState(7988);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(7992);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 976, this.getContext())) {
                        case 1:
                            {
                            this.setState(7991);
                            this.fieldOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(7999);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.REAL_SYMBOL:
                        {
                        this.setState(7994);
                        localctx._type_ = this.match(MySQLParser.REAL_SYMBOL);
                        }
                        break;
                    case MySQLParser.DOUBLE_SYMBOL:
                        {
                        this.setState(7995);
                        localctx._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
                        this.setState(7997);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 977, this.getContext())) {
                            case 1:
                                {
                                this.setState(7996);
                                this.match(MySQLParser.PRECISION_SYMBOL);
                                }
                                break;
                        }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    this.setState(8002);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 979, this.getContext())) {
                        case 1:
                            {
                            this.setState(8001);
                            this.precision();
                            }
                            break;
                    }
                    this.setState(8005);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 980, this.getContext())) {
                        case 1:
                            {
                            this.setState(8004);
                            this.fieldOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8007);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 164 || _la === 226 || _la === 227 || _la === 397)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(8009);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 981, this.getContext())) {
                        case 1:
                            {
                            this.setState(8008);
                            this.floatOptions();
                            }
                            break;
                    }
                    this.setState(8012);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 982, this.getContext())) {
                        case 1:
                            {
                            this.setState(8011);
                            this.fieldOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8014);
                    localctx._type_ = this.match(MySQLParser.BIT_SYMBOL);
                    this.setState(8016);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 983, this.getContext())) {
                        case 1:
                            {
                            this.setState(8015);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(8018);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 85 || _la === 86)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(8019);
                    localctx._type_ = this.match(MySQLParser.CHAR_SYMBOL);
                    this.setState(8021);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 984, this.getContext())) {
                        case 1:
                            {
                            this.setState(8020);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(8024);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 985, this.getContext())) {
                        case 1:
                            {
                            this.setState(8023);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(8026);
                    this.nchar();
                    this.setState(8028);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 986, this.getContext())) {
                        case 1:
                            {
                            this.setState(8027);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(8031);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 987, this.getContext())) {
                        case 1:
                            {
                            this.setState(8030);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(8033);
                    localctx._type_ = this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(8035);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 988, this.getContext())) {
                        case 1:
                            {
                            this.setState(8034);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(8040);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.CHAR_SYMBOL:
                        {
                        this.setState(8037);
                        localctx._type_ = this.match(MySQLParser.CHAR_SYMBOL);
                        this.setState(8038);
                        this.match(MySQLParser.VARYING_SYMBOL);
                        }
                        break;
                    case MySQLParser.VARCHAR_SYMBOL:
                        {
                        this.setState(8039);
                        localctx._type_ = this.match(MySQLParser.VARCHAR_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    this.setState(8042);
                    this.fieldLength();
                    this.setState(8044);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 990, this.getContext())) {
                        case 1:
                            {
                            this.setState(8043);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(8056);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 991, this.getContext())) {
                        case 1:
                            {
                            this.setState(8046);
                            localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                            this.setState(8047);
                            this.match(MySQLParser.VARCHAR_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(8048);
                            localctx._type_ = this.match(MySQLParser.NVARCHAR_SYMBOL);
                            }
                            break;
                        case 3:
                            {
                            this.setState(8049);
                            localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                            this.setState(8050);
                            this.match(MySQLParser.VARCHAR_SYMBOL);
                            }
                            break;
                        case 4:
                            {
                            this.setState(8051);
                            localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                            this.setState(8052);
                            this.match(MySQLParser.CHAR_SYMBOL);
                            this.setState(8053);
                            this.match(MySQLParser.VARYING_SYMBOL);
                            }
                            break;
                        case 5:
                            {
                            this.setState(8054);
                            localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                            this.setState(8055);
                            this.match(MySQLParser.VARYING_SYMBOL);
                            }
                            break;
                    }
                    this.setState(8058);
                    this.fieldLength();
                    this.setState(8060);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 992, this.getContext())) {
                        case 1:
                            {
                            this.setState(8059);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(8062);
                    localctx._type_ = this.match(MySQLParser.VARBINARY_SYMBOL);
                    this.setState(8063);
                    this.fieldLength();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(8064);
                    localctx._type_ = this.match(MySQLParser.YEAR_SYMBOL);
                    this.setState(8066);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 993, this.getContext())) {
                        case 1:
                            {
                            this.setState(8065);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(8069);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 994, this.getContext())) {
                        case 1:
                            {
                            this.setState(8068);
                            this.fieldOptions();
                            }
                            break;
                    }
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(8071);
                    localctx._type_ = this.match(MySQLParser.DATE_SYMBOL);
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(8072);
                    localctx._type_ = this.match(MySQLParser.TIME_SYMBOL);
                    this.setState(8074);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 995, this.getContext())) {
                        case 1:
                            {
                            this.setState(8073);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(8076);
                    localctx._type_ = this.match(MySQLParser.TIMESTAMP_SYMBOL);
                    this.setState(8078);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 996, this.getContext())) {
                        case 1:
                            {
                            this.setState(8077);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(8080);
                    localctx._type_ = this.match(MySQLParser.DATETIME_SYMBOL);
                    this.setState(8082);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 997, this.getContext())) {
                        case 1:
                            {
                            this.setState(8081);
                            this.typeDatetimePrecision();
                            }
                            break;
                    }
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(8084);
                    localctx._type_ = this.match(MySQLParser.TINYBLOB_SYMBOL);
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(8085);
                    localctx._type_ = this.match(MySQLParser.BLOB_SYMBOL);
                    this.setState(8087);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 998, this.getContext())) {
                        case 1:
                            {
                            this.setState(8086);
                            this.fieldLength();
                            }
                            break;
                    }
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(8089);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 317 || _la === 354)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(8090);
                    localctx._type_ = this.match(MySQLParser.LONG_SYMBOL);
                    this.setState(8091);
                    this.match(MySQLParser.VARBINARY_SYMBOL);
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(8092);
                    localctx._type_ = this.match(MySQLParser.LONG_SYMBOL);
                    this.setState(8096);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 999, this.getContext())) {
                        case 1:
                            {
                            this.setState(8093);
                            this.match(MySQLParser.CHAR_SYMBOL);
                            this.setState(8094);
                            this.match(MySQLParser.VARYING_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(8095);
                            this.match(MySQLParser.VARCHAR_SYMBOL);
                            }
                            break;
                    }
                    this.setState(8099);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1000, this.getContext())) {
                        case 1:
                            {
                            this.setState(8098);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(8101);
                    localctx._type_ = this.match(MySQLParser.TINYTEXT_SYMBOL);
                    this.setState(8103);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1001, this.getContext())) {
                        case 1:
                            {
                            this.setState(8102);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(8105);
                    localctx._type_ = this.match(MySQLParser.TEXT_SYMBOL);
                    this.setState(8107);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1002, this.getContext())) {
                        case 1:
                            {
                            this.setState(8106);
                            this.fieldLength();
                            }
                            break;
                    }
                    this.setState(8110);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1003, this.getContext())) {
                        case 1:
                            {
                            this.setState(8109);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(8112);
                    localctx._type_ = this.match(MySQLParser.MEDIUMTEXT_SYMBOL);
                    this.setState(8114);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1004, this.getContext())) {
                        case 1:
                            {
                            this.setState(8113);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(8116);
                    localctx._type_ = this.match(MySQLParser.LONGTEXT_SYMBOL);
                    this.setState(8118);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1005, this.getContext())) {
                        case 1:
                            {
                            this.setState(8117);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(8120);
                    localctx._type_ = this.match(MySQLParser.ENUM_SYMBOL);
                    this.setState(8121);
                    this.stringList();
                    this.setState(8123);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1006, this.getContext())) {
                        case 1:
                            {
                            this.setState(8122);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(8125);
                    localctx._type_ = this.match(MySQLParser.SET_SYMBOL);
                    this.setState(8126);
                    this.stringList();
                    this.setState(8128);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1007, this.getContext())) {
                        case 1:
                            {
                            this.setState(8127);
                            this.charsetWithOptBinary();
                            }
                            break;
                    }
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(8130);
                    localctx._type_ = this.match(MySQLParser.SERIAL_SYMBOL);
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(8131);
                    localctx._type_ = this.match(MySQLParser.JSON_SYMBOL);
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                    this.setState(8132);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 243 || _la === 244 || _la === 309 || ((((_la - 374)) & ~0x1F) === 0 && ((1 << (_la - 374)) & 7) !== 0) || _la === 429 || _la === 430)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nchar(): NcharContext {
        let localctx = new NcharContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1168, MySQLParser.RULE_nchar);
        try {
            this.setState(8138);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.NCHAR_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8135);
                localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                }
                break;
            case MySQLParser.NATIONAL_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8136);
                localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                this.setState(8137);
                this.match(MySQLParser.CHAR_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public realType(): RealTypeContext {
        let localctx = new RealTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1170, MySQLParser.RULE_realType);
        try {
            this.setState(8145);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.REAL_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8140);
                localctx._type_ = this.match(MySQLParser.REAL_SYMBOL);
                }
                break;
            case MySQLParser.DOUBLE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8141);
                localctx._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
                this.setState(8143);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1010, this.getContext())) {
                    case 1:
                        {
                        this.setState(8142);
                        this.match(MySQLParser.PRECISION_SYMBOL);
                        }
                        break;
                }
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldLength(): FieldLengthContext {
        let localctx = new FieldLengthContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1172, MySQLParser.RULE_fieldLength);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8147);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8150);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1012, this.getContext())) {
                case 1:
                    {
                    this.setState(8148);
                    this.real_ulonglong_number();
                    }
                    break;
                case 2:
                    {
                    this.setState(8149);
                    this.match(MySQLParser.DECIMAL_NUMBER);
                    }
                    break;
            }
            this.setState(8152);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldOptions(): FieldOptionsContext {
        let localctx = new FieldOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1174, MySQLParser.RULE_fieldOptions);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8155);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(8154);
                            _la = this.input().LA(1);
                            if(!(_la === 524 || _la === 621 || _la === 665)) {
                            this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(8157);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 1013, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext {
        let localctx = new CharsetWithOptBinaryContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1176, MySQLParser.RULE_charsetWithOptBinary);
        try {
            this.setState(8173);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1016, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8159);
                    this.ascii();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8160);
                    this.unicode();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8161);
                    this.match(MySQLParser.BYTE_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8162);
                    this.charset();
                    this.setState(8163);
                    this.charsetName();
                    this.setState(8165);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1014, this.getContext())) {
                        case 1:
                            {
                            this.setState(8164);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(8167);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    this.setState(8171);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1015, this.getContext())) {
                        case 1:
                            {
                            this.setState(8168);
                            this.charset();
                            this.setState(8169);
                            this.charsetName();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ascii(): AsciiContext {
        let localctx = new AsciiContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1178, MySQLParser.RULE_ascii);
        try {
            this.setState(8181);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.ASCII_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8175);
                this.match(MySQLParser.ASCII_SYMBOL);
                this.setState(8177);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1017, this.getContext())) {
                    case 1:
                        {
                        this.setState(8176);
                        this.match(MySQLParser.BINARY_SYMBOL);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8179);
                this.match(MySQLParser.BINARY_SYMBOL);
                this.setState(8180);
                this.match(MySQLParser.ASCII_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public unicode(): UnicodeContext {
        let localctx = new UnicodeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1180, MySQLParser.RULE_unicode);
        try {
            this.setState(8189);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.UNICODE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8183);
                this.match(MySQLParser.UNICODE_SYMBOL);
                this.setState(8185);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1019, this.getContext())) {
                    case 1:
                        {
                        this.setState(8184);
                        this.match(MySQLParser.BINARY_SYMBOL);
                        }
                        break;
                }
                }
                break;
            case MySQLParser.BINARY_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8187);
                this.match(MySQLParser.BINARY_SYMBOL);
                this.setState(8188);
                this.match(MySQLParser.UNICODE_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public wsNumCodepoints(): WsNumCodepointsContext {
        let localctx = new WsNumCodepointsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1182, MySQLParser.RULE_wsNumCodepoints);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8191);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8192);
            this.real_ulong_number();
            this.setState(8193);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext {
        let localctx = new TypeDatetimePrecisionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1184, MySQLParser.RULE_typeDatetimePrecision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8195);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8196);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(8197);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionDatetimePrecision(): FunctionDatetimePrecisionContext {
        let localctx = new FunctionDatetimePrecisionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1186, MySQLParser.RULE_functionDatetimePrecision);
        try {
            this.setState(8204);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1021, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8200);
                    this.parentheses();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8201);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8202);
                    this.match(MySQLParser.INT_NUMBER);
                    this.setState(8203);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public charsetName(): CharsetNameContext {
        let localctx = new CharsetNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1188, MySQLParser.RULE_charsetName);
        try {
            this.setState(8210);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1022, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8206);
                    this.textOrIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8207);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8208);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(8209);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public collationName(): CollationNameContext {
        let localctx = new CollationNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1190, MySQLParser.RULE_collationName);
        try {
            this.setState(8217);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1023, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8212);
                    this.textOrIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8213);
                    if (!(this.serverVersion < 80011)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80011");
                    }
                    this.setState(8214);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8215);
                    if (!(this.serverVersion >= 80018)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80018");
                    }
                    this.setState(8216);
                    this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTableOptions(): CreateTableOptionsContext {
        let localctx = new CreateTableOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1192, MySQLParser.RULE_createTableOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8219);
            this.createTableOption();
            this.setState(8226);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1025, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8221);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1024, this.getContext())) {
                        case 1:
                            {
                            this.setState(8220);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            }
                            break;
                    }
                    this.setState(8223);
                    this.createTableOption();
                    }
                    }
                }
                this.setState(8228);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1025, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTableOptionsEtc(): CreateTableOptionsEtcContext {
        let localctx = new CreateTableOptionsEtcContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1194, MySQLParser.RULE_createTableOptionsEtc);
        try {
            this.setState(8234);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1027, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8229);
                    this.createTableOptions();
                    this.setState(8231);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1026, this.getContext())) {
                        case 1:
                            {
                            this.setState(8230);
                            this.createPartitioningEtc();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8233);
                    this.createPartitioningEtc();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createPartitioningEtc(): CreatePartitioningEtcContext {
        let localctx = new CreatePartitioningEtcContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1196, MySQLParser.RULE_createPartitioningEtc);
        try {
            this.setState(8241);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1029, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8236);
                    this.partitionClause();
                    this.setState(8238);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1028, this.getContext())) {
                        case 1:
                            {
                            this.setState(8237);
                            this.duplicateAsQe();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8240);
                    this.duplicateAsQe();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTableOptionsSpaceSeparated(): CreateTableOptionsSpaceSeparatedContext {
        let localctx = new CreateTableOptionsSpaceSeparatedContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1198, MySQLParser.RULE_createTableOptionsSpaceSeparated);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8244);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(8243);
                            this.createTableOption();
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(8246);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 1030, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createTableOption(): CreateTableOptionContext {
        let localctx = new CreateTableOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1200, MySQLParser.RULE_createTableOption);
        let _la: number;
        try {
            this.setState(8388);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1056, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8248);
                    localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
                    this.setState(8250);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1031, this.getContext())) {
                        case 1:
                            {
                            this.setState(8249);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8252);
                    this.engineRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8253);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(8254);
                    localctx._option = this.match(MySQLParser.SECONDARY_ENGINE_SYMBOL);
                    this.setState(8256);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1032, this.getContext())) {
                        case 1:
                            {
                            this.setState(8255);
                            this.equal();
                            }
                            break;
                    }
                    this.setState(8260);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1033, this.getContext())) {
                        case 1:
                            {
                            this.setState(8258);
                            this.match(MySQLParser.NULL_SYMBOL);
                            }
                            break;
                        case 2:
                            {
                            this.setState(8259);
                            this.textOrIdentifier();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8262);
                    localctx._option = this.match(MySQLParser.MAX_ROWS_SYMBOL);
                    this.setState(8264);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8263);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8266);
                    this.ulonglongNumber();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8267);
                    localctx._option = this.match(MySQLParser.MIN_ROWS_SYMBOL);
                    this.setState(8269);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8268);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8271);
                    this.ulonglongNumber();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(8272);
                    localctx._option = this.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL);
                    this.setState(8274);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8273);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8276);
                    this.ulonglongNumber();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(8277);
                    localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                    this.setState(8279);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1037, this.getContext())) {
                        case 1:
                            {
                            this.setState(8278);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8281);
                    this.textStringLiteral();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                    this.setState(8282);
                    localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                    this.setState(8284);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1038, this.getContext())) {
                        case 1:
                            {
                            this.setState(8283);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8286);
                    this.textStringLiteral();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                    this.setState(8287);
                    localctx._option = this.match(MySQLParser.COMPRESSION_SYMBOL);
                    this.setState(8289);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1039, this.getContext())) {
                        case 1:
                            {
                            this.setState(8288);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8291);
                    this.textString();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                    this.setState(8292);
                    localctx._option = this.match(MySQLParser.ENCRYPTION_SYMBOL);
                    this.setState(8294);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1040, this.getContext())) {
                        case 1:
                            {
                            this.setState(8293);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8296);
                    this.textString();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                    this.setState(8297);
                    localctx._option = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                    this.setState(8299);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8298);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8301);
                    this.ulonglongNumber();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                    this.setState(8302);
                    localctx._option = this.match(MySQLParser.PACK_KEYS_SYMBOL);
                    this.setState(8304);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8303);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8306);
                    this.ternaryOption();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                    this.setState(8307);
                    localctx._option = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 7) !== 0))) {
                        localctx._option = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(8309);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8308);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8311);
                    this.ternaryOption();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                    this.setState(8312);
                    localctx._option = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 104 || _la === 584)) {
                        localctx._option = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(8314);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8313);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8316);
                    this.ulong_number();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                    this.setState(8317);
                    localctx._option = this.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL);
                    this.setState(8319);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8318);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8321);
                    this.ulong_number();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                    this.setState(8322);
                    localctx._option = this.match(MySQLParser.ROW_FORMAT_SYMBOL);
                    this.setState(8324);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8323);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8326);
                    localctx._format = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 121 || _la === 123 || _la === 166 || _la === 188 || _la === 226 || _la === 459)) {
                        localctx._format = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                    this.setState(8327);
                    localctx._option = this.match(MySQLParser.UNION_SYMBOL);
                    this.setState(8329);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8328);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8331);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8332);
                    this.tableRefList();
                    this.setState(8333);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                    this.setState(8335);
                    this.defaultCharset();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                    this.setState(8336);
                    this.defaultCollation();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                    this.setState(8337);
                    localctx._option = this.match(MySQLParser.INSERT_METHOD_SYMBOL);
                    this.setState(8339);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8338);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8341);
                    localctx._method = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 225 || _la === 298 || _la === 392)) {
                        localctx._method = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                    this.setState(8342);
                    localctx._option = this.match(MySQLParser.DATA_SYMBOL);
                    this.setState(8343);
                    this.match(MySQLParser.DIRECTORY_SYMBOL);
                    this.setState(8345);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1049, this.getContext())) {
                        case 1:
                            {
                            this.setState(8344);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8347);
                    this.textString();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                    this.setState(8348);
                    localctx._option = this.match(MySQLParser.INDEX_SYMBOL);
                    this.setState(8349);
                    this.match(MySQLParser.DIRECTORY_SYMBOL);
                    this.setState(8351);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1050, this.getContext())) {
                        case 1:
                            {
                            this.setState(8350);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8353);
                    this.textString();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                    this.setState(8354);
                    localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                    this.setState(8356);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1051, this.getContext())) {
                        case 1:
                            {
                            this.setState(8355);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8358);
                    this.identifier();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                    this.setState(8359);
                    localctx._option = this.match(MySQLParser.STORAGE_SYMBOL);
                    this.setState(8360);
                    _la = this.input().LA(1);
                    if(!(_la === 179 || _la === 358)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                    this.setState(8361);
                    localctx._option = this.match(MySQLParser.CONNECTION_SYMBOL);
                    this.setState(8363);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1052, this.getContext())) {
                        case 1:
                            {
                            this.setState(8362);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8365);
                    this.textString();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                    this.setState(8366);
                    localctx._option = this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                    this.setState(8368);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 6) {
                        {
                        this.setState(8367);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                    }

                    this.setState(8370);
                    this.ulonglongNumber();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                    this.setState(8371);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8372);
                    localctx._option = this.match(MySQLParser.START_SYMBOL);
                    this.setState(8373);
                    this.match(MySQLParser.TRANSACTION_SYMBOL);
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                    this.setState(8374);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8375);
                    localctx._option = this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(8377);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1054, this.getContext())) {
                        case 1:
                            {
                            this.setState(8376);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8379);
                    this.jsonAttribute();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                    this.setState(8380);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8381);
                    localctx._option = this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                    this.setState(8383);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1055, this.getContext())) {
                        case 1:
                            {
                            this.setState(8382);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                            break;
                    }
                    this.setState(8385);
                    this.jsonAttribute();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                    this.setState(8386);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(8387);
                    this.tsOptionAutoextendSize();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ternaryOption(): TernaryOptionContext {
        let localctx = new TernaryOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1202, MySQLParser.RULE_ternaryOption);
        try {
            this.setState(8392);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
            case MySQLParser.HEX_NUMBER:
            case MySQLParser.DECIMAL_NUMBER:
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8390);
                this.ulong_number();
                }
                break;
            case MySQLParser.DEFAULT_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8391);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultCollation(): DefaultCollationContext {
        let localctx = new DefaultCollationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1204, MySQLParser.RULE_defaultCollation);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8395);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 166) {
                {
                this.setState(8394);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.setState(8397);
            this.match(MySQLParser.COLLATE_SYMBOL);
            this.setState(8399);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1059, this.getContext())) {
                case 1:
                    {
                    this.setState(8398);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(8401);
            this.collationName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultEncryption(): DefaultEncryptionContext {
        let localctx = new DefaultEncryptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1206, MySQLParser.RULE_defaultEncryption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8404);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 166) {
                {
                this.setState(8403);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.setState(8406);
            this.match(MySQLParser.ENCRYPTION_SYMBOL);
            this.setState(8408);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1061, this.getContext())) {
                case 1:
                    {
                    this.setState(8407);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(8410);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public defaultCharset(): DefaultCharsetContext {
        let localctx = new DefaultCharsetContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1208, MySQLParser.RULE_defaultCharset);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8413);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 166) {
                {
                this.setState(8412);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                }
            }

            this.setState(8415);
            this.charset();
            this.setState(8417);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1063, this.getContext())) {
                case 1:
                    {
                    this.setState(8416);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                    break;
            }
            this.setState(8419);
            this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionClause(): PartitionClauseContext {
        let localctx = new PartitionClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1210, MySQLParser.RULE_partitionClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8421);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(8422);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8423);
            this.partitionTypeDef();
            this.setState(8426);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1064, this.getContext())) {
                case 1:
                    {
                    this.setState(8424);
                    this.match(MySQLParser.PARTITIONS_SYMBOL);
                    this.setState(8425);
                    this.real_ulong_number();
                    }
                    break;
            }
            this.setState(8429);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1065, this.getContext())) {
                case 1:
                    {
                    this.setState(8428);
                    this.subPartitions();
                    }
                    break;
            }
            this.setState(8432);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1066, this.getContext())) {
                case 1:
                    {
                    this.setState(8431);
                    this.partitionDefinitions();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionTypeDef(): PartitionTypeDefContext {
        let localctx = new PartitionTypeDefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1212, MySQLParser.RULE_partitionTypeDef);
        let _la: number;
        try {
            this.setState(8467);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1073, this.getContext())) {
                case 1:
                    localctx = new PartitionDefKeyContext(localctx);
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8435);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 307) {
                        {
                        this.setState(8434);
                        this.match(MySQLParser.LINEAR_SYMBOL);
                        }
                    }

                    this.setState(8437);
                    this.match(MySQLParser.KEY_SYMBOL);
                    this.setState(8439);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 56) {
                        {
                        this.setState(8438);
                        this.partitionKeyAlgorithm();
                        }
                    }

                    this.setState(8441);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8443);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1069, this.getContext())) {
                        case 1:
                            {
                            this.setState(8442);
                            this.identifierList();
                            }
                            break;
                    }
                    this.setState(8445);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    localctx = new PartitionDefHashContext(localctx);
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8447);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 307) {
                        {
                        this.setState(8446);
                        this.match(MySQLParser.LINEAR_SYMBOL);
                        }
                    }

                    this.setState(8449);
                    this.match(MySQLParser.HASH_SYMBOL);
                    this.setState(8450);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8451);
                    this.bitExpr(0);
                    this.setState(8452);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 3:
                    localctx = new PartitionDefRangeListContext(localctx);
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8454);
                    _la = this.input().LA(1);
                    if(!(_la === 310 || _la === 450)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    this.setState(8465);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.OPEN_PAR_SYMBOL:
                        {
                        this.setState(8455);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8456);
                        this.bitExpr(0);
                        this.setState(8457);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case MySQLParser.COLUMNS_SYMBOL:
                        {
                        this.setState(8459);
                        this.match(MySQLParser.COLUMNS_SYMBOL);
                        this.setState(8460);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8462);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1071, this.getContext())) {
                            case 1:
                                {
                                this.setState(8461);
                                this.identifierList();
                                }
                                break;
                        }
                        this.setState(8464);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public subPartitions(): SubPartitionsContext {
        let localctx = new SubPartitionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1214, MySQLParser.RULE_subPartitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8469);
            this.match(MySQLParser.SUBPARTITION_SYMBOL);
            this.setState(8470);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8472);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 307) {
                {
                this.setState(8471);
                this.match(MySQLParser.LINEAR_SYMBOL);
                }
            }

            this.setState(8484);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.HASH_SYMBOL:
                {
                this.setState(8474);
                this.match(MySQLParser.HASH_SYMBOL);
                this.setState(8475);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8476);
                this.bitExpr(0);
                this.setState(8477);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
                break;
            case MySQLParser.KEY_SYMBOL:
                {
                this.setState(8479);
                this.match(MySQLParser.KEY_SYMBOL);
                this.setState(8481);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 56) {
                    {
                    this.setState(8480);
                    this.partitionKeyAlgorithm();
                    }
                }

                this.setState(8483);
                this.identifierListWithParentheses();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
            this.setState(8488);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1077, this.getContext())) {
                case 1:
                    {
                    this.setState(8486);
                    this.match(MySQLParser.SUBPARTITIONS_SYMBOL);
                    this.setState(8487);
                    this.real_ulong_number();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
        let localctx = new PartitionKeyAlgorithmContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1216, MySQLParser.RULE_partitionKeyAlgorithm);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8490);
            this.match(MySQLParser.ALGORITHM_SYMBOL);
            this.setState(8491);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(8492);
            this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionDefinitions(): PartitionDefinitionsContext {
        let localctx = new PartitionDefinitionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1218, MySQLParser.RULE_partitionDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8494);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8495);
            this.partitionDefinition();
            this.setState(8500);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(8496);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8497);
                this.partitionDefinition();
                }
                }
                this.setState(8502);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8503);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionDefinition(): PartitionDefinitionContext {
        let localctx = new PartitionDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1220, MySQLParser.RULE_partitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8505);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(8506);
            this.identifier();
            this.setState(8517);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1080, this.getContext())) {
                case 1:
                    {
                    this.setState(8507);
                    this.match(MySQLParser.VALUES_SYMBOL);
                    this.setState(8508);
                    this.match(MySQLParser.LESS_SYMBOL);
                    this.setState(8509);
                    this.match(MySQLParser.THAN_SYMBOL);
                    this.setState(8512);
                    this.getErrorHandler().sync(this);
                    switch (this.input().LA(1)) {
                    case MySQLParser.OPEN_PAR_SYMBOL:
                        {
                        this.setState(8510);
                        this.partitionValueItemListParen();
                        }
                        break;
                    case MySQLParser.MAXVALUE_SYMBOL:
                        {
                        this.setState(8511);
                        this.match(MySQLParser.MAXVALUE_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(8514);
                    this.match(MySQLParser.VALUES_SYMBOL);
                    this.setState(8515);
                    this.match(MySQLParser.IN_SYMBOL);
                    this.setState(8516);
                    this.partitionValuesIn();
                    }
                    break;
            }
            this.setState(8522);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 118 || _la === 153 || _la === 198 || _la === 268 || _la === 348 || _la === 367 || _la === 388 || _la === 563 || _la === 582) {
                {
                {
                this.setState(8519);
                this.partitionOption();
                }
                }
                this.setState(8524);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8536);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 32) {
                {
                this.setState(8525);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8526);
                this.subpartitionDefinition();
                this.setState(8531);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 29) {
                    {
                    {
                    this.setState(8527);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8528);
                    this.subpartitionDefinition();
                    }
                    }
                    this.setState(8533);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(8534);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionValuesIn(): PartitionValuesInContext {
        let localctx = new PartitionValuesInContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1222, MySQLParser.RULE_partitionValuesIn);
        let _la: number;
        try {
            this.setState(8550);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1085, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8538);
                    this.partitionValueItemListParen();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8539);
                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                    this.setState(8540);
                    this.partitionValueItemListParen();
                    this.setState(8545);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    while (_la === 29) {
                        {
                        {
                        this.setState(8541);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(8542);
                        this.partitionValueItemListParen();
                        }
                        }
                        this.setState(8547);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                    }
                    this.setState(8548);
                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionOption(): PartitionOptionContext {
        let localctx = new PartitionOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1224, MySQLParser.RULE_partitionOption);
        let _la: number;
        try {
            this.setState(8586);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.TABLESPACE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8552);
                localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.setState(8554);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1086, this.getContext())) {
                    case 1:
                        {
                        this.setState(8553);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8556);
                this.identifier();
                }
                break;
            case MySQLParser.ENGINE_SYMBOL:
            case MySQLParser.STORAGE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8558);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 563) {
                    {
                    this.setState(8557);
                    this.match(MySQLParser.STORAGE_SYMBOL);
                    }
                }

                this.setState(8560);
                localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
                this.setState(8562);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1088, this.getContext())) {
                    case 1:
                        {
                        this.setState(8561);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8564);
                this.engineRef();
                }
                break;
            case MySQLParser.NODEGROUP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(8565);
                localctx._option = this.match(MySQLParser.NODEGROUP_SYMBOL);
                this.setState(8567);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 6) {
                    {
                    this.setState(8566);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.setState(8569);
                this.real_ulong_number();
                }
                break;
            case MySQLParser.MAX_ROWS_SYMBOL:
            case MySQLParser.MIN_ROWS_SYMBOL:
                this.enterOuterAlt(localctx, 4);
                {
                this.setState(8570);
                localctx._option = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 348 || _la === 367)) {
                    localctx._option = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(8572);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 6) {
                    {
                    this.setState(8571);
                    this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.setState(8574);
                this.real_ulong_number();
                }
                break;
            case MySQLParser.DATA_SYMBOL:
            case MySQLParser.INDEX_SYMBOL:
                this.enterOuterAlt(localctx, 5);
                {
                this.setState(8575);
                localctx._option = this.input().LT(1);
                _la = this.input().LA(1);
                if(!(_la === 153 || _la === 268)) {
                    localctx._option = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(8576);
                this.match(MySQLParser.DIRECTORY_SYMBOL);
                this.setState(8578);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1091, this.getContext())) {
                    case 1:
                        {
                        this.setState(8577);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8580);
                this.textLiteral();
                }
                break;
            case MySQLParser.COMMENT_SYMBOL:
                this.enterOuterAlt(localctx, 6);
                {
                this.setState(8581);
                localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(8583);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1092, this.getContext())) {
                    case 1:
                        {
                        this.setState(8582);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8585);
                this.textLiteral();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public subpartitionDefinition(): SubpartitionDefinitionContext {
        let localctx = new SubpartitionDefinitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1226, MySQLParser.RULE_subpartitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8588);
            this.match(MySQLParser.SUBPARTITION_SYMBOL);
            this.setState(8589);
            this.textOrIdentifier();
            this.setState(8593);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 118 || _la === 153 || _la === 198 || _la === 268 || _la === 348 || _la === 367 || _la === 388 || _la === 563 || _la === 582) {
                {
                {
                this.setState(8590);
                this.partitionOption();
                }
                }
                this.setState(8595);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionValueItemListParen(): PartitionValueItemListParenContext {
        let localctx = new PartitionValueItemListParenContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1228, MySQLParser.RULE_partitionValueItemListParen);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8596);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8597);
            this.partitionValueItem();
            this.setState(8602);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(8598);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8599);
                this.partitionValueItem();
                }
                }
                this.setState(8604);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8605);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public partitionValueItem(): PartitionValueItemContext {
        let localctx = new PartitionValueItemContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1230, MySQLParser.RULE_partitionValueItem);
        try {
            this.setState(8609);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1096, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8607);
                    this.bitExpr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8608);
                    this.match(MySQLParser.MAXVALUE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public definerClause(): DefinerClauseContext {
        let localctx = new DefinerClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1232, MySQLParser.RULE_definerClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8611);
            this.match(MySQLParser.DEFINER_SYMBOL);
            this.setState(8612);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(8613);
            this.user();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifExists(): IfExistsContext {
        let localctx = new IfExistsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1234, MySQLParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8615);
            this.match(MySQLParser.IF_SYMBOL);
            this.setState(8616);
            this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifExistsIdentifier(): IfExistsIdentifierContext {
        let localctx = new IfExistsIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1236, MySQLParser.RULE_ifExistsIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8618);
            this.ifExists();
            this.setState(8619);
            this.persistedVariableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public persistedVariableIdentifier(): PersistedVariableIdentifierContext {
        let localctx = new PersistedVariableIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1238, MySQLParser.RULE_persistedVariableIdentifier);
        try {
            this.setState(8628);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1098, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8621);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8622);
                    if (!(this.serverVersion >= 80032)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80032");
                    }
                    this.setState(8626);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1097, this.getContext())) {
                        case 1:
                            {
                            this.setState(8623);
                            this.qualifiedIdentifier();
                            }
                            break;
                        case 2:
                            {
                            this.setState(8624);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            this.setState(8625);
                            this.dotIdentifier();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ifNotExists(): IfNotExistsContext {
        let localctx = new IfNotExistsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1240, MySQLParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8630);
            this.match(MySQLParser.IF_SYMBOL);
            this.setState(8631);
            this.notRule();
            this.setState(8632);
            this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ignoreUnknownUser(): IgnoreUnknownUserContext {
        let localctx = new IgnoreUnknownUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1242, MySQLParser.RULE_ignoreUnknownUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8634);
            this.match(MySQLParser.IGNORE_SYMBOL);
            this.setState(8635);
            this.match(MySQLParser.UNKNOWN_SYMBOL);
            this.setState(8636);
            this.match(MySQLParser.USER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public procedureParameter(): ProcedureParameterContext {
        let localctx = new ProcedureParameterContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1244, MySQLParser.RULE_procedureParameter);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8639);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1099, this.getContext())) {
                case 1:
                    {
                    this.setState(8638);
                    localctx._type_ = this.input().LT(1);
                    _la = this.input().LA(1);
                    if(!(_la === 272 || _la === 282 || _la === 415)) {
                        localctx._type_ = this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
            this.setState(8641);
            this.functionParameter();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionParameter(): FunctionParameterContext {
        let localctx = new FunctionParameterContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1246, MySQLParser.RULE_functionParameter);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8643);
            this.parameterName();
            this.setState(8644);
            this.typeWithOptCollate();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public collate(): CollateContext {
        let localctx = new CollateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1248, MySQLParser.RULE_collate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8646);
            this.match(MySQLParser.COLLATE_SYMBOL);
            this.setState(8647);
            this.collationName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public typeWithOptCollate(): TypeWithOptCollateContext {
        let localctx = new TypeWithOptCollateContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1250, MySQLParser.RULE_typeWithOptCollate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8649);
            this.dataType();
            this.setState(8651);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1100, this.getContext())) {
                case 1:
                    {
                    this.setState(8650);
                    this.collate();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public schemaIdentifierPair(): SchemaIdentifierPairContext {
        let localctx = new SchemaIdentifierPairContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1252, MySQLParser.RULE_schemaIdentifierPair);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8653);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8654);
            this.schemaRef();
            this.setState(8655);
            this.match(MySQLParser.COMMA_SYMBOL);
            this.setState(8656);
            this.schemaRef();
            this.setState(8657);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewRefList(): ViewRefListContext {
        let localctx = new ViewRefListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1254, MySQLParser.RULE_viewRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8659);
            this.viewRef();
            this.setState(8664);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(8660);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8661);
                this.viewRef();
                }
                }
                this.setState(8666);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public updateList(): UpdateListContext {
        let localctx = new UpdateListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1256, MySQLParser.RULE_updateList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8667);
            this.updateElement();
            this.setState(8672);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1102, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8668);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8669);
                    this.updateElement();
                    }
                    }
                }
                this.setState(8674);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1102, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public updateElement(): UpdateElementContext {
        let localctx = new UpdateElementContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1258, MySQLParser.RULE_updateElement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8675);
            this.columnRef();
            this.setState(8676);
            this.match(MySQLParser.EQUAL_OPERATOR);
            this.setState(8679);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1103, this.getContext())) {
                case 1:
                    {
                    this.setState(8677);
                    this.expr(0);
                    }
                    break;
                case 2:
                    {
                    this.setState(8678);
                    this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public charsetClause(): CharsetClauseContext {
        let localctx = new CharsetClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1260, MySQLParser.RULE_charsetClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8681);
            this.charset();
            this.setState(8682);
            this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldsClause(): FieldsClauseContext {
        let localctx = new FieldsClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1262, MySQLParser.RULE_fieldsClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8684);
            this.match(MySQLParser.COLUMNS_SYMBOL);
            this.setState(8686);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(8685);
                            this.fieldTerm();
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(8688);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 1104, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldTerm(): FieldTermContext {
        let localctx = new FieldTermContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1264, MySQLParser.RULE_fieldTerm);
        let _la: number;
        try {
            this.setState(8702);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.TERMINATED_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8690);
                this.match(MySQLParser.TERMINATED_SYMBOL);
                this.setState(8691);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8692);
                this.textString();
                }
                break;
            case MySQLParser.ENCLOSED_SYMBOL:
            case MySQLParser.OPTIONALLY_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8694);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 410) {
                    {
                    this.setState(8693);
                    this.match(MySQLParser.OPTIONALLY_SYMBOL);
                    }
                }

                this.setState(8696);
                this.match(MySQLParser.ENCLOSED_SYMBOL);
                this.setState(8697);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8698);
                this.textString();
                }
                break;
            case MySQLParser.ESCAPED_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(8699);
                this.match(MySQLParser.ESCAPED_SYMBOL);
                this.setState(8700);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8701);
                this.textString();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public linesClause(): LinesClauseContext {
        let localctx = new LinesClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1266, MySQLParser.RULE_linesClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8704);
            this.match(MySQLParser.LINES_SYMBOL);
            this.setState(8706);
            this.getErrorHandler().sync(this);
            _alt = 1;
            do {
                switch (_alt) {
                        case 1:
                            {
                            {
                            this.setState(8705);
                            this.lineTerm();
                            }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                        }
                        this.setState(8708);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 1107, this.getContext());
                    } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lineTerm(): LineTermContext {
        let localctx = new LineTermContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1268, MySQLParser.RULE_lineTerm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8710);
            _la = this.input().LA(1);
            if(!(_la === 551 || _la === 588)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(8711);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8712);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userList(): UserListContext {
        let localctx = new UserListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1270, MySQLParser.RULE_userList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8714);
            this.user();
            this.setState(8719);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1108, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8715);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8716);
                    this.user();
                    }
                    }
                }
                this.setState(8721);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1108, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUserList(): CreateUserListContext {
        let localctx = new CreateUserListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1272, MySQLParser.RULE_createUserList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8722);
            this.createUser();
            this.setState(8727);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1109, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(8723);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(8724);
                    this.createUser();
                    }
                    }
                }
                this.setState(8729);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1109, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUser(): CreateUserContext {
        let localctx = new CreateUserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1274, MySQLParser.RULE_createUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8730);
            this.user();
            this.setState(8740);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1112, this.getContext())) {
                case 1:
                    {
                    this.setState(8731);
                    this.identification();
                    this.setState(8733);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1110, this.getContext())) {
                        case 1:
                            {
                            this.setState(8732);
                            this.createUserWithMfa();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.setState(8735);
                    this.identifiedWithPlugin();
                    this.setState(8737);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1111, this.getContext())) {
                        case 1:
                            {
                            this.setState(8736);
                            this.initialAuth();
                            }
                            break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.setState(8739);
                    this.createUserWithMfa();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public createUserWithMfa(): CreateUserWithMfaContext {
        let localctx = new CreateUserWithMfaContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1276, MySQLParser.RULE_createUserWithMfa);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8742);
            this.match(MySQLParser.AND_SYMBOL);
            this.setState(8743);
            this.identification();
            this.setState(8746);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1113, this.getContext())) {
                case 1:
                    {
                    this.setState(8744);
                    this.match(MySQLParser.AND_SYMBOL);
                    this.setState(8745);
                    this.identification();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identification(): IdentificationContext {
        let localctx = new IdentificationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1278, MySQLParser.RULE_identification);
        try {
            this.setState(8754);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1114, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8748);
                    this.identifiedByPassword();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8749);
                    this.identifiedByRandomPassword();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8750);
                    this.identifiedWithPlugin();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(8751);
                    this.identifiedWithPluginAsAuth();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(8752);
                    this.identifiedWithPluginByPassword();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(8753);
                    this.identifiedWithPluginByRandomPassword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedByPassword(): IdentifiedByPasswordContext {
        let localctx = new IdentifiedByPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1280, MySQLParser.RULE_identifiedByPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8756);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8757);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8758);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext {
        let localctx = new IdentifiedByRandomPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1282, MySQLParser.RULE_identifiedByRandomPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8760);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8761);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8762);
            this.match(MySQLParser.RANDOM_SYMBOL);
            this.setState(8763);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext {
        let localctx = new IdentifiedWithPluginContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1284, MySQLParser.RULE_identifiedWithPlugin);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8765);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8766);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(8767);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext {
        let localctx = new IdentifiedWithPluginAsAuthContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1286, MySQLParser.RULE_identifiedWithPluginAsAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8769);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8770);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(8771);
            this.textOrIdentifier();
            this.setState(8772);
            this.match(MySQLParser.AS_SYMBOL);
            this.setState(8773);
            this.textStringHash();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext {
        let localctx = new IdentifiedWithPluginByPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1288, MySQLParser.RULE_identifiedWithPluginByPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8775);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8776);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(8777);
            this.textOrIdentifier();
            this.setState(8778);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8779);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext {
        let localctx = new IdentifiedWithPluginByRandomPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1290, MySQLParser.RULE_identifiedWithPluginByRandomPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8781);
            this.match(MySQLParser.IDENTIFIED_SYMBOL);
            this.setState(8782);
            this.match(MySQLParser.WITH_SYMBOL);
            this.setState(8783);
            this.textOrIdentifier();
            this.setState(8784);
            this.match(MySQLParser.BY_SYMBOL);
            this.setState(8785);
            this.match(MySQLParser.RANDOM_SYMBOL);
            this.setState(8786);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public initialAuth(): InitialAuthContext {
        let localctx = new InitialAuthContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1292, MySQLParser.RULE_initialAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8788);
            this.match(MySQLParser.INITIAL_SYMBOL);
            this.setState(8789);
            this.match(MySQLParser.AUTHENTICATION_SYMBOL);
            this.setState(8793);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1115, this.getContext())) {
                case 1:
                    {
                    this.setState(8790);
                    this.identifiedByRandomPassword();
                    }
                    break;
                case 2:
                    {
                    this.setState(8791);
                    this.identifiedWithPluginAsAuth();
                    }
                    break;
                case 3:
                    {
                    this.setState(8792);
                    this.identifiedByPassword();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext {
        let localctx = new RetainCurrentPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1294, MySQLParser.RULE_retainCurrentPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8795);
            this.match(MySQLParser.RETAIN_SYMBOL);
            this.setState(8796);
            this.match(MySQLParser.CURRENT_SYMBOL);
            this.setState(8797);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public discardOldPassword(): DiscardOldPasswordContext {
        let localctx = new DiscardOldPasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1296, MySQLParser.RULE_discardOldPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8799);
            this.match(MySQLParser.DISCARD_SYMBOL);
            this.setState(8800);
            this.match(MySQLParser.OLD_SYMBOL);
            this.setState(8801);
            this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userRegistration(): UserRegistrationContext {
        let localctx = new UserRegistrationContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1298, MySQLParser.RULE_userRegistration);
        try {
            this.setState(8818);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1116, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8803);
                    this.factor();
                    this.setState(8804);
                    this.match(MySQLParser.INITIATE_SYMBOL);
                    this.setState(8805);
                    this.match(MySQLParser.REGISTRATION_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8807);
                    this.factor();
                    this.setState(8808);
                    this.match(MySQLParser.UNREGISTER_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(8810);
                    this.factor();
                    this.setState(8811);
                    this.match(MySQLParser.FINISH_SYMBOL);
                    this.setState(8812);
                    this.match(MySQLParser.REGISTRATION_SYMBOL);
                    this.setState(8813);
                    this.match(MySQLParser.SET_SYMBOL);
                    this.setState(8814);
                    this.match(MySQLParser.CHALLENGE_RESPONSE_SYMBOL);
                    this.setState(8815);
                    this.match(MySQLParser.AS_SYMBOL);
                    this.setState(8816);
                    this.textStringHash();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public factor(): FactorContext {
        let localctx = new FactorContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1300, MySQLParser.RULE_factor);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8820);
            this.numLiteral();
            this.setState(8821);
            this.match(MySQLParser.FACTOR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public replacePassword(): ReplacePasswordContext {
        let localctx = new ReplacePasswordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1302, MySQLParser.RULE_replacePassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8823);
            this.match(MySQLParser.REPLACE_SYMBOL);
            this.setState(8824);
            this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext {
        let localctx = new UserIdentifierOrTextContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1304, MySQLParser.RULE_userIdentifierOrText);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8826);
            this.textOrIdentifier();
            this.setState(8828);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1117, this.getContext())) {
                case 1:
                    {
                    this.setState(8827);
                    this.userVariable();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public user(): UserContext {
        let localctx = new UserContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1306, MySQLParser.RULE_user);
        try {
            this.setState(8835);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1119, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8830);
                    this.userIdentifierOrText();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8831);
                    this.match(MySQLParser.CURRENT_USER_SYMBOL);
                    this.setState(8833);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1118, this.getContext())) {
                        case 1:
                            {
                            this.setState(8832);
                            this.parentheses();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public likeClause(): LikeClauseContext {
        let localctx = new LikeClauseContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1308, MySQLParser.RULE_likeClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8837);
            this.match(MySQLParser.LIKE_SYMBOL);
            this.setState(8838);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public likeOrWhere(): LikeOrWhereContext {
        let localctx = new LikeOrWhereContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1310, MySQLParser.RULE_likeOrWhere);
        try {
            this.setState(8842);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.LIKE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(8840);
                this.likeClause();
                }
                break;
            case MySQLParser.WHERE_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(8841);
                this.whereClause();
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public onlineOption(): OnlineOptionContext {
        let localctx = new OnlineOptionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1312, MySQLParser.RULE_onlineOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8844);
            _la = this.input().LA(1);
            if(!(_la === 399 || _la === 403)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public noWriteToBinLog(): NoWriteToBinLogContext {
        let localctx = new NoWriteToBinLogContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1314, MySQLParser.RULE_noWriteToBinLog);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8846);
            _la = this.input().LA(1);
            if(!(_la === 312 || _la === 394)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public usePartition(): UsePartitionContext {
        let localctx = new UsePartitionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1316, MySQLParser.RULE_usePartition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8848);
            this.match(MySQLParser.PARTITION_SYMBOL);
            this.setState(8849);
            this.identifierListWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public fieldIdentifier(): FieldIdentifierContext {
        let localctx = new FieldIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1318, MySQLParser.RULE_fieldIdentifier);
        try {
            this.setState(8856);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1122, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8851);
                    this.dotIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8852);
                    this.qualifiedIdentifier();
                    this.setState(8854);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1121, this.getContext())) {
                        case 1:
                            {
                            this.setState(8853);
                            this.dotIdentifier();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnName(): ColumnNameContext {
        let localctx = new ColumnNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1320, MySQLParser.RULE_columnName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8858);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnInternalRef(): ColumnInternalRefContext {
        let localctx = new ColumnInternalRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1322, MySQLParser.RULE_columnInternalRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8860);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnInternalRefList(): ColumnInternalRefListContext {
        let localctx = new ColumnInternalRefListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1324, MySQLParser.RULE_columnInternalRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8862);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(8863);
            this.columnInternalRef();
            this.setState(8868);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(8864);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8865);
                this.columnInternalRef();
                }
                }
                this.setState(8870);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(8871);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public columnRef(): ColumnRefContext {
        let localctx = new ColumnRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1326, MySQLParser.RULE_columnRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8873);
            this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public insertIdentifier(): InsertIdentifierContext {
        let localctx = new InsertIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1328, MySQLParser.RULE_insertIdentifier);
        try {
            this.setState(8877);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1124, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8875);
                    this.columnRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8876);
                    this.tableWild();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexName(): IndexNameContext {
        let localctx = new IndexNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1330, MySQLParser.RULE_indexName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8879);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public indexRef(): IndexRefContext {
        let localctx = new IndexRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1332, MySQLParser.RULE_indexRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8881);
            this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableWild(): TableWildContext {
        let localctx = new TableWildContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1334, MySQLParser.RULE_tableWild);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8883);
            this.identifier();
            this.setState(8884);
            this.match(MySQLParser.DOT_SYMBOL);
            this.setState(8888);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1125, this.getContext())) {
                case 1:
                    {
                    this.setState(8885);
                    this.identifier();
                    this.setState(8886);
                    this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
            }
            this.setState(8890);
            this.match(MySQLParser.MULT_OPERATOR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public schemaName(): SchemaNameContext {
        let localctx = new SchemaNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1336, MySQLParser.RULE_schemaName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8892);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public schemaRef(): SchemaRefContext {
        let localctx = new SchemaRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1338, MySQLParser.RULE_schemaRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8894);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public procedureName(): ProcedureNameContext {
        let localctx = new ProcedureNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1340, MySQLParser.RULE_procedureName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8896);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public procedureRef(): ProcedureRefContext {
        let localctx = new ProcedureRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1342, MySQLParser.RULE_procedureRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8898);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionName(): FunctionNameContext {
        let localctx = new FunctionNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1344, MySQLParser.RULE_functionName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8900);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public functionRef(): FunctionRefContext {
        let localctx = new FunctionRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1346, MySQLParser.RULE_functionRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8902);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public triggerName(): TriggerNameContext {
        let localctx = new TriggerNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1348, MySQLParser.RULE_triggerName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8904);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public triggerRef(): TriggerRefContext {
        let localctx = new TriggerRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1350, MySQLParser.RULE_triggerRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8906);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewName(): ViewNameContext {
        let localctx = new ViewNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1352, MySQLParser.RULE_viewName);
        try {
            this.setState(8910);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1126, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8908);
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8909);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public viewRef(): ViewRefContext {
        let localctx = new ViewRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1354, MySQLParser.RULE_viewRef);
        try {
            this.setState(8914);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1127, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8912);
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8913);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablespaceName(): TablespaceNameContext {
        let localctx = new TablespaceNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1356, MySQLParser.RULE_tablespaceName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8916);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tablespaceRef(): TablespaceRefContext {
        let localctx = new TablespaceRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1358, MySQLParser.RULE_tablespaceRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8918);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logfileGroupName(): LogfileGroupNameContext {
        let localctx = new LogfileGroupNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1360, MySQLParser.RULE_logfileGroupName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8920);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public logfileGroupRef(): LogfileGroupRefContext {
        let localctx = new LogfileGroupRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1362, MySQLParser.RULE_logfileGroupRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8922);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public eventName(): EventNameContext {
        let localctx = new EventNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1364, MySQLParser.RULE_eventName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8924);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public eventRef(): EventRefContext {
        let localctx = new EventRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1366, MySQLParser.RULE_eventRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8926);
            this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public udfName(): UdfNameContext {
        let localctx = new UdfNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1368, MySQLParser.RULE_udfName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8928);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverName(): ServerNameContext {
        let localctx = new ServerNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1370, MySQLParser.RULE_serverName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8930);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public serverRef(): ServerRefContext {
        let localctx = new ServerRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1372, MySQLParser.RULE_serverRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8932);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public engineRef(): EngineRefContext {
        let localctx = new EngineRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1374, MySQLParser.RULE_engineRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8934);
            this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableName(): TableNameContext {
        let localctx = new TableNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1376, MySQLParser.RULE_tableName);
        try {
            this.setState(8938);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1128, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8936);
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8937);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public filterTableRef(): FilterTableRefContext {
        let localctx = new FilterTableRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1378, MySQLParser.RULE_filterTableRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8940);
            this.schemaRef();
            this.setState(8941);
            this.dotIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableRefWithWildcard(): TableRefWithWildcardContext {
        let localctx = new TableRefWithWildcardContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1380, MySQLParser.RULE_tableRefWithWildcard);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8943);
            this.identifier();
            this.setState(8951);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1130, this.getContext())) {
                case 1:
                    {
                    this.setState(8944);
                    this.match(MySQLParser.DOT_SYMBOL);
                    this.setState(8945);
                    this.match(MySQLParser.MULT_OPERATOR);
                    }
                    break;
                case 2:
                    {
                    this.setState(8946);
                    this.dotIdentifier();
                    this.setState(8949);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 28) {
                        {
                        this.setState(8947);
                        this.match(MySQLParser.DOT_SYMBOL);
                        this.setState(8948);
                        this.match(MySQLParser.MULT_OPERATOR);
                        }
                    }

                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableRef(): TableRefContext {
        let localctx = new TableRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1382, MySQLParser.RULE_tableRef);
        try {
            this.setState(8955);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1131, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8953);
                    this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8954);
                    this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableRefList(): TableRefListContext {
        let localctx = new TableRefListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1384, MySQLParser.RULE_tableRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8957);
            this.tableRef();
            this.setState(8962);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(8958);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8959);
                this.tableRef();
                }
                }
                this.setState(8964);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public tableAliasRefList(): TableAliasRefListContext {
        let localctx = new TableAliasRefListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1386, MySQLParser.RULE_tableAliasRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8965);
            this.tableRefWithWildcard();
            this.setState(8970);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(8966);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8967);
                this.tableRefWithWildcard();
                }
                }
                this.setState(8972);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public parameterName(): ParameterNameContext {
        let localctx = new ParameterNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1388, MySQLParser.RULE_parameterName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8973);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labelIdentifier(): LabelIdentifierContext {
        let localctx = new LabelIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1390, MySQLParser.RULE_labelIdentifier);
        try {
            this.setState(8977);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1134, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8975);
                    this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8976);
                    this.labelKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labelRef(): LabelRefContext {
        let localctx = new LabelRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1392, MySQLParser.RULE_labelRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8979);
            this.labelIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleIdentifier(): RoleIdentifierContext {
        let localctx = new RoleIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1394, MySQLParser.RULE_roleIdentifier);
        try {
            this.setState(8983);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1135, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8981);
                    this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8982);
                    this.roleKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public pluginRef(): PluginRefContext {
        let localctx = new PluginRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1396, MySQLParser.RULE_pluginRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8985);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public componentRef(): ComponentRefContext {
        let localctx = new ComponentRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1398, MySQLParser.RULE_componentRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8987);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public resourceGroupRef(): ResourceGroupRefContext {
        let localctx = new ResourceGroupRefContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1400, MySQLParser.RULE_resourceGroupRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8989);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public windowName(): WindowNameContext {
        let localctx = new WindowNameContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1402, MySQLParser.RULE_windowName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(8991);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public pureIdentifier(): PureIdentifierContext {
        let localctx = new PureIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1404, MySQLParser.RULE_pureIdentifier);
        let _la: number;
        try {
            this.setState(8996);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1136, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8993);
                    _la = this.input().LA(1);
                    if(!(_la === 820 || _la === 822)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8994);
                    if (!(this.isSqlModeActive(SqlMode.AnsiQuotes))) {
                        throw this.createFailedPredicateException("this.isSqlModeActive(SqlMode.AnsiQuotes)");
                    }
                    this.setState(8995);
                    this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifier(): IdentifierContext {
        let localctx = new IdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1406, MySQLParser.RULE_identifier);
        try {
            this.setState(9000);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1137, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(8998);
                    this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(8999);
                    this.identifierKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierList(): IdentifierListContext {
        let localctx = new IdentifierListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1408, MySQLParser.RULE_identifierList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9002);
            this.identifier();
            this.setState(9007);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1138, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(9003);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(9004);
                    this.identifier();
                    }
                    }
                }
                this.setState(9009);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1138, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        let localctx = new IdentifierListWithParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1410, MySQLParser.RULE_identifierListWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9010);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(9011);
            this.identifierList();
            this.setState(9012);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        let localctx = new QualifiedIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1412, MySQLParser.RULE_qualifiedIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9014);
            this.identifier();
            this.setState(9016);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1139, this.getContext())) {
                case 1:
                    {
                    this.setState(9015);
                    this.dotIdentifier();
                    }
                    break;
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public simpleIdentifier(): SimpleIdentifierContext {
        let localctx = new SimpleIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1414, MySQLParser.RULE_simpleIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9018);
            this.identifier();
            this.setState(9023);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            if (_la === 28) {
                {
                this.setState(9019);
                this.dotIdentifier();
                this.setState(9021);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 28) {
                    {
                    this.setState(9020);
                    this.dotIdentifier();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public dotIdentifier(): DotIdentifierContext {
        let localctx = new DotIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1416, MySQLParser.RULE_dotIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9025);
            this.match(MySQLParser.DOT_SYMBOL);
            this.setState(9026);
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ulong_number(): Ulong_numberContext {
        let localctx = new Ulong_numberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1418, MySQLParser.RULE_ulong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9028);
            _la = this.input().LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 13) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public real_ulong_number(): Real_ulong_numberContext {
        let localctx = new Real_ulong_numberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1420, MySQLParser.RULE_real_ulong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9030);
            _la = this.input().LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 44)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public ulonglongNumber(): UlonglongNumberContext {
        let localctx = new UlonglongNumberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1422, MySQLParser.RULE_ulonglongNumber);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9032);
            _la = this.input().LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0) || _la === 46 || _la === 47)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        let localctx = new Real_ulonglong_numberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1424, MySQLParser.RULE_real_ulonglong_number);
        try {
            this.setState(9039);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1142, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9034);
                    this.match(MySQLParser.INT_NUMBER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9035);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(9036);
                    this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(9037);
                    this.match(MySQLParser.ULONGLONG_NUMBER);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(9038);
                    this.match(MySQLParser.LONG_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signedLiteral(): SignedLiteralContext {
        let localctx = new SignedLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1426, MySQLParser.RULE_signedLiteral);
        try {
            this.setState(9046);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1143, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9041);
                    this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9042);
                    this.match(MySQLParser.PLUS_OPERATOR);
                    this.setState(9043);
                    this.ulong_number();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(9044);
                    this.match(MySQLParser.MINUS_OPERATOR);
                    this.setState(9045);
                    this.ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext {
        let localctx = new SignedLiteralOrNullContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1428, MySQLParser.RULE_signedLiteralOrNull);
        try {
            this.setState(9051);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1144, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9048);
                    this.signedLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9049);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(9050);
                    this.nullAsLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public literal(): LiteralContext {
        let localctx = new LiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1430, MySQLParser.RULE_literal);
        let _la: number;
        try {
            this.setState(9062);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1146, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9053);
                    this.textLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9054);
                    this.numLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(9055);
                    this.temporalLiteral();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(9056);
                    this.nullLiteral();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                    this.setState(9057);
                    this.boolLiteral();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                    this.setState(9059);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                    if (_la === 819) {
                        {
                        this.setState(9058);
                        this.match(MySQLParser.UNDERSCORE_CHARSET);
                        }
                    }

                    this.setState(9061);
                    _la = this.input().LA(1);
                    if(!(_la === 44 || _la === 45)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public literalOrNull(): LiteralOrNullContext {
        let localctx = new LiteralOrNullContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1432, MySQLParser.RULE_literalOrNull);
        try {
            this.setState(9067);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1147, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9064);
                    this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9065);
                    if (!(this.serverVersion >= 80024)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                    }
                    this.setState(9066);
                    this.nullAsLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nullAsLiteral(): NullAsLiteralContext {
        let localctx = new NullAsLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1434, MySQLParser.RULE_nullAsLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9069);
            this.match(MySQLParser.NULL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public stringList(): StringListContext {
        let localctx = new StringListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1436, MySQLParser.RULE_stringList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9071);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(9072);
            this.textString();
            this.setState(9077);
            this.getErrorHandler().sync(this);
            _la = this.input().LA(1);
            while (_la === 29) {
                {
                {
                this.setState(9073);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(9074);
                this.textString();
                }
                }
                this.setState(9079);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
            }
            this.setState(9080);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textStringLiteral(): TextStringLiteralContext {
        let localctx = new TextStringLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1438, MySQLParser.RULE_textStringLiteral);
        try {
            this.setState(9085);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1149, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9082);
                    localctx._value = this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9083);
                    if (!(!this.isSqlModeActive(SqlMode.AnsiQuotes))) {
                        throw this.createFailedPredicateException("!this.isSqlModeActive(SqlMode.AnsiQuotes)");
                    }
                    this.setState(9084);
                    localctx._value = this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textString(): TextStringContext {
        let localctx = new TextStringContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1440, MySQLParser.RULE_textString);
        try {
            this.setState(9090);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1150, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9087);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9088);
                    this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(9089);
                    this.match(MySQLParser.BIN_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textStringHash(): TextStringHashContext {
        let localctx = new TextStringHashContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1442, MySQLParser.RULE_textStringHash);
        try {
            this.setState(9095);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1151, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9092);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9093);
                    if (!(this.serverVersion >= 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                    }
                    this.setState(9094);
                    this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textLiteral(): TextLiteralContext {
        let localctx = new TextLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1444, MySQLParser.RULE_textLiteral);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9102);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1153, this.getContext())) {
                case 1:
                    {
                    this.setState(9098);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1152, this.getContext())) {
                        case 1:
                            {
                            this.setState(9097);
                            this.match(MySQLParser.UNDERSCORE_CHARSET);
                            }
                            break;
                    }
                    this.setState(9100);
                    this.textStringLiteral();
                    }
                    break;
                case 2:
                    {
                    this.setState(9101);
                    this.match(MySQLParser.NCHAR_TEXT);
                    }
                    break;
            }
            this.setState(9107);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1154, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(9104);
                    this.textStringLiteral();
                    }
                    }
                }
                this.setState(9109);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1154, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        let localctx = new TextStringNoLinebreakContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1446, MySQLParser.RULE_textStringNoLinebreak);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9110);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textStringLiteralList(): TextStringLiteralListContext {
        let localctx = new TextStringLiteralListContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1448, MySQLParser.RULE_textStringLiteralList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9112);
            this.textStringLiteral();
            this.setState(9117);
            this.getErrorHandler().sync(this);
            _alt = this.getInterpreter().adaptivePredict(this.input(), 1155, this.getContext());
            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    {
                    {
                    this.setState(9113);
                    this.match(MySQLParser.COMMA_SYMBOL);
                    this.setState(9114);
                    this.textStringLiteral();
                    }
                    }
                }
                this.setState(9119);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1155, this.getContext());
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public numLiteral(): NumLiteralContext {
        let localctx = new NumLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1450, MySQLParser.RULE_numLiteral);
        try {
            this.setState(9123);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.INT_NUMBER:
            case MySQLParser.LONG_NUMBER:
            case MySQLParser.ULONGLONG_NUMBER:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(9120);
                this.int64Literal();
                }
                break;
            case MySQLParser.DECIMAL_NUMBER:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(9121);
                this.match(MySQLParser.DECIMAL_NUMBER);
                }
                break;
            case MySQLParser.FLOAT_NUMBER:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(9122);
                this.match(MySQLParser.FLOAT_NUMBER);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public boolLiteral(): BoolLiteralContext {
        let localctx = new BoolLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1452, MySQLParser.RULE_boolLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9125);
            _la = this.input().LA(1);
            if(!(_la === 218 || _la === 605)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public nullLiteral(): NullLiteralContext {
        let localctx = new NullLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1454, MySQLParser.RULE_nullLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9127);
            _la = this.input().LA(1);
            if(!(_la === 42 || _la === 395)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public int64Literal(): Int64LiteralContext {
        let localctx = new Int64LiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1456, MySQLParser.RULE_int64Literal);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9129);
            _la = this.input().LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 56) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public temporalLiteral(): TemporalLiteralContext {
        let localctx = new TemporalLiteralContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1458, MySQLParser.RULE_temporalLiteral);
        try {
            this.setState(9137);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.DATE_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(9131);
                this.match(MySQLParser.DATE_SYMBOL);
                this.setState(9132);
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            case MySQLParser.TIME_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(9133);
                this.match(MySQLParser.TIME_SYMBOL);
                this.setState(9134);
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            case MySQLParser.TIMESTAMP_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(9135);
                this.match(MySQLParser.TIMESTAMP_SYMBOL);
                this.setState(9136);
                this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public floatOptions(): FloatOptionsContext {
        let localctx = new FloatOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1460, MySQLParser.RULE_floatOptions);
        try {
            this.setState(9141);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1158, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9139);
                    this.fieldLength();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9140);
                    this.precision();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public standardFloatOptions(): StandardFloatOptionsContext {
        let localctx = new StandardFloatOptionsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1462, MySQLParser.RULE_standardFloatOptions);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9143);
            this.precision();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public precision(): PrecisionContext {
        let localctx = new PrecisionContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1464, MySQLParser.RULE_precision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9145);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(9146);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(9147);
            this.match(MySQLParser.COMMA_SYMBOL);
            this.setState(9148);
            this.match(MySQLParser.INT_NUMBER);
            this.setState(9149);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        let localctx = new TextOrIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1466, MySQLParser.RULE_textOrIdentifier);
        try {
            this.setState(9153);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1159, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9151);
                    this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9152);
                    this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lValueIdentifier(): LValueIdentifierContext {
        let localctx = new LValueIdentifierContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1468, MySQLParser.RULE_lValueIdentifier);
        try {
            this.setState(9157);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1160, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9155);
                    this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9156);
                    this.lValueKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext {
        let localctx = new RoleIdentifierOrTextContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1470, MySQLParser.RULE_roleIdentifierOrText);
        try {
            this.setState(9161);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1161, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9159);
                    this.roleIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9160);
                    this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public sizeNumber(): SizeNumberContext {
        let localctx = new SizeNumberContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1472, MySQLParser.RULE_sizeNumber);
        try {
            this.setState(9165);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1162, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9163);
                    this.real_ulonglong_number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9164);
                    this.pureIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public parentheses(): ParenthesesContext {
        let localctx = new ParenthesesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1474, MySQLParser.RULE_parentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9167);
            this.match(MySQLParser.OPEN_PAR_SYMBOL);
            this.setState(9168);
            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public equal(): EqualContext {
        let localctx = new EqualContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1476, MySQLParser.RULE_equal);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9170);
            _la = this.input().LA(1);
            if(!(_la === 6 || _la === 7)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public optionType(): OptionTypeContext {
        let localctx = new OptionTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1478, MySQLParser.RULE_optionType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9172);
            _la = this.input().LA(1);
            if(!(_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public rvalueSystemVariableType(): RvalueSystemVariableTypeContext {
        let localctx = new RvalueSystemVariableTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1480, MySQLParser.RULE_rvalueSystemVariableType);
        try {
            this.setState(9180);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
            case MySQLParser.GLOBAL_SYMBOL:
                this.enterOuterAlt(localctx, 1);
                {
                this.setState(9174);
                this.match(MySQLParser.GLOBAL_SYMBOL);
                this.setState(9175);
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            case MySQLParser.LOCAL_SYMBOL:
                this.enterOuterAlt(localctx, 2);
                {
                this.setState(9176);
                this.match(MySQLParser.LOCAL_SYMBOL);
                this.setState(9177);
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            case MySQLParser.SESSION_SYMBOL:
                this.enterOuterAlt(localctx, 3);
                {
                this.setState(9178);
                this.match(MySQLParser.SESSION_SYMBOL);
                this.setState(9179);
                this.match(MySQLParser.DOT_SYMBOL);
                }
                break;
            default:
                throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public setVarIdentType(): SetVarIdentTypeContext {
        let localctx = new SetVarIdentTypeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1482, MySQLParser.RULE_setVarIdentType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9182);
            _la = this.input().LA(1);
            if(!(_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            this.setState(9183);
            this.match(MySQLParser.DOT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public jsonAttribute(): JsonAttributeContext {
        let localctx = new JsonAttributeContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1484, MySQLParser.RULE_jsonAttribute);
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9185);
            this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeyword(): IdentifierKeywordContext {
        let localctx = new IdentifierKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1486, MySQLParser.RULE_identifierKeyword);
        try {
            this.setState(9203);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1166, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9187);
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.setState(9194);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1164, this.getContext())) {
                        case 1:
                            {
                            this.setState(9188);
                            this.labelKeyword();
                            }
                            break;
                        case 2:
                            {
                            this.setState(9189);
                            this.roleOrIdentifierKeyword();
                            }
                            break;
                        case 3:
                            {
                            this.setState(9190);
                            this.match(MySQLParser.EXECUTE_SYMBOL);
                            }
                            break;
                        case 4:
                            {
                            this.setState(9191);
                            this.match(MySQLParser.SHUTDOWN_SYMBOL);
                            }
                            break;
                        case 5:
                            {
                            this.setState(9192);
                            if (!(this.serverVersion >= 80011)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80011");
                            }
                            this.setState(9193);
                            this.match(MySQLParser.RESTART_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9201);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1165, this.getContext())) {
                        case 1:
                            {
                            this.setState(9196);
                            this.identifierKeywordsUnambiguous();
                            }
                            break;
                        case 2:
                            {
                            this.setState(9197);
                            this.identifierKeywordsAmbiguous1RolesAndLabels();
                            }
                            break;
                        case 3:
                            {
                            this.setState(9198);
                            this.identifierKeywordsAmbiguous2Labels();
                            }
                            break;
                        case 4:
                            {
                            this.setState(9199);
                            this.identifierKeywordsAmbiguous3Roles();
                            }
                            break;
                        case 5:
                            {
                            this.setState(9200);
                            this.identifierKeywordsAmbiguous4SystemVariables();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
        let localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1488, MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9205);
            _la = this.input().LA(1);
            if(!(_la === 208 || _la === 522 || _la === 722)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
        let localctx = new IdentifierKeywordsAmbiguous2LabelsContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1490, MySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9207);
            _la = this.input().LA(1);
            if(!(((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 100663809) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & 2147811333) !== 0) || _la === 163 || _la === 183 || _la === 195 || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & 75497475) !== 0) || ((((_la - 266)) & ~0x1F) === 0 && ((1 << (_la - 266)) & 2147485697) !== 0) || _la === 392 || _la === 433 || _la === 435 || ((((_la - 472)) & ~0x1F) === 0 && ((1 << (_la - 472)) & 16785409) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & 2621441) !== 0) || _la === 553 || _la === 562 || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & 1537) !== 0) || _la === 659 || _la === 685)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public labelKeyword(): LabelKeywordContext {
        let localctx = new LabelKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1492, MySQLParser.RULE_labelKeyword);
        try {
            this.setState(9227);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1169, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9209);
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.setState(9220);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1167, this.getContext())) {
                        case 1:
                            {
                            this.setState(9210);
                            this.roleOrLabelKeyword();
                            }
                            break;
                        case 2:
                            {
                            this.setState(9211);
                            this.match(MySQLParser.EVENT_SYMBOL);
                            }
                            break;
                        case 3:
                            {
                            this.setState(9212);
                            this.match(MySQLParser.FILE_SYMBOL);
                            }
                            break;
                        case 4:
                            {
                            this.setState(9213);
                            this.match(MySQLParser.NONE_SYMBOL);
                            }
                            break;
                        case 5:
                            {
                            this.setState(9214);
                            this.match(MySQLParser.PROCESS_SYMBOL);
                            }
                            break;
                        case 6:
                            {
                            this.setState(9215);
                            this.match(MySQLParser.PROXY_SYMBOL);
                            }
                            break;
                        case 7:
                            {
                            this.setState(9216);
                            this.match(MySQLParser.RELOAD_SYMBOL);
                            }
                            break;
                        case 8:
                            {
                            this.setState(9217);
                            this.match(MySQLParser.REPLICATION_SYMBOL);
                            }
                            break;
                        case 9:
                            {
                            this.setState(9218);
                            this.match(MySQLParser.RESOURCE_SYMBOL);
                            }
                            break;
                        case 10:
                            {
                            this.setState(9219);
                            this.match(MySQLParser.SUPER_SYMBOL);
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9225);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1168, this.getContext())) {
                        case 1:
                            {
                            this.setState(9222);
                            this.identifierKeywordsUnambiguous();
                            }
                            break;
                        case 2:
                            {
                            this.setState(9223);
                            this.identifierKeywordsAmbiguous3Roles();
                            }
                            break;
                        case 3:
                            {
                            this.setState(9224);
                            this.identifierKeywordsAmbiguous4SystemVariables();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
        let localctx = new IdentifierKeywordsAmbiguous3RolesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1494, MySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9229);
            _la = this.input().LA(1);
            if(!(_la === 205 || _la === 222 || _la === 389 || ((((_la - 441)) & ~0x1F) === 0 && ((1 << (_la - 441)) & 134217745) !== 0) || _la === 476 || _la === 575 || _la === 717)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
        let localctx = new IdentifierKeywordsUnambiguousContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1496, MySQLParser.RULE_identifierKeywordsUnambiguous);
        let _la: number;
        try {
            this.setState(9236);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1170, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9231);
                    _la = this.input().LA(1);
                    if(!(((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & 553395451) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & 2115707065) !== 0) || ((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 1110368091) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4166533745) !== 0) || ((((_la - 186)) & ~0x1F) === 0 && ((1 << (_la - 186)) & 1983315271) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & 664977651) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & 562341425) !== 0) || ((((_la - 285)) & ~0x1F) === 0 && ((1 << (_la - 285)) & 3540820635) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 1870397437) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & 4261369439) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 3212876457) !== 0) || ((((_la - 425)) & ~0x1F) === 0 && ((1 << (_la - 425)) & 2312001663) !== 0) || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & 1206997991) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & 2520168215) !== 0) || ((((_la - 525)) & ~0x1F) === 0 && ((1 << (_la - 525)) & 3935683061) !== 0) || ((((_la - 557)) & ~0x1F) === 0 && ((1 << (_la - 557)) & 2067299905) !== 0) || ((((_la - 589)) & ~0x1F) === 0 && ((1 << (_la - 589)) & 1105997947) !== 0) || ((((_la - 622)) & ~0x1F) === 0 && ((1 << (_la - 622)) & 256004213) !== 0) || ((((_la - 654)) & ~0x1F) === 0 && ((1 << (_la - 654)) & 864412887) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & 2680595973) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & 127385595) !== 0) || ((((_la - 753)) & ~0x1F) === 0 && ((1 << (_la - 753)) & 4294967023) !== 0) || ((((_la - 785)) & ~0x1F) === 0 && ((1 << (_la - 785)) & 262143) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9232);
                    if (!(this.serverVersion >= 80019)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                    }
                    this.setState(9233);
                    _la = this.input().LA(1);
                    if(!(_la === 592 || _la === 595 || ((((_la - 739)) & ~0x1F) === 0 && ((1 << (_la - 739)) & 16381) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(9234);
                    if (!(this.serverVersion >= 80200)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80200");
                    }
                    this.setState(9235);
                    _la = this.input().LA(1);
                    if(!(((((_la - 804)) & ~0x1F) === 0 && ((1 << (_la - 804)) & 2237) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleKeyword(): RoleKeywordContext {
        let localctx = new RoleKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1498, MySQLParser.RULE_roleKeyword);
        try {
            this.setState(9248);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1173, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9238);
                    if (!(this.serverVersion < 80017)) {
                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                    }
                    this.setState(9241);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1171, this.getContext())) {
                        case 1:
                            {
                            this.setState(9239);
                            this.roleOrLabelKeyword();
                            }
                            break;
                        case 2:
                            {
                            this.setState(9240);
                            this.roleOrIdentifierKeyword();
                            }
                            break;
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9246);
                    this.getErrorHandler().sync(this);
                    switch (this.getInterpreter().adaptivePredict(this.input(), 1172, this.getContext())) {
                        case 1:
                            {
                            this.setState(9243);
                            this.identifierKeywordsUnambiguous();
                            }
                            break;
                        case 2:
                            {
                            this.setState(9244);
                            this.identifierKeywordsAmbiguous2Labels();
                            }
                            break;
                        case 3:
                            {
                            this.setState(9245);
                            this.identifierKeywordsAmbiguous4SystemVariables();
                            }
                            break;
                    }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public lValueKeyword(): LValueKeywordContext {
        let localctx = new LValueKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1500, MySQLParser.RULE_lValueKeyword);
        try {
            this.setState(9254);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1174, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9250);
                    this.identifierKeywordsUnambiguous();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9251);
                    this.identifierKeywordsAmbiguous1RolesAndLabels();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                    this.setState(9252);
                    this.identifierKeywordsAmbiguous2Labels();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                    this.setState(9253);
                    this.identifierKeywordsAmbiguous3Roles();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
        let localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1502, MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9256);
            _la = this.input().LA(1);
            if(!(_la === 246 || _la === 312 || _la === 516 || _la === 666 || _la === 681)) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
        let localctx = new RoleOrIdentifierKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1504, MySQLParser.RULE_roleOrIdentifierKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
            this.setState(9258);
            _la = this.input().LA(1);
            if(!(((((_la - 49)) & ~0x1F) === 0 && ((1 << (_la - 49)) & 42009601) !== 0) || ((((_la - 90)) & ~0x1F) === 0 && ((1 << (_la - 90)) & 1342722051) !== 0) || _la === 133 || _la === 163 || _la === 183 || _la === 195 || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & 343949347) !== 0) || _la === 277 || _la === 297 || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 2298552321) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & 21) !== 0) || ((((_la - 469)) & ~0x1F) === 0 && ((1 << (_la - 469)) & 134545417) !== 0) || ((((_la - 505)) & ~0x1F) === 0 && ((1 << (_la - 505)) & 103288865) !== 0) || _la === 553 || _la === 562 || ((((_la - 606)) & ~0x1F) === 0 && ((1 << (_la - 606)) & 263681) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & 536897545) !== 0) || ((((_la - 728)) & ~0x1F) === 0 && ((1 << (_la - 728)) & 15) !== 0))) {
            this.getErrorHandler().recoverInline(this);
            }
            else {
                this.getErrorHandler().reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
        let localctx = new RoleOrLabelKeywordContext(this.getContext(), this.getState());
        this.enterRule(localctx, 1506, MySQLParser.RULE_roleOrLabelKeyword);
        let _la: number;
        try {
            this.setState(9263);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1175, this.getContext())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                    this.setState(9260);
                    _la = this.input().LA(1);
                    if(!(((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & 2419986557) !== 0) || ((((_la - 84)) & ~0x1F) === 0 && ((1 << (_la - 84)) & 1841521687) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 138796011) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4166533745) !== 0) || ((((_la - 186)) & ~0x1F) === 0 && ((1 << (_la - 186)) & 1914109255) !== 0) || ((((_la - 219)) & ~0x1F) === 0 && ((1 << (_la - 219)) & 790790387) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & 562341409) !== 0) || ((((_la - 285)) & ~0x1F) === 0 && ((1 << (_la - 285)) & 3675038363) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 1870397437) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & 4261369439) !== 0) || ((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 3137340073) !== 0) || ((((_la - 425)) & ~0x1F) === 0 && ((1 << (_la - 425)) & 2312001599) !== 0) || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & 133252071) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & 2383853335) !== 0) || ((((_la - 525)) & ~0x1F) === 0 && ((1 << (_la - 525)) & 3935682965) !== 0) || ((((_la - 557)) & ~0x1F) === 0 && ((1 << (_la - 557)) & 2067562049) !== 0) || ((((_la - 589)) & ~0x1F) === 0 && ((1 << (_la - 589)) & 1107046523) !== 0) || ((((_la - 622)) & ~0x1F) === 0 && ((1 << (_la - 622)) & 256000113) !== 0) || ((((_la - 655)) & ~0x1F) === 0 && ((1 << (_la - 655)) & 969015913) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & 2680595973) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & 110769) !== 0) || _la === 757)) {
                    this.getErrorHandler().recoverInline(this);
                    }
                    else {
                        this.getErrorHandler().reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                    this.setState(9261);
                    if (!(this.serverVersion >= 80014)) {
                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                    }
                    this.setState(9262);
                    this.match(MySQLParser.ADMIN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public override sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
                    case 2:
                        return this.alterStatement_sempred(localctx as AlterStatementContext, predIndex);
                    case 14:
                        return this.standaloneAlterCommands_sempred(localctx as StandaloneAlterCommandsContext, predIndex);
                    case 18:
                        return this.alterListItem_sempred(localctx as AlterListItemContext, predIndex);
                    case 28:
                        return this.alterTablespace_sempred(localctx as AlterTablespaceContext, predIndex);
                    case 33:
                        return this.alterTablespaceOption_sempred(localctx as AlterTablespaceOptionContext, predIndex);
                    case 39:
                        return this.alterInstanceStatement_sempred(localctx as AlterInstanceStatementContext, predIndex);
                    case 40:
                        return this.createStatement_sempred(localctx as CreateStatementContext, predIndex);
                    case 42:
                        return this.createDatabaseOption_sempred(localctx as CreateDatabaseOptionContext, predIndex);
                    case 58:
                        return this.routineOption_sempred(localctx as RoutineOptionContext, predIndex);
                    case 70:
                        return this.tsDataFileName_sempred(localctx as TsDataFileNameContext, predIndex);
                    case 73:
                        return this.tablespaceOption_sempred(localctx as TablespaceOptionContext, predIndex);
                    case 96:
                        return this.dropStatement_sempred(localctx as DropStatementContext, predIndex);
                    case 117:
                        return this.deleteStatement_sempred(localctx as DeleteStatementContext, predIndex);
                    case 131:
                        return this.valuesReference_sempred(localctx as ValuesReferenceContext, predIndex);
                    case 136:
                        return this.loadFrom_sempred(localctx as LoadFromContext, predIndex);
                    case 137:
                        return this.loadSourceType_sempred(localctx as LoadSourceTypeContext, predIndex);
                    case 138:
                        return this.sourceCount_sempred(localctx as SourceCountContext, predIndex);
                    case 139:
                        return this.sourceOrder_sempred(localctx as SourceOrderContext, predIndex);
                    case 144:
                        return this.loadAlgorithm_sempred(localctx as LoadAlgorithmContext, predIndex);
                    case 145:
                        return this.loadParallel_sempred(localctx as LoadParallelContext, predIndex);
                    case 146:
                        return this.loadMemory_sempred(localctx as LoadMemoryContext, predIndex);
                    case 149:
                        return this.selectStatementWithInto_sempred(localctx as SelectStatementWithIntoContext, predIndex);
                    case 151:
                        return this.queryExpressionBody_sempred(localctx as QueryExpressionBodyContext, predIndex);
                    case 153:
                        return this.queryPrimary_sempred(localctx as QueryPrimaryContext, predIndex);
                    case 164:
                        return this.qualifyClause_sempred(localctx as QualifyClauseContext, predIndex);
                    case 178:
                        return this.groupByClause_sempred(localctx as GroupByClauseContext, predIndex);
                    case 188:
                        return this.lockingClauseList_sempred(localctx as LockingClauseListContext, predIndex);
                    case 196:
                        return this.tableReference_sempred(localctx as TableReferenceContext, predIndex);
                    case 202:
                        return this.tableFactor_sempred(localctx as TableFactorContext, predIndex);
                    case 205:
                        return this.derivedTable_sempred(localctx as DerivedTableContext, predIndex);
                    case 209:
                        return this.jtColumn_sempred(localctx as JtColumnContext, predIndex);
                    case 216:
                        return this.tableAlias_sempred(localctx as TableAliasContext, predIndex);
                    case 240:
                        return this.masterOrBinaryLogsAndGtids_sempred(localctx as MasterOrBinaryLogsAndGtidsContext, predIndex);
                    case 243:
                        return this.changeReplicationSource_sempred(localctx as ChangeReplicationSourceContext, predIndex);
                    case 246:
                        return this.sourceDefinition_sempred(localctx as SourceDefinitionContext, predIndex);
                    case 306:
                        return this.cloneStatement_sempred(localctx as CloneStatementContext, predIndex);
                    case 310:
                        return this.alterUserStatement_sempred(localctx as AlterUserStatementContext, predIndex);
                    case 312:
                        return this.alterUser_sempred(localctx as AlterUserContext, predIndex);
                    case 316:
                        return this.createUserTail_sempred(localctx as CreateUserTailContext, predIndex);
                    case 321:
                        return this.accountLockPasswordExpireOptions_sempred(localctx as AccountLockPasswordExpireOptionsContext, predIndex);
                    case 325:
                        return this.grantTargetList_sempred(localctx as GrantTargetListContext, predIndex);
                    case 330:
                        return this.versionedRequireClause_sempred(localctx as VersionedRequireClauseContext, predIndex);
                    case 332:
                        return this.revokeStatement_sempred(localctx as RevokeStatementContext, predIndex);
                    case 336:
                        return this.grantIdentifier_sempred(localctx as GrantIdentifierContext, predIndex);
                    case 339:
                        return this.grantOption_sempred(localctx as GrantOptionContext, predIndex);
                    case 344:
                        return this.histogramAutoUpdate_sempred(localctx as HistogramAutoUpdateContext, predIndex);
                    case 345:
                        return this.histogramUpdateParam_sempred(localctx as HistogramUpdateParamContext, predIndex);
                    case 346:
                        return this.histogramNumBuckets_sempred(localctx as HistogramNumBucketsContext, predIndex);
                    case 355:
                        return this.installSetValueList_sempred(localctx as InstallSetValueListContext, predIndex);
                    case 357:
                        return this.startOptionValueList_sempred(localctx as StartOptionValueListContext, predIndex);
                    case 362:
                        return this.optionValueNoOptionType_sempred(localctx as OptionValueNoOptionTypeContext, predIndex);
                    case 374:
                        return this.showParseTreeStatement_sempred(localctx as ShowParseTreeStatementContext, predIndex);
                    case 446:
                        return this.utilityStatement_sempred(localctx as UtilityStatementContext, predIndex);
                    case 448:
                        return this.explainStatement_sempred(localctx as ExplainStatementContext, predIndex);
                    case 449:
                        return this.explainOptions_sempred(localctx as ExplainOptionsContext, predIndex);
                    case 455:
                        return this.expr_sempred(localctx as ExprContext, predIndex);
                    case 456:
                        return this.boolPri_sempred(localctx as BoolPriContext, predIndex);
                    case 458:
                        return this.predicate_sempred(localctx as PredicateContext, predIndex);
                    case 460:
                        return this.bitExpr_sempred(localctx as BitExprContext, predIndex);
                    case 461:
                        return this.simpleExpr_sempred(localctx as SimpleExprContext, predIndex);
                    case 462:
                        return this.arrayCast_sempred(localctx as ArrayCastContext, predIndex);
                    case 466:
                        return this.windowFunctionCall_sempred(localctx as WindowFunctionCallContext, predIndex);
                    case 469:
                        return this.tablesampleClause_sempred(localctx as TablesampleClauseContext, predIndex);
                    case 471:
                        return this.leadLagInfo_sempred(localctx as LeadLagInfoContext, predIndex);
                    case 480:
                        return this.runtimeFunctionCall_sempred(localctx as RuntimeFunctionCallContext, predIndex);
                    case 496:
                        return this.lvalueVariable_sempred(localctx as LvalueVariableContext, predIndex);
                    case 501:
                        return this.castType_sempred(localctx as CastTypeContext, predIndex);
                    case 557:
                        return this.checkOrReferences_sempred(localctx as CheckOrReferencesContext, predIndex);
                    case 559:
                        return this.constraintEnforcement_sempred(localctx as ConstraintEnforcementContext, predIndex);
                    case 563:
                        return this.columnAttribute_sempred(localctx as ColumnAttributeContext, predIndex);
                    case 574:
                        return this.keyPartOrExpression_sempred(localctx as KeyPartOrExpressionContext, predIndex);
                    case 577:
                        return this.commonIndexOption_sempred(localctx as CommonIndexOptionContext, predIndex);
                    case 594:
                        return this.charsetName_sempred(localctx as CharsetNameContext, predIndex);
                    case 595:
                        return this.collationName_sempred(localctx as CollationNameContext, predIndex);
                    case 600:
                        return this.createTableOption_sempred(localctx as CreateTableOptionContext, predIndex);
                    case 619:
                        return this.persistedVariableIdentifier_sempred(localctx as PersistedVariableIdentifierContext, predIndex);
                    case 702:
                        return this.pureIdentifier_sempred(localctx as PureIdentifierContext, predIndex);
                    case 712:
                        return this.real_ulonglong_number_sempred(localctx as Real_ulonglong_numberContext, predIndex);
                    case 714:
                        return this.signedLiteralOrNull_sempred(localctx as SignedLiteralOrNullContext, predIndex);
                    case 716:
                        return this.literalOrNull_sempred(localctx as LiteralOrNullContext, predIndex);
                    case 719:
                        return this.textStringLiteral_sempred(localctx as TextStringLiteralContext, predIndex);
                    case 721:
                        return this.textStringHash_sempred(localctx as TextStringHashContext, predIndex);
                    case 743:
                        return this.identifierKeyword_sempred(localctx as IdentifierKeywordContext, predIndex);
                    case 746:
                        return this.labelKeyword_sempred(localctx as LabelKeywordContext, predIndex);
                    case 748:
                        return this.identifierKeywordsUnambiguous_sempred(localctx as IdentifierKeywordsUnambiguousContext, predIndex);
                    case 749:
                        return this.roleKeyword_sempred(localctx as RoleKeywordContext, predIndex);
                    case 753:
                        return this.roleOrLabelKeyword_sempred(localctx as RoleOrLabelKeywordContext, predIndex);
                    }
                    return true;
                }
                private alterStatement_sempred(localctx: AlterStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 0:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private standaloneAlterCommands_sempred(localctx: StandaloneAlterCommandsContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 1:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterListItem_sempred(localctx: AlterListItemContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 2:
                                return this.serverVersion >= 80017;
                            case 3:
                                return this.serverVersion >= 80019;
                            case 4:
                                return this.serverVersion >= 80014;
                            case 5:
                                return this.serverVersion >= 80024;
                            case 6:
                                return this.serverVersion >= 80017;
                            case 7:
                                return this.serverVersion >= 80019;
                            case 8:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterTablespace_sempred(localctx: AlterTablespaceContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 9:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterTablespaceOption_sempred(localctx: AlterTablespaceOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 10:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private alterInstanceStatement_sempred(localctx: AlterInstanceStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 11:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private createStatement_sempred(localctx: CreateStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 12:
                                return this.serverVersion >= 80011;
                            case 13:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private createDatabaseOption_sempred(localctx: CreateDatabaseOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 14:
                                return this.serverVersion >= 80016;
                            }
                            return true;
                }
                private routineOption_sempred(localctx: RoutineOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 15:
                                return this.serverVersion >= 80032;
                            }
                            return true;
                }
                private tsDataFileName_sempred(localctx: TsDataFileNameContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 16:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private tablespaceOption_sempred(localctx: TablespaceOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 17:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private dropStatement_sempred(localctx: DropStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 18:
                                return this.serverVersion >= 80011;
                            case 19:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private deleteStatement_sempred(localctx: DeleteStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 20:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private valuesReference_sempred(localctx: ValuesReferenceContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 21:
                                return  this.serverVersion >= 80018;
                            }
                            return true;
                }
                private loadFrom_sempred(localctx: LoadFromContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 22:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private loadSourceType_sempred(localctx: LoadSourceTypeContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 23:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private sourceCount_sempred(localctx: SourceCountContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 24:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private sourceOrder_sempred(localctx: SourceOrderContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 25:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private loadAlgorithm_sempred(localctx: LoadAlgorithmContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 26:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private loadParallel_sempred(localctx: LoadParallelContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 27:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private loadMemory_sempred(localctx: LoadMemoryContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 28:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private selectStatementWithInto_sempred(localctx: SelectStatementWithIntoContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 29:
                                return this.serverVersion >= 80024 && this.serverVersion < 80031;
                            }
                            return true;
                }
                private queryExpressionBody_sempred(localctx: QueryExpressionBodyContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 30:
                                return this.serverVersion >= 80031;
                            }
                            return true;
                }
                private queryPrimary_sempred(localctx: QueryPrimaryContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 31:
                                return this.serverVersion >= 80019;
                            case 32:
                                return this.serverVersion >= 80019;
                            }
                            return true;
                }
                private qualifyClause_sempred(localctx: QualifyClauseContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 33:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private groupByClause_sempred(localctx: GroupByClauseContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 34:
                                return this.serverVersion >= 80032;
                            }
                            return true;
                }
                private lockingClauseList_sempred(localctx: LockingClauseListContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 35:
                                return this.serverVersion >= 80031;
                            }
                            return true;
                }
                private tableReference_sempred(localctx: TableReferenceContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 36:
                                return this.serverVersion < 80017;
                            }
                            return true;
                }
                private tableFactor_sempred(localctx: TableFactorContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 37:
                                return this.serverVersion >= 80004;
                            }
                            return true;
                }
                private derivedTable_sempred(localctx: DerivedTableContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 38:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private jtColumn_sempred(localctx: JtColumnContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 39:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private tableAlias_sempred(localctx: TableAliasContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 40:
                                return this.serverVersion < 80017;
                            }
                            return true;
                }
                private masterOrBinaryLogsAndGtids_sempred(localctx: MasterOrBinaryLogsAndGtidsContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 41:
                                return this.serverVersion >= 80032;
                            }
                            return true;
                }
                private changeReplicationSource_sempred(localctx: ChangeReplicationSourceContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 42:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private sourceDefinition_sempred(localctx: SourceDefinitionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 43:
                                return this.serverVersion >= 80024;
                            case 44:
                                return this.serverVersion >= 80024;
                            case 45:
                                return this.serverVersion >= 80027;
                            }
                            return true;
                }
                private cloneStatement_sempred(localctx: CloneStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 46:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterUserStatement_sempred(localctx: AlterUserStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 47:
                                return this.serverVersion < 80014;
                            case 48:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private alterUser_sempred(localctx: AlterUserContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 49:
                                return this.serverVersion < 80025;
                            case 50:
                                return this.serverVersion >= 80025;
                            }
                            return true;
                }
                private createUserTail_sempred(localctx: CreateUserTailContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 51:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private accountLockPasswordExpireOptions_sempred(localctx: AccountLockPasswordExpireOptionsContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 52:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }
                private grantTargetList_sempred(localctx: GrantTargetListContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 53:
                                return this.serverVersion < 80011;
                            case 54:
                                return this.serverVersion >= 80011;
                            }
                            return true;
                }
                private versionedRequireClause_sempred(localctx: VersionedRequireClauseContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 55:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private revokeStatement_sempred(localctx: RevokeStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 56:
                                return this.serverVersion >= 80031;
                            case 57:
                                return this.serverVersion >= 80031;
                            }
                            return true;
                }
                private grantIdentifier_sempred(localctx: GrantIdentifierContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 58:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private grantOption_sempred(localctx: GrantOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 59:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private histogramAutoUpdate_sempred(localctx: HistogramAutoUpdateContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 60:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private histogramUpdateParam_sempred(localctx: HistogramUpdateParamContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 61:
                                return this.serverVersion >= 80031;
                            }
                            return true;
                }
                private histogramNumBuckets_sempred(localctx: HistogramNumBucketsContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 62:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private installSetValueList_sempred(localctx: InstallSetValueListContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 63:
                                return this.serverVersion >= 80032;
                            }
                            return true;
                }
                private startOptionValueList_sempred(localctx: StartOptionValueListContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 64:
                                return this.serverVersion < 80014;
                            case 65:
                                return this.serverVersion >= 80018;
                            }
                            return true;
                }
                private optionValueNoOptionType_sempred(localctx: OptionValueNoOptionTypeContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 66:
                                return this.serverVersion >= 80011;
                            }
                            return true;
                }
                private showParseTreeStatement_sempred(localctx: ShowParseTreeStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 67:
                                return this.serverVersion >= 80100;
                            }
                            return true;
                }
                private utilityStatement_sempred(localctx: UtilityStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 68:
                                return this.serverVersion >= 80011;
                            }
                            return true;
                }
                private explainStatement_sempred(localctx: ExplainStatementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 69:
                                return this.serverVersion >= 80032;
                            }
                            return true;
                }
                private explainOptions_sempred(localctx: ExplainOptionsContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 70:
                                return this.serverVersion >= 80032;
                            case 71:
                                return this.serverVersion < 80012;
                            case 72:
                                return this.serverVersion >= 80018;
                            case 73:
                                return this.serverVersion >= 80019;
                            }
                            return true;
                }
                private expr_sempred(localctx: ExprContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 74:
                                return this.precpred(this.getContext(), 3);
                            case 75:
                                return this.precpred(this.getContext(), 2);
                            case 76:
                                return this.precpred(this.getContext(), 1);
                            }
                            return true;
                }
                private boolPri_sempred(localctx: BoolPriContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 77:
                                return this.precpred(this.getContext(), 3);
                            case 78:
                                return this.precpred(this.getContext(), 2);
                            case 79:
                                return this.precpred(this.getContext(), 1);
                            }
                            return true;
                }
                private predicate_sempred(localctx: PredicateContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 80:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private bitExpr_sempred(localctx: BitExprContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 81:
                                return this.precpred(this.getContext(), 7);
                            case 82:
                                return this.precpred(this.getContext(), 6);
                            case 83:
                                return this.precpred(this.getContext(), 5);
                            case 84:
                                return this.precpred(this.getContext(), 3);
                            case 85:
                                return this.precpred(this.getContext(), 2);
                            case 86:
                                return this.precpred(this.getContext(), 1);
                            case 87:
                                return this.precpred(this.getContext(), 4);
                            }
                            return true;
                }
                private simpleExpr_sempred(localctx: SimpleExprContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 88:
                                return this.precpred(this.getContext(), 16);
                            case 89:
                                return this.precpred(this.getContext(), 24);
                            }
                            return true;
                }
                private arrayCast_sempred(localctx: ArrayCastContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 90:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private windowFunctionCall_sempred(localctx: WindowFunctionCallContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 91:
                                return this.serverVersion < 80024;
                            }
                            return true;
                }
                private tablesampleClause_sempred(localctx: TablesampleClauseContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 92:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private leadLagInfo_sempred(localctx: LeadLagInfoContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 93:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private runtimeFunctionCall_sempred(localctx: RuntimeFunctionCallContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 94:
                                return this.serverVersion >= 80032;
                            case 95:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private lvalueVariable_sempred(localctx: LvalueVariableContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 96:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private castType_sempred(localctx: CastTypeContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 97:
                                return this.serverVersion >= 80024;
                            case 98:
                                return this.serverVersion >= 80017;
                            case 99:
                                return this.serverVersion >= 80017;
                            case 100:
                                return this.serverVersion >= 80027;
                            }
                            return true;
                }
                private checkOrReferences_sempred(localctx: CheckOrReferencesContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 101:
                                return this.serverVersion < 80016;
                            }
                            return true;
                }
                private constraintEnforcement_sempred(localctx: ConstraintEnforcementContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 102:
                                return  this.serverVersion >= 80017;
                            }
                            return true;
                }
                private columnAttribute_sempred(localctx: ColumnAttributeContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 103:
                                return this.serverVersion >= 80014;
                            case 104:
                                return this.serverVersion >= 80013;
                            case 105:
                                return this.serverVersion >= 80017;
                            case 106:
                                return this.serverVersion >= 80017;
                            case 107:
                                return this.serverVersion >= 80024;
                            case 108:
                                return this.serverVersion >= 80024;
                            case 109:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private keyPartOrExpression_sempred(localctx: KeyPartOrExpressionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 110:
                                return this.serverVersion >= 80013;
                            }
                            return true;
                }
                private commonIndexOption_sempred(localctx: CommonIndexOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 111:
                                return this.serverVersion >= 80024;
                            case 112:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private charsetName_sempred(localctx: CharsetNameContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 113:
                                return this.serverVersion < 80011;
                            }
                            return true;
                }
                private collationName_sempred(localctx: CollationNameContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 114:
                                return this.serverVersion < 80011;
                            case 115:
                                return this.serverVersion >= 80018;
                            }
                            return true;
                }
                private createTableOption_sempred(localctx: CreateTableOptionContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 116:
                                return this.serverVersion >= 80014;
                            case 117:
                                return this.serverVersion >= 80024;
                            case 118:
                                return this.serverVersion >= 80024;
                            case 119:
                                return this.serverVersion >= 80024;
                            case 120:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private persistedVariableIdentifier_sempred(localctx: PersistedVariableIdentifierContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 121:
                                return this.serverVersion >= 80032;
                            }
                            return true;
                }
                private pureIdentifier_sempred(localctx: PureIdentifierContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 122:
                                return this.isSqlModeActive(SqlMode.AnsiQuotes);
                            }
                            return true;
                }
                private real_ulonglong_number_sempred(localctx: Real_ulonglong_numberContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 123:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private signedLiteralOrNull_sempred(localctx: SignedLiteralOrNullContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 124:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private literalOrNull_sempred(localctx: LiteralOrNullContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 125:
                                return this.serverVersion >= 80024;
                            }
                            return true;
                }
                private textStringLiteral_sempred(localctx: TextStringLiteralContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 126:
                                return !this.isSqlModeActive(SqlMode.AnsiQuotes);
                            }
                            return true;
                }
                private textStringHash_sempred(localctx: TextStringHashContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 127:
                                return this.serverVersion >= 80017;
                            }
                            return true;
                }
                private identifierKeyword_sempred(localctx: IdentifierKeywordContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 128:
                                return this.serverVersion < 80017;
                            case 129:
                                return this.serverVersion >= 80011;
                            }
                            return true;
                }
                private labelKeyword_sempred(localctx: LabelKeywordContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 130:
                                return this.serverVersion < 80017;
                            }
                            return true;
                }
                private identifierKeywordsUnambiguous_sempred(localctx: IdentifierKeywordsUnambiguousContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 131:
                                return this.serverVersion >= 80019;
                            case 132:
                                return this.serverVersion >= 80200;
                            }
                            return true;
                }
                private roleKeyword_sempred(localctx: RoleKeywordContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 133:
                                return this.serverVersion < 80017;
                            }
                            return true;
                }
                private roleOrLabelKeyword_sempred(localctx: RoleOrLabelKeywordContext, predIndex: number): boolean {
                    switch (predIndex) {
                            case 134:
                                return this.serverVersion >= 80014;
                            }
                            return true;
                }

    private static readonly _serializedATN = new SerializedATNView ([
        4,1,833,9266,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,
        7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,7,532,
        2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,2,538,
        7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
        2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,
        7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
        2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
        7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,
        2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
        7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,
        2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,
        7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,
        2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,
        7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,7,598,
        2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,2,604,
        7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
        2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,2,615,
        7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
        2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,
        7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,
        2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,
        7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,
        2,643,7,643,2,644,7,644,2,645,7,645,2,646,7,646,2,647,7,647,2,648,
        7,648,2,649,7,649,2,650,7,650,2,651,7,651,2,652,7,652,2,653,7,653,
        2,654,7,654,2,655,7,655,2,656,7,656,2,657,7,657,2,658,7,658,2,659,
        7,659,2,660,7,660,2,661,7,661,2,662,7,662,2,663,7,663,2,664,7,664,
        2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,2,669,7,669,2,670,
        7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,2,675,7,675,
        2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,2,681,
        7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,
        2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,
        7,692,2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,
        2,698,7,698,2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,2,703,
        7,703,2,704,7,704,2,705,7,705,2,706,7,706,2,707,7,707,2,708,7,708,
        2,709,7,709,2,710,7,710,2,711,7,711,2,712,7,712,2,713,7,713,2,714,
        7,714,2,715,7,715,2,716,7,716,2,717,7,717,2,718,7,718,2,719,7,719,
        2,720,7,720,2,721,7,721,2,722,7,722,2,723,7,723,2,724,7,724,2,725,
        7,725,2,726,7,726,2,727,7,727,2,728,7,728,2,729,7,729,2,730,7,730,
        2,731,7,731,2,732,7,732,2,733,7,733,2,734,7,734,2,735,7,735,2,736,
        7,736,2,737,7,737,2,738,7,738,2,739,7,739,2,740,7,740,2,741,7,741,
        2,742,7,742,2,743,7,743,2,744,7,744,2,745,7,745,2,746,7,746,2,747,
        7,747,2,748,7,748,2,749,7,749,2,750,7,750,2,751,7,751,2,752,7,752,
        2,753,7,753,1,0,1,0,3,0,1511,8,0,1,0,3,0,1514,8,0,3,0,1516,8,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1596,8,
        1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1604,8,2,1,2,1,2,1,2,3,2,1609,8,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1619,8,2,1,3,1,3,1,3,4,3,1624,
        8,3,11,3,12,3,1625,1,4,1,4,1,4,1,4,3,4,1632,8,4,1,4,3,4,1635,8,4,
        1,5,3,5,1638,8,5,1,5,1,5,1,5,1,5,1,5,3,5,1645,8,5,1,5,1,5,1,5,3,
        5,1650,8,5,1,5,3,5,1653,8,5,1,5,1,5,1,5,3,5,1658,8,5,1,5,1,5,1,5,
        1,5,3,5,1664,8,5,3,5,1666,8,5,1,5,1,5,3,5,1670,8,5,1,5,1,5,3,5,1674,
        8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1683,8,6,1,7,1,7,3,7,1687,8,
        7,1,7,5,7,1690,8,7,10,7,12,7,1693,9,7,1,8,1,8,1,8,3,8,1698,8,8,1,
        9,1,9,1,9,1,9,1,10,3,10,1705,8,10,1,10,1,10,1,10,3,10,1710,8,10,
        1,11,1,11,1,11,3,11,1715,8,11,1,11,1,11,1,11,1,11,1,11,3,11,1722,
        8,11,1,11,3,11,1725,8,11,1,12,1,12,1,12,1,12,3,12,1731,8,12,1,12,
        3,12,1734,8,12,1,13,1,13,1,13,5,13,1739,8,13,10,13,12,13,1742,9,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1751,8,14,1,15,1,15,1,
        15,3,15,1756,8,15,1,15,1,15,1,15,3,15,1761,8,15,1,15,1,15,1,15,1,
        15,1,15,1,15,3,15,1769,8,15,1,15,1,15,1,15,1,15,3,15,1775,8,15,1,
        15,1,15,3,15,1779,8,15,1,15,1,15,1,15,3,15,1784,8,15,1,15,1,15,1,
        15,1,15,1,15,5,15,1791,8,15,10,15,12,15,1794,9,15,1,15,1,15,1,15,
        3,15,1799,8,15,1,15,1,15,5,15,1803,8,15,10,15,12,15,1806,9,15,1,
        15,1,15,1,15,3,15,1811,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
        15,1820,8,15,1,15,1,15,1,15,1,15,3,15,1826,8,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,3,15,1835,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,3,15,1847,8,15,1,16,1,16,3,16,1851,8,16,1,16,1,
        16,1,16,1,16,3,16,1857,8,16,5,16,1859,8,16,10,16,12,16,1862,9,16,
        1,17,1,17,1,17,3,17,1867,8,17,1,18,1,18,3,18,1871,8,18,1,18,1,18,
        1,18,3,18,1876,8,18,1,18,3,18,1879,8,18,1,18,1,18,1,18,1,18,3,18,
        1885,8,18,1,18,1,18,1,18,1,18,3,18,1891,8,18,1,18,1,18,1,18,1,18,
        3,18,1897,8,18,1,18,1,18,3,18,1901,8,18,1,18,1,18,1,18,3,18,1906,
        8,18,1,18,1,18,3,18,1910,8,18,1,18,1,18,3,18,1914,8,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,
        1930,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1938,8,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,1946,8,18,1,18,1,18,1,18,1,18,1,18,3,18,
        1953,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,3,18,1980,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,3,18,1995,8,18,1,18,3,18,1998,8,18,1,18,1,18,
        1,18,1,18,3,18,2004,8,18,1,19,1,19,1,19,3,19,2009,8,19,1,20,1,20,
        1,21,1,21,3,21,2015,8,21,1,21,1,21,1,21,3,21,2020,8,21,5,21,2022,
        8,21,10,21,12,21,2025,9,21,1,22,1,22,3,22,2029,8,22,1,22,1,22,3,
        22,2033,8,22,1,23,1,23,3,23,2037,8,23,1,23,1,23,3,23,2041,8,23,1,
        24,1,24,3,24,2045,8,24,1,24,1,24,3,24,2049,8,24,3,24,2051,8,24,1,
        25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,3,27,2061,8,27,1,28,1,28,1,
        28,1,28,1,28,1,28,3,28,2069,8,28,1,28,1,28,1,28,1,28,1,28,3,28,2076,
        8,28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,2084,8,29,1,30,1,30,3,30,
        2088,8,30,1,30,5,30,2091,8,30,10,30,12,30,2094,9,30,1,31,1,31,1,
        32,1,32,3,32,2100,8,32,1,32,5,32,2103,8,32,10,32,12,32,2106,9,32,
        1,33,1,33,3,33,2110,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,2120,8,33,1,34,1,34,3,34,2124,8,34,1,34,1,34,1,34,3,34,2129,
        8,34,1,35,3,35,2132,8,35,1,35,3,35,2135,8,35,1,35,3,35,2138,8,35,
        1,35,1,35,1,35,1,35,1,36,3,36,2145,8,36,1,36,1,36,1,36,1,37,1,37,
        3,37,2152,8,37,1,38,1,38,3,38,2156,8,38,1,38,1,38,1,38,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,3,39,2181,8,39,3,39,2183,8,39,1,39,1,39,
        1,39,1,39,1,39,1,39,3,39,2191,8,39,3,39,2193,8,39,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,3,40,2213,8,40,1,41,1,41,3,41,2217,8,41,1,41,1,41,5,41,
        2221,8,41,10,41,12,41,2224,9,41,1,42,1,42,1,42,1,42,3,42,2230,8,
        42,1,43,3,43,2233,8,43,1,43,1,43,3,43,2237,8,43,1,43,1,43,1,43,1,
        43,1,43,3,43,2244,8,43,1,43,3,43,2247,8,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,3,43,2256,8,43,1,44,1,44,1,44,5,44,2261,8,44,10,44,
        12,44,2264,9,44,1,45,1,45,3,45,2268,8,45,1,46,3,46,2271,8,46,1,46,
        1,46,1,47,3,47,2276,8,47,1,47,1,47,1,48,1,48,3,48,2282,8,48,1,48,
        3,48,2285,8,48,1,49,1,49,3,49,2289,8,49,1,50,1,50,1,50,1,50,3,50,
        2295,8,50,1,50,3,50,2298,8,50,1,50,1,50,1,51,3,51,2303,8,51,1,51,
        1,51,3,51,2307,8,51,1,51,1,51,1,51,1,51,1,51,5,51,2314,8,51,10,51,
        12,51,2317,9,51,3,51,2319,8,51,1,51,1,51,5,51,2323,8,51,10,51,12,
        51,2326,9,51,1,51,1,51,1,52,1,52,3,52,2332,8,52,1,53,1,53,1,54,3,
        54,2337,8,54,1,54,1,54,3,54,2341,8,54,1,54,1,54,1,54,1,54,1,54,5,
        54,2348,8,54,10,54,12,54,2351,9,54,3,54,2353,8,54,1,54,1,54,1,54,
        1,54,5,54,2359,8,54,10,54,12,54,2362,9,54,1,54,1,54,1,55,3,55,2367,
        8,55,1,55,1,55,3,55,2371,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,
        1,56,3,56,2381,8,56,1,56,3,56,2384,8,56,1,57,4,57,2387,8,57,11,57,
        12,57,2388,1,58,1,58,1,58,1,58,1,58,1,58,3,58,2397,8,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,2412,
        8,58,1,59,3,59,2415,8,59,1,59,3,59,2418,8,59,1,59,1,59,1,59,3,59,
        2423,8,59,1,59,1,59,5,59,2427,8,59,10,59,12,59,2430,9,59,1,59,1,
        59,1,59,1,59,1,59,5,59,2437,8,59,10,59,12,59,2440,9,59,1,59,1,59,
        1,59,1,59,1,59,5,59,2447,8,59,10,59,12,59,2450,9,59,3,59,2452,8,
        59,1,59,3,59,2455,8,59,1,60,1,60,3,60,2459,8,60,1,60,1,60,1,60,1,
        60,1,60,1,60,3,60,2467,8,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,3,62,2480,8,62,1,63,1,63,3,63,2484,8,63,1,63,5,
        63,2487,8,63,10,63,12,63,2490,9,63,1,64,1,64,1,64,1,64,1,64,1,64,
        3,64,2498,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,
        1,66,1,66,1,66,5,66,2513,8,66,10,66,12,66,2516,9,66,1,66,1,66,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
        67,3,67,2534,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,2543,8,
        68,1,68,3,68,2546,8,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2554,8,
        69,1,70,1,70,1,70,1,70,1,70,3,70,2561,8,70,3,70,2563,8,70,1,71,1,
        71,1,71,1,72,1,72,3,72,2570,8,72,1,72,5,72,2573,8,72,10,72,12,72,
        2576,9,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,2589,8,73,1,74,1,74,3,74,2593,8,74,1,74,1,74,1,75,1,75,3,75,
        2599,8,75,1,75,1,75,1,76,1,76,3,76,2605,8,76,1,76,1,76,1,77,1,77,
        3,77,2611,8,77,1,77,1,77,1,78,1,78,3,78,2617,8,78,1,78,1,78,1,79,
        1,79,3,79,2623,8,79,1,79,1,79,1,80,3,80,2628,8,80,1,80,1,80,3,80,
        2632,8,80,1,80,1,80,1,81,1,81,1,82,1,82,3,82,2640,8,82,1,82,1,82,
        1,83,1,83,3,83,2646,8,83,1,83,1,83,1,84,1,84,3,84,2652,8,84,1,84,
        1,84,1,85,1,85,3,85,2658,8,85,1,85,1,85,1,86,3,86,2663,8,86,1,86,
        3,86,2666,8,86,1,86,3,86,2669,8,86,1,86,1,86,1,86,1,86,1,87,1,87,
        1,87,3,87,2678,8,87,1,87,3,87,2681,8,87,1,88,1,88,1,88,1,88,1,89,
        1,89,1,89,1,89,1,90,3,90,2692,8,90,1,90,1,90,3,90,2696,8,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2707,8,90,1,90,1,90,
        1,91,1,91,1,91,1,92,3,92,2715,8,92,1,92,1,92,3,92,2719,8,92,1,92,
        1,92,1,92,1,92,1,92,1,92,1,92,3,92,2728,8,92,1,92,3,92,2731,8,92,
        1,92,1,92,1,92,1,92,3,92,2737,8,92,3,92,2739,8,92,1,92,1,92,3,92,
        2743,8,92,1,92,1,92,1,92,1,93,1,93,3,93,2750,8,93,1,93,1,93,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,5,94,2761,8,94,10,94,12,94,2764,9,
        94,1,94,1,94,1,94,1,94,3,94,2770,8,94,1,94,1,94,5,94,2774,8,94,10,
        94,12,94,2777,9,94,3,94,2779,8,94,1,95,1,95,1,95,1,95,1,95,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2796,8,95,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,3,96,2815,8,96,1,97,1,97,3,97,2819,8,97,1,97,1,97,
        1,98,1,98,3,98,2825,8,98,1,98,1,98,1,99,1,99,3,99,2831,8,99,1,99,
        1,99,1,100,1,100,3,100,2837,8,100,1,100,1,100,1,101,3,101,2842,8,
        101,1,101,1,101,1,101,1,101,1,101,3,101,2849,8,101,1,102,1,102,1,
        102,1,102,1,102,3,102,2856,8,102,1,102,5,102,2859,8,102,10,102,12,
        102,2862,9,102,3,102,2864,8,102,1,103,1,103,3,103,2868,8,103,1,104,
        1,104,3,104,2872,8,104,1,104,1,104,1,105,3,105,2877,8,105,1,105,
        1,105,3,105,2881,8,105,1,105,1,105,3,105,2885,8,105,1,106,1,106,
        1,106,1,106,3,106,2891,8,106,1,106,5,106,2894,8,106,10,106,12,106,
        2897,9,106,3,106,2899,8,106,1,107,1,107,3,107,2903,8,107,1,107,1,
        107,1,108,1,108,3,108,2909,8,108,1,108,1,108,3,108,2913,8,108,1,
        109,1,109,3,109,2917,8,109,1,109,1,109,1,110,1,110,1,110,1,110,3,
        110,2925,8,110,1,110,1,110,1,111,1,111,1,111,1,111,3,111,2933,8,
        111,1,112,1,112,1,112,1,112,1,112,5,112,2940,8,112,10,112,12,112,
        2943,9,112,1,113,1,113,1,113,1,113,1,114,1,114,3,114,2951,8,114,
        1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,116,1,116,1,116,1,116,
        3,116,2964,8,116,1,116,3,116,2967,8,116,1,117,3,117,2970,8,117,1,
        117,1,117,5,117,2974,8,117,10,117,12,117,2977,9,117,1,117,1,117,
        1,117,1,117,1,117,3,117,2984,8,117,1,117,1,117,1,117,3,117,2989,
        8,117,1,117,3,117,2992,8,117,1,117,3,117,2995,8,117,1,117,3,117,
        2998,8,117,1,117,3,117,3001,8,117,3,117,3003,8,117,1,117,1,117,1,
        117,1,117,3,117,3009,8,117,3,117,3011,8,117,1,118,1,118,1,118,1,
        118,1,118,1,119,1,119,1,120,1,120,1,120,1,121,1,121,1,121,1,121,
        3,121,3027,8,121,1,121,1,121,1,121,1,121,1,121,3,121,3034,8,121,
        1,121,3,121,3037,8,121,3,121,3039,8,121,3,121,3041,8,121,1,122,1,
        122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,3051,8,122,3,122,3053,
        8,122,1,123,1,123,3,123,3057,8,123,1,123,3,123,3060,8,123,1,123,
        3,123,3063,8,123,1,123,1,123,3,123,3067,8,123,1,123,1,123,3,123,
        3071,8,123,1,123,1,123,1,123,3,123,3076,8,123,1,123,3,123,3079,8,
        123,1,123,3,123,3082,8,123,1,124,1,124,1,125,1,125,3,125,3088,8,
        125,1,125,3,125,3091,8,125,1,125,1,125,1,126,1,126,1,126,5,126,3098,
        8,126,10,126,12,126,3101,9,126,1,127,1,127,1,127,1,128,1,128,1,128,
        1,128,3,128,3110,8,128,1,128,3,128,3113,8,128,1,128,3,128,3116,8,
        128,1,129,1,129,3,129,3120,8,129,1,129,1,129,1,129,1,129,3,129,3126,
        8,129,1,129,5,129,3129,8,129,10,129,12,129,3132,9,129,1,130,1,130,
        3,130,3136,8,130,1,130,1,130,1,130,3,130,3141,8,130,5,130,3143,8,
        130,10,130,12,130,3146,9,130,1,131,1,131,1,131,1,131,3,131,3152,
        8,131,1,132,1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,3,133,
        3163,8,133,1,133,3,133,3166,8,133,1,133,3,133,3169,8,133,1,133,3,
        133,3172,8,133,1,133,1,133,3,133,3176,8,133,1,133,3,133,3179,8,133,
        1,133,3,133,3182,8,133,1,133,1,133,1,133,1,133,3,133,3188,8,133,
        1,133,3,133,3191,8,133,1,133,3,133,3194,8,133,1,133,3,133,3197,8,
        133,1,133,3,133,3200,8,133,1,133,1,133,3,133,3204,8,133,1,133,3,
        133,3207,8,133,1,133,3,133,3210,8,133,1,134,1,134,1,135,1,135,1,
        136,1,136,1,136,1,137,1,137,1,137,3,137,3222,8,137,1,138,1,138,1,
        138,1,138,1,138,1,138,3,138,3230,8,138,1,139,1,139,1,139,1,139,1,
        139,1,139,1,140,1,140,1,140,1,140,1,140,1,141,1,141,1,141,3,141,
        3246,8,141,1,141,3,141,3249,8,141,1,141,1,141,3,141,3253,8,141,1,
        142,1,142,3,142,3257,8,142,1,142,1,142,1,143,1,143,1,143,1,143,3,
        143,3265,8,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,3273,8,
        143,5,143,3275,8,143,10,143,12,143,3278,9,143,1,144,1,144,1,144,
        1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,
        1,146,1,147,1,147,3,147,3297,8,147,1,147,3,147,3300,8,147,1,147,
        1,147,3,147,3304,8,147,1,147,1,147,1,147,1,147,3,147,3310,8,147,
        1,148,1,148,3,148,3314,8,148,1,148,3,148,3317,8,148,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,3,149,3326,8,149,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,3,149,3336,8,149,1,150,3,150,3339,
        8,150,1,150,1,150,3,150,3343,8,150,1,150,3,150,3346,8,150,1,151,
        1,151,3,151,3350,8,151,1,151,1,151,1,151,3,151,3355,8,151,1,151,
        3,151,3358,8,151,1,151,5,151,3361,8,151,10,151,12,151,3364,9,151,
        1,152,1,152,1,152,3,152,3369,8,152,1,152,1,152,1,153,1,153,1,153,
        1,153,1,153,3,153,3378,8,153,1,154,1,154,5,154,3382,8,154,10,154,
        12,154,3385,9,154,1,154,1,154,3,154,3389,8,154,1,154,3,154,3392,
        8,154,1,154,3,154,3395,8,154,1,154,3,154,3398,8,154,1,154,3,154,
        3401,8,154,1,154,3,154,3404,8,154,1,154,3,154,3407,8,154,1,155,1,
        155,1,156,1,156,1,157,1,157,1,157,1,158,1,158,1,158,1,159,1,159,
        1,159,3,159,3422,8,159,1,160,1,160,3,160,3426,8,160,1,161,1,161,
        1,161,1,161,3,161,3432,8,161,1,161,3,161,3435,8,161,1,161,3,161,
        3438,8,161,1,161,1,161,1,161,1,161,3,161,3444,8,161,1,161,1,161,
        1,161,3,161,3449,8,161,5,161,3451,8,161,10,161,12,161,3454,9,161,
        3,161,3456,8,161,1,162,1,162,1,162,1,162,1,162,3,162,3463,8,162,
        3,162,3465,8,162,1,162,1,162,1,163,1,163,1,163,1,164,1,164,1,164,
        1,164,1,165,1,165,1,165,1,165,5,165,3480,8,165,10,165,12,165,3483,
        9,165,1,166,1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,168,3,168,
        3494,8,168,1,168,1,168,1,168,3,168,3499,8,168,1,168,3,168,3502,8,
        168,1,168,3,168,3505,8,168,1,169,1,169,1,169,3,169,3510,8,169,1,
        170,1,170,1,171,1,171,3,171,3516,8,171,1,172,1,172,1,172,1,172,1,
        172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,
        3532,8,172,1,173,1,173,1,173,1,173,1,173,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,3552,
        8,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,3561,8,175,
        1,176,1,176,3,176,3565,8,176,1,176,1,176,1,176,5,176,3570,8,176,
        10,176,12,176,3573,9,176,1,177,1,177,3,177,3577,8,177,1,177,1,177,
        1,177,1,178,1,178,1,178,1,178,3,178,3586,8,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,3,178,3596,8,178,1,179,1,179,1,179,
        1,180,1,180,1,180,1,180,1,181,1,181,1,182,1,182,1,182,3,182,3610,
        8,182,1,183,1,183,1,183,5,183,3615,8,183,10,183,12,183,3618,9,183,
        1,184,1,184,1,184,1,184,5,184,3624,8,184,10,184,12,184,3627,9,184,
        1,185,1,185,1,185,1,186,1,186,1,186,3,186,3635,8,186,1,186,1,186,
        1,187,1,187,3,187,3641,8,187,1,188,1,188,4,188,3645,8,188,11,188,
        12,188,3646,1,189,1,189,1,189,1,189,3,189,3653,8,189,1,189,3,189,
        3656,8,189,1,189,1,189,1,189,1,189,3,189,3662,8,189,1,190,1,190,
        1,191,1,191,1,191,3,191,3669,8,191,1,192,1,192,3,192,3673,8,192,
        1,192,1,192,5,192,3677,8,192,10,192,12,192,3680,9,192,1,193,1,193,
        1,193,3,193,3685,8,193,3,193,3687,8,193,1,194,3,194,3690,8,194,1,
        194,1,194,3,194,3694,8,194,1,195,1,195,1,195,1,196,1,196,1,196,1,
        196,1,196,3,196,3704,8,196,1,196,1,196,1,196,3,196,3709,8,196,1,
        196,5,196,3712,8,196,10,196,12,196,3715,9,196,1,197,1,197,5,197,
        3719,8,197,10,197,12,197,3722,9,197,1,198,1,198,1,198,1,198,1,198,
        1,198,3,198,3730,8,198,1,198,1,198,1,198,1,198,1,198,1,198,3,198,
        3738,8,198,1,198,1,198,1,198,3,198,3743,8,198,1,199,1,199,3,199,
        3747,8,199,1,199,1,199,1,199,1,199,3,199,3753,8,199,1,199,3,199,
        3756,8,199,1,200,3,200,3759,8,200,1,200,1,200,3,200,3763,8,200,1,
        201,1,201,3,201,3767,8,201,1,201,1,201,1,202,1,202,1,202,1,202,1,
        202,1,202,3,202,3777,8,202,1,203,1,203,3,203,3781,8,203,1,203,3,
        203,3784,8,203,1,203,3,203,3787,8,203,1,203,3,203,3790,8,203,1,204,
        1,204,1,204,3,204,3795,8,204,1,204,1,204,1,205,1,205,3,205,3801,
        8,205,1,205,3,205,3804,8,205,1,205,1,205,1,205,1,205,3,205,3810,
        8,205,1,205,3,205,3813,8,205,3,205,3815,8,205,1,206,1,206,1,206,
        3,206,3820,8,206,1,206,1,206,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,3,207,3832,8,207,1,208,1,208,1,208,1,208,1,208,5,208,
        3839,8,208,10,208,12,208,3842,9,208,1,208,1,208,1,209,1,209,1,209,
        1,209,1,209,1,209,1,209,1,209,3,209,3854,8,209,1,209,3,209,3857,
        8,209,1,209,1,209,1,209,3,209,3862,8,209,1,209,1,209,1,209,1,209,
        1,209,3,209,3869,8,209,1,210,1,210,3,210,3873,8,210,1,210,3,210,
        3876,8,210,1,211,1,211,1,211,1,211,3,211,3882,8,211,1,212,1,212,
        1,212,1,212,1,213,1,213,1,213,1,213,1,214,1,214,1,214,1,214,3,214,
        3896,8,214,1,215,1,215,1,216,1,216,1,216,3,216,3903,8,216,1,216,
        1,216,1,217,1,217,1,217,5,217,3910,8,217,10,217,12,217,3913,9,217,
        1,218,1,218,1,218,3,218,3918,8,218,1,218,1,218,1,218,1,218,1,218,
        1,218,1,218,3,218,3927,8,218,1,218,1,218,3,218,3931,8,218,1,218,
        1,218,3,218,3935,8,218,1,219,1,219,1,220,1,220,1,221,1,221,1,221,
        1,221,3,221,3945,8,221,3,221,3947,8,221,1,222,1,222,1,222,1,222,
        1,222,1,222,3,222,3955,8,222,1,223,1,223,1,223,5,223,3960,8,223,
        10,223,12,223,3963,9,223,1,224,1,224,3,224,3967,8,224,1,225,3,225,
        3970,8,225,1,225,1,225,3,225,3974,8,225,1,225,3,225,3977,8,225,1,
        225,1,225,1,225,1,225,3,225,3983,8,225,1,225,3,225,3986,8,225,1,
        225,3,225,3989,8,225,1,226,1,226,1,226,1,226,3,226,3995,8,226,1,
        227,1,227,1,227,5,227,4000,8,227,10,227,12,227,4003,9,227,1,227,
        1,227,3,227,4007,8,227,1,227,1,227,3,227,4011,8,227,1,227,3,227,
        4014,8,227,1,227,3,227,4017,8,227,1,227,3,227,4020,8,227,3,227,4022,
        8,227,1,228,1,228,3,228,4026,8,228,1,229,1,229,1,229,1,229,1,229,
        3,229,4033,8,229,1,230,1,230,1,230,1,230,3,230,4039,8,230,1,230,
        1,230,3,230,4043,8,230,1,230,1,230,1,230,3,230,4048,8,230,1,230,
        3,230,4051,8,230,1,230,3,230,4054,8,230,1,230,3,230,4057,8,230,3,
        230,4059,8,230,1,230,1,230,1,230,3,230,4064,8,230,1,231,1,231,1,
        231,1,231,1,231,5,231,4071,8,231,10,231,12,231,4074,9,231,1,231,
        1,231,1,231,1,231,1,231,1,231,3,231,4082,8,231,1,232,1,232,3,232,
        4086,8,232,1,232,1,232,1,233,1,233,3,233,4092,8,233,1,233,3,233,
        4095,8,233,1,233,3,233,4098,8,233,1,234,1,234,1,234,1,234,3,234,
        4104,8,234,1,234,1,234,1,234,1,234,1,234,3,234,4111,8,234,3,234,
        4113,8,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,4121,8,234,
        1,234,1,234,1,234,1,234,3,234,4127,8,234,3,234,4129,8,234,1,235,
        1,235,1,235,1,236,1,236,1,236,1,236,1,236,3,236,4139,8,236,3,236,
        4141,8,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,5,237,4150,
        8,237,10,237,12,237,4153,9,237,1,237,1,237,1,237,3,237,4158,8,237,
        1,237,1,237,1,237,1,237,1,237,3,237,4165,8,237,1,238,1,238,1,238,
        1,238,1,238,1,238,3,238,4173,8,238,1,239,1,239,3,239,4177,8,239,
        1,239,1,239,3,239,4181,8,239,1,239,3,239,4184,8,239,3,239,4186,8,
        239,1,240,1,240,1,240,1,240,1,240,1,240,3,240,4194,8,240,1,241,1,
        241,1,241,1,242,1,242,1,242,1,242,3,242,4203,8,242,1,242,1,242,1,
        242,1,243,1,243,1,243,1,243,3,243,4212,8,243,1,244,1,244,1,244,1,
        244,1,244,3,244,4219,8,244,1,245,1,245,1,245,5,245,4224,8,245,10,
        245,12,245,4227,9,245,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        3,246,4357,8,246,1,247,1,247,1,248,1,248,1,249,1,249,1,250,1,250,
        1,251,1,251,1,252,1,252,1,253,1,253,1,254,1,254,1,255,1,255,1,256,
        1,256,1,257,1,257,1,258,1,258,1,259,1,259,1,260,1,260,1,261,1,261,
        1,262,1,262,1,263,1,263,1,264,1,264,1,265,1,265,1,266,1,266,1,267,
        1,267,1,268,1,268,1,269,1,269,1,270,1,270,1,271,1,271,1,272,1,272,
        3,272,4411,8,272,1,273,1,273,1,274,1,274,1,274,3,274,4418,8,274,
        1,275,1,275,3,275,4422,8,275,1,276,1,276,1,276,1,276,1,276,1,276,
        1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,3,276,4438,8,276,
        1,277,1,277,1,278,1,278,1,279,1,279,1,279,1,279,5,279,4448,8,279,
        10,279,12,279,4451,9,279,3,279,4453,8,279,1,279,1,279,1,280,1,280,
        1,280,1,280,1,280,1,280,5,280,4463,8,280,10,280,12,280,4466,9,280,
        1,280,3,280,4469,8,280,1,281,1,281,1,281,1,281,3,281,4475,8,281,
        1,281,1,281,1,281,1,281,1,281,3,281,4482,8,281,1,281,1,281,1,281,
        1,281,1,281,3,281,4489,8,281,1,281,1,281,1,281,1,281,1,281,3,281,
        4496,8,281,1,281,1,281,1,281,1,281,1,281,3,281,4503,8,281,1,281,
        1,281,1,281,1,281,1,281,3,281,4510,8,281,1,281,1,281,1,281,1,281,
        1,281,3,281,4517,8,281,1,281,3,281,4520,8,281,1,282,1,282,1,282,
        5,282,4525,8,282,10,282,12,282,4528,9,282,1,283,1,283,1,283,5,283,
        4533,8,283,10,283,12,283,4536,9,283,1,284,1,284,1,284,5,284,4541,
        8,284,10,284,12,284,4544,9,284,1,285,1,285,1,286,1,286,1,286,5,286,
        4551,8,286,10,286,12,286,4554,9,286,1,287,1,287,1,287,3,287,4559,
        8,287,1,287,1,287,3,287,4563,8,287,1,287,3,287,4566,8,287,1,287,
        3,287,4569,8,287,1,287,3,287,4572,8,287,1,287,3,287,4575,8,287,1,
        287,3,287,4578,8,287,1,288,1,288,1,288,3,288,4583,8,288,1,288,3,
        288,4586,8,288,1,289,1,289,1,289,1,289,1,289,3,289,4593,8,289,1,
        289,1,289,5,289,4597,8,289,10,289,12,289,4600,9,289,1,290,1,290,
        1,290,1,290,1,291,1,291,1,291,1,291,1,292,1,292,1,292,1,292,1,293,
        1,293,1,293,1,293,1,294,1,294,1,294,5,294,4621,8,294,10,294,12,294,
        4624,9,294,1,295,1,295,1,296,1,296,3,296,4630,8,296,1,296,3,296,
        4633,8,296,1,296,1,296,1,297,1,297,1,297,5,297,4640,8,297,10,297,
        12,297,4643,9,297,1,298,1,298,1,298,3,298,4648,8,298,1,299,1,299,
        1,299,1,299,1,300,1,300,1,300,1,300,1,301,1,301,1,301,1,301,1,302,
        1,302,1,303,1,303,1,303,1,303,1,303,3,303,4669,8,303,1,303,1,303,
        1,303,1,303,3,303,4675,8,303,1,304,1,304,1,304,1,304,3,304,4681,
        8,304,1,305,1,305,1,305,5,305,4686,8,305,10,305,12,305,4689,9,305,
        1,306,1,306,1,306,1,306,1,306,3,306,4696,8,306,1,306,1,306,1,306,
        1,306,3,306,4702,8,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,
        1,306,1,306,1,306,3,306,4714,8,306,3,306,4716,8,306,1,307,1,307,
        1,307,1,307,3,307,4722,8,307,1,307,1,307,3,307,4726,8,307,3,307,
        4728,8,307,1,308,1,308,3,308,4732,8,308,1,308,1,308,1,309,1,309,
        1,309,1,309,1,309,1,309,1,309,3,309,4743,8,309,1,310,1,310,1,310,
        3,310,4748,8,310,1,310,1,310,1,310,1,310,3,310,4754,8,310,1,310,
        1,310,1,310,1,310,1,310,3,310,4761,8,310,1,310,3,310,4764,8,310,
        1,310,3,310,4767,8,310,1,310,1,310,1,310,1,310,3,310,4773,8,310,
        3,310,4775,8,310,1,310,1,310,1,310,1,310,1,310,1,310,3,310,4783,
        8,310,1,310,3,310,4786,8,310,3,310,4788,8,310,3,310,4790,8,310,1,
        311,1,311,1,311,5,311,4795,8,311,10,311,12,311,4798,9,311,1,312,
        1,312,1,312,1,312,1,312,1,312,1,312,1,312,3,312,4808,8,312,1,312,
        3,312,4811,8,312,3,312,4813,8,312,1,312,1,312,3,312,4817,8,312,1,
        312,1,312,1,312,3,312,4822,8,312,3,312,4824,8,312,1,312,1,312,1,
        312,3,312,4829,8,312,1,312,1,312,1,312,1,312,3,312,4835,8,312,1,
        312,3,312,4838,8,312,3,312,4840,8,312,1,312,1,312,3,312,4844,8,312,
        1,312,3,312,4847,8,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,
        3,312,4856,8,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,3,312,
        4865,8,312,1,312,1,312,1,312,1,312,3,312,4871,8,312,3,312,4873,8,
        312,3,312,4875,8,312,1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,
        313,4884,8,313,1,313,1,313,3,313,4888,8,313,1,313,1,313,1,313,1,
        313,3,313,4894,8,313,1,313,3,313,4897,8,313,3,313,4899,8,313,1,313,
        1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,313,4910,8,313,
        1,313,1,313,1,313,3,313,4915,8,313,1,313,1,313,1,313,3,313,4920,
        8,313,1,313,1,313,1,313,1,313,3,313,4926,8,313,3,313,4928,8,313,
        1,313,1,313,3,313,4932,8,313,3,313,4934,8,313,1,314,1,314,1,314,
        1,315,1,315,1,315,3,315,4942,8,315,1,315,1,315,3,315,4946,8,315,
        1,315,1,315,1,316,3,316,4951,8,316,1,316,3,316,4954,8,316,1,316,
        5,316,4957,8,316,10,316,12,316,4960,9,316,1,316,1,316,3,316,4964,
        8,316,1,317,1,317,1,317,1,317,3,317,4970,8,317,1,318,1,318,1,318,
        1,318,1,319,1,319,1,319,3,319,4979,8,319,1,320,1,320,1,320,1,320,
        1,320,1,320,1,320,1,320,1,320,4,320,4990,8,320,11,320,12,320,4991,
        1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,3,321,
        5004,8,321,1,321,1,321,1,321,3,321,5009,8,321,1,321,1,321,1,321,
        1,321,1,321,1,321,3,321,5017,8,321,1,321,1,321,1,321,1,321,3,321,
        5023,8,321,3,321,5025,8,321,1,321,1,321,1,321,1,321,1,321,3,321,
        5032,8,321,3,321,5034,8,321,1,322,1,322,1,322,1,322,1,322,3,322,
        5041,8,322,1,323,1,323,1,323,3,323,5046,8,323,1,323,1,323,1,324,
        1,324,1,324,1,324,1,324,1,324,1,324,3,324,5057,8,324,1,324,1,324,
        1,324,3,324,5062,8,324,3,324,5064,8,324,1,324,1,324,3,324,5068,8,
        324,1,324,1,324,1,324,1,324,3,324,5074,8,324,1,324,3,324,5077,8,
        324,1,324,3,324,5080,8,324,1,324,1,324,1,324,1,324,1,324,1,324,1,
        324,1,324,3,324,5090,8,324,3,324,5092,8,324,1,325,1,325,1,325,1,
        325,3,325,5098,8,325,1,326,1,326,1,326,1,327,1,327,1,327,1,328,1,
        328,1,328,1,328,1,328,3,328,5111,8,328,1,328,1,328,3,328,5115,8,
        328,1,329,1,329,1,329,3,329,5120,8,329,1,330,1,330,1,330,1,331,1,
        331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,5,331,5135,8,
        331,10,331,12,331,5138,9,331,1,332,1,332,1,332,3,332,5143,8,332,
        1,332,1,332,1,332,1,332,1,332,1,332,1,332,3,332,5152,8,332,1,332,
        1,332,1,332,1,332,1,332,1,332,3,332,5160,8,332,1,332,1,332,3,332,
        5164,8,332,1,332,1,332,1,332,1,332,3,332,5170,8,332,1,332,1,332,
        1,332,1,332,1,332,1,332,1,332,1,332,3,332,5180,8,332,1,332,1,332,
        3,332,5184,8,332,1,333,1,333,1,334,1,334,1,334,5,334,5191,8,334,
        10,334,12,334,5194,9,334,1,335,1,335,3,335,5198,8,335,1,335,1,335,
        1,335,1,335,3,335,5204,8,335,3,335,5206,8,335,1,335,1,335,3,335,
        5210,8,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,
        3,335,5221,8,335,1,335,1,335,1,335,1,335,1,335,3,335,5228,8,335,
        1,335,1,335,1,335,1,335,3,335,5234,8,335,1,335,1,335,3,335,5238,
        8,335,1,336,1,336,1,336,3,336,5243,8,336,1,336,1,336,1,336,3,336,
        5248,8,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,5256,8,336,
        1,337,1,337,3,337,5260,8,337,1,337,5,337,5263,8,337,10,337,12,337,
        5266,9,337,1,338,1,338,1,338,1,338,1,338,1,338,3,338,5274,8,338,
        1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,
        3,339,5287,8,339,3,339,5289,8,339,1,340,1,340,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,1,340,3,340,5303,8,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,3,340,5312,8,340,3,340,5314,
        8,340,1,341,1,341,1,341,5,341,5319,8,341,10,341,12,341,5322,9,341,
        1,342,1,342,3,342,5326,8,342,1,343,1,343,3,343,5330,8,343,1,343,
        1,343,1,343,3,343,5335,8,343,1,343,1,343,1,343,1,343,5,343,5341,
        8,343,10,343,12,343,5344,9,343,1,343,1,343,1,343,1,343,3,343,5350,
        8,343,1,343,1,343,3,343,5354,8,343,1,343,1,343,1,343,1,343,3,343,
        5360,8,343,1,343,1,343,1,343,5,343,5365,8,343,10,343,12,343,5368,
        9,343,3,343,5370,8,343,1,344,1,344,1,344,1,344,1,345,3,345,5377,
        8,345,1,345,3,345,5380,8,345,1,345,1,345,1,345,1,345,3,345,5386,
        8,345,1,346,1,346,1,346,1,346,1,346,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,1,347,1,347,3,347,5403,8,347,1,348,1,348,1,348,
        3,348,5408,8,348,1,349,1,349,1,350,1,350,1,350,1,350,1,350,1,350,
        1,350,5,350,5419,8,350,10,350,12,350,5422,9,350,3,350,5424,8,350,
        1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,1,351,3,351,5435,
        8,351,3,351,5437,8,351,1,352,1,352,1,353,1,353,3,353,5443,8,353,
        1,354,1,354,1,354,1,354,1,354,1,355,1,355,1,355,1,355,1,355,5,355,
        5455,8,355,10,355,12,355,5458,9,355,1,356,1,356,1,356,1,357,1,357,
        1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,3,357,5474,
        8,357,1,357,1,357,1,357,3,357,5479,8,357,1,357,3,357,5482,8,357,
        1,357,1,357,3,357,5486,8,357,1,357,3,357,5489,8,357,1,357,1,357,
        1,357,1,357,1,357,1,357,3,357,5497,8,357,1,357,1,357,1,357,1,357,
        3,357,5503,8,357,1,357,1,357,1,357,3,357,5508,8,357,1,357,3,357,
        5511,8,357,3,357,5513,8,357,1,358,1,358,3,358,5517,8,358,1,358,1,
        358,1,358,3,358,5522,8,358,3,358,5524,8,358,1,359,1,359,1,359,1,
        360,1,360,1,360,1,360,1,360,1,360,1,360,3,360,5536,8,360,1,361,1,
        361,5,361,5540,8,361,10,361,12,361,5543,9,361,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,5556,8,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,
        5568,8,362,1,362,1,362,3,362,5572,8,362,3,362,5574,8,362,1,363,1,
        363,1,363,1,363,1,363,1,363,3,363,5582,8,363,1,364,1,364,3,364,5586,
        8,364,1,364,1,364,1,365,1,365,1,365,1,365,1,365,3,365,5595,8,365,
        1,366,1,366,1,366,1,366,1,367,1,367,1,367,1,367,1,367,1,367,1,367,
        3,367,5608,8,367,1,368,1,368,1,368,3,368,5613,8,368,1,369,1,369,
        3,369,5617,8,369,1,369,1,369,3,369,5621,8,369,1,369,3,369,5624,8,
        369,1,370,1,370,3,370,5628,8,370,1,370,1,370,3,370,5632,8,370,1,
        370,3,370,5635,8,370,1,371,1,371,1,371,3,371,5640,8,371,1,371,3,
        371,5643,8,371,1,372,1,372,1,372,1,372,3,372,5649,8,372,1,372,3,
        372,5652,8,372,1,373,1,373,1,373,1,373,3,373,5658,8,373,1,373,3,
        373,5661,8,373,1,374,1,374,1,374,1,374,1,374,1,375,1,375,1,375,1,
        376,1,376,1,376,1,376,1,376,1,377,1,377,1,377,1,377,1,377,1,378,
        1,378,1,378,1,378,1,378,1,379,1,379,3,379,5688,8,379,1,379,1,379,
        1,379,1,379,3,379,5694,8,379,1,379,3,379,5697,8,379,1,380,1,380,
        1,380,1,380,1,381,1,381,1,381,1,381,1,381,1,382,1,382,1,382,1,382,
        1,382,3,382,5713,8,382,1,383,1,383,1,383,1,383,1,383,3,383,5720,
        8,383,1,383,1,383,3,383,5724,8,383,1,383,3,383,5727,8,383,1,383,
        3,383,5730,8,383,1,384,1,384,1,384,1,384,1,384,3,384,5737,8,384,
        1,384,1,384,3,384,5741,8,384,1,384,3,384,5744,8,384,1,384,3,384,
        5747,8,384,1,385,1,385,3,385,5751,8,385,1,385,1,385,1,385,1,385,
        3,385,5757,8,385,1,385,3,385,5760,8,385,1,386,1,386,3,386,5764,8,
        386,1,386,1,386,1,387,1,387,1,387,1,387,1,387,1,387,1,387,1,388,
        1,388,1,388,1,388,1,388,1,388,1,388,1,389,1,389,1,389,3,389,5785,
        8,389,1,390,1,390,1,390,3,390,5790,8,390,1,391,1,391,1,391,1,392,
        1,392,1,392,3,392,5798,8,392,1,392,1,392,1,392,3,392,5803,8,392,
        1,392,3,392,5806,8,392,1,393,1,393,3,393,5810,8,393,1,393,1,393,
        3,393,5814,8,393,1,394,1,394,3,394,5818,8,394,1,394,1,394,1,395,
        1,395,3,395,5824,8,395,1,395,1,395,3,395,5828,8,395,1,396,1,396,
        1,396,3,396,5833,8,396,1,397,1,397,1,397,3,397,5838,8,397,1,398,
        1,398,1,398,1,399,1,399,1,399,1,399,1,399,1,399,3,399,5849,8,399,
        3,399,5851,8,399,1,400,1,400,1,400,1,400,3,400,5857,8,400,1,400,
        1,400,1,401,1,401,1,401,1,401,1,401,1,402,1,402,1,402,1,402,1,402,
        1,403,1,403,1,403,1,403,1,404,1,404,1,404,1,404,3,404,5879,8,404,
        1,405,1,405,1,405,1,405,1,405,1,406,1,406,1,406,1,406,1,406,1,407,
        1,407,1,407,1,407,1,407,1,408,1,408,1,408,1,408,1,408,3,408,5901,
        8,408,1,409,1,409,1,409,1,409,1,409,3,409,5908,8,409,1,410,1,410,
        1,410,1,410,1,410,1,410,1,411,1,411,1,411,1,411,1,411,1,411,1,412,
        1,412,1,412,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,414,1,414,
        1,414,3,414,5935,8,414,3,414,5937,8,414,1,415,1,415,3,415,5941,8,
        415,1,416,1,416,1,417,1,417,1,417,1,418,1,418,1,418,5,418,5951,8,
        418,10,418,12,418,5954,9,418,1,419,1,419,1,419,1,419,1,419,1,419,
        1,419,3,419,5963,8,419,1,420,1,420,1,420,1,420,1,420,1,420,1,420,
        1,420,3,420,5973,8,420,1,420,1,420,3,420,5977,8,420,1,420,1,420,
        1,420,1,420,5,420,5983,8,420,10,420,12,420,5986,9,420,3,420,5988,
        8,420,1,420,1,420,3,420,5992,8,420,1,420,1,420,1,420,1,420,1,420,
        1,420,1,420,3,420,6001,8,420,1,421,1,421,3,421,6005,8,421,1,422,
        1,422,1,422,5,422,6010,8,422,10,422,12,422,6013,9,422,1,423,1,423,
        3,423,6017,8,423,1,424,1,424,1,424,1,424,1,424,1,424,3,424,6025,
        8,424,1,425,1,425,1,425,3,425,6030,8,425,1,425,1,425,1,426,1,426,
        3,426,6036,8,426,1,427,1,427,1,427,5,427,6041,8,427,10,427,12,427,
        6044,9,427,1,428,1,428,3,428,6048,8,428,1,428,1,428,1,428,1,428,
        3,428,6054,8,428,1,428,3,428,6057,8,428,1,429,1,429,1,430,1,430,
        1,430,1,430,1,430,1,430,3,430,6067,8,430,3,430,6069,8,430,1,431,
        1,431,1,431,1,431,1,431,3,431,6076,8,431,1,432,1,432,1,432,3,432,
        6081,8,432,1,432,1,432,3,432,6085,8,432,1,432,3,432,6088,8,432,1,
        433,1,433,1,433,5,433,6093,8,433,10,433,12,433,6096,9,433,1,434,
        1,434,3,434,6100,8,434,1,434,1,434,3,434,6104,8,434,1,435,1,435,
        1,435,1,435,1,435,1,436,1,436,1,436,1,436,3,436,6115,8,436,1,437,
        1,437,1,437,1,437,1,437,1,437,3,437,6123,8,437,1,437,1,437,3,437,
        6127,8,437,1,437,3,437,6130,8,437,1,437,3,437,6133,8,437,1,438,1,
        438,3,438,6137,8,438,1,438,1,438,3,438,6141,8,438,1,438,5,438,6144,
        8,438,10,438,12,438,6147,9,438,1,439,1,439,1,439,3,439,6152,8,439,
        1,440,1,440,3,440,6156,8,440,1,440,1,440,1,441,1,441,1,442,1,442,
        1,442,1,442,1,442,3,442,6167,8,442,1,442,3,442,6170,8,442,1,442,
        3,442,6173,8,442,1,442,3,442,6176,8,442,1,443,1,443,1,443,1,443,
        1,443,1,443,3,443,6184,8,443,1,444,1,444,3,444,6188,8,444,1,444,
        5,444,6191,8,444,10,444,12,444,6194,9,444,1,445,1,445,1,445,1,445,
        1,445,3,445,6201,8,445,1,446,1,446,1,446,1,446,1,446,1,446,3,446,
        6209,8,446,1,447,1,447,1,447,1,447,3,447,6215,8,447,1,448,1,448,
        3,448,6219,8,448,1,448,1,448,1,448,1,448,3,448,6225,8,448,1,448,
        1,448,1,449,1,449,1,449,1,449,1,449,3,449,6234,8,449,1,449,1,449,
        1,449,1,449,1,449,1,449,1,449,1,449,1,449,3,449,6245,8,449,1,450,
        1,450,1,450,1,450,1,450,1,450,1,450,1,450,3,450,6255,8,450,1,451,
        1,451,1,451,1,451,1,452,1,452,1,452,1,453,1,453,1,453,1,454,1,454,
        1,455,1,455,1,455,1,455,3,455,6273,8,455,1,455,3,455,6276,8,455,
        1,455,1,455,3,455,6280,8,455,1,455,1,455,1,455,1,455,1,455,1,455,
        1,455,1,455,1,455,5,455,6291,8,455,10,455,12,455,6294,9,455,1,456,
        1,456,1,456,1,456,1,456,1,456,3,456,6302,8,456,1,456,1,456,1,456,
        1,456,1,456,1,456,1,456,1,456,1,456,1,456,5,456,6314,8,456,10,456,
        12,456,6317,9,456,1,457,1,457,1,458,1,458,3,458,6323,8,458,1,458,
        1,458,1,458,1,458,3,458,6329,8,458,1,458,1,458,1,458,1,458,3,458,
        6335,8,458,1,459,1,459,1,459,1,459,1,459,1,459,3,459,6343,8,459,
        1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,3,459,6354,
        8,459,1,459,1,459,3,459,6358,8,459,1,460,1,460,1,460,1,460,1,460,
        1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,
        1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,
        5,460,6387,8,460,10,460,12,460,6390,9,460,1,461,1,461,1,461,3,461,
        6395,8,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,3,461,6412,8,461,1,461,1,461,
        1,461,1,461,1,461,3,461,6419,8,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,6433,8,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,6444,8,461,
        1,461,1,461,1,461,3,461,6449,8,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,3,461,6460,8,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,3,461,6470,8,461,1,461,1,461,1,461,4,461,
        6475,8,461,11,461,12,461,6476,1,461,3,461,6480,8,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
        1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,6514,8,461,
        1,461,1,461,1,461,1,461,1,461,1,461,5,461,6522,8,461,10,461,12,461,
        6525,9,461,1,462,1,462,1,462,1,463,1,463,1,463,1,463,3,463,6534,
        8,463,1,464,1,464,1,464,3,464,6539,8,464,1,464,1,464,1,464,3,464,
        6544,8,464,1,464,1,464,1,464,1,464,1,464,3,464,6551,8,464,1,464,
        1,464,1,464,1,464,3,464,6557,8,464,1,464,1,464,1,464,3,464,6562,
        8,464,1,464,1,464,1,464,3,464,6567,8,464,1,464,1,464,1,464,1,464,
        3,464,6573,8,464,1,464,1,464,3,464,6577,8,464,1,464,1,464,1,464,
        3,464,6582,8,464,1,464,1,464,1,464,3,464,6587,8,464,1,464,1,464,
        1,464,1,464,1,464,3,464,6594,8,464,1,464,1,464,1,464,1,464,1,464,
        1,464,3,464,6602,8,464,1,464,1,464,1,464,3,464,6607,8,464,1,464,
        1,464,3,464,6611,8,464,1,464,1,464,3,464,6615,8,464,1,464,1,464,
        3,464,6619,8,464,3,464,6621,8,464,1,465,1,465,1,465,1,465,1,465,
        1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,
        3,466,6639,8,466,1,466,1,466,1,466,1,466,1,466,1,466,3,466,6647,
        8,466,1,466,1,466,3,466,6651,8,466,1,466,1,466,1,466,1,466,1,466,
        3,466,6658,8,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,
        1,466,1,466,3,466,6670,8,466,1,466,3,466,6673,8,466,1,466,1,466,
        3,466,6677,8,466,1,467,1,467,1,468,1,468,1,468,1,468,3,468,6685,
        8,468,1,469,1,469,1,469,1,469,1,469,1,469,1,469,1,470,1,470,1,470,
        3,470,6697,8,470,1,471,1,471,1,471,1,471,1,471,3,471,6704,8,471,
        1,471,1,471,3,471,6708,8,471,1,472,1,472,3,472,6712,8,472,1,473,
        1,473,1,473,1,473,3,473,6718,8,473,1,474,1,474,1,474,1,475,1,475,
        1,475,1,475,1,475,3,475,6728,8,475,1,475,1,475,1,475,1,475,1,475,
        1,475,1,475,3,475,6737,8,475,3,475,6739,8,475,1,476,3,476,6742,8,
        476,1,476,1,476,1,477,1,477,1,477,1,477,1,477,3,477,6751,8,477,1,
        478,1,478,1,478,5,478,6756,8,478,10,478,12,478,6759,9,478,1,479,
        1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,6771,
        8,479,1,479,1,479,1,479,3,479,6776,8,479,1,480,1,480,1,480,1,480,
        1,480,3,480,6783,8,480,1,480,1,480,1,480,1,480,3,480,6789,8,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        4,480,6813,8,480,11,480,12,480,6814,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,3,480,6825,8,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,3,480,6857,8,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,3,480,6876,8,480,1,480,1,480,1,480,1,480,3,480,6882,8,480,
        1,480,1,480,3,480,6886,8,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,3,480,6917,8,480,1,480,1,480,1,480,1,480,3,480,6923,8,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,
        6935,8,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,3,480,6948,8,480,1,480,1,480,3,480,6952,8,480,1,480,
        1,480,3,480,6956,8,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,6984,8,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,3,480,7034,8,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,3,480,7044,8,480,1,480,1,480,1,480,1,480,
        1,480,1,480,1,480,1,480,1,480,1,480,3,480,7056,8,480,1,480,1,480,
        1,480,3,480,7061,8,480,1,481,1,481,1,481,1,482,1,482,1,482,3,482,
        7069,8,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,
        1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7089,
        8,482,1,483,1,483,3,483,7093,8,483,1,483,1,483,1,484,1,484,1,485,
        1,485,1,485,1,485,1,485,1,485,1,485,1,485,5,485,7107,8,485,10,485,
        12,485,7110,9,485,3,485,7112,8,485,1,486,1,486,1,486,3,486,7117,
        8,486,1,486,3,486,7120,8,486,1,487,1,487,1,488,1,488,1,488,1,488,
        1,488,3,488,7129,8,488,1,488,1,488,3,488,7133,8,488,1,488,1,488,
        1,488,1,488,3,488,7139,8,488,1,488,1,488,1,488,1,488,3,488,7145,
        8,488,1,488,1,488,3,488,7149,8,488,1,488,1,488,1,489,1,489,1,489,
        1,489,1,489,1,489,1,489,3,489,7160,8,489,1,489,1,489,1,489,1,489,
        3,489,7166,8,489,3,489,7168,8,489,1,489,1,489,1,490,1,490,1,490,
        3,490,7175,8,490,1,490,1,490,1,490,1,490,1,490,3,490,7182,8,490,
        1,490,1,490,3,490,7186,8,490,1,491,1,491,1,491,5,491,7191,8,491,
        10,491,12,491,7194,9,491,1,492,1,492,3,492,7198,8,492,1,493,1,493,
        1,493,3,493,7203,8,493,1,494,1,494,1,494,1,494,1,495,1,495,1,495,
        3,495,7212,8,495,1,495,3,495,7215,8,495,1,496,1,496,3,496,7219,8,
        496,1,496,1,496,1,496,3,496,7224,8,496,3,496,7226,8,496,1,496,1,
        496,3,496,7230,8,496,1,497,1,497,3,497,7234,8,497,1,498,1,498,1,
        498,1,499,1,499,1,499,1,500,1,500,1,500,1,501,1,501,3,501,7247,8,
        501,1,501,1,501,3,501,7251,8,501,1,501,3,501,7254,8,501,1,501,1,
        501,3,501,7258,8,501,1,501,1,501,3,501,7262,8,501,1,501,1,501,3,
        501,7266,8,501,1,501,1,501,1,501,1,501,1,501,3,501,7273,8,501,1,
        501,1,501,3,501,7277,8,501,1,501,1,501,3,501,7281,8,501,1,501,1,
        501,1,501,1,501,1,501,1,501,3,501,7289,8,501,1,501,1,501,3,501,7293,
        8,501,1,502,1,502,1,502,5,502,7298,8,502,10,502,12,502,7301,9,502,
        1,503,1,503,1,503,3,503,7306,8,503,1,504,1,504,1,505,1,505,1,506,
        1,506,3,506,7314,8,506,1,507,1,507,1,508,1,508,1,508,1,508,1,509,
        1,509,1,509,1,509,1,510,1,510,1,510,1,510,1,511,1,511,1,511,5,511,
        7333,8,511,10,511,12,511,7336,9,511,1,512,1,512,3,512,7340,8,512,
        1,513,1,513,1,513,5,513,7345,8,513,10,513,12,513,7348,9,513,1,514,
        1,514,1,515,1,515,1,515,1,515,1,516,1,516,1,516,1,516,1,516,1,516,
        1,516,1,516,1,516,1,516,1,516,1,516,1,516,3,516,7369,8,516,1,517,
        1,517,1,517,1,518,1,518,1,518,1,518,1,518,1,519,1,519,1,519,1,519,
        1,519,1,519,3,519,7385,8,519,1,520,1,520,1,520,1,521,1,521,1,521,
        4,521,7393,8,521,11,521,12,521,7394,1,522,1,522,3,522,7399,8,522,
        1,522,1,522,1,522,4,522,7404,8,522,11,522,12,522,7405,1,522,3,522,
        7409,8,522,1,522,1,522,1,522,1,523,1,523,1,523,1,524,1,524,1,524,
        3,524,7420,8,524,1,525,1,525,1,526,1,526,1,526,1,527,1,527,3,527,
        7429,8,527,1,527,3,527,7432,8,527,1,527,1,527,1,528,1,528,1,528,
        3,528,7439,8,528,1,529,1,529,1,529,3,529,7444,8,529,1,530,1,530,
        1,530,1,530,1,530,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,532,
        1,532,1,532,1,532,1,532,1,532,1,532,1,533,1,533,1,533,4,533,7468,
        8,533,11,533,12,533,7469,1,534,1,534,1,534,1,534,3,534,7476,8,534,
        1,535,1,535,1,535,1,535,3,535,7482,8,535,1,535,1,535,3,535,7486,
        8,535,1,536,1,536,1,536,1,536,1,536,1,536,1,537,1,537,3,537,7496,
        8,537,1,538,1,538,3,538,7500,8,538,1,538,1,538,1,539,1,539,1,539,
        1,539,1,539,1,539,1,539,5,539,7511,8,539,10,539,12,539,7514,9,539,
        1,539,1,539,1,540,1,540,1,540,1,540,1,540,1,540,1,540,3,540,7525,
        8,540,1,541,1,541,1,541,1,541,1,541,1,541,1,542,1,542,1,542,1,543,
        1,543,1,543,1,544,1,544,3,544,7541,8,544,1,544,1,544,1,544,1,544,
        5,544,7547,8,544,10,544,12,544,7550,9,544,1,544,1,544,1,544,1,544,
        1,544,5,544,7557,8,544,10,544,12,544,7560,9,544,3,544,7562,8,544,
        1,545,1,545,1,545,3,545,7567,8,545,1,546,1,546,3,546,7571,8,546,
        1,546,1,546,1,546,1,547,1,547,3,547,7578,8,547,1,547,1,547,1,547,
        3,547,7583,8,547,1,548,1,548,1,549,1,549,1,549,3,549,7590,8,549,
        1,549,1,549,1,549,1,549,5,549,7596,8,549,10,549,12,549,7599,9,549,
        3,549,7601,8,549,1,550,1,550,1,550,3,550,7606,8,550,1,550,1,550,
        1,550,1,550,5,550,7612,8,550,10,550,12,550,7615,9,550,3,550,7617,
        8,550,1,551,1,551,1,551,1,551,1,552,1,552,1,552,1,553,1,553,1,553,
        1,554,1,554,3,554,7631,8,554,1,554,3,554,7634,8,554,1,554,1,554,
        1,554,1,554,1,555,1,555,1,555,1,555,1,555,1,555,1,555,3,555,7647,
        8,555,1,555,1,555,3,555,7651,8,555,3,555,7653,8,555,1,556,1,556,
        1,556,3,556,7658,8,556,1,557,1,557,1,557,3,557,7663,8,557,1,558,
        1,558,1,558,1,559,1,559,3,559,7670,8,559,1,559,1,559,1,560,1,560,
        3,560,7676,8,560,1,560,1,560,5,560,7680,8,560,10,560,12,560,7683,
        9,560,1,560,1,560,3,560,7687,8,560,1,560,3,560,7690,8,560,1,560,
        1,560,5,560,7694,8,560,10,560,12,560,7697,9,560,1,560,1,560,3,560,
        7701,8,560,1,560,3,560,7704,8,560,1,560,1,560,5,560,7708,8,560,10,
        560,12,560,7711,9,560,1,560,3,560,7714,8,560,1,560,1,560,1,560,1,
        560,3,560,7720,8,560,3,560,7722,8,560,1,560,3,560,7725,8,560,1,560,
        1,560,5,560,7729,8,560,10,560,12,560,7732,9,560,1,560,1,560,1,560,
        3,560,7737,8,560,1,560,1,560,1,560,1,560,1,560,3,560,7744,8,560,
        3,560,7746,8,560,3,560,7748,8,560,1,561,1,561,3,561,7752,8,561,1,
        562,1,562,5,562,7756,8,562,10,562,12,562,7759,9,562,1,562,3,562,
        7762,8,562,1,562,1,562,3,562,7766,8,562,1,562,1,562,1,562,3,562,
        7771,8,562,1,562,5,562,7774,8,562,10,562,12,562,7777,9,562,3,562,
        7779,8,562,1,563,3,563,7782,8,563,1,563,1,563,1,563,1,563,1,563,
        1,563,1,563,1,563,3,563,7792,8,563,1,563,1,563,1,563,1,563,3,563,
        7798,8,563,1,563,1,563,1,563,1,563,1,563,3,563,7805,8,563,1,563,
        1,563,1,563,3,563,7810,8,563,1,563,1,563,1,563,1,563,1,563,1,563,
        1,563,1,563,1,563,1,563,1,563,3,563,7823,8,563,1,563,1,563,1,563,
        1,563,1,563,1,563,3,563,7831,8,563,1,563,1,563,1,563,1,563,3,563,
        7837,8,563,1,563,1,563,1,563,3,563,7842,8,563,1,564,1,564,1,565,
        1,565,1,566,1,566,1,566,1,567,1,567,3,567,7853,8,567,1,568,1,568,
        3,568,7857,8,568,1,568,1,568,1,568,3,568,7862,8,568,1,568,1,568,
        3,568,7866,8,568,1,568,3,568,7869,8,568,1,569,1,569,1,569,3,569,
        7874,8,569,1,569,1,569,3,569,7878,8,569,1,569,1,569,1,569,1,569,
        1,569,1,569,3,569,7886,8,569,1,569,1,569,1,569,1,569,1,569,1,569,
        3,569,7894,8,569,3,569,7896,8,569,1,570,1,570,1,570,1,570,1,570,
        1,570,1,570,3,570,7905,8,570,1,571,1,571,1,571,1,571,5,571,7911,
        8,571,10,571,12,571,7914,9,571,1,571,1,571,1,572,1,572,3,572,7920,
        8,572,1,572,3,572,7923,8,572,1,573,1,573,1,573,1,573,5,573,7929,
        8,573,10,573,12,573,7932,9,573,1,573,1,573,1,574,1,574,1,574,1,574,
        3,574,7940,8,574,3,574,7942,8,574,1,575,1,575,1,576,1,576,3,576,
        7948,8,576,1,577,1,577,3,577,7952,8,577,1,577,1,577,1,577,1,577,
        1,577,1,577,1,577,3,577,7961,8,577,1,577,1,577,1,577,1,577,3,577,
        7967,8,577,1,577,3,577,7970,8,577,1,578,1,578,1,579,1,579,1,579,
        1,580,1,580,1,580,1,580,3,580,7981,8,580,1,581,1,581,1,582,1,582,
        1,582,1,583,1,583,3,583,7990,8,583,1,583,3,583,7993,8,583,1,583,
        1,583,1,583,3,583,7998,8,583,3,583,8000,8,583,1,583,3,583,8003,8,
        583,1,583,3,583,8006,8,583,1,583,1,583,3,583,8010,8,583,1,583,3,
        583,8013,8,583,1,583,1,583,3,583,8017,8,583,1,583,1,583,1,583,3,
        583,8022,8,583,1,583,3,583,8025,8,583,1,583,1,583,3,583,8029,8,583,
        1,583,3,583,8032,8,583,1,583,1,583,3,583,8036,8,583,1,583,1,583,
        1,583,3,583,8041,8,583,1,583,1,583,3,583,8045,8,583,1,583,1,583,
        1,583,1,583,1,583,1,583,1,583,1,583,1,583,1,583,3,583,8057,8,583,
        1,583,1,583,3,583,8061,8,583,1,583,1,583,1,583,1,583,3,583,8067,
        8,583,1,583,3,583,8070,8,583,1,583,1,583,1,583,3,583,8075,8,583,
        1,583,1,583,3,583,8079,8,583,1,583,1,583,3,583,8083,8,583,1,583,
        1,583,1,583,3,583,8088,8,583,1,583,1,583,1,583,1,583,1,583,1,583,
        1,583,3,583,8097,8,583,1,583,3,583,8100,8,583,1,583,1,583,3,583,
        8104,8,583,1,583,1,583,3,583,8108,8,583,1,583,3,583,8111,8,583,1,
        583,1,583,3,583,8115,8,583,1,583,1,583,3,583,8119,8,583,1,583,1,
        583,1,583,3,583,8124,8,583,1,583,1,583,1,583,3,583,8129,8,583,1,
        583,1,583,1,583,3,583,8134,8,583,1,584,1,584,1,584,3,584,8139,8,
        584,1,585,1,585,1,585,3,585,8144,8,585,3,585,8146,8,585,1,586,1,
        586,1,586,3,586,8151,8,586,1,586,1,586,1,587,4,587,8156,8,587,11,
        587,12,587,8157,1,588,1,588,1,588,1,588,1,588,1,588,3,588,8166,8,
        588,1,588,1,588,1,588,1,588,3,588,8172,8,588,3,588,8174,8,588,1,
        589,1,589,3,589,8178,8,589,1,589,1,589,3,589,8182,8,589,1,590,1,
        590,3,590,8186,8,590,1,590,1,590,3,590,8190,8,590,1,591,1,591,1,
        591,1,591,1,592,1,592,1,592,1,592,1,593,1,593,1,593,1,593,1,593,
        3,593,8205,8,593,1,594,1,594,1,594,1,594,3,594,8211,8,594,1,595,
        1,595,1,595,1,595,1,595,3,595,8218,8,595,1,596,1,596,3,596,8222,
        8,596,1,596,5,596,8225,8,596,10,596,12,596,8228,9,596,1,597,1,597,
        3,597,8232,8,597,1,597,3,597,8235,8,597,1,598,1,598,3,598,8239,8,
        598,1,598,3,598,8242,8,598,1,599,4,599,8245,8,599,11,599,12,599,
        8246,1,600,1,600,3,600,8251,8,600,1,600,1,600,1,600,1,600,3,600,
        8257,8,600,1,600,1,600,3,600,8261,8,600,1,600,1,600,3,600,8265,8,
        600,1,600,1,600,1,600,3,600,8270,8,600,1,600,1,600,1,600,3,600,8275,
        8,600,1,600,1,600,1,600,3,600,8280,8,600,1,600,1,600,1,600,3,600,
        8285,8,600,1,600,1,600,1,600,3,600,8290,8,600,1,600,1,600,1,600,
        3,600,8295,8,600,1,600,1,600,1,600,3,600,8300,8,600,1,600,1,600,
        1,600,3,600,8305,8,600,1,600,1,600,1,600,3,600,8310,8,600,1,600,
        1,600,1,600,3,600,8315,8,600,1,600,1,600,1,600,3,600,8320,8,600,
        1,600,1,600,1,600,3,600,8325,8,600,1,600,1,600,1,600,3,600,8330,
        8,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,3,600,8340,
        8,600,1,600,1,600,1,600,1,600,3,600,8346,8,600,1,600,1,600,1,600,
        1,600,3,600,8352,8,600,1,600,1,600,1,600,3,600,8357,8,600,1,600,
        1,600,1,600,1,600,1,600,3,600,8364,8,600,1,600,1,600,1,600,3,600,
        8369,8,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,3,600,8378,
        8,600,1,600,1,600,1,600,1,600,3,600,8384,8,600,1,600,1,600,1,600,
        3,600,8389,8,600,1,601,1,601,3,601,8393,8,601,1,602,3,602,8396,8,
        602,1,602,1,602,3,602,8400,8,602,1,602,1,602,1,603,3,603,8405,8,
        603,1,603,1,603,3,603,8409,8,603,1,603,1,603,1,604,3,604,8414,8,
        604,1,604,1,604,3,604,8418,8,604,1,604,1,604,1,605,1,605,1,605,1,
        605,1,605,3,605,8427,8,605,1,605,3,605,8430,8,605,1,605,3,605,8433,
        8,605,1,606,3,606,8436,8,606,1,606,1,606,3,606,8440,8,606,1,606,
        1,606,3,606,8444,8,606,1,606,1,606,3,606,8448,8,606,1,606,1,606,
        1,606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,1,606,
        3,606,8463,8,606,1,606,3,606,8466,8,606,3,606,8468,8,606,1,607,1,
        607,1,607,3,607,8473,8,607,1,607,1,607,1,607,1,607,1,607,1,607,1,
        607,3,607,8482,8,607,1,607,3,607,8485,8,607,1,607,1,607,3,607,8489,
        8,607,1,608,1,608,1,608,1,608,1,609,1,609,1,609,1,609,5,609,8499,
        8,609,10,609,12,609,8502,9,609,1,609,1,609,1,610,1,610,1,610,1,610,
        1,610,1,610,1,610,3,610,8513,8,610,1,610,1,610,1,610,3,610,8518,
        8,610,1,610,5,610,8521,8,610,10,610,12,610,8524,9,610,1,610,1,610,
        1,610,1,610,5,610,8530,8,610,10,610,12,610,8533,9,610,1,610,1,610,
        3,610,8537,8,610,1,611,1,611,1,611,1,611,1,611,5,611,8544,8,611,
        10,611,12,611,8547,9,611,1,611,1,611,3,611,8551,8,611,1,612,1,612,
        3,612,8555,8,612,1,612,1,612,3,612,8559,8,612,1,612,1,612,3,612,
        8563,8,612,1,612,1,612,1,612,3,612,8568,8,612,1,612,1,612,1,612,
        3,612,8573,8,612,1,612,1,612,1,612,1,612,3,612,8579,8,612,1,612,
        1,612,1,612,3,612,8584,8,612,1,612,3,612,8587,8,612,1,613,1,613,
        1,613,5,613,8592,8,613,10,613,12,613,8595,9,613,1,614,1,614,1,614,
        1,614,5,614,8601,8,614,10,614,12,614,8604,9,614,1,614,1,614,1,615,
        1,615,3,615,8610,8,615,1,616,1,616,1,616,1,616,1,617,1,617,1,617,
        1,618,1,618,1,618,1,619,1,619,1,619,1,619,1,619,3,619,8627,8,619,
        3,619,8629,8,619,1,620,1,620,1,620,1,620,1,621,1,621,1,621,1,621,
        1,622,3,622,8640,8,622,1,622,1,622,1,623,1,623,1,623,1,624,1,624,
        1,624,1,625,1,625,3,625,8652,8,625,1,626,1,626,1,626,1,626,1,626,
        1,626,1,627,1,627,1,627,5,627,8663,8,627,10,627,12,627,8666,9,627,
        1,628,1,628,1,628,5,628,8671,8,628,10,628,12,628,8674,9,628,1,629,
        1,629,1,629,1,629,3,629,8680,8,629,1,630,1,630,1,630,1,631,1,631,
        4,631,8687,8,631,11,631,12,631,8688,1,632,1,632,1,632,1,632,3,632,
        8695,8,632,1,632,1,632,1,632,1,632,1,632,1,632,3,632,8703,8,632,
        1,633,1,633,4,633,8707,8,633,11,633,12,633,8708,1,634,1,634,1,634,
        1,634,1,635,1,635,1,635,5,635,8718,8,635,10,635,12,635,8721,9,635,
        1,636,1,636,1,636,5,636,8726,8,636,10,636,12,636,8729,9,636,1,637,
        1,637,1,637,3,637,8734,8,637,1,637,1,637,3,637,8738,8,637,1,637,
        3,637,8741,8,637,1,638,1,638,1,638,1,638,3,638,8747,8,638,1,639,
        1,639,1,639,1,639,1,639,1,639,3,639,8755,8,639,1,640,1,640,1,640,
        1,640,1,641,1,641,1,641,1,641,1,641,1,642,1,642,1,642,1,642,1,643,
        1,643,1,643,1,643,1,643,1,643,1,644,1,644,1,644,1,644,1,644,1,644,
        1,645,1,645,1,645,1,645,1,645,1,645,1,645,1,646,1,646,1,646,1,646,
        1,646,3,646,8794,8,646,1,647,1,647,1,647,1,647,1,648,1,648,1,648,
        1,648,1,649,1,649,1,649,1,649,1,649,1,649,1,649,1,649,1,649,1,649,
        1,649,1,649,1,649,1,649,1,649,3,649,8819,8,649,1,650,1,650,1,650,
        1,651,1,651,1,651,1,652,1,652,3,652,8829,8,652,1,653,1,653,1,653,
        3,653,8834,8,653,3,653,8836,8,653,1,654,1,654,1,654,1,655,1,655,
        3,655,8843,8,655,1,656,1,656,1,657,1,657,1,658,1,658,1,658,1,659,
        1,659,1,659,3,659,8855,8,659,3,659,8857,8,659,1,660,1,660,1,661,
        1,661,1,662,1,662,1,662,1,662,5,662,8867,8,662,10,662,12,662,8870,
        9,662,1,662,1,662,1,663,1,663,1,664,1,664,3,664,8878,8,664,1,665,
        1,665,1,666,1,666,1,667,1,667,1,667,1,667,1,667,3,667,8889,8,667,
        1,667,1,667,1,668,1,668,1,669,1,669,1,670,1,670,1,671,1,671,1,672,
        1,672,1,673,1,673,1,674,1,674,1,675,1,675,1,676,1,676,3,676,8911,
        8,676,1,677,1,677,3,677,8915,8,677,1,678,1,678,1,679,1,679,1,680,
        1,680,1,681,1,681,1,682,1,682,1,683,1,683,1,684,1,684,1,685,1,685,
        1,686,1,686,1,687,1,687,1,688,1,688,3,688,8939,8,688,1,689,1,689,
        1,689,1,690,1,690,1,690,1,690,1,690,1,690,3,690,8950,8,690,3,690,
        8952,8,690,1,691,1,691,3,691,8956,8,691,1,692,1,692,1,692,5,692,
        8961,8,692,10,692,12,692,8964,9,692,1,693,1,693,1,693,5,693,8969,
        8,693,10,693,12,693,8972,9,693,1,694,1,694,1,695,1,695,3,695,8978,
        8,695,1,696,1,696,1,697,1,697,3,697,8984,8,697,1,698,1,698,1,699,
        1,699,1,700,1,700,1,701,1,701,1,702,1,702,1,702,3,702,8997,8,702,
        1,703,1,703,3,703,9001,8,703,1,704,1,704,1,704,5,704,9006,8,704,
        10,704,12,704,9009,9,704,1,705,1,705,1,705,1,705,1,706,1,706,3,706,
        9017,8,706,1,707,1,707,1,707,3,707,9022,8,707,3,707,9024,8,707,1,
        708,1,708,1,708,1,709,1,709,1,710,1,710,1,711,1,711,1,712,1,712,
        1,712,1,712,1,712,3,712,9040,8,712,1,713,1,713,1,713,1,713,1,713,
        3,713,9047,8,713,1,714,1,714,1,714,3,714,9052,8,714,1,715,1,715,
        1,715,1,715,1,715,1,715,3,715,9060,8,715,1,715,3,715,9063,8,715,
        1,716,1,716,1,716,3,716,9068,8,716,1,717,1,717,1,718,1,718,1,718,
        1,718,5,718,9076,8,718,10,718,12,718,9079,9,718,1,718,1,718,1,719,
        1,719,1,719,3,719,9086,8,719,1,720,1,720,1,720,3,720,9091,8,720,
        1,721,1,721,1,721,3,721,9096,8,721,1,722,3,722,9099,8,722,1,722,
        1,722,3,722,9103,8,722,1,722,5,722,9106,8,722,10,722,12,722,9109,
        9,722,1,723,1,723,1,724,1,724,1,724,5,724,9116,8,724,10,724,12,724,
        9119,9,724,1,725,1,725,1,725,3,725,9124,8,725,1,726,1,726,1,727,
        1,727,1,728,1,728,1,729,1,729,1,729,1,729,1,729,1,729,3,729,9138,
        8,729,1,730,1,730,3,730,9142,8,730,1,731,1,731,1,732,1,732,1,732,
        1,732,1,732,1,732,1,733,1,733,3,733,9154,8,733,1,734,1,734,3,734,
        9158,8,734,1,735,1,735,3,735,9162,8,735,1,736,1,736,3,736,9166,8,
        736,1,737,1,737,1,737,1,738,1,738,1,739,1,739,1,740,1,740,1,740,
        1,740,1,740,1,740,3,740,9181,8,740,1,741,1,741,1,741,1,742,1,742,
        1,743,1,743,1,743,1,743,1,743,1,743,1,743,3,743,9195,8,743,1,743,
        1,743,1,743,1,743,1,743,3,743,9202,8,743,3,743,9204,8,743,1,744,
        1,744,1,745,1,745,1,746,1,746,1,746,1,746,1,746,1,746,1,746,1,746,
        1,746,1,746,1,746,3,746,9221,8,746,1,746,1,746,1,746,3,746,9226,
        8,746,3,746,9228,8,746,1,747,1,747,1,748,1,748,1,748,1,748,1,748,
        3,748,9237,8,748,1,749,1,749,1,749,3,749,9242,8,749,1,749,1,749,
        1,749,3,749,9247,8,749,3,749,9249,8,749,1,750,1,750,1,750,1,750,
        3,750,9255,8,750,1,751,1,751,1,752,1,752,1,753,1,753,1,753,3,753,
        9264,8,753,1,753,0,4,910,912,920,922,754,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
        170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
        202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
        234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,
        266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
        298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,
        330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
        362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,
        394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,
        426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,
        458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,
        490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,
        522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,
        554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,
        586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,
        618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,
        650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,
        682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,
        714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,
        746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,
        778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,
        810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,
        842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,
        874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,
        906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,
        938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,
        970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,
        1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,
        1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,
        1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,
        1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,
        1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,
        1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,
        1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,
        1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,
        1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,
        1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,
        1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,
        1288,1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,
        1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,
        1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,
        1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,
        1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,
        1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,1442,
        1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,
        1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,
        1496,1498,1500,1502,1504,1506,0,176,1,0,730,731,2,0,63,63,599,599,
        2,0,93,93,488,488,1,0,653,654,2,0,51,51,184,184,1,0,732,733,2,0,
        94,94,312,312,2,0,177,177,192,192,2,0,264,264,475,475,4,0,164,164,
        280,280,455,455,566,566,2,0,168,168,281,281,2,0,458,458,613,613,
        2,0,393,393,646,646,3,0,359,359,587,587,611,611,2,0,53,53,73,73,
        3,0,171,171,274,274,623,623,2,0,229,229,433,433,2,0,581,581,583,
        583,3,0,264,264,321,321,449,449,2,0,225,225,387,387,4,0,225,225,
        298,298,387,387,437,437,2,0,6,6,9,12,3,0,169,169,255,255,321,321,
        1,0,635,636,2,0,153,153,661,661,2,0,125,125,321,321,2,0,805,805,
        811,811,2,0,308,308,500,500,2,0,169,169,321,321,2,0,671,671,803,
        803,6,0,57,57,180,180,255,255,542,544,546,546,565,565,2,0,29,29,
        400,400,2,0,3,5,43,43,3,0,450,450,500,500,691,691,2,0,141,141,497,
        497,2,0,64,64,172,172,2,0,520,520,623,623,2,0,302,302,495,495,2,
        0,140,140,271,271,2,0,57,57,180,180,2,0,230,230,264,264,2,0,268,
        268,295,295,2,0,404,404,657,657,3,0,276,276,581,581,583,583,2,0,
        74,74,553,553,2,0,291,291,489,489,2,0,77,77,341,341,2,0,322,322,
        766,766,2,0,326,326,772,772,2,0,323,323,767,767,2,0,343,343,790,
        790,2,0,329,329,775,775,2,0,330,330,776,776,2,0,324,324,769,769,
        2,0,331,331,778,778,2,0,325,325,770,770,2,0,339,339,779,779,2,0,
        333,333,780,780,2,0,332,332,781,781,2,0,335,335,783,783,2,0,336,
        336,784,784,2,0,337,337,785,785,2,0,338,338,786,786,2,0,340,340,
        787,787,2,0,342,342,789,789,2,0,746,746,788,788,2,0,334,334,782,
        782,2,0,720,720,777,777,2,0,721,721,765,765,2,0,344,344,771,771,
        2,0,743,743,768,768,2,0,744,744,791,791,3,0,401,401,751,752,806,
        806,2,0,327,327,773,773,2,0,328,328,774,774,2,0,539,539,541,541,
        2,0,466,466,548,548,2,0,526,526,762,762,2,0,163,163,184,184,3,0,
        389,389,549,549,658,658,2,0,314,314,620,620,2,0,166,166,727,727,
        3,0,238,238,440,440,583,583,4,0,274,274,460,460,511,511,623,623,
        13,0,171,171,184,184,205,205,208,208,222,222,268,268,441,441,445,
        445,468,468,522,522,575,575,603,603,625,625,4,0,499,499,582,582,
        627,627,644,644,2,0,139,139,184,184,2,0,166,166,389,389,2,0,215,
        215,449,449,1,0,813,814,5,0,100,100,215,215,219,219,357,357,449,
        449,3,0,215,215,449,449,628,628,2,0,246,246,666,666,2,0,119,119,
        610,610,2,0,235,235,282,282,2,0,267,268,293,293,6,0,57,57,138,138,
        286,286,358,358,533,533,577,577,2,0,127,127,448,448,4,0,257,257,
        439,439,557,557,626,626,5,0,77,77,198,198,200,200,240,240,527,527,
        2,0,627,627,718,718,2,0,172,173,213,213,3,0,218,218,605,605,619,
        619,2,0,23,23,61,61,2,0,26,26,412,412,2,0,57,57,62,62,2,0,6,6,8,
        13,3,0,16,18,181,181,372,372,1,0,14,15,1,0,21,22,2,0,14,15,20,20,
        2,0,79,80,82,82,2,0,350,350,368,368,5,0,558,558,561,561,574,574,
        640,640,643,643,4,0,686,687,700,700,702,702,704,704,2,0,692,692,
        694,694,2,0,689,689,693,693,2,0,225,225,298,298,2,0,718,718,815,
        815,2,0,264,264,703,703,2,0,52,52,568,568,1,0,155,156,1,0,593,594,
        4,0,154,154,157,157,592,592,595,595,4,0,243,243,309,309,374,376,
        429,430,2,0,1,1,390,390,2,0,1,1,19,19,5,0,158,161,258,260,364,365,
        508,508,663,663,9,0,162,162,261,261,361,361,366,366,373,373,447,
        447,509,509,648,648,664,664,3,0,135,135,210,210,614,614,2,0,143,
        143,550,550,2,0,396,396,501,501,10,0,97,97,107,107,116,116,130,132,
        148,148,360,360,378,378,507,507,567,567,585,585,2,0,564,564,645,
        645,3,0,166,166,188,188,226,226,3,0,166,166,179,179,358,358,3,0,
        236,236,420,420,525,525,3,0,88,88,252,252,504,504,1,0,669,670,2,
        0,608,608,630,630,5,0,76,76,280,280,355,355,528,528,597,597,3,0,
        164,164,226,227,397,397,1,0,85,86,2,0,317,317,354,354,4,0,243,244,
        309,309,374,376,429,430,3,0,524,524,621,621,665,665,1,0,554,556,
        2,0,104,104,584,584,6,0,121,121,123,123,166,166,188,188,226,226,
        459,459,3,0,225,225,298,298,392,392,2,0,179,179,358,358,2,0,310,
        310,450,450,2,0,348,348,367,367,2,0,153,153,268,268,3,0,272,272,
        282,282,415,415,2,0,551,551,588,588,2,0,399,399,403,403,2,0,312,
        312,394,394,2,0,820,820,822,822,3,0,3,5,44,44,46,47,2,0,3,5,44,44,
        2,0,3,5,46,47,1,0,44,45,2,0,218,218,605,605,2,0,42,42,395,395,1,
        0,3,5,1,0,6,7,5,0,246,246,312,312,516,516,666,666,681,681,3,0,208,
        208,522,522,722,722,32,0,65,65,74,74,90,91,102,102,104,104,118,118,
        120,120,133,133,163,163,183,183,195,195,228,229,251,251,254,254,
        266,266,277,277,297,297,392,392,433,433,435,435,472,472,485,485,
        496,496,505,505,524,524,526,526,553,553,562,562,606,606,615,616,
        659,659,685,685,9,0,205,205,222,222,389,389,441,441,445,445,468,
        468,476,476,575,575,717,717,157,0,49,50,52,56,59,59,62,62,67,72,
        78,78,81,81,84,86,88,88,94,94,97,98,100,101,106,111,113,114,116,
        117,119,119,121,125,127,128,130,132,134,134,138,138,143,143,148,
        148,152,154,157,157,162,162,167,168,170,170,175,179,186,188,192,
        192,194,194,196,201,203,204,206,207,211,212,214,216,219,220,223,
        226,233,234,236,236,240,240,242,245,248,248,252,252,256,257,261,
        262,265,265,267,267,270,270,275,276,281,281,285,286,288,289,292,
        292,294,294,298,298,300,300,303,304,309,310,313,313,315,316,322,
        322,324,339,341,344,346,349,351,352,357,361,363,363,366,367,369,
        369,371,371,373,381,383,388,393,393,396,396,398,398,400,400,402,
        402,404,405,408,408,416,422,424,431,436,437,439,439,442,444,447,
        449,452,452,456,459,462,466,469,469,471,471,473,473,477,483,487,
        487,489,491,493,493,497,499,501,502,504,504,506,507,509,510,514,
        515,517,517,520,520,525,525,527,527,529,533,539,541,543,543,545,
        545,548,548,550,550,552,552,554,557,563,563,566,571,576,578,581,
        582,584,587,589,590,592,595,601,602,607,608,610,613,619,619,622,
        622,624,624,626,628,634,634,636,636,639,639,644,644,646,649,654,
        656,658,658,660,661,664,664,667,670,672,672,677,679,682,683,688,
        688,690,690,697,698,701,701,703,703,705,706,710,716,719,721,723,
        733,735,738,740,740,743,746,753,756,758,760,762,802,4,0,592,592,
        595,595,739,739,741,752,4,0,804,804,806,809,811,811,815,815,54,0,
        49,49,59,59,65,65,72,72,74,74,90,91,102,102,104,104,109,109,118,
        118,120,120,133,133,163,163,183,183,195,195,228,229,233,233,242,
        242,251,251,254,254,256,256,277,277,297,297,392,392,405,405,408,
        408,416,416,419,419,423,423,431,431,433,433,435,435,469,469,472,
        472,485,485,487,487,496,496,505,505,510,510,517,517,524,524,526,
        526,530,531,553,553,562,562,606,606,615,616,624,624,656,656,659,
        659,667,667,669,670,685,685,728,731,148,0,50,50,52,56,62,62,67,71,
        78,78,81,81,84,86,88,88,94,94,97,98,100,101,106,108,110,111,113,
        114,116,117,119,119,121,125,127,128,130,132,134,134,138,138,143,
        143,148,148,152,154,157,157,162,162,167,168,170,170,175,179,186,
        188,192,192,194,194,196,201,203,204,206,206,211,211,214,216,219,
        220,223,226,234,234,236,236,240,240,243,246,248,248,252,252,257,
        257,261,262,265,265,267,267,270,270,275,276,281,281,285,286,288,
        289,292,292,294,294,298,298,300,300,303,304,309,310,312,313,315,
        316,322,322,324,339,341,344,346,349,351,352,357,361,363,363,366,
        367,369,369,371,371,373,381,383,388,393,393,396,396,398,398,400,
        400,402,402,417,418,420,422,424,430,436,437,439,439,442,444,447,
        449,452,452,456,459,462,466,471,471,473,473,477,483,489,491,493,
        493,497,499,501,502,504,504,506,507,509,509,514,516,520,520,525,
        525,527,527,529,529,532,533,539,541,543,543,545,545,548,548,550,
        550,552,552,554,557,563,563,566,571,575,578,581,582,584,587,589,
        590,592,595,601,602,607,613,619,619,622,622,626,628,636,636,639,
        639,644,644,646,649,655,655,658,658,660,661,664,664,672,672,677,
        679,682,684,688,688,690,690,697,698,701,701,703,703,705,706,710,
        716,719,720,724,725,727,727,732,733,735,736,757,757,10329,0,1515,
        1,0,0,0,2,1595,1,0,0,0,4,1597,1,0,0,0,6,1620,1,0,0,0,8,1634,1,0,
        0,0,10,1637,1,0,0,0,12,1675,1,0,0,0,14,1684,1,0,0,0,16,1697,1,0,
        0,0,18,1699,1,0,0,0,20,1704,1,0,0,0,22,1724,1,0,0,0,24,1733,1,0,
        0,0,26,1735,1,0,0,0,28,1750,1,0,0,0,30,1846,1,0,0,0,32,1850,1,0,
        0,0,34,1866,1,0,0,0,36,2003,1,0,0,0,38,2008,1,0,0,0,40,2010,1,0,
        0,0,42,2012,1,0,0,0,44,2026,1,0,0,0,46,2034,1,0,0,0,48,2050,1,0,
        0,0,50,2052,1,0,0,0,52,2055,1,0,0,0,54,2060,1,0,0,0,56,2062,1,0,
        0,0,58,2077,1,0,0,0,60,2085,1,0,0,0,62,2095,1,0,0,0,64,2097,1,0,
        0,0,66,2119,1,0,0,0,68,2128,1,0,0,0,70,2131,1,0,0,0,72,2144,1,0,
        0,0,74,2149,1,0,0,0,76,2153,1,0,0,0,78,2192,1,0,0,0,80,2194,1,0,
        0,0,82,2214,1,0,0,0,84,2229,1,0,0,0,86,2232,1,0,0,0,88,2257,1,0,
        0,0,90,2267,1,0,0,0,92,2270,1,0,0,0,94,2275,1,0,0,0,96,2284,1,0,
        0,0,98,2286,1,0,0,0,100,2290,1,0,0,0,102,2302,1,0,0,0,104,2331,1,
        0,0,0,106,2333,1,0,0,0,108,2336,1,0,0,0,110,2366,1,0,0,0,112,2383,
        1,0,0,0,114,2386,1,0,0,0,116,2411,1,0,0,0,118,2414,1,0,0,0,120,2466,
        1,0,0,0,122,2468,1,0,0,0,124,2472,1,0,0,0,126,2481,1,0,0,0,128,2497,
        1,0,0,0,130,2499,1,0,0,0,132,2507,1,0,0,0,134,2533,1,0,0,0,136,2535,
        1,0,0,0,138,2547,1,0,0,0,140,2562,1,0,0,0,142,2564,1,0,0,0,144,2567,
        1,0,0,0,146,2588,1,0,0,0,148,2590,1,0,0,0,150,2596,1,0,0,0,152,2602,
        1,0,0,0,154,2608,1,0,0,0,156,2614,1,0,0,0,158,2620,1,0,0,0,160,2627,
        1,0,0,0,162,2635,1,0,0,0,164,2637,1,0,0,0,166,2643,1,0,0,0,168,2649,
        1,0,0,0,170,2655,1,0,0,0,172,2662,1,0,0,0,174,2680,1,0,0,0,176,2682,
        1,0,0,0,178,2686,1,0,0,0,180,2691,1,0,0,0,182,2710,1,0,0,0,184,2714,
        1,0,0,0,186,2747,1,0,0,0,188,2778,1,0,0,0,190,2795,1,0,0,0,192,2797,
        1,0,0,0,194,2816,1,0,0,0,196,2822,1,0,0,0,198,2828,1,0,0,0,200,2834,
        1,0,0,0,202,2841,1,0,0,0,204,2850,1,0,0,0,206,2867,1,0,0,0,208,2869,
        1,0,0,0,210,2876,1,0,0,0,212,2886,1,0,0,0,214,2900,1,0,0,0,216,2906,
        1,0,0,0,218,2914,1,0,0,0,220,2920,1,0,0,0,222,2928,1,0,0,0,224,2934,
        1,0,0,0,226,2944,1,0,0,0,228,2948,1,0,0,0,230,2954,1,0,0,0,232,2959,
        1,0,0,0,234,2969,1,0,0,0,236,3012,1,0,0,0,238,3017,1,0,0,0,240,3019,
        1,0,0,0,242,3022,1,0,0,0,244,3052,1,0,0,0,246,3054,1,0,0,0,248,3083,
        1,0,0,0,250,3090,1,0,0,0,252,3094,1,0,0,0,254,3102,1,0,0,0,256,3115,
        1,0,0,0,258,3117,1,0,0,0,260,3135,1,0,0,0,262,3147,1,0,0,0,264,3153,
        1,0,0,0,266,3159,1,0,0,0,268,3211,1,0,0,0,270,3213,1,0,0,0,272,3215,
        1,0,0,0,274,3221,1,0,0,0,276,3223,1,0,0,0,278,3231,1,0,0,0,280,3237,
        1,0,0,0,282,3245,1,0,0,0,284,3254,1,0,0,0,286,3264,1,0,0,0,288,3279,
        1,0,0,0,290,3284,1,0,0,0,292,3289,1,0,0,0,294,3294,1,0,0,0,296,3316,
        1,0,0,0,298,3335,1,0,0,0,300,3338,1,0,0,0,302,3349,1,0,0,0,304,3365,
        1,0,0,0,306,3377,1,0,0,0,308,3379,1,0,0,0,310,3408,1,0,0,0,312,3410,
        1,0,0,0,314,3412,1,0,0,0,316,3415,1,0,0,0,318,3418,1,0,0,0,320,3425,
        1,0,0,0,322,3427,1,0,0,0,324,3457,1,0,0,0,326,3468,1,0,0,0,328,3471,
        1,0,0,0,330,3475,1,0,0,0,332,3484,1,0,0,0,334,3488,1,0,0,0,336,3493,
        1,0,0,0,338,3506,1,0,0,0,340,3511,1,0,0,0,342,3515,1,0,0,0,344,3531,
        1,0,0,0,346,3533,1,0,0,0,348,3551,1,0,0,0,350,3553,1,0,0,0,352,3562,
        1,0,0,0,354,3574,1,0,0,0,356,3595,1,0,0,0,358,3597,1,0,0,0,360,3600,
        1,0,0,0,362,3604,1,0,0,0,364,3606,1,0,0,0,366,3611,1,0,0,0,368,3619,
        1,0,0,0,370,3628,1,0,0,0,372,3631,1,0,0,0,374,3640,1,0,0,0,376,3642,
        1,0,0,0,378,3661,1,0,0,0,380,3663,1,0,0,0,382,3668,1,0,0,0,384,3672,
        1,0,0,0,386,3686,1,0,0,0,388,3689,1,0,0,0,390,3695,1,0,0,0,392,3708,
        1,0,0,0,394,3716,1,0,0,0,396,3742,1,0,0,0,398,3755,1,0,0,0,400,3762,
        1,0,0,0,402,3764,1,0,0,0,404,3776,1,0,0,0,406,3778,1,0,0,0,408,3791,
        1,0,0,0,410,3814,1,0,0,0,412,3816,1,0,0,0,414,3823,1,0,0,0,416,3833,
        1,0,0,0,418,3868,1,0,0,0,420,3875,1,0,0,0,422,3881,1,0,0,0,424,3883,
        1,0,0,0,426,3887,1,0,0,0,428,3895,1,0,0,0,430,3897,1,0,0,0,432,3902,
        1,0,0,0,434,3906,1,0,0,0,436,3934,1,0,0,0,438,3936,1,0,0,0,440,3938,
        1,0,0,0,442,3946,1,0,0,0,444,3948,1,0,0,0,446,3956,1,0,0,0,448,3966,
        1,0,0,0,450,3969,1,0,0,0,452,3994,1,0,0,0,454,4021,1,0,0,0,456,4023,
        1,0,0,0,458,4032,1,0,0,0,460,4063,1,0,0,0,462,4081,1,0,0,0,464,4083,
        1,0,0,0,466,4097,1,0,0,0,468,4099,1,0,0,0,470,4130,1,0,0,0,472,4133,
        1,0,0,0,474,4164,1,0,0,0,476,4166,1,0,0,0,478,4185,1,0,0,0,480,4193,
        1,0,0,0,482,4195,1,0,0,0,484,4198,1,0,0,0,486,4211,1,0,0,0,488,4213,
        1,0,0,0,490,4220,1,0,0,0,492,4356,1,0,0,0,494,4358,1,0,0,0,496,4360,
        1,0,0,0,498,4362,1,0,0,0,500,4364,1,0,0,0,502,4366,1,0,0,0,504,4368,
        1,0,0,0,506,4370,1,0,0,0,508,4372,1,0,0,0,510,4374,1,0,0,0,512,4376,
        1,0,0,0,514,4378,1,0,0,0,516,4380,1,0,0,0,518,4382,1,0,0,0,520,4384,
        1,0,0,0,522,4386,1,0,0,0,524,4388,1,0,0,0,526,4390,1,0,0,0,528,4392,
        1,0,0,0,530,4394,1,0,0,0,532,4396,1,0,0,0,534,4398,1,0,0,0,536,4400,
        1,0,0,0,538,4402,1,0,0,0,540,4404,1,0,0,0,542,4406,1,0,0,0,544,4410,
        1,0,0,0,546,4412,1,0,0,0,548,4417,1,0,0,0,550,4421,1,0,0,0,552,4437,
        1,0,0,0,554,4439,1,0,0,0,556,4441,1,0,0,0,558,4443,1,0,0,0,560,4456,
        1,0,0,0,562,4519,1,0,0,0,564,4521,1,0,0,0,566,4529,1,0,0,0,568,4537,
        1,0,0,0,570,4545,1,0,0,0,572,4547,1,0,0,0,574,4555,1,0,0,0,576,4579,
        1,0,0,0,578,4592,1,0,0,0,580,4601,1,0,0,0,582,4605,1,0,0,0,584,4609,
        1,0,0,0,586,4613,1,0,0,0,588,4617,1,0,0,0,590,4625,1,0,0,0,592,4632,
        1,0,0,0,594,4636,1,0,0,0,596,4647,1,0,0,0,598,4649,1,0,0,0,600,4653,
        1,0,0,0,602,4657,1,0,0,0,604,4661,1,0,0,0,606,4674,1,0,0,0,608,4676,
        1,0,0,0,610,4682,1,0,0,0,612,4690,1,0,0,0,614,4727,1,0,0,0,616,4729,
        1,0,0,0,618,4742,1,0,0,0,620,4744,1,0,0,0,622,4791,1,0,0,0,624,4874,
        1,0,0,0,626,4933,1,0,0,0,628,4935,1,0,0,0,630,4938,1,0,0,0,632,4950,
        1,0,0,0,634,4969,1,0,0,0,636,4971,1,0,0,0,638,4975,1,0,0,0,640,4980,
        1,0,0,0,642,5033,1,0,0,0,644,5040,1,0,0,0,646,5042,1,0,0,0,648,5049,
        1,0,0,0,650,5097,1,0,0,0,652,5099,1,0,0,0,654,5102,1,0,0,0,656,5105,
        1,0,0,0,658,5116,1,0,0,0,660,5121,1,0,0,0,662,5124,1,0,0,0,664,5139,
        1,0,0,0,666,5185,1,0,0,0,668,5187,1,0,0,0,670,5237,1,0,0,0,672,5255,
        1,0,0,0,674,5257,1,0,0,0,676,5273,1,0,0,0,678,5288,1,0,0,0,680,5313,
        1,0,0,0,682,5315,1,0,0,0,684,5323,1,0,0,0,686,5369,1,0,0,0,688,5371,
        1,0,0,0,690,5385,1,0,0,0,692,5387,1,0,0,0,694,5402,1,0,0,0,696,5407,
        1,0,0,0,698,5409,1,0,0,0,700,5411,1,0,0,0,702,5425,1,0,0,0,704,5438,
        1,0,0,0,706,5442,1,0,0,0,708,5444,1,0,0,0,710,5449,1,0,0,0,712,5459,
        1,0,0,0,714,5512,1,0,0,0,716,5523,1,0,0,0,718,5525,1,0,0,0,720,5528,
        1,0,0,0,722,5541,1,0,0,0,724,5573,1,0,0,0,726,5581,1,0,0,0,728,5583,
        1,0,0,0,730,5594,1,0,0,0,732,5596,1,0,0,0,734,5607,1,0,0,0,736,5609,
        1,0,0,0,738,5614,1,0,0,0,740,5625,1,0,0,0,742,5636,1,0,0,0,744,5644,
        1,0,0,0,746,5653,1,0,0,0,748,5662,1,0,0,0,750,5667,1,0,0,0,752,5670,
        1,0,0,0,754,5675,1,0,0,0,756,5680,1,0,0,0,758,5685,1,0,0,0,760,5698,
        1,0,0,0,762,5702,1,0,0,0,764,5707,1,0,0,0,766,5714,1,0,0,0,768,5731,
        1,0,0,0,770,5748,1,0,0,0,772,5761,1,0,0,0,774,5767,1,0,0,0,776,5774,
        1,0,0,0,778,5781,1,0,0,0,780,5786,1,0,0,0,782,5791,1,0,0,0,784,5794,
        1,0,0,0,786,5807,1,0,0,0,788,5815,1,0,0,0,790,5821,1,0,0,0,792,5829,
        1,0,0,0,794,5834,1,0,0,0,796,5839,1,0,0,0,798,5842,1,0,0,0,800,5852,
        1,0,0,0,802,5860,1,0,0,0,804,5865,1,0,0,0,806,5870,1,0,0,0,808,5874,
        1,0,0,0,810,5880,1,0,0,0,812,5885,1,0,0,0,814,5890,1,0,0,0,816,5895,
        1,0,0,0,818,5902,1,0,0,0,820,5909,1,0,0,0,822,5915,1,0,0,0,824,5921,
        1,0,0,0,826,5926,1,0,0,0,828,5936,1,0,0,0,830,5940,1,0,0,0,832,5942,
        1,0,0,0,834,5944,1,0,0,0,836,5947,1,0,0,0,838,5962,1,0,0,0,840,6000,
        1,0,0,0,842,6004,1,0,0,0,844,6006,1,0,0,0,846,6014,1,0,0,0,848,6018,
        1,0,0,0,850,6026,1,0,0,0,852,6035,1,0,0,0,854,6037,1,0,0,0,856,6056,
        1,0,0,0,858,6058,1,0,0,0,860,6060,1,0,0,0,862,6075,1,0,0,0,864,6087,
        1,0,0,0,866,6089,1,0,0,0,868,6097,1,0,0,0,870,6105,1,0,0,0,872,6114,
        1,0,0,0,874,6116,1,0,0,0,876,6134,1,0,0,0,878,6148,1,0,0,0,880,6153,
        1,0,0,0,882,6159,1,0,0,0,884,6161,1,0,0,0,886,6177,1,0,0,0,888,6185,
        1,0,0,0,890,6195,1,0,0,0,892,6208,1,0,0,0,894,6210,1,0,0,0,896,6216,
        1,0,0,0,898,6244,1,0,0,0,900,6254,1,0,0,0,902,6256,1,0,0,0,904,6260,
        1,0,0,0,906,6263,1,0,0,0,908,6266,1,0,0,0,910,6279,1,0,0,0,912,6295,
        1,0,0,0,914,6318,1,0,0,0,916,6320,1,0,0,0,918,6357,1,0,0,0,920,6359,
        1,0,0,0,922,6513,1,0,0,0,924,6526,1,0,0,0,926,6533,1,0,0,0,928,6620,
        1,0,0,0,930,6622,1,0,0,0,932,6676,1,0,0,0,934,6678,1,0,0,0,936,6684,
        1,0,0,0,938,6686,1,0,0,0,940,6693,1,0,0,0,942,6698,1,0,0,0,944,6711,
        1,0,0,0,946,6717,1,0,0,0,948,6719,1,0,0,0,950,6738,1,0,0,0,952,6741,
        1,0,0,0,954,6750,1,0,0,0,956,6752,1,0,0,0,958,6775,1,0,0,0,960,7060,
        1,0,0,0,962,7062,1,0,0,0,964,7088,1,0,0,0,966,7090,1,0,0,0,968,7096,
        1,0,0,0,970,7098,1,0,0,0,972,7113,1,0,0,0,974,7121,1,0,0,0,976,7123,
        1,0,0,0,978,7152,1,0,0,0,980,7185,1,0,0,0,982,7187,1,0,0,0,984,7195,
        1,0,0,0,986,7202,1,0,0,0,988,7204,1,0,0,0,990,7214,1,0,0,0,992,7229,
        1,0,0,0,994,7231,1,0,0,0,996,7235,1,0,0,0,998,7238,1,0,0,0,1000,
        7241,1,0,0,0,1002,7292,1,0,0,0,1004,7294,1,0,0,0,1006,7305,1,0,0,
        0,1008,7307,1,0,0,0,1010,7309,1,0,0,0,1012,7313,1,0,0,0,1014,7315,
        1,0,0,0,1016,7317,1,0,0,0,1018,7321,1,0,0,0,1020,7325,1,0,0,0,1022,
        7329,1,0,0,0,1024,7337,1,0,0,0,1026,7341,1,0,0,0,1028,7349,1,0,0,
        0,1030,7351,1,0,0,0,1032,7368,1,0,0,0,1034,7370,1,0,0,0,1036,7373,
        1,0,0,0,1038,7378,1,0,0,0,1040,7386,1,0,0,0,1042,7392,1,0,0,0,1044,
        7396,1,0,0,0,1046,7413,1,0,0,0,1048,7416,1,0,0,0,1050,7421,1,0,0,
        0,1052,7423,1,0,0,0,1054,7426,1,0,0,0,1056,7435,1,0,0,0,1058,7443,
        1,0,0,0,1060,7445,1,0,0,0,1062,7450,1,0,0,0,1064,7457,1,0,0,0,1066,
        7467,1,0,0,0,1068,7475,1,0,0,0,1070,7477,1,0,0,0,1072,7487,1,0,0,
        0,1074,7495,1,0,0,0,1076,7497,1,0,0,0,1078,7503,1,0,0,0,1080,7524,
        1,0,0,0,1082,7526,1,0,0,0,1084,7532,1,0,0,0,1086,7535,1,0,0,0,1088,
        7538,1,0,0,0,1090,7566,1,0,0,0,1092,7570,1,0,0,0,1094,7577,1,0,0,
        0,1096,7584,1,0,0,0,1098,7586,1,0,0,0,1100,7602,1,0,0,0,1102,7618,
        1,0,0,0,1104,7622,1,0,0,0,1106,7625,1,0,0,0,1108,7628,1,0,0,0,1110,
        7652,1,0,0,0,1112,7654,1,0,0,0,1114,7662,1,0,0,0,1116,7664,1,0,0,
        0,1118,7667,1,0,0,0,1120,7747,1,0,0,0,1122,7749,1,0,0,0,1124,7753,
        1,0,0,0,1126,7841,1,0,0,0,1128,7843,1,0,0,0,1130,7845,1,0,0,0,1132,
        7847,1,0,0,0,1134,7852,1,0,0,0,1136,7868,1,0,0,0,1138,7870,1,0,0,
        0,1140,7904,1,0,0,0,1142,7906,1,0,0,0,1144,7917,1,0,0,0,1146,7924,
        1,0,0,0,1148,7941,1,0,0,0,1150,7943,1,0,0,0,1152,7947,1,0,0,0,1154,
        7969,1,0,0,0,1156,7971,1,0,0,0,1158,7973,1,0,0,0,1160,7980,1,0,0,
        0,1162,7982,1,0,0,0,1164,7984,1,0,0,0,1166,8133,1,0,0,0,1168,8138,
        1,0,0,0,1170,8145,1,0,0,0,1172,8147,1,0,0,0,1174,8155,1,0,0,0,1176,
        8173,1,0,0,0,1178,8181,1,0,0,0,1180,8189,1,0,0,0,1182,8191,1,0,0,
        0,1184,8195,1,0,0,0,1186,8204,1,0,0,0,1188,8210,1,0,0,0,1190,8217,
        1,0,0,0,1192,8219,1,0,0,0,1194,8234,1,0,0,0,1196,8241,1,0,0,0,1198,
        8244,1,0,0,0,1200,8388,1,0,0,0,1202,8392,1,0,0,0,1204,8395,1,0,0,
        0,1206,8404,1,0,0,0,1208,8413,1,0,0,0,1210,8421,1,0,0,0,1212,8467,
        1,0,0,0,1214,8469,1,0,0,0,1216,8490,1,0,0,0,1218,8494,1,0,0,0,1220,
        8505,1,0,0,0,1222,8550,1,0,0,0,1224,8586,1,0,0,0,1226,8588,1,0,0,
        0,1228,8596,1,0,0,0,1230,8609,1,0,0,0,1232,8611,1,0,0,0,1234,8615,
        1,0,0,0,1236,8618,1,0,0,0,1238,8628,1,0,0,0,1240,8630,1,0,0,0,1242,
        8634,1,0,0,0,1244,8639,1,0,0,0,1246,8643,1,0,0,0,1248,8646,1,0,0,
        0,1250,8649,1,0,0,0,1252,8653,1,0,0,0,1254,8659,1,0,0,0,1256,8667,
        1,0,0,0,1258,8675,1,0,0,0,1260,8681,1,0,0,0,1262,8684,1,0,0,0,1264,
        8702,1,0,0,0,1266,8704,1,0,0,0,1268,8710,1,0,0,0,1270,8714,1,0,0,
        0,1272,8722,1,0,0,0,1274,8730,1,0,0,0,1276,8742,1,0,0,0,1278,8754,
        1,0,0,0,1280,8756,1,0,0,0,1282,8760,1,0,0,0,1284,8765,1,0,0,0,1286,
        8769,1,0,0,0,1288,8775,1,0,0,0,1290,8781,1,0,0,0,1292,8788,1,0,0,
        0,1294,8795,1,0,0,0,1296,8799,1,0,0,0,1298,8818,1,0,0,0,1300,8820,
        1,0,0,0,1302,8823,1,0,0,0,1304,8826,1,0,0,0,1306,8835,1,0,0,0,1308,
        8837,1,0,0,0,1310,8842,1,0,0,0,1312,8844,1,0,0,0,1314,8846,1,0,0,
        0,1316,8848,1,0,0,0,1318,8856,1,0,0,0,1320,8858,1,0,0,0,1322,8860,
        1,0,0,0,1324,8862,1,0,0,0,1326,8873,1,0,0,0,1328,8877,1,0,0,0,1330,
        8879,1,0,0,0,1332,8881,1,0,0,0,1334,8883,1,0,0,0,1336,8892,1,0,0,
        0,1338,8894,1,0,0,0,1340,8896,1,0,0,0,1342,8898,1,0,0,0,1344,8900,
        1,0,0,0,1346,8902,1,0,0,0,1348,8904,1,0,0,0,1350,8906,1,0,0,0,1352,
        8910,1,0,0,0,1354,8914,1,0,0,0,1356,8916,1,0,0,0,1358,8918,1,0,0,
        0,1360,8920,1,0,0,0,1362,8922,1,0,0,0,1364,8924,1,0,0,0,1366,8926,
        1,0,0,0,1368,8928,1,0,0,0,1370,8930,1,0,0,0,1372,8932,1,0,0,0,1374,
        8934,1,0,0,0,1376,8938,1,0,0,0,1378,8940,1,0,0,0,1380,8943,1,0,0,
        0,1382,8955,1,0,0,0,1384,8957,1,0,0,0,1386,8965,1,0,0,0,1388,8973,
        1,0,0,0,1390,8977,1,0,0,0,1392,8979,1,0,0,0,1394,8983,1,0,0,0,1396,
        8985,1,0,0,0,1398,8987,1,0,0,0,1400,8989,1,0,0,0,1402,8991,1,0,0,
        0,1404,8996,1,0,0,0,1406,9000,1,0,0,0,1408,9002,1,0,0,0,1410,9010,
        1,0,0,0,1412,9014,1,0,0,0,1414,9018,1,0,0,0,1416,9025,1,0,0,0,1418,
        9028,1,0,0,0,1420,9030,1,0,0,0,1422,9032,1,0,0,0,1424,9039,1,0,0,
        0,1426,9046,1,0,0,0,1428,9051,1,0,0,0,1430,9062,1,0,0,0,1432,9067,
        1,0,0,0,1434,9069,1,0,0,0,1436,9071,1,0,0,0,1438,9085,1,0,0,0,1440,
        9090,1,0,0,0,1442,9095,1,0,0,0,1444,9102,1,0,0,0,1446,9110,1,0,0,
        0,1448,9112,1,0,0,0,1450,9123,1,0,0,0,1452,9125,1,0,0,0,1454,9127,
        1,0,0,0,1456,9129,1,0,0,0,1458,9137,1,0,0,0,1460,9141,1,0,0,0,1462,
        9143,1,0,0,0,1464,9145,1,0,0,0,1466,9153,1,0,0,0,1468,9157,1,0,0,
        0,1470,9161,1,0,0,0,1472,9165,1,0,0,0,1474,9167,1,0,0,0,1476,9170,
        1,0,0,0,1478,9172,1,0,0,0,1480,9180,1,0,0,0,1482,9182,1,0,0,0,1484,
        9185,1,0,0,0,1486,9203,1,0,0,0,1488,9205,1,0,0,0,1490,9207,1,0,0,
        0,1492,9227,1,0,0,0,1494,9229,1,0,0,0,1496,9236,1,0,0,0,1498,9248,
        1,0,0,0,1500,9254,1,0,0,0,1502,9256,1,0,0,0,1504,9258,1,0,0,0,1506,
        9263,1,0,0,0,1508,1511,3,2,1,0,1509,1511,3,456,228,0,1510,1508,1,
        0,0,0,1510,1509,1,0,0,0,1511,1513,1,0,0,0,1512,1514,5,30,0,0,1513,
        1512,1,0,0,0,1513,1514,1,0,0,0,1514,1516,1,0,0,0,1515,1510,1,0,0,
        0,1515,1516,1,0,0,0,1516,1517,1,0,0,0,1517,1518,5,0,0,1,1518,1,1,
        0,0,0,1519,1596,3,4,2,0,1520,1596,3,80,40,0,1521,1596,3,192,96,0,
        1522,1596,3,224,112,0,1523,1596,3,228,114,0,1524,1596,3,230,115,
        0,1525,1596,3,232,116,0,1526,1596,3,234,117,0,1527,1596,3,240,120,
        0,1528,1596,3,242,121,0,1529,1596,3,246,123,0,1530,1596,3,266,133,
        0,1531,1596,3,294,147,0,1532,1596,3,296,148,0,1533,1596,3,450,225,
        0,1534,1596,3,452,226,0,1535,1596,3,474,237,0,1536,1596,3,606,303,
        0,1537,1596,3,612,306,0,1538,1596,3,618,309,0,1539,1596,3,686,343,
        0,1540,1596,3,700,350,0,1541,1596,3,702,351,0,1542,1596,3,712,356,
        0,1543,1596,3,736,368,0,1544,1596,3,738,369,0,1545,1596,3,740,370,
        0,1546,1596,3,742,371,0,1547,1596,3,744,372,0,1548,1596,3,746,373,
        0,1549,1596,3,748,374,0,1550,1596,3,750,375,0,1551,1596,3,752,376,
        0,1552,1596,3,754,377,0,1553,1596,3,756,378,0,1554,1596,3,758,379,
        0,1555,1596,3,760,380,0,1556,1596,3,762,381,0,1557,1596,3,764,382,
        0,1558,1596,3,766,383,0,1559,1596,3,768,384,0,1560,1596,3,770,385,
        0,1561,1596,3,772,386,0,1562,1596,3,774,387,0,1563,1596,3,776,388,
        0,1564,1596,3,778,389,0,1565,1596,3,780,390,0,1566,1596,3,782,391,
        0,1567,1596,3,784,392,0,1568,1596,3,786,393,0,1569,1596,3,788,394,
        0,1570,1596,3,790,395,0,1571,1596,3,792,396,0,1572,1596,3,794,397,
        0,1573,1596,3,796,398,0,1574,1596,3,798,399,0,1575,1596,3,800,400,
        0,1576,1596,3,802,401,0,1577,1596,3,804,402,0,1578,1596,3,806,403,
        0,1579,1596,3,808,404,0,1580,1596,3,810,405,0,1581,1596,3,812,406,
        0,1582,1596,3,814,407,0,1583,1596,3,816,408,0,1584,1596,3,818,409,
        0,1585,1596,3,820,410,0,1586,1596,3,822,411,0,1587,1596,3,824,412,
        0,1588,1596,3,826,413,0,1589,1596,3,872,436,0,1590,1596,3,840,420,
        0,1591,1596,3,892,446,0,1592,1596,3,1088,544,0,1593,1596,3,1098,
        549,0,1594,1596,3,1100,550,0,1595,1519,1,0,0,0,1595,1520,1,0,0,0,
        1595,1521,1,0,0,0,1595,1522,1,0,0,0,1595,1523,1,0,0,0,1595,1524,
        1,0,0,0,1595,1525,1,0,0,0,1595,1526,1,0,0,0,1595,1527,1,0,0,0,1595,
        1528,1,0,0,0,1595,1529,1,0,0,0,1595,1530,1,0,0,0,1595,1531,1,0,0,
        0,1595,1532,1,0,0,0,1595,1533,1,0,0,0,1595,1534,1,0,0,0,1595,1535,
        1,0,0,0,1595,1536,1,0,0,0,1595,1537,1,0,0,0,1595,1538,1,0,0,0,1595,
        1539,1,0,0,0,1595,1540,1,0,0,0,1595,1541,1,0,0,0,1595,1542,1,0,0,
        0,1595,1543,1,0,0,0,1595,1544,1,0,0,0,1595,1545,1,0,0,0,1595,1546,
        1,0,0,0,1595,1547,1,0,0,0,1595,1548,1,0,0,0,1595,1549,1,0,0,0,1595,
        1550,1,0,0,0,1595,1551,1,0,0,0,1595,1552,1,0,0,0,1595,1553,1,0,0,
        0,1595,1554,1,0,0,0,1595,1555,1,0,0,0,1595,1556,1,0,0,0,1595,1557,
        1,0,0,0,1595,1558,1,0,0,0,1595,1559,1,0,0,0,1595,1560,1,0,0,0,1595,
        1561,1,0,0,0,1595,1562,1,0,0,0,1595,1563,1,0,0,0,1595,1564,1,0,0,
        0,1595,1565,1,0,0,0,1595,1566,1,0,0,0,1595,1567,1,0,0,0,1595,1568,
        1,0,0,0,1595,1569,1,0,0,0,1595,1570,1,0,0,0,1595,1571,1,0,0,0,1595,
        1572,1,0,0,0,1595,1573,1,0,0,0,1595,1574,1,0,0,0,1595,1575,1,0,0,
        0,1595,1576,1,0,0,0,1595,1577,1,0,0,0,1595,1578,1,0,0,0,1595,1579,
        1,0,0,0,1595,1580,1,0,0,0,1595,1581,1,0,0,0,1595,1582,1,0,0,0,1595,
        1583,1,0,0,0,1595,1584,1,0,0,0,1595,1585,1,0,0,0,1595,1586,1,0,0,
        0,1595,1587,1,0,0,0,1595,1588,1,0,0,0,1595,1589,1,0,0,0,1595,1590,
        1,0,0,0,1595,1591,1,0,0,0,1595,1592,1,0,0,0,1595,1593,1,0,0,0,1595,
        1594,1,0,0,0,1596,3,1,0,0,0,1597,1618,5,58,0,0,1598,1619,3,20,10,
        0,1599,1619,3,6,3,0,1600,1601,5,440,0,0,1601,1603,3,1342,671,0,1602,
        1604,3,114,57,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1619,1,
        0,0,0,1605,1606,5,238,0,0,1606,1608,3,1346,673,0,1607,1609,3,114,
        57,0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,1619,1,0,0,0,1610,
        1619,3,70,35,0,1611,1619,3,10,5,0,1612,1619,3,56,28,0,1613,1614,
        4,2,0,0,1614,1619,3,58,29,0,1615,1619,3,12,6,0,1616,1619,3,18,9,
        0,1617,1619,3,78,39,0,1618,1598,1,0,0,0,1618,1599,1,0,0,0,1618,1600,
        1,0,0,0,1618,1605,1,0,0,0,1618,1610,1,0,0,0,1618,1611,1,0,0,0,1618,
        1612,1,0,0,0,1618,1613,1,0,0,0,1618,1615,1,0,0,0,1618,1616,1,0,0,
        0,1618,1617,1,0,0,0,1619,5,1,0,0,0,1620,1621,5,150,0,0,1621,1623,
        3,1338,669,0,1622,1624,3,8,4,0,1623,1622,1,0,0,0,1624,1625,1,0,0,
        0,1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,7,1,0,0,0,1627,1635,3,
        84,42,0,1628,1629,5,453,0,0,1629,1631,5,404,0,0,1630,1632,5,6,0,
        0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1635,
        3,1202,601,0,1634,1627,1,0,0,0,1634,1628,1,0,0,0,1635,9,1,0,0,0,
        1636,1638,3,1232,616,0,1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,
        1639,1,0,0,0,1639,1640,5,205,0,0,1640,1644,3,1366,683,0,1641,1642,
        5,401,0,0,1642,1643,5,506,0,0,1643,1645,3,1110,555,0,1644,1641,1,
        0,0,0,1644,1645,1,0,0,0,1645,1652,1,0,0,0,1646,1647,5,401,0,0,1647,
        1649,5,122,0,0,1648,1650,5,390,0,0,1649,1648,1,0,0,0,1649,1650,1,
        0,0,0,1650,1651,1,0,0,0,1651,1653,5,436,0,0,1652,1646,1,0,0,0,1652,
        1653,1,0,0,0,1653,1657,1,0,0,0,1654,1655,5,470,0,0,1655,1656,5,599,
        0,0,1656,1658,3,1406,703,0,1657,1654,1,0,0,0,1657,1658,1,0,0,0,1658,
        1665,1,0,0,0,1659,1666,5,192,0,0,1660,1663,5,177,0,0,1661,1662,5,
        401,0,0,1662,1664,3,604,302,0,1663,1661,1,0,0,0,1663,1664,1,0,0,
        0,1664,1666,1,0,0,0,1665,1659,1,0,0,0,1665,1660,1,0,0,0,1665,1666,
        1,0,0,0,1666,1669,1,0,0,0,1667,1668,5,118,0,0,1668,1670,3,1444,722,
        0,1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,1673,1,0,0,0,1671,1672,
        5,183,0,0,1672,1674,3,1032,516,0,1673,1671,1,0,0,0,1673,1674,1,0,
        0,0,1674,11,1,0,0,0,1675,1676,5,315,0,0,1676,1677,5,249,0,0,1677,
        1678,3,1362,681,0,1678,1679,5,51,0,0,1679,1680,5,612,0,0,1680,1682,
        3,1444,722,0,1681,1683,3,14,7,0,1682,1681,1,0,0,0,1682,1683,1,0,
        0,0,1683,13,1,0,0,0,1684,1691,3,16,8,0,1685,1687,5,29,0,0,1686,1685,
        1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,0,0,0,1688,1690,3,16,8,0,1689,
        1686,1,0,0,0,1690,1693,1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,
        0,1692,15,1,0,0,0,1693,1691,1,0,0,0,1694,1698,3,148,74,0,1695,1698,
        3,160,80,0,1696,1698,3,162,81,0,1697,1694,1,0,0,0,1697,1695,1,0,
        0,0,1697,1696,1,0,0,0,1698,17,1,0,0,0,1699,1700,5,517,0,0,1700,1701,
        3,1372,686,0,1701,1702,3,132,66,0,1702,19,1,0,0,0,1703,1705,3,1312,
        656,0,1704,1703,1,0,0,0,1704,1705,1,0,0,0,1705,1706,1,0,0,0,1706,
        1707,5,583,0,0,1707,1709,3,1382,691,0,1708,1710,3,22,11,0,1709,1708,
        1,0,0,0,1709,1710,1,0,0,0,1710,21,1,0,0,0,1711,1714,3,24,12,0,1712,
        1715,3,1210,605,0,1713,1715,3,52,26,0,1714,1712,1,0,0,0,1714,1713,
        1,0,0,0,1714,1715,1,0,0,0,1715,1725,1,0,0,0,1716,1725,3,1210,605,
        0,1717,1725,3,52,26,0,1718,1719,3,26,13,0,1719,1720,5,29,0,0,1720,
        1722,1,0,0,0,1721,1718,1,0,0,0,1721,1722,1,0,0,0,1722,1723,1,0,0,
        0,1723,1725,3,28,14,0,1724,1711,1,0,0,0,1724,1716,1,0,0,0,1724,1717,
        1,0,0,0,1724,1721,1,0,0,0,1725,23,1,0,0,0,1726,1734,3,26,13,0,1727,
        1728,3,26,13,0,1728,1729,5,29,0,0,1729,1731,1,0,0,0,1730,1727,1,
        0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,0,0,1732,1734,3,32,16,0,1733,
        1726,1,0,0,0,1733,1730,1,0,0,0,1734,25,1,0,0,0,1735,1740,3,34,17,
        0,1736,1737,5,29,0,0,1737,1739,3,34,17,0,1738,1736,1,0,0,0,1739,
        1742,1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,27,1,0,0,0,
        1742,1740,1,0,0,0,1743,1744,5,178,0,0,1744,1751,5,582,0,0,1745,1746,
        5,266,0,0,1746,1751,5,582,0,0,1747,1751,3,30,15,0,1748,1749,4,14,
        1,0,1749,1751,7,0,0,0,1750,1743,1,0,0,0,1750,1745,1,0,0,0,1750,1747,
        1,0,0,0,1750,1748,1,0,0,0,1751,29,1,0,0,0,1752,1753,5,51,0,0,1753,
        1755,5,423,0,0,1754,1756,3,1314,657,0,1755,1754,1,0,0,0,1755,1756,
        1,0,0,0,1756,1760,1,0,0,0,1757,1761,3,1218,609,0,1758,1759,5,422,
        0,0,1759,1761,3,1420,710,0,1760,1757,1,0,0,0,1760,1758,1,0,0,0,1761,
        1847,1,0,0,0,1762,1763,5,184,0,0,1763,1764,5,423,0,0,1764,1847,3,
        1408,704,0,1765,1766,5,456,0,0,1766,1768,5,423,0,0,1767,1769,3,1314,
        657,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,1770,1,0,0,0,1770,
        1847,3,54,27,0,1771,1772,5,406,0,0,1772,1774,5,423,0,0,1773,1775,
        3,1314,657,0,1774,1773,1,0,0,0,1774,1775,1,0,0,0,1775,1776,1,0,0,
        0,1776,1778,3,54,27,0,1777,1779,3,1314,657,0,1778,1777,1,0,0,0,1778,
        1779,1,0,0,0,1779,1847,1,0,0,0,1780,1781,5,60,0,0,1781,1783,5,423,
        0,0,1782,1784,3,1314,657,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,
        1785,1,0,0,0,1785,1847,3,54,27,0,1786,1787,5,105,0,0,1787,1788,5,
        423,0,0,1788,1792,3,54,27,0,1789,1791,3,696,348,0,1790,1789,1,0,
        0,0,1791,1794,1,0,0,0,1792,1790,1,0,0,0,1792,1793,1,0,0,0,1793,1847,
        1,0,0,0,1794,1792,1,0,0,0,1795,1796,5,472,0,0,1796,1798,5,423,0,
        0,1797,1799,3,1314,657,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,
        1800,1,0,0,0,1800,1804,3,54,27,0,1801,1803,3,698,349,0,1802,1801,
        1,0,0,0,1803,1806,1,0,0,0,1804,1802,1,0,0,0,1804,1805,1,0,0,0,1805,
        1847,1,0,0,0,1806,1804,1,0,0,0,1807,1808,5,110,0,0,1808,1810,5,423,
        0,0,1809,1811,3,1314,657,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,
        1812,1,0,0,0,1812,1847,3,1420,710,0,1813,1814,5,606,0,0,1814,1815,
        5,423,0,0,1815,1847,3,54,27,0,1816,1817,5,471,0,0,1817,1819,5,423,
        0,0,1818,1820,3,1314,657,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,
        1825,1,0,0,0,1821,1822,3,1408,704,0,1822,1823,5,279,0,0,1823,1824,
        3,1218,609,0,1824,1826,1,0,0,0,1825,1821,1,0,0,0,1825,1826,1,0,0,
        0,1826,1847,1,0,0,0,1827,1828,5,207,0,0,1828,1829,5,423,0,0,1829,
        1830,3,1406,703,0,1830,1831,5,653,0,0,1831,1832,5,583,0,0,1832,1834,
        3,1382,691,0,1833,1835,3,50,25,0,1834,1833,1,0,0,0,1834,1835,1,0,
        0,0,1835,1847,1,0,0,0,1836,1837,5,178,0,0,1837,1838,5,423,0,0,1838,
        1839,3,54,27,0,1839,1840,5,582,0,0,1840,1847,1,0,0,0,1841,1842,5,
        266,0,0,1842,1843,5,423,0,0,1843,1844,3,54,27,0,1844,1845,5,582,
        0,0,1845,1847,1,0,0,0,1846,1752,1,0,0,0,1846,1762,1,0,0,0,1846,1765,
        1,0,0,0,1846,1771,1,0,0,0,1846,1780,1,0,0,0,1846,1786,1,0,0,0,1846,
        1795,1,0,0,0,1846,1807,1,0,0,0,1846,1813,1,0,0,0,1846,1816,1,0,0,
        0,1846,1827,1,0,0,0,1846,1836,1,0,0,0,1846,1841,1,0,0,0,1847,31,
        1,0,0,0,1848,1851,3,36,18,0,1849,1851,3,1198,599,0,1850,1848,1,0,
        0,0,1850,1849,1,0,0,0,1851,1860,1,0,0,0,1852,1856,5,29,0,0,1853,
        1857,3,36,18,0,1854,1857,3,34,17,0,1855,1857,3,1198,599,0,1856,1853,
        1,0,0,0,1856,1854,1,0,0,0,1856,1855,1,0,0,0,1857,1859,1,0,0,0,1858,
        1852,1,0,0,0,1859,1862,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,
        0,1861,33,1,0,0,0,1862,1860,1,0,0,0,1863,1867,3,44,22,0,1864,1867,
        3,46,23,0,1865,1867,3,50,25,0,1866,1863,1,0,0,0,1866,1864,1,0,0,
        0,1866,1865,1,0,0,0,1867,35,1,0,0,0,1868,1870,5,51,0,0,1869,1871,
        5,115,0,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1884,1,0,0,0,
        1872,1873,3,1406,703,0,1873,1875,3,1124,562,0,1874,1876,3,1114,557,
        0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1878,1,0,0,0,1877,1879,
        3,38,19,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1885,1,0,0,0,
        1880,1881,5,32,0,0,1881,1882,3,88,44,0,1882,1883,5,33,0,0,1883,1885,
        1,0,0,0,1884,1872,1,0,0,0,1884,1880,1,0,0,0,1885,2004,1,0,0,0,1886,
        1887,5,51,0,0,1887,2004,3,1120,560,0,1888,1890,5,99,0,0,1889,1891,
        5,115,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,
        1892,1893,3,1322,661,0,1893,1894,3,1406,703,0,1894,1896,3,1124,562,
        0,1895,1897,3,38,19,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,2004,
        1,0,0,0,1898,1900,5,371,0,0,1899,1901,5,115,0,0,1900,1899,1,0,0,
        0,1900,1901,1,0,0,0,1901,1902,1,0,0,0,1902,1903,3,1322,661,0,1903,
        1905,3,1124,562,0,1904,1906,3,38,19,0,1905,1904,1,0,0,0,1905,1906,
        1,0,0,0,1906,2004,1,0,0,0,1907,1929,5,184,0,0,1908,1910,5,115,0,
        0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,1911,1913,
        3,1322,661,0,1912,1914,3,40,20,0,1913,1912,1,0,0,0,1913,1914,1,0,
        0,0,1914,1930,1,0,0,0,1915,1916,5,231,0,0,1916,1917,5,295,0,0,1917,
        1930,3,1322,661,0,1918,1919,5,438,0,0,1919,1930,5,295,0,0,1920,1921,
        3,440,220,0,1921,1922,3,1332,666,0,1922,1930,1,0,0,0,1923,1924,4,
        18,2,0,1924,1925,5,105,0,0,1925,1930,3,1406,703,0,1926,1927,4,18,
        3,0,1927,1928,5,129,0,0,1928,1930,3,1406,703,0,1929,1909,1,0,0,0,
        1929,1915,1,0,0,0,1929,1918,1,0,0,0,1929,1920,1,0,0,0,1929,1923,
        1,0,0,0,1929,1926,1,0,0,0,1930,2004,1,0,0,0,1931,1932,5,177,0,0,
        1932,2004,5,293,0,0,1933,1934,5,192,0,0,1934,2004,5,293,0,0,1935,
        1937,5,58,0,0,1936,1938,5,115,0,0,1937,1936,1,0,0,0,1937,1938,1,
        0,0,0,1938,1939,1,0,0,0,1939,1952,3,1322,661,0,1940,1941,5,519,0,
        0,1941,1945,5,166,0,0,1942,1943,4,18,4,0,1943,1946,3,1018,509,0,
        1944,1946,3,1428,714,0,1945,1942,1,0,0,0,1945,1944,1,0,0,0,1946,
        1953,1,0,0,0,1947,1948,5,184,0,0,1948,1953,5,166,0,0,1949,1950,4,
        18,5,0,1950,1951,5,519,0,0,1951,1953,3,1156,578,0,1952,1940,1,0,
        0,0,1952,1947,1,0,0,0,1952,1949,1,0,0,0,1953,2004,1,0,0,0,1954,1955,
        5,58,0,0,1955,1956,5,268,0,0,1956,1957,3,1332,666,0,1957,1958,3,
        1156,578,0,1958,2004,1,0,0,0,1959,1960,4,18,6,0,1960,1961,5,58,0,
        0,1961,1962,5,105,0,0,1962,1963,3,1406,703,0,1963,1964,3,1118,559,
        0,1964,2004,1,0,0,0,1965,1966,4,18,7,0,1966,1967,5,58,0,0,1967,1968,
        5,129,0,0,1968,1969,3,1406,703,0,1969,1970,3,1118,559,0,1970,2004,
        1,0,0,0,1971,1972,5,470,0,0,1972,1973,5,115,0,0,1973,1974,3,1322,
        661,0,1974,1975,5,599,0,0,1975,1976,3,1406,703,0,1976,2004,1,0,0,
        0,1977,1979,5,470,0,0,1978,1980,7,1,0,0,1979,1978,1,0,0,0,1979,1980,
        1,0,0,0,1980,1981,1,0,0,0,1981,2004,3,1376,688,0,1982,1983,5,470,
        0,0,1983,1984,3,440,220,0,1984,1985,3,1332,666,0,1985,1986,5,599,
        0,0,1986,1987,3,1330,665,0,1987,2004,1,0,0,0,1988,1989,5,136,0,0,
        1989,1990,5,599,0,0,1990,1994,3,1006,503,0,1991,1992,4,18,8,0,1992,
        1995,5,166,0,0,1993,1995,3,1188,594,0,1994,1991,1,0,0,0,1994,1993,
        1,0,0,0,1995,1997,1,0,0,0,1996,1998,3,1248,624,0,1997,1996,1,0,0,
        0,1997,1998,1,0,0,0,1998,2004,1,0,0,0,1999,2004,5,230,0,0,2000,2001,
        5,411,0,0,2001,2002,5,89,0,0,2002,2004,3,42,21,0,2003,1868,1,0,0,
        0,2003,1886,1,0,0,0,2003,1888,1,0,0,0,2003,1898,1,0,0,0,2003,1907,
        1,0,0,0,2003,1931,1,0,0,0,2003,1933,1,0,0,0,2003,1935,1,0,0,0,2003,
        1954,1,0,0,0,2003,1959,1,0,0,0,2003,1965,1,0,0,0,2003,1971,1,0,0,
        0,2003,1977,1,0,0,0,2003,1982,1,0,0,0,2003,1988,1,0,0,0,2003,1999,
        1,0,0,0,2003,2000,1,0,0,0,2004,37,1,0,0,0,2005,2006,5,53,0,0,2006,
        2009,3,1406,703,0,2007,2009,5,225,0,0,2008,2005,1,0,0,0,2008,2007,
        1,0,0,0,2009,39,1,0,0,0,2010,2011,7,2,0,0,2011,41,1,0,0,0,2012,2014,
        3,1406,703,0,2013,2015,3,362,181,0,2014,2013,1,0,0,0,2014,2015,1,
        0,0,0,2015,2023,1,0,0,0,2016,2017,5,29,0,0,2017,2019,3,1406,703,
        0,2018,2020,3,362,181,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,
        2022,1,0,0,0,2021,2016,1,0,0,0,2022,2025,1,0,0,0,2023,2021,1,0,0,
        0,2023,2024,1,0,0,0,2024,43,1,0,0,0,2025,2023,1,0,0,0,2026,2028,
        5,56,0,0,2027,2029,5,6,0,0,2028,2027,1,0,0,0,2028,2029,1,0,0,0,2029,
        2032,1,0,0,0,2030,2033,5,166,0,0,2031,2033,3,1406,703,0,2032,2030,
        1,0,0,0,2032,2031,1,0,0,0,2033,45,1,0,0,0,2034,2036,5,314,0,0,2035,
        2037,5,6,0,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,2040,1,0,0,
        0,2038,2041,5,166,0,0,2039,2041,3,1406,703,0,2040,2038,1,0,0,0,2040,
        2039,1,0,0,0,2041,47,1,0,0,0,2042,2044,3,44,22,0,2043,2045,3,46,
        23,0,2044,2043,1,0,0,0,2044,2045,1,0,0,0,2045,2051,1,0,0,0,2046,
        2048,3,46,23,0,2047,2049,3,44,22,0,2048,2047,1,0,0,0,2048,2049,1,
        0,0,0,2049,2051,1,0,0,0,2050,2042,1,0,0,0,2050,2046,1,0,0,0,2051,
        49,1,0,0,0,2052,2053,7,3,0,0,2053,2054,5,634,0,0,2054,51,1,0,0,0,
        2055,2056,5,469,0,0,2056,2057,5,421,0,0,2057,53,1,0,0,0,2058,2061,
        5,57,0,0,2059,2061,3,1408,704,0,2060,2058,1,0,0,0,2060,2059,1,0,
        0,0,2061,55,1,0,0,0,2062,2063,5,582,0,0,2063,2075,3,1358,679,0,2064,
        2065,7,4,0,0,2065,2066,5,152,0,0,2066,2068,3,1444,722,0,2067,2069,
        3,64,32,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,2076,1,0,0,0,
        2070,2071,5,470,0,0,2071,2072,5,599,0,0,2072,2076,3,1406,703,0,2073,
        2074,4,28,9,0,2074,2076,3,64,32,0,2075,2064,1,0,0,0,2075,2070,1,
        0,0,0,2075,2073,1,0,0,0,2076,57,1,0,0,0,2077,2078,5,614,0,0,2078,
        2079,5,582,0,0,2079,2080,3,1358,679,0,2080,2081,5,519,0,0,2081,2083,
        7,5,0,0,2082,2084,3,60,30,0,2083,2082,1,0,0,0,2083,2084,1,0,0,0,
        2084,59,1,0,0,0,2085,2092,3,62,31,0,2086,2088,5,29,0,0,2087,2086,
        1,0,0,0,2087,2088,1,0,0,0,2088,2089,1,0,0,0,2089,2091,3,62,31,0,
        2090,2087,1,0,0,0,2091,2094,1,0,0,0,2092,2090,1,0,0,0,2092,2093,
        1,0,0,0,2093,61,1,0,0,0,2094,2092,1,0,0,0,2095,2096,3,160,80,0,2096,
        63,1,0,0,0,2097,2104,3,66,33,0,2098,2100,5,29,0,0,2099,2098,1,0,
        0,0,2099,2100,1,0,0,0,2100,2101,1,0,0,0,2101,2103,3,66,33,0,2102,
        2099,1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,
        0,2105,65,1,0,0,0,2106,2104,1,0,0,0,2107,2109,5,270,0,0,2108,2110,
        5,6,0,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,2111,1,0,0,0,2111,
        2120,3,1472,736,0,2112,2120,3,152,76,0,2113,2120,3,154,77,0,2114,
        2120,3,160,80,0,2115,2120,3,162,81,0,2116,2120,3,168,84,0,2117,2118,
        4,33,10,0,2118,2120,3,170,85,0,2119,2107,1,0,0,0,2119,2112,1,0,0,
        0,2119,2113,1,0,0,0,2119,2114,1,0,0,0,2119,2115,1,0,0,0,2119,2116,
        1,0,0,0,2119,2117,1,0,0,0,2120,67,1,0,0,0,2121,2123,5,270,0,0,2122,
        2124,5,6,0,0,2123,2122,1,0,0,0,2123,2124,1,0,0,0,2124,2125,1,0,0,
        0,2125,2129,3,1472,736,0,2126,2129,3,152,76,0,2127,2129,3,154,77,
        0,2128,2121,1,0,0,0,2128,2126,1,0,0,0,2128,2127,1,0,0,0,2129,69,
        1,0,0,0,2130,2132,3,176,88,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,
        2132,2134,1,0,0,0,2133,2135,3,1232,616,0,2134,2133,1,0,0,0,2134,
        2135,1,0,0,0,2135,2137,1,0,0,0,2136,2138,3,178,89,0,2137,2136,1,
        0,0,0,2137,2138,1,0,0,0,2138,2139,1,0,0,0,2139,2140,5,644,0,0,2140,
        2141,3,1354,677,0,2141,2142,3,72,36,0,2142,71,1,0,0,0,2143,2145,
        3,1324,662,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,2146,1,0,0,
        0,2146,2147,5,63,0,0,2147,2148,3,74,37,0,2148,73,1,0,0,0,2149,2151,
        3,98,49,0,2150,2152,3,76,38,0,2151,2150,1,0,0,0,2151,2152,1,0,0,
        0,2152,75,1,0,0,0,2153,2155,5,653,0,0,2154,2156,7,6,0,0,2155,2154,
        1,0,0,0,2155,2156,1,0,0,0,2156,2157,1,0,0,0,2157,2158,5,105,0,0,
        2158,2159,5,409,0,0,2159,77,1,0,0,0,2160,2161,5,276,0,0,2161,2162,
        5,498,0,0,2162,2163,3,1466,733,0,2163,2164,5,341,0,0,2164,2165,5,
        295,0,0,2165,2193,1,0,0,0,2166,2190,4,39,11,0,2167,2168,5,468,0,
        0,2168,2182,5,755,0,0,2169,2170,5,392,0,0,2170,2171,5,496,0,0,2171,
        2172,5,401,0,0,2172,2183,5,200,0,0,2173,2174,5,232,0,0,2174,2175,
        5,101,0,0,2175,2180,3,1406,703,0,2176,2177,5,392,0,0,2177,2178,5,
        496,0,0,2178,2179,5,401,0,0,2179,2181,5,200,0,0,2180,2176,1,0,0,
        0,2180,2181,1,0,0,0,2181,2183,1,0,0,0,2182,2169,1,0,0,0,2182,2173,
        1,0,0,0,2183,2191,1,0,0,0,2184,2185,7,7,0,0,2185,2186,3,1406,703,
        0,2186,2187,3,1406,703,0,2187,2191,1,0,0,0,2188,2189,5,468,0,0,2189,
        2191,5,793,0,0,2190,2167,1,0,0,0,2190,2184,1,0,0,0,2190,2188,1,0,
        0,0,2191,2193,1,0,0,0,2192,2160,1,0,0,0,2192,2166,1,0,0,0,2193,79,
        1,0,0,0,2194,2212,5,139,0,0,2195,2213,3,82,41,0,2196,2213,3,86,43,
        0,2197,2213,3,108,54,0,2198,2213,3,102,51,0,2199,2213,3,110,55,0,
        2200,2213,3,124,62,0,2201,2213,3,172,86,0,2202,2213,3,180,90,0,2203,
        2213,3,118,59,0,2204,2213,3,130,65,0,2205,2213,3,136,68,0,2206,2213,
        3,184,92,0,2207,2213,3,186,93,0,2208,2209,4,40,12,0,2209,2213,3,
        188,94,0,2210,2211,4,40,13,0,2211,2213,3,138,69,0,2212,2195,1,0,
        0,0,2212,2196,1,0,0,0,2212,2197,1,0,0,0,2212,2198,1,0,0,0,2212,2199,
        1,0,0,0,2212,2200,1,0,0,0,2212,2201,1,0,0,0,2212,2202,1,0,0,0,2212,
        2203,1,0,0,0,2212,2204,1,0,0,0,2212,2205,1,0,0,0,2212,2206,1,0,0,
        0,2212,2207,1,0,0,0,2212,2208,1,0,0,0,2212,2210,1,0,0,0,2213,81,
        1,0,0,0,2214,2216,5,150,0,0,2215,2217,3,1240,620,0,2216,2215,1,0,
        0,0,2216,2217,1,0,0,0,2217,2218,1,0,0,0,2218,2222,3,1336,668,0,2219,
        2221,3,84,42,0,2220,2219,1,0,0,0,2221,2224,1,0,0,0,2222,2220,1,0,
        0,0,2222,2223,1,0,0,0,2223,83,1,0,0,0,2224,2222,1,0,0,0,2225,2230,
        3,1208,604,0,2226,2230,3,1204,602,0,2227,2228,4,42,14,0,2228,2230,
        3,1206,603,0,2229,2225,1,0,0,0,2229,2226,1,0,0,0,2229,2227,1,0,0,
        0,2230,85,1,0,0,0,2231,2233,5,586,0,0,2232,2231,1,0,0,0,2232,2233,
        1,0,0,0,2233,2234,1,0,0,0,2234,2236,5,583,0,0,2235,2237,3,1240,620,
        0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,2255,
        3,1376,688,0,2239,2240,5,32,0,0,2240,2241,3,88,44,0,2241,2242,5,
        33,0,0,2242,2244,1,0,0,0,2243,2239,1,0,0,0,2243,2244,1,0,0,0,2244,
        2246,1,0,0,0,2245,2247,3,1194,597,0,2246,2245,1,0,0,0,2246,2247,
        1,0,0,0,2247,2256,1,0,0,0,2248,2249,5,305,0,0,2249,2256,3,1382,691,
        0,2250,2251,5,32,0,0,2251,2252,5,305,0,0,2252,2253,3,1382,691,0,
        2253,2254,5,33,0,0,2254,2256,1,0,0,0,2255,2243,1,0,0,0,2255,2248,
        1,0,0,0,2255,2250,1,0,0,0,2256,87,1,0,0,0,2257,2262,3,90,45,0,2258,
        2259,5,29,0,0,2259,2261,3,90,45,0,2260,2258,1,0,0,0,2261,2264,1,
        0,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,0,2263,89,1,0,0,0,2264,2262,
        1,0,0,0,2265,2268,3,1112,556,0,2266,2268,3,1120,560,0,2267,2265,
        1,0,0,0,2267,2266,1,0,0,0,2268,91,1,0,0,0,2269,2271,7,8,0,0,2270,
        2269,1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,2273,3,94,
        47,0,2273,93,1,0,0,0,2274,2276,5,63,0,0,2275,2274,1,0,0,0,2275,2276,
        1,0,0,0,2276,2277,1,0,0,0,2277,2278,3,98,49,0,2278,95,1,0,0,0,2279,
        2281,3,300,150,0,2280,2282,3,376,188,0,2281,2280,1,0,0,0,2281,2282,
        1,0,0,0,2282,2285,1,0,0,0,2283,2285,3,304,152,0,2284,2279,1,0,0,
        0,2284,2283,1,0,0,0,2285,97,1,0,0,0,2286,2288,3,300,150,0,2287,2289,
        3,376,188,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,99,1,0,0,0,
        2290,2294,5,139,0,0,2291,2295,3,102,51,0,2292,2295,3,108,54,0,2293,
        2295,3,110,55,0,2294,2291,1,0,0,0,2294,2292,1,0,0,0,2294,2293,1,
        0,0,0,2295,2297,1,0,0,0,2296,2298,5,30,0,0,2297,2296,1,0,0,0,2297,
        2298,1,0,0,0,2298,2299,1,0,0,0,2299,2300,5,0,0,1,2300,101,1,0,0,
        0,2301,2303,3,1232,616,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,
        2304,1,0,0,0,2304,2306,5,440,0,0,2305,2307,3,1240,620,0,2306,2305,
        1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,0,2308,2309,3,1340,670,
        0,2309,2318,5,32,0,0,2310,2315,3,1244,622,0,2311,2312,5,29,0,0,2312,
        2314,3,1244,622,0,2313,2311,1,0,0,0,2314,2317,1,0,0,0,2315,2313,
        1,0,0,0,2315,2316,1,0,0,0,2316,2319,1,0,0,0,2317,2315,1,0,0,0,2318,
        2310,1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,0,2320,2324,5,33,
        0,0,2321,2323,3,112,56,0,2322,2321,1,0,0,0,2323,2326,1,0,0,0,2324,
        2322,1,0,0,0,2324,2325,1,0,0,0,2325,2327,1,0,0,0,2326,2324,1,0,0,
        0,2327,2328,3,106,53,0,2328,103,1,0,0,0,2329,2332,3,1438,719,0,2330,
        2332,5,825,0,0,2331,2329,1,0,0,0,2331,2330,1,0,0,0,2332,105,1,0,
        0,0,2333,2334,3,1032,516,0,2334,107,1,0,0,0,2335,2337,3,1232,616,
        0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,2338,1,0,0,0,2338,2340,
        5,238,0,0,2339,2341,3,1240,620,0,2340,2339,1,0,0,0,2340,2341,1,0,
        0,0,2341,2342,1,0,0,0,2342,2343,3,1344,672,0,2343,2352,5,32,0,0,
        2344,2349,3,1246,623,0,2345,2346,5,29,0,0,2346,2348,3,1246,623,0,
        2347,2345,1,0,0,0,2348,2351,1,0,0,0,2349,2347,1,0,0,0,2349,2350,
        1,0,0,0,2350,2353,1,0,0,0,2351,2349,1,0,0,0,2352,2344,1,0,0,0,2352,
        2353,1,0,0,0,2353,2354,1,0,0,0,2354,2355,5,33,0,0,2355,2356,5,491,
        0,0,2356,2360,3,1250,625,0,2357,2359,3,112,56,0,2358,2357,1,0,0,
        0,2359,2362,1,0,0,0,2360,2358,1,0,0,0,2360,2361,1,0,0,0,2361,2363,
        1,0,0,0,2362,2360,1,0,0,0,2363,2364,3,106,53,0,2364,109,1,0,0,0,
        2365,2367,5,55,0,0,2366,2365,1,0,0,0,2366,2367,1,0,0,0,2367,2368,
        1,0,0,0,2368,2370,5,238,0,0,2369,2371,3,1240,620,0,2370,2369,1,0,
        0,0,2370,2371,1,0,0,0,2371,2372,1,0,0,0,2372,2373,3,1368,684,0,2373,
        2374,5,491,0,0,2374,2375,7,9,0,0,2375,2376,5,531,0,0,2376,2377,3,
        1444,722,0,2377,111,1,0,0,0,2378,2384,3,116,58,0,2379,2381,5,390,
        0,0,2380,2379,1,0,0,0,2380,2381,1,0,0,0,2381,2382,1,0,0,0,2382,2384,
        5,174,0,0,2383,2378,1,0,0,0,2383,2380,1,0,0,0,2384,113,1,0,0,0,2385,
        2387,3,112,56,0,2386,2385,1,0,0,0,2387,2388,1,0,0,0,2388,2386,1,
        0,0,0,2388,2389,1,0,0,0,2389,115,1,0,0,0,2390,2391,5,118,0,0,2391,
        2412,3,1444,722,0,2392,2396,5,297,0,0,2393,2397,5,547,0,0,2394,2395,
        4,58,15,0,2395,2397,3,1406,703,0,2396,2393,1,0,0,0,2396,2394,1,0,
        0,0,2397,2412,1,0,0,0,2398,2399,5,392,0,0,2399,2412,5,547,0,0,2400,
        2401,5,133,0,0,2401,2412,5,547,0,0,2402,2403,5,451,0,0,2403,2404,
        5,547,0,0,2404,2412,5,153,0,0,2405,2406,5,370,0,0,2406,2407,5,547,
        0,0,2407,2412,5,153,0,0,2408,2409,5,547,0,0,2409,2410,5,510,0,0,
        2410,2412,7,10,0,0,2411,2390,1,0,0,0,2411,2392,1,0,0,0,2411,2398,
        1,0,0,0,2411,2400,1,0,0,0,2411,2402,1,0,0,0,2411,2405,1,0,0,0,2411,
        2408,1,0,0,0,2412,117,1,0,0,0,2413,2415,3,1312,656,0,2414,2413,1,
        0,0,0,2414,2415,1,0,0,0,2415,2451,1,0,0,0,2416,2418,5,618,0,0,2417,
        2416,1,0,0,0,2417,2418,1,0,0,0,2418,2419,1,0,0,0,2419,2420,5,268,
        0,0,2420,2422,3,1330,665,0,2421,2423,3,1158,579,0,2422,2421,1,0,
        0,0,2422,2423,1,0,0,0,2423,2424,1,0,0,0,2424,2428,3,122,61,0,2425,
        2427,3,1152,576,0,2426,2425,1,0,0,0,2427,2430,1,0,0,0,2428,2426,
        1,0,0,0,2428,2429,1,0,0,0,2429,2452,1,0,0,0,2430,2428,1,0,0,0,2431,
        2432,5,237,0,0,2432,2433,5,268,0,0,2433,2434,3,1330,665,0,2434,2438,
        3,122,61,0,2435,2437,3,1160,580,0,2436,2435,1,0,0,0,2437,2440,1,
        0,0,0,2438,2436,1,0,0,0,2438,2439,1,0,0,0,2439,2452,1,0,0,0,2440,
        2438,1,0,0,0,2441,2442,5,534,0,0,2442,2443,5,268,0,0,2443,2444,3,
        1330,665,0,2444,2448,3,122,61,0,2445,2447,3,1162,581,0,2446,2445,
        1,0,0,0,2447,2450,1,0,0,0,2448,2446,1,0,0,0,2448,2449,1,0,0,0,2449,
        2452,1,0,0,0,2450,2448,1,0,0,0,2451,2417,1,0,0,0,2451,2431,1,0,0,
        0,2451,2441,1,0,0,0,2452,2454,1,0,0,0,2453,2455,3,48,24,0,2454,2453,
        1,0,0,0,2454,2455,1,0,0,0,2455,119,1,0,0,0,2456,2467,3,1330,665,
        0,2457,2459,3,1330,665,0,2458,2457,1,0,0,0,2458,2459,1,0,0,0,2459,
        2460,1,0,0,0,2460,2461,5,630,0,0,2461,2467,3,1150,575,0,2462,2463,
        3,1330,665,0,2463,2464,5,608,0,0,2464,2465,3,1150,575,0,2465,2467,
        1,0,0,0,2466,2456,1,0,0,0,2466,2458,1,0,0,0,2466,2462,1,0,0,0,2467,
        121,1,0,0,0,2468,2469,5,401,0,0,2469,2470,3,1382,691,0,2470,2471,
        3,1146,573,0,2471,123,1,0,0,0,2472,2473,5,315,0,0,2473,2474,5,249,
        0,0,2474,2475,3,1360,680,0,2475,2476,5,51,0,0,2476,2477,5,612,0,
        0,2477,2479,3,1444,722,0,2478,2480,3,126,63,0,2479,2478,1,0,0,0,
        2479,2480,1,0,0,0,2480,125,1,0,0,0,2481,2488,3,128,64,0,2482,2484,
        5,29,0,0,2483,2482,1,0,0,0,2483,2484,1,0,0,0,2484,2485,1,0,0,0,2485,
        2487,3,128,64,0,2486,2483,1,0,0,0,2487,2490,1,0,0,0,2488,2486,1,
        0,0,0,2488,2489,1,0,0,0,2489,127,1,0,0,0,2490,2488,1,0,0,0,2491,
        2498,3,148,74,0,2492,2498,3,150,75,0,2493,2498,3,158,79,0,2494,2498,
        3,160,80,0,2495,2498,3,162,81,0,2496,2498,3,164,82,0,2497,2491,1,
        0,0,0,2497,2492,1,0,0,0,2497,2493,1,0,0,0,2497,2494,1,0,0,0,2497,
        2495,1,0,0,0,2497,2496,1,0,0,0,2498,129,1,0,0,0,2499,2500,5,517,
        0,0,2500,2501,3,1370,685,0,2501,2502,5,231,0,0,2502,2503,5,153,0,
        0,2503,2504,5,656,0,0,2504,2505,3,1466,733,0,2505,2506,3,132,66,
        0,2506,131,1,0,0,0,2507,2508,5,408,0,0,2508,2509,5,32,0,0,2509,2514,
        3,134,67,0,2510,2511,5,29,0,0,2511,2513,3,134,67,0,2512,2510,1,0,
        0,0,2513,2516,1,0,0,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,2517,
        1,0,0,0,2516,2514,1,0,0,0,2517,2518,5,33,0,0,2518,133,1,0,0,0,2519,
        2520,5,256,0,0,2520,2534,3,1444,722,0,2521,2522,5,150,0,0,2522,2534,
        3,1444,722,0,2523,2524,5,627,0,0,2524,2534,3,1444,722,0,2525,2526,
        5,424,0,0,2526,2534,3,1444,722,0,2527,2528,5,530,0,0,2528,2534,3,
        1444,722,0,2529,2530,5,416,0,0,2530,2534,3,1444,722,0,2531,2532,
        5,431,0,0,2532,2534,3,1418,709,0,2533,2519,1,0,0,0,2533,2521,1,0,
        0,0,2533,2523,1,0,0,0,2533,2525,1,0,0,0,2533,2527,1,0,0,0,2533,2529,
        1,0,0,0,2533,2531,1,0,0,0,2534,135,1,0,0,0,2535,2536,5,582,0,0,2536,
        2537,3,1356,678,0,2537,2542,3,140,70,0,2538,2539,5,629,0,0,2539,
        2540,5,315,0,0,2540,2541,5,249,0,0,2541,2543,3,1362,681,0,2542,2538,
        1,0,0,0,2542,2543,1,0,0,0,2543,2545,1,0,0,0,2544,2546,3,144,72,0,
        2545,2544,1,0,0,0,2545,2546,1,0,0,0,2546,137,1,0,0,0,2547,2548,5,
        614,0,0,2548,2549,5,582,0,0,2549,2550,3,1356,678,0,2550,2551,5,51,
        0,0,2551,2553,3,142,71,0,2552,2554,3,60,30,0,2553,2552,1,0,0,0,2553,
        2554,1,0,0,0,2554,139,1,0,0,0,2555,2556,5,51,0,0,2556,2563,3,142,
        71,0,2557,2560,4,70,16,0,2558,2559,5,51,0,0,2559,2561,3,142,71,0,
        2560,2558,1,0,0,0,2560,2561,1,0,0,0,2561,2563,1,0,0,0,2562,2555,
        1,0,0,0,2562,2557,1,0,0,0,2563,141,1,0,0,0,2564,2565,5,152,0,0,2565,
        2566,3,1444,722,0,2566,143,1,0,0,0,2567,2574,3,146,73,0,2568,2570,
        5,29,0,0,2569,2568,1,0,0,0,2569,2570,1,0,0,0,2570,2571,1,0,0,0,2571,
        2573,3,146,73,0,2572,2569,1,0,0,0,2573,2576,1,0,0,0,2574,2572,1,
        0,0,0,2574,2575,1,0,0,0,2575,145,1,0,0,0,2576,2574,1,0,0,0,2577,
        2589,3,148,74,0,2578,2589,3,152,76,0,2579,2589,3,154,77,0,2580,2589,
        3,156,78,0,2581,2589,3,158,79,0,2582,2589,3,160,80,0,2583,2589,3,
        162,81,0,2584,2589,3,164,82,0,2585,2589,3,166,83,0,2586,2587,4,73,
        17,0,2587,2589,3,168,84,0,2588,2577,1,0,0,0,2588,2578,1,0,0,0,2588,
        2579,1,0,0,0,2588,2580,1,0,0,0,2588,2581,1,0,0,0,2588,2582,1,0,0,
        0,2588,2583,1,0,0,0,2588,2584,1,0,0,0,2588,2585,1,0,0,0,2588,2586,
        1,0,0,0,2589,147,1,0,0,0,2590,2592,5,270,0,0,2591,2593,5,6,0,0,2592,
        2591,1,0,0,0,2592,2593,1,0,0,0,2593,2594,1,0,0,0,2594,2595,3,1472,
        736,0,2595,149,1,0,0,0,2596,2598,7,11,0,0,2597,2599,5,6,0,0,2598,
        2597,1,0,0,0,2598,2599,1,0,0,0,2599,2600,1,0,0,0,2600,2601,3,1472,
        736,0,2601,151,1,0,0,0,2602,2604,5,68,0,0,2603,2605,5,6,0,0,2604,
        2603,1,0,0,0,2604,2605,1,0,0,0,2605,2606,1,0,0,0,2606,2607,3,1472,
        736,0,2607,153,1,0,0,0,2608,2610,5,349,0,0,2609,2611,5,6,0,0,2610,
        2609,1,0,0,0,2610,2611,1,0,0,0,2611,2612,1,0,0,0,2612,2613,3,1472,
        736,0,2613,155,1,0,0,0,2614,2616,5,216,0,0,2615,2617,5,6,0,0,2616,
        2615,1,0,0,0,2616,2617,1,0,0,0,2617,2618,1,0,0,0,2618,2619,3,1472,
        736,0,2619,157,1,0,0,0,2620,2622,5,388,0,0,2621,2623,5,6,0,0,2622,
        2621,1,0,0,0,2622,2623,1,0,0,0,2623,2624,1,0,0,0,2624,2625,3,1420,
        710,0,2625,159,1,0,0,0,2626,2628,5,563,0,0,2627,2626,1,0,0,0,2627,
        2628,1,0,0,0,2628,2629,1,0,0,0,2629,2631,5,198,0,0,2630,2632,5,6,
        0,0,2631,2630,1,0,0,0,2631,2632,1,0,0,0,2632,2633,1,0,0,0,2633,2634,
        3,1374,687,0,2634,161,1,0,0,0,2635,2636,7,12,0,0,2636,163,1,0,0,
        0,2637,2639,5,118,0,0,2638,2640,5,6,0,0,2639,2638,1,0,0,0,2639,2640,
        1,0,0,0,2640,2641,1,0,0,0,2641,2642,3,1444,722,0,2642,165,1,0,0,
        0,2643,2645,5,223,0,0,2644,2646,5,6,0,0,2645,2644,1,0,0,0,2645,2646,
        1,0,0,0,2646,2647,1,0,0,0,2647,2648,3,1472,736,0,2648,167,1,0,0,
        0,2649,2651,5,194,0,0,2650,2652,5,6,0,0,2651,2650,1,0,0,0,2651,2652,
        1,0,0,0,2652,2653,1,0,0,0,2653,2654,3,1438,719,0,2654,169,1,0,0,
        0,2655,2657,5,198,0,0,2656,2658,5,6,0,0,2657,2656,1,0,0,0,2657,2658,
        1,0,0,0,2658,2659,1,0,0,0,2659,2660,3,1484,742,0,2660,171,1,0,0,
        0,2661,2663,3,174,87,0,2662,2661,1,0,0,0,2662,2663,1,0,0,0,2663,
        2665,1,0,0,0,2664,2666,3,1232,616,0,2665,2664,1,0,0,0,2665,2666,
        1,0,0,0,2666,2668,1,0,0,0,2667,2669,3,178,89,0,2668,2667,1,0,0,0,
        2668,2669,1,0,0,0,2669,2670,1,0,0,0,2670,2671,5,644,0,0,2671,2672,
        3,1352,676,0,2672,2673,3,72,36,0,2673,173,1,0,0,0,2674,2675,5,412,
        0,0,2675,2677,5,475,0,0,2676,2678,3,176,88,0,2677,2676,1,0,0,0,2677,
        2678,1,0,0,0,2678,2681,1,0,0,0,2679,2681,3,176,88,0,2680,2674,1,
        0,0,0,2680,2679,1,0,0,0,2681,175,1,0,0,0,2682,2683,5,56,0,0,2683,
        2684,5,6,0,0,2684,2685,7,13,0,0,2685,177,1,0,0,0,2686,2687,5,547,
        0,0,2687,2688,5,510,0,0,2688,2689,7,10,0,0,2689,179,1,0,0,0,2690,
        2692,3,1232,616,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,2693,
        1,0,0,0,2693,2695,5,603,0,0,2694,2696,3,1240,620,0,2695,2694,1,0,
        0,0,2695,2696,1,0,0,0,2696,2697,1,0,0,0,2697,2698,3,1348,674,0,2698,
        2699,7,14,0,0,2699,2700,7,15,0,0,2700,2701,5,401,0,0,2701,2702,3,
        1382,691,0,2702,2703,5,232,0,0,2703,2704,5,189,0,0,2704,2706,5,503,
        0,0,2705,2707,3,182,91,0,2706,2705,1,0,0,0,2706,2707,1,0,0,0,2707,
        2708,1,0,0,0,2708,2709,3,1032,516,0,2709,181,1,0,0,0,2710,2711,7,
        16,0,0,2711,2712,3,1466,733,0,2712,183,1,0,0,0,2713,2715,3,1232,
        616,0,2714,2713,1,0,0,0,2714,2715,1,0,0,0,2715,2716,1,0,0,0,2716,
        2718,5,205,0,0,2717,2719,3,1240,620,0,2718,2717,1,0,0,0,2718,2719,
        1,0,0,0,2719,2720,1,0,0,0,2720,2721,3,1364,682,0,2721,2722,5,401,
        0,0,2722,2723,5,506,0,0,2723,2730,3,1110,555,0,2724,2725,5,401,0,
        0,2725,2727,5,122,0,0,2726,2728,5,390,0,0,2727,2726,1,0,0,0,2727,
        2728,1,0,0,0,2728,2729,1,0,0,0,2729,2731,5,436,0,0,2730,2724,1,0,
        0,0,2730,2731,1,0,0,0,2731,2738,1,0,0,0,2732,2739,5,192,0,0,2733,
        2736,5,177,0,0,2734,2735,5,401,0,0,2735,2737,3,604,302,0,2736,2734,
        1,0,0,0,2736,2737,1,0,0,0,2737,2739,1,0,0,0,2738,2732,1,0,0,0,2738,
        2733,1,0,0,0,2738,2739,1,0,0,0,2739,2742,1,0,0,0,2740,2741,5,118,
        0,0,2741,2743,3,1444,722,0,2742,2740,1,0,0,0,2742,2743,1,0,0,0,2743,
        2744,1,0,0,0,2744,2745,5,183,0,0,2745,2746,3,1032,516,0,2746,185,
        1,0,0,0,2747,2749,5,667,0,0,2748,2750,3,1240,620,0,2749,2748,1,0,
        0,0,2749,2750,1,0,0,0,2750,2751,1,0,0,0,2751,2752,3,682,341,0,2752,
        187,1,0,0,0,2753,2754,5,412,0,0,2754,2755,5,475,0,0,2755,2756,5,
        534,0,0,2756,2757,5,726,0,0,2757,2758,5,718,0,0,2758,2762,3,1424,
        712,0,2759,2761,3,190,95,0,2760,2759,1,0,0,0,2761,2764,1,0,0,0,2762,
        2760,1,0,0,0,2762,2763,1,0,0,0,2763,2779,1,0,0,0,2764,2762,1,0,0,
        0,2765,2766,5,534,0,0,2766,2767,5,726,0,0,2767,2769,5,718,0,0,2768,
        2770,3,1240,620,0,2769,2768,1,0,0,0,2769,2770,1,0,0,0,2770,2771,
        1,0,0,0,2771,2775,3,1424,712,0,2772,2774,3,190,95,0,2773,2772,1,
        0,0,0,2774,2777,1,0,0,0,2775,2773,1,0,0,0,2775,2776,1,0,0,0,2776,
        2779,1,0,0,0,2777,2775,1,0,0,0,2778,2753,1,0,0,0,2778,2765,1,0,0,
        0,2779,189,1,0,0,0,2780,2781,5,380,0,0,2781,2782,5,589,0,0,2782,
        2796,3,1446,723,0,2783,2784,5,723,0,0,2784,2785,5,589,0,0,2785,2796,
        3,1446,723,0,2786,2787,5,725,0,0,2787,2788,3,1446,723,0,2788,2789,
        5,262,0,0,2789,2790,5,89,0,0,2790,2791,3,1424,712,0,2791,2796,1,
        0,0,0,2792,2793,5,724,0,0,2793,2794,5,589,0,0,2794,2796,3,1446,723,
        0,2795,2780,1,0,0,0,2795,2783,1,0,0,0,2795,2786,1,0,0,0,2795,2792,
        1,0,0,0,2796,191,1,0,0,0,2797,2814,5,184,0,0,2798,2815,3,194,97,
        0,2799,2815,3,196,98,0,2800,2815,3,198,99,0,2801,2815,3,200,100,
        0,2802,2815,3,202,101,0,2803,2815,3,204,102,0,2804,2815,3,208,104,
        0,2805,2815,3,210,105,0,2806,2815,3,212,106,0,2807,2815,3,214,107,
        0,2808,2815,3,216,108,0,2809,2815,3,218,109,0,2810,2811,4,96,18,
        0,2811,2815,3,220,110,0,2812,2813,4,96,19,0,2813,2815,3,222,111,
        0,2814,2798,1,0,0,0,2814,2799,1,0,0,0,2814,2800,1,0,0,0,2814,2801,
        1,0,0,0,2814,2802,1,0,0,0,2814,2803,1,0,0,0,2814,2804,1,0,0,0,2814,
        2805,1,0,0,0,2814,2806,1,0,0,0,2814,2807,1,0,0,0,2814,2808,1,0,0,
        0,2814,2809,1,0,0,0,2814,2810,1,0,0,0,2814,2812,1,0,0,0,2815,193,
        1,0,0,0,2816,2818,5,150,0,0,2817,2819,3,1234,617,0,2818,2817,1,0,
        0,0,2818,2819,1,0,0,0,2819,2820,1,0,0,0,2820,2821,3,1338,669,0,2821,
        195,1,0,0,0,2822,2824,5,205,0,0,2823,2825,3,1234,617,0,2824,2823,
        1,0,0,0,2824,2825,1,0,0,0,2825,2826,1,0,0,0,2826,2827,3,1366,683,
        0,2827,197,1,0,0,0,2828,2830,5,238,0,0,2829,2831,3,1234,617,0,2830,
        2829,1,0,0,0,2830,2831,1,0,0,0,2831,2832,1,0,0,0,2832,2833,3,1346,
        673,0,2833,199,1,0,0,0,2834,2836,5,440,0,0,2835,2837,3,1234,617,
        0,2836,2835,1,0,0,0,2836,2837,1,0,0,0,2837,2838,1,0,0,0,2838,2839,
        3,1342,671,0,2839,201,1,0,0,0,2840,2842,3,1312,656,0,2841,2840,1,
        0,0,0,2841,2842,1,0,0,0,2842,2843,1,0,0,0,2843,2844,5,268,0,0,2844,
        2845,3,1332,666,0,2845,2846,5,401,0,0,2846,2848,3,1382,691,0,2847,
        2849,3,48,24,0,2848,2847,1,0,0,0,2848,2849,1,0,0,0,2849,203,1,0,
        0,0,2850,2851,5,315,0,0,2851,2852,5,249,0,0,2852,2863,3,1362,681,
        0,2853,2860,3,206,103,0,2854,2856,5,29,0,0,2855,2854,1,0,0,0,2855,
        2856,1,0,0,0,2856,2857,1,0,0,0,2857,2859,3,206,103,0,2858,2855,1,
        0,0,0,2859,2862,1,0,0,0,2860,2858,1,0,0,0,2860,2861,1,0,0,0,2861,
        2864,1,0,0,0,2862,2860,1,0,0,0,2863,2853,1,0,0,0,2863,2864,1,0,0,
        0,2864,205,1,0,0,0,2865,2868,3,162,81,0,2866,2868,3,160,80,0,2867,
        2865,1,0,0,0,2867,2866,1,0,0,0,2868,207,1,0,0,0,2869,2871,5,517,
        0,0,2870,2872,3,1234,617,0,2871,2870,1,0,0,0,2871,2872,1,0,0,0,2872,
        2873,1,0,0,0,2873,2874,3,1372,686,0,2874,209,1,0,0,0,2875,2877,5,
        586,0,0,2876,2875,1,0,0,0,2876,2877,1,0,0,0,2877,2878,1,0,0,0,2878,
        2880,7,17,0,0,2879,2881,3,1234,617,0,2880,2879,1,0,0,0,2880,2881,
        1,0,0,0,2881,2882,1,0,0,0,2882,2884,3,1384,692,0,2883,2885,7,2,0,
        0,2884,2883,1,0,0,0,2884,2885,1,0,0,0,2885,211,1,0,0,0,2886,2887,
        5,582,0,0,2887,2898,3,1358,679,0,2888,2895,3,206,103,0,2889,2891,
        5,29,0,0,2890,2889,1,0,0,0,2890,2891,1,0,0,0,2891,2892,1,0,0,0,2892,
        2894,3,206,103,0,2893,2890,1,0,0,0,2894,2897,1,0,0,0,2895,2893,1,
        0,0,0,2895,2896,1,0,0,0,2896,2899,1,0,0,0,2897,2895,1,0,0,0,2898,
        2888,1,0,0,0,2898,2899,1,0,0,0,2899,213,1,0,0,0,2900,2902,5,603,
        0,0,2901,2903,3,1234,617,0,2902,2901,1,0,0,0,2902,2903,1,0,0,0,2903,
        2904,1,0,0,0,2904,2905,3,1350,675,0,2905,215,1,0,0,0,2906,2908,5,
        644,0,0,2907,2909,3,1234,617,0,2908,2907,1,0,0,0,2908,2909,1,0,0,
        0,2909,2910,1,0,0,0,2910,2912,3,1254,627,0,2911,2913,7,2,0,0,2912,
        2911,1,0,0,0,2912,2913,1,0,0,0,2913,217,1,0,0,0,2914,2916,5,667,
        0,0,2915,2917,3,1234,617,0,2916,2915,1,0,0,0,2916,2917,1,0,0,0,2917,
        2918,1,0,0,0,2918,2919,3,682,341,0,2919,219,1,0,0,0,2920,2921,5,
        534,0,0,2921,2922,5,726,0,0,2922,2924,5,718,0,0,2923,2925,3,1234,
        617,0,2924,2923,1,0,0,0,2924,2925,1,0,0,0,2925,2926,1,0,0,0,2926,
        2927,3,1424,712,0,2927,221,1,0,0,0,2928,2929,5,614,0,0,2929,2930,
        5,582,0,0,2930,2932,3,1358,679,0,2931,2933,3,60,30,0,2932,2931,1,
        0,0,0,2932,2933,1,0,0,0,2933,223,1,0,0,0,2934,2935,5,470,0,0,2935,
        2936,7,17,0,0,2936,2941,3,226,113,0,2937,2938,5,29,0,0,2938,2940,
        3,226,113,0,2939,2937,1,0,0,0,2940,2943,1,0,0,0,2941,2939,1,0,0,
        0,2941,2942,1,0,0,0,2942,225,1,0,0,0,2943,2941,1,0,0,0,2944,2945,
        3,1382,691,0,2945,2946,5,599,0,0,2946,2947,3,1376,688,0,2947,227,
        1,0,0,0,2948,2950,5,606,0,0,2949,2951,5,583,0,0,2950,2949,1,0,0,
        0,2950,2951,1,0,0,0,2951,2952,1,0,0,0,2952,2953,3,1382,691,0,2953,
        229,1,0,0,0,2954,2955,5,266,0,0,2955,2956,5,583,0,0,2956,2957,5,
        235,0,0,2957,2958,3,1448,724,0,2958,231,1,0,0,0,2959,2960,5,92,0,
        0,2960,2966,3,1342,671,0,2961,2963,5,32,0,0,2962,2964,3,1004,502,
        0,2963,2962,1,0,0,0,2963,2964,1,0,0,0,2964,2965,1,0,0,0,2965,2967,
        5,33,0,0,2966,2961,1,0,0,0,2966,2967,1,0,0,0,2967,233,1,0,0,0,2968,
        2970,3,352,176,0,2969,2968,1,0,0,0,2969,2970,1,0,0,0,2970,2971,1,
        0,0,0,2971,2975,5,171,0,0,2972,2974,3,238,119,0,2973,2972,1,0,0,
        0,2974,2977,1,0,0,0,2975,2973,1,0,0,0,2975,2976,1,0,0,0,2976,3010,
        1,0,0,0,2977,2975,1,0,0,0,2978,3002,5,235,0,0,2979,2980,3,1386,693,
        0,2980,2981,5,630,0,0,2981,2983,3,366,183,0,2982,2984,3,390,195,
        0,2983,2982,1,0,0,0,2983,2984,1,0,0,0,2984,3003,1,0,0,0,2985,2988,
        3,1382,691,0,2986,2987,4,117,20,0,2987,2989,3,432,216,0,2988,2986,
        1,0,0,0,2988,2989,1,0,0,0,2989,2991,1,0,0,0,2990,2992,3,236,118,
        0,2991,2990,1,0,0,0,2991,2992,1,0,0,0,2992,2994,1,0,0,0,2993,2995,
        3,390,195,0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,2997,1,0,0,
        0,2996,2998,3,360,180,0,2997,2996,1,0,0,0,2997,2998,1,0,0,0,2998,
        3000,1,0,0,0,2999,3001,3,316,158,0,3000,2999,1,0,0,0,3000,3001,1,
        0,0,0,3001,3003,1,0,0,0,3002,2979,1,0,0,0,3002,2985,1,0,0,0,3003,
        3011,1,0,0,0,3004,3005,3,1386,693,0,3005,3006,5,235,0,0,3006,3008,
        3,366,183,0,3007,3009,3,390,195,0,3008,3007,1,0,0,0,3008,3009,1,
        0,0,0,3009,3011,1,0,0,0,3010,2978,1,0,0,0,3010,3004,1,0,0,0,3011,
        235,1,0,0,0,3012,3013,5,423,0,0,3013,3014,5,32,0,0,3014,3015,3,1408,
        704,0,3015,3016,5,33,0,0,3016,237,1,0,0,0,3017,3018,7,18,0,0,3018,
        239,1,0,0,0,3019,3020,5,183,0,0,3020,3021,3,384,192,0,3021,241,1,
        0,0,0,3022,3040,5,251,0,0,3023,3024,3,1382,691,0,3024,3026,5,405,
        0,0,3025,3027,3,432,216,0,3026,3025,1,0,0,0,3026,3027,1,0,0,0,3027,
        3041,1,0,0,0,3028,3038,3,1406,703,0,3029,3039,5,109,0,0,3030,3031,
        5,453,0,0,3031,3033,3,244,122,0,3032,3034,3,390,195,0,3033,3032,
        1,0,0,0,3033,3034,1,0,0,0,3034,3036,1,0,0,0,3035,3037,3,314,157,
        0,3036,3035,1,0,0,0,3036,3037,1,0,0,0,3037,3039,1,0,0,0,3038,3029,
        1,0,0,0,3038,3030,1,0,0,0,3039,3041,1,0,0,0,3040,3023,1,0,0,0,3040,
        3028,1,0,0,0,3041,243,1,0,0,0,3042,3053,7,19,0,0,3043,3050,3,1406,
        703,0,3044,3051,7,20,0,0,3045,3046,7,21,0,0,3046,3047,5,32,0,0,3047,
        3048,3,260,130,0,3048,3049,5,33,0,0,3049,3051,1,0,0,0,3050,3044,
        1,0,0,0,3050,3045,1,0,0,0,3051,3053,1,0,0,0,3052,3042,1,0,0,0,3052,
        3043,1,0,0,0,3053,245,1,0,0,0,3054,3056,5,274,0,0,3055,3057,3,248,
        124,0,3056,3055,1,0,0,0,3056,3057,1,0,0,0,3057,3059,1,0,0,0,3058,
        3060,5,264,0,0,3059,3058,1,0,0,0,3059,3060,1,0,0,0,3060,3062,1,0,
        0,0,3061,3063,5,279,0,0,3062,3061,1,0,0,0,3062,3063,1,0,0,0,3063,
        3064,1,0,0,0,3064,3066,3,1382,691,0,3065,3067,3,1316,658,0,3066,
        3065,1,0,0,0,3066,3067,1,0,0,0,3067,3078,1,0,0,0,3068,3070,3,250,
        125,0,3069,3071,3,262,131,0,3070,3069,1,0,0,0,3070,3071,1,0,0,0,
        3071,3079,1,0,0,0,3072,3073,5,519,0,0,3073,3075,3,1256,628,0,3074,
        3076,3,262,131,0,3075,3074,1,0,0,0,3075,3076,1,0,0,0,3076,3079,1,
        0,0,0,3077,3079,3,256,128,0,3078,3068,1,0,0,0,3078,3072,1,0,0,0,
        3078,3077,1,0,0,0,3079,3081,1,0,0,0,3080,3082,3,264,132,0,3081,3080,
        1,0,0,0,3081,3082,1,0,0,0,3082,247,1,0,0,0,3083,3084,7,22,0,0,3084,
        249,1,0,0,0,3085,3087,5,32,0,0,3086,3088,3,252,126,0,3087,3086,1,
        0,0,0,3087,3088,1,0,0,0,3088,3089,1,0,0,0,3089,3091,5,33,0,0,3090,
        3085,1,0,0,0,3090,3091,1,0,0,0,3091,3092,1,0,0,0,3092,3093,3,254,
        127,0,3093,251,1,0,0,0,3094,3099,3,1328,664,0,3095,3096,5,29,0,0,
        3096,3098,3,1328,664,0,3097,3095,1,0,0,0,3098,3101,1,0,0,0,3099,
        3097,1,0,0,0,3099,3100,1,0,0,0,3100,253,1,0,0,0,3101,3099,1,0,0,
        0,3102,3103,7,23,0,0,3103,3104,3,258,129,0,3104,255,1,0,0,0,3105,
        3116,3,300,150,0,3106,3116,3,304,152,0,3107,3109,5,32,0,0,3108,3110,
        3,252,126,0,3109,3108,1,0,0,0,3109,3110,1,0,0,0,3110,3111,1,0,0,
        0,3111,3113,5,33,0,0,3112,3107,1,0,0,0,3112,3113,1,0,0,0,3113,3114,
        1,0,0,0,3114,3116,3,98,49,0,3115,3105,1,0,0,0,3115,3106,1,0,0,0,
        3115,3112,1,0,0,0,3116,257,1,0,0,0,3117,3119,5,32,0,0,3118,3120,
        3,260,130,0,3119,3118,1,0,0,0,3119,3120,1,0,0,0,3120,3121,1,0,0,
        0,3121,3130,5,33,0,0,3122,3123,5,29,0,0,3123,3125,5,32,0,0,3124,
        3126,3,260,130,0,3125,3124,1,0,0,0,3125,3126,1,0,0,0,3126,3127,1,
        0,0,0,3127,3129,5,33,0,0,3128,3122,1,0,0,0,3129,3132,1,0,0,0,3130,
        3128,1,0,0,0,3130,3131,1,0,0,0,3131,259,1,0,0,0,3132,3130,1,0,0,
        0,3133,3136,3,910,455,0,3134,3136,5,166,0,0,3135,3133,1,0,0,0,3135,
        3134,1,0,0,0,3136,3144,1,0,0,0,3137,3140,5,29,0,0,3138,3141,3,910,
        455,0,3139,3141,5,166,0,0,3140,3138,1,0,0,0,3140,3139,1,0,0,0,3141,
        3143,1,0,0,0,3142,3137,1,0,0,0,3143,3146,1,0,0,0,3144,3142,1,0,0,
        0,3144,3145,1,0,0,0,3145,261,1,0,0,0,3146,3144,1,0,0,0,3147,3148,
        4,131,21,0,3148,3149,5,63,0,0,3149,3151,3,1406,703,0,3150,3152,3,
        1324,662,0,3151,3150,1,0,0,0,3151,3152,1,0,0,0,3152,263,1,0,0,0,
        3153,3154,5,401,0,0,3154,3155,5,187,0,0,3155,3156,5,295,0,0,3156,
        3157,5,623,0,0,3157,3158,3,1256,628,0,3158,265,1,0,0,0,3159,3160,
        5,311,0,0,3160,3162,3,268,134,0,3161,3163,3,270,135,0,3162,3161,
        1,0,0,0,3162,3163,1,0,0,0,3163,3165,1,0,0,0,3164,3166,3,272,136,
        0,3165,3164,1,0,0,0,3165,3166,1,0,0,0,3166,3168,1,0,0,0,3167,3169,
        5,312,0,0,3168,3167,1,0,0,0,3168,3169,1,0,0,0,3169,3171,1,0,0,0,
        3170,3172,3,274,137,0,3171,3170,1,0,0,0,3171,3172,1,0,0,0,3172,3173,
        1,0,0,0,3173,3175,3,1438,719,0,3174,3176,3,276,138,0,3175,3174,1,
        0,0,0,3175,3176,1,0,0,0,3176,3178,1,0,0,0,3177,3179,3,278,139,0,
        3178,3177,1,0,0,0,3178,3179,1,0,0,0,3179,3181,1,0,0,0,3180,3182,
        7,8,0,0,3181,3180,1,0,0,0,3181,3182,1,0,0,0,3182,3183,1,0,0,0,3183,
        3184,5,279,0,0,3184,3185,5,583,0,0,3185,3187,3,1382,691,0,3186,3188,
        3,1316,658,0,3187,3186,1,0,0,0,3187,3188,1,0,0,0,3188,3190,1,0,0,
        0,3189,3191,3,1260,630,0,3190,3189,1,0,0,0,3190,3191,1,0,0,0,3191,
        3193,1,0,0,0,3192,3194,3,280,140,0,3193,3192,1,0,0,0,3193,3194,1,
        0,0,0,3194,3196,1,0,0,0,3195,3197,3,1262,631,0,3196,3195,1,0,0,0,
        3196,3197,1,0,0,0,3197,3199,1,0,0,0,3198,3200,3,1266,633,0,3199,
        3198,1,0,0,0,3199,3200,1,0,0,0,3200,3201,1,0,0,0,3201,3203,3,282,
        141,0,3202,3204,3,290,145,0,3203,3202,1,0,0,0,3203,3204,1,0,0,0,
        3204,3206,1,0,0,0,3205,3207,3,292,146,0,3206,3205,1,0,0,0,3206,3207,
        1,0,0,0,3207,3209,1,0,0,0,3208,3210,3,288,144,0,3209,3208,1,0,0,
        0,3209,3210,1,0,0,0,3210,267,1,0,0,0,3211,3212,7,24,0,0,3212,269,
        1,0,0,0,3213,3214,7,25,0,0,3214,271,1,0,0,0,3215,3216,4,136,22,0,
        3216,3217,5,235,0,0,3217,273,1,0,0,0,3218,3222,5,269,0,0,3219,3220,
        4,137,23,0,3220,3222,7,26,0,0,3221,3218,1,0,0,0,3221,3219,1,0,0,
        0,3222,275,1,0,0,0,3223,3229,4,138,24,0,3224,3225,5,137,0,0,3225,
        3230,5,3,0,0,3226,3227,3,1404,702,0,3227,3228,5,3,0,0,3228,3230,
        1,0,0,0,3229,3224,1,0,0,0,3229,3226,1,0,0,0,3230,277,1,0,0,0,3231,
        3232,4,139,25,0,3232,3233,5,282,0,0,3233,3234,5,438,0,0,3234,3235,
        5,295,0,0,3235,3236,5,411,0,0,3236,279,1,0,0,0,3237,3238,5,500,0,
        0,3238,3239,5,262,0,0,3239,3240,5,89,0,0,3240,3241,3,1440,720,0,
        3241,281,1,0,0,0,3242,3243,5,264,0,0,3243,3244,5,3,0,0,3244,3246,
        7,27,0,0,3245,3242,1,0,0,0,3245,3246,1,0,0,0,3246,3248,1,0,0,0,3247,
        3249,3,284,142,0,3248,3247,1,0,0,0,3248,3249,1,0,0,0,3249,3252,1,
        0,0,0,3250,3251,5,519,0,0,3251,3253,3,1256,628,0,3252,3250,1,0,0,
        0,3252,3253,1,0,0,0,3253,283,1,0,0,0,3254,3256,5,32,0,0,3255,3257,
        3,286,143,0,3256,3255,1,0,0,0,3256,3257,1,0,0,0,3257,3258,1,0,0,
        0,3258,3259,5,33,0,0,3259,285,1,0,0,0,3260,3265,3,1326,663,0,3261,
        3262,5,39,0,0,3262,3265,3,1466,733,0,3263,3265,5,41,0,0,3264,3260,
        1,0,0,0,3264,3261,1,0,0,0,3264,3263,1,0,0,0,3265,3276,1,0,0,0,3266,
        3272,5,29,0,0,3267,3273,3,1326,663,0,3268,3269,5,39,0,0,3269,3273,
        3,1466,733,0,3270,3273,5,40,0,0,3271,3273,5,41,0,0,3272,3267,1,0,
        0,0,3272,3268,1,0,0,0,3272,3270,1,0,0,0,3272,3271,1,0,0,0,3273,3275,
        1,0,0,0,3274,3266,1,0,0,0,3275,3278,1,0,0,0,3276,3274,1,0,0,0,3276,
        3277,1,0,0,0,3277,287,1,0,0,0,3278,3276,1,0,0,0,3279,3280,4,144,
        26,0,3280,3281,5,56,0,0,3281,3282,5,6,0,0,3282,3283,5,804,0,0,3283,
        289,1,0,0,0,3284,3285,4,145,27,0,3285,3286,5,810,0,0,3286,3287,5,
        6,0,0,3287,3288,5,3,0,0,3288,291,1,0,0,0,3289,3290,4,146,28,0,3290,
        3291,5,358,0,0,3291,3292,5,6,0,0,3292,3293,3,1472,736,0,3293,293,
        1,0,0,0,3294,3296,5,475,0,0,3295,3297,7,28,0,0,3296,3295,1,0,0,0,
        3296,3297,1,0,0,0,3297,3299,1,0,0,0,3298,3300,5,279,0,0,3299,3298,
        1,0,0,0,3299,3300,1,0,0,0,3300,3301,1,0,0,0,3301,3303,3,1382,691,
        0,3302,3304,3,1316,658,0,3303,3302,1,0,0,0,3303,3304,1,0,0,0,3304,
        3309,1,0,0,0,3305,3310,3,250,125,0,3306,3307,5,519,0,0,3307,3310,
        3,1256,628,0,3308,3310,3,256,128,0,3309,3305,1,0,0,0,3309,3306,1,
        0,0,0,3309,3308,1,0,0,0,3310,295,1,0,0,0,3311,3313,3,300,150,0,3312,
        3314,3,376,188,0,3313,3312,1,0,0,0,3313,3314,1,0,0,0,3314,3317,1,
        0,0,0,3315,3317,3,298,149,0,3316,3311,1,0,0,0,3316,3315,1,0,0,0,
        3317,297,1,0,0,0,3318,3319,5,32,0,0,3319,3320,3,298,149,0,3320,3321,
        5,33,0,0,3321,3336,1,0,0,0,3322,3323,3,300,150,0,3323,3325,3,322,
        161,0,3324,3326,3,376,188,0,3325,3324,1,0,0,0,3325,3326,1,0,0,0,
        3326,3336,1,0,0,0,3327,3328,3,300,150,0,3328,3329,3,376,188,0,3329,
        3330,3,322,161,0,3330,3336,1,0,0,0,3331,3332,4,149,29,0,3332,3333,
        3,304,152,0,3333,3334,3,322,161,0,3334,3336,1,0,0,0,3335,3318,1,
        0,0,0,3335,3322,1,0,0,0,3335,3327,1,0,0,0,3335,3331,1,0,0,0,3336,
        299,1,0,0,0,3337,3339,3,352,176,0,3338,3337,1,0,0,0,3338,3339,1,
        0,0,0,3339,3340,1,0,0,0,3340,3342,3,302,151,0,3341,3343,3,360,180,
        0,3342,3341,1,0,0,0,3342,3343,1,0,0,0,3343,3345,1,0,0,0,3344,3346,
        3,314,157,0,3345,3344,1,0,0,0,3345,3346,1,0,0,0,3346,301,1,0,0,0,
        3347,3350,3,306,153,0,3348,3350,3,304,152,0,3349,3347,1,0,0,0,3349,
        3348,1,0,0,0,3350,3362,1,0,0,0,3351,3355,5,617,0,0,3352,3353,4,151,
        30,0,3353,3355,7,29,0,0,3354,3351,1,0,0,0,3354,3352,1,0,0,0,3355,
        3357,1,0,0,0,3356,3358,3,430,215,0,3357,3356,1,0,0,0,3357,3358,1,
        0,0,0,3358,3359,1,0,0,0,3359,3361,3,302,151,0,3360,3354,1,0,0,0,
        3361,3364,1,0,0,0,3362,3360,1,0,0,0,3362,3363,1,0,0,0,3363,303,1,
        0,0,0,3364,3362,1,0,0,0,3365,3368,5,32,0,0,3366,3369,3,304,152,0,
        3367,3369,3,98,49,0,3368,3366,1,0,0,0,3368,3367,1,0,0,0,3369,3370,
        1,0,0,0,3370,3371,5,33,0,0,3371,305,1,0,0,0,3372,3378,3,308,154,
        0,3373,3374,4,153,31,0,3374,3378,3,368,184,0,3375,3376,4,153,32,
        0,3376,3378,3,370,185,0,3377,3372,1,0,0,0,3377,3373,1,0,0,0,3377,
        3375,1,0,0,0,3378,307,1,0,0,0,3379,3383,5,511,0,0,3380,3382,3,374,
        187,0,3381,3380,1,0,0,0,3382,3385,1,0,0,0,3383,3381,1,0,0,0,3383,
        3384,1,0,0,0,3384,3386,1,0,0,0,3385,3383,1,0,0,0,3386,3388,3,384,
        192,0,3387,3389,3,322,161,0,3388,3387,1,0,0,0,3388,3389,1,0,0,0,
        3389,3391,1,0,0,0,3390,3392,3,364,182,0,3391,3390,1,0,0,0,3391,3392,
        1,0,0,0,3392,3394,1,0,0,0,3393,3395,3,390,195,0,3394,3393,1,0,0,
        0,3394,3395,1,0,0,0,3395,3397,1,0,0,0,3396,3398,3,356,178,0,3397,
        3396,1,0,0,0,3397,3398,1,0,0,0,3398,3400,1,0,0,0,3399,3401,3,326,
        163,0,3400,3399,1,0,0,0,3400,3401,1,0,0,0,3401,3403,1,0,0,0,3402,
        3404,3,330,165,0,3403,3402,1,0,0,0,3403,3404,1,0,0,0,3404,3406,1,
        0,0,0,3405,3407,3,328,164,0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,
        3407,309,1,0,0,0,3408,3409,3,304,152,0,3409,311,1,0,0,0,3410,3411,
        7,30,0,0,3411,313,1,0,0,0,3412,3413,5,306,0,0,3413,3414,3,318,159,
        0,3414,315,1,0,0,0,3415,3416,5,306,0,0,3416,3417,3,320,160,0,3417,
        317,1,0,0,0,3418,3421,3,320,160,0,3419,3420,7,31,0,0,3420,3422,3,
        320,160,0,3421,3419,1,0,0,0,3421,3422,1,0,0,0,3422,319,1,0,0,0,3423,
        3426,3,1406,703,0,3424,3426,7,32,0,0,3425,3423,1,0,0,0,3425,3424,
        1,0,0,0,3426,321,1,0,0,0,3427,3455,5,279,0,0,3428,3429,5,414,0,0,
        3429,3431,3,1438,719,0,3430,3432,3,1260,630,0,3431,3430,1,0,0,0,
        3431,3432,1,0,0,0,3432,3434,1,0,0,0,3433,3435,3,1262,631,0,3434,
        3433,1,0,0,0,3434,3435,1,0,0,0,3435,3437,1,0,0,0,3436,3438,3,1266,
        633,0,3437,3436,1,0,0,0,3437,3438,1,0,0,0,3438,3456,1,0,0,0,3439,
        3440,5,186,0,0,3440,3456,3,1438,719,0,3441,3444,3,1466,733,0,3442,
        3444,3,986,493,0,3443,3441,1,0,0,0,3443,3442,1,0,0,0,3444,3452,1,
        0,0,0,3445,3448,5,29,0,0,3446,3449,3,1466,733,0,3447,3449,3,986,
        493,0,3448,3446,1,0,0,0,3448,3447,1,0,0,0,3449,3451,1,0,0,0,3450,
        3445,1,0,0,0,3451,3454,1,0,0,0,3452,3450,1,0,0,0,3452,3453,1,0,0,
        0,3453,3456,1,0,0,0,3454,3452,1,0,0,0,3455,3428,1,0,0,0,3455,3439,
        1,0,0,0,3455,3443,1,0,0,0,3456,323,1,0,0,0,3457,3458,5,440,0,0,3458,
        3464,5,32,0,0,3459,3462,5,3,0,0,3460,3461,5,29,0,0,3461,3463,5,3,
        0,0,3462,3460,1,0,0,0,3462,3463,1,0,0,0,3463,3465,1,0,0,0,3464,3459,
        1,0,0,0,3464,3465,1,0,0,0,3465,3466,1,0,0,0,3466,3467,5,33,0,0,3467,
        325,1,0,0,0,3468,3469,5,253,0,0,3469,3470,3,910,455,0,3470,327,1,
        0,0,0,3471,3472,4,164,33,0,3472,3473,5,812,0,0,3473,3474,3,910,455,
        0,3474,329,1,0,0,0,3475,3476,5,707,0,0,3476,3481,3,332,166,0,3477,
        3478,5,29,0,0,3478,3480,3,332,166,0,3479,3477,1,0,0,0,3480,3483,
        1,0,0,0,3481,3479,1,0,0,0,3481,3482,1,0,0,0,3482,331,1,0,0,0,3483,
        3481,1,0,0,0,3484,3485,3,1402,701,0,3485,3486,5,63,0,0,3486,3487,
        3,334,167,0,3487,333,1,0,0,0,3488,3489,5,32,0,0,3489,3490,3,336,
        168,0,3490,3491,5,33,0,0,3491,335,1,0,0,0,3492,3494,3,1402,701,0,
        3493,3492,1,0,0,0,3493,3494,1,0,0,0,3494,3498,1,0,0,0,3495,3496,
        5,423,0,0,3496,3497,5,89,0,0,3497,3499,3,1022,511,0,3498,3495,1,
        0,0,0,3498,3499,1,0,0,0,3499,3501,1,0,0,0,3500,3502,3,360,180,0,
        3501,3500,1,0,0,0,3501,3502,1,0,0,0,3502,3504,1,0,0,0,3503,3505,
        3,338,169,0,3504,3503,1,0,0,0,3504,3505,1,0,0,0,3505,337,1,0,0,0,
        3506,3507,3,340,170,0,3507,3509,3,342,171,0,3508,3510,3,350,175,
        0,3509,3508,1,0,0,0,3509,3510,1,0,0,0,3510,339,1,0,0,0,3511,3512,
        7,33,0,0,3512,341,1,0,0,0,3513,3516,3,344,172,0,3514,3516,3,346,
        173,0,3515,3513,1,0,0,0,3515,3514,1,0,0,0,3516,343,1,0,0,0,3517,
        3518,5,706,0,0,3518,3532,5,701,0,0,3519,3520,3,1422,711,0,3520,3521,
        5,701,0,0,3521,3532,1,0,0,0,3522,3523,5,43,0,0,3523,3532,5,701,0,
        0,3524,3525,5,278,0,0,3525,3526,3,910,455,0,3526,3527,3,1012,506,
        0,3527,3528,5,701,0,0,3528,3532,1,0,0,0,3529,3530,5,143,0,0,3530,
        3532,5,503,0,0,3531,3517,1,0,0,0,3531,3519,1,0,0,0,3531,3522,1,0,
        0,0,3531,3524,1,0,0,0,3531,3529,1,0,0,0,3532,345,1,0,0,0,3533,3534,
        5,75,0,0,3534,3535,3,348,174,0,3535,3536,5,61,0,0,3536,3537,3,348,
        174,0,3537,347,1,0,0,0,3538,3552,3,344,172,0,3539,3540,5,706,0,0,
        3540,3552,5,690,0,0,3541,3542,3,1422,711,0,3542,3543,5,690,0,0,3543,
        3552,1,0,0,0,3544,3545,5,43,0,0,3545,3552,5,690,0,0,3546,3547,5,
        278,0,0,3547,3548,3,910,455,0,3548,3549,3,1012,506,0,3549,3550,5,
        690,0,0,3550,3552,1,0,0,0,3551,3538,1,0,0,0,3551,3539,1,0,0,0,3551,
        3541,1,0,0,0,3551,3544,1,0,0,0,3551,3546,1,0,0,0,3552,349,1,0,0,
        0,3553,3560,5,688,0,0,3554,3555,5,143,0,0,3555,3561,5,503,0,0,3556,
        3561,5,249,0,0,3557,3561,5,705,0,0,3558,3559,5,392,0,0,3559,3561,
        5,698,0,0,3560,3554,1,0,0,0,3560,3556,1,0,0,0,3560,3557,1,0,0,0,
        3560,3558,1,0,0,0,3561,351,1,0,0,0,3562,3564,5,653,0,0,3563,3565,
        5,673,0,0,3564,3563,1,0,0,0,3564,3565,1,0,0,0,3565,3566,1,0,0,0,
        3566,3571,3,354,177,0,3567,3568,5,29,0,0,3568,3570,3,354,177,0,3569,
        3567,1,0,0,0,3570,3573,1,0,0,0,3571,3569,1,0,0,0,3571,3572,1,0,0,
        0,3572,353,1,0,0,0,3573,3571,1,0,0,0,3574,3576,3,1406,703,0,3575,
        3577,3,1324,662,0,3576,3575,1,0,0,0,3576,3577,1,0,0,0,3577,3578,
        1,0,0,0,3578,3579,5,63,0,0,3579,3580,3,310,155,0,3580,355,1,0,0,
        0,3581,3582,5,249,0,0,3582,3583,5,89,0,0,3583,3585,3,1022,511,0,
        3584,3586,3,358,179,0,3585,3584,1,0,0,0,3585,3586,1,0,0,0,3586,3596,
        1,0,0,0,3587,3588,4,178,34,0,3588,3589,5,249,0,0,3589,3590,5,89,
        0,0,3590,3591,7,34,0,0,3591,3592,5,32,0,0,3592,3593,3,1026,513,0,
        3593,3594,5,33,0,0,3594,3596,1,0,0,0,3595,3581,1,0,0,0,3595,3587,
        1,0,0,0,3596,357,1,0,0,0,3597,3598,5,653,0,0,3598,3599,5,497,0,0,
        3599,359,1,0,0,0,3600,3601,5,411,0,0,3601,3602,5,89,0,0,3602,3603,
        3,1022,511,0,3603,361,1,0,0,0,3604,3605,7,35,0,0,3605,363,1,0,0,
        0,3606,3609,5,235,0,0,3607,3610,5,185,0,0,3608,3610,3,366,183,0,
        3609,3607,1,0,0,0,3609,3608,1,0,0,0,3610,365,1,0,0,0,3611,3616,3,
        392,196,0,3612,3613,5,29,0,0,3613,3615,3,392,196,0,3614,3612,1,0,
        0,0,3615,3618,1,0,0,0,3616,3614,1,0,0,0,3616,3617,1,0,0,0,3617,367,
        1,0,0,0,3618,3616,1,0,0,0,3619,3620,5,635,0,0,3620,3625,3,372,186,
        0,3621,3622,5,29,0,0,3622,3624,3,372,186,0,3623,3621,1,0,0,0,3624,
        3627,1,0,0,0,3625,3623,1,0,0,0,3625,3626,1,0,0,0,3626,369,1,0,0,
        0,3627,3625,1,0,0,0,3628,3629,5,583,0,0,3629,3630,3,1382,691,0,3630,
        371,1,0,0,0,3631,3632,5,503,0,0,3632,3634,5,32,0,0,3633,3635,3,260,
        130,0,3634,3633,1,0,0,0,3634,3635,1,0,0,0,3635,3636,1,0,0,0,3636,
        3637,5,33,0,0,3637,373,1,0,0,0,3638,3641,3,312,156,0,3639,3641,5,
        545,0,0,3640,3638,1,0,0,0,3640,3639,1,0,0,0,3641,375,1,0,0,0,3642,
        3644,4,188,35,0,3643,3645,3,378,189,0,3644,3643,1,0,0,0,3645,3646,
        1,0,0,0,3646,3644,1,0,0,0,3646,3647,1,0,0,0,3647,377,1,0,0,0,3648,
        3649,5,232,0,0,3649,3652,3,380,190,0,3650,3651,5,676,0,0,3651,3653,
        3,1386,693,0,3652,3650,1,0,0,0,3652,3653,1,0,0,0,3653,3655,1,0,0,
        0,3654,3656,3,382,191,0,3655,3654,1,0,0,0,3655,3656,1,0,0,0,3656,
        3662,1,0,0,0,3657,3658,5,314,0,0,3658,3659,5,282,0,0,3659,3660,5,
        520,0,0,3660,3662,5,369,0,0,3661,3648,1,0,0,0,3661,3657,1,0,0,0,
        3662,379,1,0,0,0,3663,3664,7,36,0,0,3664,381,1,0,0,0,3665,3666,5,
        677,0,0,3666,3669,5,678,0,0,3667,3669,5,679,0,0,3668,3665,1,0,0,
        0,3668,3667,1,0,0,0,3669,383,1,0,0,0,3670,3673,3,386,193,0,3671,
        3673,5,16,0,0,3672,3670,1,0,0,0,3672,3671,1,0,0,0,3673,3678,1,0,
        0,0,3674,3675,5,29,0,0,3675,3677,3,386,193,0,3676,3674,1,0,0,0,3677,
        3680,1,0,0,0,3678,3676,1,0,0,0,3678,3679,1,0,0,0,3679,385,1,0,0,
        0,3680,3678,1,0,0,0,3681,3687,3,1334,667,0,3682,3684,3,910,455,0,
        3683,3685,3,388,194,0,3684,3683,1,0,0,0,3684,3685,1,0,0,0,3685,3687,
        1,0,0,0,3686,3681,1,0,0,0,3686,3682,1,0,0,0,3687,387,1,0,0,0,3688,
        3690,5,63,0,0,3689,3688,1,0,0,0,3689,3690,1,0,0,0,3690,3693,1,0,
        0,0,3691,3694,3,1406,703,0,3692,3694,3,1438,719,0,3693,3691,1,0,
        0,0,3693,3692,1,0,0,0,3694,389,1,0,0,0,3695,3696,5,651,0,0,3696,
        3697,3,910,455,0,3697,391,1,0,0,0,3698,3709,3,404,202,0,3699,3703,
        5,34,0,0,3700,3701,4,196,36,0,3701,3704,3,1406,703,0,3702,3704,5,
        740,0,0,3703,3700,1,0,0,0,3703,3702,1,0,0,0,3704,3705,1,0,0,0,3705,
        3706,3,394,197,0,3706,3707,5,35,0,0,3707,3709,1,0,0,0,3708,3698,
        1,0,0,0,3708,3699,1,0,0,0,3709,3713,1,0,0,0,3710,3712,3,396,198,
        0,3711,3710,1,0,0,0,3712,3715,1,0,0,0,3713,3711,1,0,0,0,3713,3714,
        1,0,0,0,3714,393,1,0,0,0,3715,3713,1,0,0,0,3716,3720,3,404,202,0,
        3717,3719,3,396,198,0,3718,3717,1,0,0,0,3719,3722,1,0,0,0,3720,3718,
        1,0,0,0,3720,3721,1,0,0,0,3721,395,1,0,0,0,3722,3720,1,0,0,0,3723,
        3724,3,400,200,0,3724,3729,3,392,196,0,3725,3726,5,401,0,0,3726,
        3730,3,910,455,0,3727,3728,5,630,0,0,3728,3730,3,1410,705,0,3729,
        3725,1,0,0,0,3729,3727,1,0,0,0,3729,3730,1,0,0,0,3730,3743,1,0,0,
        0,3731,3732,3,402,201,0,3732,3737,3,392,196,0,3733,3734,5,401,0,
        0,3734,3738,3,910,455,0,3735,3736,5,630,0,0,3736,3738,3,1410,705,
        0,3737,3733,1,0,0,0,3737,3735,1,0,0,0,3738,3743,1,0,0,0,3739,3740,
        3,398,199,0,3740,3741,3,404,202,0,3741,3743,1,0,0,0,3742,3723,1,
        0,0,0,3742,3731,1,0,0,0,3742,3739,1,0,0,0,3743,397,1,0,0,0,3744,
        3746,5,382,0,0,3745,3747,5,271,0,0,3746,3745,1,0,0,0,3746,3747,1,
        0,0,0,3747,3748,1,0,0,0,3748,3756,5,291,0,0,3749,3750,5,382,0,0,
        3750,3752,7,37,0,0,3751,3753,5,413,0,0,3752,3751,1,0,0,0,3752,3753,
        1,0,0,0,3753,3754,1,0,0,0,3754,3756,5,291,0,0,3755,3744,1,0,0,0,
        3755,3749,1,0,0,0,3756,399,1,0,0,0,3757,3759,7,38,0,0,3758,3757,
        1,0,0,0,3758,3759,1,0,0,0,3759,3760,1,0,0,0,3760,3763,5,291,0,0,
        3761,3763,5,565,0,0,3762,3758,1,0,0,0,3762,3761,1,0,0,0,3763,401,
        1,0,0,0,3764,3766,7,37,0,0,3765,3767,5,413,0,0,3766,3765,1,0,0,0,
        3766,3767,1,0,0,0,3767,3768,1,0,0,0,3768,3769,5,291,0,0,3769,403,
        1,0,0,0,3770,3777,3,406,203,0,3771,3777,3,408,204,0,3772,3777,3,
        410,205,0,3773,3777,3,412,206,0,3774,3775,4,202,37,0,3775,3777,3,
        414,207,0,3776,3770,1,0,0,0,3776,3771,1,0,0,0,3776,3772,1,0,0,0,
        3776,3773,1,0,0,0,3776,3774,1,0,0,0,3777,405,1,0,0,0,3778,3780,3,
        1382,691,0,3779,3781,3,1316,658,0,3780,3779,1,0,0,0,3780,3781,1,
        0,0,0,3781,3783,1,0,0,0,3782,3784,3,432,216,0,3783,3782,1,0,0,0,
        3783,3784,1,0,0,0,3784,3786,1,0,0,0,3785,3787,3,434,217,0,3786,3785,
        1,0,0,0,3786,3787,1,0,0,0,3787,3789,1,0,0,0,3788,3790,3,938,469,
        0,3789,3788,1,0,0,0,3789,3790,1,0,0,0,3790,407,1,0,0,0,3791,3794,
        5,32,0,0,3792,3795,3,406,203,0,3793,3795,3,408,204,0,3794,3792,1,
        0,0,0,3794,3793,1,0,0,0,3795,3796,1,0,0,0,3796,3797,5,33,0,0,3797,
        409,1,0,0,0,3798,3800,3,310,155,0,3799,3801,3,432,216,0,3800,3799,
        1,0,0,0,3800,3801,1,0,0,0,3801,3803,1,0,0,0,3802,3804,3,1324,662,
        0,3803,3802,1,0,0,0,3803,3804,1,0,0,0,3804,3815,1,0,0,0,3805,3806,
        4,205,38,0,3806,3807,5,734,0,0,3807,3809,3,310,155,0,3808,3810,3,
        432,216,0,3809,3808,1,0,0,0,3809,3810,1,0,0,0,3810,3812,1,0,0,0,
        3811,3813,3,1324,662,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,3813,
        3815,1,0,0,0,3814,3798,1,0,0,0,3814,3805,1,0,0,0,3815,411,1,0,0,
        0,3816,3819,5,32,0,0,3817,3820,3,366,183,0,3818,3820,3,412,206,0,
        3819,3817,1,0,0,0,3819,3818,1,0,0,0,3820,3821,1,0,0,0,3821,3822,
        5,33,0,0,3822,413,1,0,0,0,3823,3824,5,709,0,0,3824,3825,5,32,0,0,
        3825,3826,3,910,455,0,3826,3827,5,29,0,0,3827,3828,3,1438,719,0,
        3828,3829,3,416,208,0,3829,3831,5,33,0,0,3830,3832,3,432,216,0,3831,
        3830,1,0,0,0,3831,3832,1,0,0,0,3832,415,1,0,0,0,3833,3834,5,114,
        0,0,3834,3835,5,32,0,0,3835,3840,3,418,209,0,3836,3837,5,29,0,0,
        3837,3839,3,418,209,0,3838,3836,1,0,0,0,3839,3842,1,0,0,0,3840,3838,
        1,0,0,0,3840,3841,1,0,0,0,3841,3843,1,0,0,0,3842,3840,1,0,0,0,3843,
        3844,5,33,0,0,3844,417,1,0,0,0,3845,3846,3,1406,703,0,3846,3847,
        5,232,0,0,3847,3848,5,711,0,0,3848,3869,1,0,0,0,3849,3850,3,1406,
        703,0,3850,3853,3,1166,583,0,3851,3852,4,209,39,0,3852,3854,3,1248,
        624,0,3853,3851,1,0,0,0,3853,3854,1,0,0,0,3854,3856,1,0,0,0,3855,
        3857,5,209,0,0,3856,3855,1,0,0,0,3856,3857,1,0,0,0,3857,3858,1,0,
        0,0,3858,3859,5,712,0,0,3859,3861,3,1438,719,0,3860,3862,3,422,211,
        0,3861,3860,1,0,0,0,3861,3862,1,0,0,0,3862,3869,1,0,0,0,3863,3864,
        5,710,0,0,3864,3865,5,712,0,0,3865,3866,3,1438,719,0,3866,3867,3,
        416,208,0,3867,3869,1,0,0,0,3868,3845,1,0,0,0,3868,3849,1,0,0,0,
        3868,3863,1,0,0,0,3869,419,1,0,0,0,3870,3872,3,424,212,0,3871,3873,
        3,426,213,0,3872,3871,1,0,0,0,3872,3873,1,0,0,0,3873,3876,1,0,0,
        0,3874,3876,3,426,213,0,3875,3870,1,0,0,0,3875,3874,1,0,0,0,3876,
        421,1,0,0,0,3877,3882,3,420,210,0,3878,3879,3,426,213,0,3879,3880,
        3,424,212,0,3880,3882,1,0,0,0,3881,3877,1,0,0,0,3881,3878,1,0,0,
        0,3882,423,1,0,0,0,3883,3884,3,428,214,0,3884,3885,5,401,0,0,3885,
        3886,5,708,0,0,3886,425,1,0,0,0,3887,3888,3,428,214,0,3888,3889,
        5,401,0,0,3889,3890,5,200,0,0,3890,427,1,0,0,0,3891,3896,5,200,0,
        0,3892,3896,5,395,0,0,3893,3894,5,166,0,0,3894,3896,3,1438,719,0,
        3895,3891,1,0,0,0,3895,3892,1,0,0,0,3895,3893,1,0,0,0,3896,429,1,
        0,0,0,3897,3898,7,39,0,0,3898,431,1,0,0,0,3899,3903,5,63,0,0,3900,
        3901,4,216,40,0,3901,3903,5,6,0,0,3902,3899,1,0,0,0,3902,3900,1,
        0,0,0,3902,3903,1,0,0,0,3903,3904,1,0,0,0,3904,3905,3,1406,703,0,
        3905,433,1,0,0,0,3906,3911,3,436,218,0,3907,3908,5,29,0,0,3908,3910,
        3,436,218,0,3909,3907,1,0,0,0,3910,3913,1,0,0,0,3911,3909,1,0,0,
        0,3911,3912,1,0,0,0,3912,435,1,0,0,0,3913,3911,1,0,0,0,3914,3915,
        3,438,219,0,3915,3917,3,440,220,0,3916,3918,3,444,222,0,3917,3916,
        1,0,0,0,3917,3918,1,0,0,0,3918,3919,1,0,0,0,3919,3920,5,32,0,0,3920,
        3921,3,446,223,0,3921,3922,5,33,0,0,3922,3935,1,0,0,0,3923,3924,
        5,629,0,0,3924,3926,3,440,220,0,3925,3927,3,444,222,0,3926,3925,
        1,0,0,0,3926,3927,1,0,0,0,3927,3928,1,0,0,0,3928,3930,5,32,0,0,3929,
        3931,3,446,223,0,3930,3929,1,0,0,0,3930,3931,1,0,0,0,3931,3932,1,
        0,0,0,3932,3933,5,33,0,0,3933,3935,1,0,0,0,3934,3914,1,0,0,0,3934,
        3923,1,0,0,0,3935,437,1,0,0,0,3936,3937,7,40,0,0,3937,439,1,0,0,
        0,3938,3939,7,41,0,0,3939,441,1,0,0,0,3940,3941,5,438,0,0,3941,3947,
        5,295,0,0,3942,3944,5,618,0,0,3943,3945,3,440,220,0,3944,3943,1,
        0,0,0,3944,3945,1,0,0,0,3945,3947,1,0,0,0,3946,3940,1,0,0,0,3946,
        3942,1,0,0,0,3947,443,1,0,0,0,3948,3954,5,232,0,0,3949,3955,5,291,
        0,0,3950,3951,5,411,0,0,3951,3955,5,89,0,0,3952,3953,5,249,0,0,3953,
        3955,5,89,0,0,3954,3949,1,0,0,0,3954,3950,1,0,0,0,3954,3952,1,0,
        0,0,3955,445,1,0,0,0,3956,3961,3,448,224,0,3957,3958,5,29,0,0,3958,
        3960,3,448,224,0,3959,3957,1,0,0,0,3960,3963,1,0,0,0,3961,3959,1,
        0,0,0,3961,3962,1,0,0,0,3962,447,1,0,0,0,3963,3961,1,0,0,0,3964,
        3967,3,1406,703,0,3965,3967,5,438,0,0,3966,3964,1,0,0,0,3966,3965,
        1,0,0,0,3967,449,1,0,0,0,3968,3970,3,352,176,0,3969,3968,1,0,0,0,
        3969,3970,1,0,0,0,3970,3971,1,0,0,0,3971,3973,5,623,0,0,3972,3974,
        5,321,0,0,3973,3972,1,0,0,0,3973,3974,1,0,0,0,3974,3976,1,0,0,0,
        3975,3977,5,264,0,0,3976,3975,1,0,0,0,3976,3977,1,0,0,0,3977,3978,
        1,0,0,0,3978,3979,3,366,183,0,3979,3980,5,519,0,0,3980,3982,3,1256,
        628,0,3981,3983,3,390,195,0,3982,3981,1,0,0,0,3982,3983,1,0,0,0,
        3983,3985,1,0,0,0,3984,3986,3,360,180,0,3985,3984,1,0,0,0,3985,3986,
        1,0,0,0,3986,3988,1,0,0,0,3987,3989,3,316,158,0,3988,3987,1,0,0,
        0,3988,3989,1,0,0,0,3989,451,1,0,0,0,3990,3995,3,454,227,0,3991,
        3995,3,460,230,0,3992,3995,3,462,231,0,3993,3995,3,468,234,0,3994,
        3990,1,0,0,0,3994,3991,1,0,0,0,3994,3992,1,0,0,0,3994,3993,1,0,0,
        0,3995,453,1,0,0,0,3996,3997,5,553,0,0,3997,4001,5,601,0,0,3998,
        4000,3,458,229,0,3999,3998,1,0,0,0,4000,4003,1,0,0,0,4001,3999,1,
        0,0,0,4001,4002,1,0,0,0,4002,4022,1,0,0,0,4003,4001,1,0,0,0,4004,
        4006,5,120,0,0,4005,4007,5,655,0,0,4006,4005,1,0,0,0,4006,4007,1,
        0,0,0,4007,4013,1,0,0,0,4008,4010,5,61,0,0,4009,4011,5,392,0,0,4010,
        4009,1,0,0,0,4010,4011,1,0,0,0,4011,4012,1,0,0,0,4012,4014,5,98,
        0,0,4013,4008,1,0,0,0,4013,4014,1,0,0,0,4014,4019,1,0,0,0,4015,4017,
        5,392,0,0,4016,4015,1,0,0,0,4016,4017,1,0,0,0,4017,4018,1,0,0,0,
        4018,4020,5,467,0,0,4019,4016,1,0,0,0,4019,4020,1,0,0,0,4020,4022,
        1,0,0,0,4021,3996,1,0,0,0,4021,4004,1,0,0,0,4022,455,1,0,0,0,4023,
        4025,5,74,0,0,4024,4026,5,655,0,0,4025,4024,1,0,0,0,4025,4026,1,
        0,0,0,4026,457,1,0,0,0,4027,4028,5,653,0,0,4028,4029,5,128,0,0,4029,
        4033,5,529,0,0,4030,4031,5,453,0,0,4031,4033,7,42,0,0,4032,4027,
        1,0,0,0,4032,4030,1,0,0,0,4033,459,1,0,0,0,4034,4035,5,505,0,0,4035,
        4064,3,1406,703,0,4036,4038,5,496,0,0,4037,4039,5,655,0,0,4038,4037,
        1,0,0,0,4038,4039,1,0,0,0,4039,4058,1,0,0,0,4040,4042,5,599,0,0,
        4041,4043,5,505,0,0,4042,4041,1,0,0,0,4042,4043,1,0,0,0,4043,4044,
        1,0,0,0,4044,4059,3,1406,703,0,4045,4047,5,61,0,0,4046,4048,5,392,
        0,0,4047,4046,1,0,0,0,4047,4048,1,0,0,0,4048,4049,1,0,0,0,4049,4051,
        5,98,0,0,4050,4045,1,0,0,0,4050,4051,1,0,0,0,4051,4056,1,0,0,0,4052,
        4054,5,392,0,0,4053,4052,1,0,0,0,4053,4054,1,0,0,0,4054,4055,1,0,
        0,0,4055,4057,5,467,0,0,4056,4053,1,0,0,0,4056,4057,1,0,0,0,4057,
        4059,1,0,0,0,4058,4040,1,0,0,0,4058,4050,1,0,0,0,4059,4064,1,0,0,
        0,4060,4061,5,467,0,0,4061,4062,5,505,0,0,4062,4064,3,1406,703,0,
        4063,4034,1,0,0,0,4063,4036,1,0,0,0,4063,4060,1,0,0,0,4064,461,1,
        0,0,0,4065,4066,5,314,0,0,4066,4067,7,17,0,0,4067,4072,3,464,232,
        0,4068,4069,5,29,0,0,4069,4071,3,464,232,0,4070,4068,1,0,0,0,4071,
        4074,1,0,0,0,4072,4070,1,0,0,0,4072,4073,1,0,0,0,4073,4082,1,0,0,
        0,4074,4072,1,0,0,0,4075,4076,5,314,0,0,4076,4077,5,276,0,0,4077,
        4078,5,232,0,0,4078,4082,5,72,0,0,4079,4080,5,620,0,0,4080,4082,
        7,43,0,0,4081,4065,1,0,0,0,4081,4075,1,0,0,0,4081,4079,1,0,0,0,4082,
        463,1,0,0,0,4083,4085,3,1382,691,0,4084,4086,3,432,216,0,4085,4084,
        1,0,0,0,4085,4086,1,0,0,0,4086,4087,1,0,0,0,4087,4088,3,466,233,
        0,4088,465,1,0,0,0,4089,4091,5,453,0,0,4090,4092,5,312,0,0,4091,
        4090,1,0,0,0,4091,4092,1,0,0,0,4092,4098,1,0,0,0,4093,4095,5,321,
        0,0,4094,4093,1,0,0,0,4094,4095,1,0,0,0,4095,4096,1,0,0,0,4096,4098,
        5,657,0,0,4097,4089,1,0,0,0,4097,4094,1,0,0,0,4098,467,1,0,0,0,4099,
        4128,5,659,0,0,4100,4101,7,44,0,0,4101,4103,3,472,236,0,4102,4104,
        7,45,0,0,4103,4102,1,0,0,0,4103,4104,1,0,0,0,4104,4129,1,0,0,0,4105,
        4106,5,195,0,0,4106,4112,3,472,236,0,4107,4110,5,576,0,0,4108,4109,
        5,232,0,0,4109,4111,5,363,0,0,4110,4108,1,0,0,0,4110,4111,1,0,0,
        0,4111,4113,1,0,0,0,4112,4107,1,0,0,0,4112,4113,1,0,0,0,4113,4129,
        1,0,0,0,4114,4115,5,435,0,0,4115,4129,3,472,236,0,4116,4117,5,120,
        0,0,4117,4120,3,472,236,0,4118,4119,5,402,0,0,4119,4121,5,425,0,
        0,4120,4118,1,0,0,0,4120,4121,1,0,0,0,4121,4129,1,0,0,0,4122,4123,
        5,496,0,0,4123,4129,3,472,236,0,4124,4126,5,457,0,0,4125,4127,3,
        470,235,0,4126,4125,1,0,0,0,4126,4127,1,0,0,0,4127,4129,1,0,0,0,
        4128,4100,1,0,0,0,4128,4105,1,0,0,0,4128,4114,1,0,0,0,4128,4116,
        1,0,0,0,4128,4122,1,0,0,0,4128,4124,1,0,0,0,4129,469,1,0,0,0,4130,
        4131,5,136,0,0,4131,4132,5,660,0,0,4132,471,1,0,0,0,4133,4140,3,
        1440,720,0,4134,4135,5,29,0,0,4135,4138,3,1440,720,0,4136,4137,5,
        29,0,0,4137,4139,3,1418,709,0,4138,4136,1,0,0,0,4138,4139,1,0,0,
        0,4139,4141,1,0,0,0,4140,4134,1,0,0,0,4140,4141,1,0,0,0,4141,473,
        1,0,0,0,4142,4143,5,446,0,0,4143,4165,3,476,238,0,4144,4165,3,488,
        244,0,4145,4146,5,485,0,0,4146,4151,3,478,239,0,4147,4148,5,29,0,
        0,4148,4150,3,478,239,0,4149,4147,1,0,0,0,4150,4153,1,0,0,0,4151,
        4149,1,0,0,0,4151,4152,1,0,0,0,4152,4165,1,0,0,0,4153,4151,1,0,0,
        0,4154,4155,5,485,0,0,4155,4157,5,666,0,0,4156,4158,3,1236,618,0,
        4157,4156,1,0,0,0,4157,4158,1,0,0,0,4158,4165,1,0,0,0,4159,4165,
        3,574,287,0,4160,4165,3,576,288,0,4161,4165,3,560,280,0,4162,4165,
        3,484,242,0,4163,4165,3,592,296,0,4164,4142,1,0,0,0,4164,4144,1,
        0,0,0,4164,4145,1,0,0,0,4164,4154,1,0,0,0,4164,4159,1,0,0,0,4164,
        4160,1,0,0,0,4164,4161,1,0,0,0,4164,4162,1,0,0,0,4164,4163,1,0,0,
        0,4165,475,1,0,0,0,4166,4167,7,46,0,0,4167,4172,5,316,0,0,4168,4169,
        5,599,0,0,4169,4173,3,1444,722,0,4170,4171,5,73,0,0,4171,4173,3,
        910,455,0,4172,4168,1,0,0,0,4172,4170,1,0,0,0,4173,477,1,0,0,0,4174,
        4176,3,480,240,0,4175,4177,3,482,241,0,4176,4175,1,0,0,0,4176,4177,
        1,0,0,0,4177,4186,1,0,0,0,4178,4180,3,604,302,0,4179,4181,5,57,0,
        0,4180,4179,1,0,0,0,4180,4181,1,0,0,0,4181,4183,1,0,0,0,4182,4184,
        3,1030,515,0,4183,4182,1,0,0,0,4183,4184,1,0,0,0,4184,4186,1,0,0,
        0,4185,4174,1,0,0,0,4185,4178,1,0,0,0,4186,479,1,0,0,0,4187,4194,
        5,341,0,0,4188,4189,4,240,41,0,4189,4190,5,77,0,0,4190,4191,5,316,
        0,0,4191,4192,5,61,0,0,4192,4194,5,809,0,0,4193,4187,1,0,0,0,4193,
        4188,1,0,0,0,4194,481,1,0,0,0,4195,4196,5,599,0,0,4196,4197,3,1424,
        712,0,4197,483,1,0,0,0,4198,4202,5,311,0,0,4199,4203,5,153,0,0,4200,
        4201,5,583,0,0,4201,4203,3,1382,691,0,4202,4199,1,0,0,0,4202,4200,
        1,0,0,0,4203,4204,1,0,0,0,4204,4205,5,235,0,0,4205,4206,5,341,0,
        0,4206,485,1,0,0,0,4207,4212,5,341,0,0,4208,4209,4,243,42,0,4209,
        4210,5,476,0,0,4210,4212,5,533,0,0,4211,4207,1,0,0,0,4211,4208,1,
        0,0,0,4212,487,1,0,0,0,4213,4214,5,99,0,0,4214,4215,3,486,243,0,
        4215,4216,5,599,0,0,4216,4218,3,490,245,0,4217,4219,3,1030,515,0,
        4218,4217,1,0,0,0,4218,4219,1,0,0,0,4219,489,1,0,0,0,4220,4225,3,
        492,246,0,4221,4222,5,29,0,0,4222,4224,3,492,246,0,4223,4221,1,0,
        0,0,4224,4227,1,0,0,0,4225,4223,1,0,0,0,4225,4226,1,0,0,0,4226,491,
        1,0,0,0,4227,4225,1,0,0,0,4228,4229,3,496,248,0,4229,4230,5,6,0,
        0,4230,4231,3,1446,723,0,4231,4357,1,0,0,0,4232,4233,5,737,0,0,4233,
        4234,5,6,0,0,4234,4357,3,1446,723,0,4235,4236,3,498,249,0,4236,4237,
        5,6,0,0,4237,4238,3,1446,723,0,4238,4357,1,0,0,0,4239,4240,3,500,
        250,0,4240,4241,5,6,0,0,4241,4242,3,1446,723,0,4242,4357,1,0,0,0,
        4243,4244,3,502,251,0,4244,4245,5,6,0,0,4245,4246,3,1446,723,0,4246,
        4357,1,0,0,0,4247,4248,3,504,252,0,4248,4249,5,6,0,0,4249,4250,3,
        1418,709,0,4250,4357,1,0,0,0,4251,4252,3,506,253,0,4252,4253,5,6,
        0,0,4253,4254,3,1418,709,0,4254,4357,1,0,0,0,4255,4256,3,508,254,
        0,4256,4257,5,6,0,0,4257,4258,3,1418,709,0,4258,4357,1,0,0,0,4259,
        4260,3,510,255,0,4260,4261,5,6,0,0,4261,4262,3,1418,709,0,4262,4357,
        1,0,0,0,4263,4264,3,512,256,0,4264,4265,5,6,0,0,4265,4266,3,1418,
        709,0,4266,4357,1,0,0,0,4267,4268,3,514,257,0,4268,4269,5,6,0,0,
        4269,4270,3,1446,723,0,4270,4357,1,0,0,0,4271,4272,3,516,258,0,4272,
        4273,5,6,0,0,4273,4274,3,1446,723,0,4274,4357,1,0,0,0,4275,4276,
        3,528,264,0,4276,4277,5,6,0,0,4277,4278,3,1446,723,0,4278,4357,1,
        0,0,0,4279,4280,3,532,266,0,4280,4281,5,6,0,0,4281,4282,3,1446,723,
        0,4282,4357,1,0,0,0,4283,4284,3,530,265,0,4284,4285,5,6,0,0,4285,
        4286,3,550,275,0,4286,4357,1,0,0,0,4287,4288,3,518,259,0,4288,4289,
        5,6,0,0,4289,4290,3,1446,723,0,4290,4357,1,0,0,0,4291,4292,3,524,
        262,0,4292,4293,5,6,0,0,4293,4294,3,1446,723,0,4294,4357,1,0,0,0,
        4295,4296,3,526,263,0,4296,4297,5,6,0,0,4297,4298,3,1418,709,0,4298,
        4357,1,0,0,0,4299,4300,3,520,260,0,4300,4301,5,6,0,0,4301,4302,3,
        1444,722,0,4302,4357,1,0,0,0,4303,4304,3,522,261,0,4304,4305,5,6,
        0,0,4305,4306,3,1446,723,0,4306,4357,1,0,0,0,4307,4308,3,534,267,
        0,4308,4309,5,6,0,0,4309,4310,3,1446,723,0,4310,4357,1,0,0,0,4311,
        4312,3,536,268,0,4312,4313,5,6,0,0,4313,4314,3,1418,709,0,4314,4357,
        1,0,0,0,4315,4316,3,538,269,0,4316,4317,5,6,0,0,4317,4318,3,1418,
        709,0,4318,4357,1,0,0,0,4319,4320,5,265,0,0,4320,4321,5,6,0,0,4321,
        4357,3,558,279,0,4322,4323,3,540,270,0,4323,4324,5,6,0,0,4324,4325,
        3,1438,719,0,4325,4357,1,0,0,0,4326,4327,3,542,271,0,4327,4328,5,
        6,0,0,4328,4329,3,1418,709,0,4329,4357,1,0,0,0,4330,4331,3,494,247,
        0,4331,4332,5,6,0,0,4332,4333,3,1418,709,0,4333,4357,1,0,0,0,4334,
        4335,5,745,0,0,4335,4336,5,6,0,0,4336,4357,3,544,272,0,4337,4338,
        5,747,0,0,4338,4339,5,6,0,0,4339,4357,3,1418,709,0,4340,4341,5,750,
        0,0,4341,4342,5,6,0,0,4342,4357,3,546,273,0,4343,4344,4,246,43,0,
        4344,4345,5,759,0,0,4345,4346,5,6,0,0,4346,4357,3,1420,710,0,4347,
        4348,4,246,44,0,4348,4349,5,764,0,0,4349,4350,5,6,0,0,4350,4357,
        3,548,274,0,4351,4352,4,246,45,0,4352,4353,5,802,0,0,4353,4354,5,
        6,0,0,4354,4357,3,1420,710,0,4355,4357,3,552,276,0,4356,4228,1,0,
        0,0,4356,4232,1,0,0,0,4356,4235,1,0,0,0,4356,4239,1,0,0,0,4356,4243,
        1,0,0,0,4356,4247,1,0,0,0,4356,4251,1,0,0,0,4356,4255,1,0,0,0,4356,
        4259,1,0,0,0,4356,4263,1,0,0,0,4356,4267,1,0,0,0,4356,4271,1,0,0,
        0,4356,4275,1,0,0,0,4356,4279,1,0,0,0,4356,4283,1,0,0,0,4356,4287,
        1,0,0,0,4356,4291,1,0,0,0,4356,4295,1,0,0,0,4356,4299,1,0,0,0,4356,
        4303,1,0,0,0,4356,4307,1,0,0,0,4356,4311,1,0,0,0,4356,4315,1,0,0,
        0,4356,4319,1,0,0,0,4356,4322,1,0,0,0,4356,4326,1,0,0,0,4356,4330,
        1,0,0,0,4356,4334,1,0,0,0,4356,4337,1,0,0,0,4356,4340,1,0,0,0,4356,
        4343,1,0,0,0,4356,4347,1,0,0,0,4356,4351,1,0,0,0,4356,4355,1,0,0,
        0,4357,493,1,0,0,0,4358,4359,7,47,0,0,4359,495,1,0,0,0,4360,4361,
        7,48,0,0,4361,497,1,0,0,0,4362,4363,7,49,0,0,4363,499,1,0,0,0,4364,
        4365,7,50,0,0,4365,501,1,0,0,0,4366,4367,7,51,0,0,4367,503,1,0,0,
        0,4368,4369,7,52,0,0,4369,505,1,0,0,0,4370,4371,7,53,0,0,4371,507,
        1,0,0,0,4372,4373,7,54,0,0,4373,509,1,0,0,0,4374,4375,7,55,0,0,4375,
        511,1,0,0,0,4376,4377,7,56,0,0,4377,513,1,0,0,0,4378,4379,7,57,0,
        0,4379,515,1,0,0,0,4380,4381,7,58,0,0,4381,517,1,0,0,0,4382,4383,
        7,59,0,0,4383,519,1,0,0,0,4384,4385,7,60,0,0,4385,521,1,0,0,0,4386,
        4387,7,61,0,0,4387,523,1,0,0,0,4388,4389,7,62,0,0,4389,525,1,0,0,
        0,4390,4391,7,63,0,0,4391,527,1,0,0,0,4392,4393,7,64,0,0,4393,529,
        1,0,0,0,4394,4395,7,65,0,0,4395,531,1,0,0,0,4396,4397,7,66,0,0,4397,
        533,1,0,0,0,4398,4399,7,67,0,0,4399,535,1,0,0,0,4400,4401,7,68,0,
        0,4401,537,1,0,0,0,4402,4403,7,69,0,0,4403,539,1,0,0,0,4404,4405,
        7,70,0,0,4405,541,1,0,0,0,4406,4407,7,71,0,0,4407,543,1,0,0,0,4408,
        4411,3,1304,652,0,4409,4411,5,395,0,0,4410,4408,1,0,0,0,4410,4409,
        1,0,0,0,4411,545,1,0,0,0,4412,4413,7,72,0,0,4413,547,1,0,0,0,4414,
        4418,5,752,0,0,4415,4418,5,312,0,0,4416,4418,3,1438,719,0,4417,4414,
        1,0,0,0,4417,4415,1,0,0,0,4417,4416,1,0,0,0,4418,549,1,0,0,0,4419,
        4422,3,1446,723,0,4420,4422,5,395,0,0,4421,4419,1,0,0,0,4421,4420,
        1,0,0,0,4422,551,1,0,0,0,4423,4424,3,554,277,0,4424,4425,5,6,0,0,
        4425,4426,3,1446,723,0,4426,4438,1,0,0,0,4427,4428,3,556,278,0,4428,
        4429,5,6,0,0,4429,4430,3,1422,711,0,4430,4438,1,0,0,0,4431,4432,
        5,464,0,0,4432,4433,5,6,0,0,4433,4438,3,1446,723,0,4434,4435,5,465,
        0,0,4435,4436,5,6,0,0,4436,4438,3,1418,709,0,4437,4423,1,0,0,0,4437,
        4427,1,0,0,0,4437,4431,1,0,0,0,4437,4434,1,0,0,0,4438,553,1,0,0,
        0,4439,4440,7,73,0,0,4440,555,1,0,0,0,4441,4442,7,74,0,0,4442,557,
        1,0,0,0,4443,4452,5,32,0,0,4444,4449,3,1418,709,0,4445,4446,5,29,
        0,0,4446,4448,3,1418,709,0,4447,4445,1,0,0,0,4448,4451,1,0,0,0,4449,
        4447,1,0,0,0,4449,4450,1,0,0,0,4450,4453,1,0,0,0,4451,4449,1,0,0,
        0,4452,4444,1,0,0,0,4452,4453,1,0,0,0,4453,4454,1,0,0,0,4454,4455,
        5,33,0,0,4455,559,1,0,0,0,4456,4457,5,99,0,0,4457,4458,5,476,0,0,
        4458,4459,5,224,0,0,4459,4464,3,562,281,0,4460,4461,5,29,0,0,4461,
        4463,3,562,281,0,4462,4460,1,0,0,0,4463,4466,1,0,0,0,4464,4462,1,
        0,0,0,4464,4465,1,0,0,0,4465,4468,1,0,0,0,4466,4464,1,0,0,0,4467,
        4469,3,1030,515,0,4468,4467,1,0,0,0,4468,4469,1,0,0,0,4469,561,1,
        0,0,0,4470,4471,5,477,0,0,4471,4472,5,6,0,0,4472,4474,5,32,0,0,4473,
        4475,3,564,282,0,4474,4473,1,0,0,0,4474,4475,1,0,0,0,4475,4476,1,
        0,0,0,4476,4520,5,33,0,0,4477,4478,5,478,0,0,4478,4479,5,6,0,0,4479,
        4481,5,32,0,0,4480,4482,3,564,282,0,4481,4480,1,0,0,0,4481,4482,
        1,0,0,0,4482,4483,1,0,0,0,4483,4520,5,33,0,0,4484,4485,5,479,0,0,
        4485,4486,5,6,0,0,4486,4488,5,32,0,0,4487,4489,3,566,283,0,4488,
        4487,1,0,0,0,4488,4489,1,0,0,0,4489,4490,1,0,0,0,4490,4520,5,33,
        0,0,4491,4492,5,480,0,0,4492,4493,5,6,0,0,4493,4495,5,32,0,0,4494,
        4496,3,566,283,0,4495,4494,1,0,0,0,4495,4496,1,0,0,0,4496,4497,1,
        0,0,0,4497,4520,5,33,0,0,4498,4499,5,481,0,0,4499,4500,5,6,0,0,4500,
        4502,5,32,0,0,4501,4503,3,568,284,0,4502,4501,1,0,0,0,4502,4503,
        1,0,0,0,4503,4504,1,0,0,0,4504,4520,5,33,0,0,4505,4506,5,482,0,0,
        4506,4507,5,6,0,0,4507,4509,5,32,0,0,4508,4510,3,568,284,0,4509,
        4508,1,0,0,0,4509,4510,1,0,0,0,4510,4511,1,0,0,0,4511,4520,5,33,
        0,0,4512,4513,5,483,0,0,4513,4514,5,6,0,0,4514,4516,5,32,0,0,4515,
        4517,3,572,286,0,4516,4515,1,0,0,0,4516,4517,1,0,0,0,4517,4518,1,
        0,0,0,4518,4520,5,33,0,0,4519,4470,1,0,0,0,4519,4477,1,0,0,0,4519,
        4484,1,0,0,0,4519,4491,1,0,0,0,4519,4498,1,0,0,0,4519,4505,1,0,0,
        0,4519,4512,1,0,0,0,4520,563,1,0,0,0,4521,4526,3,1338,669,0,4522,
        4523,5,29,0,0,4523,4525,3,1338,669,0,4524,4522,1,0,0,0,4525,4528,
        1,0,0,0,4526,4524,1,0,0,0,4526,4527,1,0,0,0,4527,565,1,0,0,0,4528,
        4526,1,0,0,0,4529,4534,3,1378,689,0,4530,4531,5,29,0,0,4531,4533,
        3,1378,689,0,4532,4530,1,0,0,0,4533,4536,1,0,0,0,4534,4532,1,0,0,
        0,4534,4535,1,0,0,0,4535,567,1,0,0,0,4536,4534,1,0,0,0,4537,4542,
        3,570,285,0,4538,4539,5,29,0,0,4539,4541,3,570,285,0,4540,4538,1,
        0,0,0,4541,4544,1,0,0,0,4542,4540,1,0,0,0,4542,4543,1,0,0,0,4543,
        569,1,0,0,0,4544,4542,1,0,0,0,4545,4546,3,1446,723,0,4546,571,1,
        0,0,0,4547,4552,3,1252,626,0,4548,4549,5,29,0,0,4549,4551,3,1252,
        626,0,4550,4548,1,0,0,0,4551,4554,1,0,0,0,4552,4550,1,0,0,0,4552,
        4553,1,0,0,0,4553,573,1,0,0,0,4554,4552,1,0,0,0,4555,4556,5,553,
        0,0,4556,4558,3,604,302,0,4557,4559,3,588,294,0,4558,4557,1,0,0,
        0,4558,4559,1,0,0,0,4559,4562,1,0,0,0,4560,4561,5,622,0,0,4561,4563,
        3,578,289,0,4562,4560,1,0,0,0,4562,4563,1,0,0,0,4563,4565,1,0,0,
        0,4564,4566,3,580,290,0,4565,4564,1,0,0,0,4565,4566,1,0,0,0,4566,
        4568,1,0,0,0,4567,4569,3,582,291,0,4568,4567,1,0,0,0,4568,4569,1,
        0,0,0,4569,4571,1,0,0,0,4570,4572,3,584,292,0,4571,4570,1,0,0,0,
        4571,4572,1,0,0,0,4572,4574,1,0,0,0,4573,4575,3,586,293,0,4574,4573,
        1,0,0,0,4574,4575,1,0,0,0,4575,4577,1,0,0,0,4576,4578,3,1030,515,
        0,4577,4576,1,0,0,0,4577,4578,1,0,0,0,4578,575,1,0,0,0,4579,4580,
        5,562,0,0,4580,4582,3,604,302,0,4581,4583,3,588,294,0,4582,4581,
        1,0,0,0,4582,4583,1,0,0,0,4583,4585,1,0,0,0,4584,4586,3,1030,515,
        0,4585,4584,1,0,0,0,4585,4586,1,0,0,0,4586,577,1,0,0,0,4587,4593,
        3,552,276,0,4588,4589,7,75,0,0,4589,4590,5,6,0,0,4590,4593,3,1440,
        720,0,4591,4593,5,540,0,0,4592,4587,1,0,0,0,4592,4588,1,0,0,0,4592,
        4591,1,0,0,0,4593,4598,1,0,0,0,4594,4595,5,29,0,0,4595,4597,3,552,
        276,0,4596,4594,1,0,0,0,4597,4600,1,0,0,0,4598,4596,1,0,0,0,4598,
        4599,1,0,0,0,4599,579,1,0,0,0,4600,4598,1,0,0,0,4601,4602,5,627,
        0,0,4602,4603,5,6,0,0,4603,4604,3,1440,720,0,4604,581,1,0,0,0,4605,
        4606,5,424,0,0,4606,4607,5,6,0,0,4607,4608,3,1440,720,0,4608,583,
        1,0,0,0,4609,4610,5,167,0,0,4610,4611,5,6,0,0,4611,4612,3,1440,720,
        0,4612,585,1,0,0,0,4613,4614,5,427,0,0,4614,4615,5,6,0,0,4615,4616,
        3,1440,720,0,4616,587,1,0,0,0,4617,4622,3,590,295,0,4618,4619,5,
        29,0,0,4619,4621,3,590,295,0,4620,4618,1,0,0,0,4621,4624,1,0,0,0,
        4622,4620,1,0,0,0,4622,4623,1,0,0,0,4623,589,1,0,0,0,4624,4622,1,
        0,0,0,4625,4626,7,76,0,0,4626,591,1,0,0,0,4627,4629,5,553,0,0,4628,
        4630,3,594,297,0,4629,4628,1,0,0,0,4629,4630,1,0,0,0,4630,4633,1,
        0,0,0,4631,4633,5,562,0,0,4632,4627,1,0,0,0,4632,4631,1,0,0,0,4633,
        4634,1,0,0,0,4634,4635,5,242,0,0,4635,593,1,0,0,0,4636,4641,3,596,
        298,0,4637,4638,5,29,0,0,4638,4640,3,596,298,0,4639,4637,1,0,0,0,
        4640,4643,1,0,0,0,4641,4639,1,0,0,0,4641,4642,1,0,0,0,4642,595,1,
        0,0,0,4643,4641,1,0,0,0,4644,4648,3,598,299,0,4645,4648,3,600,300,
        0,4646,4648,3,602,301,0,4647,4644,1,0,0,0,4647,4645,1,0,0,0,4647,
        4646,1,0,0,0,4648,597,1,0,0,0,4649,4650,5,627,0,0,4650,4651,5,6,
        0,0,4651,4652,3,1446,723,0,4652,599,1,0,0,0,4653,4654,5,424,0,0,
        4654,4655,5,6,0,0,4655,4656,3,1446,723,0,4656,601,1,0,0,0,4657,4658,
        5,167,0,0,4658,4659,5,6,0,0,4659,4660,3,1446,723,0,4660,603,1,0,
        0,0,4661,4662,7,77,0,0,4662,605,1,0,0,0,4663,4664,5,435,0,0,4664,
        4665,3,1406,703,0,4665,4668,5,235,0,0,4666,4669,3,1444,722,0,4667,
        4669,3,986,493,0,4668,4666,1,0,0,0,4668,4667,1,0,0,0,4669,4675,1,
        0,0,0,4670,4675,3,608,304,0,4671,4672,7,78,0,0,4672,4673,5,435,0,
        0,4673,4675,3,1406,703,0,4674,4663,1,0,0,0,4674,4670,1,0,0,0,4674,
        4671,1,0,0,0,4675,607,1,0,0,0,4676,4677,5,208,0,0,4677,4680,3,1406,
        703,0,4678,4679,5,630,0,0,4679,4681,3,610,305,0,4680,4678,1,0,0,
        0,4680,4681,1,0,0,0,4681,609,1,0,0,0,4682,4687,3,986,493,0,4683,
        4684,5,29,0,0,4684,4686,3,986,493,0,4685,4683,1,0,0,0,4686,4689,
        1,0,0,0,4687,4685,1,0,0,0,4687,4688,1,0,0,0,4688,611,1,0,0,0,4689,
        4687,1,0,0,0,4690,4715,5,685,0,0,4691,4692,5,312,0,0,4692,4693,5,
        153,0,0,4693,4695,5,176,0,0,4694,4696,3,1476,738,0,4695,4694,1,0,
        0,0,4695,4696,1,0,0,0,4696,4697,1,0,0,0,4697,4716,3,1438,719,0,4698,
        4701,5,684,0,0,4699,4700,5,232,0,0,4700,4702,5,476,0,0,4701,4699,
        1,0,0,0,4701,4702,1,0,0,0,4702,4716,1,0,0,0,4703,4704,4,306,46,0,
        4704,4705,5,276,0,0,4705,4706,5,235,0,0,4706,4707,3,1306,653,0,4707,
        4708,5,31,0,0,4708,4709,3,1418,709,0,4709,4710,5,262,0,0,4710,4711,
        5,89,0,0,4711,4713,3,1438,719,0,4712,4714,3,614,307,0,4713,4712,
        1,0,0,0,4713,4714,1,0,0,0,4714,4716,1,0,0,0,4715,4691,1,0,0,0,4715,
        4698,1,0,0,0,4715,4703,1,0,0,0,4716,613,1,0,0,0,4717,4728,3,616,
        308,0,4718,4719,5,153,0,0,4719,4721,5,176,0,0,4720,4722,3,1476,738,
        0,4721,4720,1,0,0,0,4721,4722,1,0,0,0,4722,4723,1,0,0,0,4723,4725,
        3,1438,719,0,4724,4726,3,616,308,0,4725,4724,1,0,0,0,4725,4726,1,
        0,0,0,4726,4728,1,0,0,0,4727,4717,1,0,0,0,4727,4718,1,0,0,0,4728,
        615,1,0,0,0,4729,4731,5,484,0,0,4730,4732,5,392,0,0,4731,4730,1,
        0,0,0,4731,4732,1,0,0,0,4732,4733,1,0,0,0,4733,4734,5,549,0,0,4734,
        617,1,0,0,0,4735,4743,3,620,310,0,4736,4743,3,630,315,0,4737,4743,
        3,646,323,0,4738,4743,3,648,324,0,4739,4743,3,662,331,0,4740,4743,
        3,664,332,0,4741,4743,3,680,340,0,4742,4735,1,0,0,0,4742,4736,1,
        0,0,0,4742,4737,1,0,0,0,4742,4738,1,0,0,0,4742,4739,1,0,0,0,4742,
        4740,1,0,0,0,4742,4741,1,0,0,0,4743,619,1,0,0,0,4744,4745,5,58,0,
        0,4745,4747,5,627,0,0,4746,4748,3,1234,617,0,4747,4746,1,0,0,0,4747,
        4748,1,0,0,0,4748,4789,1,0,0,0,4749,4750,4,310,47,0,4750,4754,3,
        1272,636,0,4751,4752,4,310,48,0,4752,4754,3,622,311,0,4753,4749,
        1,0,0,0,4753,4751,1,0,0,0,4754,4755,1,0,0,0,4755,4756,3,632,316,
        0,4756,4790,1,0,0,0,4757,4774,3,628,314,0,4758,4761,3,1282,641,0,
        4759,4761,3,1280,640,0,4760,4758,1,0,0,0,4760,4759,1,0,0,0,4761,
        4763,1,0,0,0,4762,4764,3,1302,651,0,4763,4762,1,0,0,0,4763,4764,
        1,0,0,0,4764,4766,1,0,0,0,4765,4767,3,1294,647,0,4766,4765,1,0,0,
        0,4766,4767,1,0,0,0,4767,4775,1,0,0,0,4768,4769,5,178,0,0,4769,4770,
        5,736,0,0,4770,4775,5,424,0,0,4771,4773,3,1298,649,0,4772,4771,1,
        0,0,0,4772,4773,1,0,0,0,4773,4775,1,0,0,0,4774,4760,1,0,0,0,4774,
        4768,1,0,0,0,4774,4772,1,0,0,0,4775,4790,1,0,0,0,4776,4787,3,1306,
        653,0,4777,4778,5,166,0,0,4778,4782,5,667,0,0,4779,4783,5,57,0,0,
        4780,4783,5,389,0,0,4781,4783,3,682,341,0,4782,4779,1,0,0,0,4782,
        4780,1,0,0,0,4782,4781,1,0,0,0,4783,4788,1,0,0,0,4784,4786,3,1298,
        649,0,4785,4784,1,0,0,0,4785,4786,1,0,0,0,4786,4788,1,0,0,0,4787,
        4777,1,0,0,0,4787,4785,1,0,0,0,4788,4790,1,0,0,0,4789,4753,1,0,0,
        0,4789,4757,1,0,0,0,4789,4776,1,0,0,0,4790,621,1,0,0,0,4791,4796,
        3,624,312,0,4792,4793,5,29,0,0,4793,4795,3,624,312,0,4794,4792,1,
        0,0,0,4795,4798,1,0,0,0,4796,4794,1,0,0,0,4796,4797,1,0,0,0,4797,
        623,1,0,0,0,4798,4796,1,0,0,0,4799,4800,4,312,49,0,4800,4875,3,626,
        313,0,4801,4802,4,312,50,0,4802,4872,3,1306,653,0,4803,4812,3,1280,
        640,0,4804,4805,5,475,0,0,4805,4807,3,1438,719,0,4806,4808,3,1294,
        647,0,4807,4806,1,0,0,0,4807,4808,1,0,0,0,4808,4813,1,0,0,0,4809,
        4811,3,1294,647,0,4810,4809,1,0,0,0,4810,4811,1,0,0,0,4811,4813,
        1,0,0,0,4812,4804,1,0,0,0,4812,4810,1,0,0,0,4813,4873,1,0,0,0,4814,
        4823,3,1282,641,0,4815,4817,3,1294,647,0,4816,4815,1,0,0,0,4816,
        4817,1,0,0,0,4817,4824,1,0,0,0,4818,4819,5,475,0,0,4819,4821,3,1438,
        719,0,4820,4822,3,1294,647,0,4821,4820,1,0,0,0,4821,4822,1,0,0,0,
        4822,4824,1,0,0,0,4823,4816,1,0,0,0,4823,4818,1,0,0,0,4824,4873,
        1,0,0,0,4825,4873,3,1284,642,0,4826,4828,3,1286,643,0,4827,4829,
        3,1294,647,0,4828,4827,1,0,0,0,4828,4829,1,0,0,0,4829,4873,1,0,0,
        0,4830,4839,3,1288,644,0,4831,4832,5,475,0,0,4832,4834,3,1438,719,
        0,4833,4835,3,1294,647,0,4834,4833,1,0,0,0,4834,4835,1,0,0,0,4835,
        4840,1,0,0,0,4836,4838,3,1294,647,0,4837,4836,1,0,0,0,4837,4838,
        1,0,0,0,4838,4840,1,0,0,0,4839,4831,1,0,0,0,4839,4837,1,0,0,0,4840,
        4873,1,0,0,0,4841,4843,3,1290,645,0,4842,4844,3,1294,647,0,4843,
        4842,1,0,0,0,4843,4844,1,0,0,0,4844,4873,1,0,0,0,4845,4847,3,1296,
        648,0,4846,4845,1,0,0,0,4846,4847,1,0,0,0,4847,4873,1,0,0,0,4848,
        4849,5,51,0,0,4849,4850,3,1300,650,0,4850,4855,3,1278,639,0,4851,
        4852,5,51,0,0,4852,4853,3,1300,650,0,4853,4854,3,1278,639,0,4854,
        4856,1,0,0,0,4855,4851,1,0,0,0,4855,4856,1,0,0,0,4856,4873,1,0,0,
        0,4857,4858,5,371,0,0,4858,4859,3,1300,650,0,4859,4864,3,1278,639,
        0,4860,4861,5,371,0,0,4861,4862,3,1300,650,0,4862,4863,3,1278,639,
        0,4863,4865,1,0,0,0,4864,4860,1,0,0,0,4864,4865,1,0,0,0,4865,4873,
        1,0,0,0,4866,4867,5,184,0,0,4867,4870,3,1300,650,0,4868,4869,5,184,
        0,0,4869,4871,3,1300,650,0,4870,4868,1,0,0,0,4870,4871,1,0,0,0,4871,
        4873,1,0,0,0,4872,4803,1,0,0,0,4872,4814,1,0,0,0,4872,4825,1,0,0,
        0,4872,4826,1,0,0,0,4872,4830,1,0,0,0,4872,4841,1,0,0,0,4872,4846,
        1,0,0,0,4872,4848,1,0,0,0,4872,4857,1,0,0,0,4872,4866,1,0,0,0,4873,
        4875,1,0,0,0,4874,4799,1,0,0,0,4874,4801,1,0,0,0,4875,625,1,0,0,
        0,4876,4877,3,1306,653,0,4877,4878,5,262,0,0,4878,4898,5,89,0,0,
        4879,4880,3,1440,720,0,4880,4881,5,475,0,0,4881,4883,3,1440,720,
        0,4882,4884,3,1294,647,0,4883,4882,1,0,0,0,4883,4884,1,0,0,0,4884,
        4899,1,0,0,0,4885,4887,3,1440,720,0,4886,4888,3,1294,647,0,4887,
        4886,1,0,0,0,4887,4888,1,0,0,0,4888,4899,1,0,0,0,4889,4890,5,742,
        0,0,4890,4893,5,424,0,0,4891,4892,5,475,0,0,4892,4894,3,1440,720,
        0,4893,4891,1,0,0,0,4893,4894,1,0,0,0,4894,4896,1,0,0,0,4895,4897,
        3,1294,647,0,4896,4895,1,0,0,0,4896,4897,1,0,0,0,4897,4899,1,0,0,
        0,4898,4879,1,0,0,0,4898,4885,1,0,0,0,4898,4889,1,0,0,0,4899,4934,
        1,0,0,0,4900,4901,3,1306,653,0,4901,4902,5,262,0,0,4902,4903,5,653,
        0,0,4903,4927,3,1466,733,0,4904,4905,5,89,0,0,4905,4906,3,1440,720,
        0,4906,4907,5,475,0,0,4907,4909,3,1440,720,0,4908,4910,3,1294,647,
        0,4909,4908,1,0,0,0,4909,4910,1,0,0,0,4910,4928,1,0,0,0,4911,4912,
        5,63,0,0,4912,4914,3,1442,721,0,4913,4915,3,1294,647,0,4914,4913,
        1,0,0,0,4914,4915,1,0,0,0,4915,4928,1,0,0,0,4916,4917,5,89,0,0,4917,
        4919,3,1440,720,0,4918,4920,3,1294,647,0,4919,4918,1,0,0,0,4919,
        4920,1,0,0,0,4920,4928,1,0,0,0,4921,4922,5,89,0,0,4922,4923,5,742,
        0,0,4923,4925,5,424,0,0,4924,4926,3,1294,647,0,4925,4924,1,0,0,0,
        4925,4926,1,0,0,0,4926,4928,1,0,0,0,4927,4904,1,0,0,0,4927,4911,
        1,0,0,0,4927,4916,1,0,0,0,4927,4921,1,0,0,0,4927,4928,1,0,0,0,4928,
        4934,1,0,0,0,4929,4931,3,1306,653,0,4930,4932,3,1296,648,0,4931,
        4930,1,0,0,0,4931,4932,1,0,0,0,4932,4934,1,0,0,0,4933,4876,1,0,0,
        0,4933,4900,1,0,0,0,4933,4929,1,0,0,0,4934,627,1,0,0,0,4935,4936,
        5,627,0,0,4936,4937,3,1474,737,0,4937,629,1,0,0,0,4938,4939,5,139,
        0,0,4939,4941,5,627,0,0,4940,4942,3,1240,620,0,4941,4940,1,0,0,0,
        4941,4942,1,0,0,0,4942,4943,1,0,0,0,4943,4945,3,1272,636,0,4944,
        4946,3,636,318,0,4945,4944,1,0,0,0,4945,4946,1,0,0,0,4946,4947,1,
        0,0,0,4947,4948,3,632,316,0,4948,631,1,0,0,0,4949,4951,3,638,319,
        0,4950,4949,1,0,0,0,4950,4951,1,0,0,0,4951,4953,1,0,0,0,4952,4954,
        3,640,320,0,4953,4952,1,0,0,0,4953,4954,1,0,0,0,4954,4958,1,0,0,
        0,4955,4957,3,642,321,0,4956,4955,1,0,0,0,4957,4960,1,0,0,0,4958,
        4956,1,0,0,0,4958,4959,1,0,0,0,4959,4963,1,0,0,0,4960,4958,1,0,0,
        0,4961,4962,4,316,51,0,4962,4964,3,634,317,0,4963,4961,1,0,0,0,4963,
        4964,1,0,0,0,4964,633,1,0,0,0,4965,4966,5,756,0,0,4966,4970,3,1438,
        719,0,4967,4968,5,118,0,0,4968,4970,3,1438,719,0,4969,4965,1,0,0,
        0,4969,4967,1,0,0,0,4970,635,1,0,0,0,4971,4972,5,166,0,0,4972,4973,
        5,667,0,0,4973,4974,3,682,341,0,4974,637,1,0,0,0,4975,4978,5,484,
        0,0,4976,4979,3,674,337,0,4977,4979,7,79,0,0,4978,4976,1,0,0,0,4978,
        4977,1,0,0,0,4979,639,1,0,0,0,4980,4989,5,653,0,0,4981,4982,5,347,
        0,0,4982,4990,3,1418,709,0,4983,4984,5,351,0,0,4984,4990,3,1418,
        709,0,4985,4986,5,346,0,0,4986,4990,3,1418,709,0,4987,4988,5,352,
        0,0,4988,4990,3,1418,709,0,4989,4981,1,0,0,0,4989,4983,1,0,0,0,4989,
        4985,1,0,0,0,4989,4987,1,0,0,0,4990,4991,1,0,0,0,4991,4989,1,0,0,
        0,4991,4992,1,0,0,0,4992,641,1,0,0,0,4993,4994,5,49,0,0,4994,5034,
        7,80,0,0,4995,5024,5,424,0,0,4996,5003,5,212,0,0,4997,4998,5,278,
        0,0,4998,4999,3,1420,710,0,4999,5000,5,162,0,0,5000,5004,1,0,0,0,
        5001,5004,5,385,0,0,5002,5004,5,166,0,0,5003,4997,1,0,0,0,5003,5001,
        1,0,0,0,5003,5002,1,0,0,0,5003,5004,1,0,0,0,5004,5025,1,0,0,0,5005,
        5008,5,713,0,0,5006,5009,3,1420,710,0,5007,5009,5,166,0,0,5008,5006,
        1,0,0,0,5008,5007,1,0,0,0,5009,5025,1,0,0,0,5010,5011,5,714,0,0,
        5011,5016,5,278,0,0,5012,5013,3,1420,710,0,5013,5014,5,162,0,0,5014,
        5017,1,0,0,0,5015,5017,5,166,0,0,5016,5012,1,0,0,0,5016,5015,1,0,
        0,0,5017,5025,1,0,0,0,5018,5019,4,321,52,0,5019,5020,5,484,0,0,5020,
        5022,5,143,0,0,5021,5023,7,81,0,0,5022,5021,1,0,0,0,5022,5023,1,
        0,0,0,5023,5025,1,0,0,0,5024,4996,1,0,0,0,5024,5005,1,0,0,0,5024,
        5010,1,0,0,0,5024,5018,1,0,0,0,5025,5034,1,0,0,0,5026,5027,5,749,
        0,0,5027,5034,3,1420,710,0,5028,5031,5,748,0,0,5029,5032,3,1420,
        710,0,5030,5032,5,706,0,0,5031,5029,1,0,0,0,5031,5030,1,0,0,0,5032,
        5034,1,0,0,0,5033,4993,1,0,0,0,5033,4995,1,0,0,0,5033,5026,1,0,0,
        0,5033,5028,1,0,0,0,5034,643,1,0,0,0,5035,5041,1,0,0,0,5036,5037,
        5,756,0,0,5037,5041,3,1438,719,0,5038,5039,5,118,0,0,5039,5041,3,
        1438,719,0,5040,5035,1,0,0,0,5040,5036,1,0,0,0,5040,5038,1,0,0,0,
        5041,645,1,0,0,0,5042,5043,5,184,0,0,5043,5045,5,627,0,0,5044,5046,
        3,1234,617,0,5045,5044,1,0,0,0,5045,5046,1,0,0,0,5046,5047,1,0,0,
        0,5047,5048,3,1270,635,0,5048,647,1,0,0,0,5049,5091,5,247,0,0,5050,
        5051,3,668,334,0,5051,5052,5,599,0,0,5052,5056,3,1270,635,0,5053,
        5054,5,653,0,0,5054,5055,5,668,0,0,5055,5057,5,409,0,0,5056,5053,
        1,0,0,0,5056,5057,1,0,0,0,5057,5092,1,0,0,0,5058,5064,3,668,334,
        0,5059,5061,5,57,0,0,5060,5062,5,439,0,0,5061,5060,1,0,0,0,5061,
        5062,1,0,0,0,5062,5064,1,0,0,0,5063,5058,1,0,0,0,5063,5059,1,0,0,
        0,5064,5065,1,0,0,0,5065,5067,5,401,0,0,5066,5068,3,666,333,0,5067,
        5066,1,0,0,0,5067,5068,1,0,0,0,5068,5069,1,0,0,0,5069,5070,3,672,
        336,0,5070,5071,5,599,0,0,5071,5073,3,650,325,0,5072,5074,3,660,
        330,0,5073,5072,1,0,0,0,5073,5074,1,0,0,0,5074,5076,1,0,0,0,5075,
        5077,3,652,326,0,5076,5075,1,0,0,0,5076,5077,1,0,0,0,5077,5079,1,
        0,0,0,5078,5080,3,658,329,0,5079,5078,1,0,0,0,5079,5080,1,0,0,0,
        5080,5092,1,0,0,0,5081,5082,5,445,0,0,5082,5083,5,401,0,0,5083,5084,
        3,1306,653,0,5084,5085,5,599,0,0,5085,5089,3,650,325,0,5086,5087,
        5,653,0,0,5087,5088,5,247,0,0,5088,5090,5,409,0,0,5089,5086,1,0,
        0,0,5089,5090,1,0,0,0,5090,5092,1,0,0,0,5091,5050,1,0,0,0,5091,5063,
        1,0,0,0,5091,5081,1,0,0,0,5092,649,1,0,0,0,5093,5094,4,325,53,0,
        5094,5098,3,1272,636,0,5095,5096,4,325,54,0,5096,5098,3,1270,635,
        0,5097,5093,1,0,0,0,5097,5095,1,0,0,0,5098,651,1,0,0,0,5099,5100,
        5,653,0,0,5100,5101,3,678,339,0,5101,653,1,0,0,0,5102,5103,5,671,
        0,0,5103,5104,3,682,341,0,5104,655,1,0,0,0,5105,5106,5,653,0,0,5106,
        5114,5,667,0,0,5107,5115,3,682,341,0,5108,5110,5,57,0,0,5109,5111,
        3,654,327,0,5110,5109,1,0,0,0,5110,5111,1,0,0,0,5111,5115,1,0,0,
        0,5112,5115,5,389,0,0,5113,5115,5,166,0,0,5114,5107,1,0,0,0,5114,
        5108,1,0,0,0,5114,5112,1,0,0,0,5114,5113,1,0,0,0,5115,657,1,0,0,
        0,5116,5117,5,63,0,0,5117,5119,5,627,0,0,5118,5120,3,656,328,0,5119,
        5118,1,0,0,0,5119,5120,1,0,0,0,5120,659,1,0,0,0,5121,5122,4,330,
        55,0,5122,5123,3,638,319,0,5123,661,1,0,0,0,5124,5125,5,470,0,0,
        5125,5126,5,627,0,0,5126,5127,3,1306,653,0,5127,5128,5,599,0,0,5128,
        5136,3,1306,653,0,5129,5130,5,29,0,0,5130,5131,3,1306,653,0,5131,
        5132,5,599,0,0,5132,5133,3,1306,653,0,5133,5135,1,0,0,0,5134,5129,
        1,0,0,0,5135,5138,1,0,0,0,5136,5134,1,0,0,0,5136,5137,1,0,0,0,5137,
        663,1,0,0,0,5138,5136,1,0,0,0,5139,5142,5,494,0,0,5140,5141,4,332,
        56,0,5141,5143,3,1234,617,0,5142,5140,1,0,0,0,5142,5143,1,0,0,0,
        5143,5179,1,0,0,0,5144,5145,3,668,334,0,5145,5146,5,235,0,0,5146,
        5147,3,1270,635,0,5147,5180,1,0,0,0,5148,5149,3,668,334,0,5149,5151,
        5,401,0,0,5150,5152,3,666,333,0,5151,5150,1,0,0,0,5151,5152,1,0,
        0,0,5152,5153,1,0,0,0,5153,5154,3,672,336,0,5154,5155,5,235,0,0,
        5155,5156,3,1270,635,0,5156,5180,1,0,0,0,5157,5159,5,57,0,0,5158,
        5160,5,439,0,0,5159,5158,1,0,0,0,5159,5160,1,0,0,0,5160,5169,1,0,
        0,0,5161,5163,5,401,0,0,5162,5164,3,666,333,0,5163,5162,1,0,0,0,
        5163,5164,1,0,0,0,5164,5165,1,0,0,0,5165,5170,3,672,336,0,5166,5167,
        5,29,0,0,5167,5168,5,247,0,0,5168,5170,5,409,0,0,5169,5161,1,0,0,
        0,5169,5166,1,0,0,0,5170,5171,1,0,0,0,5171,5172,5,235,0,0,5172,5180,
        3,1270,635,0,5173,5174,5,445,0,0,5174,5175,5,401,0,0,5175,5176,3,
        1306,653,0,5176,5177,5,235,0,0,5177,5178,3,1270,635,0,5178,5180,
        1,0,0,0,5179,5144,1,0,0,0,5179,5148,1,0,0,0,5179,5157,1,0,0,0,5179,
        5173,1,0,0,0,5180,5183,1,0,0,0,5181,5182,4,332,57,0,5182,5184,3,
        1242,621,0,5183,5181,1,0,0,0,5183,5184,1,0,0,0,5184,665,1,0,0,0,
        5185,5186,7,82,0,0,5186,667,1,0,0,0,5187,5192,3,670,335,0,5188,5189,
        5,29,0,0,5189,5191,3,670,335,0,5190,5188,1,0,0,0,5191,5194,1,0,0,
        0,5192,5190,1,0,0,0,5192,5193,1,0,0,0,5193,669,1,0,0,0,5194,5192,
        1,0,0,0,5195,5197,3,1470,735,0,5196,5198,3,1324,662,0,5197,5196,
        1,0,0,0,5197,5198,1,0,0,0,5198,5206,1,0,0,0,5199,5203,3,1470,735,
        0,5200,5204,5,40,0,0,5201,5202,5,39,0,0,5202,5204,3,1466,733,0,5203,
        5200,1,0,0,0,5203,5201,1,0,0,0,5204,5206,1,0,0,0,5205,5195,1,0,0,
        0,5205,5199,1,0,0,0,5206,5238,1,0,0,0,5207,5209,7,83,0,0,5208,5210,
        3,1324,662,0,5209,5208,1,0,0,0,5209,5210,1,0,0,0,5210,5238,1,0,0,
        0,5211,5238,7,84,0,0,5212,5213,5,247,0,0,5213,5238,5,409,0,0,5214,
        5215,5,521,0,0,5215,5238,5,151,0,0,5216,5220,5,139,0,0,5217,5218,
        5,586,0,0,5218,5221,5,581,0,0,5219,5221,7,85,0,0,5220,5217,1,0,0,
        0,5220,5219,1,0,0,0,5220,5221,1,0,0,0,5221,5238,1,0,0,0,5222,5223,
        5,314,0,0,5223,5238,5,581,0,0,5224,5227,5,476,0,0,5225,5228,5,108,
        0,0,5226,5228,3,604,302,0,5227,5225,1,0,0,0,5227,5226,1,0,0,0,5228,
        5238,1,0,0,0,5229,5230,5,521,0,0,5230,5238,5,644,0,0,5231,5233,5,
        58,0,0,5232,5234,5,499,0,0,5233,5232,1,0,0,0,5233,5234,1,0,0,0,5234,
        5238,1,0,0,0,5235,5236,7,86,0,0,5236,5238,5,667,0,0,5237,5205,1,
        0,0,0,5237,5207,1,0,0,0,5237,5211,1,0,0,0,5237,5212,1,0,0,0,5237,
        5214,1,0,0,0,5237,5216,1,0,0,0,5237,5222,1,0,0,0,5237,5224,1,0,0,
        0,5237,5229,1,0,0,0,5237,5231,1,0,0,0,5237,5235,1,0,0,0,5238,671,
        1,0,0,0,5239,5242,5,16,0,0,5240,5241,5,28,0,0,5241,5243,5,16,0,0,
        5242,5240,1,0,0,0,5242,5243,1,0,0,0,5243,5256,1,0,0,0,5244,5247,
        3,1338,669,0,5245,5246,5,28,0,0,5246,5248,5,16,0,0,5247,5245,1,0,
        0,0,5247,5248,1,0,0,0,5248,5256,1,0,0,0,5249,5256,3,1382,691,0,5250,
        5251,4,336,58,0,5251,5252,3,1338,669,0,5252,5253,5,28,0,0,5253,5254,
        3,1382,691,0,5254,5256,1,0,0,0,5255,5239,1,0,0,0,5255,5244,1,0,0,
        0,5255,5249,1,0,0,0,5255,5250,1,0,0,0,5256,673,1,0,0,0,5257,5264,
        3,676,338,0,5258,5260,5,61,0,0,5259,5258,1,0,0,0,5259,5260,1,0,0,
        0,5260,5261,1,0,0,0,5261,5263,3,676,338,0,5262,5259,1,0,0,0,5263,
        5266,1,0,0,0,5264,5262,1,0,0,0,5264,5265,1,0,0,0,5265,675,1,0,0,
        0,5266,5264,1,0,0,0,5267,5268,5,106,0,0,5268,5274,3,1440,720,0,5269,
        5270,5,289,0,0,5270,5274,3,1440,720,0,5271,5272,5,569,0,0,5272,5274,
        3,1440,720,0,5273,5267,1,0,0,0,5273,5269,1,0,0,0,5273,5271,1,0,0,
        0,5274,677,1,0,0,0,5275,5276,5,247,0,0,5276,5289,5,409,0,0,5277,
        5286,4,339,59,0,5278,5279,5,347,0,0,5279,5287,3,1418,709,0,5280,
        5281,5,351,0,0,5281,5287,3,1418,709,0,5282,5283,5,346,0,0,5283,5287,
        3,1418,709,0,5284,5285,5,352,0,0,5285,5287,3,1418,709,0,5286,5278,
        1,0,0,0,5286,5280,1,0,0,0,5286,5282,1,0,0,0,5286,5284,1,0,0,0,5287,
        5289,1,0,0,0,5288,5275,1,0,0,0,5288,5277,1,0,0,0,5289,679,1,0,0,
        0,5290,5291,5,519,0,0,5291,5292,5,667,0,0,5292,5314,3,682,341,0,
        5293,5294,5,519,0,0,5294,5295,5,667,0,0,5295,5314,7,87,0,0,5296,
        5297,5,519,0,0,5297,5298,5,166,0,0,5298,5302,5,667,0,0,5299,5303,
        3,682,341,0,5300,5303,5,389,0,0,5301,5303,5,57,0,0,5302,5299,1,0,
        0,0,5302,5300,1,0,0,0,5302,5301,1,0,0,0,5303,5304,1,0,0,0,5304,5305,
        5,599,0,0,5305,5314,3,682,341,0,5306,5307,5,519,0,0,5307,5308,5,
        667,0,0,5308,5311,5,57,0,0,5309,5310,5,671,0,0,5310,5312,3,682,341,
        0,5311,5309,1,0,0,0,5311,5312,1,0,0,0,5312,5314,1,0,0,0,5313,5290,
        1,0,0,0,5313,5293,1,0,0,0,5313,5296,1,0,0,0,5313,5306,1,0,0,0,5314,
        681,1,0,0,0,5315,5320,3,684,342,0,5316,5317,5,29,0,0,5317,5319,3,
        684,342,0,5318,5316,1,0,0,0,5319,5322,1,0,0,0,5320,5318,1,0,0,0,
        5320,5321,1,0,0,0,5321,683,1,0,0,0,5322,5320,1,0,0,0,5323,5325,3,
        1470,735,0,5324,5326,3,986,493,0,5325,5324,1,0,0,0,5325,5326,1,0,
        0,0,5326,685,1,0,0,0,5327,5329,5,60,0,0,5328,5330,3,1314,657,0,5329,
        5328,1,0,0,0,5329,5330,1,0,0,0,5330,5331,1,0,0,0,5331,5332,5,583,
        0,0,5332,5334,3,1384,692,0,5333,5335,3,694,347,0,5334,5333,1,0,0,
        0,5334,5335,1,0,0,0,5335,5370,1,0,0,0,5336,5337,5,105,0,0,5337,5338,
        5,583,0,0,5338,5342,3,1384,692,0,5339,5341,3,696,348,0,5340,5339,
        1,0,0,0,5341,5344,1,0,0,0,5342,5340,1,0,0,0,5342,5343,1,0,0,0,5343,
        5370,1,0,0,0,5344,5342,1,0,0,0,5345,5346,5,104,0,0,5346,5347,5,583,
        0,0,5347,5349,3,1384,692,0,5348,5350,7,88,0,0,5349,5348,1,0,0,0,
        5349,5350,1,0,0,0,5350,5370,1,0,0,0,5351,5353,5,406,0,0,5352,5354,
        3,1314,657,0,5353,5352,1,0,0,0,5353,5354,1,0,0,0,5354,5355,1,0,0,
        0,5355,5356,5,583,0,0,5356,5370,3,1384,692,0,5357,5359,5,472,0,0,
        5358,5360,3,1314,657,0,5359,5358,1,0,0,0,5359,5360,1,0,0,0,5360,
        5361,1,0,0,0,5361,5362,5,583,0,0,5362,5366,3,1384,692,0,5363,5365,
        3,698,349,0,5364,5363,1,0,0,0,5365,5368,1,0,0,0,5366,5364,1,0,0,
        0,5366,5367,1,0,0,0,5367,5370,1,0,0,0,5368,5366,1,0,0,0,5369,5327,
        1,0,0,0,5369,5336,1,0,0,0,5369,5345,1,0,0,0,5369,5351,1,0,0,0,5369,
        5357,1,0,0,0,5370,687,1,0,0,0,5371,5372,4,344,60,0,5372,5373,7,89,
        0,0,5373,5374,5,623,0,0,5374,689,1,0,0,0,5375,5377,3,692,346,0,5376,
        5375,1,0,0,0,5376,5377,1,0,0,0,5377,5379,1,0,0,0,5378,5380,3,688,
        344,0,5379,5378,1,0,0,0,5379,5380,1,0,0,0,5380,5386,1,0,0,0,5381,
        5382,4,345,61,0,5382,5383,5,630,0,0,5383,5384,5,153,0,0,5384,5386,
        3,1438,719,0,5385,5376,1,0,0,0,5385,5381,1,0,0,0,5386,691,1,0,0,
        0,5387,5388,4,346,62,0,5388,5389,5,653,0,0,5389,5390,5,3,0,0,5390,
        5391,5,683,0,0,5391,693,1,0,0,0,5392,5393,5,623,0,0,5393,5394,5,
        682,0,0,5394,5395,5,401,0,0,5395,5396,3,1408,704,0,5396,5397,3,690,
        345,0,5397,5403,1,0,0,0,5398,5399,5,184,0,0,5399,5400,5,682,0,0,
        5400,5401,5,401,0,0,5401,5403,3,1408,704,0,5402,5392,1,0,0,0,5402,
        5398,1,0,0,0,5403,695,1,0,0,0,5404,5405,5,232,0,0,5405,5408,5,624,
        0,0,5406,5408,7,90,0,0,5407,5404,1,0,0,0,5407,5406,1,0,0,0,5408,
        697,1,0,0,0,5409,5410,7,91,0,0,5410,699,1,0,0,0,5411,5423,5,616,
        0,0,5412,5413,5,428,0,0,5413,5424,3,1396,698,0,5414,5415,5,672,0,
        0,5415,5420,3,1398,699,0,5416,5417,5,29,0,0,5417,5419,3,1398,699,
        0,5418,5416,1,0,0,0,5419,5422,1,0,0,0,5420,5418,1,0,0,0,5420,5421,
        1,0,0,0,5421,5424,1,0,0,0,5422,5420,1,0,0,0,5423,5412,1,0,0,0,5423,
        5414,1,0,0,0,5424,701,1,0,0,0,5425,5436,5,277,0,0,5426,5427,5,428,
        0,0,5427,5428,3,1406,703,0,5428,5429,5,531,0,0,5429,5430,3,1438,
        719,0,5430,5437,1,0,0,0,5431,5432,5,672,0,0,5432,5434,3,1448,724,
        0,5433,5435,3,710,355,0,5434,5433,1,0,0,0,5434,5435,1,0,0,0,5435,
        5437,1,0,0,0,5436,5426,1,0,0,0,5436,5431,1,0,0,0,5437,703,1,0,0,
        0,5438,5439,7,92,0,0,5439,705,1,0,0,0,5440,5443,3,910,455,0,5441,
        5443,5,401,0,0,5442,5440,1,0,0,0,5442,5441,1,0,0,0,5443,707,1,0,
        0,0,5444,5445,3,704,352,0,5445,5446,3,992,496,0,5446,5447,3,1476,
        738,0,5447,5448,3,706,353,0,5448,709,1,0,0,0,5449,5450,4,355,63,
        0,5450,5451,5,519,0,0,5451,5456,3,708,354,0,5452,5453,5,29,0,0,5453,
        5455,3,708,354,0,5454,5452,1,0,0,0,5455,5458,1,0,0,0,5456,5454,1,
        0,0,0,5456,5457,1,0,0,0,5457,711,1,0,0,0,5458,5456,1,0,0,0,5459,
        5460,5,519,0,0,5460,5461,3,714,357,0,5461,713,1,0,0,0,5462,5463,
        3,724,362,0,5463,5464,3,722,361,0,5464,5513,1,0,0,0,5465,5466,5,
        601,0,0,5466,5513,3,716,358,0,5467,5468,3,1478,739,0,5468,5469,3,
        730,365,0,5469,5513,1,0,0,0,5470,5473,5,424,0,0,5471,5472,5,232,
        0,0,5472,5474,3,1306,653,0,5473,5471,1,0,0,0,5473,5474,1,0,0,0,5474,
        5475,1,0,0,0,5475,5496,3,1476,738,0,5476,5478,3,1440,720,0,5477,
        5479,3,1302,651,0,5478,5477,1,0,0,0,5478,5479,1,0,0,0,5479,5481,
        1,0,0,0,5480,5482,3,1294,647,0,5481,5480,1,0,0,0,5481,5482,1,0,0,
        0,5482,5497,1,0,0,0,5483,5485,3,1440,720,0,5484,5486,3,1302,651,
        0,5485,5484,1,0,0,0,5485,5486,1,0,0,0,5486,5488,1,0,0,0,5487,5489,
        3,1294,647,0,5488,5487,1,0,0,0,5488,5489,1,0,0,0,5489,5497,1,0,0,
        0,5490,5491,4,357,64,0,5491,5492,5,424,0,0,5492,5493,5,32,0,0,5493,
        5494,3,1440,720,0,5494,5495,5,33,0,0,5495,5497,1,0,0,0,5496,5476,
        1,0,0,0,5496,5483,1,0,0,0,5496,5490,1,0,0,0,5497,5513,1,0,0,0,5498,
        5499,4,357,65,0,5499,5502,5,424,0,0,5500,5501,5,232,0,0,5501,5503,
        3,1306,653,0,5502,5500,1,0,0,0,5502,5503,1,0,0,0,5503,5504,1,0,0,
        0,5504,5505,5,599,0,0,5505,5507,5,742,0,0,5506,5508,3,1302,651,0,
        5507,5506,1,0,0,0,5507,5508,1,0,0,0,5508,5510,1,0,0,0,5509,5511,
        3,1294,647,0,5510,5509,1,0,0,0,5510,5511,1,0,0,0,5511,5513,1,0,0,
        0,5512,5462,1,0,0,0,5512,5465,1,0,0,0,5512,5467,1,0,0,0,5512,5470,
        1,0,0,0,5512,5498,1,0,0,0,5513,715,1,0,0,0,5514,5516,3,718,359,0,
        5515,5517,3,720,360,0,5516,5515,1,0,0,0,5516,5517,1,0,0,0,5517,5524,
        1,0,0,0,5518,5521,3,720,360,0,5519,5520,5,29,0,0,5520,5522,3,718,
        359,0,5521,5519,1,0,0,0,5521,5522,1,0,0,0,5522,5524,1,0,0,0,5523,
        5514,1,0,0,0,5523,5518,1,0,0,0,5524,717,1,0,0,0,5525,5526,5,453,
        0,0,5526,5527,7,42,0,0,5527,719,1,0,0,0,5528,5529,5,288,0,0,5529,
        5535,5,304,0,0,5530,5531,5,473,0,0,5531,5536,5,453,0,0,5532,5533,
        5,453,0,0,5533,5536,7,93,0,0,5534,5536,5,514,0,0,5535,5530,1,0,0,
        0,5535,5532,1,0,0,0,5535,5534,1,0,0,0,5536,721,1,0,0,0,5537,5538,
        5,29,0,0,5538,5540,3,726,363,0,5539,5537,1,0,0,0,5540,5543,1,0,0,
        0,5541,5539,1,0,0,0,5541,5542,1,0,0,0,5542,723,1,0,0,0,5543,5541,
        1,0,0,0,5544,5545,3,992,496,0,5545,5546,3,1476,738,0,5546,5547,3,
        734,367,0,5547,5574,1,0,0,0,5548,5574,3,1260,630,0,5549,5550,3,986,
        493,0,5550,5551,3,1476,738,0,5551,5552,3,910,455,0,5552,5574,1,0,
        0,0,5553,5555,5,41,0,0,5554,5556,3,1482,741,0,5555,5554,1,0,0,0,
        5555,5556,1,0,0,0,5556,5557,1,0,0,0,5557,5558,3,992,496,0,5558,5559,
        3,1476,738,0,5559,5560,3,734,367,0,5560,5574,1,0,0,0,5561,5571,5,
        379,0,0,5562,5563,3,1476,738,0,5563,5564,3,910,455,0,5564,5572,1,
        0,0,0,5565,5567,3,1188,594,0,5566,5568,3,1248,624,0,5567,5566,1,
        0,0,0,5567,5568,1,0,0,0,5568,5572,1,0,0,0,5569,5570,4,362,66,0,5570,
        5572,5,166,0,0,5571,5562,1,0,0,0,5571,5565,1,0,0,0,5571,5569,1,0,
        0,0,5572,5574,1,0,0,0,5573,5544,1,0,0,0,5573,5548,1,0,0,0,5573,5549,
        1,0,0,0,5573,5553,1,0,0,0,5573,5561,1,0,0,0,5574,725,1,0,0,0,5575,
        5576,3,1478,739,0,5576,5577,3,992,496,0,5577,5578,3,1476,738,0,5578,
        5579,3,734,367,0,5579,5582,1,0,0,0,5580,5582,3,724,362,0,5581,5575,
        1,0,0,0,5581,5580,1,0,0,0,5582,727,1,0,0,0,5583,5585,5,41,0,0,5584,
        5586,3,1482,741,0,5585,5584,1,0,0,0,5585,5586,1,0,0,0,5586,5587,
        1,0,0,0,5587,5588,3,992,496,0,5588,729,1,0,0,0,5589,5590,3,732,366,
        0,5590,5591,3,722,361,0,5591,5595,1,0,0,0,5592,5593,5,601,0,0,5593,
        5595,3,716,358,0,5594,5589,1,0,0,0,5594,5592,1,0,0,0,5595,731,1,
        0,0,0,5596,5597,3,992,496,0,5597,5598,3,1476,738,0,5598,5599,3,734,
        367,0,5599,733,1,0,0,0,5600,5608,3,910,455,0,5601,5608,5,166,0,0,
        5602,5608,5,401,0,0,5603,5608,5,57,0,0,5604,5608,5,77,0,0,5605,5608,
        5,503,0,0,5606,5608,5,718,0,0,5607,5600,1,0,0,0,5607,5601,1,0,0,
        0,5607,5602,1,0,0,0,5607,5603,1,0,0,0,5607,5604,1,0,0,0,5607,5605,
        1,0,0,0,5607,5606,1,0,0,0,5608,735,1,0,0,0,5609,5610,5,521,0,0,5610,
        5612,5,151,0,0,5611,5613,3,1310,655,0,5612,5611,1,0,0,0,5612,5613,
        1,0,0,0,5613,737,1,0,0,0,5614,5616,5,521,0,0,5615,5617,3,828,414,
        0,5616,5615,1,0,0,0,5616,5617,1,0,0,0,5617,5618,1,0,0,0,5618,5620,
        5,581,0,0,5619,5621,3,834,417,0,5620,5619,1,0,0,0,5620,5621,1,0,
        0,0,5621,5623,1,0,0,0,5622,5624,3,1310,655,0,5623,5622,1,0,0,0,5623,
        5624,1,0,0,0,5624,739,1,0,0,0,5625,5627,5,521,0,0,5626,5628,5,236,
        0,0,5627,5626,1,0,0,0,5627,5628,1,0,0,0,5628,5629,1,0,0,0,5629,5631,
        5,602,0,0,5630,5632,3,834,417,0,5631,5630,1,0,0,0,5631,5632,1,0,
        0,0,5632,5634,1,0,0,0,5633,5635,3,1310,655,0,5634,5633,1,0,0,0,5634,
        5635,1,0,0,0,5635,741,1,0,0,0,5636,5637,5,521,0,0,5637,5639,5,204,
        0,0,5638,5640,3,834,417,0,5639,5638,1,0,0,0,5639,5640,1,0,0,0,5640,
        5642,1,0,0,0,5641,5643,3,1310,655,0,5642,5641,1,0,0,0,5642,5643,
        1,0,0,0,5643,743,1,0,0,0,5644,5645,5,521,0,0,5645,5646,5,583,0,0,
        5646,5648,5,557,0,0,5647,5649,3,834,417,0,5648,5647,1,0,0,0,5648,
        5649,1,0,0,0,5649,5651,1,0,0,0,5650,5652,3,1310,655,0,5651,5650,
        1,0,0,0,5651,5652,1,0,0,0,5652,745,1,0,0,0,5653,5654,5,521,0,0,5654,
        5655,5,405,0,0,5655,5657,5,581,0,0,5656,5658,3,834,417,0,5657,5656,
        1,0,0,0,5657,5658,1,0,0,0,5658,5660,1,0,0,0,5659,5661,3,1310,655,
        0,5660,5659,1,0,0,0,5660,5661,1,0,0,0,5661,747,1,0,0,0,5662,5663,
        4,374,67,0,5663,5664,5,521,0,0,5664,5665,5,807,0,0,5665,5666,3,2,
        1,0,5666,749,1,0,0,0,5667,5668,5,521,0,0,5668,5669,5,426,0,0,5669,
        751,1,0,0,0,5670,5671,5,521,0,0,5671,5672,5,198,0,0,5672,5673,3,
        830,415,0,5673,5674,5,316,0,0,5674,753,1,0,0,0,5675,5676,5,521,0,
        0,5676,5677,5,198,0,0,5677,5678,3,830,415,0,5678,5679,5,377,0,0,
        5679,755,1,0,0,0,5680,5681,5,521,0,0,5681,5682,5,198,0,0,5682,5683,
        3,830,415,0,5683,5684,5,557,0,0,5684,757,1,0,0,0,5685,5687,5,521,
        0,0,5686,5688,3,828,414,0,5687,5686,1,0,0,0,5687,5688,1,0,0,0,5688,
        5689,1,0,0,0,5689,5690,5,114,0,0,5690,5691,7,94,0,0,5691,5693,3,
        1382,691,0,5692,5694,3,834,417,0,5693,5692,1,0,0,0,5693,5694,1,0,
        0,0,5694,5696,1,0,0,0,5695,5697,3,1310,655,0,5696,5695,1,0,0,0,5696,
        5697,1,0,0,0,5697,759,1,0,0,0,5698,5699,5,521,0,0,5699,5700,7,46,
        0,0,5700,5701,5,316,0,0,5701,761,1,0,0,0,5702,5703,5,521,0,0,5703,
        5704,5,77,0,0,5704,5705,5,808,0,0,5705,5706,5,557,0,0,5706,763,1,
        0,0,0,5707,5712,5,521,0,0,5708,5709,3,604,302,0,5709,5710,5,257,
        0,0,5710,5713,1,0,0,0,5711,5713,5,763,0,0,5712,5708,1,0,0,0,5712,
        5711,1,0,0,0,5713,765,1,0,0,0,5714,5715,5,521,0,0,5715,5716,5,78,
        0,0,5716,5719,5,204,0,0,5717,5718,5,282,0,0,5718,5720,3,1440,720,
        0,5719,5717,1,0,0,0,5719,5720,1,0,0,0,5720,5723,1,0,0,0,5721,5722,
        5,235,0,0,5722,5724,3,1422,711,0,5723,5721,1,0,0,0,5723,5724,1,0,
        0,0,5724,5726,1,0,0,0,5725,5727,3,314,157,0,5726,5725,1,0,0,0,5726,
        5727,1,0,0,0,5727,5729,1,0,0,0,5728,5730,3,1030,515,0,5729,5728,
        1,0,0,0,5729,5730,1,0,0,0,5730,767,1,0,0,0,5731,5732,5,521,0,0,5732,
        5733,5,463,0,0,5733,5736,5,204,0,0,5734,5735,5,282,0,0,5735,5737,
        3,1440,720,0,5736,5734,1,0,0,0,5736,5737,1,0,0,0,5737,5740,1,0,0,
        0,5738,5739,5,235,0,0,5739,5741,3,1422,711,0,5740,5738,1,0,0,0,5740,
        5741,1,0,0,0,5741,5743,1,0,0,0,5742,5744,3,314,157,0,5743,5742,1,
        0,0,0,5743,5744,1,0,0,0,5744,5746,1,0,0,0,5745,5747,3,1030,515,0,
        5746,5745,1,0,0,0,5746,5747,1,0,0,0,5747,769,1,0,0,0,5748,5750,5,
        521,0,0,5749,5751,5,215,0,0,5750,5749,1,0,0,0,5750,5751,1,0,0,0,
        5751,5752,1,0,0,0,5752,5753,7,95,0,0,5753,5754,3,832,416,0,5754,
        5756,3,1382,691,0,5755,5757,3,834,417,0,5756,5755,1,0,0,0,5756,5757,
        1,0,0,0,5757,5759,1,0,0,0,5758,5760,3,390,195,0,5759,5758,1,0,0,
        0,5759,5760,1,0,0,0,5760,771,1,0,0,0,5761,5763,5,521,0,0,5762,5764,
        5,563,0,0,5763,5762,1,0,0,0,5763,5764,1,0,0,0,5764,5765,1,0,0,0,
        5765,5766,5,197,0,0,5766,773,1,0,0,0,5767,5768,5,521,0,0,5768,5769,
        5,137,0,0,5769,5770,5,32,0,0,5770,5771,5,16,0,0,5771,5772,5,33,0,
        0,5772,5773,5,647,0,0,5773,775,1,0,0,0,5774,5775,5,521,0,0,5775,
        5776,5,137,0,0,5776,5777,5,32,0,0,5777,5778,5,16,0,0,5778,5779,5,
        33,0,0,5779,5780,5,201,0,0,5780,777,1,0,0,0,5781,5782,5,521,0,0,
        5782,5784,5,647,0,0,5783,5785,3,314,157,0,5784,5783,1,0,0,0,5784,
        5785,1,0,0,0,5785,779,1,0,0,0,5786,5787,5,521,0,0,5787,5789,5,201,
        0,0,5788,5790,3,314,157,0,5789,5788,1,0,0,0,5789,5790,1,0,0,0,5790,
        781,1,0,0,0,5791,5792,5,521,0,0,5792,5793,5,444,0,0,5793,783,1,0,
        0,0,5794,5795,5,521,0,0,5795,5797,5,443,0,0,5796,5798,3,836,418,
        0,5797,5796,1,0,0,0,5797,5798,1,0,0,0,5798,5802,1,0,0,0,5799,5800,
        5,232,0,0,5800,5801,5,448,0,0,5801,5803,5,3,0,0,5802,5799,1,0,0,
        0,5802,5803,1,0,0,0,5803,5805,1,0,0,0,5804,5806,3,314,157,0,5805,
        5804,1,0,0,0,5805,5806,1,0,0,0,5806,785,1,0,0,0,5807,5809,5,521,
        0,0,5808,5810,3,1478,739,0,5809,5808,1,0,0,0,5809,5810,1,0,0,0,5810,
        5811,1,0,0,0,5811,5813,5,557,0,0,5812,5814,3,1310,655,0,5813,5812,
        1,0,0,0,5813,5814,1,0,0,0,5814,787,1,0,0,0,5815,5817,5,521,0,0,5816,
        5818,5,236,0,0,5817,5816,1,0,0,0,5817,5818,1,0,0,0,5818,5819,1,0,
        0,0,5819,5820,5,442,0,0,5820,789,1,0,0,0,5821,5823,5,521,0,0,5822,
        5824,3,1478,739,0,5823,5822,1,0,0,0,5823,5824,1,0,0,0,5824,5825,
        1,0,0,0,5825,5827,5,639,0,0,5826,5828,3,1310,655,0,5827,5826,1,0,
        0,0,5827,5828,1,0,0,0,5828,791,1,0,0,0,5829,5830,5,521,0,0,5830,
        5832,3,1006,503,0,5831,5833,3,1310,655,0,5832,5831,1,0,0,0,5832,
        5833,1,0,0,0,5833,793,1,0,0,0,5834,5835,5,521,0,0,5835,5837,5,113,
        0,0,5836,5838,3,1310,655,0,5837,5836,1,0,0,0,5837,5838,1,0,0,0,5838,
        795,1,0,0,0,5839,5840,5,521,0,0,5840,5841,5,439,0,0,5841,797,1,0,
        0,0,5842,5843,5,521,0,0,5843,5850,5,248,0,0,5844,5845,5,232,0,0,
        5845,5848,3,1306,653,0,5846,5847,5,630,0,0,5847,5849,3,1270,635,
        0,5848,5846,1,0,0,0,5848,5849,1,0,0,0,5849,5851,1,0,0,0,5850,5844,
        1,0,0,0,5850,5851,1,0,0,0,5851,799,1,0,0,0,5852,5853,5,521,0,0,5853,
        5854,5,139,0,0,5854,5856,5,150,0,0,5855,5857,3,1240,620,0,5856,5855,
        1,0,0,0,5856,5857,1,0,0,0,5857,5858,1,0,0,0,5858,5859,3,1338,669,
        0,5859,801,1,0,0,0,5860,5861,5,521,0,0,5861,5862,5,139,0,0,5862,
        5863,5,583,0,0,5863,5864,3,1382,691,0,5864,803,1,0,0,0,5865,5866,
        5,521,0,0,5866,5867,5,139,0,0,5867,5868,5,644,0,0,5868,5869,3,1354,
        677,0,5869,805,1,0,0,0,5870,5871,5,521,0,0,5871,5872,5,341,0,0,5872,
        5873,5,557,0,0,5873,807,1,0,0,0,5874,5875,5,521,0,0,5875,5876,3,
        604,302,0,5876,5878,5,557,0,0,5877,5879,3,1030,515,0,5878,5877,1,
        0,0,0,5878,5879,1,0,0,0,5879,809,1,0,0,0,5880,5881,5,521,0,0,5881,
        5882,5,139,0,0,5882,5883,5,440,0,0,5883,5884,3,1342,671,0,5884,811,
        1,0,0,0,5885,5886,5,521,0,0,5886,5887,5,139,0,0,5887,5888,5,238,
        0,0,5888,5889,3,1346,673,0,5889,813,1,0,0,0,5890,5891,5,521,0,0,
        5891,5892,5,139,0,0,5892,5893,5,603,0,0,5893,5894,3,1350,675,0,5894,
        815,1,0,0,0,5895,5896,5,521,0,0,5896,5897,5,139,0,0,5897,5898,5,
        440,0,0,5898,5900,5,557,0,0,5899,5901,3,1310,655,0,5900,5899,1,0,
        0,0,5900,5901,1,0,0,0,5901,817,1,0,0,0,5902,5903,5,521,0,0,5903,
        5904,5,139,0,0,5904,5905,5,238,0,0,5905,5907,5,557,0,0,5906,5908,
        3,1310,655,0,5907,5906,1,0,0,0,5907,5908,1,0,0,0,5908,819,1,0,0,
        0,5909,5910,5,521,0,0,5910,5911,5,139,0,0,5911,5912,5,440,0,0,5912,
        5913,5,111,0,0,5913,5914,3,1342,671,0,5914,821,1,0,0,0,5915,5916,
        5,521,0,0,5916,5917,5,139,0,0,5917,5918,5,238,0,0,5918,5919,5,111,
        0,0,5919,5920,3,1346,673,0,5920,823,1,0,0,0,5921,5922,5,521,0,0,
        5922,5923,5,139,0,0,5923,5924,5,205,0,0,5924,5925,3,1366,683,0,5925,
        825,1,0,0,0,5926,5927,5,521,0,0,5927,5928,5,139,0,0,5928,5929,5,
        627,0,0,5929,5930,3,1306,653,0,5930,827,1,0,0,0,5931,5937,5,236,
        0,0,5932,5934,5,215,0,0,5933,5935,5,236,0,0,5934,5933,1,0,0,0,5934,
        5935,1,0,0,0,5935,5937,1,0,0,0,5936,5931,1,0,0,0,5936,5932,1,0,0,
        0,5937,829,1,0,0,0,5938,5941,3,1374,687,0,5939,5941,5,57,0,0,5940,
        5938,1,0,0,0,5940,5939,1,0,0,0,5941,831,1,0,0,0,5942,5943,7,94,0,
        0,5943,833,1,0,0,0,5944,5945,3,832,416,0,5945,5946,3,1406,703,0,
        5946,835,1,0,0,0,5947,5952,3,838,419,0,5948,5949,5,29,0,0,5949,5951,
        3,838,419,0,5950,5948,1,0,0,0,5951,5954,1,0,0,0,5952,5950,1,0,0,
        0,5952,5953,1,0,0,0,5953,837,1,0,0,0,5954,5952,1,0,0,0,5955,5956,
        5,84,0,0,5956,5963,5,285,0,0,5957,5958,5,134,0,0,5958,5963,5,578,
        0,0,5959,5960,5,418,0,0,5960,5963,5,220,0,0,5961,5963,7,96,0,0,5962,
        5955,1,0,0,0,5962,5957,1,0,0,0,5962,5959,1,0,0,0,5962,5961,1,0,0,
        0,5963,839,1,0,0,0,5964,5965,5,78,0,0,5965,6001,3,1444,722,0,5966,
        5967,5,91,0,0,5967,5968,5,268,0,0,5968,5969,3,842,421,0,5969,5972,
        5,282,0,0,5970,5973,3,1406,703,0,5971,5973,5,166,0,0,5972,5970,1,
        0,0,0,5972,5971,1,0,0,0,5973,6001,1,0,0,0,5974,5976,5,228,0,0,5975,
        5977,3,1314,657,0,5976,5975,1,0,0,0,5976,5977,1,0,0,0,5977,5987,
        1,0,0,0,5978,5988,3,860,430,0,5979,5984,3,856,428,0,5980,5981,5,
        29,0,0,5981,5983,3,856,428,0,5982,5980,1,0,0,0,5983,5986,1,0,0,0,
        5984,5982,1,0,0,0,5984,5985,1,0,0,0,5985,5988,1,0,0,0,5986,5984,
        1,0,0,0,5987,5978,1,0,0,0,5987,5979,1,0,0,0,5988,6001,1,0,0,0,5989,
        5991,5,296,0,0,5990,5992,7,97,0,0,5991,5990,1,0,0,0,5991,5992,1,
        0,0,0,5992,5993,1,0,0,0,5993,6001,3,910,455,0,5994,5995,5,311,0,
        0,5995,5996,5,268,0,0,5996,5997,5,279,0,0,5997,5998,5,91,0,0,5998,
        6001,3,864,432,0,5999,6001,5,522,0,0,6000,5964,1,0,0,0,6000,5966,
        1,0,0,0,6000,5974,1,0,0,0,6000,5989,1,0,0,0,6000,5994,1,0,0,0,6000,
        5999,1,0,0,0,6001,841,1,0,0,0,6002,6005,3,844,422,0,6003,6005,3,
        848,424,0,6004,6002,1,0,0,0,6004,6003,1,0,0,0,6005,843,1,0,0,0,6006,
        6011,3,846,423,0,6007,6008,5,29,0,0,6008,6010,3,846,423,0,6009,6007,
        1,0,0,0,6010,6013,1,0,0,0,6011,6009,1,0,0,0,6011,6012,1,0,0,0,6012,
        845,1,0,0,0,6013,6011,1,0,0,0,6014,6016,3,1382,691,0,6015,6017,3,
        850,425,0,6016,6015,1,0,0,0,6016,6017,1,0,0,0,6017,847,1,0,0,0,6018,
        6019,3,1382,691,0,6019,6020,5,423,0,0,6020,6021,5,32,0,0,6021,6022,
        3,54,27,0,6022,6024,5,33,0,0,6023,6025,3,850,425,0,6024,6023,1,0,
        0,0,6024,6025,1,0,0,0,6025,849,1,0,0,0,6026,6027,3,440,220,0,6027,
        6029,5,32,0,0,6028,6030,3,854,427,0,6029,6028,1,0,0,0,6029,6030,
        1,0,0,0,6030,6031,1,0,0,0,6031,6032,5,33,0,0,6032,851,1,0,0,0,6033,
        6036,3,1406,703,0,6034,6036,5,438,0,0,6035,6033,1,0,0,0,6035,6034,
        1,0,0,0,6036,853,1,0,0,0,6037,6042,3,852,426,0,6038,6039,5,29,0,
        0,6039,6041,3,852,426,0,6040,6038,1,0,0,0,6041,6044,1,0,0,0,6042,
        6040,1,0,0,0,6042,6043,1,0,0,0,6043,855,1,0,0,0,6044,6042,1,0,0,
        0,6045,6057,7,98,0,0,6046,6048,3,858,429,0,6047,6046,1,0,0,0,6047,
        6048,1,0,0,0,6048,6049,1,0,0,0,6049,6057,5,316,0,0,6050,6051,5,462,
        0,0,6051,6053,5,316,0,0,6052,6054,3,1030,515,0,6053,6052,1,0,0,0,
        6053,6054,1,0,0,0,6054,6057,1,0,0,0,6055,6057,5,407,0,0,6056,6045,
        1,0,0,0,6056,6047,1,0,0,0,6056,6050,1,0,0,0,6056,6055,1,0,0,0,6057,
        857,1,0,0,0,6058,6059,7,99,0,0,6059,859,1,0,0,0,6060,6068,7,17,0,
        0,6061,6062,5,653,0,0,6062,6063,5,453,0,0,6063,6069,5,314,0,0,6064,
        6066,3,1408,704,0,6065,6067,3,862,431,0,6066,6065,1,0,0,0,6066,6067,
        1,0,0,0,6067,6069,1,0,0,0,6068,6061,1,0,0,0,6068,6064,1,0,0,0,6068,
        6069,1,0,0,0,6069,861,1,0,0,0,6070,6071,5,232,0,0,6071,6076,5,214,
        0,0,6072,6073,5,653,0,0,6073,6074,5,453,0,0,6074,6076,5,314,0,0,
        6075,6070,1,0,0,0,6075,6072,1,0,0,0,6076,863,1,0,0,0,6077,6078,3,
        1382,691,0,6078,6080,3,870,435,0,6079,6081,3,850,425,0,6080,6079,
        1,0,0,0,6080,6081,1,0,0,0,6081,6084,1,0,0,0,6082,6083,5,264,0,0,
        6083,6085,5,300,0,0,6084,6082,1,0,0,0,6084,6085,1,0,0,0,6085,6088,
        1,0,0,0,6086,6088,3,866,433,0,6087,6077,1,0,0,0,6087,6086,1,0,0,
        0,6088,865,1,0,0,0,6089,6094,3,868,434,0,6090,6091,5,29,0,0,6091,
        6093,3,868,434,0,6092,6090,1,0,0,0,6093,6096,1,0,0,0,6094,6092,1,
        0,0,0,6094,6095,1,0,0,0,6095,867,1,0,0,0,6096,6094,1,0,0,0,6097,
        6099,3,1382,691,0,6098,6100,3,850,425,0,6099,6098,1,0,0,0,6099,6100,
        1,0,0,0,6100,6103,1,0,0,0,6101,6102,5,264,0,0,6102,6104,5,300,0,
        0,6103,6101,1,0,0,0,6103,6104,1,0,0,0,6104,869,1,0,0,0,6105,6106,
        5,423,0,0,6106,6107,5,32,0,0,6107,6108,3,54,27,0,6108,6109,5,33,
        0,0,6109,871,1,0,0,0,6110,6115,3,874,437,0,6111,6115,3,884,442,0,
        6112,6115,3,886,443,0,6113,6115,3,890,445,0,6114,6110,1,0,0,0,6114,
        6111,1,0,0,0,6114,6112,1,0,0,0,6114,6113,1,0,0,0,6115,873,1,0,0,
        0,6116,6117,5,139,0,0,6117,6118,5,717,0,0,6118,6119,5,249,0,0,6119,
        6120,3,1406,703,0,6120,6122,5,608,0,0,6121,6123,3,1476,738,0,6122,
        6121,1,0,0,0,6122,6123,1,0,0,0,6123,6124,1,0,0,0,6124,6126,7,100,
        0,0,6125,6127,3,876,438,0,6126,6125,1,0,0,0,6126,6127,1,0,0,0,6127,
        6129,1,0,0,0,6128,6130,3,880,440,0,6129,6128,1,0,0,0,6129,6130,1,
        0,0,0,6130,6132,1,0,0,0,6131,6133,3,882,441,0,6132,6131,1,0,0,0,
        6132,6133,1,0,0,0,6133,875,1,0,0,0,6134,6136,5,719,0,0,6135,6137,
        3,1476,738,0,6136,6135,1,0,0,0,6136,6137,1,0,0,0,6137,6138,1,0,0,
        0,6138,6145,3,878,439,0,6139,6141,5,29,0,0,6140,6139,1,0,0,0,6140,
        6141,1,0,0,0,6141,6142,1,0,0,0,6142,6144,3,878,439,0,6143,6140,1,
        0,0,0,6144,6147,1,0,0,0,6145,6143,1,0,0,0,6145,6146,1,0,0,0,6146,
        877,1,0,0,0,6147,6145,1,0,0,0,6148,6151,5,3,0,0,6149,6150,5,15,0,
        0,6150,6152,5,3,0,0,6151,6149,1,0,0,0,6151,6152,1,0,0,0,6152,879,
        1,0,0,0,6153,6155,5,716,0,0,6154,6156,3,1476,738,0,6155,6154,1,0,
        0,0,6155,6156,1,0,0,0,6156,6157,1,0,0,0,6157,6158,5,3,0,0,6158,881,
        1,0,0,0,6159,6160,7,7,0,0,6160,883,1,0,0,0,6161,6162,5,58,0,0,6162,
        6163,5,717,0,0,6163,6164,5,249,0,0,6164,6166,3,1400,700,0,6165,6167,
        3,876,438,0,6166,6165,1,0,0,0,6166,6167,1,0,0,0,6167,6169,1,0,0,
        0,6168,6170,3,880,440,0,6169,6168,1,0,0,0,6169,6170,1,0,0,0,6170,
        6172,1,0,0,0,6171,6173,3,882,441,0,6172,6171,1,0,0,0,6172,6173,1,
        0,0,0,6173,6175,1,0,0,0,6174,6176,5,230,0,0,6175,6174,1,0,0,0,6175,
        6176,1,0,0,0,6176,885,1,0,0,0,6177,6178,5,519,0,0,6178,6179,5,717,
        0,0,6179,6180,5,249,0,0,6180,6183,3,1406,703,0,6181,6182,5,232,0,
        0,6182,6184,3,888,444,0,6183,6181,1,0,0,0,6183,6184,1,0,0,0,6184,
        887,1,0,0,0,6185,6192,3,1420,710,0,6186,6188,5,29,0,0,6187,6186,
        1,0,0,0,6187,6188,1,0,0,0,6188,6189,1,0,0,0,6189,6191,3,1420,710,
        0,6190,6187,1,0,0,0,6191,6194,1,0,0,0,6192,6190,1,0,0,0,6192,6193,
        1,0,0,0,6193,889,1,0,0,0,6194,6192,1,0,0,0,6195,6196,5,184,0,0,6196,
        6197,5,717,0,0,6197,6198,5,249,0,0,6198,6200,3,1400,700,0,6199,6201,
        5,230,0,0,6200,6199,1,0,0,0,6200,6201,1,0,0,0,6201,891,1,0,0,0,6202,
        6209,3,894,447,0,6203,6209,3,896,448,0,6204,6209,3,904,452,0,6205,
        6209,3,906,453,0,6206,6207,4,446,68,0,6207,6209,3,908,454,0,6208,
        6202,1,0,0,0,6208,6203,1,0,0,0,6208,6204,1,0,0,0,6208,6205,1,0,0,
        0,6208,6206,1,0,0,0,6209,893,1,0,0,0,6210,6211,7,101,0,0,6211,6214,
        3,1382,691,0,6212,6215,3,1440,720,0,6213,6215,3,1326,663,0,6214,
        6212,1,0,0,0,6214,6213,1,0,0,0,6214,6215,1,0,0,0,6215,895,1,0,0,
        0,6216,6218,7,101,0,0,6217,6219,3,898,449,0,6218,6217,1,0,0,0,6218,
        6219,1,0,0,0,6219,6224,1,0,0,0,6220,6221,4,448,69,0,6221,6222,5,
        232,0,0,6222,6223,5,150,0,0,6223,6225,3,1466,733,0,6224,6220,1,0,
        0,0,6224,6225,1,0,0,0,6225,6226,1,0,0,0,6226,6227,3,900,450,0,6227,
        897,1,0,0,0,6228,6229,5,233,0,0,6229,6230,5,6,0,0,6230,6233,3,1466,
        733,0,6231,6232,4,449,70,0,6232,6234,3,902,451,0,6233,6231,1,0,0,
        0,6233,6234,1,0,0,0,6234,6245,1,0,0,0,6235,6236,4,449,71,0,6236,
        6245,5,215,0,0,6237,6238,4,449,72,0,6238,6245,5,60,0,0,6239,6240,
        4,449,73,0,6240,6241,5,60,0,0,6241,6242,5,233,0,0,6242,6243,5,6,
        0,0,6243,6245,3,1466,733,0,6244,6228,1,0,0,0,6244,6235,1,0,0,0,6244,
        6237,1,0,0,0,6244,6239,1,0,0,0,6245,899,1,0,0,0,6246,6255,3,296,
        148,0,6247,6255,3,234,117,0,6248,6255,3,246,123,0,6249,6255,3,294,
        147,0,6250,6255,3,450,225,0,6251,6252,5,232,0,0,6252,6253,5,127,
        0,0,6253,6255,3,1420,710,0,6254,6246,1,0,0,0,6254,6247,1,0,0,0,6254,
        6248,1,0,0,0,6254,6249,1,0,0,0,6254,6250,1,0,0,0,6254,6251,1,0,0,
        0,6255,901,1,0,0,0,6256,6257,5,279,0,0,6257,6258,5,39,0,0,6258,6259,
        3,1466,733,0,6259,903,1,0,0,0,6260,6261,5,254,0,0,6261,6262,3,1466,
        733,0,6262,905,1,0,0,0,6263,6264,5,629,0,0,6264,6265,3,1338,669,
        0,6265,907,1,0,0,0,6266,6267,5,722,0,0,6267,909,1,0,0,0,6268,6269,
        6,455,-1,0,6269,6275,3,912,456,0,6270,6272,5,287,0,0,6271,6273,3,
        1008,504,0,6272,6271,1,0,0,0,6272,6273,1,0,0,0,6273,6274,1,0,0,0,
        6274,6276,7,102,0,0,6275,6270,1,0,0,0,6275,6276,1,0,0,0,6276,6280,
        1,0,0,0,6277,6278,5,390,0,0,6278,6280,3,910,455,4,6279,6268,1,0,
        0,0,6279,6277,1,0,0,0,6280,6292,1,0,0,0,6281,6282,10,3,0,0,6282,
        6283,7,103,0,0,6283,6291,3,910,455,4,6284,6285,10,2,0,0,6285,6286,
        5,662,0,0,6286,6291,3,910,455,3,6287,6288,10,1,0,0,6288,6289,7,104,
        0,0,6289,6291,3,910,455,2,6290,6281,1,0,0,0,6290,6284,1,0,0,0,6290,
        6287,1,0,0,0,6291,6294,1,0,0,0,6292,6290,1,0,0,0,6292,6293,1,0,0,
        0,6293,911,1,0,0,0,6294,6292,1,0,0,0,6295,6296,6,456,-1,0,6296,6297,
        3,916,458,0,6297,6315,1,0,0,0,6298,6299,10,3,0,0,6299,6301,5,287,
        0,0,6300,6302,3,1008,504,0,6301,6300,1,0,0,0,6301,6302,1,0,0,0,6302,
        6303,1,0,0,0,6303,6314,5,395,0,0,6304,6305,10,2,0,0,6305,6306,3,
        914,457,0,6306,6307,3,916,458,0,6307,6314,1,0,0,0,6308,6309,10,1,
        0,0,6309,6310,3,914,457,0,6310,6311,7,105,0,0,6311,6312,3,310,155,
        0,6312,6314,1,0,0,0,6313,6298,1,0,0,0,6313,6304,1,0,0,0,6313,6308,
        1,0,0,0,6314,6317,1,0,0,0,6315,6313,1,0,0,0,6315,6316,1,0,0,0,6316,
        913,1,0,0,0,6317,6315,1,0,0,0,6318,6319,7,106,0,0,6319,915,1,0,0,
        0,6320,6334,3,920,460,0,6321,6323,3,1008,504,0,6322,6321,1,0,0,0,
        6322,6323,1,0,0,0,6323,6324,1,0,0,0,6324,6335,3,918,459,0,6325,6326,
        4,458,80,0,6326,6328,5,741,0,0,6327,6329,5,676,0,0,6328,6327,1,0,
        0,0,6328,6329,1,0,0,0,6329,6330,1,0,0,0,6330,6335,3,1020,510,0,6331,
        6332,5,532,0,0,6332,6333,5,305,0,0,6333,6335,3,920,460,0,6334,6322,
        1,0,0,0,6334,6325,1,0,0,0,6334,6331,1,0,0,0,6334,6335,1,0,0,0,6335,
        917,1,0,0,0,6336,6342,5,282,0,0,6337,6343,3,310,155,0,6338,6339,
        5,32,0,0,6339,6340,3,1004,502,0,6340,6341,5,33,0,0,6341,6343,1,0,
        0,0,6342,6337,1,0,0,0,6342,6338,1,0,0,0,6343,6358,1,0,0,0,6344,6345,
        5,75,0,0,6345,6346,3,920,460,0,6346,6347,5,61,0,0,6347,6348,3,916,
        458,0,6348,6358,1,0,0,0,6349,6350,5,305,0,0,6350,6353,3,922,461,
        0,6351,6352,5,203,0,0,6352,6354,3,922,461,0,6353,6351,1,0,0,0,6353,
        6354,1,0,0,0,6354,6358,1,0,0,0,6355,6356,5,461,0,0,6356,6358,3,920,
        460,0,6357,6336,1,0,0,0,6357,6344,1,0,0,0,6357,6349,1,0,0,0,6357,
        6355,1,0,0,0,6358,919,1,0,0,0,6359,6360,6,460,-1,0,6360,6361,3,922,
        461,0,6361,6388,1,0,0,0,6362,6363,10,7,0,0,6363,6364,5,25,0,0,6364,
        6387,3,920,460,8,6365,6366,10,6,0,0,6366,6367,7,107,0,0,6367,6387,
        3,920,460,7,6368,6369,10,5,0,0,6369,6370,7,108,0,0,6370,6387,3,920,
        460,6,6371,6372,10,3,0,0,6372,6373,7,109,0,0,6373,6387,3,920,460,
        4,6374,6375,10,2,0,0,6375,6376,5,24,0,0,6376,6387,3,920,460,3,6377,
        6378,10,1,0,0,6378,6379,5,27,0,0,6379,6387,3,920,460,2,6380,6381,
        10,4,0,0,6381,6382,7,108,0,0,6382,6383,5,278,0,0,6383,6384,3,910,
        455,0,6384,6385,3,1012,506,0,6385,6387,1,0,0,0,6386,6362,1,0,0,0,
        6386,6365,1,0,0,0,6386,6368,1,0,0,0,6386,6371,1,0,0,0,6386,6374,
        1,0,0,0,6386,6377,1,0,0,0,6386,6380,1,0,0,0,6387,6390,1,0,0,0,6388,
        6386,1,0,0,0,6388,6389,1,0,0,0,6389,921,1,0,0,0,6390,6388,1,0,0,
        0,6391,6392,6,461,-1,0,6392,6394,3,1326,663,0,6393,6395,3,926,463,
        0,6394,6393,1,0,0,0,6394,6395,1,0,0,0,6395,6514,1,0,0,0,6396,6514,
        3,960,480,0,6397,6514,3,980,490,0,6398,6514,3,1432,716,0,6399,6514,
        5,43,0,0,6400,6514,3,990,495,0,6401,6514,3,988,494,0,6402,6514,3,
        928,464,0,6403,6514,3,930,465,0,6404,6514,3,932,466,0,6405,6406,
        7,110,0,0,6406,6514,3,922,461,15,6407,6408,3,1010,505,0,6408,6409,
        3,922,461,14,6409,6514,1,0,0,0,6410,6412,5,503,0,0,6411,6410,1,0,
        0,0,6411,6412,1,0,0,0,6412,6413,1,0,0,0,6413,6414,5,32,0,0,6414,
        6415,3,1004,502,0,6415,6416,5,33,0,0,6416,6514,1,0,0,0,6417,6419,
        5,209,0,0,6418,6417,1,0,0,0,6418,6419,1,0,0,0,6419,6420,1,0,0,0,
        6420,6514,3,310,155,0,6421,6422,5,34,0,0,6422,6423,3,1406,703,0,
        6423,6424,3,910,455,0,6424,6425,5,35,0,0,6425,6514,1,0,0,0,6426,
        6427,5,345,0,0,6427,6428,3,954,477,0,6428,6429,5,54,0,0,6429,6430,
        5,32,0,0,6430,6432,3,920,460,0,6431,6433,3,958,479,0,6432,6431,1,
        0,0,0,6432,6433,1,0,0,0,6433,6434,1,0,0,0,6434,6435,5,33,0,0,6435,
        6514,1,0,0,0,6436,6437,5,77,0,0,6437,6514,3,922,461,9,6438,6439,
        5,96,0,0,6439,6440,5,32,0,0,6440,6443,3,910,455,0,6441,6442,5,67,
        0,0,6442,6444,5,312,0,0,6443,6441,1,0,0,0,6443,6444,1,0,0,0,6444,
        6445,1,0,0,0,6445,6446,5,63,0,0,6446,6448,3,1002,501,0,6447,6449,
        3,924,462,0,6448,6447,1,0,0,0,6448,6449,1,0,0,0,6449,6450,1,0,0,
        0,6450,6451,5,33,0,0,6451,6514,1,0,0,0,6452,6453,5,96,0,0,6453,6454,
        5,32,0,0,6454,6455,3,910,455,0,6455,6456,5,67,0,0,6456,6457,5,595,
        0,0,6457,6459,5,760,0,0,6458,6460,5,278,0,0,6459,6458,1,0,0,0,6459,
        6460,1,0,0,0,6460,6461,1,0,0,0,6461,6462,3,1438,719,0,6462,6463,
        5,63,0,0,6463,6464,5,154,0,0,6464,6465,3,1184,592,0,6465,6466,5,
        33,0,0,6466,6514,1,0,0,0,6467,6469,5,95,0,0,6468,6470,3,910,455,
        0,6469,6468,1,0,0,0,6469,6470,1,0,0,0,6470,6474,1,0,0,0,6471,6472,
        3,996,498,0,6472,6473,3,998,499,0,6473,6475,1,0,0,0,6474,6471,1,
        0,0,0,6475,6476,1,0,0,0,6476,6474,1,0,0,0,6476,6477,1,0,0,0,6477,
        6479,1,0,0,0,6478,6480,3,1000,500,0,6479,6478,1,0,0,0,6479,6480,
        1,0,0,0,6480,6481,1,0,0,0,6481,6482,5,195,0,0,6482,6514,1,0,0,0,
        6483,6484,5,136,0,0,6484,6485,5,32,0,0,6485,6486,3,910,455,0,6486,
        6487,5,29,0,0,6487,6488,3,1002,501,0,6488,6489,5,33,0,0,6489,6514,
        1,0,0,0,6490,6491,5,136,0,0,6491,6492,5,32,0,0,6492,6493,3,910,455,
        0,6493,6494,5,630,0,0,6494,6495,3,1188,594,0,6495,6496,5,33,0,0,
        6496,6514,1,0,0,0,6497,6498,5,166,0,0,6498,6499,5,32,0,0,6499,6500,
        3,1414,707,0,6500,6501,5,33,0,0,6501,6514,1,0,0,0,6502,6503,5,635,
        0,0,6503,6504,5,32,0,0,6504,6505,3,1414,707,0,6505,6506,5,33,0,0,
        6506,6514,1,0,0,0,6507,6508,5,278,0,0,6508,6509,3,910,455,0,6509,
        6510,3,1012,506,0,6510,6511,5,14,0,0,6511,6512,3,910,455,0,6512,
        6514,1,0,0,0,6513,6391,1,0,0,0,6513,6396,1,0,0,0,6513,6397,1,0,0,
        0,6513,6398,1,0,0,0,6513,6399,1,0,0,0,6513,6400,1,0,0,0,6513,6401,
        1,0,0,0,6513,6402,1,0,0,0,6513,6403,1,0,0,0,6513,6404,1,0,0,0,6513,
        6405,1,0,0,0,6513,6407,1,0,0,0,6513,6411,1,0,0,0,6513,6418,1,0,0,
        0,6513,6421,1,0,0,0,6513,6426,1,0,0,0,6513,6436,1,0,0,0,6513,6438,
        1,0,0,0,6513,6452,1,0,0,0,6513,6467,1,0,0,0,6513,6483,1,0,0,0,6513,
        6490,1,0,0,0,6513,6497,1,0,0,0,6513,6502,1,0,0,0,6513,6507,1,0,0,
        0,6514,6523,1,0,0,0,6515,6516,10,16,0,0,6516,6517,5,2,0,0,6517,6522,
        3,922,461,17,6518,6519,10,24,0,0,6519,6520,5,112,0,0,6520,6522,3,
        1466,733,0,6521,6515,1,0,0,0,6521,6518,1,0,0,0,6522,6525,1,0,0,0,
        6523,6521,1,0,0,0,6523,6524,1,0,0,0,6524,923,1,0,0,0,6525,6523,1,
        0,0,0,6526,6527,4,462,90,0,6527,6528,5,739,0,0,6528,925,1,0,0,0,
        6529,6530,5,37,0,0,6530,6534,3,1438,719,0,6531,6532,5,38,0,0,6532,
        6534,3,1438,719,0,6533,6529,1,0,0,0,6533,6531,1,0,0,0,6534,927,1,
        0,0,0,6535,6536,5,71,0,0,6536,6538,5,32,0,0,6537,6539,5,180,0,0,
        6538,6537,1,0,0,0,6538,6539,1,0,0,0,6539,6540,1,0,0,0,6540,6541,
        3,952,476,0,6541,6543,5,33,0,0,6542,6544,3,940,470,0,6543,6542,1,
        0,0,0,6543,6544,1,0,0,0,6544,6621,1,0,0,0,6545,6546,7,111,0,0,6546,
        6547,5,32,0,0,6547,6548,3,952,476,0,6548,6550,5,33,0,0,6549,6551,
        3,940,470,0,6550,6549,1,0,0,0,6550,6551,1,0,0,0,6551,6621,1,0,0,
        0,6552,6621,3,950,475,0,6553,6554,5,792,0,0,6554,6556,5,32,0,0,6555,
        6557,5,180,0,0,6556,6555,1,0,0,0,6556,6557,1,0,0,0,6557,6558,1,0,
        0,0,6558,6559,3,952,476,0,6559,6561,5,33,0,0,6560,6562,3,940,470,
        0,6561,6560,1,0,0,0,6561,6562,1,0,0,0,6562,6621,1,0,0,0,6563,6564,
        5,137,0,0,6564,6572,5,32,0,0,6565,6567,5,57,0,0,6566,6565,1,0,0,
        0,6566,6567,1,0,0,0,6567,6568,1,0,0,0,6568,6573,5,16,0,0,6569,6573,
        3,952,476,0,6570,6571,5,180,0,0,6571,6573,3,1004,502,0,6572,6566,
        1,0,0,0,6572,6569,1,0,0,0,6572,6570,1,0,0,0,6573,6574,1,0,0,0,6574,
        6576,5,33,0,0,6575,6577,3,940,470,0,6576,6575,1,0,0,0,6576,6577,
        1,0,0,0,6577,6621,1,0,0,0,6578,6579,7,112,0,0,6579,6581,5,32,0,0,
        6580,6582,5,180,0,0,6581,6580,1,0,0,0,6581,6582,1,0,0,0,6582,6583,
        1,0,0,0,6583,6584,3,952,476,0,6584,6586,5,33,0,0,6585,6587,3,940,
        470,0,6586,6585,1,0,0,0,6586,6587,1,0,0,0,6587,6621,1,0,0,0,6588,
        6589,7,113,0,0,6589,6590,5,32,0,0,6590,6591,3,952,476,0,6591,6593,
        5,33,0,0,6592,6594,3,940,470,0,6593,6592,1,0,0,0,6593,6594,1,0,0,
        0,6594,6621,1,0,0,0,6595,6596,5,574,0,0,6596,6597,5,32,0,0,6597,
        6598,5,180,0,0,6598,6599,3,952,476,0,6599,6601,5,33,0,0,6600,6602,
        3,940,470,0,6601,6600,1,0,0,0,6601,6602,1,0,0,0,6602,6621,1,0,0,
        0,6603,6604,5,250,0,0,6604,6606,5,32,0,0,6605,6607,5,180,0,0,6606,
        6605,1,0,0,0,6606,6607,1,0,0,0,6607,6608,1,0,0,0,6608,6610,3,1004,
        502,0,6609,6611,3,360,180,0,6610,6609,1,0,0,0,6610,6611,1,0,0,0,
        6611,6614,1,0,0,0,6612,6613,5,513,0,0,6613,6615,3,1440,720,0,6614,
        6612,1,0,0,0,6614,6615,1,0,0,0,6615,6616,1,0,0,0,6616,6618,5,33,
        0,0,6617,6619,3,940,470,0,6618,6617,1,0,0,0,6618,6619,1,0,0,0,6619,
        6621,1,0,0,0,6620,6535,1,0,0,0,6620,6545,1,0,0,0,6620,6552,1,0,0,
        0,6620,6553,1,0,0,0,6620,6563,1,0,0,0,6620,6578,1,0,0,0,6620,6588,
        1,0,0,0,6620,6595,1,0,0,0,6620,6603,1,0,0,0,6621,929,1,0,0,0,6622,
        6623,5,680,0,0,6623,6624,5,32,0,0,6624,6625,3,1004,502,0,6625,6626,
        5,33,0,0,6626,931,1,0,0,0,6627,6628,7,114,0,0,6628,6629,3,1474,737,
        0,6629,6630,3,940,470,0,6630,6677,1,0,0,0,6631,6638,5,696,0,0,6632,
        6633,5,32,0,0,6633,6634,3,944,472,0,6634,6635,5,33,0,0,6635,6639,
        1,0,0,0,6636,6637,4,466,91,0,6637,6639,3,1020,510,0,6638,6632,1,
        0,0,0,6638,6636,1,0,0,0,6639,6640,1,0,0,0,6640,6641,3,940,470,0,
        6641,6677,1,0,0,0,6642,6643,7,115,0,0,6643,6644,5,32,0,0,6644,6646,
        3,910,455,0,6645,6647,3,942,471,0,6646,6645,1,0,0,0,6646,6647,1,
        0,0,0,6647,6648,1,0,0,0,6648,6650,5,33,0,0,6649,6651,3,948,474,0,
        6650,6649,1,0,0,0,6650,6651,1,0,0,0,6651,6652,1,0,0,0,6652,6653,
        3,940,470,0,6653,6677,1,0,0,0,6654,6655,7,116,0,0,6655,6657,3,1018,
        509,0,6656,6658,3,948,474,0,6657,6656,1,0,0,0,6657,6658,1,0,0,0,
        6658,6659,1,0,0,0,6659,6660,3,940,470,0,6660,6677,1,0,0,0,6661,6662,
        5,695,0,0,6662,6663,5,32,0,0,6663,6664,3,910,455,0,6664,6665,5,29,
        0,0,6665,6666,3,922,461,0,6666,6669,5,33,0,0,6667,6668,5,235,0,0,
        6668,6670,7,117,0,0,6669,6667,1,0,0,0,6669,6670,1,0,0,0,6670,6672,
        1,0,0,0,6671,6673,3,948,474,0,6672,6671,1,0,0,0,6672,6673,1,0,0,
        0,6673,6674,1,0,0,0,6674,6675,3,940,470,0,6675,6677,1,0,0,0,6676,
        6627,1,0,0,0,6676,6631,1,0,0,0,6676,6642,1,0,0,0,6676,6654,1,0,0,
        0,6676,6661,1,0,0,0,6677,933,1,0,0,0,6678,6679,7,118,0,0,6679,935,
        1,0,0,0,6680,6685,3,1422,711,0,6681,6682,5,39,0,0,6682,6685,3,1466,
        733,0,6683,6685,5,43,0,0,6684,6680,1,0,0,0,6684,6681,1,0,0,0,6684,
        6683,1,0,0,0,6685,937,1,0,0,0,6686,6687,4,469,92,0,6687,6688,5,816,
        0,0,6688,6689,3,934,467,0,6689,6690,5,32,0,0,6690,6691,3,936,468,
        0,6691,6692,5,33,0,0,6692,939,1,0,0,0,6693,6696,5,699,0,0,6694,6697,
        3,1402,701,0,6695,6697,3,334,167,0,6696,6694,1,0,0,0,6696,6695,1,
        0,0,0,6697,941,1,0,0,0,6698,6703,5,29,0,0,6699,6704,3,1422,711,0,
        6700,6704,5,43,0,0,6701,6702,4,471,93,0,6702,6704,3,944,472,0,6703,
        6699,1,0,0,0,6703,6700,1,0,0,0,6703,6701,1,0,0,0,6704,6707,1,0,0,
        0,6705,6706,5,29,0,0,6706,6708,3,910,455,0,6707,6705,1,0,0,0,6707,
        6708,1,0,0,0,6708,943,1,0,0,0,6709,6712,3,1456,728,0,6710,6712,3,
        946,473,0,6711,6709,1,0,0,0,6711,6710,1,0,0,0,6712,945,1,0,0,0,6713,
        6718,5,43,0,0,6714,6718,3,1406,703,0,6715,6716,5,39,0,0,6716,6718,
        3,1466,733,0,6717,6713,1,0,0,0,6717,6714,1,0,0,0,6717,6715,1,0,0,
        0,6718,947,1,0,0,0,6719,6720,7,119,0,0,6720,6721,5,697,0,0,6721,
        949,1,0,0,0,6722,6723,5,675,0,0,6723,6724,5,32,0,0,6724,6725,3,952,
        476,0,6725,6727,5,33,0,0,6726,6728,3,940,470,0,6727,6726,1,0,0,0,
        6727,6728,1,0,0,0,6728,6739,1,0,0,0,6729,6730,5,674,0,0,6730,6731,
        5,32,0,0,6731,6732,3,952,476,0,6732,6733,5,29,0,0,6733,6734,3,952,
        476,0,6734,6736,5,33,0,0,6735,6737,3,940,470,0,6736,6735,1,0,0,0,
        6736,6737,1,0,0,0,6737,6739,1,0,0,0,6738,6722,1,0,0,0,6738,6729,
        1,0,0,0,6739,951,1,0,0,0,6740,6742,5,57,0,0,6741,6740,1,0,0,0,6741,
        6742,1,0,0,0,6742,6743,1,0,0,0,6743,6744,3,910,455,0,6744,953,1,
        0,0,0,6745,6751,3,956,478,0,6746,6747,5,32,0,0,6747,6748,3,956,478,
        0,6748,6749,5,33,0,0,6749,6751,1,0,0,0,6750,6745,1,0,0,0,6750,6746,
        1,0,0,0,6751,955,1,0,0,0,6752,6757,3,1414,707,0,6753,6754,5,29,0,
        0,6754,6756,3,1414,707,0,6755,6753,1,0,0,0,6756,6759,1,0,0,0,6757,
        6755,1,0,0,0,6757,6758,1,0,0,0,6758,957,1,0,0,0,6759,6757,1,0,0,
        0,6760,6761,5,282,0,0,6761,6762,5,85,0,0,6762,6776,5,369,0,0,6763,
        6764,5,282,0,0,6764,6765,5,382,0,0,6765,6766,5,297,0,0,6766,6770,
        5,369,0,0,6767,6768,5,653,0,0,6768,6769,5,448,0,0,6769,6771,5,211,
        0,0,6770,6767,1,0,0,0,6770,6771,1,0,0,0,6771,6776,1,0,0,0,6772,6773,
        5,653,0,0,6773,6774,5,448,0,0,6774,6776,5,211,0,0,6775,6760,1,0,
        0,0,6775,6763,1,0,0,0,6775,6772,1,0,0,0,6776,959,1,0,0,0,6777,6778,
        5,103,0,0,6778,6779,5,32,0,0,6779,6782,3,1004,502,0,6780,6781,5,
        630,0,0,6781,6783,3,1188,594,0,6782,6780,1,0,0,0,6782,6783,1,0,0,
        0,6783,6784,1,0,0,0,6784,6785,5,33,0,0,6785,7061,1,0,0,0,6786,6788,
        5,146,0,0,6787,6789,3,1474,737,0,6788,6787,1,0,0,0,6788,6789,1,0,
        0,0,6789,7061,1,0,0,0,6790,6791,5,157,0,0,6791,7061,3,1018,509,0,
        6792,6793,5,162,0,0,6793,7061,3,1018,509,0,6794,6795,5,261,0,0,6795,
        7061,3,1018,509,0,6796,6797,5,274,0,0,6797,6798,5,32,0,0,6798,6799,
        3,910,455,0,6799,6800,5,29,0,0,6800,6801,3,910,455,0,6801,6802,5,
        29,0,0,6802,6803,3,910,455,0,6803,6804,5,29,0,0,6804,6805,3,910,
        455,0,6805,6806,5,33,0,0,6806,7061,1,0,0,0,6807,6808,5,278,0,0,6808,
        6809,5,32,0,0,6809,6812,3,910,455,0,6810,6811,5,29,0,0,6811,6813,
        3,910,455,0,6812,6810,1,0,0,0,6813,6814,1,0,0,0,6814,6812,1,0,0,
        0,6814,6815,1,0,0,0,6815,6816,1,0,0,0,6816,6817,5,33,0,0,6817,7061,
        1,0,0,0,6818,6819,5,754,0,0,6819,6820,5,32,0,0,6820,6821,3,922,461,
        0,6821,6822,5,29,0,0,6822,6824,3,1444,722,0,6823,6825,3,962,481,
        0,6824,6823,1,0,0,0,6824,6825,1,0,0,0,6825,6826,1,0,0,0,6826,6827,
        3,420,210,0,6827,6828,5,33,0,0,6828,7061,1,0,0,0,6829,6830,5,302,
        0,0,6830,6831,5,32,0,0,6831,6832,3,910,455,0,6832,6833,5,29,0,0,
        6833,6834,3,910,455,0,6834,6835,5,33,0,0,6835,7061,1,0,0,0,6836,
        6837,5,366,0,0,6837,7061,3,1018,509,0,6838,6839,5,373,0,0,6839,7061,
        3,1018,509,0,6840,6841,5,495,0,0,6841,6842,5,32,0,0,6842,6843,3,
        910,455,0,6843,6844,5,29,0,0,6844,6845,3,910,455,0,6845,6846,5,33,
        0,0,6846,7061,1,0,0,0,6847,6848,5,509,0,0,6848,7061,3,1018,509,0,
        6849,6850,5,595,0,0,6850,7061,3,1018,509,0,6851,6852,5,592,0,0,6852,
        6853,5,32,0,0,6853,6856,3,910,455,0,6854,6855,5,29,0,0,6855,6857,
        3,910,455,0,6856,6854,1,0,0,0,6856,6857,1,0,0,0,6857,6858,1,0,0,
        0,6858,6859,5,33,0,0,6859,7061,1,0,0,0,6860,7061,3,976,488,0,6861,
        7061,3,628,314,0,6862,6863,5,635,0,0,6863,7061,3,1018,509,0,6864,
        6865,5,664,0,0,6865,7061,3,1018,509,0,6866,6867,7,120,0,0,6867,6868,
        5,32,0,0,6868,6869,3,910,455,0,6869,6875,5,29,0,0,6870,6876,3,910,
        455,0,6871,6872,5,278,0,0,6872,6873,3,910,455,0,6873,6874,3,1012,
        506,0,6874,6876,1,0,0,0,6875,6870,1,0,0,0,6875,6871,1,0,0,0,6876,
        6877,1,0,0,0,6877,6878,5,33,0,0,6878,7061,1,0,0,0,6879,6881,5,142,
        0,0,6880,6882,3,1474,737,0,6881,6880,1,0,0,0,6881,6882,1,0,0,0,6882,
        7061,1,0,0,0,6883,6885,5,149,0,0,6884,6886,3,966,483,0,6885,6884,
        1,0,0,0,6885,6886,1,0,0,0,6886,7061,1,0,0,0,6887,6888,7,121,0,0,
        6888,6889,5,32,0,0,6889,6890,3,910,455,0,6890,6891,5,29,0,0,6891,
        6892,5,278,0,0,6892,6893,3,910,455,0,6893,6894,3,1012,506,0,6894,
        6895,5,33,0,0,6895,7061,1,0,0,0,6896,6897,5,217,0,0,6897,6898,5,
        32,0,0,6898,6899,3,1012,506,0,6899,6900,5,235,0,0,6900,6901,3,910,
        455,0,6901,6902,5,33,0,0,6902,7061,1,0,0,0,6903,6904,5,245,0,0,6904,
        6905,5,32,0,0,6905,6906,3,974,487,0,6906,6907,5,29,0,0,6907,6908,
        3,910,455,0,6908,6909,5,33,0,0,6909,7061,1,0,0,0,6910,6911,4,480,
        94,0,6911,6912,5,808,0,0,6912,6913,5,32,0,0,6913,6916,3,910,455,
        0,6914,6915,5,29,0,0,6915,6917,3,910,455,0,6916,6914,1,0,0,0,6916,
        6917,1,0,0,0,6917,6918,1,0,0,0,6918,6919,5,33,0,0,6919,7061,1,0,
        0,0,6920,6922,5,391,0,0,6921,6923,3,966,483,0,6922,6921,1,0,0,0,
        6922,6923,1,0,0,0,6923,7061,1,0,0,0,6924,6925,5,432,0,0,6925,6926,
        5,32,0,0,6926,6927,3,920,460,0,6927,6928,5,282,0,0,6928,6929,3,910,
        455,0,6929,6930,5,33,0,0,6930,7061,1,0,0,0,6931,7061,3,978,489,0,
        6932,6934,5,579,0,0,6933,6935,3,966,483,0,6934,6933,1,0,0,0,6934,
        6935,1,0,0,0,6935,7061,1,0,0,0,6936,6937,7,122,0,0,6937,6938,5,32,
        0,0,6938,6939,3,1014,507,0,6939,6940,5,29,0,0,6940,6941,3,910,455,
        0,6941,6942,5,29,0,0,6942,6943,3,910,455,0,6943,6944,5,33,0,0,6944,
        7061,1,0,0,0,6945,6947,5,631,0,0,6946,6948,3,1474,737,0,6947,6946,
        1,0,0,0,6947,6948,1,0,0,0,6948,7061,1,0,0,0,6949,6951,5,633,0,0,
        6950,6952,3,966,483,0,6951,6950,1,0,0,0,6951,6952,1,0,0,0,6952,7061,
        1,0,0,0,6953,6955,5,632,0,0,6954,6956,3,966,483,0,6955,6954,1,0,
        0,0,6955,6956,1,0,0,0,6956,7061,1,0,0,0,6957,6958,5,65,0,0,6958,
        7061,3,1018,509,0,6959,6960,5,102,0,0,6960,7061,3,1018,509,0,6961,
        6962,5,110,0,0,6962,7061,3,1016,508,0,6963,6964,5,113,0,0,6964,7061,
        3,1018,509,0,6965,6966,5,150,0,0,6966,7061,3,1474,737,0,6967,6968,
        5,263,0,0,6968,6969,5,32,0,0,6969,6970,3,910,455,0,6970,6971,5,29,
        0,0,6971,6972,3,910,455,0,6972,6973,5,29,0,0,6973,6974,3,910,455,
        0,6974,6975,5,33,0,0,6975,7061,1,0,0,0,6976,6977,5,233,0,0,6977,
        6978,5,32,0,0,6978,6979,3,910,455,0,6979,6980,5,29,0,0,6980,6983,
        3,910,455,0,6981,6982,5,29,0,0,6982,6984,3,910,455,0,6983,6981,1,
        0,0,0,6983,6984,1,0,0,0,6984,6985,1,0,0,0,6985,6986,5,33,0,0,6986,
        7061,1,0,0,0,6987,6988,5,361,0,0,6988,7061,3,1018,509,0,6989,6990,
        5,372,0,0,6990,6991,5,32,0,0,6991,6992,3,910,455,0,6992,6993,5,29,
        0,0,6993,6994,3,910,455,0,6994,6995,5,33,0,0,6995,7061,1,0,0,0,6996,
        6997,4,480,95,0,6997,6998,5,424,0,0,6998,7061,3,1018,509,0,6999,
        7000,5,447,0,0,7000,7061,3,1018,509,0,7001,7002,5,474,0,0,7002,7003,
        5,32,0,0,7003,7004,3,910,455,0,7004,7005,5,29,0,0,7005,7006,3,910,
        455,0,7006,7007,5,33,0,0,7007,7061,1,0,0,0,7008,7009,5,475,0,0,7009,
        7010,5,32,0,0,7010,7011,3,910,455,0,7011,7012,5,29,0,0,7012,7013,
        3,910,455,0,7013,7014,5,29,0,0,7014,7015,3,910,455,0,7015,7016,5,
        33,0,0,7016,7061,1,0,0,0,7017,7018,5,493,0,0,7018,7061,3,1018,509,
        0,7019,7020,5,501,0,0,7020,7061,3,1474,737,0,7021,7022,5,606,0,0,
        7022,7023,5,32,0,0,7023,7024,3,910,455,0,7024,7025,5,29,0,0,7025,
        7026,3,910,455,0,7026,7027,5,33,0,0,7027,7061,1,0,0,0,7028,7029,
        5,648,0,0,7029,7030,5,32,0,0,7030,7033,3,910,455,0,7031,7032,5,29,
        0,0,7032,7034,3,910,455,0,7033,7031,1,0,0,0,7033,7034,1,0,0,0,7034,
        7035,1,0,0,0,7035,7036,5,33,0,0,7036,7061,1,0,0,0,7037,7038,5,649,
        0,0,7038,7039,5,32,0,0,7039,7055,3,910,455,0,7040,7041,5,63,0,0,
        7041,7042,5,103,0,0,7042,7044,3,1182,591,0,7043,7040,1,0,0,0,7043,
        7044,1,0,0,0,7044,7056,1,0,0,0,7045,7046,5,63,0,0,7046,7047,5,77,
        0,0,7047,7056,3,1182,591,0,7048,7049,5,29,0,0,7049,7050,3,1418,709,
        0,7050,7051,5,29,0,0,7051,7052,3,1418,709,0,7052,7053,5,29,0,0,7053,
        7054,3,1418,709,0,7054,7056,1,0,0,0,7055,7043,1,0,0,0,7055,7045,
        1,0,0,0,7055,7048,1,0,0,0,7056,7057,1,0,0,0,7057,7058,5,33,0,0,7058,
        7061,1,0,0,0,7059,7061,3,964,482,0,7060,6777,1,0,0,0,7060,6786,1,
        0,0,0,7060,6790,1,0,0,0,7060,6792,1,0,0,0,7060,6794,1,0,0,0,7060,
        6796,1,0,0,0,7060,6807,1,0,0,0,7060,6818,1,0,0,0,7060,6829,1,0,0,
        0,7060,6836,1,0,0,0,7060,6838,1,0,0,0,7060,6840,1,0,0,0,7060,6847,
        1,0,0,0,7060,6849,1,0,0,0,7060,6851,1,0,0,0,7060,6860,1,0,0,0,7060,
        6861,1,0,0,0,7060,6862,1,0,0,0,7060,6864,1,0,0,0,7060,6866,1,0,0,
        0,7060,6879,1,0,0,0,7060,6883,1,0,0,0,7060,6887,1,0,0,0,7060,6896,
        1,0,0,0,7060,6903,1,0,0,0,7060,6910,1,0,0,0,7060,6920,1,0,0,0,7060,
        6924,1,0,0,0,7060,6931,1,0,0,0,7060,6932,1,0,0,0,7060,6936,1,0,0,
        0,7060,6945,1,0,0,0,7060,6949,1,0,0,0,7060,6953,1,0,0,0,7060,6957,
        1,0,0,0,7060,6959,1,0,0,0,7060,6961,1,0,0,0,7060,6963,1,0,0,0,7060,
        6965,1,0,0,0,7060,6967,1,0,0,0,7060,6976,1,0,0,0,7060,6987,1,0,0,
        0,7060,6989,1,0,0,0,7060,6996,1,0,0,0,7060,6999,1,0,0,0,7060,7001,
        1,0,0,0,7060,7008,1,0,0,0,7060,7017,1,0,0,0,7060,7019,1,0,0,0,7060,
        7021,1,0,0,0,7060,7028,1,0,0,0,7060,7037,1,0,0,0,7060,7059,1,0,0,
        0,7061,961,1,0,0,0,7062,7063,5,753,0,0,7063,7064,3,1002,501,0,7064,
        963,1,0,0,0,7065,7066,5,243,0,0,7066,7068,5,32,0,0,7067,7069,3,1004,
        502,0,7068,7067,1,0,0,0,7068,7069,1,0,0,0,7069,7070,1,0,0,0,7070,
        7089,5,33,0,0,7071,7072,5,309,0,0,7072,7089,3,1016,508,0,7073,7074,
        5,374,0,0,7074,7089,3,1016,508,0,7075,7076,5,375,0,0,7076,7089,3,
        1016,508,0,7077,7078,5,376,0,0,7078,7089,3,1016,508,0,7079,7080,
        5,429,0,0,7080,7081,5,32,0,0,7081,7082,3,910,455,0,7082,7083,5,29,
        0,0,7083,7084,3,910,455,0,7084,7085,5,33,0,0,7085,7089,1,0,0,0,7086,
        7087,5,430,0,0,7087,7089,3,1016,508,0,7088,7065,1,0,0,0,7088,7071,
        1,0,0,0,7088,7073,1,0,0,0,7088,7075,1,0,0,0,7088,7077,1,0,0,0,7088,
        7079,1,0,0,0,7088,7086,1,0,0,0,7089,965,1,0,0,0,7090,7092,5,32,0,
        0,7091,7093,3,968,484,0,7092,7091,1,0,0,0,7092,7093,1,0,0,0,7093,
        7094,1,0,0,0,7094,7095,5,33,0,0,7095,967,1,0,0,0,7096,7097,5,3,0,
        0,7097,969,1,0,0,0,7098,7111,5,304,0,0,7099,7100,3,1420,710,0,7100,
        7101,5,15,0,0,7101,7102,3,1420,710,0,7102,7112,1,0,0,0,7103,7108,
        3,972,486,0,7104,7105,5,29,0,0,7105,7107,3,972,486,0,7106,7104,1,
        0,0,0,7107,7110,1,0,0,0,7108,7106,1,0,0,0,7108,7109,1,0,0,0,7109,
        7112,1,0,0,0,7110,7108,1,0,0,0,7111,7099,1,0,0,0,7111,7103,1,0,0,
        0,7112,971,1,0,0,0,7113,7119,3,1420,710,0,7114,7116,7,35,0,0,7115,
        7117,5,493,0,0,7116,7115,1,0,0,0,7116,7117,1,0,0,0,7117,7120,1,0,
        0,0,7118,7120,5,493,0,0,7119,7114,1,0,0,0,7119,7118,1,0,0,0,7119,
        7120,1,0,0,0,7120,973,1,0,0,0,7121,7122,7,123,0,0,7122,975,1,0,0,
        0,7123,7124,5,604,0,0,7124,7148,5,32,0,0,7125,7128,3,910,455,0,7126,
        7127,5,235,0,0,7127,7129,3,910,455,0,7128,7126,1,0,0,0,7128,7129,
        1,0,0,0,7129,7149,1,0,0,0,7130,7132,5,299,0,0,7131,7133,3,910,455,
        0,7132,7131,1,0,0,0,7132,7133,1,0,0,0,7133,7134,1,0,0,0,7134,7135,
        5,235,0,0,7135,7149,3,910,455,0,7136,7138,5,600,0,0,7137,7139,3,
        910,455,0,7138,7137,1,0,0,0,7138,7139,1,0,0,0,7139,7140,1,0,0,0,
        7140,7141,5,235,0,0,7141,7149,3,910,455,0,7142,7144,5,87,0,0,7143,
        7145,3,910,455,0,7144,7143,1,0,0,0,7144,7145,1,0,0,0,7145,7146,1,
        0,0,0,7146,7147,5,235,0,0,7147,7149,3,910,455,0,7148,7125,1,0,0,
        0,7148,7130,1,0,0,0,7148,7136,1,0,0,0,7148,7142,1,0,0,0,7149,7150,
        1,0,0,0,7150,7151,5,33,0,0,7151,977,1,0,0,0,7152,7153,5,573,0,0,
        7153,7154,5,32,0,0,7154,7167,3,910,455,0,7155,7156,5,29,0,0,7156,
        7159,3,910,455,0,7157,7158,5,29,0,0,7158,7160,3,910,455,0,7159,7157,
        1,0,0,0,7159,7160,1,0,0,0,7160,7168,1,0,0,0,7161,7162,5,235,0,0,
        7162,7165,3,910,455,0,7163,7164,5,232,0,0,7164,7166,3,910,455,0,
        7165,7163,1,0,0,0,7165,7166,1,0,0,0,7166,7168,1,0,0,0,7167,7155,
        1,0,0,0,7167,7161,1,0,0,0,7168,7169,1,0,0,0,7169,7170,5,33,0,0,7170,
        979,1,0,0,0,7171,7172,3,1404,702,0,7172,7174,5,32,0,0,7173,7175,
        3,982,491,0,7174,7173,1,0,0,0,7174,7175,1,0,0,0,7175,7176,1,0,0,
        0,7176,7177,5,33,0,0,7177,7186,1,0,0,0,7178,7179,3,1412,706,0,7179,
        7181,5,32,0,0,7180,7182,3,1004,502,0,7181,7180,1,0,0,0,7181,7182,
        1,0,0,0,7182,7183,1,0,0,0,7183,7184,5,33,0,0,7184,7186,1,0,0,0,7185,
        7171,1,0,0,0,7185,7178,1,0,0,0,7186,981,1,0,0,0,7187,7192,3,984,
        492,0,7188,7189,5,29,0,0,7189,7191,3,984,492,0,7190,7188,1,0,0,0,
        7191,7194,1,0,0,0,7192,7190,1,0,0,0,7192,7193,1,0,0,0,7193,983,1,
        0,0,0,7194,7192,1,0,0,0,7195,7197,3,910,455,0,7196,7198,3,388,194,
        0,7197,7196,1,0,0,0,7197,7198,1,0,0,0,7198,985,1,0,0,0,7199,7200,
        5,39,0,0,7200,7203,3,1466,733,0,7201,7203,5,40,0,0,7202,7199,1,0,
        0,0,7202,7201,1,0,0,0,7203,987,1,0,0,0,7204,7205,3,986,493,0,7205,
        7206,5,7,0,0,7206,7207,3,910,455,0,7207,989,1,0,0,0,7208,7215,3,
        986,493,0,7209,7211,5,41,0,0,7210,7212,3,1480,740,0,7211,7210,1,
        0,0,0,7211,7212,1,0,0,0,7212,7213,1,0,0,0,7213,7215,3,994,497,0,
        7214,7208,1,0,0,0,7214,7209,1,0,0,0,7215,991,1,0,0,0,7216,7218,3,
        1406,703,0,7217,7219,3,1416,708,0,7218,7217,1,0,0,0,7218,7219,1,
        0,0,0,7219,7226,1,0,0,0,7220,7221,4,496,96,0,7221,7223,3,1468,734,
        0,7222,7224,3,1416,708,0,7223,7222,1,0,0,0,7223,7224,1,0,0,0,7224,
        7226,1,0,0,0,7225,7216,1,0,0,0,7225,7220,1,0,0,0,7226,7230,1,0,0,
        0,7227,7228,5,166,0,0,7228,7230,3,1416,708,0,7229,7225,1,0,0,0,7229,
        7227,1,0,0,0,7230,993,1,0,0,0,7231,7233,3,1466,733,0,7232,7234,3,
        1416,708,0,7233,7232,1,0,0,0,7233,7234,1,0,0,0,7234,995,1,0,0,0,
        7235,7236,5,650,0,0,7236,7237,3,910,455,0,7237,997,1,0,0,0,7238,
        7239,5,591,0,0,7239,7240,3,910,455,0,7240,999,1,0,0,0,7241,7242,
        5,190,0,0,7242,7243,3,910,455,0,7243,1001,1,0,0,0,7244,7246,5,77,
        0,0,7245,7247,3,1172,586,0,7246,7245,1,0,0,0,7246,7247,1,0,0,0,7247,
        7293,1,0,0,0,7248,7250,5,103,0,0,7249,7251,3,1172,586,0,7250,7249,
        1,0,0,0,7250,7251,1,0,0,0,7251,7253,1,0,0,0,7252,7254,3,1176,588,
        0,7253,7252,1,0,0,0,7253,7254,1,0,0,0,7254,7293,1,0,0,0,7255,7257,
        3,1168,584,0,7256,7258,3,1172,586,0,7257,7256,1,0,0,0,7257,7258,
        1,0,0,0,7258,7293,1,0,0,0,7259,7261,5,524,0,0,7260,7262,5,280,0,
        0,7261,7260,1,0,0,0,7261,7262,1,0,0,0,7262,7293,1,0,0,0,7263,7265,
        5,621,0,0,7264,7266,5,280,0,0,7265,7264,1,0,0,0,7265,7266,1,0,0,
        0,7266,7293,1,0,0,0,7267,7293,5,157,0,0,7268,7269,4,501,97,0,7269,
        7293,5,664,0,0,7270,7272,5,595,0,0,7271,7273,3,1184,592,0,7272,7271,
        1,0,0,0,7272,7273,1,0,0,0,7273,7293,1,0,0,0,7274,7276,5,154,0,0,
        7275,7277,3,1184,592,0,7276,7275,1,0,0,0,7276,7277,1,0,0,0,7277,
        7293,1,0,0,0,7278,7280,5,164,0,0,7279,7281,3,1460,730,0,7280,7279,
        1,0,0,0,7280,7281,1,0,0,0,7281,7293,1,0,0,0,7282,7293,5,292,0,0,
        7283,7284,4,501,98,0,7284,7293,3,1170,585,0,7285,7286,4,501,99,0,
        7286,7288,5,227,0,0,7287,7289,3,1462,731,0,7288,7287,1,0,0,0,7288,
        7289,1,0,0,0,7289,7293,1,0,0,0,7290,7291,4,501,100,0,7291,7293,7,
        124,0,0,7292,7244,1,0,0,0,7292,7248,1,0,0,0,7292,7255,1,0,0,0,7292,
        7259,1,0,0,0,7292,7263,1,0,0,0,7292,7267,1,0,0,0,7292,7268,1,0,0,
        0,7292,7270,1,0,0,0,7292,7274,1,0,0,0,7292,7278,1,0,0,0,7292,7282,
        1,0,0,0,7292,7283,1,0,0,0,7292,7285,1,0,0,0,7292,7290,1,0,0,0,7293,
        1003,1,0,0,0,7294,7299,3,910,455,0,7295,7296,5,29,0,0,7296,7298,
        3,910,455,0,7297,7295,1,0,0,0,7298,7301,1,0,0,0,7299,7297,1,0,0,
        0,7299,7300,1,0,0,0,7300,1005,1,0,0,0,7301,7299,1,0,0,0,7302,7303,
        5,103,0,0,7303,7306,5,519,0,0,7304,7306,5,102,0,0,7305,7302,1,0,
        0,0,7305,7304,1,0,0,0,7306,1007,1,0,0,0,7307,7308,7,125,0,0,7308,
        1009,1,0,0,0,7309,7310,7,126,0,0,7310,1011,1,0,0,0,7311,7314,3,1014,
        507,0,7312,7314,7,127,0,0,7313,7311,1,0,0,0,7313,7312,1,0,0,0,7314,
        1013,1,0,0,0,7315,7316,7,128,0,0,7316,1015,1,0,0,0,7317,7318,5,32,
        0,0,7318,7319,3,1004,502,0,7319,7320,5,33,0,0,7320,1017,1,0,0,0,
        7321,7322,5,32,0,0,7322,7323,3,910,455,0,7323,7324,5,33,0,0,7324,
        1019,1,0,0,0,7325,7326,5,32,0,0,7326,7327,3,922,461,0,7327,7328,
        5,33,0,0,7328,1021,1,0,0,0,7329,7334,3,1024,512,0,7330,7331,5,29,
        0,0,7331,7333,3,1024,512,0,7332,7330,1,0,0,0,7333,7336,1,0,0,0,7334,
        7332,1,0,0,0,7334,7335,1,0,0,0,7335,1023,1,0,0,0,7336,7334,1,0,0,
        0,7337,7339,3,910,455,0,7338,7340,3,362,181,0,7339,7338,1,0,0,0,
        7339,7340,1,0,0,0,7340,1025,1,0,0,0,7341,7346,3,1028,514,0,7342,
        7343,5,29,0,0,7343,7345,3,1028,514,0,7344,7342,1,0,0,0,7345,7348,
        1,0,0,0,7346,7344,1,0,0,0,7346,7347,1,0,0,0,7347,1027,1,0,0,0,7348,
        7346,1,0,0,0,7349,7350,3,910,455,0,7350,1029,1,0,0,0,7351,7352,5,
        232,0,0,7352,7353,5,101,0,0,7353,7354,3,1446,723,0,7354,1031,1,0,
        0,0,7355,7369,3,2,1,0,7356,7369,3,1034,517,0,7357,7369,3,1036,518,
        0,7358,7369,3,1044,522,0,7359,7369,3,1048,524,0,7360,7369,3,1050,
        525,0,7361,7369,3,1056,528,0,7362,7369,3,1058,529,0,7363,7369,3,
        1086,543,0,7364,7369,3,1084,542,0,7365,7369,3,1104,552,0,7366,7369,
        3,1108,554,0,7367,7369,3,1106,553,0,7368,7355,1,0,0,0,7368,7356,
        1,0,0,0,7368,7357,1,0,0,0,7368,7358,1,0,0,0,7368,7359,1,0,0,0,7368,
        7360,1,0,0,0,7368,7361,1,0,0,0,7368,7362,1,0,0,0,7368,7363,1,0,0,
        0,7368,7364,1,0,0,0,7368,7365,1,0,0,0,7368,7366,1,0,0,0,7368,7367,
        1,0,0,0,7369,1033,1,0,0,0,7370,7371,5,492,0,0,7371,7372,3,910,455,
        0,7372,1035,1,0,0,0,7373,7374,5,263,0,0,7374,7375,3,1038,519,0,7375,
        7376,5,195,0,0,7376,7377,5,263,0,0,7377,1037,1,0,0,0,7378,7379,3,
        910,455,0,7379,7384,3,1040,520,0,7380,7381,5,191,0,0,7381,7385,3,
        1038,519,0,7382,7383,5,190,0,0,7383,7385,3,1042,521,0,7384,7380,
        1,0,0,0,7384,7382,1,0,0,0,7384,7385,1,0,0,0,7385,1039,1,0,0,0,7386,
        7387,5,591,0,0,7387,7388,3,1042,521,0,7388,1041,1,0,0,0,7389,7390,
        3,1032,516,0,7390,7391,5,30,0,0,7391,7393,1,0,0,0,7392,7389,1,0,
        0,0,7393,7394,1,0,0,0,7394,7392,1,0,0,0,7394,7395,1,0,0,0,7395,1043,
        1,0,0,0,7396,7398,5,95,0,0,7397,7399,3,910,455,0,7398,7397,1,0,0,
        0,7398,7399,1,0,0,0,7399,7403,1,0,0,0,7400,7401,3,996,498,0,7401,
        7402,3,1040,520,0,7402,7404,1,0,0,0,7403,7400,1,0,0,0,7404,7405,
        1,0,0,0,7405,7403,1,0,0,0,7405,7406,1,0,0,0,7406,7408,1,0,0,0,7407,
        7409,3,1046,523,0,7408,7407,1,0,0,0,7408,7409,1,0,0,0,7409,7410,
        1,0,0,0,7410,7411,5,195,0,0,7411,7412,5,95,0,0,7412,1045,1,0,0,0,
        7413,7414,5,190,0,0,7414,7415,3,1042,521,0,7415,1047,1,0,0,0,7416,
        7417,3,1052,526,0,7417,7419,3,1054,527,0,7418,7420,3,1392,696,0,
        7419,7418,1,0,0,0,7419,7420,1,0,0,0,7420,1049,1,0,0,0,7421,7422,
        3,1054,527,0,7422,1051,1,0,0,0,7423,7424,3,1390,695,0,7424,7425,
        5,31,0,0,7425,1053,1,0,0,0,7426,7428,5,74,0,0,7427,7429,3,1066,533,
        0,7428,7427,1,0,0,0,7428,7429,1,0,0,0,7429,7431,1,0,0,0,7430,7432,
        3,1042,521,0,7431,7430,1,0,0,0,7431,7432,1,0,0,0,7432,7433,1,0,0,
        0,7433,7434,5,195,0,0,7434,1055,1,0,0,0,7435,7436,3,1052,526,0,7436,
        7438,3,1058,529,0,7437,7439,3,1392,696,0,7438,7437,1,0,0,0,7438,
        7439,1,0,0,0,7439,1057,1,0,0,0,7440,7444,3,1060,530,0,7441,7444,
        3,1062,531,0,7442,7444,3,1064,532,0,7443,7440,1,0,0,0,7443,7441,
        1,0,0,0,7443,7442,1,0,0,0,7444,1059,1,0,0,0,7445,7446,5,320,0,0,
        7446,7447,3,1042,521,0,7447,7448,5,195,0,0,7448,7449,5,320,0,0,7449,
        1061,1,0,0,0,7450,7451,5,652,0,0,7451,7452,3,910,455,0,7452,7453,
        5,183,0,0,7453,7454,3,1042,521,0,7454,7455,5,195,0,0,7455,7456,5,
        652,0,0,7456,1063,1,0,0,0,7457,7458,5,474,0,0,7458,7459,3,1042,521,
        0,7459,7460,5,622,0,0,7460,7461,3,910,455,0,7461,7462,5,195,0,0,
        7462,7463,5,474,0,0,7463,1065,1,0,0,0,7464,7465,3,1068,534,0,7465,
        7466,5,30,0,0,7466,7468,1,0,0,0,7467,7464,1,0,0,0,7468,7469,1,0,
        0,0,7469,7467,1,0,0,0,7469,7470,1,0,0,0,7470,1067,1,0,0,0,7471,7476,
        3,1070,535,0,7472,7476,3,1072,536,0,7473,7476,3,1078,539,0,7474,
        7476,3,1082,541,0,7475,7471,1,0,0,0,7475,7472,1,0,0,0,7475,7473,
        1,0,0,0,7475,7474,1,0,0,0,7476,1069,1,0,0,0,7477,7478,5,165,0,0,
        7478,7479,3,1408,704,0,7479,7481,3,1166,583,0,7480,7482,3,1248,624,
        0,7481,7480,1,0,0,0,7481,7482,1,0,0,0,7482,7485,1,0,0,0,7483,7484,
        5,166,0,0,7484,7486,3,910,455,0,7485,7483,1,0,0,0,7485,7486,1,0,
        0,0,7486,1071,1,0,0,0,7487,7488,5,165,0,0,7488,7489,3,1406,703,0,
        7489,7490,5,126,0,0,7490,7491,5,232,0,0,7491,7492,3,1074,537,0,7492,
        1073,1,0,0,0,7493,7496,3,1418,709,0,7494,7496,3,1076,538,0,7495,
        7493,1,0,0,0,7495,7494,1,0,0,0,7496,1075,1,0,0,0,7497,7499,5,537,
        0,0,7498,7500,5,636,0,0,7499,7498,1,0,0,0,7499,7500,1,0,0,0,7500,
        7501,1,0,0,0,7501,7502,3,1444,722,0,7502,1077,1,0,0,0,7503,7504,
        5,165,0,0,7504,7505,7,129,0,0,7505,7506,5,251,0,0,7506,7507,5,232,
        0,0,7507,7512,3,1080,540,0,7508,7509,5,29,0,0,7509,7511,3,1080,540,
        0,7510,7508,1,0,0,0,7511,7514,1,0,0,0,7512,7510,1,0,0,0,7512,7513,
        1,0,0,0,7513,7515,1,0,0,0,7514,7512,1,0,0,0,7515,7516,3,1032,516,
        0,7516,1079,1,0,0,0,7517,7525,3,1074,537,0,7518,7525,3,1406,703,
        0,7519,7525,5,538,0,0,7520,7521,3,1008,504,0,7521,7522,5,234,0,0,
        7522,7525,1,0,0,0,7523,7525,5,536,0,0,7524,7517,1,0,0,0,7524,7518,
        1,0,0,0,7524,7519,1,0,0,0,7524,7520,1,0,0,0,7524,7523,1,0,0,0,7525,
        1081,1,0,0,0,7526,7527,5,165,0,0,7527,7528,3,1406,703,0,7528,7529,
        5,147,0,0,7529,7530,5,232,0,0,7530,7531,3,296,148,0,7531,1083,1,
        0,0,0,7532,7533,5,290,0,0,7533,7534,3,1392,696,0,7534,1085,1,0,0,
        0,7535,7536,5,301,0,0,7536,7537,3,1392,696,0,7537,1087,1,0,0,0,7538,
        7540,5,239,0,0,7539,7541,7,130,0,0,7540,7539,1,0,0,0,7540,7541,1,
        0,0,0,7541,7542,1,0,0,0,7542,7561,5,175,0,0,7543,7548,3,1092,546,
        0,7544,7545,5,29,0,0,7545,7547,3,1092,546,0,7546,7544,1,0,0,0,7547,
        7550,1,0,0,0,7548,7546,1,0,0,0,7548,7549,1,0,0,0,7549,7562,1,0,0,
        0,7550,7548,1,0,0,0,7551,7552,5,126,0,0,7552,7553,3,1090,545,0,7553,
        7558,3,1094,547,0,7554,7555,5,29,0,0,7555,7557,3,1094,547,0,7556,
        7554,1,0,0,0,7557,7560,1,0,0,0,7558,7556,1,0,0,0,7558,7559,1,0,0,
        0,7559,7562,1,0,0,0,7560,7558,1,0,0,0,7561,7543,1,0,0,0,7561,7551,
        1,0,0,0,7562,1089,1,0,0,0,7563,7567,3,1430,715,0,7564,7567,3,990,
        495,0,7565,7567,3,1412,706,0,7566,7563,1,0,0,0,7566,7564,1,0,0,0,
        7566,7565,1,0,0,0,7567,1091,1,0,0,0,7568,7571,3,986,493,0,7569,7571,
        3,1406,703,0,7570,7568,1,0,0,0,7570,7569,1,0,0,0,7571,7572,1,0,0,
        0,7572,7573,5,6,0,0,7573,7574,7,131,0,0,7574,1093,1,0,0,0,7575,7578,
        3,986,493,0,7576,7578,3,1406,703,0,7577,7575,1,0,0,0,7577,7576,1,
        0,0,0,7578,7579,1,0,0,0,7579,7582,5,6,0,0,7580,7583,3,1096,548,0,
        7581,7583,5,490,0,0,7582,7580,1,0,0,0,7582,7581,1,0,0,0,7583,1095,
        1,0,0,0,7584,7585,7,132,0,0,7585,1097,1,0,0,0,7586,7589,5,523,0,
        0,7587,7590,3,1406,703,0,7588,7590,3,1076,538,0,7589,7587,1,0,0,
        0,7589,7588,1,0,0,0,7590,7600,1,0,0,0,7591,7592,5,519,0,0,7592,7597,
        3,1102,551,0,7593,7594,5,29,0,0,7594,7596,3,1102,551,0,7595,7593,
        1,0,0,0,7596,7599,1,0,0,0,7597,7595,1,0,0,0,7597,7598,1,0,0,0,7598,
        7601,1,0,0,0,7599,7597,1,0,0,0,7600,7591,1,0,0,0,7600,7601,1,0,0,
        0,7601,1099,1,0,0,0,7602,7605,5,486,0,0,7603,7606,3,1406,703,0,7604,
        7606,3,1076,538,0,7605,7603,1,0,0,0,7605,7604,1,0,0,0,7605,7606,
        1,0,0,0,7606,7616,1,0,0,0,7607,7608,5,519,0,0,7608,7613,3,1102,551,
        0,7609,7610,5,29,0,0,7610,7612,3,1102,551,0,7611,7609,1,0,0,0,7612,
        7615,1,0,0,0,7613,7611,1,0,0,0,7613,7614,1,0,0,0,7614,7617,1,0,0,
        0,7615,7613,1,0,0,0,7616,7607,1,0,0,0,7616,7617,1,0,0,0,7617,1101,
        1,0,0,0,7618,7619,3,1096,548,0,7619,7620,5,6,0,0,7620,7621,3,1090,
        545,0,7621,1103,1,0,0,0,7622,7623,5,405,0,0,7623,7624,3,1406,703,
        0,7624,1105,1,0,0,0,7625,7626,5,109,0,0,7626,7627,3,1406,703,0,7627,
        1107,1,0,0,0,7628,7633,5,221,0,0,7629,7631,5,387,0,0,7630,7629,1,
        0,0,0,7630,7631,1,0,0,0,7631,7632,1,0,0,0,7632,7634,5,235,0,0,7633,
        7630,1,0,0,0,7633,7634,1,0,0,0,7634,7635,1,0,0,0,7635,7636,3,1406,
        703,0,7636,7637,5,279,0,0,7637,7638,3,1408,704,0,7638,1109,1,0,0,
        0,7639,7640,5,67,0,0,7640,7653,3,910,455,0,7641,7642,5,206,0,0,7642,
        7643,3,910,455,0,7643,7646,3,1012,506,0,7644,7645,5,552,0,0,7645,
        7647,3,910,455,0,7646,7644,1,0,0,0,7646,7647,1,0,0,0,7647,7650,1,
        0,0,0,7648,7649,5,196,0,0,7649,7651,3,910,455,0,7650,7648,1,0,0,
        0,7650,7651,1,0,0,0,7651,7653,1,0,0,0,7652,7639,1,0,0,0,7652,7641,
        1,0,0,0,7653,1111,1,0,0,0,7654,7655,3,1320,660,0,7655,7657,3,1124,
        562,0,7656,7658,3,1114,557,0,7657,7656,1,0,0,0,7657,7658,1,0,0,0,
        7658,1113,1,0,0,0,7659,7660,4,557,101,0,7660,7663,3,1116,558,0,7661,
        7663,3,1138,569,0,7662,7659,1,0,0,0,7662,7661,1,0,0,0,7663,1115,
        1,0,0,0,7664,7665,5,105,0,0,7665,7666,3,1018,509,0,7666,1117,1,0,
        0,0,7667,7669,4,559,102,0,7668,7670,5,390,0,0,7669,7668,1,0,0,0,
        7669,7670,1,0,0,0,7670,7671,1,0,0,0,7671,7672,5,738,0,0,7672,1119,
        1,0,0,0,7673,7675,7,41,0,0,7674,7676,3,120,60,0,7675,7674,1,0,0,
        0,7675,7676,1,0,0,0,7676,7677,1,0,0,0,7677,7681,3,1146,573,0,7678,
        7680,3,1152,576,0,7679,7678,1,0,0,0,7680,7683,1,0,0,0,7681,7679,
        1,0,0,0,7681,7682,1,0,0,0,7682,7748,1,0,0,0,7683,7681,1,0,0,0,7684,
        7686,5,237,0,0,7685,7687,3,440,220,0,7686,7685,1,0,0,0,7686,7687,
        1,0,0,0,7687,7689,1,0,0,0,7688,7690,3,1330,665,0,7689,7688,1,0,0,
        0,7689,7690,1,0,0,0,7690,7691,1,0,0,0,7691,7695,3,1146,573,0,7692,
        7694,3,1160,580,0,7693,7692,1,0,0,0,7694,7697,1,0,0,0,7695,7693,
        1,0,0,0,7695,7696,1,0,0,0,7696,7748,1,0,0,0,7697,7695,1,0,0,0,7698,
        7700,5,534,0,0,7699,7701,3,440,220,0,7700,7699,1,0,0,0,7700,7701,
        1,0,0,0,7701,7703,1,0,0,0,7702,7704,3,1330,665,0,7703,7702,1,0,0,
        0,7703,7704,1,0,0,0,7704,7705,1,0,0,0,7705,7709,3,1146,573,0,7706,
        7708,3,1162,581,0,7707,7706,1,0,0,0,7708,7711,1,0,0,0,7709,7707,
        1,0,0,0,7709,7710,1,0,0,0,7710,7748,1,0,0,0,7711,7709,1,0,0,0,7712,
        7714,3,1122,561,0,7713,7712,1,0,0,0,7713,7714,1,0,0,0,7714,7745,
        1,0,0,0,7715,7716,5,438,0,0,7716,7722,5,295,0,0,7717,7719,5,618,
        0,0,7718,7720,3,440,220,0,7719,7718,1,0,0,0,7719,7720,1,0,0,0,7720,
        7722,1,0,0,0,7721,7715,1,0,0,0,7721,7717,1,0,0,0,7722,7724,1,0,0,
        0,7723,7725,3,120,60,0,7724,7723,1,0,0,0,7724,7725,1,0,0,0,7725,
        7726,1,0,0,0,7726,7730,3,1146,573,0,7727,7729,3,1152,576,0,7728,
        7727,1,0,0,0,7729,7732,1,0,0,0,7730,7728,1,0,0,0,7730,7731,1,0,0,
        0,7731,7746,1,0,0,0,7732,7730,1,0,0,0,7733,7734,5,231,0,0,7734,7736,
        5,295,0,0,7735,7737,3,1330,665,0,7736,7735,1,0,0,0,7736,7737,1,0,
        0,0,7737,7738,1,0,0,0,7738,7739,3,1142,571,0,7739,7740,3,1138,569,
        0,7740,7746,1,0,0,0,7741,7743,3,1116,558,0,7742,7744,3,1118,559,
        0,7743,7742,1,0,0,0,7743,7744,1,0,0,0,7744,7746,1,0,0,0,7745,7721,
        1,0,0,0,7745,7733,1,0,0,0,7745,7741,1,0,0,0,7746,7748,1,0,0,0,7747,
        7673,1,0,0,0,7747,7684,1,0,0,0,7747,7698,1,0,0,0,7747,7713,1,0,0,
        0,7748,1121,1,0,0,0,7749,7751,5,129,0,0,7750,7752,3,1406,703,0,7751,
        7750,1,0,0,0,7751,7752,1,0,0,0,7752,1123,1,0,0,0,7753,7778,3,1166,
        583,0,7754,7756,3,1126,563,0,7755,7754,1,0,0,0,7756,7759,1,0,0,0,
        7757,7755,1,0,0,0,7757,7758,1,0,0,0,7758,7779,1,0,0,0,7759,7757,
        1,0,0,0,7760,7762,3,1248,624,0,7761,7760,1,0,0,0,7761,7762,1,0,0,
        0,7762,7765,1,0,0,0,7763,7764,5,241,0,0,7764,7766,5,59,0,0,7765,
        7763,1,0,0,0,7765,7766,1,0,0,0,7766,7767,1,0,0,0,7767,7768,5,63,
        0,0,7768,7770,3,1018,509,0,7769,7771,7,133,0,0,7770,7769,1,0,0,0,
        7770,7771,1,0,0,0,7771,7775,1,0,0,0,7772,7774,3,1126,563,0,7773,
        7772,1,0,0,0,7774,7777,1,0,0,0,7775,7773,1,0,0,0,7775,7776,1,0,0,
        0,7776,7779,1,0,0,0,7777,7775,1,0,0,0,7778,7757,1,0,0,0,7778,7761,
        1,0,0,0,7779,1125,1,0,0,0,7780,7782,5,390,0,0,7781,7780,1,0,0,0,
        7781,7782,1,0,0,0,7782,7783,1,0,0,0,7783,7842,3,1454,727,0,7784,
        7785,4,563,103,0,7785,7786,5,390,0,0,7786,7842,5,728,0,0,7787,7791,
        5,166,0,0,7788,7792,3,1134,567,0,7789,7790,4,563,104,0,7790,7792,
        3,1018,509,0,7791,7788,1,0,0,0,7791,7789,1,0,0,0,7792,7842,1,0,0,
        0,7793,7794,5,401,0,0,7794,7795,5,623,0,0,7795,7797,5,391,0,0,7796,
        7798,3,966,483,0,7797,7796,1,0,0,0,7797,7798,1,0,0,0,7798,7842,1,
        0,0,0,7799,7842,5,69,0,0,7800,7801,5,515,0,0,7801,7802,5,166,0,0,
        7802,7842,5,636,0,0,7803,7805,5,438,0,0,7804,7803,1,0,0,0,7804,7805,
        1,0,0,0,7805,7806,1,0,0,0,7806,7842,5,295,0,0,7807,7809,5,618,0,
        0,7808,7810,5,295,0,0,7809,7808,1,0,0,0,7809,7810,1,0,0,0,7810,7842,
        1,0,0,0,7811,7812,5,118,0,0,7812,7842,3,1444,722,0,7813,7842,3,1248,
        624,0,7814,7815,5,117,0,0,7815,7842,3,1128,564,0,7816,7817,5,563,
        0,0,7817,7842,3,1130,565,0,7818,7819,5,715,0,0,7819,7842,3,1424,
        712,0,7820,7822,4,563,105,0,7821,7823,3,1122,561,0,7822,7821,1,0,
        0,0,7822,7823,1,0,0,0,7823,7824,1,0,0,0,7824,7842,3,1116,558,0,7825,
        7826,4,563,106,0,7826,7842,3,1118,559,0,7827,7828,4,563,107,0,7828,
        7830,5,757,0,0,7829,7831,5,6,0,0,7830,7829,1,0,0,0,7830,7831,1,0,
        0,0,7831,7832,1,0,0,0,7832,7842,3,1484,742,0,7833,7834,4,563,108,
        0,7834,7836,5,758,0,0,7835,7837,5,6,0,0,7836,7835,1,0,0,0,7836,7837,
        1,0,0,0,7837,7838,1,0,0,0,7838,7842,3,1484,742,0,7839,7840,4,563,
        109,0,7840,7842,3,1156,578,0,7841,7781,1,0,0,0,7841,7784,1,0,0,0,
        7841,7787,1,0,0,0,7841,7793,1,0,0,0,7841,7799,1,0,0,0,7841,7800,
        1,0,0,0,7841,7804,1,0,0,0,7841,7807,1,0,0,0,7841,7811,1,0,0,0,7841,
        7813,1,0,0,0,7841,7814,1,0,0,0,7841,7816,1,0,0,0,7841,7818,1,0,0,
        0,7841,7820,1,0,0,0,7841,7825,1,0,0,0,7841,7827,1,0,0,0,7841,7833,
        1,0,0,0,7841,7839,1,0,0,0,7842,1127,1,0,0,0,7843,7844,7,134,0,0,
        7844,1129,1,0,0,0,7845,7846,7,135,0,0,7846,1131,1,0,0,0,7847,7848,
        5,391,0,0,7848,7849,3,1186,593,0,7849,1133,1,0,0,0,7850,7853,3,1132,
        566,0,7851,7853,3,1428,714,0,7852,7850,1,0,0,0,7852,7851,1,0,0,0,
        7853,1135,1,0,0,0,7854,7856,5,618,0,0,7855,7857,5,295,0,0,7856,7855,
        1,0,0,0,7856,7857,1,0,0,0,7857,7869,1,0,0,0,7858,7859,5,118,0,0,
        7859,7869,3,1440,720,0,7860,7862,3,1008,504,0,7861,7860,1,0,0,0,
        7861,7862,1,0,0,0,7862,7863,1,0,0,0,7863,7869,5,395,0,0,7864,7866,
        5,438,0,0,7865,7864,1,0,0,0,7865,7866,1,0,0,0,7866,7867,1,0,0,0,
        7867,7869,5,295,0,0,7868,7854,1,0,0,0,7868,7858,1,0,0,0,7868,7861,
        1,0,0,0,7868,7865,1,0,0,0,7869,1137,1,0,0,0,7870,7871,5,460,0,0,
        7871,7873,3,1382,691,0,7872,7874,3,1410,705,0,7873,7872,1,0,0,0,
        7873,7874,1,0,0,0,7874,7877,1,0,0,0,7875,7876,5,345,0,0,7876,7878,
        7,136,0,0,7877,7875,1,0,0,0,7877,7878,1,0,0,0,7878,7895,1,0,0,0,
        7879,7880,5,401,0,0,7880,7881,5,623,0,0,7881,7885,3,1140,570,0,7882,
        7883,5,401,0,0,7883,7884,5,171,0,0,7884,7886,3,1140,570,0,7885,7882,
        1,0,0,0,7885,7886,1,0,0,0,7886,7896,1,0,0,0,7887,7888,5,401,0,0,
        7888,7889,5,171,0,0,7889,7893,3,1140,570,0,7890,7891,5,401,0,0,7891,
        7892,5,623,0,0,7892,7894,3,1140,570,0,7893,7890,1,0,0,0,7893,7894,
        1,0,0,0,7894,7896,1,0,0,0,7895,7879,1,0,0,0,7895,7887,1,0,0,0,7895,
        7896,1,0,0,0,7896,1139,1,0,0,0,7897,7905,7,2,0,0,7898,7899,5,519,
        0,0,7899,7905,3,1454,727,0,7900,7901,5,519,0,0,7901,7905,5,166,0,
        0,7902,7903,5,392,0,0,7903,7905,5,50,0,0,7904,7897,1,0,0,0,7904,
        7898,1,0,0,0,7904,7900,1,0,0,0,7904,7902,1,0,0,0,7905,1141,1,0,0,
        0,7906,7907,5,32,0,0,7907,7912,3,1144,572,0,7908,7909,5,29,0,0,7909,
        7911,3,1144,572,0,7910,7908,1,0,0,0,7911,7914,1,0,0,0,7912,7910,
        1,0,0,0,7912,7913,1,0,0,0,7913,7915,1,0,0,0,7914,7912,1,0,0,0,7915,
        7916,5,33,0,0,7916,1143,1,0,0,0,7917,7919,3,1406,703,0,7918,7920,
        3,1172,586,0,7919,7918,1,0,0,0,7919,7920,1,0,0,0,7920,7922,1,0,0,
        0,7921,7923,3,362,181,0,7922,7921,1,0,0,0,7922,7923,1,0,0,0,7923,
        1145,1,0,0,0,7924,7925,5,32,0,0,7925,7930,3,1148,574,0,7926,7927,
        5,29,0,0,7927,7929,3,1148,574,0,7928,7926,1,0,0,0,7929,7932,1,0,
        0,0,7930,7928,1,0,0,0,7930,7931,1,0,0,0,7931,7933,1,0,0,0,7932,7930,
        1,0,0,0,7933,7934,5,33,0,0,7934,1147,1,0,0,0,7935,7942,3,1144,572,
        0,7936,7937,4,574,110,0,7937,7939,3,1018,509,0,7938,7940,3,362,181,
        0,7939,7938,1,0,0,0,7939,7940,1,0,0,0,7940,7942,1,0,0,0,7941,7935,
        1,0,0,0,7941,7936,1,0,0,0,7942,1149,1,0,0,0,7943,7944,7,137,0,0,
        7944,1151,1,0,0,0,7945,7948,3,1154,577,0,7946,7948,3,1158,579,0,
        7947,7945,1,0,0,0,7947,7946,1,0,0,0,7948,1153,1,0,0,0,7949,7951,
        5,294,0,0,7950,7952,5,6,0,0,7951,7950,1,0,0,0,7951,7952,1,0,0,0,
        7952,7953,1,0,0,0,7953,7970,3,1418,709,0,7954,7955,5,118,0,0,7955,
        7970,3,1444,722,0,7956,7970,3,1156,578,0,7957,7958,4,577,111,0,7958,
        7960,5,757,0,0,7959,7961,5,6,0,0,7960,7959,1,0,0,0,7960,7961,1,0,
        0,0,7961,7962,1,0,0,0,7962,7970,3,1484,742,0,7963,7964,4,577,112,
        0,7964,7966,5,758,0,0,7965,7967,5,6,0,0,7966,7965,1,0,0,0,7966,7967,
        1,0,0,0,7967,7968,1,0,0,0,7968,7970,3,1484,742,0,7969,7949,1,0,0,
        0,7969,7954,1,0,0,0,7969,7956,1,0,0,0,7969,7957,1,0,0,0,7969,7963,
        1,0,0,0,7970,1155,1,0,0,0,7971,7972,7,138,0,0,7972,1157,1,0,0,0,
        7973,7974,7,139,0,0,7974,7975,3,1150,575,0,7975,1159,1,0,0,0,7976,
        7981,3,1154,577,0,7977,7978,5,653,0,0,7978,7979,5,419,0,0,7979,7981,
        3,1406,703,0,7980,7976,1,0,0,0,7980,7977,1,0,0,0,7981,1161,1,0,0,
        0,7982,7983,3,1154,577,0,7983,1163,1,0,0,0,7984,7985,3,1166,583,
        0,7985,7986,5,0,0,1,7986,1165,1,0,0,0,7987,7989,7,140,0,0,7988,7990,
        3,1172,586,0,7989,7988,1,0,0,0,7989,7990,1,0,0,0,7990,7992,1,0,0,
        0,7991,7993,3,1174,587,0,7992,7991,1,0,0,0,7992,7993,1,0,0,0,7993,
        8134,1,0,0,0,7994,8000,5,455,0,0,7995,7997,5,182,0,0,7996,7998,5,
        434,0,0,7997,7996,1,0,0,0,7997,7998,1,0,0,0,7998,8000,1,0,0,0,7999,
        7994,1,0,0,0,7999,7995,1,0,0,0,8000,8002,1,0,0,0,8001,8003,3,1464,
        732,0,8002,8001,1,0,0,0,8002,8003,1,0,0,0,8003,8005,1,0,0,0,8004,
        8006,3,1174,587,0,8005,8004,1,0,0,0,8005,8006,1,0,0,0,8006,8134,
        1,0,0,0,8007,8009,7,141,0,0,8008,8010,3,1460,730,0,8009,8008,1,0,
        0,0,8009,8010,1,0,0,0,8010,8012,1,0,0,0,8011,8013,3,1174,587,0,8012,
        8011,1,0,0,0,8012,8013,1,0,0,0,8013,8134,1,0,0,0,8014,8016,5,81,
        0,0,8015,8017,3,1172,586,0,8016,8015,1,0,0,0,8016,8017,1,0,0,0,8017,
        8134,1,0,0,0,8018,8134,7,142,0,0,8019,8021,5,103,0,0,8020,8022,3,
        1172,586,0,8021,8020,1,0,0,0,8021,8022,1,0,0,0,8022,8024,1,0,0,0,
        8023,8025,3,1176,588,0,8024,8023,1,0,0,0,8024,8025,1,0,0,0,8025,
        8134,1,0,0,0,8026,8028,3,1168,584,0,8027,8029,3,1172,586,0,8028,
        8027,1,0,0,0,8028,8029,1,0,0,0,8029,8031,1,0,0,0,8030,8032,5,77,
        0,0,8031,8030,1,0,0,0,8031,8032,1,0,0,0,8032,8134,1,0,0,0,8033,8035,
        5,77,0,0,8034,8036,3,1172,586,0,8035,8034,1,0,0,0,8035,8036,1,0,
        0,0,8036,8134,1,0,0,0,8037,8038,5,103,0,0,8038,8041,5,641,0,0,8039,
        8041,5,638,0,0,8040,8037,1,0,0,0,8040,8039,1,0,0,0,8041,8042,1,0,
        0,0,8042,8044,3,1172,586,0,8043,8045,3,1176,588,0,8044,8043,1,0,
        0,0,8044,8045,1,0,0,0,8045,8134,1,0,0,0,8046,8047,5,381,0,0,8047,
        8057,5,638,0,0,8048,8057,5,398,0,0,8049,8050,5,383,0,0,8050,8057,
        5,638,0,0,8051,8052,5,381,0,0,8052,8053,5,103,0,0,8053,8057,5,641,
        0,0,8054,8055,5,383,0,0,8055,8057,5,641,0,0,8056,8046,1,0,0,0,8056,
        8048,1,0,0,0,8056,8049,1,0,0,0,8056,8051,1,0,0,0,8056,8054,1,0,0,
        0,8057,8058,1,0,0,0,8058,8060,3,1172,586,0,8059,8061,5,77,0,0,8060,
        8059,1,0,0,0,8060,8061,1,0,0,0,8061,8134,1,0,0,0,8062,8063,5,637,
        0,0,8063,8134,3,1172,586,0,8064,8066,5,664,0,0,8065,8067,3,1172,
        586,0,8066,8065,1,0,0,0,8066,8067,1,0,0,0,8067,8069,1,0,0,0,8068,
        8070,3,1174,587,0,8069,8068,1,0,0,0,8069,8070,1,0,0,0,8070,8134,
        1,0,0,0,8071,8134,5,157,0,0,8072,8074,5,595,0,0,8073,8075,3,1184,
        592,0,8074,8073,1,0,0,0,8074,8075,1,0,0,0,8075,8134,1,0,0,0,8076,
        8078,5,592,0,0,8077,8079,3,1184,592,0,8078,8077,1,0,0,0,8078,8079,
        1,0,0,0,8079,8134,1,0,0,0,8080,8082,5,154,0,0,8081,8083,3,1184,592,
        0,8082,8081,1,0,0,0,8082,8083,1,0,0,0,8083,8134,1,0,0,0,8084,8134,
        5,596,0,0,8085,8087,5,83,0,0,8086,8088,3,1172,586,0,8087,8086,1,
        0,0,0,8087,8088,1,0,0,0,8088,8134,1,0,0,0,8089,8134,7,143,0,0,8090,
        8091,5,319,0,0,8091,8134,5,637,0,0,8092,8096,5,319,0,0,8093,8094,
        5,103,0,0,8094,8097,5,641,0,0,8095,8097,5,638,0,0,8096,8093,1,0,
        0,0,8096,8095,1,0,0,0,8096,8097,1,0,0,0,8097,8099,1,0,0,0,8098,8100,
        3,1176,588,0,8099,8098,1,0,0,0,8099,8100,1,0,0,0,8100,8134,1,0,0,
        0,8101,8103,5,598,0,0,8102,8104,3,1176,588,0,8103,8102,1,0,0,0,8103,
        8104,1,0,0,0,8104,8134,1,0,0,0,8105,8107,5,589,0,0,8106,8108,3,1172,
        586,0,8107,8106,1,0,0,0,8107,8108,1,0,0,0,8108,8110,1,0,0,0,8109,
        8111,3,1176,588,0,8110,8109,1,0,0,0,8110,8111,1,0,0,0,8111,8134,
        1,0,0,0,8112,8114,5,356,0,0,8113,8115,3,1176,588,0,8114,8113,1,0,
        0,0,8114,8115,1,0,0,0,8115,8134,1,0,0,0,8116,8118,5,318,0,0,8117,
        8119,3,1176,588,0,8118,8117,1,0,0,0,8118,8119,1,0,0,0,8119,8134,
        1,0,0,0,8120,8121,5,199,0,0,8121,8123,3,1436,718,0,8122,8124,3,1176,
        588,0,8123,8122,1,0,0,0,8123,8124,1,0,0,0,8124,8134,1,0,0,0,8125,
        8126,5,519,0,0,8126,8128,3,1436,718,0,8127,8129,3,1176,588,0,8128,
        8127,1,0,0,0,8128,8129,1,0,0,0,8129,8134,1,0,0,0,8130,8134,5,515,
        0,0,8131,8134,5,292,0,0,8132,8134,7,144,0,0,8133,7987,1,0,0,0,8133,
        7999,1,0,0,0,8133,8007,1,0,0,0,8133,8014,1,0,0,0,8133,8018,1,0,0,
        0,8133,8019,1,0,0,0,8133,8026,1,0,0,0,8133,8033,1,0,0,0,8133,8040,
        1,0,0,0,8133,8056,1,0,0,0,8133,8062,1,0,0,0,8133,8064,1,0,0,0,8133,
        8071,1,0,0,0,8133,8072,1,0,0,0,8133,8076,1,0,0,0,8133,8080,1,0,0,
        0,8133,8084,1,0,0,0,8133,8085,1,0,0,0,8133,8089,1,0,0,0,8133,8090,
        1,0,0,0,8133,8092,1,0,0,0,8133,8101,1,0,0,0,8133,8105,1,0,0,0,8133,
        8112,1,0,0,0,8133,8116,1,0,0,0,8133,8120,1,0,0,0,8133,8125,1,0,0,
        0,8133,8130,1,0,0,0,8133,8131,1,0,0,0,8133,8132,1,0,0,0,8134,1167,
        1,0,0,0,8135,8139,5,383,0,0,8136,8137,5,381,0,0,8137,8139,5,103,
        0,0,8138,8135,1,0,0,0,8138,8136,1,0,0,0,8139,1169,1,0,0,0,8140,8146,
        5,455,0,0,8141,8143,5,182,0,0,8142,8144,5,434,0,0,8143,8142,1,0,
        0,0,8143,8144,1,0,0,0,8144,8146,1,0,0,0,8145,8140,1,0,0,0,8145,8141,
        1,0,0,0,8146,1171,1,0,0,0,8147,8150,5,32,0,0,8148,8151,3,1424,712,
        0,8149,8151,5,46,0,0,8150,8148,1,0,0,0,8150,8149,1,0,0,0,8151,8152,
        1,0,0,0,8152,8153,5,33,0,0,8153,1173,1,0,0,0,8154,8156,7,145,0,0,
        8155,8154,1,0,0,0,8156,8157,1,0,0,0,8157,8155,1,0,0,0,8157,8158,
        1,0,0,0,8158,1175,1,0,0,0,8159,8174,3,1178,589,0,8160,8174,3,1180,
        590,0,8161,8174,5,90,0,0,8162,8163,3,1006,503,0,8163,8165,3,1188,
        594,0,8164,8166,5,77,0,0,8165,8164,1,0,0,0,8165,8166,1,0,0,0,8166,
        8174,1,0,0,0,8167,8171,5,77,0,0,8168,8169,3,1006,503,0,8169,8170,
        3,1188,594,0,8170,8172,1,0,0,0,8171,8168,1,0,0,0,8171,8172,1,0,0,
        0,8172,8174,1,0,0,0,8173,8159,1,0,0,0,8173,8160,1,0,0,0,8173,8161,
        1,0,0,0,8173,8162,1,0,0,0,8173,8167,1,0,0,0,8174,1177,1,0,0,0,8175,
        8177,5,65,0,0,8176,8178,5,77,0,0,8177,8176,1,0,0,0,8177,8178,1,0,
        0,0,8178,8182,1,0,0,0,8179,8180,5,77,0,0,8180,8182,5,65,0,0,8181,
        8175,1,0,0,0,8181,8179,1,0,0,0,8182,1179,1,0,0,0,8183,8185,5,615,
        0,0,8184,8186,5,77,0,0,8185,8184,1,0,0,0,8185,8186,1,0,0,0,8186,
        8190,1,0,0,0,8187,8188,5,77,0,0,8188,8190,5,615,0,0,8189,8183,1,
        0,0,0,8189,8187,1,0,0,0,8190,1181,1,0,0,0,8191,8192,5,32,0,0,8192,
        8193,3,1420,710,0,8193,8194,5,33,0,0,8194,1183,1,0,0,0,8195,8196,
        5,32,0,0,8196,8197,5,3,0,0,8197,8198,5,33,0,0,8198,1185,1,0,0,0,
        8199,8205,1,0,0,0,8200,8205,3,1474,737,0,8201,8202,5,32,0,0,8202,
        8203,5,3,0,0,8203,8205,5,33,0,0,8204,8199,1,0,0,0,8204,8200,1,0,
        0,0,8204,8201,1,0,0,0,8205,1187,1,0,0,0,8206,8211,3,1466,733,0,8207,
        8211,5,77,0,0,8208,8209,4,594,113,0,8209,8211,5,166,0,0,8210,8206,
        1,0,0,0,8210,8207,1,0,0,0,8210,8208,1,0,0,0,8211,1189,1,0,0,0,8212,
        8218,3,1466,733,0,8213,8214,4,595,114,0,8214,8218,5,166,0,0,8215,
        8216,4,595,115,0,8216,8218,5,77,0,0,8217,8212,1,0,0,0,8217,8213,
        1,0,0,0,8217,8215,1,0,0,0,8218,1191,1,0,0,0,8219,8226,3,1200,600,
        0,8220,8222,5,29,0,0,8221,8220,1,0,0,0,8221,8222,1,0,0,0,8222,8223,
        1,0,0,0,8223,8225,3,1200,600,0,8224,8221,1,0,0,0,8225,8228,1,0,0,
        0,8226,8224,1,0,0,0,8226,8227,1,0,0,0,8227,1193,1,0,0,0,8228,8226,
        1,0,0,0,8229,8231,3,1192,596,0,8230,8232,3,1196,598,0,8231,8230,
        1,0,0,0,8231,8232,1,0,0,0,8232,8235,1,0,0,0,8233,8235,3,1196,598,
        0,8234,8229,1,0,0,0,8234,8233,1,0,0,0,8235,1195,1,0,0,0,8236,8238,
        3,1210,605,0,8237,8239,3,92,46,0,8238,8237,1,0,0,0,8238,8239,1,0,
        0,0,8239,8242,1,0,0,0,8240,8242,3,92,46,0,8241,8236,1,0,0,0,8241,
        8240,1,0,0,0,8242,1197,1,0,0,0,8243,8245,3,1200,600,0,8244,8243,
        1,0,0,0,8245,8246,1,0,0,0,8246,8244,1,0,0,0,8246,8247,1,0,0,0,8247,
        1199,1,0,0,0,8248,8250,5,198,0,0,8249,8251,5,6,0,0,8250,8249,1,0,
        0,0,8250,8251,1,0,0,0,8251,8252,1,0,0,0,8252,8389,3,1374,687,0,8253,
        8254,4,600,116,0,8254,8256,5,729,0,0,8255,8257,3,1476,738,0,8256,
        8255,1,0,0,0,8256,8257,1,0,0,0,8257,8260,1,0,0,0,8258,8261,5,395,
        0,0,8259,8261,3,1466,733,0,8260,8258,1,0,0,0,8260,8259,1,0,0,0,8261,
        8389,1,0,0,0,8262,8264,5,348,0,0,8263,8265,5,6,0,0,8264,8263,1,0,
        0,0,8264,8265,1,0,0,0,8265,8266,1,0,0,0,8266,8389,3,1422,711,0,8267,
        8269,5,367,0,0,8268,8270,5,6,0,0,8269,8268,1,0,0,0,8269,8270,1,0,
        0,0,8270,8271,1,0,0,0,8271,8389,3,1422,711,0,8272,8274,5,70,0,0,
        8273,8275,5,6,0,0,8274,8273,1,0,0,0,8274,8275,1,0,0,0,8275,8276,
        1,0,0,0,8276,8389,3,1422,711,0,8277,8279,5,424,0,0,8278,8280,5,6,
        0,0,8279,8278,1,0,0,0,8279,8280,1,0,0,0,8280,8281,1,0,0,0,8281,8389,
        3,1438,719,0,8282,8284,5,118,0,0,8283,8285,5,6,0,0,8284,8283,1,0,
        0,0,8284,8285,1,0,0,0,8285,8286,1,0,0,0,8286,8389,3,1438,719,0,8287,
        8289,5,124,0,0,8288,8290,5,6,0,0,8289,8288,1,0,0,0,8289,8290,1,0,
        0,0,8290,8291,1,0,0,0,8291,8389,3,1440,720,0,8292,8294,5,194,0,0,
        8293,8295,5,6,0,0,8294,8293,1,0,0,0,8294,8295,1,0,0,0,8295,8296,
        1,0,0,0,8296,8389,3,1440,720,0,8297,8299,5,69,0,0,8298,8300,5,6,
        0,0,8299,8298,1,0,0,0,8299,8300,1,0,0,0,8300,8301,1,0,0,0,8301,8389,
        3,1422,711,0,8302,8304,5,417,0,0,8303,8305,5,6,0,0,8304,8303,1,0,
        0,0,8304,8305,1,0,0,0,8305,8306,1,0,0,0,8306,8389,3,1202,601,0,8307,
        8309,7,146,0,0,8308,8310,5,6,0,0,8309,8308,1,0,0,0,8309,8310,1,0,
        0,0,8310,8311,1,0,0,0,8311,8389,3,1202,601,0,8312,8314,7,147,0,0,
        8313,8315,5,6,0,0,8314,8313,1,0,0,0,8314,8315,1,0,0,0,8315,8316,
        1,0,0,0,8316,8389,3,1418,709,0,8317,8319,5,170,0,0,8318,8320,5,6,
        0,0,8319,8318,1,0,0,0,8319,8320,1,0,0,0,8320,8321,1,0,0,0,8321,8389,
        3,1418,709,0,8322,8324,5,502,0,0,8323,8325,5,6,0,0,8324,8323,1,0,
        0,0,8324,8325,1,0,0,0,8325,8326,1,0,0,0,8326,8389,7,148,0,0,8327,
        8329,5,617,0,0,8328,8330,5,6,0,0,8329,8328,1,0,0,0,8329,8330,1,0,
        0,0,8330,8331,1,0,0,0,8331,8332,5,32,0,0,8332,8333,3,1384,692,0,
        8333,8334,5,33,0,0,8334,8389,1,0,0,0,8335,8389,3,1208,604,0,8336,
        8389,3,1204,602,0,8337,8339,5,275,0,0,8338,8340,5,6,0,0,8339,8338,
        1,0,0,0,8339,8340,1,0,0,0,8340,8341,1,0,0,0,8341,8389,7,149,0,0,
        8342,8343,5,153,0,0,8343,8345,5,176,0,0,8344,8346,5,6,0,0,8345,8344,
        1,0,0,0,8345,8346,1,0,0,0,8346,8347,1,0,0,0,8347,8389,3,1440,720,
        0,8348,8349,5,268,0,0,8349,8351,5,176,0,0,8350,8352,5,6,0,0,8351,
        8350,1,0,0,0,8351,8352,1,0,0,0,8352,8353,1,0,0,0,8353,8389,3,1440,
        720,0,8354,8356,5,582,0,0,8355,8357,5,6,0,0,8356,8355,1,0,0,0,8356,
        8357,1,0,0,0,8357,8358,1,0,0,0,8358,8389,3,1406,703,0,8359,8360,
        5,563,0,0,8360,8389,7,150,0,0,8361,8363,5,127,0,0,8362,8364,5,6,
        0,0,8363,8362,1,0,0,0,8363,8364,1,0,0,0,8364,8365,1,0,0,0,8365,8389,
        3,1440,720,0,8366,8368,5,294,0,0,8367,8369,5,6,0,0,8368,8367,1,0,
        0,0,8368,8369,1,0,0,0,8369,8370,1,0,0,0,8370,8389,3,1422,711,0,8371,
        8372,4,600,117,0,8372,8373,5,553,0,0,8373,8389,5,601,0,0,8374,8375,
        4,600,118,0,8375,8377,5,757,0,0,8376,8378,5,6,0,0,8377,8376,1,0,
        0,0,8377,8378,1,0,0,0,8378,8379,1,0,0,0,8379,8389,3,1484,742,0,8380,
        8381,4,600,119,0,8381,8383,5,758,0,0,8382,8384,5,6,0,0,8383,8382,
        1,0,0,0,8383,8384,1,0,0,0,8384,8385,1,0,0,0,8385,8389,3,1484,742,
        0,8386,8387,4,600,120,0,8387,8389,3,152,76,0,8388,8248,1,0,0,0,8388,
        8253,1,0,0,0,8388,8262,1,0,0,0,8388,8267,1,0,0,0,8388,8272,1,0,0,
        0,8388,8277,1,0,0,0,8388,8282,1,0,0,0,8388,8287,1,0,0,0,8388,8292,
        1,0,0,0,8388,8297,1,0,0,0,8388,8302,1,0,0,0,8388,8307,1,0,0,0,8388,
        8312,1,0,0,0,8388,8317,1,0,0,0,8388,8322,1,0,0,0,8388,8327,1,0,0,
        0,8388,8335,1,0,0,0,8388,8336,1,0,0,0,8388,8337,1,0,0,0,8388,8342,
        1,0,0,0,8388,8348,1,0,0,0,8388,8354,1,0,0,0,8388,8359,1,0,0,0,8388,
        8361,1,0,0,0,8388,8366,1,0,0,0,8388,8371,1,0,0,0,8388,8374,1,0,0,
        0,8388,8380,1,0,0,0,8388,8386,1,0,0,0,8389,1201,1,0,0,0,8390,8393,
        3,1418,709,0,8391,8393,5,166,0,0,8392,8390,1,0,0,0,8392,8391,1,0,
        0,0,8393,1203,1,0,0,0,8394,8396,5,166,0,0,8395,8394,1,0,0,0,8395,
        8396,1,0,0,0,8396,8397,1,0,0,0,8397,8399,5,112,0,0,8398,8400,5,6,
        0,0,8399,8398,1,0,0,0,8399,8400,1,0,0,0,8400,8401,1,0,0,0,8401,8402,
        3,1190,595,0,8402,1205,1,0,0,0,8403,8405,5,166,0,0,8404,8403,1,0,
        0,0,8404,8405,1,0,0,0,8405,8406,1,0,0,0,8406,8408,5,194,0,0,8407,
        8409,5,6,0,0,8408,8407,1,0,0,0,8408,8409,1,0,0,0,8409,8410,1,0,0,
        0,8410,8411,3,1438,719,0,8411,1207,1,0,0,0,8412,8414,5,166,0,0,8413,
        8412,1,0,0,0,8413,8414,1,0,0,0,8414,8415,1,0,0,0,8415,8417,3,1006,
        503,0,8416,8418,5,6,0,0,8417,8416,1,0,0,0,8417,8418,1,0,0,0,8418,
        8419,1,0,0,0,8419,8420,3,1188,594,0,8420,1209,1,0,0,0,8421,8422,
        5,423,0,0,8422,8423,5,89,0,0,8423,8426,3,1212,606,0,8424,8425,5,
        422,0,0,8425,8427,3,1420,710,0,8426,8424,1,0,0,0,8426,8427,1,0,0,
        0,8427,8429,1,0,0,0,8428,8430,3,1214,607,0,8429,8428,1,0,0,0,8429,
        8430,1,0,0,0,8430,8432,1,0,0,0,8431,8433,3,1218,609,0,8432,8431,
        1,0,0,0,8432,8433,1,0,0,0,8433,1211,1,0,0,0,8434,8436,5,307,0,0,
        8435,8434,1,0,0,0,8435,8436,1,0,0,0,8436,8437,1,0,0,0,8437,8439,
        5,295,0,0,8438,8440,3,1216,608,0,8439,8438,1,0,0,0,8439,8440,1,0,
        0,0,8440,8441,1,0,0,0,8441,8443,5,32,0,0,8442,8444,3,1408,704,0,
        8443,8442,1,0,0,0,8443,8444,1,0,0,0,8444,8445,1,0,0,0,8445,8468,
        5,33,0,0,8446,8448,5,307,0,0,8447,8446,1,0,0,0,8447,8448,1,0,0,0,
        8448,8449,1,0,0,0,8449,8450,5,252,0,0,8450,8451,5,32,0,0,8451,8452,
        3,920,460,0,8452,8453,5,33,0,0,8453,8468,1,0,0,0,8454,8465,7,151,
        0,0,8455,8456,5,32,0,0,8456,8457,3,920,460,0,8457,8458,5,33,0,0,
        8458,8466,1,0,0,0,8459,8460,5,114,0,0,8460,8462,5,32,0,0,8461,8463,
        3,1408,704,0,8462,8461,1,0,0,0,8462,8463,1,0,0,0,8463,8464,1,0,0,
        0,8464,8466,5,33,0,0,8465,8455,1,0,0,0,8465,8459,1,0,0,0,8466,8468,
        1,0,0,0,8467,8435,1,0,0,0,8467,8447,1,0,0,0,8467,8454,1,0,0,0,8468,
        1213,1,0,0,0,8469,8470,5,571,0,0,8470,8472,5,89,0,0,8471,8473,5,
        307,0,0,8472,8471,1,0,0,0,8472,8473,1,0,0,0,8473,8484,1,0,0,0,8474,
        8475,5,252,0,0,8475,8476,5,32,0,0,8476,8477,3,920,460,0,8477,8478,
        5,33,0,0,8478,8485,1,0,0,0,8479,8481,5,295,0,0,8480,8482,3,1216,
        608,0,8481,8480,1,0,0,0,8481,8482,1,0,0,0,8482,8483,1,0,0,0,8483,
        8485,3,1410,705,0,8484,8474,1,0,0,0,8484,8479,1,0,0,0,8485,8488,
        1,0,0,0,8486,8487,5,570,0,0,8487,8489,3,1420,710,0,8488,8486,1,0,
        0,0,8488,8489,1,0,0,0,8489,1215,1,0,0,0,8490,8491,5,56,0,0,8491,
        8492,5,6,0,0,8492,8493,3,1420,710,0,8493,1217,1,0,0,0,8494,8495,
        5,32,0,0,8495,8500,3,1220,610,0,8496,8497,5,29,0,0,8497,8499,3,1220,
        610,0,8498,8496,1,0,0,0,8499,8502,1,0,0,0,8500,8498,1,0,0,0,8500,
        8501,1,0,0,0,8501,8503,1,0,0,0,8502,8500,1,0,0,0,8503,8504,5,33,
        0,0,8504,1219,1,0,0,0,8505,8506,5,423,0,0,8506,8517,3,1406,703,0,
        8507,8508,5,635,0,0,8508,8509,5,303,0,0,8509,8512,5,590,0,0,8510,
        8513,3,1228,614,0,8511,8513,5,353,0,0,8512,8510,1,0,0,0,8512,8511,
        1,0,0,0,8513,8518,1,0,0,0,8514,8515,5,635,0,0,8515,8516,5,282,0,
        0,8516,8518,3,1222,611,0,8517,8507,1,0,0,0,8517,8514,1,0,0,0,8517,
        8518,1,0,0,0,8518,8522,1,0,0,0,8519,8521,3,1224,612,0,8520,8519,
        1,0,0,0,8521,8524,1,0,0,0,8522,8520,1,0,0,0,8522,8523,1,0,0,0,8523,
        8536,1,0,0,0,8524,8522,1,0,0,0,8525,8526,5,32,0,0,8526,8531,3,1226,
        613,0,8527,8528,5,29,0,0,8528,8530,3,1226,613,0,8529,8527,1,0,0,
        0,8530,8533,1,0,0,0,8531,8529,1,0,0,0,8531,8532,1,0,0,0,8532,8534,
        1,0,0,0,8533,8531,1,0,0,0,8534,8535,5,33,0,0,8535,8537,1,0,0,0,8536,
        8525,1,0,0,0,8536,8537,1,0,0,0,8537,1221,1,0,0,0,8538,8551,3,1228,
        614,0,8539,8540,5,32,0,0,8540,8545,3,1228,614,0,8541,8542,5,29,0,
        0,8542,8544,3,1228,614,0,8543,8541,1,0,0,0,8544,8547,1,0,0,0,8545,
        8543,1,0,0,0,8545,8546,1,0,0,0,8546,8548,1,0,0,0,8547,8545,1,0,0,
        0,8548,8549,5,33,0,0,8549,8551,1,0,0,0,8550,8538,1,0,0,0,8550,8539,
        1,0,0,0,8551,1223,1,0,0,0,8552,8554,5,582,0,0,8553,8555,5,6,0,0,
        8554,8553,1,0,0,0,8554,8555,1,0,0,0,8555,8556,1,0,0,0,8556,8587,
        3,1406,703,0,8557,8559,5,563,0,0,8558,8557,1,0,0,0,8558,8559,1,0,
        0,0,8559,8560,1,0,0,0,8560,8562,5,198,0,0,8561,8563,5,6,0,0,8562,
        8561,1,0,0,0,8562,8563,1,0,0,0,8563,8564,1,0,0,0,8564,8587,3,1374,
        687,0,8565,8567,5,388,0,0,8566,8568,5,6,0,0,8567,8566,1,0,0,0,8567,
        8568,1,0,0,0,8568,8569,1,0,0,0,8569,8587,3,1420,710,0,8570,8572,
        7,152,0,0,8571,8573,5,6,0,0,8572,8571,1,0,0,0,8572,8573,1,0,0,0,
        8573,8574,1,0,0,0,8574,8587,3,1420,710,0,8575,8576,7,153,0,0,8576,
        8578,5,176,0,0,8577,8579,5,6,0,0,8578,8577,1,0,0,0,8578,8579,1,0,
        0,0,8579,8580,1,0,0,0,8580,8587,3,1444,722,0,8581,8583,5,118,0,0,
        8582,8584,5,6,0,0,8583,8582,1,0,0,0,8583,8584,1,0,0,0,8584,8585,
        1,0,0,0,8585,8587,3,1444,722,0,8586,8552,1,0,0,0,8586,8558,1,0,0,
        0,8586,8565,1,0,0,0,8586,8570,1,0,0,0,8586,8575,1,0,0,0,8586,8581,
        1,0,0,0,8587,1225,1,0,0,0,8588,8589,5,571,0,0,8589,8593,3,1466,733,
        0,8590,8592,3,1224,612,0,8591,8590,1,0,0,0,8592,8595,1,0,0,0,8593,
        8591,1,0,0,0,8593,8594,1,0,0,0,8594,1227,1,0,0,0,8595,8593,1,0,0,
        0,8596,8597,5,32,0,0,8597,8602,3,1230,615,0,8598,8599,5,29,0,0,8599,
        8601,3,1230,615,0,8600,8598,1,0,0,0,8601,8604,1,0,0,0,8602,8600,
        1,0,0,0,8602,8603,1,0,0,0,8603,8605,1,0,0,0,8604,8602,1,0,0,0,8605,
        8606,5,33,0,0,8606,1229,1,0,0,0,8607,8610,3,920,460,0,8608,8610,
        5,353,0,0,8609,8607,1,0,0,0,8609,8608,1,0,0,0,8610,1231,1,0,0,0,
        8611,8612,5,168,0,0,8612,8613,5,6,0,0,8613,8614,3,1306,653,0,8614,
        1233,1,0,0,0,8615,8616,5,263,0,0,8616,8617,5,209,0,0,8617,1235,1,
        0,0,0,8618,8619,3,1234,617,0,8619,8620,3,1238,619,0,8620,1237,1,
        0,0,0,8621,8629,3,1406,703,0,8622,8626,4,619,121,0,8623,8627,3,1412,
        706,0,8624,8625,5,166,0,0,8625,8627,3,1416,708,0,8626,8623,1,0,0,
        0,8626,8624,1,0,0,0,8627,8629,1,0,0,0,8628,8621,1,0,0,0,8628,8622,
        1,0,0,0,8629,1239,1,0,0,0,8630,8631,5,263,0,0,8631,8632,3,1008,504,
        0,8632,8633,5,209,0,0,8633,1241,1,0,0,0,8634,8635,5,264,0,0,8635,
        8636,5,619,0,0,8636,8637,5,627,0,0,8637,1243,1,0,0,0,8638,8640,7,
        154,0,0,8639,8638,1,0,0,0,8639,8640,1,0,0,0,8640,8641,1,0,0,0,8641,
        8642,3,1246,623,0,8642,1245,1,0,0,0,8643,8644,3,1388,694,0,8644,
        8645,3,1250,625,0,8645,1247,1,0,0,0,8646,8647,5,112,0,0,8647,8648,
        3,1190,595,0,8648,1249,1,0,0,0,8649,8651,3,1166,583,0,8650,8652,
        3,1248,624,0,8651,8650,1,0,0,0,8651,8652,1,0,0,0,8652,1251,1,0,0,
        0,8653,8654,5,32,0,0,8654,8655,3,1338,669,0,8655,8656,5,29,0,0,8656,
        8657,3,1338,669,0,8657,8658,5,33,0,0,8658,1253,1,0,0,0,8659,8664,
        3,1354,677,0,8660,8661,5,29,0,0,8661,8663,3,1354,677,0,8662,8660,
        1,0,0,0,8663,8666,1,0,0,0,8664,8662,1,0,0,0,8664,8665,1,0,0,0,8665,
        1255,1,0,0,0,8666,8664,1,0,0,0,8667,8672,3,1258,629,0,8668,8669,
        5,29,0,0,8669,8671,3,1258,629,0,8670,8668,1,0,0,0,8671,8674,1,0,
        0,0,8672,8670,1,0,0,0,8672,8673,1,0,0,0,8673,1257,1,0,0,0,8674,8672,
        1,0,0,0,8675,8676,3,1326,663,0,8676,8679,5,6,0,0,8677,8680,3,910,
        455,0,8678,8680,5,166,0,0,8679,8677,1,0,0,0,8679,8678,1,0,0,0,8680,
        1259,1,0,0,0,8681,8682,3,1006,503,0,8682,8683,3,1188,594,0,8683,
        1261,1,0,0,0,8684,8686,5,114,0,0,8685,8687,3,1264,632,0,8686,8685,
        1,0,0,0,8687,8688,1,0,0,0,8688,8686,1,0,0,0,8688,8689,1,0,0,0,8689,
        1263,1,0,0,0,8690,8691,5,588,0,0,8691,8692,5,89,0,0,8692,8703,3,
        1440,720,0,8693,8695,5,410,0,0,8694,8693,1,0,0,0,8694,8695,1,0,0,
        0,8695,8696,1,0,0,0,8696,8697,5,193,0,0,8697,8698,5,89,0,0,8698,
        8703,3,1440,720,0,8699,8700,5,202,0,0,8700,8701,5,89,0,0,8701,8703,
        3,1440,720,0,8702,8690,1,0,0,0,8702,8694,1,0,0,0,8702,8699,1,0,0,
        0,8703,1265,1,0,0,0,8704,8706,5,308,0,0,8705,8707,3,1268,634,0,8706,
        8705,1,0,0,0,8707,8708,1,0,0,0,8708,8706,1,0,0,0,8708,8709,1,0,0,
        0,8709,1267,1,0,0,0,8710,8711,7,155,0,0,8711,8712,5,89,0,0,8712,
        8713,3,1440,720,0,8713,1269,1,0,0,0,8714,8719,3,1306,653,0,8715,
        8716,5,29,0,0,8716,8718,3,1306,653,0,8717,8715,1,0,0,0,8718,8721,
        1,0,0,0,8719,8717,1,0,0,0,8719,8720,1,0,0,0,8720,1271,1,0,0,0,8721,
        8719,1,0,0,0,8722,8727,3,1274,637,0,8723,8724,5,29,0,0,8724,8726,
        3,1274,637,0,8725,8723,1,0,0,0,8726,8729,1,0,0,0,8727,8725,1,0,0,
        0,8727,8728,1,0,0,0,8728,1273,1,0,0,0,8729,8727,1,0,0,0,8730,8740,
        3,1306,653,0,8731,8733,3,1278,639,0,8732,8734,3,1276,638,0,8733,
        8732,1,0,0,0,8733,8734,1,0,0,0,8734,8741,1,0,0,0,8735,8737,3,1284,
        642,0,8736,8738,3,1292,646,0,8737,8736,1,0,0,0,8737,8738,1,0,0,0,
        8738,8741,1,0,0,0,8739,8741,3,1276,638,0,8740,8731,1,0,0,0,8740,
        8735,1,0,0,0,8740,8739,1,0,0,0,8740,8741,1,0,0,0,8741,1275,1,0,0,
        0,8742,8743,5,61,0,0,8743,8746,3,1278,639,0,8744,8745,5,61,0,0,8745,
        8747,3,1278,639,0,8746,8744,1,0,0,0,8746,8747,1,0,0,0,8747,1277,
        1,0,0,0,8748,8755,3,1280,640,0,8749,8755,3,1282,641,0,8750,8755,
        3,1284,642,0,8751,8755,3,1286,643,0,8752,8755,3,1288,644,0,8753,
        8755,3,1290,645,0,8754,8748,1,0,0,0,8754,8749,1,0,0,0,8754,8750,
        1,0,0,0,8754,8751,1,0,0,0,8754,8752,1,0,0,0,8754,8753,1,0,0,0,8755,
        1279,1,0,0,0,8756,8757,5,262,0,0,8757,8758,5,89,0,0,8758,8759,3,
        1438,719,0,8759,1281,1,0,0,0,8760,8761,5,262,0,0,8761,8762,5,89,
        0,0,8762,8763,5,742,0,0,8763,8764,5,424,0,0,8764,1283,1,0,0,0,8765,
        8766,5,262,0,0,8766,8767,5,653,0,0,8767,8768,3,1466,733,0,8768,1285,
        1,0,0,0,8769,8770,5,262,0,0,8770,8771,5,653,0,0,8771,8772,3,1466,
        733,0,8772,8773,5,63,0,0,8773,8774,3,1442,721,0,8774,1287,1,0,0,
        0,8775,8776,5,262,0,0,8776,8777,5,653,0,0,8777,8778,3,1466,733,0,
        8778,8779,5,89,0,0,8779,8780,3,1438,719,0,8780,1289,1,0,0,0,8781,
        8782,5,262,0,0,8782,8783,5,653,0,0,8783,8784,3,1466,733,0,8784,8785,
        5,89,0,0,8785,8786,5,742,0,0,8786,8787,5,424,0,0,8787,1291,1,0,0,
        0,8788,8789,5,800,0,0,8789,8793,5,794,0,0,8790,8794,3,1282,641,0,
        8791,8794,3,1286,643,0,8792,8794,3,1280,640,0,8793,8790,1,0,0,0,
        8793,8791,1,0,0,0,8793,8792,1,0,0,0,8794,1293,1,0,0,0,8795,8796,
        5,735,0,0,8796,8797,5,143,0,0,8797,8798,5,424,0,0,8798,1295,1,0,
        0,0,8799,8800,5,178,0,0,8800,8801,5,736,0,0,8801,8802,5,424,0,0,
        8802,1297,1,0,0,0,8803,8804,3,1300,650,0,8804,8805,5,797,0,0,8805,
        8806,5,798,0,0,8806,8819,1,0,0,0,8807,8808,3,1300,650,0,8808,8809,
        5,799,0,0,8809,8819,1,0,0,0,8810,8811,3,1300,650,0,8811,8812,5,796,
        0,0,8812,8813,5,798,0,0,8813,8814,5,519,0,0,8814,8815,5,801,0,0,
        8815,8816,5,63,0,0,8816,8817,3,1442,721,0,8817,8819,1,0,0,0,8818,
        8803,1,0,0,0,8818,8807,1,0,0,0,8818,8810,1,0,0,0,8819,1299,1,0,0,
        0,8820,8821,3,1450,725,0,8821,8822,5,795,0,0,8822,1301,1,0,0,0,8823,
        8824,5,475,0,0,8824,8825,3,1440,720,0,8825,1303,1,0,0,0,8826,8828,
        3,1466,733,0,8827,8829,3,986,493,0,8828,8827,1,0,0,0,8828,8829,1,
        0,0,0,8829,1305,1,0,0,0,8830,8836,3,1304,652,0,8831,8833,5,146,0,
        0,8832,8834,3,1474,737,0,8833,8832,1,0,0,0,8833,8834,1,0,0,0,8834,
        8836,1,0,0,0,8835,8830,1,0,0,0,8835,8831,1,0,0,0,8836,1307,1,0,0,
        0,8837,8838,5,305,0,0,8838,8839,3,1438,719,0,8839,1309,1,0,0,0,8840,
        8843,3,1308,654,0,8841,8843,3,390,195,0,8842,8840,1,0,0,0,8842,8841,
        1,0,0,0,8843,1311,1,0,0,0,8844,8845,7,156,0,0,8845,1313,1,0,0,0,
        8846,8847,7,157,0,0,8847,1315,1,0,0,0,8848,8849,5,423,0,0,8849,8850,
        3,1410,705,0,8850,1317,1,0,0,0,8851,8857,3,1416,708,0,8852,8854,
        3,1412,706,0,8853,8855,3,1416,708,0,8854,8853,1,0,0,0,8854,8855,
        1,0,0,0,8855,8857,1,0,0,0,8856,8851,1,0,0,0,8856,8852,1,0,0,0,8857,
        1319,1,0,0,0,8858,8859,3,1406,703,0,8859,1321,1,0,0,0,8860,8861,
        3,1406,703,0,8861,1323,1,0,0,0,8862,8863,5,32,0,0,8863,8868,3,1322,
        661,0,8864,8865,5,29,0,0,8865,8867,3,1322,661,0,8866,8864,1,0,0,
        0,8867,8870,1,0,0,0,8868,8866,1,0,0,0,8868,8869,1,0,0,0,8869,8871,
        1,0,0,0,8870,8868,1,0,0,0,8871,8872,5,33,0,0,8872,1325,1,0,0,0,8873,
        8874,3,1318,659,0,8874,1327,1,0,0,0,8875,8878,3,1326,663,0,8876,
        8878,3,1334,667,0,8877,8875,1,0,0,0,8877,8876,1,0,0,0,8878,1329,
        1,0,0,0,8879,8880,3,1406,703,0,8880,1331,1,0,0,0,8881,8882,3,1318,
        659,0,8882,1333,1,0,0,0,8883,8884,3,1406,703,0,8884,8888,5,28,0,
        0,8885,8886,3,1406,703,0,8886,8887,5,28,0,0,8887,8889,1,0,0,0,8888,
        8885,1,0,0,0,8888,8889,1,0,0,0,8889,8890,1,0,0,0,8890,8891,5,16,
        0,0,8891,1335,1,0,0,0,8892,8893,3,1406,703,0,8893,1337,1,0,0,0,8894,
        8895,3,1406,703,0,8895,1339,1,0,0,0,8896,8897,3,1412,706,0,8897,
        1341,1,0,0,0,8898,8899,3,1412,706,0,8899,1343,1,0,0,0,8900,8901,
        3,1412,706,0,8901,1345,1,0,0,0,8902,8903,3,1412,706,0,8903,1347,
        1,0,0,0,8904,8905,3,1412,706,0,8905,1349,1,0,0,0,8906,8907,3,1412,
        706,0,8907,1351,1,0,0,0,8908,8911,3,1412,706,0,8909,8911,3,1416,
        708,0,8910,8908,1,0,0,0,8910,8909,1,0,0,0,8911,1353,1,0,0,0,8912,
        8915,3,1412,706,0,8913,8915,3,1416,708,0,8914,8912,1,0,0,0,8914,
        8913,1,0,0,0,8915,1355,1,0,0,0,8916,8917,3,1406,703,0,8917,1357,
        1,0,0,0,8918,8919,3,1406,703,0,8919,1359,1,0,0,0,8920,8921,3,1406,
        703,0,8921,1361,1,0,0,0,8922,8923,3,1406,703,0,8923,1363,1,0,0,0,
        8924,8925,3,1412,706,0,8925,1365,1,0,0,0,8926,8927,3,1412,706,0,
        8927,1367,1,0,0,0,8928,8929,3,1406,703,0,8929,1369,1,0,0,0,8930,
        8931,3,1466,733,0,8931,1371,1,0,0,0,8932,8933,3,1466,733,0,8933,
        1373,1,0,0,0,8934,8935,3,1466,733,0,8935,1375,1,0,0,0,8936,8939,
        3,1412,706,0,8937,8939,3,1416,708,0,8938,8936,1,0,0,0,8938,8937,
        1,0,0,0,8939,1377,1,0,0,0,8940,8941,3,1338,669,0,8941,8942,3,1416,
        708,0,8942,1379,1,0,0,0,8943,8951,3,1406,703,0,8944,8945,5,28,0,
        0,8945,8952,5,16,0,0,8946,8949,3,1416,708,0,8947,8948,5,28,0,0,8948,
        8950,5,16,0,0,8949,8947,1,0,0,0,8949,8950,1,0,0,0,8950,8952,1,0,
        0,0,8951,8944,1,0,0,0,8951,8946,1,0,0,0,8951,8952,1,0,0,0,8952,1381,
        1,0,0,0,8953,8956,3,1412,706,0,8954,8956,3,1416,708,0,8955,8953,
        1,0,0,0,8955,8954,1,0,0,0,8956,1383,1,0,0,0,8957,8962,3,1382,691,
        0,8958,8959,5,29,0,0,8959,8961,3,1382,691,0,8960,8958,1,0,0,0,8961,
        8964,1,0,0,0,8962,8960,1,0,0,0,8962,8963,1,0,0,0,8963,1385,1,0,0,
        0,8964,8962,1,0,0,0,8965,8970,3,1380,690,0,8966,8967,5,29,0,0,8967,
        8969,3,1380,690,0,8968,8966,1,0,0,0,8969,8972,1,0,0,0,8970,8968,
        1,0,0,0,8970,8971,1,0,0,0,8971,1387,1,0,0,0,8972,8970,1,0,0,0,8973,
        8974,3,1406,703,0,8974,1389,1,0,0,0,8975,8978,3,1404,702,0,8976,
        8978,3,1492,746,0,8977,8975,1,0,0,0,8977,8976,1,0,0,0,8978,1391,
        1,0,0,0,8979,8980,3,1390,695,0,8980,1393,1,0,0,0,8981,8984,3,1404,
        702,0,8982,8984,3,1498,749,0,8983,8981,1,0,0,0,8983,8982,1,0,0,0,
        8984,1395,1,0,0,0,8985,8986,3,1406,703,0,8986,1397,1,0,0,0,8987,
        8988,3,1438,719,0,8988,1399,1,0,0,0,8989,8990,3,1406,703,0,8990,
        1401,1,0,0,0,8991,8992,3,1406,703,0,8992,1403,1,0,0,0,8993,8997,
        7,158,0,0,8994,8995,4,702,122,0,8995,8997,5,823,0,0,8996,8993,1,
        0,0,0,8996,8994,1,0,0,0,8997,1405,1,0,0,0,8998,9001,3,1404,702,0,
        8999,9001,3,1486,743,0,9000,8998,1,0,0,0,9000,8999,1,0,0,0,9001,
        1407,1,0,0,0,9002,9007,3,1406,703,0,9003,9004,5,29,0,0,9004,9006,
        3,1406,703,0,9005,9003,1,0,0,0,9006,9009,1,0,0,0,9007,9005,1,0,0,
        0,9007,9008,1,0,0,0,9008,1409,1,0,0,0,9009,9007,1,0,0,0,9010,9011,
        5,32,0,0,9011,9012,3,1408,704,0,9012,9013,5,33,0,0,9013,1411,1,0,
        0,0,9014,9016,3,1406,703,0,9015,9017,3,1416,708,0,9016,9015,1,0,
        0,0,9016,9017,1,0,0,0,9017,1413,1,0,0,0,9018,9023,3,1406,703,0,9019,
        9021,3,1416,708,0,9020,9022,3,1416,708,0,9021,9020,1,0,0,0,9021,
        9022,1,0,0,0,9022,9024,1,0,0,0,9023,9019,1,0,0,0,9023,9024,1,0,0,
        0,9024,1415,1,0,0,0,9025,9026,5,28,0,0,9026,9027,3,1406,703,0,9027,
        1417,1,0,0,0,9028,9029,7,159,0,0,9029,1419,1,0,0,0,9030,9031,7,160,
        0,0,9031,1421,1,0,0,0,9032,9033,7,161,0,0,9033,1423,1,0,0,0,9034,
        9040,5,3,0,0,9035,9036,4,712,123,0,9036,9040,5,44,0,0,9037,9040,
        5,5,0,0,9038,9040,5,4,0,0,9039,9034,1,0,0,0,9039,9035,1,0,0,0,9039,
        9037,1,0,0,0,9039,9038,1,0,0,0,9040,1425,1,0,0,0,9041,9047,3,1430,
        715,0,9042,9043,5,14,0,0,9043,9047,3,1418,709,0,9044,9045,5,15,0,
        0,9045,9047,3,1418,709,0,9046,9041,1,0,0,0,9046,9042,1,0,0,0,9046,
        9044,1,0,0,0,9047,1427,1,0,0,0,9048,9052,3,1426,713,0,9049,9050,
        4,714,124,0,9050,9052,3,1434,717,0,9051,9048,1,0,0,0,9051,9049,1,
        0,0,0,9052,1429,1,0,0,0,9053,9063,3,1444,722,0,9054,9063,3,1450,
        725,0,9055,9063,3,1458,729,0,9056,9063,3,1454,727,0,9057,9063,3,
        1452,726,0,9058,9060,5,819,0,0,9059,9058,1,0,0,0,9059,9060,1,0,0,
        0,9060,9061,1,0,0,0,9061,9063,7,162,0,0,9062,9053,1,0,0,0,9062,9054,
        1,0,0,0,9062,9055,1,0,0,0,9062,9056,1,0,0,0,9062,9057,1,0,0,0,9062,
        9059,1,0,0,0,9063,1431,1,0,0,0,9064,9068,3,1430,715,0,9065,9066,
        4,716,125,0,9066,9068,3,1434,717,0,9067,9064,1,0,0,0,9067,9065,1,
        0,0,0,9068,1433,1,0,0,0,9069,9070,5,395,0,0,9070,1435,1,0,0,0,9071,
        9072,5,32,0,0,9072,9077,3,1440,720,0,9073,9074,5,29,0,0,9074,9076,
        3,1440,720,0,9075,9073,1,0,0,0,9076,9079,1,0,0,0,9077,9075,1,0,0,
        0,9077,9078,1,0,0,0,9078,9080,1,0,0,0,9079,9077,1,0,0,0,9080,9081,
        5,33,0,0,9081,1437,1,0,0,0,9082,9086,5,824,0,0,9083,9084,4,719,126,
        0,9084,9086,5,823,0,0,9085,9082,1,0,0,0,9085,9083,1,0,0,0,9086,1439,
        1,0,0,0,9087,9091,3,1438,719,0,9088,9091,5,44,0,0,9089,9091,5,45,
        0,0,9090,9087,1,0,0,0,9090,9088,1,0,0,0,9090,9089,1,0,0,0,9091,1441,
        1,0,0,0,9092,9096,3,1438,719,0,9093,9094,4,721,127,0,9094,9096,5,
        44,0,0,9095,9092,1,0,0,0,9095,9093,1,0,0,0,9096,1443,1,0,0,0,9097,
        9099,5,819,0,0,9098,9097,1,0,0,0,9098,9099,1,0,0,0,9099,9100,1,0,
        0,0,9100,9103,3,1438,719,0,9101,9103,5,821,0,0,9102,9098,1,0,0,0,
        9102,9101,1,0,0,0,9103,9107,1,0,0,0,9104,9106,3,1438,719,0,9105,
        9104,1,0,0,0,9106,9109,1,0,0,0,9107,9105,1,0,0,0,9107,9108,1,0,0,
        0,9108,1445,1,0,0,0,9109,9107,1,0,0,0,9110,9111,3,1438,719,0,9111,
        1447,1,0,0,0,9112,9117,3,1438,719,0,9113,9114,5,29,0,0,9114,9116,
        3,1438,719,0,9115,9113,1,0,0,0,9116,9119,1,0,0,0,9117,9115,1,0,0,
        0,9117,9118,1,0,0,0,9118,1449,1,0,0,0,9119,9117,1,0,0,0,9120,9124,
        3,1456,728,0,9121,9124,5,46,0,0,9122,9124,5,47,0,0,9123,9120,1,0,
        0,0,9123,9121,1,0,0,0,9123,9122,1,0,0,0,9124,1451,1,0,0,0,9125,9126,
        7,163,0,0,9126,1453,1,0,0,0,9127,9128,7,164,0,0,9128,1455,1,0,0,
        0,9129,9130,7,165,0,0,9130,1457,1,0,0,0,9131,9132,5,157,0,0,9132,
        9138,5,824,0,0,9133,9134,5,595,0,0,9134,9138,5,824,0,0,9135,9136,
        5,592,0,0,9136,9138,5,824,0,0,9137,9131,1,0,0,0,9137,9133,1,0,0,
        0,9137,9135,1,0,0,0,9138,1459,1,0,0,0,9139,9142,3,1172,586,0,9140,
        9142,3,1464,732,0,9141,9139,1,0,0,0,9141,9140,1,0,0,0,9142,1461,
        1,0,0,0,9143,9144,3,1464,732,0,9144,1463,1,0,0,0,9145,9146,5,32,
        0,0,9146,9147,5,3,0,0,9147,9148,5,29,0,0,9148,9149,5,3,0,0,9149,
        9150,5,33,0,0,9150,1465,1,0,0,0,9151,9154,3,1406,703,0,9152,9154,
        3,1438,719,0,9153,9151,1,0,0,0,9153,9152,1,0,0,0,9154,1467,1,0,0,
        0,9155,9158,3,1404,702,0,9156,9158,3,1500,750,0,9157,9155,1,0,0,
        0,9157,9156,1,0,0,0,9158,1469,1,0,0,0,9159,9162,3,1394,697,0,9160,
        9162,3,1438,719,0,9161,9159,1,0,0,0,9161,9160,1,0,0,0,9162,1471,
        1,0,0,0,9163,9166,3,1424,712,0,9164,9166,3,1404,702,0,9165,9163,
        1,0,0,0,9165,9164,1,0,0,0,9166,1473,1,0,0,0,9167,9168,5,32,0,0,9168,
        9169,5,33,0,0,9169,1475,1,0,0,0,9170,9171,7,166,0,0,9171,1477,1,
        0,0,0,9172,9173,7,167,0,0,9173,1479,1,0,0,0,9174,9175,5,246,0,0,
        9175,9181,5,28,0,0,9176,9177,5,312,0,0,9177,9181,5,28,0,0,9178,9179,
        5,516,0,0,9179,9181,5,28,0,0,9180,9174,1,0,0,0,9180,9176,1,0,0,0,
        9180,9178,1,0,0,0,9181,1481,1,0,0,0,9182,9183,7,167,0,0,9183,9184,
        5,28,0,0,9184,1483,1,0,0,0,9185,9186,3,1438,719,0,9186,1485,1,0,
        0,0,9187,9194,4,743,128,0,9188,9195,3,1492,746,0,9189,9195,3,1504,
        752,0,9190,9195,5,208,0,0,9191,9195,5,522,0,0,9192,9193,4,743,129,
        0,9193,9195,5,722,0,0,9194,9188,1,0,0,0,9194,9189,1,0,0,0,9194,9190,
        1,0,0,0,9194,9191,1,0,0,0,9194,9192,1,0,0,0,9195,9204,1,0,0,0,9196,
        9202,3,1496,748,0,9197,9202,3,1488,744,0,9198,9202,3,1490,745,0,
        9199,9202,3,1494,747,0,9200,9202,3,1502,751,0,9201,9196,1,0,0,0,
        9201,9197,1,0,0,0,9201,9198,1,0,0,0,9201,9199,1,0,0,0,9201,9200,
        1,0,0,0,9202,9204,1,0,0,0,9203,9187,1,0,0,0,9203,9201,1,0,0,0,9204,
        1487,1,0,0,0,9205,9206,7,168,0,0,9206,1489,1,0,0,0,9207,9208,7,169,
        0,0,9208,1491,1,0,0,0,9209,9220,4,746,130,0,9210,9221,3,1506,753,
        0,9211,9221,5,205,0,0,9212,9221,5,222,0,0,9213,9221,5,389,0,0,9214,
        9221,5,441,0,0,9215,9221,5,445,0,0,9216,9221,5,468,0,0,9217,9221,
        5,476,0,0,9218,9221,5,717,0,0,9219,9221,5,575,0,0,9220,9210,1,0,
        0,0,9220,9211,1,0,0,0,9220,9212,1,0,0,0,9220,9213,1,0,0,0,9220,9214,
        1,0,0,0,9220,9215,1,0,0,0,9220,9216,1,0,0,0,9220,9217,1,0,0,0,9220,
        9218,1,0,0,0,9220,9219,1,0,0,0,9221,9228,1,0,0,0,9222,9226,3,1496,
        748,0,9223,9226,3,1494,747,0,9224,9226,3,1502,751,0,9225,9222,1,
        0,0,0,9225,9223,1,0,0,0,9225,9224,1,0,0,0,9226,9228,1,0,0,0,9227,
        9209,1,0,0,0,9227,9225,1,0,0,0,9228,1493,1,0,0,0,9229,9230,7,170,
        0,0,9230,1495,1,0,0,0,9231,9237,7,171,0,0,9232,9233,4,748,131,0,
        9233,9237,7,172,0,0,9234,9235,4,748,132,0,9235,9237,7,173,0,0,9236,
        9231,1,0,0,0,9236,9232,1,0,0,0,9236,9234,1,0,0,0,9237,1497,1,0,0,
        0,9238,9241,4,749,133,0,9239,9242,3,1506,753,0,9240,9242,3,1504,
        752,0,9241,9239,1,0,0,0,9241,9240,1,0,0,0,9242,9249,1,0,0,0,9243,
        9247,3,1496,748,0,9244,9247,3,1490,745,0,9245,9247,3,1502,751,0,
        9246,9243,1,0,0,0,9246,9244,1,0,0,0,9246,9245,1,0,0,0,9247,9249,
        1,0,0,0,9248,9238,1,0,0,0,9248,9246,1,0,0,0,9249,1499,1,0,0,0,9250,
        9255,3,1496,748,0,9251,9255,3,1488,744,0,9252,9255,3,1490,745,0,
        9253,9255,3,1494,747,0,9254,9250,1,0,0,0,9254,9251,1,0,0,0,9254,
        9252,1,0,0,0,9254,9253,1,0,0,0,9255,1501,1,0,0,0,9256,9257,7,167,
        0,0,9257,1503,1,0,0,0,9258,9259,7,174,0,0,9259,1505,1,0,0,0,9260,
        9264,7,175,0,0,9261,9262,4,753,134,0,9262,9264,5,668,0,0,9263,9260,
        1,0,0,0,9263,9261,1,0,0,0,9264,1507,1,0,0,0,1176,1510,1513,1515,
        1595,1603,1608,1618,1625,1631,1634,1637,1644,1649,1652,1657,1663,
        1665,1669,1673,1682,1686,1691,1697,1704,1709,1714,1721,1724,1730,
        1733,1740,1750,1755,1760,1768,1774,1778,1783,1792,1798,1804,1810,
        1819,1825,1834,1846,1850,1856,1860,1866,1870,1875,1878,1884,1890,
        1896,1900,1905,1909,1913,1929,1937,1945,1952,1979,1994,1997,2003,
        2008,2014,2019,2023,2028,2032,2036,2040,2044,2048,2050,2060,2068,
        2075,2083,2087,2092,2099,2104,2109,2119,2123,2128,2131,2134,2137,
        2144,2151,2155,2180,2182,2190,2192,2212,2216,2222,2229,2232,2236,
        2243,2246,2255,2262,2267,2270,2275,2281,2284,2288,2294,2297,2302,
        2306,2315,2318,2324,2331,2336,2340,2349,2352,2360,2366,2370,2380,
        2383,2388,2396,2411,2414,2417,2422,2428,2438,2448,2451,2454,2458,
        2466,2479,2483,2488,2497,2514,2533,2542,2545,2553,2560,2562,2569,
        2574,2588,2592,2598,2604,2610,2616,2622,2627,2631,2639,2645,2651,
        2657,2662,2665,2668,2677,2680,2691,2695,2706,2714,2718,2727,2730,
        2736,2738,2742,2749,2762,2769,2775,2778,2795,2814,2818,2824,2830,
        2836,2841,2848,2855,2860,2863,2867,2871,2876,2880,2884,2890,2895,
        2898,2902,2908,2912,2916,2924,2932,2941,2950,2963,2966,2969,2975,
        2983,2988,2991,2994,2997,3000,3002,3008,3010,3026,3033,3036,3038,
        3040,3050,3052,3056,3059,3062,3066,3070,3075,3078,3081,3087,3090,
        3099,3109,3112,3115,3119,3125,3130,3135,3140,3144,3151,3162,3165,
        3168,3171,3175,3178,3181,3187,3190,3193,3196,3199,3203,3206,3209,
        3221,3229,3245,3248,3252,3256,3264,3272,3276,3296,3299,3303,3309,
        3313,3316,3325,3335,3338,3342,3345,3349,3354,3357,3362,3368,3377,
        3383,3388,3391,3394,3397,3400,3403,3406,3421,3425,3431,3434,3437,
        3443,3448,3452,3455,3462,3464,3481,3493,3498,3501,3504,3509,3515,
        3531,3551,3560,3564,3571,3576,3585,3595,3609,3616,3625,3634,3640,
        3646,3652,3655,3661,3668,3672,3678,3684,3686,3689,3693,3703,3708,
        3713,3720,3729,3737,3742,3746,3752,3755,3758,3762,3766,3776,3780,
        3783,3786,3789,3794,3800,3803,3809,3812,3814,3819,3831,3840,3853,
        3856,3861,3868,3872,3875,3881,3895,3902,3911,3917,3926,3930,3934,
        3944,3946,3954,3961,3966,3969,3973,3976,3982,3985,3988,3994,4001,
        4006,4010,4013,4016,4019,4021,4025,4032,4038,4042,4047,4050,4053,
        4056,4058,4063,4072,4081,4085,4091,4094,4097,4103,4110,4112,4120,
        4126,4128,4138,4140,4151,4157,4164,4172,4176,4180,4183,4185,4193,
        4202,4211,4218,4225,4356,4410,4417,4421,4437,4449,4452,4464,4468,
        4474,4481,4488,4495,4502,4509,4516,4519,4526,4534,4542,4552,4558,
        4562,4565,4568,4571,4574,4577,4582,4585,4592,4598,4622,4629,4632,
        4641,4647,4668,4674,4680,4687,4695,4701,4713,4715,4721,4725,4727,
        4731,4742,4747,4753,4760,4763,4766,4772,4774,4782,4785,4787,4789,
        4796,4807,4810,4812,4816,4821,4823,4828,4834,4837,4839,4843,4846,
        4855,4864,4870,4872,4874,4883,4887,4893,4896,4898,4909,4914,4919,
        4925,4927,4931,4933,4941,4945,4950,4953,4958,4963,4969,4978,4989,
        4991,5003,5008,5016,5022,5024,5031,5033,5040,5045,5056,5061,5063,
        5067,5073,5076,5079,5089,5091,5097,5110,5114,5119,5136,5142,5151,
        5159,5163,5169,5179,5183,5192,5197,5203,5205,5209,5220,5227,5233,
        5237,5242,5247,5255,5259,5264,5273,5286,5288,5302,5311,5313,5320,
        5325,5329,5334,5342,5349,5353,5359,5366,5369,5376,5379,5385,5402,
        5407,5420,5423,5434,5436,5442,5456,5473,5478,5481,5485,5488,5496,
        5502,5507,5510,5512,5516,5521,5523,5535,5541,5555,5567,5571,5573,
        5581,5585,5594,5607,5612,5616,5620,5623,5627,5631,5634,5639,5642,
        5648,5651,5657,5660,5687,5693,5696,5712,5719,5723,5726,5729,5736,
        5740,5743,5746,5750,5756,5759,5763,5784,5789,5797,5802,5805,5809,
        5813,5817,5823,5827,5832,5837,5848,5850,5856,5878,5900,5907,5934,
        5936,5940,5952,5962,5972,5976,5984,5987,5991,6000,6004,6011,6016,
        6024,6029,6035,6042,6047,6053,6056,6066,6068,6075,6080,6084,6087,
        6094,6099,6103,6114,6122,6126,6129,6132,6136,6140,6145,6151,6155,
        6166,6169,6172,6175,6183,6187,6192,6200,6208,6214,6218,6224,6233,
        6244,6254,6272,6275,6279,6290,6292,6301,6313,6315,6322,6328,6334,
        6342,6353,6357,6386,6388,6394,6411,6418,6432,6443,6448,6459,6469,
        6476,6479,6513,6521,6523,6533,6538,6543,6550,6556,6561,6566,6572,
        6576,6581,6586,6593,6601,6606,6610,6614,6618,6620,6638,6646,6650,
        6657,6669,6672,6676,6684,6696,6703,6707,6711,6717,6727,6736,6738,
        6741,6750,6757,6770,6775,6782,6788,6814,6824,6856,6875,6881,6885,
        6916,6922,6934,6947,6951,6955,6983,7033,7043,7055,7060,7068,7088,
        7092,7108,7111,7116,7119,7128,7132,7138,7144,7148,7159,7165,7167,
        7174,7181,7185,7192,7197,7202,7211,7214,7218,7223,7225,7229,7233,
        7246,7250,7253,7257,7261,7265,7272,7276,7280,7288,7292,7299,7305,
        7313,7334,7339,7346,7368,7384,7394,7398,7405,7408,7419,7428,7431,
        7438,7443,7469,7475,7481,7485,7495,7499,7512,7524,7540,7548,7558,
        7561,7566,7570,7577,7582,7589,7597,7600,7605,7613,7616,7630,7633,
        7646,7650,7652,7657,7662,7669,7675,7681,7686,7689,7695,7700,7703,
        7709,7713,7719,7721,7724,7730,7736,7743,7745,7747,7751,7757,7761,
        7765,7770,7775,7778,7781,7791,7797,7804,7809,7822,7830,7836,7841,
        7852,7856,7861,7865,7868,7873,7877,7885,7893,7895,7904,7912,7919,
        7922,7930,7939,7941,7947,7951,7960,7966,7969,7980,7989,7992,7997,
        7999,8002,8005,8009,8012,8016,8021,8024,8028,8031,8035,8040,8044,
        8056,8060,8066,8069,8074,8078,8082,8087,8096,8099,8103,8107,8110,
        8114,8118,8123,8128,8133,8138,8143,8145,8150,8157,8165,8171,8173,
        8177,8181,8185,8189,8204,8210,8217,8221,8226,8231,8234,8238,8241,
        8246,8250,8256,8260,8264,8269,8274,8279,8284,8289,8294,8299,8304,
        8309,8314,8319,8324,8329,8339,8345,8351,8356,8363,8368,8377,8383,
        8388,8392,8395,8399,8404,8408,8413,8417,8426,8429,8432,8435,8439,
        8443,8447,8462,8465,8467,8472,8481,8484,8488,8500,8512,8517,8522,
        8531,8536,8545,8550,8554,8558,8562,8567,8572,8578,8583,8586,8593,
        8602,8609,8626,8628,8639,8651,8664,8672,8679,8688,8694,8702,8708,
        8719,8727,8733,8737,8740,8746,8754,8793,8818,8828,8833,8835,8842,
        8854,8856,8868,8877,8888,8910,8914,8938,8949,8951,8955,8962,8970,
        8977,8983,8996,9000,9007,9016,9021,9023,9039,9046,9051,9059,9062,
        9067,9077,9085,9090,9095,9098,9102,9107,9117,9123,9137,9141,9153,
        9157,9161,9165,9180,9194,9201,9203,9220,9225,9227,9236,9241,9246,
        9248,9254,9263
    ]);

    private static _atn: ATN;
    public getATN(): ATN {
        if (!MySQLParser._atn) {
            MySQLParser._atn = new ATNDeserializer().deserialize(MySQLParser._serializedATN);
        }

        return MySQLParser._atn;
    }


    private static readonly vocabulary = new Vocabulary(MySQLParser.literalNames, MySQLParser.symbolicNames, []);

    public override getVocabulary(): Vocabulary {
        return MySQLParser.vocabulary;
    }
}

export class QueryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public simpleStatement(): SimpleStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleStatement, 0);
    }
    public beginWork(): BeginWorkContext | null {
        return this.getRuleContext(MySQLParser.RULE_beginWork, 0);
    }
    public SEMICOLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_query;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQuery) {
             listener.enterQuery(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQuery) {
             listener.exitQuery(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterStatement, 0);
    }
    public createStatement(): CreateStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_createStatement, 0);
    }
    public dropStatement(): DropStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropStatement, 0);
    }
    public renameTableStatement(): RenameTableStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_renameTableStatement, 0);
    }
    public truncateTableStatement(): TruncateTableStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_truncateTableStatement, 0);
    }
    public importStatement(): ImportStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_importStatement, 0);
    }
    public callStatement(): CallStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_callStatement, 0);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_deleteStatement, 0);
    }
    public doStatement(): DoStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_doStatement, 0);
    }
    public handlerStatement(): HandlerStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_handlerStatement, 0);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertStatement, 0);
    }
    public loadStatement(): LoadStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadStatement, 0);
    }
    public replaceStatement(): ReplaceStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_replaceStatement, 0);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateStatement, 0);
    }
    public transactionOrLockingStatement(): TransactionOrLockingStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionOrLockingStatement, 0);
    }
    public replicationStatement(): ReplicationStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicationStatement, 0);
    }
    public preparedStatement(): PreparedStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_preparedStatement, 0);
    }
    public cloneStatement(): CloneStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_cloneStatement, 0);
    }
    public accountManagementStatement(): AccountManagementStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_accountManagementStatement, 0);
    }
    public tableAdministrationStatement(): TableAdministrationStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAdministrationStatement, 0);
    }
    public uninstallStatement(): UninstallStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_uninstallStatement, 0);
    }
    public installStatement(): InstallStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_installStatement, 0);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_setStatement, 0);
    }
    public showDatabasesStatement(): ShowDatabasesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showDatabasesStatement, 0);
    }
    public showTablesStatement(): ShowTablesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showTablesStatement, 0);
    }
    public showTriggersStatement(): ShowTriggersStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showTriggersStatement, 0);
    }
    public showEventsStatement(): ShowEventsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEventsStatement, 0);
    }
    public showTableStatusStatement(): ShowTableStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showTableStatusStatement, 0);
    }
    public showOpenTablesStatement(): ShowOpenTablesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showOpenTablesStatement, 0);
    }
    public showParseTreeStatement(): ShowParseTreeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showParseTreeStatement, 0);
    }
    public showPluginsStatement(): ShowPluginsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showPluginsStatement, 0);
    }
    public showEngineLogsStatement(): ShowEngineLogsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEngineLogsStatement, 0);
    }
    public showEngineMutexStatement(): ShowEngineMutexStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEngineMutexStatement, 0);
    }
    public showEngineStatusStatement(): ShowEngineStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEngineStatusStatement, 0);
    }
    public showColumnsStatement(): ShowColumnsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showColumnsStatement, 0);
    }
    public showBinaryLogsStatement(): ShowBinaryLogsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showBinaryLogsStatement, 0);
    }
    public showBinaryLogStatusStatement(): ShowBinaryLogStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showBinaryLogStatusStatement, 0);
    }
    public showReplicasStatement(): ShowReplicasStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showReplicasStatement, 0);
    }
    public showBinlogEventsStatement(): ShowBinlogEventsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showBinlogEventsStatement, 0);
    }
    public showRelaylogEventsStatement(): ShowRelaylogEventsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showRelaylogEventsStatement, 0);
    }
    public showKeysStatement(): ShowKeysStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showKeysStatement, 0);
    }
    public showEnginesStatement(): ShowEnginesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showEnginesStatement, 0);
    }
    public showCountWarningsStatement(): ShowCountWarningsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCountWarningsStatement, 0);
    }
    public showCountErrorsStatement(): ShowCountErrorsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCountErrorsStatement, 0);
    }
    public showWarningsStatement(): ShowWarningsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showWarningsStatement, 0);
    }
    public showErrorsStatement(): ShowErrorsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showErrorsStatement, 0);
    }
    public showProfilesStatement(): ShowProfilesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showProfilesStatement, 0);
    }
    public showProfileStatement(): ShowProfileStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showProfileStatement, 0);
    }
    public showStatusStatement(): ShowStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showStatusStatement, 0);
    }
    public showProcessListStatement(): ShowProcessListStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showProcessListStatement, 0);
    }
    public showVariablesStatement(): ShowVariablesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showVariablesStatement, 0);
    }
    public showCharacterSetStatement(): ShowCharacterSetStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCharacterSetStatement, 0);
    }
    public showCollationStatement(): ShowCollationStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCollationStatement, 0);
    }
    public showPrivilegesStatement(): ShowPrivilegesStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showPrivilegesStatement, 0);
    }
    public showGrantsStatement(): ShowGrantsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showGrantsStatement, 0);
    }
    public showCreateDatabaseStatement(): ShowCreateDatabaseStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateDatabaseStatement, 0);
    }
    public showCreateTableStatement(): ShowCreateTableStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateTableStatement, 0);
    }
    public showCreateViewStatement(): ShowCreateViewStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateViewStatement, 0);
    }
    public showMasterStatusStatement(): ShowMasterStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showMasterStatusStatement, 0);
    }
    public showReplicaStatusStatement(): ShowReplicaStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showReplicaStatusStatement, 0);
    }
    public showCreateProcedureStatement(): ShowCreateProcedureStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureStatement, 0);
    }
    public showCreateFunctionStatement(): ShowCreateFunctionStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionStatement, 0);
    }
    public showCreateTriggerStatement(): ShowCreateTriggerStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateTriggerStatement, 0);
    }
    public showCreateProcedureStatusStatement(): ShowCreateProcedureStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureStatusStatement, 0);
    }
    public showCreateFunctionStatusStatement(): ShowCreateFunctionStatusStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionStatusStatement, 0);
    }
    public showCreateProcedureCodeStatement(): ShowCreateProcedureCodeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureCodeStatement, 0);
    }
    public showCreateFunctionCodeStatement(): ShowCreateFunctionCodeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionCodeStatement, 0);
    }
    public showCreateEventStatement(): ShowCreateEventStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateEventStatement, 0);
    }
    public showCreateUserStatement(): ShowCreateUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCreateUserStatement, 0);
    }
    public resourceGroupManagement(): ResourceGroupManagementContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupManagement, 0);
    }
    public otherAdministrativeStatement(): OtherAdministrativeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_otherAdministrativeStatement, 0);
    }
    public utilityStatement(): UtilityStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_utilityStatement, 0);
    }
    public getDiagnosticsStatement(): GetDiagnosticsStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_getDiagnosticsStatement, 0);
    }
    public signalStatement(): SignalStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalStatement, 0);
    }
    public resignalStatement(): ResignalStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_resignalStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleStatement) {
             listener.enterSimpleStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleStatement) {
             listener.exitSimpleStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleStatement) {
            return visitor.visitSimpleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public alterTable(): AlterTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTable, 0);
    }
    public alterDatabase(): AlterDatabaseContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterDatabase, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0);
    }
    public alterView(): AlterViewContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterView, 0);
    }
    public alterEvent(): AlterEventContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterEvent, 0);
    }
    public alterTablespace(): AlterTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTablespace, 0);
    }
    public alterUndoTablespace(): AlterUndoTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterUndoTablespace, 0);
    }
    public alterLogfileGroup(): AlterLogfileGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroup, 0);
    }
    public alterServer(): AlterServerContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterServer, 0);
    }
    public alterInstanceStatement(): AlterInstanceStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterInstanceStatement, 0);
    }
    public routineAlterOptions(): RoutineAlterOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineAlterOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterStatement) {
             listener.enterAlterStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterStatement) {
             listener.exitAlterStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterStatement) {
            return visitor.visitAlterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public alterDatabaseOption_list(): Vector<AlterDatabaseOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterDatabaseOption);
    }
    public alterDatabaseOption(i: number): AlterDatabaseOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterDatabaseOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterDatabase;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterDatabase) {
             listener.enterAlterDatabase(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterDatabase) {
             listener.exitAlterDatabase(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterDatabase) {
            return visitor.visitAlterDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseOption(): CreateDatabaseOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createDatabaseOption, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public ternaryOption(): TernaryOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_ternaryOption, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterDatabaseOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterDatabaseOption) {
             listener.enterAlterDatabaseOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterDatabaseOption) {
             listener.exitAlterDatabaseOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterDatabaseOption) {
            return visitor.visitAlterDatabaseOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public schedule(): ScheduleContext | null {
        return this.getRuleContext(MySQLParser.RULE_schedule, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterEvent;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterEvent) {
             listener.enterAlterEvent(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterEvent) {
             listener.exitAlterEvent(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterEvent) {
            return visitor.visitAlterEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroupOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterLogfileGroup) {
             listener.enterAlterLogfileGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterLogfileGroup) {
             listener.exitAlterLogfileGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterLogfileGroup) {
            return visitor.visitAlterLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLogfileGroupOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterLogfileGroupOption_list(): Vector<AlterLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterLogfileGroupOption);
    }
    public alterLogfileGroupOption(i: number): AlterLogfileGroupOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroupOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroupOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterLogfileGroupOptions) {
             listener.enterAlterLogfileGroupOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterLogfileGroupOptions) {
             listener.exitAlterLogfileGroupOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterLogfileGroupOptions) {
            return visitor.visitAlterLogfileGroupOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroupOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterLogfileGroupOption) {
             listener.enterAlterLogfileGroupOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterLogfileGroupOption) {
             listener.exitAlterLogfileGroupOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterLogfileGroupOption) {
            return visitor.visitAlterLogfileGroupOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverRef(): ServerRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverRef, 0);
    }
    public serverOptions(): ServerOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterServer;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterServer) {
             listener.enterAlterServer(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterServer) {
             listener.exitAlterServer(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterServer) {
            return visitor.visitAlterServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0);
    }
    public alterTableActions(): AlterTableActionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTableActions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTable) {
             listener.enterAlterTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTable) {
             listener.exitAlterTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTable) {
            return visitor.visitAlterTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableActionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandList(): AlterCommandListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandList, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionClause, 0);
    }
    public removePartitioning(): RemovePartitioningContext | null {
        return this.getRuleContext(MySQLParser.RULE_removePartitioning, 0);
    }
    public standaloneAlterCommands(): StandaloneAlterCommandsContext | null {
        return this.getRuleContext(MySQLParser.RULE_standaloneAlterCommands, 0);
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifierList, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTableActions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTableActions) {
             listener.enterAlterTableActions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTableActions) {
             listener.exitAlterTableActions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTableActions) {
            return visitor.visitAlterTableActions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterCommandListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifierList, 0);
    }
    public alterList(): AlterListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterList, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterCommandList) {
             listener.enterAlterCommandList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterCommandList) {
             listener.exitAlterCommandList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterCommandList) {
            return visitor.visitAlterCommandList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterCommandsModifierListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterCommandsModifier_list(): Vector<AlterCommandsModifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterCommandsModifier);
    }
    public alterCommandsModifier(i: number): AlterCommandsModifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifier, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandsModifierList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterCommandsModifierList) {
             listener.enterAlterCommandsModifierList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterCommandsModifierList) {
             listener.exitAlterCommandsModifierList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterCommandsModifierList) {
            return visitor.visitAlterCommandsModifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneAlterCommandsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public alterPartition(): AlterPartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterPartition, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_standaloneAlterCommands;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStandaloneAlterCommands) {
             listener.enterStandaloneAlterCommands(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStandaloneAlterCommands) {
             listener.exitStandaloneAlterCommands(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStandaloneAlterCommands) {
            return visitor.visitStandaloneAlterCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinitions, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public noWriteToBinLog_list(): Vector<NoWriteToBinLogContext> {
        return this.getRuleContexts(MySQLParser.RULE_noWriteToBinLog);
    }
    public noWriteToBinLog(i: number): NoWriteToBinLogContext | null {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, i);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext | null {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0);
    }
    public OPTIMIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public checkOption_list(): Vector<CheckOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_checkOption);
    }
    public checkOption(i: number): CheckOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkOption, i);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public repairType_list(): Vector<RepairTypeContext> {
        return this.getRuleContexts(MySQLParser.RULE_repairType);
    }
    public repairType(i: number): RepairTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_repairType, i);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public EXCHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public withValidation(): WithValidationContext | null {
        return this.getRuleContext(MySQLParser.RULE_withValidation, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterPartition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterPartition) {
             listener.enterAlterPartition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterPartition) {
             listener.exitAlterPartition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterPartition) {
            return visitor.visitAlterPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterListItem_list(): Vector<AlterListItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterListItem);
    }
    public alterListItem(i: number): AlterListItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterListItem, i);
    }
    public createTableOptionsSpaceSeparated_list(): Vector<CreateTableOptionsSpaceSeparatedContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOptionsSpaceSeparated);
    }
    public createTableOptionsSpaceSeparated(i: number): CreateTableOptionsSpaceSeparatedContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOptionsSpaceSeparated, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public alterCommandsModifier_list(): Vector<AlterCommandsModifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterCommandsModifier);
    }
    public alterCommandsModifier(i: number): AlterCommandsModifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifier, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterList) {
             listener.enterAlterList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterList) {
             listener.exitAlterList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterList) {
            return visitor.visitAlterList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterCommandsModifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterAlgorithmOption, 0);
    }
    public alterLockOption(): AlterLockOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLockOption, 0);
    }
    public withValidation(): WithValidationContext | null {
        return this.getRuleContext(MySQLParser.RULE_withValidation, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandsModifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterCommandsModifier) {
             listener.enterAlterCommandsModifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterCommandsModifier) {
             listener.exitAlterCommandsModifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterCommandsModifier) {
            return visitor.visitAlterCommandsModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterListItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public fieldDefinition(): FieldDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldDefinition, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public tableElementList(): TableElementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableElementList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COLUMN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_SYMBOL, 0);
    }
    public checkOrReferences(): CheckOrReferencesContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkOrReferences, 0);
    }
    public place(): PlaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_place, 0);
    }
    public tableConstraintDef(): TableConstraintDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableConstraintDef, 0);
    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public columnInternalRef(): ColumnInternalRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRef, 0);
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public indexRef(): IndexRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexRef, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public CONSTRAINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
    }
    public restrict(): RestrictContext | null {
        return this.getRuleContext(MySQLParser.RULE_restrict, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext | null {
        return this.getRuleContext(MySQLParser.RULE_signedLiteralOrNull, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public alterOrderList(): AlterOrderListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterOrderList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterListItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterListItem) {
             listener.enterAlterListItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterListItem) {
             listener.exitAlterListItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterListItem) {
            return visitor.visitAlterListItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PlaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_place;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPlace) {
             listener.enterPlace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPlace) {
             listener.exitPlace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPlace) {
            return visitor.visitPlace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RestrictContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_restrict;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRestrict) {
             listener.enterRestrict(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRestrict) {
             listener.exitRestrict(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRestrict) {
            return visitor.visitRestrict(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterOrderListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier);
    }
    public identifier(i: number): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, i);
    }
    public direction_list(): Vector<DirectionContext> {
        return this.getRuleContexts(MySQLParser.RULE_direction);
    }
    public direction(i: number): DirectionContext | null {
        return this.getRuleContext(MySQLParser.RULE_direction, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterOrderList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterOrderList) {
             listener.enterAlterOrderList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterOrderList) {
             listener.exitAlterOrderList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterOrderList) {
            return visitor.visitAlterOrderList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterAlgorithmOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterAlgorithmOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterAlgorithmOption) {
             listener.enterAlterAlgorithmOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterAlgorithmOption) {
             listener.exitAlterAlgorithmOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterAlgorithmOption) {
            return visitor.visitAlterAlgorithmOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterLockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLockOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterLockOption) {
             listener.enterAlterLockOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterLockOption) {
             listener.exitAlterLockOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterLockOption) {
            return visitor.visitAlterLockOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexLockAndAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterAlgorithmOption, 0);
    }
    public alterLockOption(): AlterLockOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterLockOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexLockAndAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexLockAndAlgorithm) {
             listener.enterIndexLockAndAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexLockAndAlgorithm) {
             listener.exitIndexLockAndAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexLockAndAlgorithm) {
            return visitor.visitIndexLockAndAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithValidationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALIDATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public WITHOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withValidation;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWithValidation) {
             listener.enterWithValidation(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWithValidation) {
             listener.exitWithValidation(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWithValidation) {
            return visitor.visitWithValidation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemovePartitioningContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_removePartitioning;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRemovePartitioning) {
             listener.enterRemovePartitioning(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRemovePartitioning) {
             listener.exitRemovePartitioning(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRemovePartitioning) {
            return visitor.visitRemovePartitioning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AllOrPartitionNameListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_allOrPartitionNameList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAllOrPartitionNameList) {
             listener.enterAllOrPartitionNameList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAllOrPartitionNameList) {
             listener.exitAllOrPartitionNameList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAllOrPartitionNameList) {
            return visitor.visitAllOrPartitionNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public alterTablespaceOptions(): AlterTablespaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTablespaceOptions, 0);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTablespace) {
             listener.enterAlterTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTablespace) {
             listener.exitAlterTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTablespace) {
            return visitor.visitAlterTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUndoTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterUndoTablespace) {
             listener.enterAlterUndoTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterUndoTablespace) {
             listener.exitAlterUndoTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterUndoTablespace) {
            return visitor.visitAlterUndoTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UndoTableSpaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public undoTableSpaceOption_list(): Vector<UndoTableSpaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_undoTableSpaceOption);
    }
    public undoTableSpaceOption(i: number): UndoTableSpaceOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_undoTableSpaceOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUndoTableSpaceOptions) {
             listener.enterUndoTableSpaceOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUndoTableSpaceOptions) {
             listener.exitUndoTableSpaceOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUndoTableSpaceOptions) {
            return visitor.visitUndoTableSpaceOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UndoTableSpaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_undoTableSpaceOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUndoTableSpaceOption) {
             listener.enterUndoTableSpaceOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUndoTableSpaceOption) {
             listener.exitUndoTableSpaceOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUndoTableSpaceOption) {
            return visitor.visitUndoTableSpaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTablespaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterTablespaceOption_list(): Vector<AlterTablespaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterTablespaceOption);
    }
    public alterTablespaceOption(i: number): AlterTablespaceOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterTablespaceOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespaceOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTablespaceOptions) {
             listener.enterAlterTablespaceOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTablespaceOptions) {
             listener.exitAlterTablespaceOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTablespaceOptions) {
            return visitor.visitAlterTablespaceOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public tsOptionEncryption(): TsOptionEncryptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEncryption, 0);
    }
    public tsOptionEngineAttribute(): TsOptionEngineAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngineAttribute, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespaceOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterTablespaceOption) {
             listener.enterAlterTablespaceOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterTablespaceOption) {
             listener.exitAlterTablespaceOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterTablespaceOption) {
            return visitor.visitAlterTablespaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeTablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeTablespaceOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeTablespaceOption) {
             listener.enterChangeTablespaceOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeTablespaceOption) {
             listener.exitChangeTablespaceOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeTablespaceOption) {
            return visitor.visitChangeTablespaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRef(): ViewRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewRef, 0);
    }
    public viewTail(): ViewTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewTail, 0);
    }
    public viewAlgorithm(): ViewAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewAlgorithm, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public viewSuid(): ViewSuidContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewSuid, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterView;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterView) {
             listener.enterAlterView(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterView) {
             listener.exitAlterView(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterView) {
            return visitor.visitAlterView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public viewQueryBlock(): ViewQueryBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewQueryBlock, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewTail;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewTail) {
             listener.enterViewTail(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewTail) {
             listener.exitViewTail(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewTail) {
            return visitor.visitViewTail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewQueryBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0);
    }
    public viewCheckOption(): ViewCheckOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewCheckOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewQueryBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewQueryBlock) {
             listener.enterViewQueryBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewQueryBlock) {
             listener.exitViewQueryBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewQueryBlock) {
            return visitor.visitViewQueryBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewCheckOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewCheckOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewCheckOption) {
             listener.enterViewCheckOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewCheckOption) {
             listener.exitViewCheckOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewCheckOption) {
            return visitor.visitViewCheckOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterInstanceStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public TLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TLS_SYMBOL, 0);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier);
    }
    public identifier(i: number): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, i);
    }
    public KEYRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYRING_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterInstanceStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterInstanceStatement) {
             listener.enterAlterInstanceStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterInstanceStatement) {
             listener.exitAlterInstanceStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterInstanceStatement) {
            return visitor.visitAlterInstanceStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public createDatabase(): CreateDatabaseContext | null {
        return this.getRuleContext(MySQLParser.RULE_createDatabase, 0);
    }
    public createTable(): CreateTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTable, 0);
    }
    public createFunction(): CreateFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createFunction, 0);
    }
    public createProcedure(): CreateProcedureContext | null {
        return this.getRuleContext(MySQLParser.RULE_createProcedure, 0);
    }
    public createUdf(): CreateUdfContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUdf, 0);
    }
    public createLogfileGroup(): CreateLogfileGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_createLogfileGroup, 0);
    }
    public createView(): CreateViewContext | null {
        return this.getRuleContext(MySQLParser.RULE_createView, 0);
    }
    public createTrigger(): CreateTriggerContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTrigger, 0);
    }
    public createIndex(): CreateIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_createIndex, 0);
    }
    public createServer(): CreateServerContext | null {
        return this.getRuleContext(MySQLParser.RULE_createServer, 0);
    }
    public createTablespace(): CreateTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTablespace, 0);
    }
    public createEvent(): CreateEventContext | null {
        return this.getRuleContext(MySQLParser.RULE_createEvent, 0);
    }
    public createRole(): CreateRoleContext | null {
        return this.getRuleContext(MySQLParser.RULE_createRole, 0);
    }
    public createSpatialReference(): CreateSpatialReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_createSpatialReference, 0);
    }
    public createUndoTablespace(): CreateUndoTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUndoTablespace, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateStatement) {
             listener.enterCreateStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateStatement) {
             listener.exitCreateStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateStatement) {
            return visitor.visitCreateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaName(): SchemaNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaName, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public createDatabaseOption_list(): Vector<CreateDatabaseOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createDatabaseOption);
    }
    public createDatabaseOption(i: number): CreateDatabaseOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createDatabaseOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createDatabase;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateDatabase) {
             listener.enterCreateDatabase(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateDatabase) {
             listener.exitCreateDatabase(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public defaultCharset(): DefaultCharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultCharset, 0);
    }
    public defaultCollation(): DefaultCollationContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultCollation, 0);
    }
    public defaultEncryption(): DefaultEncryptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultEncryption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createDatabaseOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateDatabaseOption) {
             listener.enterCreateDatabaseOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateDatabaseOption) {
             listener.exitCreateDatabaseOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateDatabaseOption) {
            return visitor.visitCreateDatabaseOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public tableElementList(): TableElementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableElementList, 0);
    }
    public createTableOptionsEtc(): CreateTableOptionsEtcContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOptionsEtc, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableElement_list(): Vector<TableElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableElement);
    }
    public tableElement(i: number): TableElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableElement, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableElementList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableElementList) {
             listener.enterTableElementList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableElementList) {
             listener.exitTableElementList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableElementList) {
            return visitor.visitTableElementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDefinition(): ColumnDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnDefinition, 0);
    }
    public tableConstraintDef(): TableConstraintDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableConstraintDef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableElement) {
             listener.enterTableElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableElement) {
             listener.exitTableElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableElement) {
            return visitor.visitTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DuplicateAsQeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public asCreateQueryExpression(): AsCreateQueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_asCreateQueryExpression, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_duplicateAsQe;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDuplicateAsQe) {
             listener.enterDuplicateAsQe(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDuplicateAsQe) {
             listener.exitDuplicateAsQe(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDuplicateAsQe) {
            return visitor.visitDuplicateAsQe(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AsCreateQueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_asCreateQueryExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAsCreateQueryExpression) {
             listener.enterAsCreateQueryExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAsCreateQueryExpression) {
             listener.exitAsCreateQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAsCreateQueryExpression) {
            return visitor.visitAsCreateQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionOrParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionOrParens;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpressionOrParens) {
             listener.enterQueryExpressionOrParens(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpressionOrParens) {
             listener.exitQueryExpressionOrParens(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpressionOrParens) {
            return visitor.visitQueryExpressionOrParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionWithOptLockingClausesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionWithOptLockingClauses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpressionWithOptLockingClauses) {
             listener.enterQueryExpressionWithOptLockingClauses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpressionWithOptLockingClauses) {
             listener.exitQueryExpressionWithOptLockingClauses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpressionWithOptLockingClauses) {
            return visitor.visitQueryExpressionWithOptLockingClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoutineContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public createProcedure(): CreateProcedureContext | null {
        return this.getRuleContext(MySQLParser.RULE_createProcedure, 0);
    }
    public createFunction(): CreateFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createFunction, 0);
    }
    public createUdf(): CreateUdfContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUdf, 0);
    }
    public SEMICOLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createRoutine;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateRoutine) {
             listener.enterCreateRoutine(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateRoutine) {
             listener.exitCreateRoutine(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateRoutine) {
            return visitor.visitCreateRoutine(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateProcedureContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureName(): ProcedureNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureName, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public storedRoutineBody(): StoredRoutineBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_storedRoutineBody, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public procedureParameter_list(): Vector<ProcedureParameterContext> {
        return this.getRuleContexts(MySQLParser.RULE_procedureParameter);
    }
    public procedureParameter(i: number): ProcedureParameterContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureParameter, i);
    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption);
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createProcedure;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateProcedure) {
             listener.enterCreateProcedure(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateProcedure) {
             listener.exitCreateProcedure(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateProcedure) {
            return visitor.visitCreateProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineStringContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public DOLLAR_QUOTED_STRING_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.DOLLAR_QUOTED_STRING_TEXT, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineString;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoutineString) {
             listener.enterRoutineString(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoutineString) {
             listener.exitRoutineString(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoutineString) {
            return visitor.visitRoutineString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StoredRoutineBodyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_storedRoutineBody;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStoredRoutineBody) {
             listener.enterStoredRoutineBody(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStoredRoutineBody) {
             listener.exitStoredRoutineBody(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStoredRoutineBody) {
            return visitor.visitStoredRoutineBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionName, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public typeWithOptCollate(): TypeWithOptCollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeWithOptCollate, 0);
    }
    public storedRoutineBody(): StoredRoutineBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_storedRoutineBody, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public functionParameter_list(): Vector<FunctionParameterContext> {
        return this.getRuleContexts(MySQLParser.RULE_functionParameter);
    }
    public functionParameter(i: number): FunctionParameterContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionParameter, i);
    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption);
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUdfContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public udfName(): UdfNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_udfName, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUdf;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUdf) {
             listener.enterCreateUdf(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUdf) {
             listener.exitCreateUdf(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUdf) {
            return visitor.visitCreateUdf(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineCreateOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineOption(): RoutineOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineOption, 0);
    }
    public DETERMINISTIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineCreateOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoutineCreateOption) {
             listener.enterRoutineCreateOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoutineCreateOption) {
             listener.exitRoutineCreateOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoutineCreateOption) {
            return visitor.visitRoutineCreateOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineAlterOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption);
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineAlterOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoutineAlterOptions) {
             listener.enterRoutineAlterOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoutineAlterOptions) {
             listener.exitRoutineAlterOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoutineAlterOptions) {
            return visitor.visitRoutineAlterOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineOptionContext extends ParserRuleContext {
    public _option!: Token;
    public _security!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public SQL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public READS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READS_SYMBOL, 0);
    }
    public MODIFIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFIES_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoutineOption) {
             listener.enterRoutineOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoutineOption) {
             listener.exitRoutineOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoutineOption) {
            return visitor.visitRoutineOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0);
    }
    public createIndexTarget(): CreateIndexTargetContext | null {
        return this.getRuleContext(MySQLParser.RULE_createIndexTarget, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0);
    }
    public FULLTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexLockAndAlgorithm, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public indexTypeClause(): IndexTypeClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexTypeClause, 0);
    }
    public indexOption_list(): Vector<IndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexOption);
    }
    public indexOption(i: number): IndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexOption, i);
    }
    public fulltextIndexOption_list(): Vector<FulltextIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_fulltextIndexOption);
    }
    public fulltextIndexOption(i: number): FulltextIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fulltextIndexOption, i);
    }
    public spatialIndexOption_list(): Vector<SpatialIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_spatialIndexOption);
    }
    public spatialIndexOption(i: number): SpatialIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_spatialIndexOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createIndex;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateIndex) {
             listener.enterCreateIndex(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateIndex) {
             listener.exitCreateIndex(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateIndex) {
            return visitor.visitCreateIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexNameAndTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexType, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexNameAndType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexNameAndType) {
             listener.enterIndexNameAndType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexNameAndType) {
             listener.exitIndexNameAndType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexNameAndType) {
            return visitor.visitIndexNameAndType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexTargetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public keyListWithExpression(): KeyListWithExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyListWithExpression, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createIndexTarget;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateIndexTarget) {
             listener.enterCreateIndexTarget(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateIndexTarget) {
             listener.exitCreateIndexTarget(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateIndexTarget) {
            return visitor.visitCreateIndexTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupName(): LogfileGroupNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupName, 0);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public logfileGroupOptions(): LogfileGroupOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createLogfileGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateLogfileGroup) {
             listener.enterCreateLogfileGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateLogfileGroup) {
             listener.exitCreateLogfileGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateLogfileGroup) {
            return visitor.visitCreateLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogfileGroupOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public logfileGroupOption_list(): Vector<LogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_logfileGroupOption);
    }
    public logfileGroupOption(i: number): LogfileGroupOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogfileGroupOptions) {
             listener.enterLogfileGroupOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogfileGroupOptions) {
             listener.exitLogfileGroupOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogfileGroupOptions) {
            return visitor.visitLogfileGroupOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0);
    }
    public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionUndoRedoBufferSize, 0);
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionNodegroup, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public tsOptionComment(): TsOptionCommentContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionComment, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogfileGroupOption) {
             listener.enterLogfileGroupOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogfileGroupOption) {
             listener.exitLogfileGroupOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogfileGroupOption) {
            return visitor.visitLogfileGroupOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverName(): ServerNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverName, 0);
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public serverOptions(): ServerOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createServer;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateServer) {
             listener.enterCreateServer(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateServer) {
             listener.exitCreateServer(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateServer) {
            return visitor.visitCreateServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public serverOption_list(): Vector<ServerOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_serverOption);
    }
    public serverOption(i: number): ServerOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverOption, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerOptions) {
             listener.enterServerOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerOptions) {
             listener.exitServerOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerOptions) {
            return visitor.visitServerOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerOption) {
             listener.enterServerOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerOption) {
             listener.exitServerOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerOption) {
            return visitor.visitServerOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceName(): TablespaceNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceName, 0);
    }
    public tsDataFileName(): TsDataFileNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsDataFileName, 0);
    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0);
    }
    public tablespaceOptions(): TablespaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTablespace) {
             listener.enterCreateTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTablespace) {
             listener.exitCreateTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTablespace) {
            return visitor.visitCreateTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceName(): TablespaceNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceName, 0);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public tsDataFile(): TsDataFileContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsDataFile, 0);
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUndoTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUndoTablespace) {
             listener.enterCreateUndoTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUndoTablespace) {
             listener.exitCreateUndoTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUndoTablespace) {
            return visitor.visitCreateUndoTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsDataFileNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public tsDataFile(): TsDataFileContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsDataFile, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsDataFileName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsDataFileName) {
             listener.enterTsDataFileName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsDataFileName) {
             listener.exitTsDataFileName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsDataFileName) {
            return visitor.visitTsDataFileName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsDataFileContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsDataFile;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsDataFile) {
             listener.enterTsDataFile(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsDataFile) {
             listener.exitTsDataFile(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsDataFile) {
            return visitor.visitTsDataFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablespaceOption_list(): Vector<TablespaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_tablespaceOption);
    }
    public tablespaceOption(i: number): TablespaceOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablespaceOptions) {
             listener.enterTablespaceOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablespaceOptions) {
             listener.exitTablespaceOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablespaceOptions) {
            return visitor.visitTablespaceOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0);
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0);
    }
    public tsOptionExtentSize(): TsOptionExtentSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionExtentSize, 0);
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionNodegroup, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public tsOptionComment(): TsOptionCommentContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionComment, 0);
    }
    public tsOptionFileblockSize(): TsOptionFileblockSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionFileblockSize, 0);
    }
    public tsOptionEncryption(): TsOptionEncryptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEncryption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablespaceOption) {
             listener.enterTablespaceOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablespaceOption) {
             listener.exitTablespaceOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablespaceOption) {
            return visitor.visitTablespaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionInitialSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionInitialSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionInitialSize) {
             listener.enterTsOptionInitialSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionInitialSize) {
             listener.exitTsOptionInitialSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionInitialSize) {
            return visitor.visitTsOptionInitialSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionUndoRedoBufferSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionUndoRedoBufferSize) {
             listener.enterTsOptionUndoRedoBufferSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionUndoRedoBufferSize) {
             listener.exitTsOptionUndoRedoBufferSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionUndoRedoBufferSize) {
            return visitor.visitTsOptionUndoRedoBufferSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionAutoextendSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionAutoextendSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionAutoextendSize) {
             listener.enterTsOptionAutoextendSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionAutoextendSize) {
             listener.exitTsOptionAutoextendSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionAutoextendSize) {
            return visitor.visitTsOptionAutoextendSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionMaxSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionMaxSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionMaxSize) {
             listener.enterTsOptionMaxSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionMaxSize) {
             listener.exitTsOptionMaxSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionMaxSize) {
            return visitor.visitTsOptionMaxSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionExtentSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionExtentSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionExtentSize) {
             listener.enterTsOptionExtentSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionExtentSize) {
             listener.exitTsOptionExtentSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionExtentSize) {
            return visitor.visitTsOptionExtentSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionNodegroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionNodegroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionNodegroup) {
             listener.enterTsOptionNodegroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionNodegroup) {
             listener.exitTsOptionNodegroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionNodegroup) {
            return visitor.visitTsOptionNodegroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionEngineContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEngine;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionEngine) {
             listener.enterTsOptionEngine(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionEngine) {
             listener.exitTsOptionEngine(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionEngine) {
            return visitor.visitTsOptionEngine(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionWaitContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionWait;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionWait) {
             listener.enterTsOptionWait(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionWait) {
             listener.exitTsOptionWait(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionWait) {
            return visitor.visitTsOptionWait(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionCommentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionComment;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionComment) {
             listener.enterTsOptionComment(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionComment) {
             listener.exitTsOptionComment(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionComment) {
            return visitor.visitTsOptionComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionFileblockSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionFileblockSize;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionFileblockSize) {
             listener.enterTsOptionFileblockSize(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionFileblockSize) {
             listener.exitTsOptionFileblockSize(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionFileblockSize) {
            return visitor.visitTsOptionFileblockSize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionEncryptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEncryption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionEncryption) {
             listener.enterTsOptionEncryption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionEncryption) {
             listener.exitTsOptionEncryption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionEncryption) {
            return visitor.visitTsOptionEncryption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TsOptionEngineAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEngineAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTsOptionEngineAttribute) {
             listener.enterTsOptionEngineAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTsOptionEngineAttribute) {
             listener.exitTsOptionEngineAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTsOptionEngineAttribute) {
            return visitor.visitTsOptionEngineAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewName, 0);
    }
    public viewTail(): ViewTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewTail, 0);
    }
    public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewReplaceOrAlgorithm, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public viewSuid(): ViewSuidContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewSuid, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createView;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public viewAlgorithm(): ViewAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewAlgorithm, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewReplaceOrAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewReplaceOrAlgorithm) {
             listener.enterViewReplaceOrAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewReplaceOrAlgorithm) {
             listener.exitViewReplaceOrAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewReplaceOrAlgorithm) {
            return visitor.visitViewReplaceOrAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewAlgorithmContext extends ParserRuleContext {
    public _algorithm!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewAlgorithm) {
             listener.enterViewAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewAlgorithm) {
             listener.exitViewAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewAlgorithm) {
            return visitor.visitViewAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewSuidContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewSuid;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewSuid) {
             listener.enterViewSuid(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewSuid) {
             listener.exitViewSuid(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewSuid) {
            return visitor.visitViewSuid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTriggerContext extends ParserRuleContext {
    public _timing!: Token;
    public _event!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerName(): TriggerNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_triggerName, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public EACH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EACH_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public BEFORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_triggerFollowsPrecedesClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTrigger;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTrigger) {
             listener.enterCreateTrigger(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTrigger) {
             listener.exitCreateTrigger(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTrigger) {
            return visitor.visitCreateTrigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
    public _ordering!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerFollowsPrecedesClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTriggerFollowsPrecedesClause) {
             listener.enterTriggerFollowsPrecedesClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTriggerFollowsPrecedesClause) {
             listener.exitTriggerFollowsPrecedesClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTriggerFollowsPrecedesClause) {
            return visitor.visitTriggerFollowsPrecedesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventName(): EventNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_eventName, 0);
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public schedule(): ScheduleContext | null {
        return this.getRuleContext(MySQLParser.RULE_schedule, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public definerClause(): DefinerClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createEvent;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateEvent) {
             listener.enterCreateEvent(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateEvent) {
             listener.exitCreateEvent(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateEvent) {
            return visitor.visitCreateEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createRole;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateRole) {
             listener.enterCreateRole(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateRole) {
             listener.exitCreateRole(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateSpatialReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public srsAttribute_list(): Vector<SrsAttributeContext> {
        return this.getRuleContexts(MySQLParser.RULE_srsAttribute);
    }
    public srsAttribute(i: number): SrsAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_srsAttribute, i);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createSpatialReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateSpatialReference) {
             listener.enterCreateSpatialReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateSpatialReference) {
             listener.exitCreateSpatialReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateSpatialReference) {
            return visitor.visitCreateSpatialReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SrsAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public DEFINITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_srsAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSrsAttribute) {
             listener.enterSrsAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSrsAttribute) {
             listener.exitSrsAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSrsAttribute) {
            return visitor.visitSrsAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public dropDatabase(): DropDatabaseContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropDatabase, 0);
    }
    public dropEvent(): DropEventContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropEvent, 0);
    }
    public dropFunction(): DropFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropFunction, 0);
    }
    public dropProcedure(): DropProcedureContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropProcedure, 0);
    }
    public dropIndex(): DropIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropIndex, 0);
    }
    public dropLogfileGroup(): DropLogfileGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroup, 0);
    }
    public dropServer(): DropServerContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropServer, 0);
    }
    public dropTable(): DropTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropTable, 0);
    }
    public dropTableSpace(): DropTableSpaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropTableSpace, 0);
    }
    public dropTrigger(): DropTriggerContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropTrigger, 0);
    }
    public dropView(): DropViewContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropView, 0);
    }
    public dropRole(): DropRoleContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropRole, 0);
    }
    public dropSpatialReference(): DropSpatialReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropSpatialReference, 0);
    }
    public dropUndoTablespace(): DropUndoTablespaceContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropUndoTablespace, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropStatement) {
             listener.enterDropStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropStatement) {
             listener.exitDropStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropStatement) {
            return visitor.visitDropStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropDatabase;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropDatabase) {
             listener.enterDropDatabase(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropDatabase) {
             listener.exitDropDatabase(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropDatabase) {
            return visitor.visitDropDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropEvent;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropEvent) {
             listener.enterDropEvent(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropEvent) {
             listener.exitDropEvent(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropEvent) {
            return visitor.visitDropEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropProcedureContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropProcedure;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropProcedure) {
             listener.enterDropProcedure(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropProcedure) {
             listener.exitDropProcedure(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropProcedure) {
            return visitor.visitDropProcedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexRef(): IndexRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexRef, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public onlineOption(): OnlineOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0);
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexLockAndAlgorithm, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropIndex;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropIndex) {
             listener.enterDropIndex(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropIndex) {
             listener.exitDropIndex(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropIndex) {
            return visitor.visitDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0);
    }
    public dropLogfileGroupOption_list(): Vector<DropLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_dropLogfileGroupOption);
    }
    public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroupOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropLogfileGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropLogfileGroup) {
             listener.enterDropLogfileGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropLogfileGroup) {
             listener.exitDropLogfileGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropLogfileGroup) {
            return visitor.visitDropLogfileGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropLogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tsOptionWait(): TsOptionWaitContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0);
    }
    public tsOptionEngine(): TsOptionEngineContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropLogfileGroupOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropLogfileGroupOption) {
             listener.enterDropLogfileGroupOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropLogfileGroupOption) {
             listener.exitDropLogfileGroupOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropLogfileGroupOption) {
            return visitor.visitDropLogfileGroupOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverRef(): ServerRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropServer;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropServer) {
             listener.enterDropServer(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropServer) {
             listener.exitDropServer(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropServer) {
            return visitor.visitDropServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRefList(): TableRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableSpaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0);
    }
    public dropLogfileGroupOption_list(): Vector<DropLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_dropLogfileGroupOption);
    }
    public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroupOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTableSpace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropTableSpace) {
             listener.enterDropTableSpace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropTableSpace) {
             listener.exitDropTableSpace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropTableSpace) {
            return visitor.visitDropTableSpace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTriggerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerRef(): TriggerRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_triggerRef, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTrigger;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropTrigger) {
             listener.enterDropTrigger(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropTrigger) {
             listener.exitDropTrigger(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropTrigger) {
            return visitor.visitDropTrigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRefList(): ViewRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewRefList, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropView;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropRoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropRole;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropRole) {
             listener.enterDropRole(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropRole) {
             listener.exitDropRole(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropSpatialReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropSpatialReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropSpatialReference) {
             listener.enterDropSpatialReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropSpatialReference) {
             listener.exitDropSpatialReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropSpatialReference) {
            return visitor.visitDropSpatialReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0);
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropUndoTablespace;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropUndoTablespace) {
             listener.enterDropUndoTablespace(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropUndoTablespace) {
             listener.exitDropUndoTablespace(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropUndoTablespace) {
            return visitor.visitDropUndoTablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public renamePair_list(): Vector<RenamePairContext> {
        return this.getRuleContexts(MySQLParser.RULE_renamePair);
    }
    public renamePair(i: number): RenamePairContext | null {
        return this.getRuleContext(MySQLParser.RULE_renamePair, i);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renameTableStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRenameTableStatement) {
             listener.enterRenameTableStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRenameTableStatement) {
             listener.exitRenameTableStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRenameTableStatement) {
            return visitor.visitRenameTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenamePairContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renamePair;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRenamePair) {
             listener.enterRenamePair(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRenamePair) {
             listener.exitRenamePair(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRenamePair) {
            return visitor.visitRenamePair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_truncateTableStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTruncateTableStatement) {
             listener.enterTruncateTableStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTruncateTableStatement) {
             listener.exitTruncateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTruncateTableStatement) {
            return visitor.visitTruncateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public textStringLiteralList(): TextStringLiteralListContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteralList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_importStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterImportStatement) {
             listener.enterImportStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitImportStatement) {
             listener.exitImportStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitImportStatement) {
            return visitor.visitImportStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CALL_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_callStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCallStatement) {
             listener.enterCallStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCallStatement) {
             listener.exitCallStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCallStatement) {
            return visitor.visitCallStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public tableAliasRefList(): TableAliasRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAliasRefList, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0);
    }
    public deleteStatementOption_list(): Vector<DeleteStatementOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_deleteStatementOption);
    }
    public deleteStatementOption(i: number): DeleteStatementOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_deleteStatementOption, i);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public partitionDelete(): PartitionDeleteContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionDelete, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public simpleLimitClause(): SimpleLimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleLimitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDeleteStatement) {
             listener.enterDeleteStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDeleteStatement) {
             listener.exitDeleteStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDeleteContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDelete;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDelete) {
             listener.enterPartitionDelete(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDelete) {
             listener.exitPartitionDelete(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDelete) {
            return visitor.visitPartitionDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteStatementOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDeleteStatementOption) {
             listener.enterDeleteStatementOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDeleteStatementOption) {
             listener.exitDeleteStatementOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDeleteStatementOption) {
            return visitor.visitDeleteStatementOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DoStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public selectItemList(): SelectItemListContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectItemList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_doStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDoStatement) {
             listener.enterDoStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDoStatement) {
             listener.exitDoStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDoStatement) {
            return visitor.visitDoStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public handlerReadOrScan(): HandlerReadOrScanContext | null {
        return this.getRuleContext(MySQLParser.RULE_handlerReadOrScan, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHandlerStatement) {
             listener.enterHandlerStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHandlerStatement) {
             listener.exitHandlerStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHandlerStatement) {
            return visitor.visitHandlerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerReadOrScanContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public values(): ValuesContext | null {
        return this.getRuleContext(MySQLParser.RULE_values, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public LESS_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
    }
    public GREATER_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
    }
    public LESS_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
    }
    public GREATER_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerReadOrScan;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHandlerReadOrScan) {
             listener.enterHandlerReadOrScan(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHandlerReadOrScan) {
             listener.exitHandlerReadOrScan(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHandlerReadOrScan) {
            return visitor.visitHandlerReadOrScan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public insertFromConstructor(): InsertFromConstructorContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertFromConstructor, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public insertQueryExpression(): InsertQueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertQueryExpression, 0);
    }
    public insertLockOption(): InsertLockOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertLockOption, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0);
    }
    public insertUpdateList(): InsertUpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertUpdateList, 0);
    }
    public valuesReference(): ValuesReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_valuesReference, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertStatement) {
             listener.enterInsertStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertStatement) {
             listener.exitInsertStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertLockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public DELAYED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
    }
    public HIGH_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertLockOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertLockOption) {
             listener.enterInsertLockOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertLockOption) {
             listener.exitInsertLockOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertLockOption) {
            return visitor.visitInsertLockOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertFromConstructorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertValues(): InsertValuesContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertValues, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fields(): FieldsContext | null {
        return this.getRuleContext(MySQLParser.RULE_fields, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertFromConstructor;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertFromConstructor) {
             listener.enterInsertFromConstructor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertFromConstructor) {
             listener.exitInsertFromConstructor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertFromConstructor) {
            return visitor.visitInsertFromConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertIdentifier_list(): Vector<InsertIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_insertIdentifier);
    }
    public insertIdentifier(i: number): InsertIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertIdentifier, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fields;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFields) {
             listener.enterFields(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFields) {
             listener.exitFields(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFields) {
            return visitor.visitFields(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertValuesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueList(): ValueListContext | null {
        return this.getRuleContext(MySQLParser.RULE_valueList, 0);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertValues;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertValues) {
             listener.enterInsertValues(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertValues) {
             listener.exitInsertValues(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertValues) {
            return visitor.visitInsertValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertQueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fields(): FieldsContext | null {
        return this.getRuleContext(MySQLParser.RULE_fields, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertQueryExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertQueryExpression) {
             listener.enterInsertQueryExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertQueryExpression) {
             listener.exitInsertQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertQueryExpression) {
            return visitor.visitInsertQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.OPEN_PAR_SYMBOL);
    }
    public OPEN_PAR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
    }
    public CLOSE_PAR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.CLOSE_PAR_SYMBOL);
    }
    public CLOSE_PAR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
    }
    public values_list(): Vector<ValuesContext> {
        return this.getRuleContexts(MySQLParser.RULE_values);
    }
    public values(i: number): ValuesContext | null {
        return this.getRuleContext(MySQLParser.RULE_values, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_valueList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterValueList) {
             listener.enterValueList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitValueList) {
             listener.exitValueList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitValueList) {
            return visitor.visitValueList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public DEFAULT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.DEFAULT_SYMBOL);
    }
    public DEFAULT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_values;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterValues) {
             listener.enterValues(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitValues) {
             listener.exitValues(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitValues) {
            return visitor.visitValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_valuesReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterValuesReference) {
             listener.enterValuesReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitValuesReference) {
             listener.exitValuesReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitValuesReference) {
            return visitor.visitValuesReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertUpdateListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertUpdateList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertUpdateList) {
             listener.enterInsertUpdateList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertUpdateList) {
             listener.exitInsertUpdateList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertUpdateList) {
            return visitor.visitInsertUpdateList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public dataOrXml(): DataOrXmlContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataOrXml, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public loadDataFileTail(): LoadDataFileTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadDataFileTail, 0);
    }
    public loadDataLock(): LoadDataLockContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadDataLock, 0);
    }
    public loadFrom(): LoadFromContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadFrom, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public loadSourceType(): LoadSourceTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadSourceType, 0);
    }
    public sourceCount(): SourceCountContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceCount, 0);
    }
    public sourceOrder(): SourceOrderContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceOrder, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0);
    }
    public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext | null {
        return this.getRuleContext(MySQLParser.RULE_xmlRowsIdentifiedBy, 0);
    }
    public fieldsClause(): FieldsClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldsClause, 0);
    }
    public linesClause(): LinesClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_linesClause, 0);
    }
    public loadParallel(): LoadParallelContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadParallel, 0);
    }
    public loadMemory(): LoadMemoryContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadMemory, 0);
    }
    public loadAlgorithm(): LoadAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadAlgorithm, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadStatement) {
             listener.enterLoadStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadStatement) {
             listener.exitLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadStatement) {
            return visitor.visitLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataOrXmlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataOrXml;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDataOrXml) {
             listener.enterDataOrXml(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDataOrXml) {
             listener.exitDataOrXml(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDataOrXml) {
            return visitor.visitDataOrXml(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadDataLockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadDataLock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadDataLock) {
             listener.enterLoadDataLock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadDataLock) {
             listener.exitLoadDataLock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadDataLock) {
            return visitor.visitLoadDataLock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadFromContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadFrom;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadFrom) {
             listener.enterLoadFrom(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadFrom) {
             listener.exitLoadFrom(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadFrom) {
            return visitor.visitLoadFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadSourceTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INFILE_SYMBOL, 0);
    }
    public URL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.URL_SYMBOL, 0);
    }
    public S3_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.S3_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadSourceType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadSourceType) {
             listener.enterLoadSourceType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadSourceType) {
             listener.exitLoadSourceType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadSourceType) {
            return visitor.visitLoadSourceType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceCountContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceCount;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceCount) {
             listener.enterSourceCount(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceCount) {
             listener.exitSourceCount(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceCount) {
            return visitor.visitSourceCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceOrderContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceOrder;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceOrder) {
             listener.enterSourceOrder(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceOrder) {
             listener.exitSourceOrder(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceOrder) {
            return visitor.visitSourceOrder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmlRowsIdentifiedByContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xmlRowsIdentifiedBy;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterXmlRowsIdentifiedBy) {
             listener.enterXmlRowsIdentifiedBy(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitXmlRowsIdentifiedBy) {
             listener.exitXmlRowsIdentifiedBy(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitXmlRowsIdentifiedBy) {
            return visitor.visitXmlRowsIdentifiedBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadDataFileTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public loadDataFileTargetList(): LoadDataFileTargetListContext | null {
        return this.getRuleContext(MySQLParser.RULE_loadDataFileTargetList, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public LINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINES_SYMBOL, 0);
    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadDataFileTail;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadDataFileTail) {
             listener.enterLoadDataFileTail(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadDataFileTail) {
             listener.exitLoadDataFileTail(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadDataFileTail) {
            return visitor.visitLoadDataFileTail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadDataFileTargetListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fieldOrVariableList(): FieldOrVariableListContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldOrVariableList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadDataFileTargetList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadDataFileTargetList) {
             listener.enterLoadDataFileTargetList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadDataFileTargetList) {
             listener.exitLoadDataFileTargetList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadDataFileTargetList) {
            return visitor.visitLoadDataFileTargetList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldOrVariableListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef_list(): Vector<ColumnRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnRef);
    }
    public columnRef(i: number): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, i);
    }
    public AT_SIGN_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AT_SIGN_SYMBOL);
    }
    public AT_SIGN_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, i);
    }
    public textOrIdentifier_list(): Vector<TextOrIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_textOrIdentifier);
    }
    public textOrIdentifier(i: number): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, i);
    }
    public AT_AT_SIGN_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AT_AT_SIGN_SYMBOL);
    }
    public AT_AT_SIGN_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public AT_TEXT_SUFFIX_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AT_TEXT_SUFFIX);
    }
    public AT_TEXT_SUFFIX(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldOrVariableList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldOrVariableList) {
             listener.enterFieldOrVariableList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldOrVariableList) {
             listener.exitFieldOrVariableList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldOrVariableList) {
            return visitor.visitFieldOrVariableList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public BULK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BULK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadAlgorithm) {
             listener.enterLoadAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadAlgorithm) {
             listener.exitLoadAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadAlgorithm) {
            return visitor.visitLoadAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadParallelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARALLEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARALLEL_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadParallel;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadParallel) {
             listener.enterLoadParallel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadParallel) {
             listener.exitLoadParallel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadParallel) {
            return visitor.visitLoadParallel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadMemoryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public sizeNumber(): SizeNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadMemory;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoadMemory) {
             listener.enterLoadMemory(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoadMemory) {
             listener.exitLoadMemory(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoadMemory) {
            return visitor.visitLoadMemory(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public insertFromConstructor(): InsertFromConstructorContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertFromConstructor, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public insertQueryExpression(): InsertQueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertQueryExpression, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public DELAYED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replaceStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplaceStatement) {
             listener.enterReplaceStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplaceStatement) {
             listener.exitReplaceStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplaceStatement) {
            return visitor.visitReplaceStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0);
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatementWithInto, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithIntoContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatementWithInto, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public queryExpression(): QueryExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0);
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_intoClause, 0);
    }
    public lockingClauseList(): LockingClauseListContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectStatementWithInto;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectStatementWithInto) {
             listener.enterSelectStatementWithInto(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectStatementWithInto) {
             listener.exitSelectStatementWithInto(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectStatementWithInto) {
            return visitor.visitSelectStatementWithInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionBody(): QueryExpressionBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionBody, 0);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpression) {
             listener.enterQueryExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpression) {
             listener.exitQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpression) {
            return visitor.visitQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionBodyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryPrimary(): QueryPrimaryContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryPrimary, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public queryExpressionBody_list(): Vector<QueryExpressionBodyContext> {
        return this.getRuleContexts(MySQLParser.RULE_queryExpressionBody);
    }
    public queryExpressionBody(i: number): QueryExpressionBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionBody, i);
    }
    public UNION_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.UNION_SYMBOL);
    }
    public UNION_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.UNION_SYMBOL, i);
    }
    public EXCEPT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.EXCEPT_SYMBOL);
    }
    public EXCEPT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, i);
    }
    public INTERSECT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.INTERSECT_SYMBOL);
    }
    public INTERSECT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INTERSECT_SYMBOL, i);
    }
    public unionOption_list(): Vector<UnionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_unionOption);
    }
    public unionOption(i: number): UnionOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_unionOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionBody;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpressionBody) {
             listener.enterQueryExpressionBody(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpressionBody) {
             listener.exitQueryExpressionBody(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpressionBody) {
            return visitor.visitQueryExpressionBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryExpressionParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionParens;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryExpressionParens) {
             listener.enterQueryExpressionParens(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryExpressionParens) {
             listener.exitQueryExpressionParens(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryExpressionParens) {
            return visitor.visitQueryExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(MySQLParser.RULE_querySpecification, 0);
    }
    public tableValueConstructor(): TableValueConstructorContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableValueConstructor, 0);
    }
    public explicitTable(): ExplicitTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_explicitTable, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryPrimary;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQueryPrimary) {
             listener.enterQueryPrimary(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQueryPrimary) {
             listener.exitQueryPrimary(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQueryPrimary) {
            return visitor.visitQueryPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
    }
    public selectItemList(): SelectItemListContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectItemList, 0);
    }
    public selectOption_list(): Vector<SelectOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_selectOption);
    }
    public selectOption(i: number): SelectOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectOption, i);
    }
    public intoClause(): IntoClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_intoClause, 0);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_fromClause, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupByClause, 0);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_havingClause, 0);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowClause, 0);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifyClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_querySpecification;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubqueryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryExpressionParens(): QueryExpressionParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subquery;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSubquery) {
             listener.enterSubquery(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSubquery) {
             listener.exitSubquery(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSubquery) {
            return visitor.visitSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public STRAIGHT_JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
    }
    public HIGH_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
    }
    public SQL_SMALL_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0);
    }
    public SQL_BIG_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_CALC_FOUND_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_querySpecOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQuerySpecOption) {
             listener.enterQuerySpecOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQuerySpecOption) {
             listener.exitQuerySpecOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQuerySpecOption) {
            return visitor.visitQuerySpecOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
    }
    public limitOptions(): LimitOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleLimitClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
    }
    public limitOption(): LimitOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleLimitClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleLimitClause) {
             listener.enterSimpleLimitClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleLimitClause) {
             listener.exitSimpleLimitClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleLimitClause) {
            return visitor.visitSimpleLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public limitOption_list(): Vector<LimitOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_limitOption);
    }
    public limitOption(i: number): LimitOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitOption, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLimitOptions) {
             listener.enterLimitOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLimitOptions) {
             listener.exitLimitOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLimitOptions) {
            return visitor.visitLimitOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLimitOption) {
             listener.enterLimitOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLimitOption) {
             listener.exitLimitOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLimitOption) {
            return visitor.visitLimitOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntoClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public OUTFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTFILE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public textOrIdentifier_list(): Vector<TextOrIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_textOrIdentifier);
    }
    public textOrIdentifier(i: number): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, i);
    }
    public userVariable_list(): Vector<UserVariableContext> {
        return this.getRuleContexts(MySQLParser.RULE_userVariable);
    }
    public userVariable(i: number): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, i);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0);
    }
    public fieldsClause(): FieldsClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldsClause, 0);
    }
    public linesClause(): LinesClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_linesClause, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_intoClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIntoClause) {
             listener.enterIntoClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIntoClause) {
             listener.exitIntoClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIntoClause) {
            return visitor.visitIntoClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureAnalyseClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureAnalyseClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProcedureAnalyseClause) {
             listener.enterProcedureAnalyseClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProcedureAnalyseClause) {
             listener.exitProcedureAnalyseClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProcedureAnalyseClause) {
            return visitor.visitProcedureAnalyseClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HAVING_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_havingClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifyClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUALIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUALIFY_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_qualifyClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQualifyClause) {
             listener.enterQualifyClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQualifyClause) {
             listener.exitQualifyClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQualifyClause) {
            return visitor.visitQualifyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WINDOW_SYMBOL, 0);
    }
    public windowDefinition_list(): Vector<WindowDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_windowDefinition);
    }
    public windowDefinition(i: number): WindowDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowDefinition, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowClause) {
             listener.enterWindowClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowClause) {
             listener.exitWindowClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowSpec, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowDefinition) {
             listener.enterWindowDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowDefinition) {
             listener.exitWindowDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowDefinition) {
            return visitor.visitWindowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public windowSpecDetails(): WindowSpecDetailsContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowSpecDetails, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowSpec;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowSpec) {
             listener.enterWindowSpec(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowSpec) {
             listener.exitWindowSpec(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecDetailsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public windowFrameClause(): WindowFrameClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowSpecDetails;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowSpecDetails) {
             listener.enterWindowSpecDetails(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowSpecDetails) {
             listener.exitWindowSpecDetails(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowSpecDetails) {
            return visitor.visitWindowSpecDetails(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameUnits(): WindowFrameUnitsContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameUnits, 0);
    }
    public windowFrameExtent(): WindowFrameExtentContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameExtent, 0);
    }
    public windowFrameExclusion(): WindowFrameExclusionContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameExclusion, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameClause) {
             listener.enterWindowFrameClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameClause) {
             listener.exitWindowFrameClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameClause) {
            return visitor.visitWindowFrameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameUnitsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public RANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
    }
    public GROUPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUPS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameUnits;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameUnits) {
             listener.enterWindowFrameUnits(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameUnits) {
             listener.exitWindowFrameUnits(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameUnits) {
            return visitor.visitWindowFrameUnits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameExtentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameStart(): WindowFrameStartContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameStart, 0);
    }
    public windowFrameBetween(): WindowFrameBetweenContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameBetween, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameExtent;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameExtent) {
             listener.enterWindowFrameExtent(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameExtent) {
             listener.exitWindowFrameExtent(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameExtent) {
            return visitor.visitWindowFrameExtent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameStartContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglongNumber, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameStart;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameStart) {
             listener.enterWindowFrameStart(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameStart) {
             listener.exitWindowFrameStart(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameStart) {
            return visitor.visitWindowFrameStart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameBetweenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BETWEEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
    }
    public windowFrameBound_list(): Vector<WindowFrameBoundContext> {
        return this.getRuleContexts(MySQLParser.RULE_windowFrameBound);
    }
    public windowFrameBound(i: number): WindowFrameBoundContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameBound, i);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameBetween;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameBetween) {
             listener.enterWindowFrameBetween(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameBetween) {
             listener.exitWindowFrameBetween(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameBetween) {
            return visitor.visitWindowFrameBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameBoundContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameStart(): WindowFrameStartContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFrameStart, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglongNumber, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameBound;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameBound) {
             listener.enterWindowFrameBound(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameBound) {
             listener.exitWindowFrameBound(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameBound) {
            return visitor.visitWindowFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameExclusionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameExclusion;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFrameExclusion) {
             listener.enterWindowFrameExclusion(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFrameExclusion) {
             listener.exitWindowFrameExclusion(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFrameExclusion) {
            return visitor.visitWindowFrameExclusion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public commonTableExpression_list(): Vector<CommonTableExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_commonTableExpression);
    }
    public commonTableExpression(i: number): CommonTableExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_commonTableExpression, i);
    }
    public RECURSIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECURSIVE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWithClause) {
             listener.enterWithClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWithClause) {
             listener.exitWithClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonTableExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_commonTableExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCommonTableExpression) {
             listener.enterCommonTableExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCommonTableExpression) {
             listener.exitCommonTableExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCommonTableExpression) {
            return visitor.visitCommonTableExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0);
    }
    public olapOption(): OlapOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_olapOption, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public groupList(): GroupListContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public CUBE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CUBE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupByClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OlapOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_olapOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOlapOption) {
             listener.enterOlapOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOlapOption) {
             listener.exitOlapOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOlapOption) {
            return visitor.visitOlapOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOrderClause) {
             listener.enterOrderClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOrderClause) {
             listener.exitOrderClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOrderClause) {
            return visitor.visitOrderClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DirectionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASC_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_direction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDirection) {
             listener.enterDirection(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDirection) {
             listener.exitDirection(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDirection) {
            return visitor.visitDirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public DUAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUAL_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fromClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableReferenceListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableReference_list(): Vector<TableReferenceContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableReference);
    }
    public tableReference(i: number): TableReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReference, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReferenceList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableReferenceList) {
             listener.enterTableReferenceList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableReferenceList) {
             listener.exitTableReferenceList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableReferenceList) {
            return visitor.visitTableReferenceList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableValueConstructorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public rowValueExplicit_list(): Vector<RowValueExplicitContext> {
        return this.getRuleContexts(MySQLParser.RULE_rowValueExplicit);
    }
    public rowValueExplicit(i: number): RowValueExplicitContext | null {
        return this.getRuleContext(MySQLParser.RULE_rowValueExplicit, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableValueConstructor;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableValueConstructor) {
             listener.enterTableValueConstructor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableValueConstructor) {
             listener.exitTableValueConstructor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableValueConstructor) {
            return visitor.visitTableValueConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplicitTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explicitTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExplicitTable) {
             listener.enterExplicitTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExplicitTable) {
             listener.exitExplicitTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExplicitTable) {
            return visitor.visitExplicitTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowValueExplicitContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public values(): ValuesContext | null {
        return this.getRuleContext(MySQLParser.RULE_values, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rowValueExplicit;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRowValueExplicit) {
             listener.enterRowValueExplicit(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRowValueExplicit) {
             listener.exitRowValueExplicit(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRowValueExplicit) {
            return visitor.visitRowValueExplicit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecOption(): QuerySpecOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_querySpecOption, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectOption) {
             listener.enterSelectOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectOption) {
             listener.exitSelectOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectOption) {
            return visitor.visitSelectOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockingClauseListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lockingClause_list(): Vector<LockingClauseContext> {
        return this.getRuleContexts(MySQLParser.RULE_lockingClause);
    }
    public lockingClause(i: number): LockingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockingClause, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockingClauseList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockingClauseList) {
             listener.enterLockingClauseList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockingClauseList) {
             listener.exitLockingClauseList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockingClauseList) {
            return visitor.visitLockingClauseList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public lockStrengh(): LockStrenghContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockStrengh, 0);
    }
    public OF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OF_SYMBOL, 0);
    }
    public tableAliasRefList(): TableAliasRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAliasRefList, 0);
    }
    public lockedRowAction(): LockedRowActionContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockedRowAction, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockingClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockingClause) {
             listener.enterLockingClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockingClause) {
             listener.exitLockingClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockingClause) {
            return visitor.visitLockingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockStrenghContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockStrengh;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockStrengh) {
             listener.enterLockStrengh(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockStrengh) {
             listener.exitLockStrengh(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockStrengh) {
            return visitor.visitLockStrengh(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockedRowActionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockedRowAction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockedRowAction) {
             listener.enterLockedRowAction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockedRowAction) {
             listener.exitLockedRowAction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockedRowAction) {
            return visitor.visitLockedRowAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectItem_list(): Vector<SelectItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_selectItem);
    }
    public selectItem(i: number): SelectItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectItem, i);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectItemList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectItemList) {
             listener.enterSelectItemList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectItemList) {
             listener.exitSelectItemList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectItemList) {
            return visitor.visitSelectItemList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableWild(): TableWildContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableWild, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public selectAlias(): SelectAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectAlias, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectItem) {
             listener.enterSelectItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectItem) {
             listener.exitSelectItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectItem) {
            return visitor.visitSelectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectAliasContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectAlias;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSelectAlias) {
             listener.enterSelectAlias(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSelectAlias) {
             listener.exitSelectAlias(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSelectAlias) {
            return visitor.visitSelectAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WHERE_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whereClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableFactor(): TableFactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0);
    }
    public OPEN_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
    }
    public escapedTableReference(): EscapedTableReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_escapedTableReference, 0);
    }
    public CLOSE_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
    }
    public joinedTable_list(): Vector<JoinedTableContext> {
        return this.getRuleContexts(MySQLParser.RULE_joinedTable);
    }
    public joinedTable(i: number): JoinedTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_joinedTable, i);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public OJ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OJ_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableReference) {
             listener.enterTableReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableReference) {
             listener.exitTableReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableReference) {
            return visitor.visitTableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EscapedTableReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableFactor(): TableFactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0);
    }
    public joinedTable_list(): Vector<JoinedTableContext> {
        return this.getRuleContexts(MySQLParser.RULE_joinedTable);
    }
    public joinedTable(i: number): JoinedTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_joinedTable, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_escapedTableReference;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEscapedTableReference) {
             listener.enterEscapedTableReference(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEscapedTableReference) {
             listener.exitEscapedTableReference(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEscapedTableReference) {
            return visitor.visitEscapedTableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinedTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public innerJoinType(): InnerJoinTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_innerJoinType, 0);
    }
    public tableReference(): TableReferenceContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReference, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0);
    }
    public outerJoinType(): OuterJoinTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_outerJoinType, 0);
    }
    public naturalJoinType(): NaturalJoinTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_naturalJoinType, 0);
    }
    public tableFactor(): TableFactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_joinedTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJoinedTable) {
             listener.enterJoinedTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJoinedTable) {
             listener.exitJoinedTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJoinedTable) {
            return visitor.visitJoinedTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NaturalJoinTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NATURAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public INNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INNER_SYMBOL, 0);
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public OUTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_naturalJoinType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNaturalJoinType) {
             listener.enterNaturalJoinType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNaturalJoinType) {
             listener.exitNaturalJoinType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNaturalJoinType) {
            return visitor.visitNaturalJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InnerJoinTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public INNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INNER_SYMBOL, 0);
    }
    public CROSS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CROSS_SYMBOL, 0);
    }
    public STRAIGHT_JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_innerJoinType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInnerJoinType) {
             listener.enterInnerJoinType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInnerJoinType) {
             listener.exitInnerJoinType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInnerJoinType) {
            return visitor.visitInnerJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OuterJoinTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public OUTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_outerJoinType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOuterJoinType) {
             listener.enterOuterJoinType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOuterJoinType) {
             listener.exitOuterJoinType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOuterJoinType) {
            return visitor.visitOuterJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFactorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleTable(): SingleTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_singleTable, 0);
    }
    public singleTableParens(): SingleTableParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_singleTableParens, 0);
    }
    public derivedTable(): DerivedTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_derivedTable, 0);
    }
    public tableReferenceListParens(): TableReferenceListParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceListParens, 0);
    }
    public tableFunction(): TableFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableFunction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableFactor;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableFactor) {
             listener.enterTableFactor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableFactor) {
             listener.exitTableFactor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableFactor) {
            return visitor.visitTableFactor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public usePartition(): UsePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public indexHintList(): IndexHintListContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexHintList, 0);
    }
    public tablesampleClause(): TablesampleClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablesampleClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_singleTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSingleTable) {
             listener.enterSingleTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSingleTable) {
             listener.exitSingleTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSingleTable) {
            return visitor.visitSingleTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleTableParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public singleTable(): SingleTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_singleTable, 0);
    }
    public singleTableParens(): SingleTableParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_singleTableParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_singleTableParens;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSingleTableParens) {
             listener.enterSingleTableParens(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSingleTableParens) {
             listener.exitSingleTableParens(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSingleTableParens) {
            return visitor.visitSingleTableParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DerivedTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public LATERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LATERAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_derivedTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDerivedTable) {
             listener.enterDerivedTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDerivedTable) {
             listener.exitDerivedTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDerivedTable) {
            return visitor.visitDerivedTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableReferenceListParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0);
    }
    public tableReferenceListParens(): TableReferenceListParensContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceListParens, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReferenceListParens;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableReferenceListParens) {
             listener.enterTableReferenceListParens(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableReferenceListParens) {
             listener.exitTableReferenceListParens(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableReferenceListParens) {
            return visitor.visitTableReferenceListParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnsClause, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableFunction) {
             listener.enterTableFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableFunction) {
             listener.exitTableFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableFunction) {
            return visitor.visitTableFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public jtColumn_list(): Vector<JtColumnContext> {
        return this.getRuleContexts(MySQLParser.RULE_jtColumn);
    }
    public jtColumn(i: number): JtColumnContext | null {
        return this.getRuleContext(MySQLParser.RULE_jtColumn, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnsClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnsClause) {
             listener.enterColumnsClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnsClause) {
             listener.exitColumnsClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnsClause) {
            return visitor.visitColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JtColumnContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public onEmptyOrErrorJsonTable(): OnEmptyOrErrorJsonTableContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrErrorJsonTable, 0);
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnsClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jtColumn;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJtColumn) {
             listener.enterJtColumn(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJtColumn) {
             listener.exitJtColumn(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJtColumn) {
            return visitor.visitJtColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnEmptyOrErrorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public onEmpty(): OnEmptyContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmpty, 0);
    }
    public onError(): OnErrorContext | null {
        return this.getRuleContext(MySQLParser.RULE_onError, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmptyOrError;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnEmptyOrError) {
             listener.enterOnEmptyOrError(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnEmptyOrError) {
             listener.exitOnEmptyOrError(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnEmptyOrError) {
            return visitor.visitOnEmptyOrError(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnEmptyOrErrorJsonTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public onEmptyOrError(): OnEmptyOrErrorContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrError, 0);
    }
    public onError(): OnErrorContext | null {
        return this.getRuleContext(MySQLParser.RULE_onError, 0);
    }
    public onEmpty(): OnEmptyContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmpty, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmptyOrErrorJsonTable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnEmptyOrErrorJsonTable) {
             listener.enterOnEmptyOrErrorJsonTable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnEmptyOrErrorJsonTable) {
             listener.exitOnEmptyOrErrorJsonTable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnEmptyOrErrorJsonTable) {
            return visitor.visitOnEmptyOrErrorJsonTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnEmptyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonOnResponse(): JsonOnResponseContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonOnResponse, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public EMPTY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EMPTY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmpty;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnEmpty) {
             listener.enterOnEmpty(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnEmpty) {
             listener.exitOnEmpty(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnEmpty) {
            return visitor.visitOnEmpty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnErrorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonOnResponse(): JsonOnResponseContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonOnResponse, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onError;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnError) {
             listener.enterOnError(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnError) {
             listener.exitOnError(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnError) {
            return visitor.visitOnError(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonOnResponseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonOnResponse;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJsonOnResponse) {
             listener.enterJsonOnResponse(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJsonOnResponse) {
             listener.exitJsonOnResponse(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJsonOnResponse) {
            return visitor.visitJsonOnResponse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnionOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unionOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUnionOption) {
             listener.enterUnionOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUnionOption) {
             listener.exitUnionOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUnionOption) {
            return visitor.visitUnionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAlias;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexHint_list(): Vector<IndexHintContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexHint);
    }
    public indexHint(i: number): IndexHintContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexHint, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexHintList) {
             listener.enterIndexHintList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexHintList) {
             listener.exitIndexHintList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexHintList) {
            return visitor.visitIndexHintList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexHintType(): IndexHintTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexHintType, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public indexList(): IndexListContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public indexHintClause(): IndexHintClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexHintClause, 0);
    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHint;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexHint) {
             listener.enterIndexHint(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexHint) {
             listener.exitIndexHint(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexHint) {
            return visitor.visitIndexHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexHintType) {
             listener.enterIndexHintType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexHintType) {
             listener.exitIndexHintType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexHintType) {
            return visitor.visitIndexHintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyOrIndexContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyOrIndex;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyOrIndex) {
             listener.enterKeyOrIndex(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyOrIndex) {
             listener.exitKeyOrIndex(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyOrIndex) {
            return visitor.visitKeyOrIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintKeyTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintKeyType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConstraintKeyType) {
             listener.enterConstraintKeyType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConstraintKeyType) {
             listener.exitConstraintKeyType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConstraintKeyType) {
            return visitor.visitConstraintKeyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexHintClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexHintClause) {
             listener.enterIndexHintClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexHintClause) {
             listener.exitIndexHintClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexHintClause) {
            return visitor.visitIndexHintClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexListElement_list(): Vector<IndexListElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexListElement);
    }
    public indexListElement(i: number): IndexListElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexListElement, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexList) {
             listener.enterIndexList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexList) {
             listener.exitIndexList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexList) {
            return visitor.visitIndexList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexListElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexListElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexListElement) {
             listener.enterIndexListElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexListElement) {
             listener.exitIndexListElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexListElement) {
            return visitor.visitIndexListElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0);
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public simpleLimitClause(): SimpleLimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleLimitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUpdateStatement) {
             listener.enterUpdateStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUpdateStatement) {
             listener.exitUpdateStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUpdateStatement) {
            return visitor.visitUpdateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionOrLockingStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionStatement(): TransactionStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionStatement, 0);
    }
    public savepointStatement(): SavepointStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_savepointStatement, 0);
    }
    public lockStatement(): LockStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockStatement, 0);
    }
    public xaStatement(): XaStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_xaStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionOrLockingStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTransactionOrLockingStatement) {
             listener.enterTransactionOrLockingStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTransactionOrLockingStatement) {
             listener.exitTransactionOrLockingStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTransactionOrLockingStatement) {
            return visitor.visitTransactionOrLockingStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public startTransactionOptionList_list(): Vector<StartTransactionOptionListContext> {
        return this.getRuleContexts(MySQLParser.RULE_startTransactionOptionList);
    }
    public startTransactionOptionList(i: number): StartTransactionOptionListContext | null {
        return this.getRuleContext(MySQLParser.RULE_startTransactionOptionList, i);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public RELEASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
    }
    public NO_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.NO_SYMBOL);
    }
    public NO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTransactionStatement) {
             listener.enterTransactionStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTransactionStatement) {
             listener.exitTransactionStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTransactionStatement) {
            return visitor.visitTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeginWorkContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_beginWork;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterBeginWork) {
             listener.enterBeginWork(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitBeginWork) {
             listener.exitBeginWork(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitBeginWork) {
            return visitor.visitBeginWork(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartTransactionOptionListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startTransactionOptionList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStartTransactionOptionList) {
             listener.enterStartTransactionOptionList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStartTransactionOptionList) {
             listener.exitStartTransactionOptionList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStartTransactionOptionList) {
            return visitor.visitStartTransactionOptionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SavepointStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public RELEASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
    }
    public NO_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.NO_SYMBOL);
    }
    public NO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_savepointStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSavepointStatement) {
             listener.enterSavepointStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSavepointStatement) {
             listener.exitSavepointStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSavepointStatement) {
            return visitor.visitSavepointStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public lockItem_list(): Vector<LockItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_lockItem);
    }
    public lockItem(i: number): LockItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockItem, i);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public UNLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockStatement) {
             listener.enterLockStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockStatement) {
             listener.exitLockStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockStatement) {
            return visitor.visitLockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public lockOption(): LockOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_lockOption, 0);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockItem) {
             listener.enterLockItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockItem) {
             listener.exitLockItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockItem) {
            return visitor.visitLockItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLockOption) {
             listener.enterLockOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLockOption) {
             listener.exitLockOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLockOption) {
            return visitor.visitLockOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public xid(): XidContext | null {
        return this.getRuleContext(MySQLParser.RULE_xid, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public xaConvert(): XaConvertContext | null {
        return this.getRuleContext(MySQLParser.RULE_xaConvert, 0);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xaStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterXaStatement) {
             listener.enterXaStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitXaStatement) {
             listener.exitXaStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitXaStatement) {
            return visitor.visitXaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XaConvertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xaConvert;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterXaConvert) {
             listener.enterXaConvert(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitXaConvert) {
             listener.exitXaConvert(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitXaConvert) {
            return visitor.visitXaConvert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XidContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString);
    }
    public textString(i: number): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xid;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterXid) {
             listener.enterXid(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitXid) {
             listener.exitXid(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitXid) {
            return visitor.visitXid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PURGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PURGE_SYMBOL, 0);
    }
    public purgeOptions(): PurgeOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_purgeOptions, 0);
    }
    public changeSource(): ChangeSourceContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeSource, 0);
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public resetOption_list(): Vector<ResetOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_resetOption);
    }
    public resetOption(i: number): ResetOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_resetOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public ifExistsIdentifier(): IfExistsIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExistsIdentifier, 0);
    }
    public startReplicaStatement(): StartReplicaStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_startReplicaStatement, 0);
    }
    public stopReplicaStatement(): StopReplicaStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_stopReplicaStatement, 0);
    }
    public changeReplication(): ChangeReplicationContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplication, 0);
    }
    public replicationLoad(): ReplicationLoadContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicationLoad, 0);
    }
    public groupReplication(): GroupReplicationContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplication, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicationStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicationStatement) {
             listener.enterReplicationStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicationStatement) {
             listener.exitReplicationStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicationStatement) {
            return visitor.visitReplicationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PurgeOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public BEFORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_purgeOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPurgeOptions) {
             listener.enterPurgeOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPurgeOptions) {
             listener.exitPurgeOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPurgeOptions) {
            return visitor.visitPurgeOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResetOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public masterOrBinaryLogsAndGtids(): MasterOrBinaryLogsAndGtidsContext | null {
        return this.getRuleContext(MySQLParser.RULE_masterOrBinaryLogsAndGtids, 0);
    }
    public sourceResetOptions(): SourceResetOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceResetOptions, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resetOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResetOption) {
             listener.enterResetOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResetOption) {
             listener.exitResetOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResetOption) {
            return visitor.visitResetOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MasterOrBinaryLogsAndGtidsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GTIDS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_masterOrBinaryLogsAndGtids;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterMasterOrBinaryLogsAndGtids) {
             listener.enterMasterOrBinaryLogsAndGtids(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitMasterOrBinaryLogsAndGtids) {
             listener.exitMasterOrBinaryLogsAndGtids(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitMasterOrBinaryLogsAndGtids) {
            return visitor.visitMasterOrBinaryLogsAndGtids(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceResetOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceResetOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceResetOptions) {
             listener.enterSourceResetOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceResetOptions) {
             listener.exitSourceResetOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceResetOptions) {
            return visitor.visitSourceResetOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationLoadContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicationLoad;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicationLoad) {
             listener.enterReplicationLoad(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicationLoad) {
             listener.exitReplicationLoad(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicationLoad) {
            return visitor.visitReplicationLoad(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSource;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSource) {
             listener.enterChangeReplicationSource(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSource) {
             listener.exitChangeReplicationSource(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSource) {
            return visitor.visitChangeReplicationSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeSourceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public changeReplicationSource(): ChangeReplicationSourceContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSource, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public sourceDefinitions(): SourceDefinitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceDefinitions, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeSource;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeSource) {
             listener.enterChangeSource(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeSource) {
             listener.exitChangeSource(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeSource) {
            return visitor.visitChangeSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceDefinition_list(): Vector<SourceDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_sourceDefinition);
    }
    public sourceDefinition(i: number): SourceDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceDefinition, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceDefinitions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceDefinitions) {
             listener.enterSourceDefinitions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceDefinitions) {
             listener.exitSourceDefinitions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceDefinitions) {
            return visitor.visitSourceDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public changeReplicationSourceHost(): ChangeReplicationSourceHostContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceHost, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public NETWORK_NAMESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
    }
    public changeReplicationSourceBind(): ChangeReplicationSourceBindContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceBind, 0);
    }
    public changeReplicationSourceUser(): ChangeReplicationSourceUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceUser, 0);
    }
    public changeReplicationSourcePassword(): ChangeReplicationSourcePasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePassword, 0);
    }
    public changeReplicationSourcePort(): ChangeReplicationSourcePortContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePort, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public changeReplicationSourceConnectRetry(): ChangeReplicationSourceConnectRetryContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceConnectRetry, 0);
    }
    public changeReplicationSourceRetryCount(): ChangeReplicationSourceRetryCountContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceRetryCount, 0);
    }
    public changeReplicationSourceDelay(): ChangeReplicationSourceDelayContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceDelay, 0);
    }
    public changeReplicationSourceSSL(): ChangeReplicationSourceSSLContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSL, 0);
    }
    public changeReplicationSourceSSLCA(): ChangeReplicationSourceSSLCAContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCA, 0);
    }
    public changeReplicationSourceSSLCApath(): ChangeReplicationSourceSSLCApathContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCApath, 0);
    }
    public changeReplicationSourceTLSVersion(): ChangeReplicationSourceTLSVersionContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceTLSVersion, 0);
    }
    public changeReplicationSourceSSLCert(): ChangeReplicationSourceSSLCertContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCert, 0);
    }
    public changeReplicationSourceTLSCiphersuites(): ChangeReplicationSourceTLSCiphersuitesContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceTLSCiphersuites, 0);
    }
    public sourceTlsCiphersuitesDef(): SourceTlsCiphersuitesDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceTlsCiphersuitesDef, 0);
    }
    public changeReplicationSourceSSLCipher(): ChangeReplicationSourceSSLCipherContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCipher, 0);
    }
    public changeReplicationSourceSSLKey(): ChangeReplicationSourceSSLKeyContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLKey, 0);
    }
    public changeReplicationSourceSSLVerifyServerCert(): ChangeReplicationSourceSSLVerifyServerCertContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert, 0);
    }
    public changeReplicationSourceSSLCLR(): ChangeReplicationSourceSSLCLRContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCLR, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public changeReplicationSourceSSLCLRpath(): ChangeReplicationSourceSSLCLRpathContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCLRpath, 0);
    }
    public changeReplicationSourcePublicKey(): ChangeReplicationSourcePublicKeyContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePublicKey, 0);
    }
    public changeReplicationSourceGetSourcePublicKey(): ChangeReplicationSourceGetSourcePublicKeyContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey, 0);
    }
    public changeReplicationSourceHeartbeatPeriod(): ChangeReplicationSourceHeartbeatPeriodContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public serverIdList(): ServerIdListContext | null {
        return this.getRuleContext(MySQLParser.RULE_serverIdList, 0);
    }
    public changeReplicationSourceCompressionAlgorithm(): ChangeReplicationSourceCompressionAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public changeReplicationSourceZstdCompressionLevel(): ChangeReplicationSourceZstdCompressionLevelContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel, 0);
    }
    public changeReplicationSourceAutoPosition(): ChangeReplicationSourceAutoPositionContext | null {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceAutoPosition, 0);
    }
    public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
    }
    public privilegeCheckDef(): PrivilegeCheckDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_privilegeCheckDef, 0);
    }
    public REQUIRE_ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
    }
    public REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
    }
    public tablePrimaryKeyCheckDef(): TablePrimaryKeyCheckDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tablePrimaryKeyCheckDef, 0);
    }
    public SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0);
    }
    public assignGtidsToAnonymousTransactionsDefinition(): AssignGtidsToAnonymousTransactionsDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition, 0);
    }
    public GTID_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GTID_ONLY_SYMBOL, 0);
    }
    public sourceFileDef(): SourceFileDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceFileDef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceDefinition) {
             listener.enterSourceDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceDefinition) {
             listener.exitSourceDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceDefinition) {
            return visitor.visitSourceDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceAutoPositionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public SOURCE_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceAutoPosition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceAutoPosition) {
             listener.enterChangeReplicationSourceAutoPosition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceAutoPosition) {
             listener.exitChangeReplicationSourceAutoPosition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceAutoPosition) {
            return visitor.visitChangeReplicationSourceAutoPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceHostContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public SOURCE_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceHost;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceHost) {
             listener.enterChangeReplicationSourceHost(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceHost) {
             listener.exitChangeReplicationSourceHost(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceHost) {
            return visitor.visitChangeReplicationSourceHost(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceBindContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0);
    }
    public SOURCE_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceBind;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceBind) {
             listener.enterChangeReplicationSourceBind(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceBind) {
             listener.exitChangeReplicationSourceBind(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceBind) {
            return visitor.visitChangeReplicationSourceBind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public SOURCE_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_USER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceUser) {
             listener.enterChangeReplicationSourceUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceUser) {
             listener.exitChangeReplicationSourceUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceUser) {
            return visitor.visitChangeReplicationSourceUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourcePasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public SOURCE_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourcePassword) {
             listener.enterChangeReplicationSourcePassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourcePassword) {
             listener.exitChangeReplicationSourcePassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourcePassword) {
            return visitor.visitChangeReplicationSourcePassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourcePortContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public SOURCE_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePort;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourcePort) {
             listener.enterChangeReplicationSourcePort(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourcePort) {
             listener.exitChangeReplicationSourcePort(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourcePort) {
            return visitor.visitChangeReplicationSourcePort(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceConnectRetryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public SOURCE_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceConnectRetry;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceConnectRetry) {
             listener.enterChangeReplicationSourceConnectRetry(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceConnectRetry) {
             listener.exitChangeReplicationSourceConnectRetry(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceConnectRetry) {
            return visitor.visitChangeReplicationSourceConnectRetry(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceRetryCountContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public SOURCE_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceRetryCount;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceRetryCount) {
             listener.enterChangeReplicationSourceRetryCount(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceRetryCount) {
             listener.exitChangeReplicationSourceRetryCount(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceRetryCount) {
            return visitor.visitChangeReplicationSourceRetryCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceDelayContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public SOURCE_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceDelay;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceDelay) {
             listener.enterChangeReplicationSourceDelay(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceDelay) {
             listener.exitChangeReplicationSourceDelay(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceDelay) {
            return visitor.visitChangeReplicationSourceDelay(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public SOURCE_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSL;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSL) {
             listener.enterChangeReplicationSourceSSL(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSL) {
             listener.exitChangeReplicationSourceSSL(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSL) {
            return visitor.visitChangeReplicationSourceSSL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCAContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public SOURCE_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCA;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCA) {
             listener.enterChangeReplicationSourceSSLCA(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCA) {
             listener.exitChangeReplicationSourceSSLCA(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCA) {
            return visitor.visitChangeReplicationSourceSSLCA(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCApathContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCApath;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCApath) {
             listener.enterChangeReplicationSourceSSLCApath(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCApath) {
             listener.exitChangeReplicationSourceSSLCApath(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCApath) {
            return visitor.visitChangeReplicationSourceSSLCApath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCipherContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public SOURCE_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCipher;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCipher) {
             listener.enterChangeReplicationSourceSSLCipher(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCipher) {
             listener.exitChangeReplicationSourceSSLCipher(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCipher) {
            return visitor.visitChangeReplicationSourceSSLCipher(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCLRContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public SOURCE_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCLR;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCLR) {
             listener.enterChangeReplicationSourceSSLCLR(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCLR) {
             listener.exitChangeReplicationSourceSSLCLR(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCLR) {
            return visitor.visitChangeReplicationSourceSSLCLR(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCLRpathContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCLRpath;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCLRpath) {
             listener.enterChangeReplicationSourceSSLCLRpath(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCLRpath) {
             listener.exitChangeReplicationSourceSSLCLRpath(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCLRpath) {
            return visitor.visitChangeReplicationSourceSSLCLRpath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public SOURCE_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLKey;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLKey) {
             listener.enterChangeReplicationSourceSSLKey(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLKey) {
             listener.exitChangeReplicationSourceSSLKey(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLKey) {
            return visitor.visitChangeReplicationSourceSSLKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLVerifyServerCertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLVerifyServerCert) {
             listener.enterChangeReplicationSourceSSLVerifyServerCert(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLVerifyServerCert) {
             listener.exitChangeReplicationSourceSSLVerifyServerCert(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLVerifyServerCert) {
            return visitor.visitChangeReplicationSourceSSLVerifyServerCert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceTLSVersionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public SOURCE_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceTLSVersion;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceTLSVersion) {
             listener.enterChangeReplicationSourceTLSVersion(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceTLSVersion) {
             listener.exitChangeReplicationSourceTLSVersion(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceTLSVersion) {
            return visitor.visitChangeReplicationSourceTLSVersion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceTLSCiphersuitesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public SOURCE_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceTLSCiphersuites;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceTLSCiphersuites) {
             listener.enterChangeReplicationSourceTLSCiphersuites(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceTLSCiphersuites) {
             listener.exitChangeReplicationSourceTLSCiphersuites(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceTLSCiphersuites) {
            return visitor.visitChangeReplicationSourceTLSCiphersuites(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceSSLCertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCert;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceSSLCert) {
             listener.enterChangeReplicationSourceSSLCert(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceSSLCert) {
             listener.exitChangeReplicationSourceSSLCert(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceSSLCert) {
            return visitor.visitChangeReplicationSourceSSLCert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourcePublicKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public SOURCE_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePublicKey;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourcePublicKey) {
             listener.enterChangeReplicationSourcePublicKey(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourcePublicKey) {
             listener.exitChangeReplicationSourcePublicKey(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourcePublicKey) {
            return visitor.visitChangeReplicationSourcePublicKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceGetSourcePublicKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
    }
    public GET_SOURCE_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceGetSourcePublicKey) {
             listener.enterChangeReplicationSourceGetSourcePublicKey(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceGetSourcePublicKey) {
             listener.exitChangeReplicationSourceGetSourcePublicKey(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceGetSourcePublicKey) {
            return visitor.visitChangeReplicationSourceGetSourcePublicKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceHeartbeatPeriodContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public SOURCE_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceHeartbeatPeriod) {
             listener.enterChangeReplicationSourceHeartbeatPeriod(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceHeartbeatPeriod) {
             listener.exitChangeReplicationSourceHeartbeatPeriod(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceHeartbeatPeriod) {
            return visitor.visitChangeReplicationSourceHeartbeatPeriod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceCompressionAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public SOURCE_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceCompressionAlgorithm) {
             listener.enterChangeReplicationSourceCompressionAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceCompressionAlgorithm) {
             listener.exitChangeReplicationSourceCompressionAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceCompressionAlgorithm) {
            return visitor.visitChangeReplicationSourceCompressionAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationSourceZstdCompressionLevelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplicationSourceZstdCompressionLevel) {
             listener.enterChangeReplicationSourceZstdCompressionLevel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplicationSourceZstdCompressionLevel) {
             listener.exitChangeReplicationSourceZstdCompressionLevel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplicationSourceZstdCompressionLevel) {
            return visitor.visitChangeReplicationSourceZstdCompressionLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeCheckDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext | null {
        return this.getRuleContext(MySQLParser.RULE_userIdentifierOrText, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_privilegeCheckDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrivilegeCheckDef) {
             listener.enterPrivilegeCheckDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrivilegeCheckDef) {
             listener.exitPrivilegeCheckDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrivilegeCheckDef) {
            return visitor.visitPrivilegeCheckDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePrimaryKeyCheckDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STREAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public GENERATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERATE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablePrimaryKeyCheckDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablePrimaryKeyCheckDef) {
             listener.enterTablePrimaryKeyCheckDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablePrimaryKeyCheckDef) {
             listener.exitTablePrimaryKeyCheckDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablePrimaryKeyCheckDef) {
            return visitor.visitTablePrimaryKeyCheckDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignGtidsToAnonymousTransactionsDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAssignGtidsToAnonymousTransactionsDefinition) {
             listener.enterAssignGtidsToAnonymousTransactionsDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAssignGtidsToAnonymousTransactionsDefinition) {
             listener.exitAssignGtidsToAnonymousTransactionsDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAssignGtidsToAnonymousTransactionsDefinition) {
            return visitor.visitAssignGtidsToAnonymousTransactionsDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceTlsCiphersuitesDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceTlsCiphersuitesDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceTlsCiphersuitesDef) {
             listener.enterSourceTlsCiphersuitesDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceTlsCiphersuitesDef) {
             listener.exitSourceTlsCiphersuitesDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceTlsCiphersuitesDef) {
            return visitor.visitSourceTlsCiphersuitesDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceFileDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceLogFile(): SourceLogFileContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceLogFile, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public sourceLogPos(): SourceLogPosContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceLogPos, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglongNumber, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceFileDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceFileDef) {
             listener.enterSourceFileDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceFileDef) {
             listener.exitSourceFileDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceFileDef) {
            return visitor.visitSourceFileDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceLogFileContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public SOURCE_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceLogFile;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceLogFile) {
             listener.enterSourceLogFile(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceLogFile) {
             listener.exitSourceLogFile(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceLogFile) {
            return visitor.visitSourceLogFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceLogPosContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public SOURCE_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceLogPos;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSourceLogPos) {
             listener.enterSourceLogPos(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSourceLogPos) {
             listener.exitSourceLogPos(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSourceLogPos) {
            return visitor.visitSourceLogPos(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerIdListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number);
    }
    public ulong_number(i: number): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverIdList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerIdList) {
             listener.enterServerIdList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerIdList) {
             listener.exitServerIdList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerIdList) {
            return visitor.visitServerIdList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChangeReplicationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public filterDefinition_list(): Vector<FilterDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterDefinition);
    }
    public filterDefinition(i: number): FilterDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterDefinition, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplication;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChangeReplication) {
             listener.enterChangeReplication(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChangeReplication) {
             listener.exitChangeReplication(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChangeReplication) {
            return visitor.visitChangeReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public filterDbList(): FilterDbListContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterDbList, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public filterTableList(): FilterTableListContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterTableList, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public filterStringList(): FilterStringListContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterStringList, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public filterDbPairList(): FilterDbPairListContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterDbPairList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterDefinition) {
             listener.enterFilterDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterDefinition) {
             listener.exitFilterDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterDefinition) {
            return visitor.visitFilterDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterDbListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaRef_list(): Vector<SchemaRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaRef);
    }
    public schemaRef(i: number): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDbList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterDbList) {
             listener.enterFilterDbList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterDbList) {
             listener.exitFilterDbList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterDbList) {
            return visitor.visitFilterDbList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterTableListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public filterTableRef_list(): Vector<FilterTableRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterTableRef);
    }
    public filterTableRef(i: number): FilterTableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterTableRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterTableList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterTableList) {
             listener.enterFilterTableList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterTableList) {
             listener.exitFilterTableList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterTableList) {
            return visitor.visitFilterTableList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterStringListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public filterWildDbTableString_list(): Vector<FilterWildDbTableStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterWildDbTableString);
    }
    public filterWildDbTableString(i: number): FilterWildDbTableStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_filterWildDbTableString, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterStringList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterStringList) {
             listener.enterFilterStringList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterStringList) {
             listener.exitFilterStringList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterStringList) {
            return visitor.visitFilterStringList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterWildDbTableStringContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterWildDbTableString;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterWildDbTableString) {
             listener.enterFilterWildDbTableString(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterWildDbTableString) {
             listener.exitFilterWildDbTableString(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterWildDbTableString) {
            return visitor.visitFilterWildDbTableString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterDbPairListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaIdentifierPair_list(): Vector<SchemaIdentifierPairContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaIdentifierPair);
    }
    public schemaIdentifierPair(i: number): SchemaIdentifierPairContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaIdentifierPair, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDbPairList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterDbPairList) {
             listener.enterFilterDbPairList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterDbPairList) {
             listener.exitFilterDbPairList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterDbPairList) {
            return visitor.visitFilterDbPairList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartReplicaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOptions, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public replicaUntil(): ReplicaUntilContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicaUntil, 0);
    }
    public userOption(): UserOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_userOption, 0);
    }
    public passwordOption(): PasswordOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_passwordOption, 0);
    }
    public defaultAuthOption(): DefaultAuthOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultAuthOption, 0);
    }
    public pluginDirOption(): PluginDirOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_pluginDirOption, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startReplicaStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStartReplicaStatement) {
             listener.enterStartReplicaStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStartReplicaStatement) {
             listener.exitStartReplicaStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStartReplicaStatement) {
            return visitor.visitStartReplicaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StopReplicaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOptions, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stopReplicaStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStopReplicaStatement) {
             listener.enterStopReplicaStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStopReplicaStatement) {
             listener.exitStopReplicaStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStopReplicaStatement) {
            return visitor.visitStopReplicaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicaUntilContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceFileDef_list(): Vector<SourceFileDefContext> {
        return this.getRuleContexts(MySQLParser.RULE_sourceFileDef);
    }
    public sourceFileDef(i: number): SourceFileDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_sourceFileDef, i);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaUntil;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicaUntil) {
             listener.enterReplicaUntil(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicaUntil) {
             listener.exitReplicaUntil(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicaUntil) {
            return visitor.visitReplicaUntil(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserOption) {
             listener.enterUserOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserOption) {
             listener.exitUserOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserOption) {
            return visitor.visitUserOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PasswordOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_passwordOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPasswordOption) {
             listener.enterPasswordOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPasswordOption) {
             listener.exitPasswordOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPasswordOption) {
            return visitor.visitPasswordOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultAuthOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultAuthOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultAuthOption) {
             listener.enterDefaultAuthOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultAuthOption) {
             listener.exitDefaultAuthOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultAuthOption) {
            return visitor.visitDefaultAuthOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PluginDirOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pluginDirOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPluginDirOption) {
             listener.enterPluginDirOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPluginDirOption) {
             listener.exitPluginDirOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPluginDirOption) {
            return visitor.visitPluginDirOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicaThreadOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public replicaThreadOption_list(): Vector<ReplicaThreadOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_replicaThreadOption);
    }
    public replicaThreadOption(i: number): ReplicaThreadOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaThreadOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicaThreadOptions) {
             listener.enterReplicaThreadOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicaThreadOptions) {
             listener.exitReplicaThreadOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicaThreadOptions) {
            return visitor.visitReplicaThreadOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicaThreadOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaThreadOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplicaThreadOption) {
             listener.enterReplicaThreadOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplicaThreadOption) {
             listener.exitReplicaThreadOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplicaThreadOption) {
            return visitor.visitReplicaThreadOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public groupReplicationStartOptions(): GroupReplicationStartOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationStartOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplication;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplication) {
             listener.enterGroupReplication(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplication) {
             listener.exitGroupReplication(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplication) {
            return visitor.visitGroupReplication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationStartOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupReplicationStartOption_list(): Vector<GroupReplicationStartOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_groupReplicationStartOption);
    }
    public groupReplicationStartOption(i: number): GroupReplicationStartOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationStartOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationStartOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationStartOptions) {
             listener.enterGroupReplicationStartOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationStartOptions) {
             listener.exitGroupReplicationStartOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationStartOptions) {
            return visitor.visitGroupReplicationStartOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationStartOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupReplicationUser(): GroupReplicationUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationUser, 0);
    }
    public groupReplicationPassword(): GroupReplicationPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationPassword, 0);
    }
    public groupReplicationPluginAuth(): GroupReplicationPluginAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationPluginAuth, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationStartOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationStartOption) {
             listener.enterGroupReplicationStartOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationStartOption) {
             listener.exitGroupReplicationStartOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationStartOption) {
            return visitor.visitGroupReplicationStartOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationUser) {
             listener.enterGroupReplicationUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationUser) {
             listener.exitGroupReplicationUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationUser) {
            return visitor.visitGroupReplicationUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationPassword) {
             listener.enterGroupReplicationPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationPassword) {
             listener.exitGroupReplicationPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationPassword) {
            return visitor.visitGroupReplicationPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupReplicationPluginAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationPluginAuth;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupReplicationPluginAuth) {
             listener.enterGroupReplicationPluginAuth(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupReplicationPluginAuth) {
             listener.exitGroupReplicationPluginAuth(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupReplicationPluginAuth) {
            return visitor.visitGroupReplicationPluginAuth(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public REPLICA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replica;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplica) {
             listener.enterReplica(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplica) {
             listener.exitReplica(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplica) {
            return visitor.visitReplica(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreparedStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public executeStatement(): ExecuteStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_executeStatement, 0);
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preparedStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPreparedStatement) {
             listener.enterPreparedStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPreparedStatement) {
             listener.exitPreparedStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPreparedStatement) {
            return visitor.visitPreparedStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public executeVarList(): ExecuteVarListContext | null {
        return this.getRuleContext(MySQLParser.RULE_executeVarList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_executeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExecuteStatement) {
             listener.enterExecuteStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExecuteStatement) {
             listener.exitExecuteStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExecuteStatement) {
            return visitor.visitExecuteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecuteVarListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable_list(): Vector<UserVariableContext> {
        return this.getRuleContexts(MySQLParser.RULE_userVariable);
    }
    public userVariable(i: number): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_executeVarList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExecuteVarList) {
             listener.enterExecuteVarList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExecuteVarList) {
             listener.exitExecuteVarList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExecuteVarList) {
            return visitor.visitExecuteVarList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CloneStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public REMOTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public COLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLON_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public dataDirSSL(): DataDirSSLContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataDirSSL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cloneStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCloneStatement) {
             listener.enterCloneStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCloneStatement) {
             listener.exitCloneStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCloneStatement) {
            return visitor.visitCloneStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataDirSSLContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ssl(): SslContext | null {
        return this.getRuleContext(MySQLParser.RULE_ssl, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataDirSSL;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDataDirSSL) {
             listener.enterDataDirSSL(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDataDirSSL) {
             listener.exitDataDirSSL(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDataDirSSL) {
            return visitor.visitDataDirSSL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SslContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SSL_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ssl;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSsl) {
             listener.enterSsl(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSsl) {
             listener.exitSsl(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSsl) {
            return visitor.visitSsl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccountManagementStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterUserStatement(): AlterUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterUserStatement, 0);
    }
    public createUserStatement(): CreateUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserStatement, 0);
    }
    public dropUserStatement(): DropUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropUserStatement, 0);
    }
    public grantStatement(): GrantStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantStatement, 0);
    }
    public renameUserStatement(): RenameUserStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_renameUserStatement, 0);
    }
    public revokeStatement(): RevokeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_revokeStatement, 0);
    }
    public setRoleStatement(): SetRoleStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_setRoleStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_accountManagementStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAccountManagementStatement) {
             listener.enterAccountManagementStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAccountManagementStatement) {
             listener.exitAccountManagementStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAccountManagementStatement) {
            return visitor.visitAccountManagementStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public createUserTail(): CreateUserTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserTail, 0);
    }
    public userFunction(): UserFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_userFunction, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public createUserList(): CreateUserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0);
    }
    public alterUserList(): AlterUserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterUserList, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public replacePassword(): ReplacePasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_replacePassword, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0);
    }
    public userRegistration(): UserRegistrationContext | null {
        return this.getRuleContext(MySQLParser.RULE_userRegistration, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterUserStatement) {
             listener.enterAlterUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterUserStatement) {
             listener.exitAlterUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterUserStatement) {
            return visitor.visitAlterUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterUser_list(): Vector<AlterUserContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterUser);
    }
    public alterUser(i: number): AlterUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterUser, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUserList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterUserList) {
             listener.enterAlterUserList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterUserList) {
             listener.exitAlterUserList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterUserList) {
            return visitor.visitAlterUserList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public oldAlterUser(): OldAlterUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_oldAlterUser, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0);
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByPassword, 0);
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByRandomPassword, 0);
    }
    public ADD_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ADD_SYMBOL);
    }
    public ADD_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, i);
    }
    public factor_list(): Vector<FactorContext> {
        return this.getRuleContexts(MySQLParser.RULE_factor);
    }
    public factor(i: number): FactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_factor, i);
    }
    public identification_list(): Vector<IdentificationContext> {
        return this.getRuleContexts(MySQLParser.RULE_identification);
    }
    public identification(i: number): IdentificationContext | null {
        return this.getRuleContext(MySQLParser.RULE_identification, i);
    }
    public MODIFY_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MODIFY_SYMBOL);
    }
    public MODIFY_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, i);
    }
    public DROP_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.DROP_SYMBOL);
    }
    public DROP_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, i);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0);
    }
    public discardOldPassword(): DiscardOldPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_discardOldPassword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterUser) {
             listener.enterAlterUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterUser) {
             listener.exitAlterUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterUser) {
            return visitor.visitAlterUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OldAlterUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString);
    }
    public textString(i: number): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, i);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0);
    }
    public discardOldPassword(): DiscardOldPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_discardOldPassword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_oldAlterUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOldAlterUser) {
             listener.enterOldAlterUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOldAlterUser) {
             listener.exitOldAlterUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOldAlterUser) {
            return visitor.visitOldAlterUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserFunction) {
             listener.enterUserFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserFunction) {
             listener.exitUserFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserFunction) {
            return visitor.visitUserFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public createUserList(): CreateUserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0);
    }
    public createUserTail(): CreateUserTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserTail, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public defaultRoleClause(): DefaultRoleClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultRoleClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUserStatement) {
             listener.enterCreateUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUserStatement) {
             listener.exitCreateUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUserStatement) {
            return visitor.visitCreateUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireClause(): RequireClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_requireClause, 0);
    }
    public connectOptions(): ConnectOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_connectOptions, 0);
    }
    public accountLockPasswordExpireOptions_list(): Vector<AccountLockPasswordExpireOptionsContext> {
        return this.getRuleContexts(MySQLParser.RULE_accountLockPasswordExpireOptions);
    }
    public accountLockPasswordExpireOptions(i: number): AccountLockPasswordExpireOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_accountLockPasswordExpireOptions, i);
    }
    public userAttributes(): UserAttributesContext | null {
        return this.getRuleContext(MySQLParser.RULE_userAttributes, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserTail;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUserTail) {
             listener.enterCreateUserTail(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUserTail) {
             listener.exitCreateUserTail(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUserTail) {
            return visitor.visitCreateUserTail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserAttributesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userAttributes;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserAttributes) {
             listener.enterUserAttributes(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserAttributes) {
             listener.exitUserAttributes(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserAttributes) {
            return visitor.visitUserAttributes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultRoleClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultRoleClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultRoleClause) {
             listener.enterDefaultRoleClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultRoleClause) {
             listener.exitDefaultRoleClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultRoleClause) {
            return visitor.visitDefaultRoleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RequireClauseContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public requireList(): RequireListContext | null {
        return this.getRuleContext(MySQLParser.RULE_requireList, 0);
    }
    public SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SSL_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRequireClause) {
             listener.enterRequireClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRequireClause) {
             listener.exitRequireClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRequireClause) {
            return visitor.visitRequireClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConnectOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number);
    }
    public ulong_number(i: number): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
    }
    public MAX_USER_CONNECTIONS_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_connectOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConnectOptions) {
             listener.enterConnectOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConnectOptions) {
             listener.exitConnectOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConnectOptions) {
            return visitor.visitConnectOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public UNLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EXPIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
    }
    public PASSWORD_LOCK_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_accountLockPasswordExpireOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAccountLockPasswordExpireOptions) {
             listener.enterAccountLockPasswordExpireOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAccountLockPasswordExpireOptions) {
             listener.exitAccountLockPasswordExpireOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAccountLockPasswordExpireOptions) {
            return visitor.visitAccountLockPasswordExpireOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserAttribute) {
             listener.enterUserAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserAttribute) {
             listener.exitUserAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserAttribute) {
            return visitor.visitUserAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropUserStatement) {
             listener.enterDropUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropUserStatement) {
             listener.exitDropUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropUserStatement) {
            return visitor.visitDropUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.GRANT_SYMBOL);
    }
    public GRANT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, i);
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilegesList, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public grantIdentifier(): GrantIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantIdentifier, 0);
    }
    public grantTargetList(): GrantTargetListContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantTargetList, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public aclType(): AclTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_aclType, 0);
    }
    public versionedRequireClause(): VersionedRequireClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_versionedRequireClause, 0);
    }
    public grantOptions(): GrantOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantOptions, 0);
    }
    public grantAs(): GrantAsContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantAs, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantStatement) {
             listener.enterGrantStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantStatement) {
             listener.exitGrantStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantStatement) {
            return visitor.visitGrantStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantTargetListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createUserList(): CreateUserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantTargetList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantTargetList) {
             listener.enterGrantTargetList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantTargetList) {
             listener.exitGrantTargetList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantTargetList) {
            return visitor.visitGrantTargetList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public grantOption(): GrantOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantOptions) {
             listener.enterGrantOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantOptions) {
             listener.exitGrantOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantOptions) {
            return visitor.visitGrantOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExceptRoleListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCEPT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exceptRoleList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExceptRoleList) {
             listener.enterExceptRoleList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExceptRoleList) {
             listener.exitExceptRoleList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExceptRoleList) {
            return visitor.visitExceptRoleList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithRolesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public exceptRoleList(): ExceptRoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exceptRoleList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withRoles;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWithRoles) {
             listener.enterWithRoles(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWithRoles) {
             listener.exitWithRoles(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWithRoles) {
            return visitor.visitWithRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantAsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public withRoles(): WithRolesContext | null {
        return this.getRuleContext(MySQLParser.RULE_withRoles, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantAs;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantAs) {
             listener.enterGrantAs(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantAs) {
             listener.exitGrantAs(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantAs) {
            return visitor.visitGrantAs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VersionedRequireClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireClause(): RequireClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_requireClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_versionedRequireClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterVersionedRequireClause) {
             listener.enterVersionedRequireClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitVersionedRequireClause) {
             listener.exitVersionedRequireClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitVersionedRequireClause) {
            return visitor.visitVersionedRequireClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public user_list(): Vector<UserContext> {
        return this.getRuleContexts(MySQLParser.RULE_user);
    }
    public user(i: number): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, i);
    }
    public TO_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.TO_SYMBOL);
    }
    public TO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renameUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRenameUserStatement) {
             listener.enterRenameUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRenameUserStatement) {
             listener.exitRenameUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRenameUserStatement) {
            return visitor.visitRenameUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVOKE_SYMBOL, 0);
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilegesList, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public grantIdentifier(): GrantIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_grantIdentifier, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public ignoreUnknownUser(): IgnoreUnknownUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_ignoreUnknownUser, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public aclType(): AclTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_aclType, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_revokeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRevokeStatement) {
             listener.enterRevokeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRevokeStatement) {
             listener.exitRevokeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRevokeStatement) {
            return visitor.visitRevokeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AclTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_aclType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAclType) {
             listener.enterAclType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAclType) {
             listener.exitAclType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAclType) {
            return visitor.visitAclType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOrPrivilegesListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrPrivilege_list(): Vector<RoleOrPrivilegeContext> {
        return this.getRuleContexts(MySQLParser.RULE_roleOrPrivilege);
    }
    public roleOrPrivilege(i: number): RoleOrPrivilegeContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilege, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrPrivilegesList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleOrPrivilegesList) {
             listener.enterRoleOrPrivilegesList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleOrPrivilegesList) {
             listener.exitRoleOrPrivilegesList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleOrPrivilegesList) {
            return visitor.visitRoleOrPrivilegesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOrPrivilegeContext extends ParserRuleContext {
    public _object!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifierOrText, 0);
    }
    public AT_TEXT_SUFFIX(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public columnInternalRefList(): ColumnInternalRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0);
    }
    public SELECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public REFERENCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public USAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USAGE_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public DATABASES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrPrivilege;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleOrPrivilege) {
             listener.enterRoleOrPrivilege(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleOrPrivilege) {
             listener.exitRoleOrPrivilege(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleOrPrivilege) {
            return visitor.visitRoleOrPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MULT_OPERATOR_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.MULT_OPERATOR);
    }
    public MULT_OPERATOR(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, i);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantIdentifier) {
             listener.enterGrantIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantIdentifier) {
             listener.exitGrantIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantIdentifier) {
            return visitor.visitGrantIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RequireListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public requireListElement_list(): Vector<RequireListElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_requireListElement);
    }
    public requireListElement(i: number): RequireListElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_requireListElement, i);
    }
    public AND_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AND_SYMBOL);
    }
    public AND_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRequireList) {
             listener.enterRequireList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRequireList) {
             listener.exitRequireList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRequireList) {
            return visitor.visitRequireList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RequireListElementContext extends ParserRuleContext {
    public _element!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireListElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRequireListElement) {
             listener.enterRequireListElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRequireListElement) {
             listener.exitRequireListElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRequireListElement) {
            return visitor.visitRequireListElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGrantOption) {
             listener.enterGrantOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGrantOption) {
             listener.exitGrantOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGrantOption) {
            return visitor.visitGrantOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRoleStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList_list(): Vector<RoleListContext> {
        return this.getRuleContexts(MySQLParser.RULE_roleList);
    }
    public roleList(i: number): RoleListContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleList, i);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public EXCEPT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setRoleStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetRoleStatement) {
             listener.enterSetRoleStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetRoleStatement) {
             listener.exitSetRoleStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetRoleStatement) {
            return visitor.visitSetRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public role_list(): Vector<RoleContext> {
        return this.getRuleContexts(MySQLParser.RULE_role);
    }
    public role(i: number): RoleContext | null {
        return this.getRuleContext(MySQLParser.RULE_role, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleList) {
             listener.enterRoleList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleList) {
             listener.exitRoleList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleList) {
            return visitor.visitRoleList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifierOrText, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_role;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRole) {
             listener.enterRole(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRole) {
             listener.exitRole(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRole) {
            return visitor.visitRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAdministrationStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRefList(): TableRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0);
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public noWriteToBinLog(): NoWriteToBinLogContext | null {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, 0);
    }
    public histogram(): HistogramContext | null {
        return this.getRuleContext(MySQLParser.RULE_histogram, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public checkOption_list(): Vector<CheckOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_checkOption);
    }
    public checkOption(i: number): CheckOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkOption, i);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public OPTIMIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public repairType_list(): Vector<RepairTypeContext> {
        return this.getRuleContexts(MySQLParser.RULE_repairType);
    }
    public repairType(i: number): RepairTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_repairType, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAdministrationStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableAdministrationStatement) {
             listener.enterTableAdministrationStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableAdministrationStatement) {
             listener.exitTableAdministrationStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableAdministrationStatement) {
            return visitor.visitTableAdministrationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HistogramAutoUpdateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public MANUAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MANUAL_SYMBOL, 0);
    }
    public AUTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_histogramAutoUpdate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHistogramAutoUpdate) {
             listener.enterHistogramAutoUpdate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHistogramAutoUpdate) {
             listener.exitHistogramAutoUpdate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHistogramAutoUpdate) {
            return visitor.visitHistogramAutoUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HistogramUpdateParamContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public histogramNumBuckets(): HistogramNumBucketsContext | null {
        return this.getRuleContext(MySQLParser.RULE_histogramNumBuckets, 0);
    }
    public histogramAutoUpdate(): HistogramAutoUpdateContext | null {
        return this.getRuleContext(MySQLParser.RULE_histogramAutoUpdate, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_histogramUpdateParam;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHistogramUpdateParam) {
             listener.enterHistogramUpdateParam(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHistogramUpdateParam) {
             listener.exitHistogramUpdateParam(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHistogramUpdateParam) {
            return visitor.visitHistogramUpdateParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HistogramNumBucketsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_histogramNumBuckets;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHistogramNumBuckets) {
             listener.enterHistogramNumBuckets(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHistogramNumBuckets) {
             listener.exitHistogramNumBuckets(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHistogramNumBuckets) {
            return visitor.visitHistogramNumBuckets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HistogramContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public histogramUpdateParam(): HistogramUpdateParamContext | null {
        return this.getRuleContext(MySQLParser.RULE_histogramUpdateParam, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_histogram;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHistogram) {
             listener.enterHistogram(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHistogram) {
             listener.exitHistogram(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHistogram) {
            return visitor.visitHistogram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCheckOption) {
             listener.enterCheckOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCheckOption) {
             listener.exitCheckOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCheckOption) {
            return visitor.visitCheckOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RepairTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_repairType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRepairType) {
             listener.enterRepairType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRepairType) {
             listener.exitRepairType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRepairType) {
            return visitor.visitRepairType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UninstallStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public pluginRef(): PluginRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_pluginRef, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public componentRef_list(): Vector<ComponentRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_componentRef);
    }
    public componentRef(i: number): ComponentRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_componentRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_uninstallStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUninstallStatement) {
             listener.enterUninstallStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUninstallStatement) {
             listener.exitUninstallStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUninstallStatement) {
            return visitor.visitUninstallStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InstallStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public textStringLiteralList(): TextStringLiteralListContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteralList, 0);
    }
    public installSetValueList(): InstallSetValueListContext | null {
        return this.getRuleContext(MySQLParser.RULE_installSetValueList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_installStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInstallStatement) {
             listener.enterInstallStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInstallStatement) {
             listener.exitInstallStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInstallStatement) {
            return visitor.visitInstallStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InstallOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_installOptionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInstallOptionType) {
             listener.enterInstallOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInstallOptionType) {
             listener.exitInstallOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInstallOptionType) {
            return visitor.visitInstallOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InstallSetRvalueContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_installSetRvalue;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInstallSetRvalue) {
             listener.enterInstallSetRvalue(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInstallSetRvalue) {
             listener.exitInstallSetRvalue(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInstallSetRvalue) {
            return visitor.visitInstallSetRvalue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InstallSetValueContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public installOptionType(): InstallOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_installOptionType, 0);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public installSetRvalue(): InstallSetRvalueContext | null {
        return this.getRuleContext(MySQLParser.RULE_installSetRvalue, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_installSetValue;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInstallSetValue) {
             listener.enterInstallSetValue(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInstallSetValue) {
             listener.exitInstallSetValue(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInstallSetValue) {
            return visitor.visitInstallSetValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InstallSetValueListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public installSetValue_list(): Vector<InstallSetValueContext> {
        return this.getRuleContexts(MySQLParser.RULE_installSetValue);
    }
    public installSetValue(i: number): InstallSetValueContext | null {
        return this.getRuleContext(MySQLParser.RULE_installSetValue, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_installSetValueList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInstallSetValueList) {
             listener.enterInstallSetValueList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInstallSetValueList) {
             listener.exitInstallSetValueList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInstallSetValueList) {
            return visitor.visitInstallSetValueList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public startOptionValueList(): StartOptionValueListContext | null {
        return this.getRuleContext(MySQLParser.RULE_startOptionValueList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetStatement) {
             listener.enterSetStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetStatement) {
             listener.exitSetStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartOptionValueListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueNoOptionType, 0);
    }
    public optionValueListContinued(): OptionValueListContinuedContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueListContinued, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionCharacteristics, 0);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0);
    }
    public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_startOptionValueListFollowingOptionType, 0);
    }
    public PASSWORD_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.PASSWORD_SYMBOL);
    }
    public PASSWORD_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, i);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public replacePassword(): ReplacePasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_replacePassword, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startOptionValueList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStartOptionValueList) {
             listener.enterStartOptionValueList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStartOptionValueList) {
             listener.exitStartOptionValueList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStartOptionValueList) {
            return visitor.visitStartOptionValueList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionCharacteristicsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transactionAccessMode(): TransactionAccessModeContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionAccessMode, 0);
    }
    public isolationLevel(): IsolationLevelContext | null {
        return this.getRuleContext(MySQLParser.RULE_isolationLevel, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionCharacteristics;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTransactionCharacteristics) {
             listener.enterTransactionCharacteristics(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTransactionCharacteristics) {
             listener.exitTransactionCharacteristics(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTransactionCharacteristics) {
            return visitor.visitTransactionCharacteristics(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionAccessModeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionAccessMode;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsolationLevelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_isolationLevel;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIsolationLevel) {
             listener.enterIsolationLevel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIsolationLevel) {
             listener.exitIsolationLevel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionValueListContinuedContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public optionValue_list(): Vector<OptionValueContext> {
        return this.getRuleContexts(MySQLParser.RULE_optionValue);
    }
    public optionValue(i: number): OptionValueContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValue, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueListContinued;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionValueListContinued) {
             listener.enterOptionValueListContinued(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionValueListContinued) {
             listener.exitOptionValueListContinued(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionValueListContinued) {
            return visitor.visitOptionValueListContinued(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionValueNoOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public setExprOrDefault(): SetExprOrDefaultContext | null {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0);
    }
    public charsetClause(): CharsetClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public setVarIdentType(): SetVarIdentTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_setVarIdentType, 0);
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueNoOptionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionValueNoOptionType) {
             listener.enterOptionValueNoOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionValueNoOptionType) {
             listener.exitOptionValueNoOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionValueNoOptionType) {
            return visitor.visitOptionValueNoOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionValueContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public setExprOrDefault(): SetExprOrDefaultContext | null {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0);
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueNoOptionType, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValue;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionValue) {
             listener.enterOptionValue(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionValue) {
             listener.exitOptionValue(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionValue) {
            return visitor.visitOptionValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetSystemVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public setVarIdentType(): SetVarIdentTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_setVarIdentType, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setSystemVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetSystemVariable) {
             listener.enterSetSystemVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetSystemVariable) {
             listener.exitSetSystemVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetSystemVariable) {
            return visitor.visitSetSystemVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueFollowingOptionType, 0);
    }
    public optionValueListContinued(): OptionValueListContinuedContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionValueListContinued, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext | null {
        return this.getRuleContext(MySQLParser.RULE_transactionCharacteristics, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startOptionValueListFollowingOptionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStartOptionValueListFollowingOptionType) {
             listener.enterStartOptionValueListFollowingOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStartOptionValueListFollowingOptionType) {
             listener.exitStartOptionValueListFollowingOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStartOptionValueListFollowingOptionType) {
            return visitor.visitStartOptionValueListFollowingOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lvalueVariable(): LvalueVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public setExprOrDefault(): SetExprOrDefaultContext | null {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueFollowingOptionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionValueFollowingOptionType) {
             listener.enterOptionValueFollowingOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionValueFollowingOptionType) {
             listener.exitOptionValueFollowingOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionValueFollowingOptionType) {
            return visitor.visitOptionValueFollowingOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetExprOrDefaultContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setExprOrDefault;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetExprOrDefault) {
             listener.enterSetExprOrDefault(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetExprOrDefault) {
             listener.exitSetExprOrDefault(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetExprOrDefault) {
            return visitor.visitSetExprOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowDatabasesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public DATABASES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showDatabasesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowDatabasesStatement) {
             listener.enterShowDatabasesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowDatabasesStatement) {
             listener.exitShowDatabasesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowDatabasesStatement) {
            return visitor.visitShowDatabasesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTablesStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public showCommandType(): ShowCommandTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCommandType, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTablesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowTablesStatement) {
             listener.enterShowTablesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowTablesStatement) {
             listener.exitShowTablesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowTablesStatement) {
            return visitor.visitShowTablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTriggersStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTriggersStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowTriggersStatement) {
             listener.enterShowTriggersStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowTriggersStatement) {
             listener.exitShowTriggersStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowTriggersStatement) {
            return visitor.visitShowTriggersStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEventsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEventsStatement) {
             listener.enterShowEventsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEventsStatement) {
             listener.exitShowEventsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEventsStatement) {
            return visitor.visitShowEventsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTableStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTableStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowTableStatusStatement) {
             listener.enterShowTableStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowTableStatusStatement) {
             listener.exitShowTableStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowTableStatusStatement) {
            return visitor.visitShowTableStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowOpenTablesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showOpenTablesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowOpenTablesStatement) {
             listener.enterShowOpenTablesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowOpenTablesStatement) {
             listener.exitShowOpenTablesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowOpenTablesStatement) {
            return visitor.visitShowOpenTablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowParseTreeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PARSE_TREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSE_TREE_SYMBOL, 0);
    }
    public simpleStatement(): SimpleStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showParseTreeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowParseTreeStatement) {
             listener.enterShowParseTreeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowParseTreeStatement) {
             listener.exitShowParseTreeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowParseTreeStatement) {
            return visitor.visitShowParseTreeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowPluginsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showPluginsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowPluginsStatement) {
             listener.enterShowPluginsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowPluginsStatement) {
             listener.exitShowPluginsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowPluginsStatement) {
            return visitor.visitShowPluginsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEngineLogsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineLogsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEngineLogsStatement) {
             listener.enterShowEngineLogsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEngineLogsStatement) {
             listener.exitShowEngineLogsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEngineLogsStatement) {
            return visitor.visitShowEngineLogsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEngineMutexStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0);
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineMutexStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEngineMutexStatement) {
             listener.enterShowEngineMutexStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEngineMutexStatement) {
             listener.exitShowEngineMutexStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEngineMutexStatement) {
            return visitor.visitShowEngineMutexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEngineStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEngineStatusStatement) {
             listener.enterShowEngineStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEngineStatusStatement) {
             listener.exitShowEngineStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEngineStatusStatement) {
            return visitor.visitShowEngineStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowColumnsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public showCommandType(): ShowCommandTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_showCommandType, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showColumnsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowColumnsStatement) {
             listener.enterShowColumnsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowColumnsStatement) {
             listener.exitShowColumnsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowColumnsStatement) {
            return visitor.visitShowColumnsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowBinaryLogsStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showBinaryLogsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowBinaryLogsStatement) {
             listener.enterShowBinaryLogsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowBinaryLogsStatement) {
             listener.exitShowBinaryLogsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowBinaryLogsStatement) {
            return visitor.visitShowBinaryLogsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowBinaryLogStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public LOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOG_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showBinaryLogStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowBinaryLogStatusStatement) {
             listener.enterShowBinaryLogStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowBinaryLogStatusStatement) {
             listener.exitShowBinaryLogStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowBinaryLogStatusStatement) {
            return visitor.visitShowBinaryLogStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowReplicasStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public REPLICAS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICAS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showReplicasStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowReplicasStatement) {
             listener.enterShowReplicasStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowReplicasStatement) {
             listener.exitShowReplicasStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowReplicasStatement) {
            return visitor.visitShowReplicasStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowBinlogEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglongNumber, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showBinlogEventsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowBinlogEventsStatement) {
             listener.enterShowBinlogEventsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowBinlogEventsStatement) {
             listener.exitShowBinlogEventsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowBinlogEventsStatement) {
            return visitor.visitShowBinlogEventsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRelaylogEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglongNumber, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showRelaylogEventsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowRelaylogEventsStatement) {
             listener.enterShowRelaylogEventsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowRelaylogEventsStatement) {
             listener.exitShowRelaylogEventsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowRelaylogEventsStatement) {
            return visitor.visitShowRelaylogEventsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowKeysStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public fromOrIn(): FromOrInContext | null {
        return this.getRuleContext(MySQLParser.RULE_fromOrIn, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public inDb(): InDbContext | null {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showKeysStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowKeysStatement) {
             listener.enterShowKeysStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowKeysStatement) {
             listener.exitShowKeysStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowKeysStatement) {
            return visitor.visitShowKeysStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowEnginesStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEnginesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowEnginesStatement) {
             listener.enterShowEnginesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowEnginesStatement) {
             listener.exitShowEnginesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowEnginesStatement) {
            return visitor.visitShowEnginesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCountWarningsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCountWarningsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCountWarningsStatement) {
             listener.enterShowCountWarningsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCountWarningsStatement) {
             listener.exitShowCountWarningsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCountWarningsStatement) {
            return visitor.visitShowCountWarningsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCountErrorsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCountErrorsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCountErrorsStatement) {
             listener.enterShowCountErrorsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCountErrorsStatement) {
             listener.exitShowCountErrorsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCountErrorsStatement) {
            return visitor.visitShowCountErrorsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowWarningsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showWarningsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowWarningsStatement) {
             listener.enterShowWarningsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowWarningsStatement) {
             listener.exitShowWarningsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowWarningsStatement) {
            return visitor.visitShowWarningsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowErrorsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showErrorsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowErrorsStatement) {
             listener.enterShowErrorsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowErrorsStatement) {
             listener.exitShowErrorsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowErrorsStatement) {
            return visitor.visitShowErrorsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowProfilesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProfilesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowProfilesStatement) {
             listener.enterShowProfilesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowProfilesStatement) {
             listener.exitShowProfilesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowProfilesStatement) {
            return visitor.visitShowProfilesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowProfileStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public profileDefinitions(): ProfileDefinitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_profileDefinitions, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProfileStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowProfileStatement) {
             listener.enterShowProfileStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowProfileStatement) {
             listener.exitShowProfileStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowProfileStatement) {
            return visitor.visitShowProfileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowStatusStatement) {
             listener.enterShowStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowStatusStatement) {
             listener.exitShowStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowStatusStatement) {
            return visitor.visitShowStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowProcessListStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProcessListStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowProcessListStatement) {
             listener.enterShowProcessListStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowProcessListStatement) {
             listener.exitShowProcessListStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowProcessListStatement) {
            return visitor.visitShowProcessListStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowVariablesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public optionType(): OptionTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showVariablesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowVariablesStatement) {
             listener.enterShowVariablesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowVariablesStatement) {
             listener.exitShowVariablesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowVariablesStatement) {
            return visitor.visitShowVariablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCharacterSetStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCharacterSetStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCharacterSetStatement) {
             listener.enterShowCharacterSetStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCharacterSetStatement) {
             listener.exitShowCharacterSetStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCharacterSetStatement) {
            return visitor.visitShowCharacterSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCollationStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCollationStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCollationStatement) {
             listener.enterShowCollationStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCollationStatement) {
             listener.exitShowCollationStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCollationStatement) {
            return visitor.visitShowCollationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowPrivilegesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showPrivilegesStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowPrivilegesStatement) {
             listener.enterShowPrivilegesStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowPrivilegesStatement) {
             listener.exitShowPrivilegesStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowPrivilegesStatement) {
            return visitor.visitShowPrivilegesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowGrantsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public userList(): UserListContext | null {
        return this.getRuleContext(MySQLParser.RULE_userList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showGrantsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowGrantsStatement) {
             listener.enterShowGrantsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowGrantsStatement) {
             listener.exitShowGrantsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowGrantsStatement) {
            return visitor.visitShowGrantsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateDatabaseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateDatabaseStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateDatabaseStatement) {
             listener.enterShowCreateDatabaseStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateDatabaseStatement) {
             listener.exitShowCreateDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateDatabaseStatement) {
            return visitor.visitShowCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateTableStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateTableStatement) {
             listener.enterShowCreateTableStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateTableStatement) {
             listener.exitShowCreateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateTableStatement) {
            return visitor.visitShowCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateViewStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRef(): ViewRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateViewStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateViewStatement) {
             listener.enterShowCreateViewStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateViewStatement) {
             listener.exitShowCreateViewStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateViewStatement) {
            return visitor.visitShowCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowMasterStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showMasterStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowMasterStatusStatement) {
             listener.enterShowMasterStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowMasterStatusStatement) {
             listener.exitShowMasterStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowMasterStatusStatement) {
            return visitor.visitShowMasterStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowReplicaStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public replica(): ReplicaContext | null {
        return this.getRuleContext(MySQLParser.RULE_replica, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showReplicaStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowReplicaStatusStatement) {
             listener.enterShowReplicaStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowReplicaStatusStatement) {
             listener.exitShowReplicaStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowReplicaStatusStatement) {
            return visitor.visitShowReplicaStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateProcedureStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateProcedureStatement) {
             listener.enterShowCreateProcedureStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateProcedureStatement) {
             listener.exitShowCreateProcedureStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateProcedureStatement) {
            return visitor.visitShowCreateProcedureStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateFunctionStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateFunctionStatement) {
             listener.enterShowCreateFunctionStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateFunctionStatement) {
             listener.exitShowCreateFunctionStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateFunctionStatement) {
            return visitor.visitShowCreateFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateTriggerStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerRef(): TriggerRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_triggerRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateTriggerStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateTriggerStatement) {
             listener.enterShowCreateTriggerStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateTriggerStatement) {
             listener.exitShowCreateTriggerStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateTriggerStatement) {
            return visitor.visitShowCreateTriggerStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateProcedureStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateProcedureStatusStatement) {
             listener.enterShowCreateProcedureStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateProcedureStatusStatement) {
             listener.exitShowCreateProcedureStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateProcedureStatusStatement) {
            return visitor.visitShowCreateProcedureStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateFunctionStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionStatusStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateFunctionStatusStatement) {
             listener.enterShowCreateFunctionStatusStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateFunctionStatusStatement) {
             listener.exitShowCreateFunctionStatusStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateFunctionStatusStatement) {
            return visitor.visitShowCreateFunctionStatusStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateProcedureCodeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureCodeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateProcedureCodeStatement) {
             listener.enterShowCreateProcedureCodeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateProcedureCodeStatement) {
             listener.exitShowCreateProcedureCodeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateProcedureCodeStatement) {
            return visitor.visitShowCreateProcedureCodeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateFunctionCodeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionCodeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateFunctionCodeStatement) {
             listener.enterShowCreateFunctionCodeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateFunctionCodeStatement) {
             listener.exitShowCreateFunctionCodeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateFunctionCodeStatement) {
            return visitor.visitShowCreateFunctionCodeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateEventStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateEventStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateEventStatement) {
             listener.enterShowCreateEventStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateEventStatement) {
             listener.exitShowCreateEventStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateEventStatement) {
            return visitor.visitShowCreateEventStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCreateUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateUserStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCreateUserStatement) {
             listener.enterShowCreateUserStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCreateUserStatement) {
             listener.exitShowCreateUserStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCreateUserStatement) {
            return visitor.visitShowCreateUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCommandTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCommandType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterShowCommandType) {
             listener.enterShowCommandType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitShowCommandType) {
             listener.exitShowCommandType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitShowCommandType) {
            return visitor.visitShowCommandType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineOrAllContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_engineOrAll;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEngineOrAll) {
             listener.enterEngineOrAll(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEngineOrAll) {
             listener.exitEngineOrAll(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEngineOrAll) {
            return visitor.visitEngineOrAll(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromOrInContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fromOrIn;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFromOrIn) {
             listener.enterFromOrIn(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFromOrIn) {
             listener.exitFromOrIn(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFromOrIn) {
            return visitor.visitFromOrIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InDbContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromOrIn(): FromOrInContext | null {
        return this.getRuleContext(MySQLParser.RULE_fromOrIn, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inDb;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInDb) {
             listener.enterInDb(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInDb) {
             listener.exitInDb(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInDb) {
            return visitor.visitInDb(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProfileDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public profileDefinition_list(): Vector<ProfileDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_profileDefinition);
    }
    public profileDefinition(i: number): ProfileDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_profileDefinition, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_profileDefinitions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProfileDefinitions) {
             listener.enterProfileDefinitions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProfileDefinitions) {
             listener.exitProfileDefinitions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProfileDefinitions) {
            return visitor.visitProfileDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProfileDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_profileDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProfileDefinition) {
             listener.enterProfileDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProfileDefinition) {
             listener.exitProfileDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProfileDefinition) {
            return visitor.visitProfileDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OtherAdministrativeStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public keyCacheListOrParts(): KeyCacheListOrPartsContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyCacheListOrParts, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public flushTables(): FlushTablesContext | null {
        return this.getRuleContext(MySQLParser.RULE_flushTables, 0);
    }
    public flushOption_list(): Vector<FlushOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_flushOption);
    }
    public flushOption(i: number): FlushOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_flushOption, i);
    }
    public noWriteToBinLog(): NoWriteToBinLogContext | null {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public KILL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KILL_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public preloadTail(): PreloadTailContext | null {
        return this.getRuleContext(MySQLParser.RULE_preloadTail, 0);
    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_otherAdministrativeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOtherAdministrativeStatement) {
             listener.enterOtherAdministrativeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOtherAdministrativeStatement) {
             listener.exitOtherAdministrativeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOtherAdministrativeStatement) {
            return visitor.visitOtherAdministrativeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyCacheListOrPartsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyCacheList(): KeyCacheListContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyCacheList, 0);
    }
    public assignToKeycachePartition(): AssignToKeycachePartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_assignToKeycachePartition, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyCacheListOrParts;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyCacheListOrParts) {
             listener.enterKeyCacheListOrParts(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyCacheListOrParts) {
             listener.exitKeyCacheListOrParts(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyCacheListOrParts) {
            return visitor.visitKeyCacheListOrParts(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyCacheListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignToKeycache_list(): Vector<AssignToKeycacheContext> {
        return this.getRuleContexts(MySQLParser.RULE_assignToKeycache);
    }
    public assignToKeycache(i: number): AssignToKeycacheContext | null {
        return this.getRuleContext(MySQLParser.RULE_assignToKeycache, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyCacheList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyCacheList) {
             listener.enterKeyCacheList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyCacheList) {
             listener.exitKeyCacheList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyCacheList) {
            return visitor.visitKeyCacheList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignToKeycacheContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignToKeycache;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAssignToKeycache) {
             listener.enterAssignToKeycache(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAssignToKeycache) {
             listener.exitAssignToKeycache(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAssignToKeycache) {
            return visitor.visitAssignToKeycache(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignToKeycachePartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext | null {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignToKeycachePartition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAssignToKeycachePartition) {
             listener.enterAssignToKeycachePartition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAssignToKeycachePartition) {
             listener.exitAssignToKeycachePartition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAssignToKeycachePartition) {
            return visitor.visitAssignToKeycachePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CacheKeyListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public keyUsageList(): KeyUsageListContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyUsageList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cacheKeyList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCacheKeyList) {
             listener.enterCacheKeyList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCacheKeyList) {
             listener.exitCacheKeyList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCacheKeyList) {
            return visitor.visitCacheKeyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyUsageElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyUsageElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyUsageElement) {
             listener.enterKeyUsageElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyUsageElement) {
             listener.exitKeyUsageElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyUsageElement) {
            return visitor.visitKeyUsageElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyUsageListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyUsageElement_list(): Vector<KeyUsageElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyUsageElement);
    }
    public keyUsageElement(i: number): KeyUsageElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyUsageElement, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyUsageList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyUsageList) {
             listener.enterKeyUsageList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyUsageList) {
             listener.exitKeyUsageList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyUsageList) {
            return visitor.visitKeyUsageList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public logType(): LogTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_logType, 0);
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public channel(): ChannelContext | null {
        return this.getRuleContext(MySQLParser.RULE_channel, 0);
    }
    public OPTIMIZER_COSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFlushOption) {
             listener.enterFlushOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFlushOption) {
             listener.exitFlushOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFlushOption) {
            return visitor.visitFlushOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogType) {
             listener.enterLogType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogType) {
             listener.exitLogType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogType) {
            return visitor.visitLogType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushTablesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public flushTablesOptions(): FlushTablesOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_flushTablesOptions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushTables;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFlushTables) {
             listener.enterFlushTables(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFlushTables) {
             listener.exitFlushTables(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFlushTables) {
            return visitor.visitFlushTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlushTablesOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushTablesOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFlushTablesOptions) {
             listener.enterFlushTablesOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFlushTablesOptions) {
             listener.exitFlushTablesOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFlushTablesOptions) {
            return visitor.visitFlushTablesOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreloadTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public adminPartition(): AdminPartitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_adminPartition, 0);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public preloadList(): PreloadListContext | null {
        return this.getRuleContext(MySQLParser.RULE_preloadList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadTail;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPreloadTail) {
             listener.enterPreloadTail(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPreloadTail) {
             listener.exitPreloadTail(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPreloadTail) {
            return visitor.visitPreloadTail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreloadListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public preloadKeys_list(): Vector<PreloadKeysContext> {
        return this.getRuleContexts(MySQLParser.RULE_preloadKeys);
    }
    public preloadKeys(i: number): PreloadKeysContext | null {
        return this.getRuleContext(MySQLParser.RULE_preloadKeys, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPreloadList) {
             listener.enterPreloadList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPreloadList) {
             listener.exitPreloadList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPreloadList) {
            return visitor.visitPreloadList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreloadKeysContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public cacheKeyList(): CacheKeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadKeys;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPreloadKeys) {
             listener.enterPreloadKeys(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPreloadKeys) {
             listener.exitPreloadKeys(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPreloadKeys) {
            return visitor.visitPreloadKeys(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdminPartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext | null {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_adminPartition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAdminPartition) {
             listener.enterAdminPartition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAdminPartition) {
             listener.exitAdminPartition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAdminPartition) {
            return visitor.visitAdminPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupManagementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createResourceGroup(): CreateResourceGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_createResourceGroup, 0);
    }
    public alterResourceGroup(): AlterResourceGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_alterResourceGroup, 0);
    }
    public setResourceGroup(): SetResourceGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_setResourceGroup, 0);
    }
    public dropResourceGroup(): DropResourceGroupContext | null {
        return this.getRuleContext(MySQLParser.RULE_dropResourceGroup, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupManagement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupManagement) {
             listener.enterResourceGroupManagement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupManagement) {
             listener.exitResourceGroupManagement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupManagement) {
            return visitor.visitResourceGroupManagement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupVcpuList, 0);
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupPriority, 0);
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupEnableDisable, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createResourceGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateResourceGroup) {
             listener.enterCreateResourceGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateResourceGroup) {
             listener.exitCreateResourceGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateResourceGroup) {
            return visitor.visitCreateResourceGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupVcpuListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public vcpuNumOrRange_list(): Vector<VcpuNumOrRangeContext> {
        return this.getRuleContexts(MySQLParser.RULE_vcpuNumOrRange);
    }
    public vcpuNumOrRange(i: number): VcpuNumOrRangeContext | null {
        return this.getRuleContext(MySQLParser.RULE_vcpuNumOrRange, i);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupVcpuList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupVcpuList) {
             listener.enterResourceGroupVcpuList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupVcpuList) {
             listener.exitResourceGroupVcpuList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupVcpuList) {
            return visitor.visitResourceGroupVcpuList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VcpuNumOrRangeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_vcpuNumOrRange;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterVcpuNumOrRange) {
             listener.enterVcpuNumOrRange(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitVcpuNumOrRange) {
             listener.exitVcpuNumOrRange(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitVcpuNumOrRange) {
            return visitor.visitVcpuNumOrRange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupPriorityContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupPriority;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupPriority) {
             listener.enterResourceGroupPriority(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupPriority) {
             listener.exitResourceGroupPriority(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupPriority) {
            return visitor.visitResourceGroupPriority(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupEnableDisableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupEnableDisable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupEnableDisable) {
             listener.enterResourceGroupEnableDisable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupEnableDisable) {
             listener.exitResourceGroupEnableDisable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupEnableDisable) {
            return visitor.visitResourceGroupEnableDisable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public resourceGroupRef(): ResourceGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupRef, 0);
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupVcpuList, 0);
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupPriority, 0);
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupEnableDisable, 0);
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterResourceGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAlterResourceGroup) {
             listener.enterAlterResourceGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAlterResourceGroup) {
             listener.exitAlterResourceGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAlterResourceGroup) {
            return visitor.visitAlterResourceGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public threadIdList(): ThreadIdListContext | null {
        return this.getRuleContext(MySQLParser.RULE_threadIdList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setResourceGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetResourceGroup) {
             listener.enterSetResourceGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetResourceGroup) {
             listener.exitSetResourceGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetResourceGroup) {
            return visitor.visitSetResourceGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ThreadIdListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulong_number_list(): Vector<Real_ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_real_ulong_number);
    }
    public real_ulong_number(i: number): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_threadIdList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterThreadIdList) {
             listener.enterThreadIdList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitThreadIdList) {
             listener.exitThreadIdList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitThreadIdList) {
            return visitor.visitThreadIdList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public resourceGroupRef(): ResourceGroupRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupRef, 0);
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropResourceGroup;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDropResourceGroup) {
             listener.enterDropResourceGroup(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDropResourceGroup) {
             listener.exitDropResourceGroup(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDropResourceGroup) {
            return visitor.visitDropResourceGroup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UtilityStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public describeStatement(): DescribeStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_describeStatement, 0);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_explainStatement, 0);
    }
    public helpCommand(): HelpCommandContext | null {
        return this.getRuleContext(MySQLParser.RULE_helpCommand, 0);
    }
    public useCommand(): UseCommandContext | null {
        return this.getRuleContext(MySQLParser.RULE_useCommand, 0);
    }
    public restartServer(): RestartServerContext | null {
        return this.getRuleContext(MySQLParser.RULE_restartServer, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_utilityStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUtilityStatement) {
             listener.enterUtilityStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUtilityStatement) {
             listener.exitUtilityStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUtilityStatement) {
            return visitor.visitUtilityStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public EXPLAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
    }
    public DESCRIBE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_describeStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDescribeStatement) {
             listener.enterDescribeStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDescribeStatement) {
             listener.exitDescribeStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDescribeStatement) {
            return visitor.visitDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainableStatement(): ExplainableStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_explainableStatement, 0);
    }
    public EXPLAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
    }
    public DESCRIBE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public explainOptions(): ExplainOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_explainOptions, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explainStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public explainInto(): ExplainIntoContext | null {
        return this.getRuleContext(MySQLParser.RULE_explainInto, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explainOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExplainOptions) {
             listener.enterExplainOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExplainOptions) {
             listener.exitExplainOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExplainOptions) {
            return visitor.visitExplainOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_deleteStatement, 0);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_insertStatement, 0);
    }
    public replaceStatement(): ReplaceStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_replaceStatement, 0);
    }
    public updateStatement(): UpdateStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateStatement, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explainableStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExplainableStatement) {
             listener.enterExplainableStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExplainableStatement) {
             listener.exitExplainableStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExplainableStatement) {
            return visitor.visitExplainableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainIntoContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explainInto;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExplainInto) {
             listener.enterExplainInto(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExplainInto) {
             listener.exitExplainInto(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExplainInto) {
            return visitor.visitExplainInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HelpCommandContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_helpCommand;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHelpCommand) {
             listener.enterHelpCommand(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHelpCommand) {
             listener.exitHelpCommand(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHelpCommand) {
            return visitor.visitHelpCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseCommandContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_useCommand;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUseCommand) {
             listener.enterUseCommand(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUseCommand) {
             listener.exitUseCommand(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUseCommand) {
            return visitor.visitUseCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RestartServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_restartServer;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRestartServer) {
             listener.enterRestartServer(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRestartServer) {
             listener.exitRestartServer(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRestartServer) {
            return visitor.visitRestartServer(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_expr;
    }
    public override copyFrom(ctx: ExprContext): void {
        super.copyFrom(ctx);
    }
}
export class ExprOrContext extends ExprContext {
    public _op!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public LOGICAL_OR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprOr) {
             listener.enterExprOr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprOr) {
             listener.exitExprOr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprOr) {
            return visitor.visitExprOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExprNotContext extends ExprContext {
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprNot) {
             listener.enterExprNot(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprNot) {
             listener.exitExprNot(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprNot) {
            return visitor.visitExprNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExprIsContext extends ExprContext {
    public _type_!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0);
    }
    public IS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IS_SYMBOL, 0);
    }
    public TRUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
    }
    public FALSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprIs) {
             listener.enterExprIs(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprIs) {
             listener.exitExprIs(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprIs) {
            return visitor.visitExprIs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExprAndContext extends ExprContext {
    public _op!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public LOGICAL_AND_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprAnd) {
             listener.enterExprAnd(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprAnd) {
             listener.exitExprAnd(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprAnd) {
            return visitor.visitExprAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExprXorContext extends ExprContext {
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public XOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XOR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprXor) {
             listener.enterExprXor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprXor) {
             listener.exitExprXor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprXor) {
            return visitor.visitExprXor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BoolPriContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_boolPri;
    }
    public override copyFrom(ctx: BoolPriContext): void {
        super.copyFrom(ctx);
    }
}
export class PrimaryExprPredicateContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrimaryExprPredicate) {
             listener.enterPrimaryExprPredicate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrimaryExprPredicate) {
             listener.exitPrimaryExprPredicate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrimaryExprPredicate) {
            return visitor.visitPrimaryExprPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryExprCompareContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0);
    }
    public compOp(): CompOpContext | null {
        return this.getRuleContext(MySQLParser.RULE_compOp, 0);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrimaryExprCompare) {
             listener.enterPrimaryExprCompare(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrimaryExprCompare) {
             listener.exitPrimaryExprCompare(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrimaryExprCompare) {
            return visitor.visitPrimaryExprCompare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryExprAllAnyContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0);
    }
    public compOp(): CompOpContext | null {
        return this.getRuleContext(MySQLParser.RULE_compOp, 0);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrimaryExprAllAny) {
             listener.enterPrimaryExprAllAny(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrimaryExprAllAny) {
             listener.exitPrimaryExprAllAny(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrimaryExprAllAny) {
            return visitor.visitPrimaryExprAllAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrimaryExprIsNullContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0);
    }
    public IS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IS_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrimaryExprIsNull) {
             listener.enterPrimaryExprIsNull(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrimaryExprIsNull) {
             listener.exitPrimaryExprIsNull(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrimaryExprIsNull) {
            return visitor.visitPrimaryExprIsNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompOpContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public NULL_SAFE_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0);
    }
    public GREATER_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
    }
    public GREATER_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
    }
    public LESS_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
    }
    public LESS_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
    }
    public NOT_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compOp;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCompOp) {
             listener.enterCompOp(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCompOp) {
             listener.exitCompOp(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCompOp) {
            return visitor.visitCompOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bitExpr_list(): Vector<BitExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_bitExpr);
    }
    public bitExpr(i: number): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, i);
    }
    public predicateOperations(): PredicateOperationsContext | null {
        return this.getRuleContext(MySQLParser.RULE_predicateOperations, 0);
    }
    public MEMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExprWithParentheses, 0);
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public OF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OF_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_predicate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateOperationsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_predicateOperations;
    }
    public override copyFrom(ctx: PredicateOperationsContext): void {
        super.copyFrom(ctx);
    }
}
export class PredicateExprRegexContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REGEXP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGEXP_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicateExprRegex) {
             listener.enterPredicateExprRegex(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicateExprRegex) {
             listener.exitPredicateExprRegex(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicateExprRegex) {
            return visitor.visitPredicateExprRegex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicateExprBetweenContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicateExprBetween) {
             listener.enterPredicateExprBetween(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicateExprBetween) {
             listener.exitPredicateExprBetween(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicateExprBetween) {
            return visitor.visitPredicateExprBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicateExprInContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicateExprIn) {
             listener.enterPredicateExprIn(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicateExprIn) {
             listener.exitPredicateExprIn(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicateExprIn) {
            return visitor.visitPredicateExprIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicateExprLikeContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public simpleExpr_list(): Vector<SimpleExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleExpr);
    }
    public simpleExpr(i: number): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, i);
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPredicateExprLike) {
             listener.enterPredicateExprLike(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPredicateExprLike) {
             listener.exitPredicateExprLike(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPredicateExprLike) {
            return visitor.visitPredicateExprLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BitExprContext extends ParserRuleContext {
    public _op!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public bitExpr_list(): Vector<BitExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_bitExpr);
    }
    public bitExpr(i: number): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, i);
    }
    public BITWISE_XOR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public DIV_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.DIV_OPERATOR, 0);
    }
    public MOD_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_OPERATOR, 0);
    }
    public DIV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIV_SYMBOL, 0);
    }
    public MOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_SYMBOL, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public SHIFT_LEFT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0);
    }
    public SHIFT_RIGHT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0);
    }
    public BITWISE_AND_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0);
    }
    public BITWISE_OR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_bitExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterBitExpr) {
             listener.enterBitExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitBitExpr) {
             listener.exitBitExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitBitExpr) {
            return visitor.visitBitExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleExpr;
    }
    public override copyFrom(ctx: SimpleExprContext): void {
        super.copyFrom(ctx);
    }
}
export class SimpleExprConvertContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public castType(): CastTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_castType, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprConvert) {
             listener.enterSimpleExprConvert(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprConvert) {
             listener.exitSimpleExprConvert(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprConvert) {
            return visitor.visitSimpleExprConvert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprCastContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CAST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public castType(): CastTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_castType, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public arrayCast(): ArrayCastContext | null {
        return this.getRuleContext(MySQLParser.RULE_arrayCast, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprCast) {
             listener.enterSimpleExprCast(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprCast) {
             listener.exitSimpleExprCast(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprCast) {
            return visitor.visitSimpleExprCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprUnaryContext extends SimpleExprContext {
    public _op!: Token;
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public BITWISE_NOT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprUnary) {
             listener.enterSimpleExprUnary(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprUnary) {
             listener.exitSimpleExprUnary(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprUnary) {
            return visitor.visitSimpleExprUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExpressionRValueContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemOrUserVariable, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExpressionRValue) {
             listener.enterSimpleExpressionRValue(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExpressionRValue) {
             listener.exitSimpleExpressionRValue(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExpressionRValue) {
            return visitor.visitSimpleExpressionRValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprOdbcContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public CLOSE_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprOdbc) {
             listener.enterSimpleExprOdbc(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprOdbc) {
             listener.exitSimpleExprOdbc(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprOdbc) {
            return visitor.visitSimpleExprOdbc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public runtimeFunctionCall(): RuntimeFunctionCallContext | null {
        return this.getRuleContext(MySQLParser.RULE_runtimeFunctionCall, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprRuntimeFunction) {
             listener.enterSimpleExprRuntimeFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprRuntimeFunction) {
             listener.exitSimpleExprRuntimeFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprRuntimeFunction) {
            return visitor.visitSimpleExprRuntimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionCall(): FunctionCallContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionCall, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprFunction) {
             listener.enterSimpleExprFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprFunction) {
             listener.exitSimpleExprFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprFunction) {
            return visitor.visitSimpleExprFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprCollateContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprCollate) {
             listener.enterSimpleExprCollate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprCollate) {
             listener.exitSimpleExprCollate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprCollate) {
            return visitor.visitSimpleExprCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprMatchContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
    }
    public identListArg(): IdentListArgContext | null {
        return this.getRuleContext(MySQLParser.RULE_identListArg, 0);
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fulltextOptions(): FulltextOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_fulltextOptions, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprMatch) {
             listener.enterSimpleExprMatch(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprMatch) {
             listener.exitSimpleExprMatch(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprMatch) {
            return visitor.visitSimpleExprMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprWindowingFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowFunctionCall(): WindowFunctionCallContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowFunctionCall, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprWindowingFunction) {
             listener.enterSimpleExprWindowingFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprWindowingFunction) {
             listener.exitSimpleExprWindowingFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprWindowingFunction) {
            return visitor.visitSimpleExprWindowingFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprBinaryContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprBinary) {
             listener.enterSimpleExprBinary(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprBinary) {
             listener.exitSimpleExprBinary(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprBinary) {
            return visitor.visitSimpleExprBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprColumnRefContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0);
    }
    public jsonOperator(): JsonOperatorContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonOperator, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprColumnRef) {
             listener.enterSimpleExprColumnRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprColumnRef) {
             listener.exitSimpleExprColumnRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprColumnRef) {
            return visitor.visitSimpleExprColumnRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprParamMarkerContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprParamMarker) {
             listener.enterSimpleExprParamMarker(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprParamMarker) {
             listener.exitSimpleExprParamMarker(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprParamMarker) {
            return visitor.visitSimpleExprParamMarker(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprSumContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sumExpr(): SumExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_sumExpr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprSum) {
             listener.enterSimpleExprSum(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprSum) {
             listener.exitSimpleExprSum(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprSum) {
            return visitor.visitSimpleExprSum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprCastTimeContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CAST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public ZONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ZONE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprCastTime) {
             listener.enterSimpleExprCastTime(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprCastTime) {
             listener.exitSimpleExprCastTime(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprCastTime) {
            return visitor.visitSimpleExprCastTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprConvertUsingContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprConvertUsing) {
             listener.enterSimpleExprConvertUsing(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprConvertUsing) {
             listener.exitSimpleExprConvertUsing(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprConvertUsing) {
            return visitor.visitSimpleExprConvertUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprSubQueryContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public subquery(): SubqueryContext | null {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprSubQuery) {
             listener.enterSimpleExprSubQuery(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprSubQuery) {
             listener.exitSimpleExprSubQuery(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprSubQuery) {
            return visitor.visitSimpleExprSubQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprGroupingOperationContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingOperation(): GroupingOperationContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupingOperation, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprGroupingOperation) {
             listener.enterSimpleExprGroupingOperation(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprGroupingOperation) {
             listener.exitSimpleExprGroupingOperation(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprGroupingOperation) {
            return visitor.visitSimpleExprGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprNotContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public not2Rule(): Not2RuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_not2Rule, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprNot) {
             listener.enterSimpleExprNot(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprNot) {
             listener.exitSimpleExprNot(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprNot) {
            return visitor.visitSimpleExprNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprValuesContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleIdentifier(): SimpleIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprValues) {
             listener.enterSimpleExprValues(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprValues) {
             listener.exitSimpleExprValues(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprValues) {
            return visitor.visitSimpleExprValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprUserVariableAssignmentContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public inExpressionUserVariableAssignment(): InExpressionUserVariableAssignmentContext | null {
        return this.getRuleContext(MySQLParser.RULE_inExpressionUserVariableAssignment, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprUserVariableAssignment) {
             listener.enterSimpleExprUserVariableAssignment(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprUserVariableAssignment) {
             listener.exitSimpleExprUserVariableAssignment(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprUserVariableAssignment) {
            return visitor.visitSimpleExprUserVariableAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprDefaultContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleIdentifier(): SimpleIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprDefault) {
             listener.enterSimpleExprDefault(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprDefault) {
             listener.exitSimpleExprDefault(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprDefault) {
            return visitor.visitSimpleExprDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprListContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprList) {
             listener.enterSimpleExprList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprList) {
             listener.exitSimpleExprList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprList) {
            return visitor.visitSimpleExprList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprIntervalContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprInterval) {
             listener.enterSimpleExprInterval(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprInterval) {
             listener.exitSimpleExprInterval(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprInterval) {
            return visitor.visitSimpleExprInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprCaseContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASE_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public whenExpression_list(): Vector<WhenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_whenExpression);
    }
    public whenExpression(i: number): WhenExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_whenExpression, i);
    }
    public thenExpression_list(): Vector<ThenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_thenExpression);
    }
    public thenExpression(i: number): ThenExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_thenExpression, i);
    }
    public elseExpression(): ElseExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_elseExpression, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprCase) {
             listener.enterSimpleExprCase(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprCase) {
             listener.exitSimpleExprCase(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprCase) {
            return visitor.visitSimpleExprCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprConcatContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr_list(): Vector<SimpleExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleExpr);
    }
    public simpleExpr(i: number): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, i);
    }
    public CONCAT_PIPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprConcat) {
             listener.enterSimpleExprConcat(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprConcat) {
             listener.exitSimpleExprConcat(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprConcat) {
            return visitor.visitSimpleExprConcat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleExprLiteralContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literalOrNull(): LiteralOrNullContext | null {
        return this.getRuleContext(MySQLParser.RULE_literalOrNull, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprLiteral) {
             listener.enterSimpleExprLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprLiteral) {
             listener.exitSimpleExprLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprLiteral) {
            return visitor.visitSimpleExprLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayCastContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARRAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_arrayCast;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterArrayCast) {
             listener.enterArrayCast(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitArrayCast) {
             listener.exitArrayCast(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitArrayCast) {
            return visitor.visitArrayCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonOperatorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public JSON_UNQUOTED_SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonOperator;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJsonOperator) {
             listener.enterJsonOperator(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJsonOperator) {
             listener.exitJsonOperator(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJsonOperator) {
            return visitor.visitJsonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SumExprContext extends ParserRuleContext {
    public _name!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public inSumExpr(): InSumExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_inSumExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public windowingClause(): WindowingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0);
    }
    public BIT_AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_AND_SYMBOL, 0);
    }
    public BIT_OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_OR_SYMBOL, 0);
    }
    public BIT_XOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_XOR_SYMBOL, 0);
    }
    public jsonFunction(): JsonFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonFunction, 0);
    }
    public ST_COLLECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ST_COLLECT_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public MIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_SYMBOL, 0);
    }
    public MAX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SYMBOL, 0);
    }
    public STD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STD_SYMBOL, 0);
    }
    public VARIANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIANCE_SYMBOL, 0);
    }
    public STDDEV_SAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0);
    }
    public VAR_SAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0);
    }
    public SUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUM_SYMBOL, 0);
    }
    public GROUP_CONCAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0);
    }
    public orderClause(): OrderClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0);
    }
    public SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEPARATOR_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sumExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSumExpr) {
             listener.enterSumExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSumExpr) {
             listener.exitSumExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSumExpr) {
            return visitor.visitSumExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingOperationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUPING_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupingOperation;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupingOperation) {
             listener.enterGroupingOperation(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupingOperation) {
             listener.exitGroupingOperation(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupingOperation) {
            return visitor.visitGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public windowingClause(): WindowingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0);
    }
    public ROW_NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0);
    }
    public RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANK_SYMBOL, 0);
    }
    public DENSE_RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0);
    }
    public CUME_DIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CUME_DIST_SYMBOL, 0);
    }
    public PERCENT_RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0);
    }
    public NTILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NTILE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public stableInteger(): StableIntegerContext | null {
        return this.getRuleContext(MySQLParser.RULE_stableInteger, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExprWithParentheses, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public LEAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAD_SYMBOL, 0);
    }
    public LAG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAG_SYMBOL, 0);
    }
    public leadLagInfo(): LeadLagInfoContext | null {
        return this.getRuleContext(MySQLParser.RULE_leadLagInfo, 0);
    }
    public nullTreatment(): NullTreatmentContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullTreatment, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public FIRST_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0);
    }
    public LAST_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0);
    }
    public NTH_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFunctionCall;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowFunctionCall) {
             listener.enterWindowFunctionCall(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowFunctionCall) {
             listener.exitWindowFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowFunctionCall) {
            return visitor.visitWindowFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SamplingMethodContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public BENROULLI_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BENROULLI_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_samplingMethod;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSamplingMethod) {
             listener.enterSamplingMethod(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSamplingMethod) {
             listener.exitSamplingMethod(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSamplingMethod) {
            return visitor.visitSamplingMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SamplingPercentageContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglongNumber, 0);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_samplingPercentage;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSamplingPercentage) {
             listener.enterSamplingPercentage(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSamplingPercentage) {
             listener.exitSamplingPercentage(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSamplingPercentage) {
            return visitor.visitSamplingPercentage(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablesampleClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESAMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESAMPLE_SYMBOL, 0);
    }
    public samplingMethod(): SamplingMethodContext | null {
        return this.getRuleContext(MySQLParser.RULE_samplingMethod, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public samplingPercentage(): SamplingPercentageContext | null {
        return this.getRuleContext(MySQLParser.RULE_samplingPercentage, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablesampleClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablesampleClause) {
             listener.enterTablesampleClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablesampleClause) {
             listener.exitTablesampleClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablesampleClause) {
            return visitor.visitTablesampleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OVER_SYMBOL, 0);
    }
    public windowName(): WindowNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowSpec, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowingClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowingClause) {
             listener.enterWindowingClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowingClause) {
             listener.exitWindowingClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowingClause) {
            return visitor.visitWindowingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LeadLagInfoContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglongNumber, 0);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public stableInteger(): StableIntegerContext | null {
        return this.getRuleContext(MySQLParser.RULE_stableInteger, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_leadLagInfo;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLeadLagInfo) {
             listener.enterLeadLagInfo(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLeadLagInfo) {
             listener.exitLeadLagInfo(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLeadLagInfo) {
            return visitor.visitLeadLagInfo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StableIntegerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public int64Literal(): Int64LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_int64Literal, 0);
    }
    public paramOrVar(): ParamOrVarContext | null {
        return this.getRuleContext(MySQLParser.RULE_paramOrVar, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stableInteger;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStableInteger) {
             listener.enterStableInteger(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStableInteger) {
             listener.exitStableInteger(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStableInteger) {
            return visitor.visitStableInteger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParamOrVarContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_paramOrVar;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterParamOrVar) {
             listener.enterParamOrVar(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitParamOrVar) {
             listener.exitParamOrVar(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitParamOrVar) {
            return visitor.visitParamOrVar(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullTreatmentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullTreatment;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNullTreatment) {
             listener.enterNullTreatment(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNullTreatment) {
             listener.exitNullTreatment(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNullTreatment) {
            return visitor.visitNullTreatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_ARRAYAGG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public inSumExpr_list(): Vector<InSumExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_inSumExpr);
    }
    public inSumExpr(i: number): InSumExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_inSumExpr, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public windowingClause(): WindowingClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0);
    }
    public JSON_OBJECTAGG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJsonFunction) {
             listener.enterJsonFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJsonFunction) {
             listener.exitJsonFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJsonFunction) {
            return visitor.visitJsonFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InSumExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inSumExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInSumExpr) {
             listener.enterInSumExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInSumExpr) {
             listener.exitInSumExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInSumExpr) {
            return visitor.visitInSumExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentListArgContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identList(): IdentListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identList, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identListArg;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentListArg) {
             listener.enterIdentListArg(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentListArg) {
             listener.exitIdentListArg(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentListArg) {
            return visitor.visitIdentListArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleIdentifier_list(): Vector<SimpleIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleIdentifier);
    }
    public simpleIdentifier(i: number): SimpleIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentList) {
             listener.enterIdentList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentList) {
             listener.exitIdentList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentList) {
            return visitor.visitIdentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FulltextOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public NATURAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fulltextOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFulltextOptions) {
             listener.enterFulltextOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFulltextOptions) {
             listener.exitFulltextOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFulltextOptions) {
            return visitor.visitFulltextOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RuntimeFunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public CURRENT_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public JSON_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_VALUE_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public onEmptyOrError(): OnEmptyOrErrorContext | null {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrError, 0);
    }
    public returningType(): ReturningTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_returningType, 0);
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public trimFunction(): TrimFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_trimFunction, 0);
    }
    public userFunction(): UserFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_userFunction, 0);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public CURDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURDATE_SYMBOL, 0);
    }
    public CURTIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURTIME_SYMBOL, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext | null {
        return this.getRuleContext(MySQLParser.RULE_timeFunctionParameters, 0);
    }
    public DATE_ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_ADD_SYMBOL, 0);
    }
    public DATE_SUB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SUB_SYMBOL, 0);
    }
    public EXTRACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTRACT_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public dateTimeTtype(): DateTimeTtypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dateTimeTtype, 0);
    }
    public LOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOG_SYMBOL, 0);
    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POSITION_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public substringFunction(): SubstringFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_substringFunction, 0);
    }
    public SYSDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSDATE_SYMBOL, 0);
    }
    public intervalTimeStamp(): IntervalTimeStampContext | null {
        return this.getRuleContext(MySQLParser.RULE_intervalTimeStamp, 0);
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public UTC_DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_DATE_SYMBOL, 0);
    }
    public UTC_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_TIME_SYMBOL, 0);
    }
    public UTC_TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprListWithParentheses, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public REPEAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEAT_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public wsNumCodepoints(): WsNumCodepointsContext | null {
        return this.getRuleContext(MySQLParser.RULE_wsNumCodepoints, 0);
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number);
    }
    public ulong_number(i: number): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i);
    }
    public geometryFunction(): GeometryFunctionContext | null {
        return this.getRuleContext(MySQLParser.RULE_geometryFunction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_runtimeFunctionCall;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRuntimeFunctionCall) {
             listener.enterRuntimeFunctionCall(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRuntimeFunctionCall) {
             listener.exitRuntimeFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRuntimeFunctionCall) {
            return visitor.visitRuntimeFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturningTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNING_SYMBOL, 0);
    }
    public castType(): CastTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_castType, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_returningType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReturningType) {
             listener.enterReturningType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReturningType) {
             listener.exitReturningType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReturningType) {
            return visitor.visitReturningType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeometryFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprListWithParentheses, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_geometryFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGeometryFunction) {
             listener.enterGeometryFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGeometryFunction) {
             listener.exitGeometryFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGeometryFunction) {
            return visitor.visitGeometryFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeFunctionParametersContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fractionalPrecision(): FractionalPrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fractionalPrecision, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_timeFunctionParameters;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTimeFunctionParameters) {
             listener.enterTimeFunctionParameters(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTimeFunctionParameters) {
             listener.exitTimeFunctionParameters(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTimeFunctionParameters) {
            return visitor.visitTimeFunctionParameters(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FractionalPrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fractionalPrecision;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFractionalPrecision) {
             listener.enterFractionalPrecision(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFractionalPrecision) {
             listener.exitFractionalPrecision(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFractionalPrecision) {
            return visitor.visitFractionalPrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WeightStringLevelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public real_ulong_number_list(): Vector<Real_ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_real_ulong_number);
    }
    public real_ulong_number(i: number): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, i);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public weightStringLevelListItem_list(): Vector<WeightStringLevelListItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_weightStringLevelListItem);
    }
    public weightStringLevelListItem(i: number): WeightStringLevelListItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_weightStringLevelListItem, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_weightStringLevels;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWeightStringLevels) {
             listener.enterWeightStringLevels(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWeightStringLevels) {
             listener.exitWeightStringLevels(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWeightStringLevels) {
            return visitor.visitWeightStringLevels(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WeightStringLevelListItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ASC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASC_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_weightStringLevelListItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWeightStringLevelListItem) {
             listener.enterWeightStringLevelListItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWeightStringLevelListItem) {
             listener.exitWeightStringLevelListItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWeightStringLevelListItem) {
            return visitor.visitWeightStringLevelListItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateTimeTtypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dateTimeTtype;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDateTimeTtype) {
             listener.enterDateTimeTtype(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDateTimeTtype) {
             listener.exitDateTimeTtype(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDateTimeTtype) {
            return visitor.visitDateTimeTtype(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRIM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIM_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public LEADING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEADING_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public TRAILING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRAILING_SYMBOL, 0);
    }
    public BOTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOTH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_trimFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTrimFunction) {
             listener.enterTrimFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTrimFunction) {
             listener.exitTrimFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTrimFunction) {
            return visitor.visitTrimFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubstringFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBSTRING_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_substringFunction;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSubstringFunction) {
             listener.enterSubstringFunction(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSubstringFunction) {
             listener.exitSubstringFunction(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSubstringFunction) {
            return visitor.visitSubstringFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public udfExprList(): UdfExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_udfExprList, 0);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionCall;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionCall) {
             listener.enterFunctionCall(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionCall) {
             listener.exitFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UdfExprListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public udfExpr_list(): Vector<UdfExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_udfExpr);
    }
    public udfExpr(i: number): UdfExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_udfExpr, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfExprList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUdfExprList) {
             listener.enterUdfExprList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUdfExprList) {
             listener.exitUdfExprList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUdfExprList) {
            return visitor.visitUdfExprList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UdfExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public selectAlias(): SelectAliasContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectAlias, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUdfExpr) {
             listener.enterUdfExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUdfExpr) {
             listener.exitUdfExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUdfExpr) {
            return visitor.visitUdfExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public AT_TEXT_SUFFIX(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserVariable) {
             listener.enterUserVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserVariable) {
             listener.exitUserVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserVariable) {
            return visitor.visitUserVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InExpressionUserVariableAssignmentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public ASSIGN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inExpressionUserVariableAssignment;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInExpressionUserVariableAssignment) {
             listener.enterInExpressionUserVariableAssignment(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInExpressionUserVariableAssignment) {
             listener.exitInExpressionUserVariableAssignment(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInExpressionUserVariableAssignment) {
            return visitor.visitInExpressionUserVariableAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RvalueSystemOrUserVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public rvalueSystemVariable(): RvalueSystemVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemVariable, 0);
    }
    public rvalueSystemVariableType(): RvalueSystemVariableTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemVariableType, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemOrUserVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRvalueSystemOrUserVariable) {
             listener.enterRvalueSystemOrUserVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRvalueSystemOrUserVariable) {
             listener.exitRvalueSystemOrUserVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRvalueSystemOrUserVariable) {
            return visitor.visitRvalueSystemOrUserVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LvalueVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public lValueIdentifier(): LValueIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_lValueIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lvalueVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLvalueVariable) {
             listener.enterLvalueVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLvalueVariable) {
             listener.exitLvalueVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLvalueVariable) {
            return visitor.visitLvalueVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RvalueSystemVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemVariable;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRvalueSystemVariable) {
             listener.enterRvalueSystemVariable(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRvalueSystemVariable) {
             listener.exitRvalueSystemVariable(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRvalueSystemVariable) {
            return visitor.visitRvalueSystemVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WHEN_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whenExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWhenExpression) {
             listener.enterWhenExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWhenExpression) {
             listener.exitWhenExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWhenExpression) {
            return visitor.visitWhenExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ThenExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THEN_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_thenExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterThenExpression) {
             listener.enterThenExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitThenExpression) {
             listener.exitThenExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitThenExpression) {
            return visitor.visitThenExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_elseExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterElseExpression) {
             listener.enterElseExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitElseExpression) {
             listener.exitElseExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitElseExpression) {
            return visitor.visitElseExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetWithOptBinary, 0);
    }
    public nchar(): NcharContext | null {
        return this.getRuleContext(MySQLParser.RULE_nchar, 0);
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public UNSIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public floatOptions(): FloatOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_floatOptions, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public realType(): RealTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_realType, 0);
    }
    public FLOAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
    }
    public standardFloatOptions(): StandardFloatOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_standardFloatOptions, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_castType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCastType) {
             listener.enterCastType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCastType) {
             listener.exitCastType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCastType) {
            return visitor.visitCastType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprList) {
             listener.enterExprList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprList) {
             listener.exitExprList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprList) {
            return visitor.visitExprList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charset;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCharset) {
             listener.enterCharset(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCharset) {
             listener.exitCharset(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCharset) {
            return visitor.visitCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotRuleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public NOT2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_notRule;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNotRule) {
             listener.enterNotRule(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNotRule) {
             listener.exitNotRule(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNotRule) {
            return visitor.visitNotRule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Not2RuleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOGICAL_NOT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0);
    }
    public NOT2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_not2Rule;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNot2Rule) {
             listener.enterNot2Rule(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNot2Rule) {
             listener.exitNot2Rule(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNot2Rule) {
            return visitor.visitNot2Rule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalTimeStamp(): IntervalTimeStampContext | null {
        return this.getRuleContext(MySQLParser.RULE_intervalTimeStamp, 0);
    }
    public SECOND_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0);
    }
    public MINUTE_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0);
    }
    public MINUTE_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0);
    }
    public HOUR_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0);
    }
    public HOUR_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0);
    }
    public HOUR_MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0);
    }
    public DAY_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0);
    }
    public DAY_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0);
    }
    public DAY_MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0);
    }
    public DAY_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0);
    }
    public YEAR_MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_interval;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalTimeStampContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_intervalTimeStamp;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIntervalTimeStamp) {
             listener.enterIntervalTimeStamp(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIntervalTimeStamp) {
             listener.exitIntervalTimeStamp(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIntervalTimeStamp) {
            return visitor.visitIntervalTimeStamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprListWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprListWithParentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprListWithParentheses) {
             listener.enterExprListWithParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprListWithParentheses) {
             listener.exitExprListWithParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprListWithParentheses) {
            return visitor.visitExprListWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprWithParentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterExprWithParentheses) {
             listener.enterExprWithParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitExprWithParentheses) {
             listener.exitExprWithParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitExprWithParentheses) {
            return visitor.visitExprWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleExprWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleExprWithParentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleExprWithParentheses) {
             listener.enterSimpleExprWithParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleExprWithParentheses) {
             listener.exitSimpleExprWithParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleExprWithParentheses) {
            return visitor.visitSimpleExprWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public orderExpression_list(): Vector<OrderExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_orderExpression);
    }
    public orderExpression(i: number): OrderExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_orderExpression, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOrderList) {
             listener.enterOrderList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOrderList) {
             listener.exitOrderList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOrderList) {
            return visitor.visitOrderList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(MySQLParser.RULE_direction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOrderExpression) {
             listener.enterOrderExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOrderExpression) {
             listener.exitOrderExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOrderExpression) {
            return visitor.visitOrderExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingExpression_list(): Vector<GroupingExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_groupingExpression);
    }
    public groupingExpression(i: number): GroupingExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_groupingExpression, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupList) {
             listener.enterGroupList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupList) {
             listener.exitGroupList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupList) {
            return visitor.visitGroupList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupingExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGroupingExpression) {
             listener.enterGroupingExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGroupingExpression) {
             listener.exitGroupingExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGroupingExpression) {
            return visitor.visitGroupingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ChannelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_channel;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterChannel) {
             listener.enterChannel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitChannel) {
             listener.exitChannel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitChannel) {
            return visitor.visitChannel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompoundStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleStatement(): SimpleStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_simpleStatement, 0);
    }
    public returnStatement(): ReturnStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_returnStatement, 0);
    }
    public ifStatement(): IfStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifStatement, 0);
    }
    public caseStatement(): CaseStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_caseStatement, 0);
    }
    public labeledBlock(): LabeledBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_labeledBlock, 0);
    }
    public unlabeledBlock(): UnlabeledBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_unlabeledBlock, 0);
    }
    public labeledControl(): LabeledControlContext | null {
        return this.getRuleContext(MySQLParser.RULE_labeledControl, 0);
    }
    public unlabeledControl(): UnlabeledControlContext | null {
        return this.getRuleContext(MySQLParser.RULE_unlabeledControl, 0);
    }
    public leaveStatement(): LeaveStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_leaveStatement, 0);
    }
    public iterateStatement(): IterateStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_iterateStatement, 0);
    }
    public cursorOpen(): CursorOpenContext | null {
        return this.getRuleContext(MySQLParser.RULE_cursorOpen, 0);
    }
    public cursorFetch(): CursorFetchContext | null {
        return this.getRuleContext(MySQLParser.RULE_cursorFetch, 0);
    }
    public cursorClose(): CursorCloseContext | null {
        return this.getRuleContext(MySQLParser.RULE_cursorClose, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compoundStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCompoundStatement) {
             listener.enterCompoundStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCompoundStatement) {
             listener.exitCompoundStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCompoundStatement) {
            return visitor.visitCompoundStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURN_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_returnStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReturnStatement) {
             listener.enterReturnStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReturnStatement) {
             listener.exitReturnStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.IF_SYMBOL);
    }
    public IF_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, i);
    }
    public ifBody(): IfBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifBody, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfStatement) {
             listener.enterIfStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfStatement) {
             listener.exitIfStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfBodyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public thenStatement(): ThenStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_thenStatement, 0);
    }
    public ELSEIF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSEIF_SYMBOL, 0);
    }
    public ifBody(): IfBodyContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifBody, 0);
    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifBody;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfBody) {
             listener.enterIfBody(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfBody) {
             listener.exitIfBody(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfBody) {
            return visitor.visitIfBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ThenStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public THEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THEN_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_thenStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterThenStatement) {
             listener.enterThenStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitThenStatement) {
             listener.exitThenStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitThenStatement) {
            return visitor.visitThenStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompoundStatementListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public compoundStatement_list(): Vector<CompoundStatementContext> {
        return this.getRuleContexts(MySQLParser.RULE_compoundStatement);
    }
    public compoundStatement(i: number): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, i);
    }
    public SEMICOLON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    }
    public SEMICOLON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compoundStatementList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCompoundStatementList) {
             listener.enterCompoundStatementList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCompoundStatementList) {
             listener.exitCompoundStatementList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCompoundStatementList) {
            return visitor.visitCompoundStatementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.CASE_SYMBOL);
    }
    public CASE_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.CASE_SYMBOL, i);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public whenExpression_list(): Vector<WhenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_whenExpression);
    }
    public whenExpression(i: number): WhenExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_whenExpression, i);
    }
    public thenStatement_list(): Vector<ThenStatementContext> {
        return this.getRuleContexts(MySQLParser.RULE_thenStatement);
    }
    public thenStatement(i: number): ThenStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_thenStatement, i);
    }
    public elseStatement(): ElseStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_elseStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_caseStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCaseStatement) {
             listener.enterCaseStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCaseStatement) {
             listener.exitCaseStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCaseStatement) {
            return visitor.visitCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_elseStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterElseStatement) {
             listener.enterElseStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitElseStatement) {
             listener.exitElseStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitElseStatement) {
            return visitor.visitElseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabeledBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public label(): LabelContext | null {
        return this.getRuleContext(MySQLParser.RULE_label, 0);
    }
    public beginEndBlock(): BeginEndBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_beginEndBlock, 0);
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labeledBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabeledBlock) {
             listener.enterLabeledBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabeledBlock) {
             listener.exitLabeledBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabeledBlock) {
            return visitor.visitLabeledBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlabeledBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public beginEndBlock(): BeginEndBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_beginEndBlock, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unlabeledBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUnlabeledBlock) {
             listener.enterUnlabeledBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUnlabeledBlock) {
             listener.exitUnlabeledBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUnlabeledBlock) {
            return visitor.visitUnlabeledBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelIdentifier(): LabelIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelIdentifier, 0);
    }
    public COLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_label;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabel) {
             listener.enterLabel(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabel) {
             listener.exitLabel(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabel) {
            return visitor.visitLabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeginEndBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public spDeclarations(): SpDeclarationsContext | null {
        return this.getRuleContext(MySQLParser.RULE_spDeclarations, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_beginEndBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterBeginEndBlock) {
             listener.enterBeginEndBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitBeginEndBlock) {
             listener.exitBeginEndBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitBeginEndBlock) {
            return visitor.visitBeginEndBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabeledControlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public label(): LabelContext | null {
        return this.getRuleContext(MySQLParser.RULE_label, 0);
    }
    public unlabeledControl(): UnlabeledControlContext | null {
        return this.getRuleContext(MySQLParser.RULE_unlabeledControl, 0);
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labeledControl;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabeledControl) {
             listener.enterLabeledControl(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabeledControl) {
             listener.exitLabeledControl(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabeledControl) {
            return visitor.visitLabeledControl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlabeledControlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public loopBlock(): LoopBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_loopBlock, 0);
    }
    public whileDoBlock(): WhileDoBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_whileDoBlock, 0);
    }
    public repeatUntilBlock(): RepeatUntilBlockContext | null {
        return this.getRuleContext(MySQLParser.RULE_repeatUntilBlock, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unlabeledControl;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUnlabeledControl) {
             listener.enterUnlabeledControl(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUnlabeledControl) {
             listener.exitUnlabeledControl(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUnlabeledControl) {
            return visitor.visitUnlabeledControl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoopBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOOP_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.LOOP_SYMBOL);
    }
    public LOOP_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.LOOP_SYMBOL, i);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loopBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLoopBlock) {
             listener.enterLoopBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLoopBlock) {
             listener.exitLoopBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLoopBlock) {
            return visitor.visitLoopBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhileDoBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHILE_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.WHILE_SYMBOL);
    }
    public WHILE_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.WHILE_SYMBOL, i);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whileDoBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWhileDoBlock) {
             listener.enterWhileDoBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWhileDoBlock) {
             listener.exitWhileDoBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWhileDoBlock) {
            return visitor.visitWhileDoBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RepeatUntilBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEAT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.REPEAT_SYMBOL);
    }
    public REPEAT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.REPEAT_SYMBOL, i);
    }
    public compoundStatementList(): CompoundStatementListContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_repeatUntilBlock;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRepeatUntilBlock) {
             listener.enterRepeatUntilBlock(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRepeatUntilBlock) {
             listener.exitRepeatUntilBlock(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRepeatUntilBlock) {
            return visitor.visitRepeatUntilBlock(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpDeclarationsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public spDeclaration_list(): Vector<SpDeclarationContext> {
        return this.getRuleContexts(MySQLParser.RULE_spDeclaration);
    }
    public spDeclaration(i: number): SpDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_spDeclaration, i);
    }
    public SEMICOLON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    }
    public SEMICOLON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spDeclarations;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSpDeclarations) {
             listener.enterSpDeclarations(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSpDeclarations) {
             listener.exitSpDeclarations(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSpDeclarations) {
            return visitor.visitSpDeclarations(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public variableDeclaration(): VariableDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_variableDeclaration, 0);
    }
    public conditionDeclaration(): ConditionDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_conditionDeclaration, 0);
    }
    public handlerDeclaration(): HandlerDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_handlerDeclaration, 0);
    }
    public cursorDeclaration(): CursorDeclarationContext | null {
        return this.getRuleContext(MySQLParser.RULE_cursorDeclaration, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSpDeclaration) {
             listener.enterSpDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSpDeclaration) {
             listener.exitSpDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSpDeclaration) {
            return visitor.visitSpDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_variableDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterVariableDeclaration) {
             listener.enterVariableDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitVariableDeclaration) {
             listener.exitVariableDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitVariableDeclaration) {
            return visitor.visitVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public CONDITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public spCondition(): SpConditionContext | null {
        return this.getRuleContext(MySQLParser.RULE_spCondition, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_conditionDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConditionDeclaration) {
             listener.enterConditionDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConditionDeclaration) {
             listener.exitConditionDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConditionDeclaration) {
            return visitor.visitConditionDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpConditionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spCondition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSpCondition) {
             listener.enterSpCondition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSpCondition) {
             listener.exitSpCondition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSpCondition) {
            return visitor.visitSpCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlstateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sqlstate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSqlstate) {
             listener.enterSqlstate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSqlstate) {
             listener.exitSqlstate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSqlstate) {
            return visitor.visitSqlstate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public handlerCondition_list(): Vector<HandlerConditionContext> {
        return this.getRuleContexts(MySQLParser.RULE_handlerCondition);
    }
    public handlerCondition(i: number): HandlerConditionContext | null {
        return this.getRuleContext(MySQLParser.RULE_handlerCondition, i);
    }
    public compoundStatement(): CompoundStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0);
    }
    public CONTINUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTINUE_SYMBOL, 0);
    }
    public EXIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXIT_SYMBOL, 0);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHandlerDeclaration) {
             listener.enterHandlerDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHandlerDeclaration) {
             listener.exitHandlerDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHandlerDeclaration) {
            return visitor.visitHandlerDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HandlerConditionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public spCondition(): SpConditionContext | null {
        return this.getRuleContext(MySQLParser.RULE_spCondition, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public SQLWARNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLWARNING_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public SQLEXCEPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerCondition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterHandlerCondition) {
             listener.enterHandlerCondition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitHandlerCondition) {
             listener.exitHandlerCondition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitHandlerCondition) {
            return visitor.visitHandlerCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public CURSOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorDeclaration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCursorDeclaration) {
             listener.enterCursorDeclaration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCursorDeclaration) {
             listener.exitCursorDeclaration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCursorDeclaration) {
            return visitor.visitCursorDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IterateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ITERATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ITERATE_SYMBOL, 0);
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_iterateStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIterateStatement) {
             listener.enterIterateStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIterateStatement) {
             listener.exitIterateStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIterateStatement) {
            return visitor.visitIterateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LeaveStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVE_SYMBOL, 0);
    }
    public labelRef(): LabelRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_leaveStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLeaveStatement) {
             listener.enterLeaveStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLeaveStatement) {
             listener.exitLeaveStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLeaveStatement) {
            return visitor.visitLeaveStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetDiagnosticsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public statementInformationItem_list(): Vector<StatementInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_statementInformationItem);
    }
    public statementInformationItem(i: number): StatementInformationItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_statementInformationItem, i);
    }
    public CONDITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
    }
    public signalAllowedExpr(): SignalAllowedExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalAllowedExpr, 0);
    }
    public conditionInformationItem_list(): Vector<ConditionInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_conditionInformationItem);
    }
    public conditionInformationItem(i: number): ConditionInformationItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_conditionInformationItem, i);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_getDiagnosticsStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGetDiagnosticsStatement) {
             listener.enterGetDiagnosticsStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGetDiagnosticsStatement) {
             listener.exitGetDiagnosticsStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGetDiagnosticsStatement) {
            return visitor.visitGetDiagnosticsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalAllowedExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_literal, 0);
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemOrUserVariable, 0);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalAllowedExpr;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignalAllowedExpr) {
             listener.enterSignalAllowedExpr(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignalAllowedExpr) {
             listener.exitSignalAllowedExpr(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignalAllowedExpr) {
            return visitor.visitSignalAllowedExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_statementInformationItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStatementInformationItem) {
             listener.enterStatementInformationItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStatementInformationItem) {
             listener.exitStatementInformationItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStatementInformationItem) {
            return visitor.visitStatementInformationItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public signalInformationItemName(): SignalInformationItemNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItemName, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_conditionInformationItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConditionInformationItem) {
             listener.enterConditionInformationItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConditionInformationItem) {
             listener.exitConditionInformationItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConditionInformationItem) {
            return visitor.visitConditionInformationItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalInformationItemNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalInformationItemName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignalInformationItemName) {
             listener.enterSignalInformationItemName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignalInformationItemName) {
             listener.exitSignalInformationItemName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignalInformationItemName) {
            return visitor.visitSignalInformationItemName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIGNAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNAL_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public signalInformationItem_list(): Vector<SignalInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_signalInformationItem);
    }
    public signalInformationItem(i: number): SignalInformationItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItem, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignalStatement) {
             listener.enterSignalStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignalStatement) {
             listener.exitSignalStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignalStatement) {
            return visitor.visitSignalStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResignalStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESIGNAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESIGNAL_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public sqlstate(): SqlstateContext | null {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public signalInformationItem_list(): Vector<SignalInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_signalInformationItem);
    }
    public signalInformationItem(i: number): SignalInformationItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItem, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resignalStatement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResignalStatement) {
             listener.enterResignalStatement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResignalStatement) {
             listener.exitResignalStatement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResignalStatement) {
            return visitor.visitResignalStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignalInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signalInformationItemName(): SignalInformationItemNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItemName, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public signalAllowedExpr(): SignalAllowedExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_signalAllowedExpr, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalInformationItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignalInformationItem) {
             listener.enterSignalInformationItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignalInformationItem) {
             listener.exitSignalInformationItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignalInformationItem) {
            return visitor.visitSignalInformationItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorOpenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorOpen;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCursorOpen) {
             listener.enterCursorOpen(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCursorOpen) {
             listener.exitCursorOpen(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCursorOpen) {
            return visitor.visitCursorOpen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorCloseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorClose;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCursorClose) {
             listener.enterCursorClose(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCursorClose) {
             listener.exitCursorClose(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCursorClose) {
            return visitor.visitCursorClose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CursorFetchContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FETCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FETCH_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorFetch;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCursorFetch) {
             listener.enterCursorFetch(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCursorFetch) {
             listener.exitCursorFetch(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCursorFetch) {
            return visitor.visitCursorFetch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScheduleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr);
    }
    public expr(i: number): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, i);
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(MySQLParser.RULE_interval, 0);
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schedule;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSchedule) {
             listener.enterSchedule(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSchedule) {
             listener.exitSchedule(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSchedule) {
            return visitor.visitSchedule(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnName, 0);
    }
    public fieldDefinition(): FieldDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldDefinition, 0);
    }
    public checkOrReferences(): CheckOrReferencesContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkOrReferences, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnDefinition) {
             listener.enterColumnDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnDefinition) {
             listener.exitColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnDefinition) {
            return visitor.visitColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckOrReferencesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0);
    }
    public references(): ReferencesContext | null {
        return this.getRuleContext(MySQLParser.RULE_references, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkOrReferences;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCheckOrReferences) {
             listener.enterCheckOrReferences(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCheckOrReferences) {
             listener.exitCheckOrReferences(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCheckOrReferences) {
            return visitor.visitCheckOrReferences(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckConstraintContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkConstraint;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCheckConstraint) {
             listener.enterCheckConstraint(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCheckConstraint) {
             listener.exitCheckConstraint(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCheckConstraint) {
            return visitor.visitCheckConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintEnforcementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENFORCED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintEnforcement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConstraintEnforcement) {
             listener.enterConstraintEnforcement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConstraintEnforcement) {
             listener.exitConstraintEnforcement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConstraintEnforcement) {
            return visitor.visitConstraintEnforcement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintDefContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyListWithExpression(): KeyListWithExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyListWithExpression, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public indexNameAndType(): IndexNameAndTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexNameAndType, 0);
    }
    public indexOption_list(): Vector<IndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexOption);
    }
    public indexOption(i: number): IndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexOption, i);
    }
    public FULLTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0);
    }
    public indexName(): IndexNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0);
    }
    public fulltextIndexOption_list(): Vector<FulltextIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_fulltextIndexOption);
    }
    public fulltextIndexOption(i: number): FulltextIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_fulltextIndexOption, i);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public spatialIndexOption_list(): Vector<SpatialIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_spatialIndexOption);
    }
    public spatialIndexOption(i: number): SpatialIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_spatialIndexOption, i);
    }
    public keyList(): KeyListContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyList, 0);
    }
    public references(): ReferencesContext | null {
        return this.getRuleContext(MySQLParser.RULE_references, 0);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0);
    }
    public constraintName(): ConstraintNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintName, 0);
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableConstraintDef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableConstraintDef) {
             listener.enterTableConstraintDef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableConstraintDef) {
             listener.exitTableConstraintDef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableConstraintDef) {
            return visitor.visitTableConstraintDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONSTRAINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterConstraintName) {
             listener.enterConstraintName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitConstraintName) {
             listener.exitConstraintName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitConstraintName) {
            return visitor.visitConstraintName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public columnAttribute_list(): Vector<ColumnAttributeContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnAttribute);
    }
    public columnAttribute(i: number): ColumnAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnAttribute, i);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public GENERATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERATED_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public VIRTUAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIRTUAL_SYMBOL, 0);
    }
    public STORED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldDefinition) {
             listener.enterFieldDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldDefinition) {
             listener.exitFieldDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldDefinition) {
            return visitor.visitFieldDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAttributeContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public nowOrSignedLiteral(): NowOrSignedLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nowOrSignedLiteral, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext | null {
        return this.getRuleContext(MySQLParser.RULE_timeFunctionParameters, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public columnFormat(): ColumnFormatContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnFormat, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public storageMedia(): StorageMediaContext | null {
        return this.getRuleContext(MySQLParser.RULE_storageMedia, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0);
    }
    public constraintName(): ConstraintNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintName, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext | null {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnAttribute) {
             listener.enterColumnAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnAttribute) {
             listener.exitColumnAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnAttribute) {
            return visitor.visitColumnAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnFormatContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnFormat;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnFormat) {
             listener.enterColumnFormat(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnFormat) {
             listener.exitColumnFormat(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnFormat) {
            return visitor.visitColumnFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StorageMediaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_storageMedia;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStorageMedia) {
             listener.enterStorageMedia(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStorageMedia) {
             listener.exitStorageMedia(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStorageMedia) {
            return visitor.visitStorageMedia(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NowContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public functionDatetimePrecision(): FunctionDatetimePrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionDatetimePrecision, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_now;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNow) {
             listener.enterNow(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNow) {
             listener.exitNow(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNow) {
            return visitor.visitNow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NowOrSignedLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public now(): NowContext | null {
        return this.getRuleContext(MySQLParser.RULE_now, 0);
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext | null {
        return this.getRuleContext(MySQLParser.RULE_signedLiteralOrNull, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nowOrSignedLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNowOrSignedLiteral) {
             listener.enterNowOrSignedLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNowOrSignedLiteral) {
             listener.exitNowOrSignedLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNowOrSignedLiteral) {
            return visitor.visitNowOrSignedLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GcolAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_gcolAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterGcolAttribute) {
             listener.enterGcolAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitGcolAttribute) {
             listener.exitGcolAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitGcolAttribute) {
            return visitor.visitGcolAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReferencesContext extends ParserRuleContext {
    public _match!: Token;
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REFERENCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0);
    }
    public MATCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public deleteOption_list(): Vector<DeleteOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_deleteOption);
    }
    public deleteOption(i: number): DeleteOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_deleteOption, i);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_references;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReferences) {
             listener.enterReferences(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReferences) {
             listener.exitReferences(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReferences) {
            return visitor.visitReferences(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDeleteOption) {
             listener.enterDeleteOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDeleteOption) {
             listener.exitDeleteOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDeleteOption) {
            return visitor.visitDeleteOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public keyPart_list(): Vector<KeyPartContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyPart);
    }
    public keyPart(i: number): KeyPartContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyPart, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyList) {
             listener.enterKeyList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyList) {
             listener.exitKeyList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyList) {
            return visitor.visitKeyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyPartContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0);
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(MySQLParser.RULE_direction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyPart;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyPart) {
             listener.enterKeyPart(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyPart) {
             listener.exitKeyPart(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyPart) {
            return visitor.visitKeyPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyListWithExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public keyPartOrExpression_list(): Vector<KeyPartOrExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyPartOrExpression);
    }
    public keyPartOrExpression(i: number): KeyPartOrExpressionContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyPartOrExpression, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyListWithExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyListWithExpression) {
             listener.enterKeyListWithExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyListWithExpression) {
             listener.exitKeyListWithExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyListWithExpression) {
            return visitor.visitKeyListWithExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyPartOrExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyPart(): KeyPartContext | null {
        return this.getRuleContext(MySQLParser.RULE_keyPart, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0);
    }
    public direction(): DirectionContext | null {
        return this.getRuleContext(MySQLParser.RULE_direction, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyPartOrExpression;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterKeyPartOrExpression) {
             listener.enterKeyPartOrExpression(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitKeyPartOrExpression) {
             listener.exitKeyPartOrExpression(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitKeyPartOrExpression) {
            return visitor.visitKeyPartOrExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexTypeContext extends ParserRuleContext {
    public _algorithm!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexType) {
             listener.enterIndexType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexType) {
             listener.exitIndexType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexType) {
            return visitor.visitIndexType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0);
    }
    public indexTypeClause(): IndexTypeClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexTypeClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexOption) {
             listener.enterIndexOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexOption) {
             listener.exitIndexOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexOption) {
            return visitor.visitIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public visibility(): VisibilityContext | null {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_commonIndexOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCommonIndexOption) {
             listener.enterCommonIndexOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCommonIndexOption) {
             listener.exitCommonIndexOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCommonIndexOption) {
            return visitor.visitCommonIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VisibilityContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_visibility;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterVisibility) {
             listener.enterVisibility(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitVisibility) {
             listener.exitVisibility(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitVisibility) {
            return visitor.visitVisibility(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexTypeClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexType(): IndexTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_indexType, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexTypeClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexTypeClause) {
             listener.enterIndexTypeClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexTypeClause) {
             listener.exitIndexTypeClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexTypeClause) {
            return visitor.visitIndexTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FulltextIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fulltextIndexOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFulltextIndexOption) {
             listener.enterFulltextIndexOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFulltextIndexOption) {
             listener.exitFulltextIndexOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFulltextIndexOption) {
            return visitor.visitFulltextIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpatialIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public commonIndexOption(): CommonIndexOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spatialIndexOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSpatialIndexOption) {
             listener.enterSpatialIndexOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSpatialIndexOption) {
             listener.exitSpatialIndexOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSpatialIndexOption) {
            return visitor.visitSpatialIndexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataTypeDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDataTypeDefinition) {
             listener.enterDataTypeDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDataTypeDefinition) {
             listener.exitDataTypeDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDataTypeDefinition) {
            return visitor.visitDataTypeDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public TINYINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYINT_SYMBOL, 0);
    }
    public SMALLINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SMALLINT_SYMBOL, 0);
    }
    public MEDIUMINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0);
    }
    public BIGINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIGINT_SYMBOL, 0);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0);
    }
    public fieldOptions(): FieldOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldOptions, 0);
    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DOUBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_precision, 0);
    }
    public PRECISION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
    }
    public FLOAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public NUMERIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMERIC_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public floatOptions(): FloatOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_floatOptions, 0);
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetWithOptBinary, 0);
    }
    public nchar(): NcharContext | null {
        return this.getRuleContext(MySQLParser.RULE_nchar, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public VARYING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARYING_SYMBOL, 0);
    }
    public VARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARCHAR_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public VARBINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARBINARY_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public TINYBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYBLOB_SYMBOL, 0);
    }
    public BLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOB_SYMBOL, 0);
    }
    public MEDIUMBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0);
    }
    public LONGBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONGBLOB_SYMBOL, 0);
    }
    public LONG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_SYMBOL, 0);
    }
    public TINYTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYTEXT_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public MEDIUMTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0);
    }
    public LONGTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONGTEXT_SYMBOL, 0);
    }
    public stringList(): StringListContext | null {
        return this.getRuleContext(MySQLParser.RULE_stringList, 0);
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDataType) {
             listener.enterDataType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDataType) {
             listener.exitDataType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDataType) {
            return visitor.visitDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NcharContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nchar;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNchar) {
             listener.enterNchar(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNchar) {
             listener.exitNchar(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNchar) {
            return visitor.visitNchar(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RealTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DOUBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
    }
    public PRECISION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_realType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRealType) {
             listener.enterRealType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRealType) {
             listener.exitRealType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRealType) {
            return visitor.visitRealType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldLengthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldLength;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldLength) {
             listener.enterFieldLength(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldLength) {
             listener.exitFieldLength(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldLength) {
            return visitor.visitFieldLength(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIGNED_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.SIGNED_SYMBOL);
    }
    public SIGNED_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, i);
    }
    public UNSIGNED_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.UNSIGNED_SYMBOL);
    }
    public UNSIGNED_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, i);
    }
    public ZEROFILL_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.ZEROFILL_SYMBOL);
    }
    public ZEROFILL_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ZEROFILL_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldOptions) {
             listener.enterFieldOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldOptions) {
             listener.exitFieldOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldOptions) {
            return visitor.visitFieldOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetWithOptBinaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ascii(): AsciiContext | null {
        return this.getRuleContext(MySQLParser.RULE_ascii, 0);
    }
    public unicode(): UnicodeContext | null {
        return this.getRuleContext(MySQLParser.RULE_unicode, 0);
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetWithOptBinary;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCharsetWithOptBinary) {
             listener.enterCharsetWithOptBinary(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCharsetWithOptBinary) {
             listener.exitCharsetWithOptBinary(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCharsetWithOptBinary) {
            return visitor.visitCharsetWithOptBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AsciiContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ascii;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterAscii) {
             listener.enterAscii(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitAscii) {
             listener.exitAscii(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitAscii) {
            return visitor.visitAscii(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnicodeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unicode;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUnicode) {
             listener.enterUnicode(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUnicode) {
             listener.exitUnicode(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUnicode) {
            return visitor.visitUnicode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WsNumCodepointsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_wsNumCodepoints;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWsNumCodepoints) {
             listener.enterWsNumCodepoints(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWsNumCodepoints) {
             listener.exitWsNumCodepoints(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWsNumCodepoints) {
            return visitor.visitWsNumCodepoints(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeDatetimePrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_typeDatetimePrecision;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTypeDatetimePrecision) {
             listener.enterTypeDatetimePrecision(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTypeDatetimePrecision) {
             listener.exitTypeDatetimePrecision(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTypeDatetimePrecision) {
            return visitor.visitTypeDatetimePrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionDatetimePrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionDatetimePrecision;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionDatetimePrecision) {
             listener.enterFunctionDatetimePrecision(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionDatetimePrecision) {
             listener.exitFunctionDatetimePrecision(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionDatetimePrecision) {
            return visitor.visitFunctionDatetimePrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCharsetName) {
             listener.enterCharsetName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCharsetName) {
             listener.exitCharsetName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCharsetName) {
            return visitor.visitCharsetName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollationNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_collationName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCollationName) {
             listener.enterCollationName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCollationName) {
             listener.exitCollationName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCollationName) {
            return visitor.visitCollationName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOption_list(): Vector<CreateTableOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOption);
    }
    public createTableOption(i: number): CreateTableOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOption, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTableOptions) {
             listener.enterCreateTableOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTableOptions) {
             listener.exitCreateTableOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTableOptions) {
            return visitor.visitCreateTableOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableOptionsEtcContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOptions(): CreateTableOptionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOptions, 0);
    }
    public createPartitioningEtc(): CreatePartitioningEtcContext | null {
        return this.getRuleContext(MySQLParser.RULE_createPartitioningEtc, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptionsEtc;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTableOptionsEtc) {
             listener.enterCreateTableOptionsEtc(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTableOptionsEtc) {
             listener.exitCreateTableOptionsEtc(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTableOptionsEtc) {
            return visitor.visitCreateTableOptionsEtc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePartitioningEtcContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionClause, 0);
    }
    public duplicateAsQe(): DuplicateAsQeContext | null {
        return this.getRuleContext(MySQLParser.RULE_duplicateAsQe, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createPartitioningEtc;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreatePartitioningEtc) {
             listener.enterCreatePartitioningEtc(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreatePartitioningEtc) {
             listener.exitCreatePartitioningEtc(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreatePartitioningEtc) {
            return visitor.visitCreatePartitioningEtc(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createTableOption_list(): Vector<CreateTableOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOption);
    }
    public createTableOption(i: number): CreateTableOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_createTableOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptionsSpaceSeparated;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTableOptionsSpaceSeparated) {
             listener.enterCreateTableOptionsSpaceSeparated(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTableOptionsSpaceSeparated) {
             listener.exitCreateTableOptionsSpaceSeparated(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTableOptionsSpaceSeparated) {
            return visitor.visitCreateTableOptionsSpaceSeparated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableOptionContext extends ParserRuleContext {
    public _option!: Token;
    public _format!: Token;
    public _method!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public equal(): EqualContext | null {
        return this.getRuleContext(MySQLParser.RULE_equal, 0);
    }
    public ulonglongNumber(): UlonglongNumberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulonglongNumber, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public ternaryOption(): TernaryOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_ternaryOption, 0);
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public tableRefList(): TableRefListContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public UNION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNION_SYMBOL, 0);
    }
    public defaultCharset(): DefaultCharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultCharset, 0);
    }
    public defaultCollation(): DefaultCollationContext | null {
        return this.getRuleContext(MySQLParser.RULE_defaultCollation, 0);
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext | null {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext | null {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateTableOption) {
             listener.enterCreateTableOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateTableOption) {
             listener.exitCreateTableOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateTableOption) {
            return visitor.visitCreateTableOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TernaryOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ternaryOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTernaryOption) {
             listener.enterTernaryOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTernaryOption) {
             listener.exitTernaryOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTernaryOption) {
            return visitor.visitTernaryOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultCollationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_collationName, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultCollation;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultCollation) {
             listener.enterDefaultCollation(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultCollation) {
             listener.exitDefaultCollation(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultCollation) {
            return visitor.visitDefaultCollation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultEncryptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultEncryption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultEncryption) {
             listener.enterDefaultEncryption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultEncryption) {
             listener.exitDefaultEncryption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultEncryption) {
            return visitor.visitDefaultEncryption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultCharsetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultCharset;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefaultCharset) {
             listener.enterDefaultCharset(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefaultCharset) {
             listener.exitDefaultCharset(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefaultCharset) {
            return visitor.visitDefaultCharset(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public partitionTypeDef(): PartitionTypeDefContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionTypeDef, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public subPartitions(): SubPartitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_subPartitions, 0);
    }
    public partitionDefinitions(): PartitionDefinitionsContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinitions, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionClause) {
             listener.enterPartitionClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionClause) {
             listener.exitPartitionClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionClause) {
            return visitor.visitPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTypeDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionTypeDef;
    }
    public override copyFrom(ctx: PartitionTypeDefContext): void {
        super.copyFrom(ctx);
    }
}
export class PartitionDefRangeListContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefRangeList) {
             listener.enterPartitionDefRangeList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefRangeList) {
             listener.exitPartitionDefRangeList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefRangeList) {
            return visitor.visitPartitionDefRangeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionDefKeyContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionKeyAlgorithm, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefKey) {
             listener.enterPartitionDefKey(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefKey) {
             listener.exitPartitionDefKey(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefKey) {
            return visitor.visitPartitionDefKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionDefHashContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefHash) {
             listener.enterPartitionDefHash(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefHash) {
             listener.exitPartitionDefHash(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefHash) {
            return visitor.visitPartitionDefHash(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubPartitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0);
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionKeyAlgorithm, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subPartitions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSubPartitions) {
             listener.enterSubPartitions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSubPartitions) {
             listener.exitSubPartitions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSubPartitions) {
            return visitor.visitSubPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionKeyAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionKeyAlgorithm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionKeyAlgorithm) {
             listener.enterPartitionKeyAlgorithm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionKeyAlgorithm) {
             listener.exitPartitionKeyAlgorithm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionKeyAlgorithm) {
            return visitor.visitPartitionKeyAlgorithm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public partitionDefinition_list(): Vector<PartitionDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionDefinition);
    }
    public partitionDefinition(i: number): PartitionDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinition, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDefinitions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefinitions) {
             listener.enterPartitionDefinitions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefinitions) {
             listener.exitPartitionDefinitions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefinitions) {
            return visitor.visitPartitionDefinitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public partitionValuesIn(): PartitionValuesInContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionValuesIn, 0);
    }
    public partitionOption_list(): Vector<PartitionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionOption);
    }
    public partitionOption(i: number): PartitionOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionOption, i);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public subpartitionDefinition_list(): Vector<SubpartitionDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_subpartitionDefinition);
    }
    public subpartitionDefinition(i: number): SubpartitionDefinitionContext | null {
        return this.getRuleContext(MySQLParser.RULE_subpartitionDefinition, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public partitionValueItemListParen(): PartitionValueItemListParenContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItemListParen, 0);
    }
    public MAXVALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionDefinition) {
             listener.enterPartitionDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionDefinition) {
             listener.exitPartitionDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionDefinition) {
            return visitor.visitPartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValuesInContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionValueItemListParen_list(): Vector<PartitionValueItemListParenContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionValueItemListParen);
    }
    public partitionValueItemListParen(i: number): PartitionValueItemListParenContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItemListParen, i);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValuesIn;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionValuesIn) {
             listener.enterPartitionValuesIn(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionValuesIn) {
             listener.exitPartitionValuesIn(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionValuesIn) {
            return visitor.visitPartitionValuesIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public engineRef(): EngineRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionOption) {
             listener.enterPartitionOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionOption) {
             listener.exitPartitionOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionOption) {
            return visitor.visitPartitionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public partitionOption_list(): Vector<PartitionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionOption);
    }
    public partitionOption(i: number): PartitionOptionContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionOption, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subpartitionDefinition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSubpartitionDefinition) {
             listener.enterSubpartitionDefinition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSubpartitionDefinition) {
             listener.exitSubpartitionDefinition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSubpartitionDefinition) {
            return visitor.visitSubpartitionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValueItemListParenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public partitionValueItem_list(): Vector<PartitionValueItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionValueItem);
    }
    public partitionValueItem(i: number): PartitionValueItemContext | null {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItem, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValueItemListParen;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionValueItemListParen) {
             listener.enterPartitionValueItemListParen(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionValueItemListParen) {
             listener.exitPartitionValueItemListParen(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionValueItemListParen) {
            return visitor.visitPartitionValueItemListParen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValueItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bitExpr(): BitExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0);
    }
    public MAXVALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValueItem;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPartitionValueItem) {
             listener.enterPartitionValueItem(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPartitionValueItem) {
             listener.exitPartitionValueItem(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPartitionValueItem) {
            return visitor.visitPartitionValueItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinerClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_definerClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDefinerClause) {
             listener.enterDefinerClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDefinerClause) {
             listener.exitDefinerClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDefinerClause) {
            return visitor.visitDefinerClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifExists;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0);
    }
    public persistedVariableIdentifier(): PersistedVariableIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_persistedVariableIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifExistsIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfExistsIdentifier) {
             listener.enterIfExistsIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfExistsIdentifier) {
             listener.exitIfExistsIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfExistsIdentifier) {
            return visitor.visitIfExistsIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PersistedVariableIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_persistedVariableIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPersistedVariableIdentifier) {
             listener.enterPersistedVariableIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPersistedVariableIdentifier) {
             listener.exitPersistedVariableIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPersistedVariableIdentifier) {
            return visitor.visitPersistedVariableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public notRule(): NotRuleContext | null {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifNotExists;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IgnoreUnknownUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ignoreUnknownUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIgnoreUnknownUser) {
             listener.enterIgnoreUnknownUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIgnoreUnknownUser) {
             listener.exitIgnoreUnknownUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIgnoreUnknownUser) {
            return visitor.visitIgnoreUnknownUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureParameterContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionParameter(): FunctionParameterContext | null {
        return this.getRuleContext(MySQLParser.RULE_functionParameter, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public OUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUT_SYMBOL, 0);
    }
    public INOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INOUT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureParameter;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProcedureParameter) {
             listener.enterProcedureParameter(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProcedureParameter) {
             listener.exitProcedureParameter(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProcedureParameter) {
            return visitor.visitProcedureParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionParameterContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public parameterName(): ParameterNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_parameterName, 0);
    }
    public typeWithOptCollate(): TypeWithOptCollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_typeWithOptCollate, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionParameter;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionParameter) {
             listener.enterFunctionParameter(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionParameter) {
             listener.exitFunctionParameter(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionParameter) {
            return visitor.visitFunctionParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public collationName(): CollationNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_collationName, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_collate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCollate) {
             listener.enterCollate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCollate) {
             listener.exitCollate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCollate) {
            return visitor.visitCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeWithOptCollateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0);
    }
    public collate(): CollateContext | null {
        return this.getRuleContext(MySQLParser.RULE_collate, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_typeWithOptCollate;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTypeWithOptCollate) {
             listener.enterTypeWithOptCollate(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTypeWithOptCollate) {
             listener.exitTypeWithOptCollate(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTypeWithOptCollate) {
            return visitor.visitTypeWithOptCollate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaIdentifierPairContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public schemaRef_list(): Vector<SchemaRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaRef);
    }
    public schemaRef(i: number): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaIdentifierPair;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSchemaIdentifierPair) {
             listener.enterSchemaIdentifierPair(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSchemaIdentifierPair) {
             listener.exitSchemaIdentifierPair(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSchemaIdentifierPair) {
            return visitor.visitSchemaIdentifierPair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewRef_list(): Vector<ViewRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_viewRef);
    }
    public viewRef(i: number): ViewRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_viewRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewRefList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewRefList) {
             listener.enterViewRefList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewRefList) {
             listener.exitViewRefList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewRefList) {
            return visitor.visitViewRefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public updateElement_list(): Vector<UpdateElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_updateElement);
    }
    public updateElement(i: number): UpdateElementContext | null {
        return this.getRuleContext(MySQLParser.RULE_updateElement, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUpdateList) {
             listener.enterUpdateList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUpdateList) {
             listener.exitUpdateList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUpdateList) {
            return visitor.visitUpdateList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public expr(): ExprContext | null {
        return this.getRuleContext(MySQLParser.RULE_expr, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateElement;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUpdateElement) {
             listener.enterUpdateElement(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUpdateElement) {
             listener.exitUpdateElement(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUpdateElement) {
            return visitor.visitUpdateElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharsetClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public charset(): CharsetContext | null {
        return this.getRuleContext(MySQLParser.RULE_charset, 0);
    }
    public charsetName(): CharsetNameContext | null {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCharsetClause) {
             listener.enterCharsetClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCharsetClause) {
             listener.exitCharsetClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCharsetClause) {
            return visitor.visitCharsetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldsClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public fieldTerm_list(): Vector<FieldTermContext> {
        return this.getRuleContexts(MySQLParser.RULE_fieldTerm);
    }
    public fieldTerm(i: number): FieldTermContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldTerm, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldsClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldsClause) {
             listener.enterFieldsClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldsClause) {
             listener.exitFieldsClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldsClause) {
            return visitor.visitFieldsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldTermContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TERMINATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public ENCLOSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCLOSED_SYMBOL, 0);
    }
    public OPTIONALLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0);
    }
    public ESCAPED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldTerm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldTerm) {
             listener.enterFieldTerm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldTerm) {
             listener.exitFieldTerm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldTerm) {
            return visitor.visitFieldTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LinesClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINES_SYMBOL, 0);
    }
    public lineTerm_list(): Vector<LineTermContext> {
        return this.getRuleContexts(MySQLParser.RULE_lineTerm);
    }
    public lineTerm(i: number): LineTermContext | null {
        return this.getRuleContext(MySQLParser.RULE_lineTerm, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_linesClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLinesClause) {
             listener.enterLinesClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLinesClause) {
             listener.exitLinesClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLinesClause) {
            return visitor.visitLinesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LineTermContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public TERMINATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
    }
    public STARTING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTING_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lineTerm;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLineTerm) {
             listener.enterLineTerm(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLineTerm) {
             listener.exitLineTerm(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLineTerm) {
            return visitor.visitLineTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user_list(): Vector<UserContext> {
        return this.getRuleContexts(MySQLParser.RULE_user);
    }
    public user(i: number): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserList) {
             listener.enterUserList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserList) {
             listener.exitUserList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserList) {
            return visitor.visitUserList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createUser_list(): Vector<CreateUserContext> {
        return this.getRuleContexts(MySQLParser.RULE_createUser);
    }
    public createUser(i: number): CreateUserContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUser, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUserList) {
             listener.enterCreateUserList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUserList) {
             listener.exitCreateUserList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUserList) {
            return visitor.visitCreateUserList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public user(): UserContext | null {
        return this.getRuleContext(MySQLParser.RULE_user, 0);
    }
    public identification(): IdentificationContext | null {
        return this.getRuleContext(MySQLParser.RULE_identification, 0);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0);
    }
    public createUserWithMfa(): CreateUserWithMfaContext | null {
        return this.getRuleContext(MySQLParser.RULE_createUserWithMfa, 0);
    }
    public initialAuth(): InitialAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_initialAuth, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUser;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUser) {
             listener.enterCreateUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUser) {
             listener.exitCreateUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUser) {
            return visitor.visitCreateUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserWithMfaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AND_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.AND_SYMBOL);
    }
    public AND_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, i);
    }
    public identification_list(): Vector<IdentificationContext> {
        return this.getRuleContexts(MySQLParser.RULE_identification);
    }
    public identification(i: number): IdentificationContext | null {
        return this.getRuleContext(MySQLParser.RULE_identification, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserWithMfa;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterCreateUserWithMfa) {
             listener.enterCreateUserWithMfa(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitCreateUserWithMfa) {
             listener.exitCreateUserWithMfa(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitCreateUserWithMfa) {
            return visitor.visitCreateUserWithMfa(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentificationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0);
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0);
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByPassword, 0);
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByRandomPassword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identification;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentification) {
             listener.enterIdentification(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentification) {
             listener.exitIdentification(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentification) {
            return visitor.visitIdentification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedByPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedByPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedByPassword) {
             listener.enterIdentifiedByPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedByPassword) {
             listener.exitIdentifiedByPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedByPassword) {
            return visitor.visitIdentifiedByPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedByRandomPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedByRandomPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedByRandomPassword) {
             listener.enterIdentifiedByRandomPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedByRandomPassword) {
             listener.exitIdentifiedByRandomPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedByRandomPassword) {
            return visitor.visitIdentifiedByRandomPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedWithPluginContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPlugin;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedWithPlugin) {
             listener.enterIdentifiedWithPlugin(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedWithPlugin) {
             listener.exitIdentifiedWithPlugin(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedWithPlugin) {
            return visitor.visitIdentifiedWithPlugin(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedWithPluginAsAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginAsAuth;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedWithPluginAsAuth) {
             listener.enterIdentifiedWithPluginAsAuth(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedWithPluginAsAuth) {
             listener.exitIdentifiedWithPluginAsAuth(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedWithPluginAsAuth) {
            return visitor.visitIdentifiedWithPluginAsAuth(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedWithPluginByPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginByPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedWithPluginByPassword) {
             listener.enterIdentifiedWithPluginByPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedWithPluginByPassword) {
             listener.exitIdentifiedWithPluginByPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedWithPluginByPassword) {
            return visitor.visitIdentifiedWithPluginByPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifiedWithPluginByRandomPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginByRandomPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifiedWithPluginByRandomPassword) {
             listener.enterIdentifiedWithPluginByRandomPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifiedWithPluginByRandomPassword) {
             listener.exitIdentifiedWithPluginByRandomPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifiedWithPluginByRandomPassword) {
            return visitor.visitIdentifiedWithPluginByRandomPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InitialAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INITIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SYMBOL, 0);
    }
    public AUTHENTICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0);
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0);
    }
    public identifiedByPassword(): IdentifiedByPasswordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_initialAuth;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInitialAuth) {
             listener.enterInitialAuth(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInitialAuth) {
             listener.exitInitialAuth(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInitialAuth) {
            return visitor.visitInitialAuth(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RetainCurrentPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_retainCurrentPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRetainCurrentPassword) {
             listener.enterRetainCurrentPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRetainCurrentPassword) {
             listener.exitRetainCurrentPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRetainCurrentPassword) {
            return visitor.visitRetainCurrentPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DiscardOldPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_discardOldPassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDiscardOldPassword) {
             listener.enterDiscardOldPassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDiscardOldPassword) {
             listener.exitDiscardOldPassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDiscardOldPassword) {
            return visitor.visitDiscardOldPassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserRegistrationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public factor(): FactorContext | null {
        return this.getRuleContext(MySQLParser.RULE_factor, 0);
    }
    public INITIATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIATE_SYMBOL, 0);
    }
    public REGISTRATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGISTRATION_SYMBOL, 0);
    }
    public UNREGISTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNREGISTER_SYMBOL, 0);
    }
    public FINISH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FINISH_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public CHALLENGE_RESPONSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userRegistration;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserRegistration) {
             listener.enterUserRegistration(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserRegistration) {
             listener.exitUserRegistration(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserRegistration) {
            return visitor.visitUserRegistration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FactorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numLiteral(): NumLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_numLiteral, 0);
    }
    public FACTOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FACTOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_factor;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFactor) {
             listener.enterFactor(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFactor) {
             listener.exitFactor(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFactor) {
            return visitor.visitFactor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplacePasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public textString(): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replacePassword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReplacePassword) {
             listener.enterReplacePassword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReplacePassword) {
             listener.exitReplacePassword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReplacePassword) {
            return visitor.visitReplacePassword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentifierOrTextContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public userVariable(): UserVariableContext | null {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userIdentifierOrText;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUserIdentifierOrText) {
             listener.enterUserIdentifierOrText(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUserIdentifierOrText) {
             listener.exitUserIdentifierOrText(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUserIdentifierOrText) {
            return visitor.visitUserIdentifierOrText(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifierOrText(): UserIdentifierOrTextContext | null {
        return this.getRuleContext(MySQLParser.RULE_userIdentifierOrText, 0);
    }
    public CURRENT_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_user;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUser) {
             listener.enterUser(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUser) {
             listener.exitUser(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUser) {
            return visitor.visitUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_likeClause;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLikeClause) {
             listener.enterLikeClause(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLikeClause) {
             listener.exitLikeClause(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLikeClause) {
            return visitor.visitLikeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeOrWhereContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public likeClause(): LikeClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_likeClause, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_likeOrWhere;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLikeOrWhere) {
             listener.enterLikeOrWhere(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLikeOrWhere) {
             listener.exitLikeOrWhere(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLikeOrWhere) {
            return visitor.visitLikeOrWhere(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OnlineOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONLINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLINE_SYMBOL, 0);
    }
    public OFFLINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFLINE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onlineOption;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOnlineOption) {
             listener.enterOnlineOption(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOnlineOption) {
             listener.exitOnlineOption(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOnlineOption) {
            return visitor.visitOnlineOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NoWriteToBinLogContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public NO_WRITE_TO_BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_noWriteToBinLog;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNoWriteToBinLog) {
             listener.enterNoWriteToBinLog(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNoWriteToBinLog) {
             listener.exitNoWriteToBinLog(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNoWriteToBinLog) {
            return visitor.visitNoWriteToBinLog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsePartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_usePartition;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUsePartition) {
             listener.enterUsePartition(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUsePartition) {
             listener.exitUsePartition(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUsePartition) {
            return visitor.visitUsePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFieldIdentifier) {
             listener.enterFieldIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFieldIdentifier) {
             listener.exitFieldIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFieldIdentifier) {
            return visitor.visitFieldIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnInternalRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnInternalRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnInternalRef) {
             listener.enterColumnInternalRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnInternalRef) {
             listener.exitColumnInternalRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnInternalRef) {
            return visitor.visitColumnInternalRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnInternalRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public columnInternalRef_list(): Vector<ColumnInternalRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnInternalRef);
    }
    public columnInternalRef(i: number): ColumnInternalRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRef, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnInternalRefList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnInternalRefList) {
             listener.enterColumnInternalRefList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnInternalRefList) {
             listener.exitColumnInternalRefList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnInternalRefList) {
            return visitor.visitColumnInternalRefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldIdentifier(): FieldIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterColumnRef) {
             listener.enterColumnRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitColumnRef) {
             listener.exitColumnRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitColumnRef) {
            return visitor.visitColumnRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0);
    }
    public tableWild(): TableWildContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableWild, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInsertIdentifier) {
             listener.enterInsertIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInsertIdentifier) {
             listener.exitInsertIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInsertIdentifier) {
            return visitor.visitInsertIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexName) {
             listener.enterIndexName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexName) {
             listener.exitIndexName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexName) {
            return visitor.visitIndexName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldIdentifier(): FieldIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIndexRef) {
             listener.enterIndexRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIndexRef) {
             listener.exitIndexRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIndexRef) {
            return visitor.visitIndexRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableWildContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier);
    }
    public identifier(i: number): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, i);
    }
    public DOT_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.DOT_SYMBOL);
    }
    public DOT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, i);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableWild;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableWild) {
             listener.enterTableWild(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableWild) {
             listener.exitTableWild(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableWild) {
            return visitor.visitTableWild(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSchemaName) {
             listener.enterSchemaName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSchemaName) {
             listener.exitSchemaName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSchemaName) {
            return visitor.visitSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSchemaRef) {
             listener.enterSchemaRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSchemaRef) {
             listener.exitSchemaRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSchemaRef) {
            return visitor.visitSchemaRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProcedureName) {
             listener.enterProcedureName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProcedureName) {
             listener.exitProcedureName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProcedureName) {
            return visitor.visitProcedureName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcedureRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterProcedureRef) {
             listener.enterProcedureRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitProcedureRef) {
             listener.exitProcedureRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitProcedureRef) {
            return visitor.visitProcedureRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFunctionRef) {
             listener.enterFunctionRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFunctionRef) {
             listener.exitFunctionRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFunctionRef) {
            return visitor.visitFunctionRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTriggerName) {
             listener.enterTriggerName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTriggerName) {
             listener.exitTriggerName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTriggerName) {
            return visitor.visitTriggerName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTriggerRef) {
             listener.enterTriggerRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTriggerRef) {
             listener.exitTriggerRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTriggerRef) {
            return visitor.visitTriggerRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterViewRef) {
             listener.enterViewRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitViewRef) {
             listener.exitViewRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitViewRef) {
            return visitor.visitViewRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablespaceName) {
             listener.enterTablespaceName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablespaceName) {
             listener.exitTablespaceName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablespaceName) {
            return visitor.visitTablespaceName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablespaceRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTablespaceRef) {
             listener.enterTablespaceRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTablespaceRef) {
             listener.exitTablespaceRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTablespaceRef) {
            return visitor.visitTablespaceRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogfileGroupNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogfileGroupName) {
             listener.enterLogfileGroupName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogfileGroupName) {
             listener.exitLogfileGroupName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogfileGroupName) {
            return visitor.visitLogfileGroupName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogfileGroupRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLogfileGroupRef) {
             listener.enterLogfileGroupRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLogfileGroupRef) {
             listener.exitLogfileGroupRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLogfileGroupRef) {
            return visitor.visitLogfileGroupRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EventNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_eventName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEventName) {
             listener.enterEventName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEventName) {
             listener.exitEventName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEventName) {
            return visitor.visitEventName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EventRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_eventRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEventRef) {
             listener.enterEventRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEventRef) {
             listener.exitEventRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEventRef) {
            return visitor.visitEventRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UdfNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUdfName) {
             listener.enterUdfName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUdfName) {
             listener.exitUdfName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUdfName) {
            return visitor.visitUdfName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerName) {
             listener.enterServerName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerName) {
             listener.exitServerName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerName) {
            return visitor.visitServerName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterServerRef) {
             listener.enterServerRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitServerRef) {
             listener.exitServerRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitServerRef) {
            return visitor.visitServerRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textOrIdentifier(): TextOrIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_engineRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEngineRef) {
             listener.enterEngineRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEngineRef) {
             listener.exitEngineRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEngineRef) {
            return visitor.visitEngineRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterTableRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterTableRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFilterTableRef) {
             listener.enterFilterTableRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFilterTableRef) {
             listener.exitFilterTableRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFilterTableRef) {
            return visitor.visitFilterTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRefWithWildcardContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRefWithWildcard;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableRefWithWildcard) {
             listener.enterTableRefWithWildcard(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableRefWithWildcard) {
             listener.exitTableRefWithWildcard(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableRefWithWildcard) {
            return visitor.visitTableRefWithWildcard(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableRef) {
             listener.enterTableRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableRef) {
             listener.exitTableRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableRef) {
            return visitor.visitTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef_list(): Vector<TableRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableRef);
    }
    public tableRef(i: number): TableRefContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRef, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRefList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableRefList) {
             listener.enterTableRefList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableRefList) {
             listener.exitTableRefList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableRefList) {
            return visitor.visitTableRefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRefWithWildcard_list(): Vector<TableRefWithWildcardContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableRefWithWildcard);
    }
    public tableRefWithWildcard(i: number): TableRefWithWildcardContext | null {
        return this.getRuleContext(MySQLParser.RULE_tableRefWithWildcard, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAliasRefList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTableAliasRefList) {
             listener.enterTableAliasRefList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTableAliasRefList) {
             listener.exitTableAliasRefList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTableAliasRefList) {
            return visitor.visitTableAliasRefList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParameterNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_parameterName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterParameterName) {
             listener.enterParameterName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitParameterName) {
             listener.exitParameterName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitParameterName) {
            return visitor.visitParameterName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public labelKeyword(): LabelKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelKeyword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabelIdentifier) {
             listener.enterLabelIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabelIdentifier) {
             listener.exitLabelIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabelIdentifier) {
            return visitor.visitLabelIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelIdentifier(): LabelIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabelRef) {
             listener.enterLabelRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabelRef) {
             listener.exitLabelRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabelRef) {
            return visitor.visitLabelRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public roleKeyword(): RoleKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleKeyword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleIdentifier) {
             listener.enterRoleIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleIdentifier) {
             listener.exitRoleIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleIdentifier) {
            return visitor.visitRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PluginRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pluginRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPluginRef) {
             listener.enterPluginRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPluginRef) {
             listener.exitPluginRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPluginRef) {
            return visitor.visitPluginRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComponentRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_componentRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterComponentRef) {
             listener.enterComponentRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitComponentRef) {
             listener.exitComponentRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitComponentRef) {
            return visitor.visitComponentRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceGroupRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupRef;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterResourceGroupRef) {
             listener.enterResourceGroupRef(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitResourceGroupRef) {
             listener.exitResourceGroupRef(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitResourceGroupRef) {
            return visitor.visitResourceGroupRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowName;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterWindowName) {
             listener.enterWindowName(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitWindowName) {
             listener.exitWindowName(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitWindowName) {
            return visitor.visitWindowName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PureIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIER, 0);
    }
    public BACK_TICK_QUOTED_ID(): TerminalNode | null {
        return this.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0);
    }
    public DOUBLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pureIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPureIdentifier) {
             listener.enterPureIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPureIdentifier) {
             listener.exitPureIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPureIdentifier) {
            return visitor.visitPureIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public identifierKeyword(): IdentifierKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeyword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier);
    }
    public identifier(i: number): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierList) {
             listener.enterIdentifierList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierList) {
             listener.exitIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierListWithParentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierListWithParentheses) {
             listener.enterIdentifierListWithParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierListWithParentheses) {
             listener.exitIdentifierListWithParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierListWithParentheses) {
            return visitor.visitIdentifierListWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public dotIdentifier(): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_qualifiedIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterQualifiedIdentifier) {
             listener.enterQualifiedIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitQualifiedIdentifier) {
             listener.exitQualifiedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitQualifiedIdentifier) {
            return visitor.visitQualifiedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public dotIdentifier_list(): Vector<DotIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_dotIdentifier);
    }
    public dotIdentifier(i: number): DotIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSimpleIdentifier) {
             listener.enterSimpleIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSimpleIdentifier) {
             listener.exitSimpleIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSimpleIdentifier) {
            return visitor.visitSimpleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DotIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dotIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterDotIdentifier) {
             listener.enterDotIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitDotIdentifier) {
             listener.exitDotIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitDotIdentifier) {
            return visitor.visitDotIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Ulong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ulong_number;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUlong_number) {
             listener.enterUlong_number(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUlong_number) {
             listener.exitUlong_number(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUlong_number) {
            return visitor.visitUlong_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Real_ulong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_real_ulong_number;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReal_ulong_number) {
             listener.enterReal_ulong_number(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReal_ulong_number) {
             listener.exitReal_ulong_number(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReal_ulong_number) {
            return visitor.visitReal_ulong_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UlonglongNumberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ulonglongNumber;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterUlonglongNumber) {
             listener.enterUlonglongNumber(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitUlonglongNumber) {
             listener.exitUlonglongNumber(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitUlonglongNumber) {
            return visitor.visitUlonglongNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Real_ulonglong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_real_ulonglong_number;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterReal_ulonglong_number) {
             listener.enterReal_ulonglong_number(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitReal_ulonglong_number) {
             listener.exitReal_ulonglong_number(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitReal_ulonglong_number) {
            return visitor.visitReal_ulonglong_number(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignedLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_literal, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public ulong_number(): Ulong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signedLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignedLiteral) {
             listener.enterSignedLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignedLiteral) {
             listener.exitSignedLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignedLiteral) {
            return visitor.visitSignedLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignedLiteralOrNullContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public signedLiteral(): SignedLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_signedLiteral, 0);
    }
    public nullAsLiteral(): NullAsLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullAsLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signedLiteralOrNull;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSignedLiteralOrNull) {
             listener.enterSignedLiteralOrNull(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSignedLiteralOrNull) {
             listener.exitSignedLiteralOrNull(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSignedLiteralOrNull) {
            return visitor.visitSignedLiteralOrNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textLiteral(): TextLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0);
    }
    public numLiteral(): NumLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_numLiteral, 0);
    }
    public temporalLiteral(): TemporalLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_temporalLiteral, 0);
    }
    public nullLiteral(): NullLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0);
    }
    public boolLiteral(): BoolLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_boolLiteral, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public BIN_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.BIN_NUMBER, 0);
    }
    public UNDERSCORE_CHARSET(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_literal;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLiteral) {
             listener.enterLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLiteral) {
             listener.exitLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralOrNullContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_literal, 0);
    }
    public nullAsLiteral(): NullAsLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_nullAsLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_literalOrNull;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLiteralOrNull) {
             listener.enterLiteralOrNull(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLiteralOrNull) {
             listener.exitLiteralOrNull(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLiteralOrNull) {
            return visitor.visitLiteralOrNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullAsLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullAsLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNullAsLiteral) {
             listener.enterNullAsLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNullAsLiteral) {
             listener.exitNullAsLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNullAsLiteral) {
            return visitor.visitNullAsLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString);
    }
    public textString(i: number): TextStringContext | null {
        return this.getRuleContext(MySQLParser.RULE_textString, i);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stringList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStringList) {
             listener.enterStringList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStringList) {
             listener.exitStringList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStringList) {
            return visitor.visitStringList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringLiteralContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SINGLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
    }
    public DOUBLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextStringLiteral) {
             listener.enterTextStringLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextStringLiteral) {
             listener.exitTextStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextStringLiteral) {
            return visitor.visitTextStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public BIN_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.BIN_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textString;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextString) {
             listener.enterTextString(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextString) {
             listener.exitTextString(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextString) {
            return visitor.visitTextString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringHashContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringHash;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextStringHash) {
             listener.enterTextStringHash(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextStringHash) {
             listener.exitTextStringHash(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextStringHash) {
            return visitor.visitTextStringHash(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral_list(): Vector<TextStringLiteralContext> {
        return this.getRuleContexts(MySQLParser.RULE_textStringLiteral);
    }
    public textStringLiteral(i: number): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, i);
    }
    public NCHAR_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_TEXT, 0);
    }
    public UNDERSCORE_CHARSET(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextLiteral) {
             listener.enterTextLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextLiteral) {
             listener.exitTextLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextLiteral) {
            return visitor.visitTextLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringNoLinebreakContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringNoLinebreak;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextStringNoLinebreak) {
             listener.enterTextStringNoLinebreak(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextStringNoLinebreak) {
             listener.exitTextStringNoLinebreak(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextStringNoLinebreak) {
            return visitor.visitTextStringNoLinebreak(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextStringLiteralListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral_list(): Vector<TextStringLiteralContext> {
        return this.getRuleContexts(MySQLParser.RULE_textStringLiteral);
    }
    public textStringLiteral(i: number): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringLiteralList;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextStringLiteralList) {
             listener.enterTextStringLiteralList(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextStringLiteralList) {
             listener.exitTextStringLiteralList(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextStringLiteralList) {
            return visitor.visitTextStringLiteralList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public int64Literal(): Int64LiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_int64Literal, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_numLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNumLiteral) {
             listener.enterNumLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNumLiteral) {
             listener.exitNumLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNumLiteral) {
            return visitor.visitNumLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BoolLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
    }
    public FALSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_boolLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterBoolLiteral) {
             listener.enterBoolLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitBoolLiteral) {
             listener.exitBoolLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitBoolLiteral) {
            return visitor.visitBoolLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public NULL2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterNullLiteral) {
             listener.enterNullLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitNullLiteral) {
             listener.exitNullLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Int64LiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_int64Literal;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterInt64Literal) {
             listener.enterInt64Literal(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitInt64Literal) {
             listener.exitInt64Literal(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitInt64Literal) {
            return visitor.visitInt64Literal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public SINGLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_temporalLiteral;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTemporalLiteral) {
             listener.enterTemporalLiteral(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTemporalLiteral) {
             listener.exitTemporalLiteral(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTemporalLiteral) {
            return visitor.visitTemporalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloatOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldLength(): FieldLengthContext | null {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_precision, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_floatOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterFloatOptions) {
             listener.enterFloatOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitFloatOptions) {
             listener.exitFloatOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitFloatOptions) {
            return visitor.visitFloatOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandardFloatOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precision(): PrecisionContext | null {
        return this.getRuleContext(MySQLParser.RULE_precision, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_standardFloatOptions;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterStandardFloatOptions) {
             listener.enterStandardFloatOptions(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitStandardFloatOptions) {
             listener.exitStandardFloatOptions(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitStandardFloatOptions) {
            return visitor.visitStandardFloatOptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
            return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_precision;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterPrecision) {
             listener.enterPrecision(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitPrecision) {
             listener.exitPrecision(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitPrecision) {
            return visitor.visitPrecision(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextOrIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textOrIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterTextOrIdentifier) {
             listener.enterTextOrIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitTextOrIdentifier) {
             listener.exitTextOrIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitTextOrIdentifier) {
            return visitor.visitTextOrIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LValueIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public lValueKeyword(): LValueKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_lValueKeyword, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lValueIdentifier;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLValueIdentifier) {
             listener.enterLValueIdentifier(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLValueIdentifier) {
             listener.exitLValueIdentifier(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLValueIdentifier) {
            return visitor.visitLValueIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierOrTextContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifier, 0);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleIdentifierOrText;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleIdentifierOrText) {
             listener.enterRoleIdentifierOrText(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleIdentifierOrText) {
             listener.exitRoleIdentifierOrText(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleIdentifierOrText) {
            return visitor.visitRoleIdentifierOrText(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SizeNumberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext | null {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0);
    }
    public pureIdentifier(): PureIdentifierContext | null {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sizeNumber;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSizeNumber) {
             listener.enterSizeNumber(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSizeNumber) {
             listener.exitSizeNumber(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSizeNumber) {
            return visitor.visitSizeNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_parentheses;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterParentheses) {
             listener.enterParentheses(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitParentheses) {
             listener.exitParentheses(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitParentheses) {
            return visitor.visitParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EqualContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public ASSIGN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_equal;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterEqual) {
             listener.enterEqual(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitEqual) {
             listener.exitEqual(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitEqual) {
            return visitor.visitEqual(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterOptionType) {
             listener.enterOptionType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitOptionType) {
             listener.exitOptionType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitOptionType) {
            return visitor.visitOptionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RvalueSystemVariableTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemVariableType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRvalueSystemVariableType) {
             listener.enterRvalueSystemVariableType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRvalueSystemVariableType) {
             listener.exitRvalueSystemVariableType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRvalueSystemVariableType) {
            return visitor.visitRvalueSystemVariableType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetVarIdentTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setVarIdentType;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterSetVarIdentType) {
             listener.enterSetVarIdentType(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitSetVarIdentType) {
             listener.exitSetVarIdentType(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitSetVarIdentType) {
            return visitor.visitSetVarIdentType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public textStringLiteral(): TextStringLiteralContext | null {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonAttribute;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterJsonAttribute) {
             listener.enterJsonAttribute(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitJsonAttribute) {
             listener.exitJsonAttribute(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitJsonAttribute) {
            return visitor.visitJsonAttribute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public labelKeyword(): LabelKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_labelKeyword, 0);
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrIdentifierKeyword, 0);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0);
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels, 0);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeyword) {
             listener.enterIdentifierKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeyword) {
             listener.exitIdentifierKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeyword) {
            return visitor.visitIdentifierKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels) {
             listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels) {
             listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsAmbiguous1RolesAndLabels) {
            return visitor.visitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous2Labels;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsAmbiguous2Labels) {
             listener.enterIdentifierKeywordsAmbiguous2Labels(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsAmbiguous2Labels) {
             listener.exitIdentifierKeywordsAmbiguous2Labels(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsAmbiguous2Labels) {
            return visitor.visitIdentifierKeywordsAmbiguous2Labels(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LabelKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrLabelKeyword, 0);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLabelKeyword) {
             listener.enterLabelKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLabelKeyword) {
             listener.exitLabelKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLabelKeyword) {
            return visitor.visitLabelKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous3Roles;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsAmbiguous3Roles) {
             listener.enterIdentifierKeywordsAmbiguous3Roles(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsAmbiguous3Roles) {
             listener.exitIdentifierKeywordsAmbiguous3Roles(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsAmbiguous3Roles) {
            return visitor.visitIdentifierKeywordsAmbiguous3Roles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public AUTHENTICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public CHALLENGE_RESPONSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public DEFINITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public ENFORCED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public EXCHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public EXPIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public FACTOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FACTOR_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public FINISH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FINISH_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
    }
    public GET_SOURCE_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public GTID_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GTID_ONLY_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public INITIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SYMBOL, 0);
    }
    public INITIATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIATE_SYMBOL, 0);
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public JSON_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_VALUE_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public KEYRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYRING_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public LOCKS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public NETWORK_NAMESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public NDBCLUSTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public NEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEW_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public OJ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OJ_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public READ_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public REGISTRATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGISTRATION_SYMBOL, 0);
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public REPLICAS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICAS_SYMBOL, 0);
    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICA_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public RESTORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public RETURNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNING_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public SOURCE_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0);
    }
    public SOURCE_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0);
    }
    public SOURCE_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0);
    }
    public SOURCE_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0);
    }
    public SOURCE_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0);
    }
    public SOURCE_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public SOURCE_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0);
    }
    public SOURCE_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0);
    }
    public SOURCE_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0);
    }
    public SOURCE_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0);
    }
    public SOURCE_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0);
    }
    public SOURCE_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public SOURCE_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0);
    }
    public SOURCE_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0);
    }
    public SOURCE_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0);
    }
    public SOURCE_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0);
    }
    public SOURCE_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0);
    }
    public SOURCE_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0);
    }
    public SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SOURCE_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public SOURCE_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0);
    }
    public SOURCE_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_USER_SYMBOL, 0);
    }
    public SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public ST_COLLECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ST_COLLECT_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TLS_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public TYPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public UNREGISTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNREGISTER_SYMBOL, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public VALIDATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public WITHOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ZONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ZONE_SYMBOL, 0);
    }
    public ARRAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
    }
    public MEMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public PASSWORD_LOCK_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public REQUIRE_ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
    }
    public REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
    }
    public STREAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
    }
    public BULK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BULK_SYMBOL, 0);
    }
    public GENERATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERATE_SYMBOL, 0);
    }
    public GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GTIDS_SYMBOL, 0);
    }
    public LOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOG_SYMBOL, 0);
    }
    public PARSE_TREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSE_TREE_SYMBOL, 0);
    }
    public S3_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.S3_SYMBOL, 0);
    }
    public BENROULLI_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BENROULLI_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsUnambiguous;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsUnambiguous) {
             listener.enterIdentifierKeywordsUnambiguous(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsUnambiguous) {
             listener.exitIdentifierKeywordsUnambiguous(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsUnambiguous) {
            return visitor.visitIdentifierKeywordsUnambiguous(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrLabelKeyword, 0);
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext | null {
        return this.getRuleContext(MySQLParser.RULE_roleOrIdentifierKeyword, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0);
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleKeyword) {
             listener.enterRoleKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleKeyword) {
             listener.exitRoleKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleKeyword) {
            return visitor.visitRoleKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LValueKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0);
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels, 0);
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0);
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext | null {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lValueKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterLValueKeyword) {
             listener.enterLValueKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitLValueKeyword) {
             listener.exitLValueKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitLValueKeyword) {
            return visitor.visitLValueKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterIdentifierKeywordsAmbiguous4SystemVariables) {
             listener.enterIdentifierKeywordsAmbiguous4SystemVariables(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitIdentifierKeywordsAmbiguous4SystemVariables) {
             listener.exitIdentifierKeywordsAmbiguous4SystemVariables(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitIdentifierKeywordsAmbiguous4SystemVariables) {
            return visitor.visitIdentifierKeywordsAmbiguous4SystemVariables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOrIdentifierKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public RESTORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrIdentifierKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleOrIdentifierKeyword) {
             listener.enterRoleOrIdentifierKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleOrIdentifierKeyword) {
             listener.exitRoleOrIdentifierKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleOrIdentifierKeyword) {
            return visitor.visitRoleOrIdentifierKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleOrLabelKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public LOCKS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public NDBCLUSTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public NEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEW_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public READ_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public REMOTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TYPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public UDF_RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrLabelKeyword;
    }
    public override enterRule(listener: MySQLParserListener): void {
        if(listener.enterRoleOrLabelKeyword) {
             listener.enterRoleOrLabelKeyword(this);
        }
    }
    public override exitRule(listener: MySQLParserListener): void {
        if(listener.exitRoleOrLabelKeyword) {
             listener.exitRoleOrLabelKeyword(this);
        }
    }
    public override accept<Result>(visitor: MySQLParserVisitor<Result>): Result {
        if (visitor.visitRoleOrLabelKeyword) {
            return visitor.visitRoleOrLabelKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
