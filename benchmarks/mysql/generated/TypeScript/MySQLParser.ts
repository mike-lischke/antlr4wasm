/*
 * Copyright (c) 2020, 2023, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-useless-escape, no-lone-blocks */

/* cspell: disable */

import {
    CharStream, DFA, Parser, ParserATNSimulator, PredictionContextCache, RuleContext, Token, SerializedATNView, ATN,
    ATNDeserializer, StringVector, Vocabulary, ParserRuleContext as PRC, TokenStream, FailedPredicateException, RecognitionException, NoViableAltException, TerminalNode, Vector
} from "../../../../src/antlr4-runtime.js";


import { MySQLBaseRecognizer } from "../../MySQLBaseRecognizer.js";
import { SqlMode } from "../../MySQLRecognizerCommon.js";

const ParserRuleContext = PRC.extend<PRC>("PRC", {});
type ParserRuleContext = InstanceType<typeof ParserRuleContext>;

export default class MySQLParser extends MySQLBaseRecognizer {
    public static readonly ACCESSIBLE_SYMBOL = 1;
    public static readonly ACCOUNT_SYMBOL = 2;
    public static readonly ACTION_SYMBOL = 3;
    public static readonly ADD_SYMBOL = 4;
    public static readonly ADDDATE_SYMBOL = 5;
    public static readonly AFTER_SYMBOL = 6;
    public static readonly AGAINST_SYMBOL = 7;
    public static readonly AGGREGATE_SYMBOL = 8;
    public static readonly ALGORITHM_SYMBOL = 9;
    public static readonly ALL_SYMBOL = 10;
    public static readonly ALTER_SYMBOL = 11;
    public static readonly ALWAYS_SYMBOL = 12;
    public static readonly ANALYSE_SYMBOL = 13;
    public static readonly ANALYZE_SYMBOL = 14;
    public static readonly AND_SYMBOL = 15;
    public static readonly ANY_SYMBOL = 16;
    public static readonly AS_SYMBOL = 17;
    public static readonly ASC_SYMBOL = 18;
    public static readonly ASCII_SYMBOL = 19;
    public static readonly ASENSITIVE_SYMBOL = 20;
    public static readonly AT_SYMBOL = 21;
    public static readonly AUTHORS_SYMBOL = 22;
    public static readonly AUTOEXTEND_SIZE_SYMBOL = 23;
    public static readonly AUTO_INCREMENT_SYMBOL = 24;
    public static readonly AVG_ROW_LENGTH_SYMBOL = 25;
    public static readonly AVG_SYMBOL = 26;
    public static readonly BACKUP_SYMBOL = 27;
    public static readonly BEFORE_SYMBOL = 28;
    public static readonly BEGIN_SYMBOL = 29;
    public static readonly BETWEEN_SYMBOL = 30;
    public static readonly BIGINT_SYMBOL = 31;
    public static readonly BINARY_SYMBOL = 32;
    public static readonly BINLOG_SYMBOL = 33;
    public static readonly BIN_NUM_SYMBOL = 34;
    public static readonly BIT_AND_SYMBOL = 35;
    public static readonly BIT_OR_SYMBOL = 36;
    public static readonly BIT_SYMBOL = 37;
    public static readonly BIT_XOR_SYMBOL = 38;
    public static readonly BLOB_SYMBOL = 39;
    public static readonly BLOCK_SYMBOL = 40;
    public static readonly BOOLEAN_SYMBOL = 41;
    public static readonly BOOL_SYMBOL = 42;
    public static readonly BOTH_SYMBOL = 43;
    public static readonly BTREE_SYMBOL = 44;
    public static readonly BY_SYMBOL = 45;
    public static readonly BYTE_SYMBOL = 46;
    public static readonly CACHE_SYMBOL = 47;
    public static readonly CALL_SYMBOL = 48;
    public static readonly CASCADE_SYMBOL = 49;
    public static readonly CASCADED_SYMBOL = 50;
    public static readonly CASE_SYMBOL = 51;
    public static readonly CAST_SYMBOL = 52;
    public static readonly CATALOG_NAME_SYMBOL = 53;
    public static readonly CHAIN_SYMBOL = 54;
    public static readonly CHANGE_SYMBOL = 55;
    public static readonly CHANGED_SYMBOL = 56;
    public static readonly CHANNEL_SYMBOL = 57;
    public static readonly CHARSET_SYMBOL = 58;
    public static readonly CHARACTER_SYMBOL = 59;
    public static readonly CHAR_SYMBOL = 60;
    public static readonly CHECKSUM_SYMBOL = 61;
    public static readonly CHECK_SYMBOL = 62;
    public static readonly CIPHER_SYMBOL = 63;
    public static readonly CLASS_ORIGIN_SYMBOL = 64;
    public static readonly CLIENT_SYMBOL = 65;
    public static readonly CLOSE_SYMBOL = 66;
    public static readonly COALESCE_SYMBOL = 67;
    public static readonly CODE_SYMBOL = 68;
    public static readonly COLLATE_SYMBOL = 69;
    public static readonly COLLATION_SYMBOL = 70;
    public static readonly COLUMNS_SYMBOL = 71;
    public static readonly COLUMN_SYMBOL = 72;
    public static readonly COLUMN_NAME_SYMBOL = 73;
    public static readonly COLUMN_FORMAT_SYMBOL = 74;
    public static readonly COMMENT_SYMBOL = 75;
    public static readonly COMMITTED_SYMBOL = 76;
    public static readonly COMMIT_SYMBOL = 77;
    public static readonly COMPACT_SYMBOL = 78;
    public static readonly COMPLETION_SYMBOL = 79;
    public static readonly COMPRESSED_SYMBOL = 80;
    public static readonly COMPRESSION_SYMBOL = 81;
    public static readonly CONCURRENT_SYMBOL = 82;
    public static readonly CONDITION_SYMBOL = 83;
    public static readonly CONNECTION_SYMBOL = 84;
    public static readonly CONSISTENT_SYMBOL = 85;
    public static readonly CONSTRAINT_SYMBOL = 86;
    public static readonly CONSTRAINT_CATALOG_SYMBOL = 87;
    public static readonly CONSTRAINT_NAME_SYMBOL = 88;
    public static readonly CONSTRAINT_SCHEMA_SYMBOL = 89;
    public static readonly CONTAINS_SYMBOL = 90;
    public static readonly CONTEXT_SYMBOL = 91;
    public static readonly CONTINUE_SYMBOL = 92;
    public static readonly CONTRIBUTORS_SYMBOL = 93;
    public static readonly CONVERT_SYMBOL = 94;
    public static readonly COUNT_SYMBOL = 95;
    public static readonly CPU_SYMBOL = 96;
    public static readonly CREATE_SYMBOL = 97;
    public static readonly CROSS_SYMBOL = 98;
    public static readonly CUBE_SYMBOL = 99;
    public static readonly CURDATE_SYMBOL = 100;
    public static readonly CURRENT_SYMBOL = 101;
    public static readonly CURRENT_DATE_SYMBOL = 102;
    public static readonly CURRENT_TIME_SYMBOL = 103;
    public static readonly CURRENT_TIMESTAMP_SYMBOL = 104;
    public static readonly CURRENT_USER_SYMBOL = 105;
    public static readonly CURSOR_SYMBOL = 106;
    public static readonly CURSOR_NAME_SYMBOL = 107;
    public static readonly CURTIME_SYMBOL = 108;
    public static readonly DATABASE_SYMBOL = 109;
    public static readonly DATABASES_SYMBOL = 110;
    public static readonly DATAFILE_SYMBOL = 111;
    public static readonly DATA_SYMBOL = 112;
    public static readonly DATETIME_SYMBOL = 113;
    public static readonly DATE_ADD_SYMBOL = 114;
    public static readonly DATE_SUB_SYMBOL = 115;
    public static readonly DATE_SYMBOL = 116;
    public static readonly DAYOFMONTH_SYMBOL = 117;
    public static readonly DAY_HOUR_SYMBOL = 118;
    public static readonly DAY_MICROSECOND_SYMBOL = 119;
    public static readonly DAY_MINUTE_SYMBOL = 120;
    public static readonly DAY_SECOND_SYMBOL = 121;
    public static readonly DAY_SYMBOL = 122;
    public static readonly DEALLOCATE_SYMBOL = 123;
    public static readonly DEC_SYMBOL = 124;
    public static readonly DECIMAL_NUM_SYMBOL = 125;
    public static readonly DECIMAL_SYMBOL = 126;
    public static readonly DECLARE_SYMBOL = 127;
    public static readonly DEFAULT_SYMBOL = 128;
    public static readonly DEFAULT_AUTH_SYMBOL = 129;
    public static readonly DEFINER_SYMBOL = 130;
    public static readonly DELAYED_SYMBOL = 131;
    public static readonly DELAY_KEY_WRITE_SYMBOL = 132;
    public static readonly DELETE_SYMBOL = 133;
    public static readonly DESC_SYMBOL = 134;
    public static readonly DESCRIBE_SYMBOL = 135;
    public static readonly DES_KEY_FILE_SYMBOL = 136;
    public static readonly DETERMINISTIC_SYMBOL = 137;
    public static readonly DIAGNOSTICS_SYMBOL = 138;
    public static readonly DIRECTORY_SYMBOL = 139;
    public static readonly DISABLE_SYMBOL = 140;
    public static readonly DISCARD_SYMBOL = 141;
    public static readonly DISK_SYMBOL = 142;
    public static readonly DISTINCT_SYMBOL = 143;
    public static readonly DISTINCTROW_SYMBOL = 144;
    public static readonly DIV_SYMBOL = 145;
    public static readonly DOUBLE_SYMBOL = 146;
    public static readonly DO_SYMBOL = 147;
    public static readonly DROP_SYMBOL = 148;
    public static readonly DUAL_SYMBOL = 149;
    public static readonly DUMPFILE_SYMBOL = 150;
    public static readonly DUPLICATE_SYMBOL = 151;
    public static readonly DYNAMIC_SYMBOL = 152;
    public static readonly EACH_SYMBOL = 153;
    public static readonly ELSE_SYMBOL = 154;
    public static readonly ELSEIF_SYMBOL = 155;
    public static readonly ENABLE_SYMBOL = 156;
    public static readonly ENCLOSED_SYMBOL = 157;
    public static readonly ENCRYPTION_SYMBOL = 158;
    public static readonly END_SYMBOL = 159;
    public static readonly ENDS_SYMBOL = 160;
    public static readonly END_OF_INPUT_SYMBOL = 161;
    public static readonly ENGINES_SYMBOL = 162;
    public static readonly ENGINE_SYMBOL = 163;
    public static readonly ENUM_SYMBOL = 164;
    public static readonly ERROR_SYMBOL = 165;
    public static readonly ERRORS_SYMBOL = 166;
    public static readonly ESCAPED_SYMBOL = 167;
    public static readonly ESCAPE_SYMBOL = 168;
    public static readonly EVENTS_SYMBOL = 169;
    public static readonly EVENT_SYMBOL = 170;
    public static readonly EVERY_SYMBOL = 171;
    public static readonly EXCHANGE_SYMBOL = 172;
    public static readonly EXECUTE_SYMBOL = 173;
    public static readonly EXISTS_SYMBOL = 174;
    public static readonly EXIT_SYMBOL = 175;
    public static readonly EXPANSION_SYMBOL = 176;
    public static readonly EXPIRE_SYMBOL = 177;
    public static readonly EXPLAIN_SYMBOL = 178;
    public static readonly EXPORT_SYMBOL = 179;
    public static readonly EXTENDED_SYMBOL = 180;
    public static readonly EXTENT_SIZE_SYMBOL = 181;
    public static readonly EXTRACT_SYMBOL = 182;
    public static readonly FALSE_SYMBOL = 183;
    public static readonly FAST_SYMBOL = 184;
    public static readonly FAULTS_SYMBOL = 185;
    public static readonly FETCH_SYMBOL = 186;
    public static readonly FIELDS_SYMBOL = 187;
    public static readonly FILE_SYMBOL = 188;
    public static readonly FILE_BLOCK_SIZE_SYMBOL = 189;
    public static readonly FILTER_SYMBOL = 190;
    public static readonly FIRST_SYMBOL = 191;
    public static readonly FIXED_SYMBOL = 192;
    public static readonly FLOAT4_SYMBOL = 193;
    public static readonly FLOAT8_SYMBOL = 194;
    public static readonly FLOAT_SYMBOL = 195;
    public static readonly FLUSH_SYMBOL = 196;
    public static readonly FOLLOWS_SYMBOL = 197;
    public static readonly FORCE_SYMBOL = 198;
    public static readonly FOREIGN_SYMBOL = 199;
    public static readonly FOR_SYMBOL = 200;
    public static readonly FORMAT_SYMBOL = 201;
    public static readonly FOUND_SYMBOL = 202;
    public static readonly FROM_SYMBOL = 203;
    public static readonly FULL_SYMBOL = 204;
    public static readonly FULLTEXT_SYMBOL = 205;
    public static readonly FUNCTION_SYMBOL = 206;
    public static readonly GET_SYMBOL = 207;
    public static readonly GENERAL_SYMBOL = 208;
    public static readonly GENERATED_SYMBOL = 209;
    public static readonly GROUP_REPLICATION_SYMBOL = 210;
    public static readonly GEOMETRYCOLLECTION_SYMBOL = 211;
    public static readonly GEOMETRY_SYMBOL = 212;
    public static readonly GET_FORMAT_SYMBOL = 213;
    public static readonly GLOBAL_SYMBOL = 214;
    public static readonly GRANT_SYMBOL = 215;
    public static readonly GRANTS_SYMBOL = 216;
    public static readonly GROUP_SYMBOL = 217;
    public static readonly GROUP_CONCAT_SYMBOL = 218;
    public static readonly HANDLER_SYMBOL = 219;
    public static readonly HASH_SYMBOL = 220;
    public static readonly HAVING_SYMBOL = 221;
    public static readonly HELP_SYMBOL = 222;
    public static readonly HIGH_PRIORITY_SYMBOL = 223;
    public static readonly HOST_SYMBOL = 224;
    public static readonly HOSTS_SYMBOL = 225;
    public static readonly HOUR_MICROSECOND_SYMBOL = 226;
    public static readonly HOUR_MINUTE_SYMBOL = 227;
    public static readonly HOUR_SECOND_SYMBOL = 228;
    public static readonly HOUR_SYMBOL = 229;
    public static readonly IDENTIFIED_SYMBOL = 230;
    public static readonly IF_SYMBOL = 231;
    public static readonly IGNORE_SYMBOL = 232;
    public static readonly IGNORE_SERVER_IDS_SYMBOL = 233;
    public static readonly IMPORT_SYMBOL = 234;
    public static readonly INDEXES_SYMBOL = 235;
    public static readonly INDEX_SYMBOL = 236;
    public static readonly INFILE_SYMBOL = 237;
    public static readonly INITIAL_SIZE_SYMBOL = 238;
    public static readonly INNER_SYMBOL = 239;
    public static readonly INOUT_SYMBOL = 240;
    public static readonly INSENSITIVE_SYMBOL = 241;
    public static readonly INSERT_SYMBOL = 242;
    public static readonly INSERT_METHOD_SYMBOL = 243;
    public static readonly INSTANCE_SYMBOL = 244;
    public static readonly INSTALL_SYMBOL = 245;
    public static readonly INTEGER_SYMBOL = 246;
    public static readonly INTERVAL_SYMBOL = 247;
    public static readonly INTO_SYMBOL = 248;
    public static readonly INT_SYMBOL = 249;
    public static readonly INVOKER_SYMBOL = 250;
    public static readonly IN_SYMBOL = 251;
    public static readonly IO_AFTER_GTIDS_SYMBOL = 252;
    public static readonly IO_BEFORE_GTIDS_SYMBOL = 253;
    public static readonly IO_THREAD_SYMBOL = 254;
    public static readonly IO_SYMBOL = 255;
    public static readonly IPC_SYMBOL = 256;
    public static readonly IS_SYMBOL = 257;
    public static readonly ISOLATION_SYMBOL = 258;
    public static readonly ISSUER_SYMBOL = 259;
    public static readonly ITERATE_SYMBOL = 260;
    public static readonly JOIN_SYMBOL = 261;
    public static readonly JSON_SYMBOL = 262;
    public static readonly KEYS_SYMBOL = 263;
    public static readonly KEY_BLOCK_SIZE_SYMBOL = 264;
    public static readonly KEY_SYMBOL = 265;
    public static readonly KILL_SYMBOL = 266;
    public static readonly LANGUAGE_SYMBOL = 267;
    public static readonly LAST_SYMBOL = 268;
    public static readonly LEADING_SYMBOL = 269;
    public static readonly LEAVES_SYMBOL = 270;
    public static readonly LEAVE_SYMBOL = 271;
    public static readonly LEFT_SYMBOL = 272;
    public static readonly LESS_SYMBOL = 273;
    public static readonly LEVEL_SYMBOL = 274;
    public static readonly LIKE_SYMBOL = 275;
    public static readonly LIMIT_SYMBOL = 276;
    public static readonly LINEAR_SYMBOL = 277;
    public static readonly LINES_SYMBOL = 278;
    public static readonly LINESTRING_SYMBOL = 279;
    public static readonly LIST_SYMBOL = 280;
    public static readonly LOAD_SYMBOL = 281;
    public static readonly LOCALTIME_SYMBOL = 282;
    public static readonly LOCALTIMESTAMP_SYMBOL = 283;
    public static readonly LOCAL_SYMBOL = 284;
    public static readonly LOCATOR_SYMBOL = 285;
    public static readonly LOCKS_SYMBOL = 286;
    public static readonly LOCK_SYMBOL = 287;
    public static readonly LOGFILE_SYMBOL = 288;
    public static readonly LOGS_SYMBOL = 289;
    public static readonly LONGBLOB_SYMBOL = 290;
    public static readonly LONGTEXT_SYMBOL = 291;
    public static readonly LONG_NUM_SYMBOL = 292;
    public static readonly LONG_SYMBOL = 293;
    public static readonly LOOP_SYMBOL = 294;
    public static readonly LOW_PRIORITY_SYMBOL = 295;
    public static readonly MASTER_AUTO_POSITION_SYMBOL = 296;
    public static readonly MASTER_BIND_SYMBOL = 297;
    public static readonly MASTER_CONNECT_RETRY_SYMBOL = 298;
    public static readonly MASTER_DELAY_SYMBOL = 299;
    public static readonly MASTER_HOST_SYMBOL = 300;
    public static readonly MASTER_LOG_FILE_SYMBOL = 301;
    public static readonly MASTER_LOG_POS_SYMBOL = 302;
    public static readonly MASTER_PASSWORD_SYMBOL = 303;
    public static readonly MASTER_PORT_SYMBOL = 304;
    public static readonly MASTER_RETRY_COUNT_SYMBOL = 305;
    public static readonly MASTER_SERVER_ID_SYMBOL = 306;
    public static readonly MASTER_SSL_CAPATH_SYMBOL = 307;
    public static readonly MASTER_SSL_CA_SYMBOL = 308;
    public static readonly MASTER_SSL_CERT_SYMBOL = 309;
    public static readonly MASTER_SSL_CIPHER_SYMBOL = 310;
    public static readonly MASTER_SSL_CRL_SYMBOL = 311;
    public static readonly MASTER_SSL_CRLPATH_SYMBOL = 312;
    public static readonly MASTER_SSL_KEY_SYMBOL = 313;
    public static readonly MASTER_SSL_SYMBOL = 314;
    public static readonly MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 315;
    public static readonly MASTER_SYMBOL = 316;
    public static readonly MASTER_TLS_VERSION_SYMBOL = 317;
    public static readonly MASTER_USER_SYMBOL = 318;
    public static readonly MASTER_HEARTBEAT_PERIOD_SYMBOL = 319;
    public static readonly MATCH_SYMBOL = 320;
    public static readonly MAX_CONNECTIONS_PER_HOUR_SYMBOL = 321;
    public static readonly MAX_QUERIES_PER_HOUR_SYMBOL = 322;
    public static readonly MAX_ROWS_SYMBOL = 323;
    public static readonly MAX_SIZE_SYMBOL = 324;
    public static readonly MAX_STATEMENT_TIME_SYMBOL = 325;
    public static readonly MAX_SYMBOL = 326;
    public static readonly MAX_UPDATES_PER_HOUR_SYMBOL = 327;
    public static readonly MAX_USER_CONNECTIONS_SYMBOL = 328;
    public static readonly MAXVALUE_SYMBOL = 329;
    public static readonly MEDIUMBLOB_SYMBOL = 330;
    public static readonly MEDIUMINT_SYMBOL = 331;
    public static readonly MEDIUMTEXT_SYMBOL = 332;
    public static readonly MEDIUM_SYMBOL = 333;
    public static readonly MEMORY_SYMBOL = 334;
    public static readonly MERGE_SYMBOL = 335;
    public static readonly MESSAGE_TEXT_SYMBOL = 336;
    public static readonly MICROSECOND_SYMBOL = 337;
    public static readonly MID_SYMBOL = 338;
    public static readonly MIDDLEINT_SYMBOL = 339;
    public static readonly MIGRATE_SYMBOL = 340;
    public static readonly MINUTE_MICROSECOND_SYMBOL = 341;
    public static readonly MINUTE_SECOND_SYMBOL = 342;
    public static readonly MINUTE_SYMBOL = 343;
    public static readonly MIN_ROWS_SYMBOL = 344;
    public static readonly MIN_SYMBOL = 345;
    public static readonly MODE_SYMBOL = 346;
    public static readonly MODIFIES_SYMBOL = 347;
    public static readonly MODIFY_SYMBOL = 348;
    public static readonly MOD_SYMBOL = 349;
    public static readonly MONTH_SYMBOL = 350;
    public static readonly MULTILINESTRING_SYMBOL = 351;
    public static readonly MULTIPOINT_SYMBOL = 352;
    public static readonly MULTIPOLYGON_SYMBOL = 353;
    public static readonly MUTEX_SYMBOL = 354;
    public static readonly MYSQL_ERRNO_SYMBOL = 355;
    public static readonly NAMES_SYMBOL = 356;
    public static readonly NAME_SYMBOL = 357;
    public static readonly NATIONAL_SYMBOL = 358;
    public static readonly NATURAL_SYMBOL = 359;
    public static readonly NCHAR_STRING_SYMBOL = 360;
    public static readonly NCHAR_SYMBOL = 361;
    public static readonly NDB_SYMBOL = 362;
    public static readonly NDBCLUSTER_SYMBOL = 363;
    public static readonly NEG_SYMBOL = 364;
    public static readonly NEVER_SYMBOL = 365;
    public static readonly NEW_SYMBOL = 366;
    public static readonly NEXT_SYMBOL = 367;
    public static readonly NODEGROUP_SYMBOL = 368;
    public static readonly NONE_SYMBOL = 369;
    public static readonly NONBLOCKING_SYMBOL = 370;
    public static readonly NOT_SYMBOL = 371;
    public static readonly NOW_SYMBOL = 372;
    public static readonly NO_SYMBOL = 373;
    public static readonly NO_WAIT_SYMBOL = 374;
    public static readonly NO_WRITE_TO_BINLOG_SYMBOL = 375;
    public static readonly NULL_SYMBOL = 376;
    public static readonly NUMBER_SYMBOL = 377;
    public static readonly NUMERIC_SYMBOL = 378;
    public static readonly NVARCHAR_SYMBOL = 379;
    public static readonly OFFLINE_SYMBOL = 380;
    public static readonly OFFSET_SYMBOL = 381;
    public static readonly OLD_PASSWORD_SYMBOL = 382;
    public static readonly ON_SYMBOL = 383;
    public static readonly ONE_SYMBOL = 384;
    public static readonly ONLINE_SYMBOL = 385;
    public static readonly ONLY_SYMBOL = 386;
    public static readonly OPEN_SYMBOL = 387;
    public static readonly OPTIMIZE_SYMBOL = 388;
    public static readonly OPTIMIZER_COSTS_SYMBOL = 389;
    public static readonly OPTIONS_SYMBOL = 390;
    public static readonly OPTION_SYMBOL = 391;
    public static readonly OPTIONALLY_SYMBOL = 392;
    public static readonly ORDER_SYMBOL = 393;
    public static readonly OR_SYMBOL = 394;
    public static readonly OUTER_SYMBOL = 395;
    public static readonly OUTFILE_SYMBOL = 396;
    public static readonly OUT_SYMBOL = 397;
    public static readonly OWNER_SYMBOL = 398;
    public static readonly PACK_KEYS_SYMBOL = 399;
    public static readonly PAGE_SYMBOL = 400;
    public static readonly PARSER_SYMBOL = 401;
    public static readonly PARTIAL_SYMBOL = 402;
    public static readonly PARTITIONING_SYMBOL = 403;
    public static readonly PARTITIONS_SYMBOL = 404;
    public static readonly PARTITION_SYMBOL = 405;
    public static readonly PASSWORD_SYMBOL = 406;
    public static readonly PHASE_SYMBOL = 407;
    public static readonly PLUGINS_SYMBOL = 408;
    public static readonly PLUGIN_DIR_SYMBOL = 409;
    public static readonly PLUGIN_SYMBOL = 410;
    public static readonly POINT_SYMBOL = 411;
    public static readonly POLYGON_SYMBOL = 412;
    public static readonly PORT_SYMBOL = 413;
    public static readonly POSITION_SYMBOL = 414;
    public static readonly PRECEDES_SYMBOL = 415;
    public static readonly PRECISION_SYMBOL = 416;
    public static readonly PREPARE_SYMBOL = 417;
    public static readonly PRESERVE_SYMBOL = 418;
    public static readonly PREV_SYMBOL = 419;
    public static readonly PRIMARY_SYMBOL = 420;
    public static readonly PRIVILEGES_SYMBOL = 421;
    public static readonly PROCEDURE_SYMBOL = 422;
    public static readonly PROCESS_SYMBOL = 423;
    public static readonly PROCESSLIST_SYMBOL = 424;
    public static readonly PROFILE_SYMBOL = 425;
    public static readonly PROFILES_SYMBOL = 426;
    public static readonly PROXY_SYMBOL = 427;
    public static readonly PURGE_SYMBOL = 428;
    public static readonly QUARTER_SYMBOL = 429;
    public static readonly QUERY_SYMBOL = 430;
    public static readonly QUICK_SYMBOL = 431;
    public static readonly RANGE_SYMBOL = 432;
    public static readonly READS_SYMBOL = 433;
    public static readonly READ_ONLY_SYMBOL = 434;
    public static readonly READ_SYMBOL = 435;
    public static readonly READ_WRITE_SYMBOL = 436;
    public static readonly REAL_SYMBOL = 437;
    public static readonly REBUILD_SYMBOL = 438;
    public static readonly RECOVER_SYMBOL = 439;
    public static readonly REDOFILE_SYMBOL = 440;
    public static readonly REDO_BUFFER_SIZE_SYMBOL = 441;
    public static readonly REDUNDANT_SYMBOL = 442;
    public static readonly REFERENCES_SYMBOL = 443;
    public static readonly REGEXP_SYMBOL = 444;
    public static readonly RELAY_SYMBOL = 445;
    public static readonly RELAYLOG_SYMBOL = 446;
    public static readonly RELAY_LOG_FILE_SYMBOL = 447;
    public static readonly RELAY_LOG_POS_SYMBOL = 448;
    public static readonly RELAY_THREAD_SYMBOL = 449;
    public static readonly RELEASE_SYMBOL = 450;
    public static readonly RELOAD_SYMBOL = 451;
    public static readonly REMOVE_SYMBOL = 452;
    public static readonly RENAME_SYMBOL = 453;
    public static readonly REORGANIZE_SYMBOL = 454;
    public static readonly REPAIR_SYMBOL = 455;
    public static readonly REPEATABLE_SYMBOL = 456;
    public static readonly REPEAT_SYMBOL = 457;
    public static readonly REPLACE_SYMBOL = 458;
    public static readonly REPLICATION_SYMBOL = 459;
    public static readonly REPLICATE_DO_DB_SYMBOL = 460;
    public static readonly REPLICATE_IGNORE_DB_SYMBOL = 461;
    public static readonly REPLICATE_DO_TABLE_SYMBOL = 462;
    public static readonly REPLICATE_IGNORE_TABLE_SYMBOL = 463;
    public static readonly REPLICATE_WILD_DO_TABLE_SYMBOL = 464;
    public static readonly REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 465;
    public static readonly REPLICATE_REWRITE_DB_SYMBOL = 466;
    public static readonly REQUIRE_SYMBOL = 467;
    public static readonly RESET_SYMBOL = 468;
    public static readonly RESIGNAL_SYMBOL = 469;
    public static readonly RESTORE_SYMBOL = 470;
    public static readonly RESTRICT_SYMBOL = 471;
    public static readonly RESUME_SYMBOL = 472;
    public static readonly RETURNED_SQLSTATE_SYMBOL = 473;
    public static readonly RETURNS_SYMBOL = 474;
    public static readonly RETURN_SYMBOL = 475;
    public static readonly REVERSE_SYMBOL = 476;
    public static readonly REVOKE_SYMBOL = 477;
    public static readonly RIGHT_SYMBOL = 478;
    public static readonly RLIKE_SYMBOL = 479;
    public static readonly ROLLBACK_SYMBOL = 480;
    public static readonly ROLLUP_SYMBOL = 481;
    public static readonly ROTATE_SYMBOL = 482;
    public static readonly ROUTINE_SYMBOL = 483;
    public static readonly ROWS_SYMBOL = 484;
    public static readonly ROW_COUNT_SYMBOL = 485;
    public static readonly ROW_FORMAT_SYMBOL = 486;
    public static readonly ROW_SYMBOL = 487;
    public static readonly RTREE_SYMBOL = 488;
    public static readonly SAVEPOINT_SYMBOL = 489;
    public static readonly SCHEDULE_SYMBOL = 490;
    public static readonly SCHEMA_SYMBOL = 491;
    public static readonly SCHEMA_NAME_SYMBOL = 492;
    public static readonly SCHEMAS_SYMBOL = 493;
    public static readonly SECOND_MICROSECOND_SYMBOL = 494;
    public static readonly SECOND_SYMBOL = 495;
    public static readonly SECURITY_SYMBOL = 496;
    public static readonly SELECT_SYMBOL = 497;
    public static readonly SENSITIVE_SYMBOL = 498;
    public static readonly SEPARATOR_SYMBOL = 499;
    public static readonly SERIALIZABLE_SYMBOL = 500;
    public static readonly SERIAL_SYMBOL = 501;
    public static readonly SESSION_SYMBOL = 502;
    public static readonly SERVER_SYMBOL = 503;
    public static readonly SERVER_OPTIONS_SYMBOL = 504;
    public static readonly SESSION_USER_SYMBOL = 505;
    public static readonly SET_SYMBOL = 506;
    public static readonly SET_VAR_SYMBOL = 507;
    public static readonly SHARE_SYMBOL = 508;
    public static readonly SHOW_SYMBOL = 509;
    public static readonly SHUTDOWN_SYMBOL = 510;
    public static readonly SIGNAL_SYMBOL = 511;
    public static readonly SIGNED_SYMBOL = 512;
    public static readonly SIMPLE_SYMBOL = 513;
    public static readonly SLAVE_SYMBOL = 514;
    public static readonly SLOW_SYMBOL = 515;
    public static readonly SMALLINT_SYMBOL = 516;
    public static readonly SNAPSHOT_SYMBOL = 517;
    public static readonly SOME_SYMBOL = 518;
    public static readonly SOCKET_SYMBOL = 519;
    public static readonly SONAME_SYMBOL = 520;
    public static readonly SOUNDS_SYMBOL = 521;
    public static readonly SOURCE_SYMBOL = 522;
    public static readonly SPATIAL_SYMBOL = 523;
    public static readonly SPECIFIC_SYMBOL = 524;
    public static readonly SQLEXCEPTION_SYMBOL = 525;
    public static readonly SQLSTATE_SYMBOL = 526;
    public static readonly SQLWARNING_SYMBOL = 527;
    public static readonly SQL_AFTER_GTIDS_SYMBOL = 528;
    public static readonly SQL_AFTER_MTS_GAPS_SYMBOL = 529;
    public static readonly SQL_BEFORE_GTIDS_SYMBOL = 530;
    public static readonly SQL_BIG_RESULT_SYMBOL = 531;
    public static readonly SQL_BUFFER_RESULT_SYMBOL = 532;
    public static readonly SQL_CACHE_SYMBOL = 533;
    public static readonly SQL_CALC_FOUND_ROWS_SYMBOL = 534;
    public static readonly SQL_NO_CACHE_SYMBOL = 535;
    public static readonly SQL_SMALL_RESULT_SYMBOL = 536;
    public static readonly SQL_SYMBOL = 537;
    public static readonly SQL_THREAD_SYMBOL = 538;
    public static readonly SSL_SYMBOL = 539;
    public static readonly STACKED_SYMBOL = 540;
    public static readonly STARTING_SYMBOL = 541;
    public static readonly STARTS_SYMBOL = 542;
    public static readonly START_SYMBOL = 543;
    public static readonly STATS_AUTO_RECALC_SYMBOL = 544;
    public static readonly STATS_PERSISTENT_SYMBOL = 545;
    public static readonly STATS_SAMPLE_PAGES_SYMBOL = 546;
    public static readonly STATUS_SYMBOL = 547;
    public static readonly STDDEV_SAMP_SYMBOL = 548;
    public static readonly STDDEV_SYMBOL = 549;
    public static readonly STDDEV_POP_SYMBOL = 550;
    public static readonly STD_SYMBOL = 551;
    public static readonly STOP_SYMBOL = 552;
    public static readonly STORAGE_SYMBOL = 553;
    public static readonly STORED_SYMBOL = 554;
    public static readonly STRAIGHT_JOIN_SYMBOL = 555;
    public static readonly STRING_SYMBOL = 556;
    public static readonly SUBCLASS_ORIGIN_SYMBOL = 557;
    public static readonly SUBDATE_SYMBOL = 558;
    public static readonly SUBJECT_SYMBOL = 559;
    public static readonly SUBPARTITIONS_SYMBOL = 560;
    public static readonly SUBPARTITION_SYMBOL = 561;
    public static readonly SUBSTR_SYMBOL = 562;
    public static readonly SUBSTRING_SYMBOL = 563;
    public static readonly SUM_SYMBOL = 564;
    public static readonly SUPER_SYMBOL = 565;
    public static readonly SUSPEND_SYMBOL = 566;
    public static readonly SWAPS_SYMBOL = 567;
    public static readonly SWITCHES_SYMBOL = 568;
    public static readonly SYSDATE_SYMBOL = 569;
    public static readonly SYSTEM_USER_SYMBOL = 570;
    public static readonly TABLES_SYMBOL = 571;
    public static readonly TABLESPACE_SYMBOL = 572;
    public static readonly TABLE_REF_PRIORITY_SYMBOL = 573;
    public static readonly TABLE_SYMBOL = 574;
    public static readonly TABLE_CHECKSUM_SYMBOL = 575;
    public static readonly TABLE_NAME_SYMBOL = 576;
    public static readonly TEMPORARY_SYMBOL = 577;
    public static readonly TEMPTABLE_SYMBOL = 578;
    public static readonly TERMINATED_SYMBOL = 579;
    public static readonly TEXT_SYMBOL = 580;
    public static readonly THAN_SYMBOL = 581;
    public static readonly THEN_SYMBOL = 582;
    public static readonly TIMESTAMP_SYMBOL = 583;
    public static readonly TIMESTAMP_ADD_SYMBOL = 584;
    public static readonly TIMESTAMP_DIFF_SYMBOL = 585;
    public static readonly TIME_SYMBOL = 586;
    public static readonly TINYBLOB_SYMBOL = 587;
    public static readonly TINYINT_SYMBOL = 588;
    public static readonly TINYTEXT_SYMBOL = 589;
    public static readonly TO_SYMBOL = 590;
    public static readonly TRAILING_SYMBOL = 591;
    public static readonly TRANSACTION_SYMBOL = 592;
    public static readonly TRIGGERS_SYMBOL = 593;
    public static readonly TRIGGER_SYMBOL = 594;
    public static readonly TRIM_SYMBOL = 595;
    public static readonly TRUE_SYMBOL = 596;
    public static readonly TRUNCATE_SYMBOL = 597;
    public static readonly TYPES_SYMBOL = 598;
    public static readonly TYPE_SYMBOL = 599;
    public static readonly UDF_RETURNS_SYMBOL = 600;
    public static readonly UNCOMMITTED_SYMBOL = 601;
    public static readonly UNDEFINED_SYMBOL = 602;
    public static readonly UNDOFILE_SYMBOL = 603;
    public static readonly UNDO_BUFFER_SIZE_SYMBOL = 604;
    public static readonly UNDO_SYMBOL = 605;
    public static readonly UNICODE_SYMBOL = 606;
    public static readonly UNINSTALL_SYMBOL = 607;
    public static readonly UNION_SYMBOL = 608;
    public static readonly UNIQUE_SYMBOL = 609;
    public static readonly UNKNOWN_SYMBOL = 610;
    public static readonly UNLOCK_SYMBOL = 611;
    public static readonly UNSIGNED_SYMBOL = 612;
    public static readonly UNTIL_SYMBOL = 613;
    public static readonly UPDATE_SYMBOL = 614;
    public static readonly UPGRADE_SYMBOL = 615;
    public static readonly USAGE_SYMBOL = 616;
    public static readonly USER_RESOURCES_SYMBOL = 617;
    public static readonly USER_SYMBOL = 618;
    public static readonly USE_FRM_SYMBOL = 619;
    public static readonly USE_SYMBOL = 620;
    public static readonly USING_SYMBOL = 621;
    public static readonly UTC_DATE_SYMBOL = 622;
    public static readonly UTC_TIMESTAMP_SYMBOL = 623;
    public static readonly UTC_TIME_SYMBOL = 624;
    public static readonly VALIDATION_SYMBOL = 625;
    public static readonly VALUES_SYMBOL = 626;
    public static readonly VALUE_SYMBOL = 627;
    public static readonly VARBINARY_SYMBOL = 628;
    public static readonly VARCHAR_SYMBOL = 629;
    public static readonly VARCHARACTER_SYMBOL = 630;
    public static readonly VARIABLES_SYMBOL = 631;
    public static readonly VARIANCE_SYMBOL = 632;
    public static readonly VARYING_SYMBOL = 633;
    public static readonly VAR_POP_SYMBOL = 634;
    public static readonly VAR_SAMP_SYMBOL = 635;
    public static readonly VIEW_SYMBOL = 636;
    public static readonly VIRTUAL_SYMBOL = 637;
    public static readonly WAIT_SYMBOL = 638;
    public static readonly WARNINGS_SYMBOL = 639;
    public static readonly WEEK_SYMBOL = 640;
    public static readonly WEIGHT_STRING_SYMBOL = 641;
    public static readonly WHEN_SYMBOL = 642;
    public static readonly WHERE_SYMBOL = 643;
    public static readonly WHILE_SYMBOL = 644;
    public static readonly WITH_SYMBOL = 645;
    public static readonly WITHOUT_SYMBOL = 646;
    public static readonly WORK_SYMBOL = 647;
    public static readonly WRAPPER_SYMBOL = 648;
    public static readonly WRITE_SYMBOL = 649;
    public static readonly X509_SYMBOL = 650;
    public static readonly XA_SYMBOL = 651;
    public static readonly XID_SYMBOL = 652;
    public static readonly XML_SYMBOL = 653;
    public static readonly XOR_SYMBOL = 654;
    public static readonly YEAR_MONTH_SYMBOL = 655;
    public static readonly YEAR_SYMBOL = 656;
    public static readonly ZEROFILL_SYMBOL = 657;
    public static readonly PERSIST_SYMBOL = 658;
    public static readonly ROLE_SYMBOL = 659;
    public static readonly ADMIN_SYMBOL = 660;
    public static readonly INVISIBLE_SYMBOL = 661;
    public static readonly VISIBLE_SYMBOL = 662;
    public static readonly EXCEPT_SYMBOL = 663;
    public static readonly COMPONENT_SYMBOL = 664;
    public static readonly RECURSIVE_SYMBOL = 665;
    public static readonly JSON_OBJECTAGG_SYMBOL = 666;
    public static readonly JSON_ARRAYAGG_SYMBOL = 667;
    public static readonly OF_SYMBOL = 668;
    public static readonly SKIP_SYMBOL = 669;
    public static readonly LOCKED_SYMBOL = 670;
    public static readonly NOWAIT_SYMBOL = 671;
    public static readonly GROUPING_SYMBOL = 672;
    public static readonly PERSIST_ONLY_SYMBOL = 673;
    public static readonly HISTOGRAM_SYMBOL = 674;
    public static readonly BUCKETS_SYMBOL = 675;
    public static readonly REMOTE_SYMBOL = 676;
    public static readonly CLONE_SYMBOL = 677;
    public static readonly CUME_DIST_SYMBOL = 678;
    public static readonly DENSE_RANK_SYMBOL = 679;
    public static readonly EXCLUDE_SYMBOL = 680;
    public static readonly FIRST_VALUE_SYMBOL = 681;
    public static readonly FOLLOWING_SYMBOL = 682;
    public static readonly GROUPS_SYMBOL = 683;
    public static readonly LAG_SYMBOL = 684;
    public static readonly LAST_VALUE_SYMBOL = 685;
    public static readonly LEAD_SYMBOL = 686;
    public static readonly NTH_VALUE_SYMBOL = 687;
    public static readonly NTILE_SYMBOL = 688;
    public static readonly NULLS_SYMBOL = 689;
    public static readonly OTHERS_SYMBOL = 690;
    public static readonly OVER_SYMBOL = 691;
    public static readonly PERCENT_RANK_SYMBOL = 692;
    public static readonly PRECEDING_SYMBOL = 693;
    public static readonly RANK_SYMBOL = 694;
    public static readonly RESPECT_SYMBOL = 695;
    public static readonly ROW_NUMBER_SYMBOL = 696;
    public static readonly TIES_SYMBOL = 697;
    public static readonly UNBOUNDED_SYMBOL = 698;
    public static readonly WINDOW_SYMBOL = 699;
    public static readonly EMPTY_SYMBOL = 700;
    public static readonly JSON_TABLE_SYMBOL = 701;
    public static readonly NESTED_SYMBOL = 702;
    public static readonly ORDINALITY_SYMBOL = 703;
    public static readonly PATH_SYMBOL = 704;
    public static readonly HISTORY_SYMBOL = 705;
    public static readonly REUSE_SYMBOL = 706;
    public static readonly SRID_SYMBOL = 707;
    public static readonly THREAD_PRIORITY_SYMBOL = 708;
    public static readonly RESOURCE_SYMBOL = 709;
    public static readonly SYSTEM_SYMBOL = 710;
    public static readonly VCPU_SYMBOL = 711;
    public static readonly MASTER_PUBLIC_KEY_PATH_SYMBOL = 712;
    public static readonly GET_MASTER_PUBLIC_KEY_SYMBOL = 713;
    public static readonly RESTART_SYMBOL = 714;
    public static readonly DEFINITION_SYMBOL = 715;
    public static readonly DESCRIPTION_SYMBOL = 716;
    public static readonly ORGANIZATION_SYMBOL = 717;
    public static readonly REFERENCE_SYMBOL = 718;
    public static readonly OPTIONAL_SYMBOL = 719;
    public static readonly SECONDARY_SYMBOL = 720;
    public static readonly SECONDARY_ENGINE_SYMBOL = 721;
    public static readonly SECONDARY_LOAD_SYMBOL = 722;
    public static readonly SECONDARY_UNLOAD_SYMBOL = 723;
    public static readonly ACTIVE_SYMBOL = 724;
    public static readonly INACTIVE_SYMBOL = 725;
    public static readonly LATERAL_SYMBOL = 726;
    public static readonly RETAIN_SYMBOL = 727;
    public static readonly OLD_SYMBOL = 728;
    public static readonly NETWORK_NAMESPACE_SYMBOL = 729;
    public static readonly ENFORCED_SYMBOL = 730;
    public static readonly ARRAY_SYMBOL = 731;
    public static readonly OJ_SYMBOL = 732;
    public static readonly MEMBER_SYMBOL = 733;
    public static readonly RANDOM_SYMBOL = 734;
    public static readonly MASTER_COMPRESSION_ALGORITHM_SYMBOL = 735;
    public static readonly MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 736;
    public static readonly PRIVILEGE_CHECKS_USER_SYMBOL = 737;
    public static readonly MASTER_TLS_CIPHERSUITES_SYMBOL = 738;
    public static readonly REQUIRE_ROW_FORMAT_SYMBOL = 739;
    public static readonly PASSWORD_LOCK_TIME_SYMBOL = 740;
    public static readonly FAILED_LOGIN_ATTEMPTS_SYMBOL = 741;
    public static readonly REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL = 742;
    public static readonly STREAM_SYMBOL = 743;
    public static readonly OFF_SYMBOL = 744;
    public static readonly NOT2_SYMBOL = 745;
    public static readonly CONCAT_PIPES_SYMBOL = 746;
    public static readonly INT_NUMBER = 747;
    public static readonly LONG_NUMBER = 748;
    public static readonly ULONGLONG_NUMBER = 749;
    public static readonly EQUAL_OPERATOR = 750;
    public static readonly ASSIGN_OPERATOR = 751;
    public static readonly NULL_SAFE_EQUAL_OPERATOR = 752;
    public static readonly GREATER_OR_EQUAL_OPERATOR = 753;
    public static readonly GREATER_THAN_OPERATOR = 754;
    public static readonly LESS_OR_EQUAL_OPERATOR = 755;
    public static readonly LESS_THAN_OPERATOR = 756;
    public static readonly NOT_EQUAL_OPERATOR = 757;
    public static readonly PLUS_OPERATOR = 758;
    public static readonly MINUS_OPERATOR = 759;
    public static readonly MULT_OPERATOR = 760;
    public static readonly DIV_OPERATOR = 761;
    public static readonly MOD_OPERATOR = 762;
    public static readonly LOGICAL_NOT_OPERATOR = 763;
    public static readonly BITWISE_NOT_OPERATOR = 764;
    public static readonly SHIFT_LEFT_OPERATOR = 765;
    public static readonly SHIFT_RIGHT_OPERATOR = 766;
    public static readonly LOGICAL_AND_OPERATOR = 767;
    public static readonly BITWISE_AND_OPERATOR = 768;
    public static readonly BITWISE_XOR_OPERATOR = 769;
    public static readonly LOGICAL_OR_OPERATOR = 770;
    public static readonly BITWISE_OR_OPERATOR = 771;
    public static readonly DOT_SYMBOL = 772;
    public static readonly COMMA_SYMBOL = 773;
    public static readonly SEMICOLON_SYMBOL = 774;
    public static readonly COLON_SYMBOL = 775;
    public static readonly OPEN_PAR_SYMBOL = 776;
    public static readonly CLOSE_PAR_SYMBOL = 777;
    public static readonly OPEN_CURLY_SYMBOL = 778;
    public static readonly CLOSE_CURLY_SYMBOL = 779;
    public static readonly UNDERLINE_SYMBOL = 780;
    public static readonly JSON_SEPARATOR_SYMBOL = 781;
    public static readonly JSON_UNQUOTED_SEPARATOR_SYMBOL = 782;
    public static readonly AT_SIGN_SYMBOL = 783;
    public static readonly AT_TEXT_SUFFIX = 784;
    public static readonly AT_AT_SIGN_SYMBOL = 785;
    public static readonly NULL2_SYMBOL = 786;
    public static readonly PARAM_MARKER = 787;
    public static readonly HEX_NUMBER = 788;
    public static readonly BIN_NUMBER = 789;
    public static readonly DECIMAL_NUMBER = 790;
    public static readonly FLOAT_NUMBER = 791;
    public static readonly TIMESTAMPADD_SYMBOL = 792;
    public static readonly TIMESTAMPDIFF_SYMBOL = 793;
    public static readonly RETURNING_SYMBOL = 794;
    public static readonly JSON_VALUE_SYMBOL = 795;
    public static readonly TLS_SYMBOL = 796;
    public static readonly ATTRIBUTE_SYMBOL = 797;
    public static readonly ENGINE_ATTRIBUTE_SYMBOL = 798;
    public static readonly SECONDARY_ENGINE_ATTRIBUTE_SYMBOL = 799;
    public static readonly SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL = 800;
    public static readonly ZONE_SYMBOL = 801;
    public static readonly GRAMMAR_SELECTOR_DERIVED_EXPR = 802;
    public static readonly REPLICA_SYMBOL = 803;
    public static readonly REPLICAS_SYMBOL = 804;
    public static readonly ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL = 805;
    public static readonly GET_SOURCE_PUBLIC_KEY_SYMBOL = 806;
    public static readonly SOURCE_AUTO_POSITION_SYMBOL = 807;
    public static readonly SOURCE_BIND_SYMBOL = 808;
    public static readonly SOURCE_COMPRESSION_ALGORITHM_SYMBOL = 809;
    public static readonly SOURCE_CONNECT_RETRY_SYMBOL = 810;
    public static readonly SOURCE_DELAY_SYMBOL = 811;
    public static readonly SOURCE_HEARTBEAT_PERIOD_SYMBOL = 812;
    public static readonly SOURCE_HOST_SYMBOL = 813;
    public static readonly SOURCE_LOG_FILE_SYMBOL = 814;
    public static readonly SOURCE_LOG_POS_SYMBOL = 815;
    public static readonly SOURCE_PASSWORD_SYMBOL = 816;
    public static readonly SOURCE_PORT_SYMBOL = 817;
    public static readonly SOURCE_PUBLIC_KEY_PATH_SYMBOL = 818;
    public static readonly SOURCE_RETRY_COUNT_SYMBOL = 819;
    public static readonly SOURCE_SSL_SYMBOL = 820;
    public static readonly SOURCE_SSL_CA_SYMBOL = 821;
    public static readonly SOURCE_SSL_CAPATH_SYMBOL = 822;
    public static readonly SOURCE_SSL_CERT_SYMBOL = 823;
    public static readonly SOURCE_SSL_CIPHER_SYMBOL = 824;
    public static readonly SOURCE_SSL_CRL_SYMBOL = 825;
    public static readonly SOURCE_SSL_CRLPATH_SYMBOL = 826;
    public static readonly SOURCE_SSL_KEY_SYMBOL = 827;
    public static readonly SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL = 828;
    public static readonly SOURCE_TLS_CIPHERSUITES_SYMBOL = 829;
    public static readonly SOURCE_TLS_VERSION_SYMBOL = 830;
    public static readonly SOURCE_USER_SYMBOL = 831;
    public static readonly SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL = 832;
    public static readonly ST_COLLECT_SYMBOL = 833;
    public static readonly KEYRING_SYMBOL = 834;
    public static readonly AUTHENTICATION_SYMBOL = 835;
    public static readonly FACTOR_SYMBOL = 836;
    public static readonly FINISH_SYMBOL = 837;
    public static readonly INITIATE_SYMBOL = 838;
    public static readonly REGISTRATION_SYMBOL = 839;
    public static readonly UNREGISTER_SYMBOL = 840;
    public static readonly INITIAL_SYMBOL = 841;
    public static readonly CHALLENGE_RESPONSE_SYMBOL = 842;
    public static readonly GTID_ONLY_SYMBOL = 843;
    public static readonly INTERSECT_SYMBOL = 844;
    public static readonly WHITESPACE = 845;
    public static readonly INVALID_INPUT = 846;
    public static readonly UNDERSCORE_CHARSET = 847;
    public static readonly IDENTIFIER = 848;
    public static readonly NCHAR_TEXT = 849;
    public static readonly BACK_TICK_QUOTED_ID = 850;
    public static readonly DOUBLE_QUOTED_TEXT = 851;
    public static readonly SINGLE_QUOTED_TEXT = 852;
    public static readonly VERSION_COMMENT_START = 853;
    public static readonly MYSQL_COMMENT_START = 854;
    public static readonly VERSION_COMMENT_END = 855;
    public static readonly BLOCK_COMMENT = 856;
    public static readonly INVALID_BLOCK_COMMENT = 857;
    public static readonly POUND_COMMENT = 858;
    public static readonly DASHDASH_COMMENT = 859;
    public static readonly NOT_EQUAL2_OPERATOR = 860;
    public static readonly EOF = Token.EOF;
    public static readonly RULE_query = 0;
    public static readonly RULE_simpleStatement = 1;
    public static readonly RULE_alterStatement = 2;
    public static readonly RULE_alterDatabase = 3;
    public static readonly RULE_alterDatabaseOption = 4;
    public static readonly RULE_alterEvent = 5;
    public static readonly RULE_alterLogfileGroup = 6;
    public static readonly RULE_alterLogfileGroupOptions = 7;
    public static readonly RULE_alterLogfileGroupOption = 8;
    public static readonly RULE_alterServer = 9;
    public static readonly RULE_alterTable = 10;
    public static readonly RULE_alterTableActions = 11;
    public static readonly RULE_alterCommandList = 12;
    public static readonly RULE_alterCommandsModifierList = 13;
    public static readonly RULE_standaloneAlterCommands = 14;
    public static readonly RULE_alterPartition = 15;
    public static readonly RULE_alterList = 16;
    public static readonly RULE_alterCommandsModifier = 17;
    public static readonly RULE_alterListItem = 18;
    public static readonly RULE_place = 19;
    public static readonly RULE_restrict = 20;
    public static readonly RULE_alterOrderList = 21;
    public static readonly RULE_alterAlgorithmOption = 22;
    public static readonly RULE_alterLockOption = 23;
    public static readonly RULE_indexLockAndAlgorithm = 24;
    public static readonly RULE_withValidation = 25;
    public static readonly RULE_removePartitioning = 26;
    public static readonly RULE_allOrPartitionNameList = 27;
    public static readonly RULE_alterTablespace = 28;
    public static readonly RULE_alterUndoTablespace = 29;
    public static readonly RULE_undoTableSpaceOptions = 30;
    public static readonly RULE_undoTableSpaceOption = 31;
    public static readonly RULE_alterTablespaceOptions = 32;
    public static readonly RULE_alterTablespaceOption = 33;
    public static readonly RULE_changeTablespaceOption = 34;
    public static readonly RULE_alterView = 35;
    public static readonly RULE_viewTail = 36;
    public static readonly RULE_viewQueryBlock = 37;
    public static readonly RULE_viewCheckOption = 38;
    public static readonly RULE_alterInstanceStatement = 39;
    public static readonly RULE_createStatement = 40;
    public static readonly RULE_createDatabase = 41;
    public static readonly RULE_createDatabaseOption = 42;
    public static readonly RULE_createTable = 43;
    public static readonly RULE_tableElementList = 44;
    public static readonly RULE_tableElement = 45;
    public static readonly RULE_duplicateAsQe = 46;
    public static readonly RULE_asCreateQueryExpression = 47;
    public static readonly RULE_queryExpressionOrParens = 48;
    public static readonly RULE_queryExpressionWithOptLockingClauses = 49;
    public static readonly RULE_createRoutine = 50;
    public static readonly RULE_createProcedure = 51;
    public static readonly RULE_createFunction = 52;
    public static readonly RULE_createUdf = 53;
    public static readonly RULE_routineCreateOption = 54;
    public static readonly RULE_routineAlterOptions = 55;
    public static readonly RULE_routineOption = 56;
    public static readonly RULE_createIndex = 57;
    public static readonly RULE_indexNameAndType = 58;
    public static readonly RULE_createIndexTarget = 59;
    public static readonly RULE_createLogfileGroup = 60;
    public static readonly RULE_logfileGroupOptions = 61;
    public static readonly RULE_logfileGroupOption = 62;
    public static readonly RULE_createServer = 63;
    public static readonly RULE_serverOptions = 64;
    public static readonly RULE_serverOption = 65;
    public static readonly RULE_createTablespace = 66;
    public static readonly RULE_createUndoTablespace = 67;
    public static readonly RULE_tsDataFileName = 68;
    public static readonly RULE_tsDataFile = 69;
    public static readonly RULE_tablespaceOptions = 70;
    public static readonly RULE_tablespaceOption = 71;
    public static readonly RULE_tsOptionInitialSize = 72;
    public static readonly RULE_tsOptionUndoRedoBufferSize = 73;
    public static readonly RULE_tsOptionAutoextendSize = 74;
    public static readonly RULE_tsOptionMaxSize = 75;
    public static readonly RULE_tsOptionExtentSize = 76;
    public static readonly RULE_tsOptionNodegroup = 77;
    public static readonly RULE_tsOptionEngine = 78;
    public static readonly RULE_tsOptionWait = 79;
    public static readonly RULE_tsOptionComment = 80;
    public static readonly RULE_tsOptionFileblockSize = 81;
    public static readonly RULE_tsOptionEncryption = 82;
    public static readonly RULE_tsOptionEngineAttribute = 83;
    public static readonly RULE_createView = 84;
    public static readonly RULE_viewReplaceOrAlgorithm = 85;
    public static readonly RULE_viewAlgorithm = 86;
    public static readonly RULE_viewSuid = 87;
    public static readonly RULE_createTrigger = 88;
    public static readonly RULE_triggerFollowsPrecedesClause = 89;
    public static readonly RULE_createEvent = 90;
    public static readonly RULE_createRole = 91;
    public static readonly RULE_createSpatialReference = 92;
    public static readonly RULE_srsAttribute = 93;
    public static readonly RULE_dropStatement = 94;
    public static readonly RULE_dropDatabase = 95;
    public static readonly RULE_dropEvent = 96;
    public static readonly RULE_dropFunction = 97;
    public static readonly RULE_dropProcedure = 98;
    public static readonly RULE_dropIndex = 99;
    public static readonly RULE_dropLogfileGroup = 100;
    public static readonly RULE_dropLogfileGroupOption = 101;
    public static readonly RULE_dropServer = 102;
    public static readonly RULE_dropTable = 103;
    public static readonly RULE_dropTableSpace = 104;
    public static readonly RULE_dropTrigger = 105;
    public static readonly RULE_dropView = 106;
    public static readonly RULE_dropRole = 107;
    public static readonly RULE_dropSpatialReference = 108;
    public static readonly RULE_dropUndoTablespace = 109;
    public static readonly RULE_renameTableStatement = 110;
    public static readonly RULE_renamePair = 111;
    public static readonly RULE_truncateTableStatement = 112;
    public static readonly RULE_importStatement = 113;
    public static readonly RULE_callStatement = 114;
    public static readonly RULE_deleteStatement = 115;
    public static readonly RULE_partitionDelete = 116;
    public static readonly RULE_deleteStatementOption = 117;
    public static readonly RULE_doStatement = 118;
    public static readonly RULE_handlerStatement = 119;
    public static readonly RULE_handlerReadOrScan = 120;
    public static readonly RULE_insertStatement = 121;
    public static readonly RULE_insertLockOption = 122;
    public static readonly RULE_insertFromConstructor = 123;
    public static readonly RULE_fields = 124;
    public static readonly RULE_insertValues = 125;
    public static readonly RULE_insertQueryExpression = 126;
    public static readonly RULE_valueList = 127;
    public static readonly RULE_values = 128;
    public static readonly RULE_valuesReference = 129;
    public static readonly RULE_insertUpdateList = 130;
    public static readonly RULE_loadStatement = 131;
    public static readonly RULE_dataOrXml = 132;
    public static readonly RULE_xmlRowsIdentifiedBy = 133;
    public static readonly RULE_loadDataFileTail = 134;
    public static readonly RULE_loadDataFileTargetList = 135;
    public static readonly RULE_fieldOrVariableList = 136;
    public static readonly RULE_replaceStatement = 137;
    public static readonly RULE_selectStatement = 138;
    public static readonly RULE_selectStatementWithInto = 139;
    public static readonly RULE_queryExpression = 140;
    public static readonly RULE_queryExpressionBody = 141;
    public static readonly RULE_queryExpressionBodyNew = 142;
    public static readonly RULE_queryExpressionParens = 143;
    public static readonly RULE_queryPrimary = 144;
    public static readonly RULE_querySpecification = 145;
    public static readonly RULE_subquery = 146;
    public static readonly RULE_querySpecOption = 147;
    public static readonly RULE_limitClause = 148;
    public static readonly RULE_simpleLimitClause = 149;
    public static readonly RULE_limitOptions = 150;
    public static readonly RULE_limitOption = 151;
    public static readonly RULE_intoClause = 152;
    public static readonly RULE_procedureAnalyseClause = 153;
    public static readonly RULE_havingClause = 154;
    public static readonly RULE_windowClause = 155;
    public static readonly RULE_windowDefinition = 156;
    public static readonly RULE_windowSpec = 157;
    public static readonly RULE_windowSpecDetails = 158;
    public static readonly RULE_windowFrameClause = 159;
    public static readonly RULE_windowFrameUnits = 160;
    public static readonly RULE_windowFrameExtent = 161;
    public static readonly RULE_windowFrameStart = 162;
    public static readonly RULE_windowFrameBetween = 163;
    public static readonly RULE_windowFrameBound = 164;
    public static readonly RULE_windowFrameExclusion = 165;
    public static readonly RULE_withClause = 166;
    public static readonly RULE_commonTableExpression = 167;
    public static readonly RULE_groupByClause = 168;
    public static readonly RULE_olapOption = 169;
    public static readonly RULE_orderClause = 170;
    public static readonly RULE_direction = 171;
    public static readonly RULE_fromClause = 172;
    public static readonly RULE_tableReferenceList = 173;
    public static readonly RULE_tableValueConstructor = 174;
    public static readonly RULE_explicitTable = 175;
    public static readonly RULE_rowValueExplicit = 176;
    public static readonly RULE_selectOption = 177;
    public static readonly RULE_lockingClauseList = 178;
    public static readonly RULE_lockingClause = 179;
    public static readonly RULE_lockStrengh = 180;
    public static readonly RULE_lockedRowAction = 181;
    public static readonly RULE_selectItemList = 182;
    public static readonly RULE_selectItem = 183;
    public static readonly RULE_selectAlias = 184;
    public static readonly RULE_whereClause = 185;
    public static readonly RULE_tableReference = 186;
    public static readonly RULE_escapedTableReference = 187;
    public static readonly RULE_joinedTable = 188;
    public static readonly RULE_naturalJoinType = 189;
    public static readonly RULE_innerJoinType = 190;
    public static readonly RULE_outerJoinType = 191;
    public static readonly RULE_tableFactor = 192;
    public static readonly RULE_singleTable = 193;
    public static readonly RULE_singleTableParens = 194;
    public static readonly RULE_derivedTable = 195;
    public static readonly RULE_tableReferenceListParens = 196;
    public static readonly RULE_tableFunction = 197;
    public static readonly RULE_columnsClause = 198;
    public static readonly RULE_jtColumn = 199;
    public static readonly RULE_onEmptyOrError = 200;
    public static readonly RULE_onEmptyOrErrorJsonTable = 201;
    public static readonly RULE_onEmpty = 202;
    public static readonly RULE_onError = 203;
    public static readonly RULE_jsonOnResponse = 204;
    public static readonly RULE_unionOption = 205;
    public static readonly RULE_tableAlias = 206;
    public static readonly RULE_indexHintList = 207;
    public static readonly RULE_indexHint = 208;
    public static readonly RULE_indexHintType = 209;
    public static readonly RULE_keyOrIndex = 210;
    public static readonly RULE_constraintKeyType = 211;
    public static readonly RULE_indexHintClause = 212;
    public static readonly RULE_indexList = 213;
    public static readonly RULE_indexListElement = 214;
    public static readonly RULE_updateStatement = 215;
    public static readonly RULE_transactionOrLockingStatement = 216;
    public static readonly RULE_transactionStatement = 217;
    public static readonly RULE_beginWork = 218;
    public static readonly RULE_startTransactionOptionList = 219;
    public static readonly RULE_savepointStatement = 220;
    public static readonly RULE_lockStatement = 221;
    public static readonly RULE_lockItem = 222;
    public static readonly RULE_lockOption = 223;
    public static readonly RULE_xaStatement = 224;
    public static readonly RULE_xaConvert = 225;
    public static readonly RULE_xid = 226;
    public static readonly RULE_replicationStatement = 227;
    public static readonly RULE_resetOption = 228;
    public static readonly RULE_sourceResetOptions = 229;
    public static readonly RULE_replicationLoad = 230;
    public static readonly RULE_changeReplicationSource = 231;
    public static readonly RULE_changeSource = 232;
    public static readonly RULE_sourceDefinitions = 233;
    public static readonly RULE_sourceDefinition = 234;
    public static readonly RULE_changeReplicationSourceAutoPosition = 235;
    public static readonly RULE_changeReplicationSourceHost = 236;
    public static readonly RULE_changeReplicationSourceBind = 237;
    public static readonly RULE_changeReplicationSourceUser = 238;
    public static readonly RULE_changeReplicationSourcePassword = 239;
    public static readonly RULE_changeReplicationSourcePort = 240;
    public static readonly RULE_changeReplicationSourceConnectRetry = 241;
    public static readonly RULE_changeReplicationSourceRetryCount = 242;
    public static readonly RULE_changeReplicationSourceDelay = 243;
    public static readonly RULE_changeReplicationSourceSSL = 244;
    public static readonly RULE_changeReplicationSourceSSLCA = 245;
    public static readonly RULE_changeReplicationSourceSSLCApath = 246;
    public static readonly RULE_changeReplicationSourceSSLCipher = 247;
    public static readonly RULE_changeReplicationSourceSSLCLR = 248;
    public static readonly RULE_changeReplicationSourceSSLCLRpath = 249;
    public static readonly RULE_changeReplicationSourceSSLKey = 250;
    public static readonly RULE_changeReplicationSourceSSLVerifyServerCert = 251;
    public static readonly RULE_changeReplicationSourceTLSVersion = 252;
    public static readonly RULE_changeReplicationSourceTLSCiphersuites = 253;
    public static readonly RULE_changeReplicationSourceSSLCert = 254;
    public static readonly RULE_changeReplicationSourcePublicKey = 255;
    public static readonly RULE_changeReplicationSourceGetSourcePublicKey = 256;
    public static readonly RULE_changeReplicationSourceHeartbeatPeriod = 257;
    public static readonly RULE_changeReplicationSourceCompressionAlgorithm = 258;
    public static readonly RULE_changeReplicationSourceZstdCompressionLevel = 259;
    public static readonly RULE_privilegeCheckDef = 260;
    public static readonly RULE_tablePrimaryKeyCheckDef = 261;
    public static readonly RULE_assignGtidsToAnonymousTransactionsDefinition = 262;
    public static readonly RULE_sourceTlsCiphersuitesDef = 263;
    public static readonly RULE_sourceFileDef = 264;
    public static readonly RULE_sourceLogFile = 265;
    public static readonly RULE_sourceLogPos = 266;
    public static readonly RULE_serverIdList = 267;
    public static readonly RULE_changeReplication = 268;
    public static readonly RULE_filterDefinition = 269;
    public static readonly RULE_filterDbList = 270;
    public static readonly RULE_filterTableList = 271;
    public static readonly RULE_filterStringList = 272;
    public static readonly RULE_filterWildDbTableString = 273;
    public static readonly RULE_filterDbPairList = 274;
    public static readonly RULE_startReplicaStatement = 275;
    public static readonly RULE_stopReplicaStatement = 276;
    public static readonly RULE_replicaUntil = 277;
    public static readonly RULE_userOption = 278;
    public static readonly RULE_passwordOption = 279;
    public static readonly RULE_defaultAuthOption = 280;
    public static readonly RULE_pluginDirOption = 281;
    public static readonly RULE_replicaThreadOptions = 282;
    public static readonly RULE_replicaThreadOption = 283;
    public static readonly RULE_groupReplication = 284;
    public static readonly RULE_groupReplicationStartOptions = 285;
    public static readonly RULE_groupReplicationStartOption = 286;
    public static readonly RULE_groupReplicationUser = 287;
    public static readonly RULE_groupReplicationPassword = 288;
    public static readonly RULE_groupReplicationPluginAuth = 289;
    public static readonly RULE_replica = 290;
    public static readonly RULE_preparedStatement = 291;
    public static readonly RULE_executeStatement = 292;
    public static readonly RULE_executeVarList = 293;
    public static readonly RULE_cloneStatement = 294;
    public static readonly RULE_dataDirSSL = 295;
    public static readonly RULE_ssl = 296;
    public static readonly RULE_accountManagementStatement = 297;
    public static readonly RULE_alterUserStatement = 298;
    public static readonly RULE_alterUserList = 299;
    public static readonly RULE_alterUser = 300;
    public static readonly RULE_oldAlterUser = 301;
    public static readonly RULE_userFunction = 302;
    public static readonly RULE_createUserStatement = 303;
    public static readonly RULE_createUserTail = 304;
    public static readonly RULE_userAttributes = 305;
    public static readonly RULE_defaultRoleClause = 306;
    public static readonly RULE_requireClause = 307;
    public static readonly RULE_connectOptions = 308;
    public static readonly RULE_accountLockPasswordExpireOptions = 309;
    public static readonly RULE_userAttribute = 310;
    public static readonly RULE_dropUserStatement = 311;
    public static readonly RULE_grantStatement = 312;
    public static readonly RULE_grantTargetList = 313;
    public static readonly RULE_grantOptions = 314;
    public static readonly RULE_exceptRoleList = 315;
    public static readonly RULE_withRoles = 316;
    public static readonly RULE_grantAs = 317;
    public static readonly RULE_versionedRequireClause = 318;
    public static readonly RULE_renameUserStatement = 319;
    public static readonly RULE_revokeStatement = 320;
    public static readonly RULE_aclType = 321;
    public static readonly RULE_roleOrPrivilegesList = 322;
    public static readonly RULE_roleOrPrivilege = 323;
    public static readonly RULE_grantIdentifier = 324;
    public static readonly RULE_requireList = 325;
    public static readonly RULE_requireListElement = 326;
    public static readonly RULE_grantOption = 327;
    public static readonly RULE_setRoleStatement = 328;
    public static readonly RULE_roleList = 329;
    public static readonly RULE_role = 330;
    public static readonly RULE_tableAdministrationStatement = 331;
    public static readonly RULE_histogram = 332;
    public static readonly RULE_checkOption = 333;
    public static readonly RULE_repairType = 334;
    public static readonly RULE_installUninstallStatement = 335;
    public static readonly RULE_setStatement = 336;
    public static readonly RULE_startOptionValueList = 337;
    public static readonly RULE_transactionCharacteristics = 338;
    public static readonly RULE_transactionAccessMode = 339;
    public static readonly RULE_isolationLevel = 340;
    public static readonly RULE_optionValueListContinued = 341;
    public static readonly RULE_optionValueNoOptionType = 342;
    public static readonly RULE_optionValue = 343;
    public static readonly RULE_setSystemVariable = 344;
    public static readonly RULE_startOptionValueListFollowingOptionType = 345;
    public static readonly RULE_optionValueFollowingOptionType = 346;
    public static readonly RULE_setExprOrDefault = 347;
    public static readonly RULE_showDatabasesStatement = 348;
    public static readonly RULE_showTablesStatement = 349;
    public static readonly RULE_showTriggersStatement = 350;
    public static readonly RULE_showEventsStatement = 351;
    public static readonly RULE_showTableStatusStatement = 352;
    public static readonly RULE_showOpenTablesStatement = 353;
    public static readonly RULE_showPluginsStatement = 354;
    public static readonly RULE_showEngineLogsStatement = 355;
    public static readonly RULE_showEngineMutexStatement = 356;
    public static readonly RULE_showEngineStatusStatement = 357;
    public static readonly RULE_showColumnsStatement = 358;
    public static readonly RULE_showBinaryLogsStatement = 359;
    public static readonly RULE_showReplicasStatement = 360;
    public static readonly RULE_showBinlogEventsStatement = 361;
    public static readonly RULE_showRelaylogEventsStatement = 362;
    public static readonly RULE_showKeysStatement = 363;
    public static readonly RULE_showEnginesStatement = 364;
    public static readonly RULE_showCountWarningsStatement = 365;
    public static readonly RULE_showCountErrorsStatement = 366;
    public static readonly RULE_showWarningsStatement = 367;
    public static readonly RULE_showErrorsStatement = 368;
    public static readonly RULE_showProfilesStatement = 369;
    public static readonly RULE_showProfileStatement = 370;
    public static readonly RULE_showStatusStatement = 371;
    public static readonly RULE_showProcessListStatement = 372;
    public static readonly RULE_showVariablesStatement = 373;
    public static readonly RULE_showCharacterSetStatement = 374;
    public static readonly RULE_showCollationStatement = 375;
    public static readonly RULE_showPrivilegesStatement = 376;
    public static readonly RULE_showGrantsStatement = 377;
    public static readonly RULE_showCreateDatabaseStatement = 378;
    public static readonly RULE_showCreateTableStatement = 379;
    public static readonly RULE_showCreateViewStatement = 380;
    public static readonly RULE_showMasterStatusStatement = 381;
    public static readonly RULE_showReplicaStatusStatement = 382;
    public static readonly RULE_showCreateProcedureStatement = 383;
    public static readonly RULE_showCreateFunctionStatement = 384;
    public static readonly RULE_showCreateTriggerStatement = 385;
    public static readonly RULE_showCreateProcedureStatusStatement = 386;
    public static readonly RULE_showCreateFunctionStatusStatement = 387;
    public static readonly RULE_showCreateProcedureCodeStatement = 388;
    public static readonly RULE_showCreateFunctionCodeStatement = 389;
    public static readonly RULE_showCreateEventStatement = 390;
    public static readonly RULE_showCreateUserStatement = 391;
    public static readonly RULE_showCommandType = 392;
    public static readonly RULE_engineOrAll = 393;
    public static readonly RULE_fromOrIn = 394;
    public static readonly RULE_inDb = 395;
    public static readonly RULE_profileDefinitions = 396;
    public static readonly RULE_profileDefinition = 397;
    public static readonly RULE_otherAdministrativeStatement = 398;
    public static readonly RULE_keyCacheListOrParts = 399;
    public static readonly RULE_keyCacheList = 400;
    public static readonly RULE_assignToKeycache = 401;
    public static readonly RULE_assignToKeycachePartition = 402;
    public static readonly RULE_cacheKeyList = 403;
    public static readonly RULE_keyUsageElement = 404;
    public static readonly RULE_keyUsageList = 405;
    public static readonly RULE_flushOption = 406;
    public static readonly RULE_logType = 407;
    public static readonly RULE_flushTables = 408;
    public static readonly RULE_flushTablesOptions = 409;
    public static readonly RULE_preloadTail = 410;
    public static readonly RULE_preloadList = 411;
    public static readonly RULE_preloadKeys = 412;
    public static readonly RULE_adminPartition = 413;
    public static readonly RULE_resourceGroupManagement = 414;
    public static readonly RULE_createResourceGroup = 415;
    public static readonly RULE_resourceGroupVcpuList = 416;
    public static readonly RULE_vcpuNumOrRange = 417;
    public static readonly RULE_resourceGroupPriority = 418;
    public static readonly RULE_resourceGroupEnableDisable = 419;
    public static readonly RULE_alterResourceGroup = 420;
    public static readonly RULE_setResourceGroup = 421;
    public static readonly RULE_threadIdList = 422;
    public static readonly RULE_dropResourceGroup = 423;
    public static readonly RULE_utilityStatement = 424;
    public static readonly RULE_describeStatement = 425;
    public static readonly RULE_explainStatement = 426;
    public static readonly RULE_explainableStatement = 427;
    public static readonly RULE_helpCommand = 428;
    public static readonly RULE_useCommand = 429;
    public static readonly RULE_restartServer = 430;
    public static readonly RULE_expr = 431;
    public static readonly RULE_boolPri = 432;
    public static readonly RULE_compOp = 433;
    public static readonly RULE_predicate = 434;
    public static readonly RULE_predicateOperations = 435;
    public static readonly RULE_bitExpr = 436;
    public static readonly RULE_simpleExpr = 437;
    public static readonly RULE_arrayCast = 438;
    public static readonly RULE_jsonOperator = 439;
    public static readonly RULE_sumExpr = 440;
    public static readonly RULE_groupingOperation = 441;
    public static readonly RULE_windowFunctionCall = 442;
    public static readonly RULE_windowingClause = 443;
    public static readonly RULE_leadLagInfo = 444;
    public static readonly RULE_stableInteger = 445;
    public static readonly RULE_paramOrVar = 446;
    public static readonly RULE_nullTreatment = 447;
    public static readonly RULE_jsonFunction = 448;
    public static readonly RULE_inSumExpr = 449;
    public static readonly RULE_identListArg = 450;
    public static readonly RULE_identList = 451;
    public static readonly RULE_fulltextOptions = 452;
    public static readonly RULE_runtimeFunctionCall = 453;
    public static readonly RULE_returningType = 454;
    public static readonly RULE_geometryFunction = 455;
    public static readonly RULE_timeFunctionParameters = 456;
    public static readonly RULE_fractionalPrecision = 457;
    public static readonly RULE_weightStringLevels = 458;
    public static readonly RULE_weightStringLevelListItem = 459;
    public static readonly RULE_dateTimeTtype = 460;
    public static readonly RULE_trimFunction = 461;
    public static readonly RULE_substringFunction = 462;
    public static readonly RULE_functionCall = 463;
    public static readonly RULE_udfExprList = 464;
    public static readonly RULE_udfExpr = 465;
    public static readonly RULE_userVariable = 466;
    public static readonly RULE_inExpressionUserVariableAssignment = 467;
    public static readonly RULE_rvalueSystemOrUserVariable = 468;
    public static readonly RULE_lvalueVariable = 469;
    public static readonly RULE_rvalueSystemVariable = 470;
    public static readonly RULE_whenExpression = 471;
    public static readonly RULE_thenExpression = 472;
    public static readonly RULE_elseExpression = 473;
    public static readonly RULE_castType = 474;
    public static readonly RULE_exprList = 475;
    public static readonly RULE_charset = 476;
    public static readonly RULE_notRule = 477;
    public static readonly RULE_not2Rule = 478;
    public static readonly RULE_interval = 479;
    public static readonly RULE_intervalTimeStamp = 480;
    public static readonly RULE_exprListWithParentheses = 481;
    public static readonly RULE_exprWithParentheses = 482;
    public static readonly RULE_simpleExprWithParentheses = 483;
    public static readonly RULE_orderList = 484;
    public static readonly RULE_orderExpression = 485;
    public static readonly RULE_groupList = 486;
    public static readonly RULE_groupingExpression = 487;
    public static readonly RULE_channel = 488;
    public static readonly RULE_compoundStatement = 489;
    public static readonly RULE_returnStatement = 490;
    public static readonly RULE_ifStatement = 491;
    public static readonly RULE_ifBody = 492;
    public static readonly RULE_thenStatement = 493;
    public static readonly RULE_compoundStatementList = 494;
    public static readonly RULE_caseStatement = 495;
    public static readonly RULE_elseStatement = 496;
    public static readonly RULE_labeledBlock = 497;
    public static readonly RULE_unlabeledBlock = 498;
    public static readonly RULE_label = 499;
    public static readonly RULE_beginEndBlock = 500;
    public static readonly RULE_labeledControl = 501;
    public static readonly RULE_unlabeledControl = 502;
    public static readonly RULE_loopBlock = 503;
    public static readonly RULE_whileDoBlock = 504;
    public static readonly RULE_repeatUntilBlock = 505;
    public static readonly RULE_spDeclarations = 506;
    public static readonly RULE_spDeclaration = 507;
    public static readonly RULE_variableDeclaration = 508;
    public static readonly RULE_conditionDeclaration = 509;
    public static readonly RULE_spCondition = 510;
    public static readonly RULE_sqlstate = 511;
    public static readonly RULE_handlerDeclaration = 512;
    public static readonly RULE_handlerCondition = 513;
    public static readonly RULE_cursorDeclaration = 514;
    public static readonly RULE_iterateStatement = 515;
    public static readonly RULE_leaveStatement = 516;
    public static readonly RULE_getDiagnosticsStatement = 517;
    public static readonly RULE_signalAllowedExpr = 518;
    public static readonly RULE_statementInformationItem = 519;
    public static readonly RULE_conditionInformationItem = 520;
    public static readonly RULE_signalInformationItemName = 521;
    public static readonly RULE_signalStatement = 522;
    public static readonly RULE_resignalStatement = 523;
    public static readonly RULE_signalInformationItem = 524;
    public static readonly RULE_cursorOpen = 525;
    public static readonly RULE_cursorClose = 526;
    public static readonly RULE_cursorFetch = 527;
    public static readonly RULE_schedule = 528;
    public static readonly RULE_columnDefinition = 529;
    public static readonly RULE_checkOrReferences = 530;
    public static readonly RULE_checkConstraint = 531;
    public static readonly RULE_constraintEnforcement = 532;
    public static readonly RULE_tableConstraintDef = 533;
    public static readonly RULE_constraintName = 534;
    public static readonly RULE_fieldDefinition = 535;
    public static readonly RULE_columnAttribute = 536;
    public static readonly RULE_columnFormat = 537;
    public static readonly RULE_storageMedia = 538;
    public static readonly RULE_now = 539;
    public static readonly RULE_nowOrSignedLiteral = 540;
    public static readonly RULE_gcolAttribute = 541;
    public static readonly RULE_references = 542;
    public static readonly RULE_deleteOption = 543;
    public static readonly RULE_keyList = 544;
    public static readonly RULE_keyPart = 545;
    public static readonly RULE_keyListWithExpression = 546;
    public static readonly RULE_keyPartOrExpression = 547;
    public static readonly RULE_keyListVariants = 548;
    public static readonly RULE_indexType = 549;
    public static readonly RULE_indexOption = 550;
    public static readonly RULE_commonIndexOption = 551;
    public static readonly RULE_visibility = 552;
    public static readonly RULE_indexTypeClause = 553;
    public static readonly RULE_fulltextIndexOption = 554;
    public static readonly RULE_spatialIndexOption = 555;
    public static readonly RULE_dataTypeDefinition = 556;
    public static readonly RULE_dataType = 557;
    public static readonly RULE_nchar = 558;
    public static readonly RULE_realType = 559;
    public static readonly RULE_fieldLength = 560;
    public static readonly RULE_fieldOptions = 561;
    public static readonly RULE_charsetWithOptBinary = 562;
    public static readonly RULE_ascii = 563;
    public static readonly RULE_unicode = 564;
    public static readonly RULE_wsNumCodepoints = 565;
    public static readonly RULE_typeDatetimePrecision = 566;
    public static readonly RULE_functionDatetimePrecision = 567;
    public static readonly RULE_charsetName = 568;
    public static readonly RULE_collationName = 569;
    public static readonly RULE_createTableOptions = 570;
    public static readonly RULE_createTableOptionsEtc = 571;
    public static readonly RULE_createPartitioningEtc = 572;
    public static readonly RULE_createTableOptionsSpaceSeparated = 573;
    public static readonly RULE_createTableOption = 574;
    public static readonly RULE_ternaryOption = 575;
    public static readonly RULE_defaultCollation = 576;
    public static readonly RULE_defaultEncryption = 577;
    public static readonly RULE_defaultCharset = 578;
    public static readonly RULE_partitionClause = 579;
    public static readonly RULE_partitionTypeDef = 580;
    public static readonly RULE_subPartitions = 581;
    public static readonly RULE_partitionKeyAlgorithm = 582;
    public static readonly RULE_partitionDefinitions = 583;
    public static readonly RULE_partitionDefinition = 584;
    public static readonly RULE_partitionValuesIn = 585;
    public static readonly RULE_partitionOption = 586;
    public static readonly RULE_subpartitionDefinition = 587;
    public static readonly RULE_partitionValueItemListParen = 588;
    public static readonly RULE_partitionValueItem = 589;
    public static readonly RULE_definerClause = 590;
    public static readonly RULE_ifExists = 591;
    public static readonly RULE_ifNotExists = 592;
    public static readonly RULE_ignoreUnknownUser = 593;
    public static readonly RULE_procedureParameter = 594;
    public static readonly RULE_functionParameter = 595;
    public static readonly RULE_collate = 596;
    public static readonly RULE_typeWithOptCollate = 597;
    public static readonly RULE_schemaIdentifierPair = 598;
    public static readonly RULE_viewRefList = 599;
    public static readonly RULE_updateList = 600;
    public static readonly RULE_updateElement = 601;
    public static readonly RULE_charsetClause = 602;
    public static readonly RULE_fieldsClause = 603;
    public static readonly RULE_fieldTerm = 604;
    public static readonly RULE_linesClause = 605;
    public static readonly RULE_lineTerm = 606;
    public static readonly RULE_userList = 607;
    public static readonly RULE_createUserList = 608;
    public static readonly RULE_createUser = 609;
    public static readonly RULE_createUserWithMfa = 610;
    public static readonly RULE_identification = 611;
    public static readonly RULE_identifiedByPassword = 612;
    public static readonly RULE_identifiedByRandomPassword = 613;
    public static readonly RULE_identifiedWithPlugin = 614;
    public static readonly RULE_identifiedWithPluginAsAuth = 615;
    public static readonly RULE_identifiedWithPluginByPassword = 616;
    public static readonly RULE_identifiedWithPluginByRandomPassword = 617;
    public static readonly RULE_initialAuth = 618;
    public static readonly RULE_retainCurrentPassword = 619;
    public static readonly RULE_discardOldPassword = 620;
    public static readonly RULE_userRegistration = 621;
    public static readonly RULE_factor = 622;
    public static readonly RULE_replacePassword = 623;
    public static readonly RULE_userIdentifierOrText = 624;
    public static readonly RULE_user = 625;
    public static readonly RULE_likeClause = 626;
    public static readonly RULE_likeOrWhere = 627;
    public static readonly RULE_onlineOption = 628;
    public static readonly RULE_noWriteToBinLog = 629;
    public static readonly RULE_usePartition = 630;
    public static readonly RULE_fieldIdentifier = 631;
    public static readonly RULE_columnName = 632;
    public static readonly RULE_columnInternalRef = 633;
    public static readonly RULE_columnInternalRefList = 634;
    public static readonly RULE_columnRef = 635;
    public static readonly RULE_insertIdentifier = 636;
    public static readonly RULE_indexName = 637;
    public static readonly RULE_indexRef = 638;
    public static readonly RULE_tableWild = 639;
    public static readonly RULE_schemaName = 640;
    public static readonly RULE_schemaRef = 641;
    public static readonly RULE_procedureName = 642;
    public static readonly RULE_procedureRef = 643;
    public static readonly RULE_functionName = 644;
    public static readonly RULE_functionRef = 645;
    public static readonly RULE_triggerName = 646;
    public static readonly RULE_triggerRef = 647;
    public static readonly RULE_viewName = 648;
    public static readonly RULE_viewRef = 649;
    public static readonly RULE_tablespaceName = 650;
    public static readonly RULE_tablespaceRef = 651;
    public static readonly RULE_logfileGroupName = 652;
    public static readonly RULE_logfileGroupRef = 653;
    public static readonly RULE_eventName = 654;
    public static readonly RULE_eventRef = 655;
    public static readonly RULE_udfName = 656;
    public static readonly RULE_serverName = 657;
    public static readonly RULE_serverRef = 658;
    public static readonly RULE_engineRef = 659;
    public static readonly RULE_tableName = 660;
    public static readonly RULE_filterTableRef = 661;
    public static readonly RULE_tableRefWithWildcard = 662;
    public static readonly RULE_tableRef = 663;
    public static readonly RULE_tableRefList = 664;
    public static readonly RULE_tableAliasRefList = 665;
    public static readonly RULE_parameterName = 666;
    public static readonly RULE_labelIdentifier = 667;
    public static readonly RULE_labelRef = 668;
    public static readonly RULE_roleIdentifier = 669;
    public static readonly RULE_pluginRef = 670;
    public static readonly RULE_componentRef = 671;
    public static readonly RULE_resourceGroupRef = 672;
    public static readonly RULE_windowName = 673;
    public static readonly RULE_pureIdentifier = 674;
    public static readonly RULE_identifier = 675;
    public static readonly RULE_identifierList = 676;
    public static readonly RULE_identifierListWithParentheses = 677;
    public static readonly RULE_qualifiedIdentifier = 678;
    public static readonly RULE_simpleIdentifier = 679;
    public static readonly RULE_dotIdentifier = 680;
    public static readonly RULE_ulong_number = 681;
    public static readonly RULE_real_ulong_number = 682;
    public static readonly RULE_ulonglong_number = 683;
    public static readonly RULE_real_ulonglong_number = 684;
    public static readonly RULE_signedLiteral = 685;
    public static readonly RULE_signedLiteralOrNull = 686;
    public static readonly RULE_literal = 687;
    public static readonly RULE_literalOrNull = 688;
    public static readonly RULE_nullAsLiteral = 689;
    public static readonly RULE_stringList = 690;
    public static readonly RULE_textStringLiteral = 691;
    public static readonly RULE_textString = 692;
    public static readonly RULE_textStringHash = 693;
    public static readonly RULE_textLiteral = 694;
    public static readonly RULE_textStringNoLinebreak = 695;
    public static readonly RULE_textStringLiteralList = 696;
    public static readonly RULE_numLiteral = 697;
    public static readonly RULE_boolLiteral = 698;
    public static readonly RULE_nullLiteral = 699;
    public static readonly RULE_int64Literal = 700;
    public static readonly RULE_temporalLiteral = 701;
    public static readonly RULE_floatOptions = 702;
    public static readonly RULE_standardFloatOptions = 703;
    public static readonly RULE_precision = 704;
    public static readonly RULE_textOrIdentifier = 705;
    public static readonly RULE_lValueIdentifier = 706;
    public static readonly RULE_roleIdentifierOrText = 707;
    public static readonly RULE_sizeNumber = 708;
    public static readonly RULE_parentheses = 709;
    public static readonly RULE_equal = 710;
    public static readonly RULE_optionType = 711;
    public static readonly RULE_rvalueSystemVariableType = 712;
    public static readonly RULE_setVarIdentType = 713;
    public static readonly RULE_jsonAttribute = 714;
    public static readonly RULE_identifierKeyword = 715;
    public static readonly RULE_identifierKeywordsAmbiguous1RolesAndLabels = 716;
    public static readonly RULE_identifierKeywordsAmbiguous2Labels = 717;
    public static readonly RULE_labelKeyword = 718;
    public static readonly RULE_identifierKeywordsAmbiguous3Roles = 719;
    public static readonly RULE_identifierKeywordsUnambiguous = 720;
    public static readonly RULE_roleKeyword = 721;
    public static readonly RULE_lValueKeyword = 722;
    public static readonly RULE_identifierKeywordsAmbiguous4SystemVariables = 723;
    public static readonly RULE_roleOrIdentifierKeyword = 724;
    public static readonly RULE_roleOrLabelKeyword = 725;
    public static readonly literalNames: string[] = ["", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "'='", "':='",
        "'<=>'", "'>='",
        "'>'", "'<='",
        "'<'", "'!='",
        "'+'", "'-'",
        "'*'", "'/'",
        "'%'", "'!'",
        "'~'", "'<<'",
        "'>>'", "'&&'",
        "'&'", "'^'",
        "'||'", "'|'",
        "'.'", "','",
        "';'", "':'",
        "'('", "')'",
        "'{'", "'}'",
        "'_'", "'->'",
        "'->>'", "'@'",
        "", "'@@'",
        "'\\N'", "'?'",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "", "",
        "'<>'"];
    public static readonly symbolicNames: string[] = ["", "ACCESSIBLE_SYMBOL",
        "ACCOUNT_SYMBOL",
        "ACTION_SYMBOL",
        "ADD_SYMBOL",
        "ADDDATE_SYMBOL",
        "AFTER_SYMBOL",
        "AGAINST_SYMBOL",
        "AGGREGATE_SYMBOL",
        "ALGORITHM_SYMBOL",
        "ALL_SYMBOL",
        "ALTER_SYMBOL",
        "ALWAYS_SYMBOL",
        "ANALYSE_SYMBOL",
        "ANALYZE_SYMBOL",
        "AND_SYMBOL",
        "ANY_SYMBOL",
        "AS_SYMBOL",
        "ASC_SYMBOL",
        "ASCII_SYMBOL",
        "ASENSITIVE_SYMBOL",
        "AT_SYMBOL",
        "AUTHORS_SYMBOL",
        "AUTOEXTEND_SIZE_SYMBOL",
        "AUTO_INCREMENT_SYMBOL",
        "AVG_ROW_LENGTH_SYMBOL",
        "AVG_SYMBOL",
        "BACKUP_SYMBOL",
        "BEFORE_SYMBOL",
        "BEGIN_SYMBOL",
        "BETWEEN_SYMBOL",
        "BIGINT_SYMBOL",
        "BINARY_SYMBOL",
        "BINLOG_SYMBOL",
        "BIN_NUM_SYMBOL",
        "BIT_AND_SYMBOL",
        "BIT_OR_SYMBOL",
        "BIT_SYMBOL",
        "BIT_XOR_SYMBOL",
        "BLOB_SYMBOL",
        "BLOCK_SYMBOL",
        "BOOLEAN_SYMBOL",
        "BOOL_SYMBOL",
        "BOTH_SYMBOL",
        "BTREE_SYMBOL",
        "BY_SYMBOL",
        "BYTE_SYMBOL",
        "CACHE_SYMBOL",
        "CALL_SYMBOL",
        "CASCADE_SYMBOL",
        "CASCADED_SYMBOL",
        "CASE_SYMBOL",
        "CAST_SYMBOL",
        "CATALOG_NAME_SYMBOL",
        "CHAIN_SYMBOL",
        "CHANGE_SYMBOL",
        "CHANGED_SYMBOL",
        "CHANNEL_SYMBOL",
        "CHARSET_SYMBOL",
        "CHARACTER_SYMBOL",
        "CHAR_SYMBOL",
        "CHECKSUM_SYMBOL",
        "CHECK_SYMBOL",
        "CIPHER_SYMBOL",
        "CLASS_ORIGIN_SYMBOL",
        "CLIENT_SYMBOL",
        "CLOSE_SYMBOL",
        "COALESCE_SYMBOL",
        "CODE_SYMBOL",
        "COLLATE_SYMBOL",
        "COLLATION_SYMBOL",
        "COLUMNS_SYMBOL",
        "COLUMN_SYMBOL",
        "COLUMN_NAME_SYMBOL",
        "COLUMN_FORMAT_SYMBOL",
        "COMMENT_SYMBOL",
        "COMMITTED_SYMBOL",
        "COMMIT_SYMBOL",
        "COMPACT_SYMBOL",
        "COMPLETION_SYMBOL",
        "COMPRESSED_SYMBOL",
        "COMPRESSION_SYMBOL",
        "CONCURRENT_SYMBOL",
        "CONDITION_SYMBOL",
        "CONNECTION_SYMBOL",
        "CONSISTENT_SYMBOL",
        "CONSTRAINT_SYMBOL",
        "CONSTRAINT_CATALOG_SYMBOL",
        "CONSTRAINT_NAME_SYMBOL",
        "CONSTRAINT_SCHEMA_SYMBOL",
        "CONTAINS_SYMBOL",
        "CONTEXT_SYMBOL",
        "CONTINUE_SYMBOL",
        "CONTRIBUTORS_SYMBOL",
        "CONVERT_SYMBOL",
        "COUNT_SYMBOL",
        "CPU_SYMBOL",
        "CREATE_SYMBOL",
        "CROSS_SYMBOL",
        "CUBE_SYMBOL",
        "CURDATE_SYMBOL",
        "CURRENT_SYMBOL",
        "CURRENT_DATE_SYMBOL",
        "CURRENT_TIME_SYMBOL",
        "CURRENT_TIMESTAMP_SYMBOL",
        "CURRENT_USER_SYMBOL",
        "CURSOR_SYMBOL",
        "CURSOR_NAME_SYMBOL",
        "CURTIME_SYMBOL",
        "DATABASE_SYMBOL",
        "DATABASES_SYMBOL",
        "DATAFILE_SYMBOL",
        "DATA_SYMBOL",
        "DATETIME_SYMBOL",
        "DATE_ADD_SYMBOL",
        "DATE_SUB_SYMBOL",
        "DATE_SYMBOL",
        "DAYOFMONTH_SYMBOL",
        "DAY_HOUR_SYMBOL",
        "DAY_MICROSECOND_SYMBOL",
        "DAY_MINUTE_SYMBOL",
        "DAY_SECOND_SYMBOL",
        "DAY_SYMBOL",
        "DEALLOCATE_SYMBOL",
        "DEC_SYMBOL",
        "DECIMAL_NUM_SYMBOL",
        "DECIMAL_SYMBOL",
        "DECLARE_SYMBOL",
        "DEFAULT_SYMBOL",
        "DEFAULT_AUTH_SYMBOL",
        "DEFINER_SYMBOL",
        "DELAYED_SYMBOL",
        "DELAY_KEY_WRITE_SYMBOL",
        "DELETE_SYMBOL",
        "DESC_SYMBOL",
        "DESCRIBE_SYMBOL",
        "DES_KEY_FILE_SYMBOL",
        "DETERMINISTIC_SYMBOL",
        "DIAGNOSTICS_SYMBOL",
        "DIRECTORY_SYMBOL",
        "DISABLE_SYMBOL",
        "DISCARD_SYMBOL",
        "DISK_SYMBOL",
        "DISTINCT_SYMBOL",
        "DISTINCTROW_SYMBOL",
        "DIV_SYMBOL",
        "DOUBLE_SYMBOL",
        "DO_SYMBOL",
        "DROP_SYMBOL",
        "DUAL_SYMBOL",
        "DUMPFILE_SYMBOL",
        "DUPLICATE_SYMBOL",
        "DYNAMIC_SYMBOL",
        "EACH_SYMBOL",
        "ELSE_SYMBOL",
        "ELSEIF_SYMBOL",
        "ENABLE_SYMBOL",
        "ENCLOSED_SYMBOL",
        "ENCRYPTION_SYMBOL",
        "END_SYMBOL",
        "ENDS_SYMBOL",
        "END_OF_INPUT_SYMBOL",
        "ENGINES_SYMBOL",
        "ENGINE_SYMBOL",
        "ENUM_SYMBOL",
        "ERROR_SYMBOL",
        "ERRORS_SYMBOL",
        "ESCAPED_SYMBOL",
        "ESCAPE_SYMBOL",
        "EVENTS_SYMBOL",
        "EVENT_SYMBOL",
        "EVERY_SYMBOL",
        "EXCHANGE_SYMBOL",
        "EXECUTE_SYMBOL",
        "EXISTS_SYMBOL",
        "EXIT_SYMBOL",
        "EXPANSION_SYMBOL",
        "EXPIRE_SYMBOL",
        "EXPLAIN_SYMBOL",
        "EXPORT_SYMBOL",
        "EXTENDED_SYMBOL",
        "EXTENT_SIZE_SYMBOL",
        "EXTRACT_SYMBOL",
        "FALSE_SYMBOL",
        "FAST_SYMBOL",
        "FAULTS_SYMBOL",
        "FETCH_SYMBOL",
        "FIELDS_SYMBOL",
        "FILE_SYMBOL",
        "FILE_BLOCK_SIZE_SYMBOL",
        "FILTER_SYMBOL",
        "FIRST_SYMBOL",
        "FIXED_SYMBOL",
        "FLOAT4_SYMBOL",
        "FLOAT8_SYMBOL",
        "FLOAT_SYMBOL",
        "FLUSH_SYMBOL",
        "FOLLOWS_SYMBOL",
        "FORCE_SYMBOL",
        "FOREIGN_SYMBOL",
        "FOR_SYMBOL",
        "FORMAT_SYMBOL",
        "FOUND_SYMBOL",
        "FROM_SYMBOL",
        "FULL_SYMBOL",
        "FULLTEXT_SYMBOL",
        "FUNCTION_SYMBOL",
        "GET_SYMBOL",
        "GENERAL_SYMBOL",
        "GENERATED_SYMBOL",
        "GROUP_REPLICATION_SYMBOL",
        "GEOMETRYCOLLECTION_SYMBOL",
        "GEOMETRY_SYMBOL",
        "GET_FORMAT_SYMBOL",
        "GLOBAL_SYMBOL",
        "GRANT_SYMBOL",
        "GRANTS_SYMBOL",
        "GROUP_SYMBOL",
        "GROUP_CONCAT_SYMBOL",
        "HANDLER_SYMBOL",
        "HASH_SYMBOL",
        "HAVING_SYMBOL",
        "HELP_SYMBOL",
        "HIGH_PRIORITY_SYMBOL",
        "HOST_SYMBOL",
        "HOSTS_SYMBOL",
        "HOUR_MICROSECOND_SYMBOL",
        "HOUR_MINUTE_SYMBOL",
        "HOUR_SECOND_SYMBOL",
        "HOUR_SYMBOL",
        "IDENTIFIED_SYMBOL",
        "IF_SYMBOL",
        "IGNORE_SYMBOL",
        "IGNORE_SERVER_IDS_SYMBOL",
        "IMPORT_SYMBOL",
        "INDEXES_SYMBOL",
        "INDEX_SYMBOL",
        "INFILE_SYMBOL",
        "INITIAL_SIZE_SYMBOL",
        "INNER_SYMBOL",
        "INOUT_SYMBOL",
        "INSENSITIVE_SYMBOL",
        "INSERT_SYMBOL",
        "INSERT_METHOD_SYMBOL",
        "INSTANCE_SYMBOL",
        "INSTALL_SYMBOL",
        "INTEGER_SYMBOL",
        "INTERVAL_SYMBOL",
        "INTO_SYMBOL",
        "INT_SYMBOL",
        "INVOKER_SYMBOL",
        "IN_SYMBOL",
        "IO_AFTER_GTIDS_SYMBOL",
        "IO_BEFORE_GTIDS_SYMBOL",
        "IO_THREAD_SYMBOL",
        "IO_SYMBOL",
        "IPC_SYMBOL",
        "IS_SYMBOL",
        "ISOLATION_SYMBOL",
        "ISSUER_SYMBOL",
        "ITERATE_SYMBOL",
        "JOIN_SYMBOL",
        "JSON_SYMBOL",
        "KEYS_SYMBOL",
        "KEY_BLOCK_SIZE_SYMBOL",
        "KEY_SYMBOL",
        "KILL_SYMBOL",
        "LANGUAGE_SYMBOL",
        "LAST_SYMBOL",
        "LEADING_SYMBOL",
        "LEAVES_SYMBOL",
        "LEAVE_SYMBOL",
        "LEFT_SYMBOL",
        "LESS_SYMBOL",
        "LEVEL_SYMBOL",
        "LIKE_SYMBOL",
        "LIMIT_SYMBOL",
        "LINEAR_SYMBOL",
        "LINES_SYMBOL",
        "LINESTRING_SYMBOL",
        "LIST_SYMBOL",
        "LOAD_SYMBOL",
        "LOCALTIME_SYMBOL",
        "LOCALTIMESTAMP_SYMBOL",
        "LOCAL_SYMBOL",
        "LOCATOR_SYMBOL",
        "LOCKS_SYMBOL",
        "LOCK_SYMBOL",
        "LOGFILE_SYMBOL",
        "LOGS_SYMBOL",
        "LONGBLOB_SYMBOL",
        "LONGTEXT_SYMBOL",
        "LONG_NUM_SYMBOL",
        "LONG_SYMBOL",
        "LOOP_SYMBOL",
        "LOW_PRIORITY_SYMBOL",
        "MASTER_AUTO_POSITION_SYMBOL",
        "MASTER_BIND_SYMBOL",
        "MASTER_CONNECT_RETRY_SYMBOL",
        "MASTER_DELAY_SYMBOL",
        "MASTER_HOST_SYMBOL",
        "MASTER_LOG_FILE_SYMBOL",
        "MASTER_LOG_POS_SYMBOL",
        "MASTER_PASSWORD_SYMBOL",
        "MASTER_PORT_SYMBOL",
        "MASTER_RETRY_COUNT_SYMBOL",
        "MASTER_SERVER_ID_SYMBOL",
        "MASTER_SSL_CAPATH_SYMBOL",
        "MASTER_SSL_CA_SYMBOL",
        "MASTER_SSL_CERT_SYMBOL",
        "MASTER_SSL_CIPHER_SYMBOL",
        "MASTER_SSL_CRL_SYMBOL",
        "MASTER_SSL_CRLPATH_SYMBOL",
        "MASTER_SSL_KEY_SYMBOL",
        "MASTER_SSL_SYMBOL",
        "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL",
        "MASTER_SYMBOL",
        "MASTER_TLS_VERSION_SYMBOL",
        "MASTER_USER_SYMBOL",
        "MASTER_HEARTBEAT_PERIOD_SYMBOL",
        "MATCH_SYMBOL",
        "MAX_CONNECTIONS_PER_HOUR_SYMBOL",
        "MAX_QUERIES_PER_HOUR_SYMBOL",
        "MAX_ROWS_SYMBOL",
        "MAX_SIZE_SYMBOL",
        "MAX_STATEMENT_TIME_SYMBOL",
        "MAX_SYMBOL",
        "MAX_UPDATES_PER_HOUR_SYMBOL",
        "MAX_USER_CONNECTIONS_SYMBOL",
        "MAXVALUE_SYMBOL",
        "MEDIUMBLOB_SYMBOL",
        "MEDIUMINT_SYMBOL",
        "MEDIUMTEXT_SYMBOL",
        "MEDIUM_SYMBOL",
        "MEMORY_SYMBOL",
        "MERGE_SYMBOL",
        "MESSAGE_TEXT_SYMBOL",
        "MICROSECOND_SYMBOL",
        "MID_SYMBOL",
        "MIDDLEINT_SYMBOL",
        "MIGRATE_SYMBOL",
        "MINUTE_MICROSECOND_SYMBOL",
        "MINUTE_SECOND_SYMBOL",
        "MINUTE_SYMBOL",
        "MIN_ROWS_SYMBOL",
        "MIN_SYMBOL",
        "MODE_SYMBOL",
        "MODIFIES_SYMBOL",
        "MODIFY_SYMBOL",
        "MOD_SYMBOL",
        "MONTH_SYMBOL",
        "MULTILINESTRING_SYMBOL",
        "MULTIPOINT_SYMBOL",
        "MULTIPOLYGON_SYMBOL",
        "MUTEX_SYMBOL",
        "MYSQL_ERRNO_SYMBOL",
        "NAMES_SYMBOL",
        "NAME_SYMBOL",
        "NATIONAL_SYMBOL",
        "NATURAL_SYMBOL",
        "NCHAR_STRING_SYMBOL",
        "NCHAR_SYMBOL",
        "NDB_SYMBOL",
        "NDBCLUSTER_SYMBOL",
        "NEG_SYMBOL",
        "NEVER_SYMBOL",
        "NEW_SYMBOL",
        "NEXT_SYMBOL",
        "NODEGROUP_SYMBOL",
        "NONE_SYMBOL",
        "NONBLOCKING_SYMBOL",
        "NOT_SYMBOL",
        "NOW_SYMBOL",
        "NO_SYMBOL",
        "NO_WAIT_SYMBOL",
        "NO_WRITE_TO_BINLOG_SYMBOL",
        "NULL_SYMBOL",
        "NUMBER_SYMBOL",
        "NUMERIC_SYMBOL",
        "NVARCHAR_SYMBOL",
        "OFFLINE_SYMBOL",
        "OFFSET_SYMBOL",
        "OLD_PASSWORD_SYMBOL",
        "ON_SYMBOL",
        "ONE_SYMBOL",
        "ONLINE_SYMBOL",
        "ONLY_SYMBOL",
        "OPEN_SYMBOL",
        "OPTIMIZE_SYMBOL",
        "OPTIMIZER_COSTS_SYMBOL",
        "OPTIONS_SYMBOL",
        "OPTION_SYMBOL",
        "OPTIONALLY_SYMBOL",
        "ORDER_SYMBOL",
        "OR_SYMBOL",
        "OUTER_SYMBOL",
        "OUTFILE_SYMBOL",
        "OUT_SYMBOL",
        "OWNER_SYMBOL",
        "PACK_KEYS_SYMBOL",
        "PAGE_SYMBOL",
        "PARSER_SYMBOL",
        "PARTIAL_SYMBOL",
        "PARTITIONING_SYMBOL",
        "PARTITIONS_SYMBOL",
        "PARTITION_SYMBOL",
        "PASSWORD_SYMBOL",
        "PHASE_SYMBOL",
        "PLUGINS_SYMBOL",
        "PLUGIN_DIR_SYMBOL",
        "PLUGIN_SYMBOL",
        "POINT_SYMBOL",
        "POLYGON_SYMBOL",
        "PORT_SYMBOL",
        "POSITION_SYMBOL",
        "PRECEDES_SYMBOL",
        "PRECISION_SYMBOL",
        "PREPARE_SYMBOL",
        "PRESERVE_SYMBOL",
        "PREV_SYMBOL",
        "PRIMARY_SYMBOL",
        "PRIVILEGES_SYMBOL",
        "PROCEDURE_SYMBOL",
        "PROCESS_SYMBOL",
        "PROCESSLIST_SYMBOL",
        "PROFILE_SYMBOL",
        "PROFILES_SYMBOL",
        "PROXY_SYMBOL",
        "PURGE_SYMBOL",
        "QUARTER_SYMBOL",
        "QUERY_SYMBOL",
        "QUICK_SYMBOL",
        "RANGE_SYMBOL",
        "READS_SYMBOL",
        "READ_ONLY_SYMBOL",
        "READ_SYMBOL",
        "READ_WRITE_SYMBOL",
        "REAL_SYMBOL",
        "REBUILD_SYMBOL",
        "RECOVER_SYMBOL",
        "REDOFILE_SYMBOL",
        "REDO_BUFFER_SIZE_SYMBOL",
        "REDUNDANT_SYMBOL",
        "REFERENCES_SYMBOL",
        "REGEXP_SYMBOL",
        "RELAY_SYMBOL",
        "RELAYLOG_SYMBOL",
        "RELAY_LOG_FILE_SYMBOL",
        "RELAY_LOG_POS_SYMBOL",
        "RELAY_THREAD_SYMBOL",
        "RELEASE_SYMBOL",
        "RELOAD_SYMBOL",
        "REMOVE_SYMBOL",
        "RENAME_SYMBOL",
        "REORGANIZE_SYMBOL",
        "REPAIR_SYMBOL",
        "REPEATABLE_SYMBOL",
        "REPEAT_SYMBOL",
        "REPLACE_SYMBOL",
        "REPLICATION_SYMBOL",
        "REPLICATE_DO_DB_SYMBOL",
        "REPLICATE_IGNORE_DB_SYMBOL",
        "REPLICATE_DO_TABLE_SYMBOL",
        "REPLICATE_IGNORE_TABLE_SYMBOL",
        "REPLICATE_WILD_DO_TABLE_SYMBOL",
        "REPLICATE_WILD_IGNORE_TABLE_SYMBOL",
        "REPLICATE_REWRITE_DB_SYMBOL",
        "REQUIRE_SYMBOL",
        "RESET_SYMBOL",
        "RESIGNAL_SYMBOL",
        "RESTORE_SYMBOL",
        "RESTRICT_SYMBOL",
        "RESUME_SYMBOL",
        "RETURNED_SQLSTATE_SYMBOL",
        "RETURNS_SYMBOL",
        "RETURN_SYMBOL",
        "REVERSE_SYMBOL",
        "REVOKE_SYMBOL",
        "RIGHT_SYMBOL",
        "RLIKE_SYMBOL",
        "ROLLBACK_SYMBOL",
        "ROLLUP_SYMBOL",
        "ROTATE_SYMBOL",
        "ROUTINE_SYMBOL",
        "ROWS_SYMBOL",
        "ROW_COUNT_SYMBOL",
        "ROW_FORMAT_SYMBOL",
        "ROW_SYMBOL",
        "RTREE_SYMBOL",
        "SAVEPOINT_SYMBOL",
        "SCHEDULE_SYMBOL",
        "SCHEMA_SYMBOL",
        "SCHEMA_NAME_SYMBOL",
        "SCHEMAS_SYMBOL",
        "SECOND_MICROSECOND_SYMBOL",
        "SECOND_SYMBOL",
        "SECURITY_SYMBOL",
        "SELECT_SYMBOL",
        "SENSITIVE_SYMBOL",
        "SEPARATOR_SYMBOL",
        "SERIALIZABLE_SYMBOL",
        "SERIAL_SYMBOL",
        "SESSION_SYMBOL",
        "SERVER_SYMBOL",
        "SERVER_OPTIONS_SYMBOL",
        "SESSION_USER_SYMBOL",
        "SET_SYMBOL",
        "SET_VAR_SYMBOL",
        "SHARE_SYMBOL",
        "SHOW_SYMBOL",
        "SHUTDOWN_SYMBOL",
        "SIGNAL_SYMBOL",
        "SIGNED_SYMBOL",
        "SIMPLE_SYMBOL",
        "SLAVE_SYMBOL",
        "SLOW_SYMBOL",
        "SMALLINT_SYMBOL",
        "SNAPSHOT_SYMBOL",
        "SOME_SYMBOL",
        "SOCKET_SYMBOL",
        "SONAME_SYMBOL",
        "SOUNDS_SYMBOL",
        "SOURCE_SYMBOL",
        "SPATIAL_SYMBOL",
        "SPECIFIC_SYMBOL",
        "SQLEXCEPTION_SYMBOL",
        "SQLSTATE_SYMBOL",
        "SQLWARNING_SYMBOL",
        "SQL_AFTER_GTIDS_SYMBOL",
        "SQL_AFTER_MTS_GAPS_SYMBOL",
        "SQL_BEFORE_GTIDS_SYMBOL",
        "SQL_BIG_RESULT_SYMBOL",
        "SQL_BUFFER_RESULT_SYMBOL",
        "SQL_CACHE_SYMBOL",
        "SQL_CALC_FOUND_ROWS_SYMBOL",
        "SQL_NO_CACHE_SYMBOL",
        "SQL_SMALL_RESULT_SYMBOL",
        "SQL_SYMBOL",
        "SQL_THREAD_SYMBOL",
        "SSL_SYMBOL",
        "STACKED_SYMBOL",
        "STARTING_SYMBOL",
        "STARTS_SYMBOL",
        "START_SYMBOL",
        "STATS_AUTO_RECALC_SYMBOL",
        "STATS_PERSISTENT_SYMBOL",
        "STATS_SAMPLE_PAGES_SYMBOL",
        "STATUS_SYMBOL",
        "STDDEV_SAMP_SYMBOL",
        "STDDEV_SYMBOL",
        "STDDEV_POP_SYMBOL",
        "STD_SYMBOL",
        "STOP_SYMBOL",
        "STORAGE_SYMBOL",
        "STORED_SYMBOL",
        "STRAIGHT_JOIN_SYMBOL",
        "STRING_SYMBOL",
        "SUBCLASS_ORIGIN_SYMBOL",
        "SUBDATE_SYMBOL",
        "SUBJECT_SYMBOL",
        "SUBPARTITIONS_SYMBOL",
        "SUBPARTITION_SYMBOL",
        "SUBSTR_SYMBOL",
        "SUBSTRING_SYMBOL",
        "SUM_SYMBOL",
        "SUPER_SYMBOL",
        "SUSPEND_SYMBOL",
        "SWAPS_SYMBOL",
        "SWITCHES_SYMBOL",
        "SYSDATE_SYMBOL",
        "SYSTEM_USER_SYMBOL",
        "TABLES_SYMBOL",
        "TABLESPACE_SYMBOL",
        "TABLE_REF_PRIORITY_SYMBOL",
        "TABLE_SYMBOL",
        "TABLE_CHECKSUM_SYMBOL",
        "TABLE_NAME_SYMBOL",
        "TEMPORARY_SYMBOL",
        "TEMPTABLE_SYMBOL",
        "TERMINATED_SYMBOL",
        "TEXT_SYMBOL",
        "THAN_SYMBOL",
        "THEN_SYMBOL",
        "TIMESTAMP_SYMBOL",
        "TIMESTAMP_ADD_SYMBOL",
        "TIMESTAMP_DIFF_SYMBOL",
        "TIME_SYMBOL",
        "TINYBLOB_SYMBOL",
        "TINYINT_SYMBOL",
        "TINYTEXT_SYMBOL",
        "TO_SYMBOL",
        "TRAILING_SYMBOL",
        "TRANSACTION_SYMBOL",
        "TRIGGERS_SYMBOL",
        "TRIGGER_SYMBOL",
        "TRIM_SYMBOL",
        "TRUE_SYMBOL",
        "TRUNCATE_SYMBOL",
        "TYPES_SYMBOL",
        "TYPE_SYMBOL",
        "UDF_RETURNS_SYMBOL",
        "UNCOMMITTED_SYMBOL",
        "UNDEFINED_SYMBOL",
        "UNDOFILE_SYMBOL",
        "UNDO_BUFFER_SIZE_SYMBOL",
        "UNDO_SYMBOL",
        "UNICODE_SYMBOL",
        "UNINSTALL_SYMBOL",
        "UNION_SYMBOL",
        "UNIQUE_SYMBOL",
        "UNKNOWN_SYMBOL",
        "UNLOCK_SYMBOL",
        "UNSIGNED_SYMBOL",
        "UNTIL_SYMBOL",
        "UPDATE_SYMBOL",
        "UPGRADE_SYMBOL",
        "USAGE_SYMBOL",
        "USER_RESOURCES_SYMBOL",
        "USER_SYMBOL",
        "USE_FRM_SYMBOL",
        "USE_SYMBOL",
        "USING_SYMBOL",
        "UTC_DATE_SYMBOL",
        "UTC_TIMESTAMP_SYMBOL",
        "UTC_TIME_SYMBOL",
        "VALIDATION_SYMBOL",
        "VALUES_SYMBOL",
        "VALUE_SYMBOL",
        "VARBINARY_SYMBOL",
        "VARCHAR_SYMBOL",
        "VARCHARACTER_SYMBOL",
        "VARIABLES_SYMBOL",
        "VARIANCE_SYMBOL",
        "VARYING_SYMBOL",
        "VAR_POP_SYMBOL",
        "VAR_SAMP_SYMBOL",
        "VIEW_SYMBOL",
        "VIRTUAL_SYMBOL",
        "WAIT_SYMBOL",
        "WARNINGS_SYMBOL",
        "WEEK_SYMBOL",
        "WEIGHT_STRING_SYMBOL",
        "WHEN_SYMBOL",
        "WHERE_SYMBOL",
        "WHILE_SYMBOL",
        "WITH_SYMBOL",
        "WITHOUT_SYMBOL",
        "WORK_SYMBOL",
        "WRAPPER_SYMBOL",
        "WRITE_SYMBOL",
        "X509_SYMBOL",
        "XA_SYMBOL",
        "XID_SYMBOL",
        "XML_SYMBOL",
        "XOR_SYMBOL",
        "YEAR_MONTH_SYMBOL",
        "YEAR_SYMBOL",
        "ZEROFILL_SYMBOL",
        "PERSIST_SYMBOL",
        "ROLE_SYMBOL",
        "ADMIN_SYMBOL",
        "INVISIBLE_SYMBOL",
        "VISIBLE_SYMBOL",
        "EXCEPT_SYMBOL",
        "COMPONENT_SYMBOL",
        "RECURSIVE_SYMBOL",
        "JSON_OBJECTAGG_SYMBOL",
        "JSON_ARRAYAGG_SYMBOL",
        "OF_SYMBOL",
        "SKIP_SYMBOL",
        "LOCKED_SYMBOL",
        "NOWAIT_SYMBOL",
        "GROUPING_SYMBOL",
        "PERSIST_ONLY_SYMBOL",
        "HISTOGRAM_SYMBOL",
        "BUCKETS_SYMBOL",
        "REMOTE_SYMBOL",
        "CLONE_SYMBOL",
        "CUME_DIST_SYMBOL",
        "DENSE_RANK_SYMBOL",
        "EXCLUDE_SYMBOL",
        "FIRST_VALUE_SYMBOL",
        "FOLLOWING_SYMBOL",
        "GROUPS_SYMBOL",
        "LAG_SYMBOL",
        "LAST_VALUE_SYMBOL",
        "LEAD_SYMBOL",
        "NTH_VALUE_SYMBOL",
        "NTILE_SYMBOL",
        "NULLS_SYMBOL",
        "OTHERS_SYMBOL",
        "OVER_SYMBOL",
        "PERCENT_RANK_SYMBOL",
        "PRECEDING_SYMBOL",
        "RANK_SYMBOL",
        "RESPECT_SYMBOL",
        "ROW_NUMBER_SYMBOL",
        "TIES_SYMBOL",
        "UNBOUNDED_SYMBOL",
        "WINDOW_SYMBOL",
        "EMPTY_SYMBOL",
        "JSON_TABLE_SYMBOL",
        "NESTED_SYMBOL",
        "ORDINALITY_SYMBOL",
        "PATH_SYMBOL",
        "HISTORY_SYMBOL",
        "REUSE_SYMBOL",
        "SRID_SYMBOL",
        "THREAD_PRIORITY_SYMBOL",
        "RESOURCE_SYMBOL",
        "SYSTEM_SYMBOL",
        "VCPU_SYMBOL",
        "MASTER_PUBLIC_KEY_PATH_SYMBOL",
        "GET_MASTER_PUBLIC_KEY_SYMBOL",
        "RESTART_SYMBOL",
        "DEFINITION_SYMBOL",
        "DESCRIPTION_SYMBOL",
        "ORGANIZATION_SYMBOL",
        "REFERENCE_SYMBOL",
        "OPTIONAL_SYMBOL",
        "SECONDARY_SYMBOL",
        "SECONDARY_ENGINE_SYMBOL",
        "SECONDARY_LOAD_SYMBOL",
        "SECONDARY_UNLOAD_SYMBOL",
        "ACTIVE_SYMBOL",
        "INACTIVE_SYMBOL",
        "LATERAL_SYMBOL",
        "RETAIN_SYMBOL",
        "OLD_SYMBOL",
        "NETWORK_NAMESPACE_SYMBOL",
        "ENFORCED_SYMBOL",
        "ARRAY_SYMBOL",
        "OJ_SYMBOL",
        "MEMBER_SYMBOL",
        "RANDOM_SYMBOL",
        "MASTER_COMPRESSION_ALGORITHM_SYMBOL",
        "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL",
        "PRIVILEGE_CHECKS_USER_SYMBOL",
        "MASTER_TLS_CIPHERSUITES_SYMBOL",
        "REQUIRE_ROW_FORMAT_SYMBOL",
        "PASSWORD_LOCK_TIME_SYMBOL",
        "FAILED_LOGIN_ATTEMPTS_SYMBOL",
        "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL",
        "STREAM_SYMBOL",
        "OFF_SYMBOL",
        "NOT2_SYMBOL",
        "CONCAT_PIPES_SYMBOL",
        "INT_NUMBER",
        "LONG_NUMBER",
        "ULONGLONG_NUMBER",
        "EQUAL_OPERATOR",
        "ASSIGN_OPERATOR",
        "NULL_SAFE_EQUAL_OPERATOR",
        "GREATER_OR_EQUAL_OPERATOR",
        "GREATER_THAN_OPERATOR",
        "LESS_OR_EQUAL_OPERATOR",
        "LESS_THAN_OPERATOR",
        "NOT_EQUAL_OPERATOR",
        "PLUS_OPERATOR",
        "MINUS_OPERATOR",
        "MULT_OPERATOR",
        "DIV_OPERATOR",
        "MOD_OPERATOR",
        "LOGICAL_NOT_OPERATOR",
        "BITWISE_NOT_OPERATOR",
        "SHIFT_LEFT_OPERATOR",
        "SHIFT_RIGHT_OPERATOR",
        "LOGICAL_AND_OPERATOR",
        "BITWISE_AND_OPERATOR",
        "BITWISE_XOR_OPERATOR",
        "LOGICAL_OR_OPERATOR",
        "BITWISE_OR_OPERATOR",
        "DOT_SYMBOL",
        "COMMA_SYMBOL",
        "SEMICOLON_SYMBOL",
        "COLON_SYMBOL",
        "OPEN_PAR_SYMBOL",
        "CLOSE_PAR_SYMBOL",
        "OPEN_CURLY_SYMBOL",
        "CLOSE_CURLY_SYMBOL",
        "UNDERLINE_SYMBOL",
        "JSON_SEPARATOR_SYMBOL",
        "JSON_UNQUOTED_SEPARATOR_SYMBOL",
        "AT_SIGN_SYMBOL",
        "AT_TEXT_SUFFIX",
        "AT_AT_SIGN_SYMBOL",
        "NULL2_SYMBOL",
        "PARAM_MARKER",
        "HEX_NUMBER",
        "BIN_NUMBER",
        "DECIMAL_NUMBER",
        "FLOAT_NUMBER",
        "TIMESTAMPADD_SYMBOL",
        "TIMESTAMPDIFF_SYMBOL",
        "RETURNING_SYMBOL",
        "JSON_VALUE_SYMBOL",
        "TLS_SYMBOL",
        "ATTRIBUTE_SYMBOL",
        "ENGINE_ATTRIBUTE_SYMBOL",
        "SECONDARY_ENGINE_ATTRIBUTE_SYMBOL",
        "SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL",
        "ZONE_SYMBOL",
        "GRAMMAR_SELECTOR_DERIVED_EXPR",
        "REPLICA_SYMBOL",
        "REPLICAS_SYMBOL",
        "ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL",
        "GET_SOURCE_PUBLIC_KEY_SYMBOL",
        "SOURCE_AUTO_POSITION_SYMBOL",
        "SOURCE_BIND_SYMBOL",
        "SOURCE_COMPRESSION_ALGORITHM_SYMBOL",
        "SOURCE_CONNECT_RETRY_SYMBOL",
        "SOURCE_DELAY_SYMBOL",
        "SOURCE_HEARTBEAT_PERIOD_SYMBOL",
        "SOURCE_HOST_SYMBOL",
        "SOURCE_LOG_FILE_SYMBOL",
        "SOURCE_LOG_POS_SYMBOL",
        "SOURCE_PASSWORD_SYMBOL",
        "SOURCE_PORT_SYMBOL",
        "SOURCE_PUBLIC_KEY_PATH_SYMBOL",
        "SOURCE_RETRY_COUNT_SYMBOL",
        "SOURCE_SSL_SYMBOL",
        "SOURCE_SSL_CA_SYMBOL",
        "SOURCE_SSL_CAPATH_SYMBOL",
        "SOURCE_SSL_CERT_SYMBOL",
        "SOURCE_SSL_CIPHER_SYMBOL",
        "SOURCE_SSL_CRL_SYMBOL",
        "SOURCE_SSL_CRLPATH_SYMBOL",
        "SOURCE_SSL_KEY_SYMBOL",
        "SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL",
        "SOURCE_TLS_CIPHERSUITES_SYMBOL",
        "SOURCE_TLS_VERSION_SYMBOL",
        "SOURCE_USER_SYMBOL",
        "SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL",
        "ST_COLLECT_SYMBOL",
        "KEYRING_SYMBOL",
        "AUTHENTICATION_SYMBOL",
        "FACTOR_SYMBOL",
        "FINISH_SYMBOL",
        "INITIATE_SYMBOL",
        "REGISTRATION_SYMBOL",
        "UNREGISTER_SYMBOL",
        "INITIAL_SYMBOL",
        "CHALLENGE_RESPONSE_SYMBOL",
        "GTID_ONLY_SYMBOL",
        "INTERSECT_SYMBOL",
        "WHITESPACE",
        "INVALID_INPUT",
        "UNDERSCORE_CHARSET",
        "IDENTIFIER",
        "NCHAR_TEXT",
        "BACK_TICK_QUOTED_ID",
        "DOUBLE_QUOTED_TEXT",
        "SINGLE_QUOTED_TEXT",
        "VERSION_COMMENT_START",
        "MYSQL_COMMENT_START",
        "VERSION_COMMENT_END",
        "BLOCK_COMMENT",
        "INVALID_BLOCK_COMMENT",
        "POUND_COMMENT",
        "DASHDASH_COMMENT",
        "NOT_EQUAL2_OPERATOR"];

    public static readonly ruleNames: string[] = [
        "query", "simpleStatement", "alterStatement", "alterDatabase", "alterDatabaseOption",
        "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption",
        "alterServer", "alterTable", "alterTableActions", "alterCommandList",
        "alterCommandsModifierList", "standaloneAlterCommands", "alterPartition",
        "alterList", "alterCommandsModifier", "alterListItem", "place", "restrict",
        "alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm",
        "withValidation", "removePartitioning", "allOrPartitionNameList", "alterTablespace",
        "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption",
        "alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption",
        "alterView", "viewTail", "viewQueryBlock", "viewCheckOption", "alterInstanceStatement",
        "createStatement", "createDatabase", "createDatabaseOption", "createTable",
        "tableElementList", "tableElement", "duplicateAsQe", "asCreateQueryExpression",
        "queryExpressionOrParens", "queryExpressionWithOptLockingClauses", "createRoutine",
        "createProcedure", "createFunction", "createUdf", "routineCreateOption",
        "routineAlterOptions", "routineOption", "createIndex", "indexNameAndType",
        "createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption",
        "createServer", "serverOptions", "serverOption", "createTablespace", "createUndoTablespace",
        "tsDataFileName", "tsDataFile", "tablespaceOptions", "tablespaceOption",
        "tsOptionInitialSize", "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize",
        "tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine",
        "tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption",
        "tsOptionEngineAttribute", "createView", "viewReplaceOrAlgorithm", "viewAlgorithm",
        "viewSuid", "createTrigger", "triggerFollowsPrecedesClause", "createEvent",
        "createRole", "createSpatialReference", "srsAttribute", "dropStatement",
        "dropDatabase", "dropEvent", "dropFunction", "dropProcedure", "dropIndex",
        "dropLogfileGroup", "dropLogfileGroupOption", "dropServer", "dropTable",
        "dropTableSpace", "dropTrigger", "dropView", "dropRole", "dropSpatialReference",
        "dropUndoTablespace", "renameTableStatement", "renamePair", "truncateTableStatement",
        "importStatement", "callStatement", "deleteStatement", "partitionDelete",
        "deleteStatementOption", "doStatement", "handlerStatement", "handlerReadOrScan",
        "insertStatement", "insertLockOption", "insertFromConstructor", "fields",
        "insertValues", "insertQueryExpression", "valueList", "values", "valuesReference",
        "insertUpdateList", "loadStatement", "dataOrXml", "xmlRowsIdentifiedBy",
        "loadDataFileTail", "loadDataFileTargetList", "fieldOrVariableList", "replaceStatement",
        "selectStatement", "selectStatementWithInto", "queryExpression", "queryExpressionBody",
        "queryExpressionBodyNew", "queryExpressionParens", "queryPrimary", "querySpecification",
        "subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions",
        "limitOption", "intoClause", "procedureAnalyseClause", "havingClause",
        "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails",
        "windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart",
        "windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause",
        "commonTableExpression", "groupByClause", "olapOption", "orderClause",
        "direction", "fromClause", "tableReferenceList", "tableValueConstructor",
        "explicitTable", "rowValueExplicit", "selectOption", "lockingClauseList",
        "lockingClause", "lockStrengh", "lockedRowAction", "selectItemList", "selectItem",
        "selectAlias", "whereClause", "tableReference", "escapedTableReference",
        "joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor",
        "singleTable", "singleTableParens", "derivedTable", "tableReferenceListParens",
        "tableFunction", "columnsClause", "jtColumn", "onEmptyOrError", "onEmptyOrErrorJsonTable",
        "onEmpty", "onError", "jsonOnResponse", "unionOption", "tableAlias", "indexHintList",
        "indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause",
        "indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement",
        "transactionStatement", "beginWork", "startTransactionOptionList", "savepointStatement",
        "lockStatement", "lockItem", "lockOption", "xaStatement", "xaConvert",
        "xid", "replicationStatement", "resetOption", "sourceResetOptions", "replicationLoad",
        "changeReplicationSource", "changeSource", "sourceDefinitions", "sourceDefinition",
        "changeReplicationSourceAutoPosition", "changeReplicationSourceHost",
        "changeReplicationSourceBind", "changeReplicationSourceUser", "changeReplicationSourcePassword",
        "changeReplicationSourcePort", "changeReplicationSourceConnectRetry",
        "changeReplicationSourceRetryCount", "changeReplicationSourceDelay", "changeReplicationSourceSSL",
        "changeReplicationSourceSSLCA", "changeReplicationSourceSSLCApath", "changeReplicationSourceSSLCipher",
        "changeReplicationSourceSSLCLR", "changeReplicationSourceSSLCLRpath",
        "changeReplicationSourceSSLKey", "changeReplicationSourceSSLVerifyServerCert",
        "changeReplicationSourceTLSVersion", "changeReplicationSourceTLSCiphersuites",
        "changeReplicationSourceSSLCert", "changeReplicationSourcePublicKey",
        "changeReplicationSourceGetSourcePublicKey", "changeReplicationSourceHeartbeatPeriod",
        "changeReplicationSourceCompressionAlgorithm", "changeReplicationSourceZstdCompressionLevel",
        "privilegeCheckDef", "tablePrimaryKeyCheckDef", "assignGtidsToAnonymousTransactionsDefinition",
        "sourceTlsCiphersuitesDef", "sourceFileDef", "sourceLogFile", "sourceLogPos",
        "serverIdList", "changeReplication", "filterDefinition", "filterDbList",
        "filterTableList", "filterStringList", "filterWildDbTableString", "filterDbPairList",
        "startReplicaStatement", "stopReplicaStatement", "replicaUntil", "userOption",
        "passwordOption", "defaultAuthOption", "pluginDirOption", "replicaThreadOptions",
        "replicaThreadOption", "groupReplication", "groupReplicationStartOptions",
        "groupReplicationStartOption", "groupReplicationUser", "groupReplicationPassword",
        "groupReplicationPluginAuth", "replica", "preparedStatement", "executeStatement",
        "executeVarList", "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement",
        "alterUserStatement", "alterUserList", "alterUser", "oldAlterUser", "userFunction",
        "createUserStatement", "createUserTail", "userAttributes", "defaultRoleClause",
        "requireClause", "connectOptions", "accountLockPasswordExpireOptions",
        "userAttribute", "dropUserStatement", "grantStatement", "grantTargetList",
        "grantOptions", "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause",
        "renameUserStatement", "revokeStatement", "aclType", "roleOrPrivilegesList",
        "roleOrPrivilege", "grantIdentifier", "requireList", "requireListElement",
        "grantOption", "setRoleStatement", "roleList", "role", "tableAdministrationStatement",
        "histogram", "checkOption", "repairType", "installUninstallStatement",
        "setStatement", "startOptionValueList", "transactionCharacteristics",
        "transactionAccessMode", "isolationLevel", "optionValueListContinued",
        "optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType",
        "optionValueFollowingOptionType", "setExprOrDefault", "showDatabasesStatement",
        "showTablesStatement", "showTriggersStatement", "showEventsStatement",
        "showTableStatusStatement", "showOpenTablesStatement", "showPluginsStatement",
        "showEngineLogsStatement", "showEngineMutexStatement", "showEngineStatusStatement",
        "showColumnsStatement", "showBinaryLogsStatement", "showReplicasStatement",
        "showBinlogEventsStatement", "showRelaylogEventsStatement", "showKeysStatement",
        "showEnginesStatement", "showCountWarningsStatement", "showCountErrorsStatement",
        "showWarningsStatement", "showErrorsStatement", "showProfilesStatement",
        "showProfileStatement", "showStatusStatement", "showProcessListStatement",
        "showVariablesStatement", "showCharacterSetStatement", "showCollationStatement",
        "showPrivilegesStatement", "showGrantsStatement", "showCreateDatabaseStatement",
        "showCreateTableStatement", "showCreateViewStatement", "showMasterStatusStatement",
        "showReplicaStatusStatement", "showCreateProcedureStatement", "showCreateFunctionStatement",
        "showCreateTriggerStatement", "showCreateProcedureStatusStatement", "showCreateFunctionStatusStatement",
        "showCreateProcedureCodeStatement", "showCreateFunctionCodeStatement",
        "showCreateEventStatement", "showCreateUserStatement", "showCommandType",
        "engineOrAll", "fromOrIn", "inDb", "profileDefinitions", "profileDefinition",
        "otherAdministrativeStatement", "keyCacheListOrParts", "keyCacheList",
        "assignToKeycache", "assignToKeycachePartition", "cacheKeyList", "keyUsageElement",
        "keyUsageList", "flushOption", "logType", "flushTables", "flushTablesOptions",
        "preloadTail", "preloadList", "preloadKeys", "adminPartition", "resourceGroupManagement",
        "createResourceGroup", "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority",
        "resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup",
        "threadIdList", "dropResourceGroup", "utilityStatement", "describeStatement",
        "explainStatement", "explainableStatement", "helpCommand", "useCommand",
        "restartServer", "expr", "boolPri", "compOp", "predicate", "predicateOperations",
        "bitExpr", "simpleExpr", "arrayCast", "jsonOperator", "sumExpr", "groupingOperation",
        "windowFunctionCall", "windowingClause", "leadLagInfo", "stableInteger",
        "paramOrVar", "nullTreatment", "jsonFunction", "inSumExpr", "identListArg",
        "identList", "fulltextOptions", "runtimeFunctionCall", "returningType",
        "geometryFunction", "timeFunctionParameters", "fractionalPrecision", "weightStringLevels",
        "weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction",
        "functionCall", "udfExprList", "udfExpr", "userVariable", "inExpressionUserVariableAssignment",
        "rvalueSystemOrUserVariable", "lvalueVariable", "rvalueSystemVariable",
        "whenExpression", "thenExpression", "elseExpression", "castType", "exprList",
        "charset", "notRule", "not2Rule", "interval", "intervalTimeStamp", "exprListWithParentheses",
        "exprWithParentheses", "simpleExprWithParentheses", "orderList", "orderExpression",
        "groupList", "groupingExpression", "channel", "compoundStatement", "returnStatement",
        "ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement",
        "elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock",
        "labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock",
        "spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration",
        "spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration",
        "iterateStatement", "leaveStatement", "getDiagnosticsStatement", "signalAllowedExpr",
        "statementInformationItem", "conditionInformationItem", "signalInformationItemName",
        "signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen",
        "cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences",
        "checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName",
        "fieldDefinition", "columnAttribute", "columnFormat", "storageMedia",
        "now", "nowOrSignedLiteral", "gcolAttribute", "references", "deleteOption",
        "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression",
        "keyListVariants", "indexType", "indexOption", "commonIndexOption", "visibility",
        "indexTypeClause", "fulltextIndexOption", "spatialIndexOption", "dataTypeDefinition",
        "dataType", "nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary",
        "ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", "functionDatetimePrecision",
        "charsetName", "collationName", "createTableOptions", "createTableOptionsEtc",
        "createPartitioningEtc", "createTableOptionsSpaceSeparated", "createTableOption",
        "ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset",
        "partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm",
        "partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption",
        "subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem",
        "definerClause", "ifExists", "ifNotExists", "ignoreUnknownUser", "procedureParameter",
        "functionParameter", "collate", "typeWithOptCollate", "schemaIdentifierPair",
        "viewRefList", "updateList", "updateElement", "charsetClause", "fieldsClause",
        "fieldTerm", "linesClause", "lineTerm", "userList", "createUserList",
        "createUser", "createUserWithMfa", "identification", "identifiedByPassword",
        "identifiedByRandomPassword", "identifiedWithPlugin", "identifiedWithPluginAsAuth",
        "identifiedWithPluginByPassword", "identifiedWithPluginByRandomPassword",
        "initialAuth", "retainCurrentPassword", "discardOldPassword", "userRegistration",
        "factor", "replacePassword", "userIdentifierOrText", "user", "likeClause",
        "likeOrWhere", "onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier",
        "columnName", "columnInternalRef", "columnInternalRefList", "columnRef",
        "insertIdentifier", "indexName", "indexRef", "tableWild", "schemaName",
        "schemaRef", "procedureName", "procedureRef", "functionName", "functionRef",
        "triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName",
        "tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef",
        "udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef",
        "tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList",
        "parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "pluginRef",
        "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", "identifier",
        "identifierList", "identifierListWithParentheses", "qualifiedIdentifier",
        "simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number",
        "ulonglong_number", "real_ulonglong_number", "signedLiteral", "signedLiteralOrNull",
        "literal", "literalOrNull", "nullAsLiteral", "stringList", "textStringLiteral",
        "textString", "textStringHash", "textLiteral", "textStringNoLinebreak",
        "textStringLiteralList", "numLiteral", "boolLiteral", "nullLiteral", "int64Literal",
        "temporalLiteral", "floatOptions", "standardFloatOptions", "precision",
        "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", "sizeNumber",
        "parentheses", "equal", "optionType", "rvalueSystemVariableType", "setVarIdentType",
        "jsonAttribute", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels",
        "identifierKeywordsAmbiguous2Labels", "labelKeyword", "identifierKeywordsAmbiguous3Roles",
        "identifierKeywordsUnambiguous", "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables",
        "roleOrIdentifierKeyword", "roleOrLabelKeyword",
    ];

    public getGrammarFileName(): string { return "MySQLParser.g4"; }
    public getLiteralNames(): string[] { return MySQLParser.literalNames; }
    public getSymbolicNames(): string[] { return MySQLParser.symbolicNames; }

    public override getRuleNames(): StringVector {
        const result = new StringVector();
        MySQLParser.ruleNames.forEach((ruleName) => { result.push_back(ruleName); });

        return result;
    }

    public override getSerializedATN(): SerializedATNView { return MySQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
        return new FailedPredicateException(this, predicate, message);
    }

    constructor(input: TokenStream) {
        super(input);


        const atn = this.getATN();
        const decisionsToDFA: DFA[] = [];
        const vector = atn.decisionToState;
        for (let i = 0; i < vector.size(); i++) {
            decisionsToDFA.push(new DFA(vector.get(i), i));
        }

        this.setInterpreter(new ParserATNSimulator(this, atn, decisionsToDFA, new PredictionContextCache()));
    }
    // @RuleVersion(0)
    public query(): QueryContext {
        let localctx: QueryContext = new QueryContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 0, MySQLParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1459);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 2, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1454);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 0, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(1452);
                                        this.simpleStatement();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(1453);
                                        this.beginWork();
                                    }
                                    break;
                            }
                            this.setState(1457);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 774) {
                                {
                                    this.setState(1456);
                                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                                }
                            }

                        }
                        break;
                }
                this.setState(1461);
                this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public simpleStatement(): SimpleStatementContext {
        let localctx: SimpleStatementContext = new SimpleStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 2, MySQLParser.RULE_simpleStatement);
        try {
            this.setState(1536);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 3, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1463);
                        this.alterStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1464);
                        this.createStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(1465);
                        this.dropStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(1466);
                        this.renameTableStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(1467);
                        this.truncateTableStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(1468);
                        this.importStatement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(1469);
                        this.callStatement();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(1470);
                        this.deleteStatement();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(1471);
                        this.doStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(1472);
                        this.handlerStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(1473);
                        this.insertStatement();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(1474);
                        this.loadStatement();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(1475);
                        this.replaceStatement();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                        this.setState(1476);
                        this.selectStatement();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                        this.setState(1477);
                        this.updateStatement();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                        this.setState(1478);
                        this.transactionOrLockingStatement();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                        this.setState(1479);
                        this.replicationStatement();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                        this.setState(1480);
                        this.preparedStatement();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                        this.setState(1481);
                        this.cloneStatement();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                        this.setState(1482);
                        this.accountManagementStatement();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                        this.setState(1483);
                        this.tableAdministrationStatement();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                        this.setState(1484);
                        this.installUninstallStatement();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                        this.setState(1485);
                        this.setStatement();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                        this.setState(1486);
                        this.showDatabasesStatement();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                        this.setState(1487);
                        this.showTablesStatement();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                        this.setState(1488);
                        this.showTriggersStatement();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                        this.setState(1489);
                        this.showEventsStatement();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                        this.setState(1490);
                        this.showTableStatusStatement();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                        this.setState(1491);
                        this.showOpenTablesStatement();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                        this.setState(1492);
                        this.showPluginsStatement();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                        this.setState(1493);
                        this.showEngineLogsStatement();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                        this.setState(1494);
                        this.showEngineMutexStatement();
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                        this.setState(1495);
                        this.showEngineStatusStatement();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                        this.setState(1496);
                        this.showColumnsStatement();
                    }
                    break;
                case 35:
                    this.enterOuterAlt(localctx, 35);
                    {
                        this.setState(1497);
                        this.showBinaryLogsStatement();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(localctx, 36);
                    {
                        this.setState(1498);
                        this.showReplicasStatement();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(localctx, 37);
                    {
                        this.setState(1499);
                        this.showBinlogEventsStatement();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(localctx, 38);
                    {
                        this.setState(1500);
                        this.showRelaylogEventsStatement();
                    }
                    break;
                case 39:
                    this.enterOuterAlt(localctx, 39);
                    {
                        this.setState(1501);
                        this.showKeysStatement();
                    }
                    break;
                case 40:
                    this.enterOuterAlt(localctx, 40);
                    {
                        this.setState(1502);
                        this.showEnginesStatement();
                    }
                    break;
                case 41:
                    this.enterOuterAlt(localctx, 41);
                    {
                        this.setState(1503);
                        this.showCountWarningsStatement();
                    }
                    break;
                case 42:
                    this.enterOuterAlt(localctx, 42);
                    {
                        this.setState(1504);
                        this.showCountErrorsStatement();
                    }
                    break;
                case 43:
                    this.enterOuterAlt(localctx, 43);
                    {
                        this.setState(1505);
                        this.showWarningsStatement();
                    }
                    break;
                case 44:
                    this.enterOuterAlt(localctx, 44);
                    {
                        this.setState(1506);
                        this.showErrorsStatement();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(localctx, 45);
                    {
                        this.setState(1507);
                        this.showProfilesStatement();
                    }
                    break;
                case 46:
                    this.enterOuterAlt(localctx, 46);
                    {
                        this.setState(1508);
                        this.showProfileStatement();
                    }
                    break;
                case 47:
                    this.enterOuterAlt(localctx, 47);
                    {
                        this.setState(1509);
                        this.showStatusStatement();
                    }
                    break;
                case 48:
                    this.enterOuterAlt(localctx, 48);
                    {
                        this.setState(1510);
                        this.showProcessListStatement();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(localctx, 49);
                    {
                        this.setState(1511);
                        this.showVariablesStatement();
                    }
                    break;
                case 50:
                    this.enterOuterAlt(localctx, 50);
                    {
                        this.setState(1512);
                        this.showCharacterSetStatement();
                    }
                    break;
                case 51:
                    this.enterOuterAlt(localctx, 51);
                    {
                        this.setState(1513);
                        this.showCollationStatement();
                    }
                    break;
                case 52:
                    this.enterOuterAlt(localctx, 52);
                    {
                        this.setState(1514);
                        this.showPrivilegesStatement();
                    }
                    break;
                case 53:
                    this.enterOuterAlt(localctx, 53);
                    {
                        this.setState(1515);
                        this.showGrantsStatement();
                    }
                    break;
                case 54:
                    this.enterOuterAlt(localctx, 54);
                    {
                        this.setState(1516);
                        this.showCreateDatabaseStatement();
                    }
                    break;
                case 55:
                    this.enterOuterAlt(localctx, 55);
                    {
                        this.setState(1517);
                        this.showCreateTableStatement();
                    }
                    break;
                case 56:
                    this.enterOuterAlt(localctx, 56);
                    {
                        this.setState(1518);
                        this.showCreateViewStatement();
                    }
                    break;
                case 57:
                    this.enterOuterAlt(localctx, 57);
                    {
                        this.setState(1519);
                        this.showMasterStatusStatement();
                    }
                    break;
                case 58:
                    this.enterOuterAlt(localctx, 58);
                    {
                        this.setState(1520);
                        this.showReplicaStatusStatement();
                    }
                    break;
                case 59:
                    this.enterOuterAlt(localctx, 59);
                    {
                        this.setState(1521);
                        this.showCreateProcedureStatement();
                    }
                    break;
                case 60:
                    this.enterOuterAlt(localctx, 60);
                    {
                        this.setState(1522);
                        this.showCreateFunctionStatement();
                    }
                    break;
                case 61:
                    this.enterOuterAlt(localctx, 61);
                    {
                        this.setState(1523);
                        this.showCreateTriggerStatement();
                    }
                    break;
                case 62:
                    this.enterOuterAlt(localctx, 62);
                    {
                        this.setState(1524);
                        this.showCreateProcedureStatusStatement();
                    }
                    break;
                case 63:
                    this.enterOuterAlt(localctx, 63);
                    {
                        this.setState(1525);
                        this.showCreateFunctionStatusStatement();
                    }
                    break;
                case 64:
                    this.enterOuterAlt(localctx, 64);
                    {
                        this.setState(1526);
                        this.showCreateProcedureCodeStatement();
                    }
                    break;
                case 65:
                    this.enterOuterAlt(localctx, 65);
                    {
                        this.setState(1527);
                        this.showCreateFunctionCodeStatement();
                    }
                    break;
                case 66:
                    this.enterOuterAlt(localctx, 66);
                    {
                        this.setState(1528);
                        this.showCreateEventStatement();
                    }
                    break;
                case 67:
                    this.enterOuterAlt(localctx, 67);
                    {
                        this.setState(1529);
                        this.showCreateUserStatement();
                    }
                    break;
                case 68:
                    this.enterOuterAlt(localctx, 68);
                    {
                        this.setState(1530);
                        this.resourceGroupManagement();
                    }
                    break;
                case 69:
                    this.enterOuterAlt(localctx, 69);
                    {
                        this.setState(1531);
                        this.otherAdministrativeStatement();
                    }
                    break;
                case 70:
                    this.enterOuterAlt(localctx, 70);
                    {
                        this.setState(1532);
                        this.utilityStatement();
                    }
                    break;
                case 71:
                    this.enterOuterAlt(localctx, 71);
                    {
                        this.setState(1533);
                        this.getDiagnosticsStatement();
                    }
                    break;
                case 72:
                    this.enterOuterAlt(localctx, 72);
                    {
                        this.setState(1534);
                        this.signalStatement();
                    }
                    break;
                case 73:
                    this.enterOuterAlt(localctx, 73);
                    {
                        this.setState(1535);
                        this.resignalStatement();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterStatement(): AlterStatementContext {
        let localctx: AlterStatementContext = new AlterStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 4, MySQLParser.RULE_alterStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1538);
                this.match(MySQLParser.ALTER_SYMBOL);
                this.setState(1559);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 6, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1539);
                            this.alterTable();
                        }
                        break;
                    case 2:
                        {
                            this.setState(1540);
                            this.alterDatabase();
                        }
                        break;
                    case 3:
                        {
                            this.setState(1541);
                            this.match(MySQLParser.PROCEDURE_SYMBOL);
                            this.setState(1542);
                            this.procedureRef();
                            this.setState(1544);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 75 || _la === 90 || _la === 137 || _la === 267 || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la === 433 || _la === 537) {
                                {
                                    this.setState(1543);
                                    this.routineAlterOptions();
                                }
                            }

                        }
                        break;
                    case 4:
                        {
                            this.setState(1546);
                            this.match(MySQLParser.FUNCTION_SYMBOL);
                            this.setState(1547);
                            this.functionRef();
                            this.setState(1549);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 75 || _la === 90 || _la === 137 || _la === 267 || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la === 433 || _la === 537) {
                                {
                                    this.setState(1548);
                                    this.routineAlterOptions();
                                }
                            }

                        }
                        break;
                    case 5:
                        {
                            this.setState(1551);
                            this.alterView();
                        }
                        break;
                    case 6:
                        {
                            this.setState(1552);
                            this.alterEvent();
                        }
                        break;
                    case 7:
                        {
                            this.setState(1553);
                            this.alterTablespace();
                        }
                        break;
                    case 8:
                        {
                            this.setState(1554);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(1555);
                            this.alterUndoTablespace();
                        }
                        break;
                    case 9:
                        {
                            this.setState(1556);
                            this.alterLogfileGroup();
                        }
                        break;
                    case 10:
                        {
                            this.setState(1557);
                            this.alterServer();
                        }
                        break;
                    case 11:
                        {
                            this.setState(1558);
                            this.alterInstanceStatement();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterDatabase(): AlterDatabaseContext {
        let localctx: AlterDatabaseContext = new AlterDatabaseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 6, MySQLParser.RULE_alterDatabase);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1561);
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.setState(1562);
                this.schemaRef();
                this.setState(1564);
                this.getErrorHandler().sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.setState(1563);
                                    this.alterDatabaseOption();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.setState(1566);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 7, this.getCtx());
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterDatabaseOption(): AlterDatabaseOptionContext {
        let localctx: AlterDatabaseOptionContext = new AlterDatabaseOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 8, MySQLParser.RULE_alterDatabaseOption);
        let _la: number;
        try {
            this.setState(1575);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 9, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1568);
                        this.createDatabaseOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1569);
                        this.match(MySQLParser.READ_SYMBOL);
                        this.setState(1570);
                        this.match(MySQLParser.ONLY_SYMBOL);
                        this.setState(1572);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(1571);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(1574);
                        this.ternaryOption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterEvent(): AlterEventContext {
        let localctx: AlterEventContext = new AlterEventContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 10, MySQLParser.RULE_alterEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1578);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 130) {
                    {
                        this.setState(1577);
                        this.definerClause();
                    }
                }

                this.setState(1580);
                this.match(MySQLParser.EVENT_SYMBOL);
                this.setState(1581);
                this.eventRef();
                this.setState(1585);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 11, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1582);
                            this.match(MySQLParser.ON_SYMBOL);
                            this.setState(1583);
                            this.match(MySQLParser.SCHEDULE_SYMBOL);
                            this.setState(1584);
                            this.schedule();
                        }
                        break;
                }
                this.setState(1593);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 383) {
                    {
                        this.setState(1587);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(1588);
                        this.match(MySQLParser.COMPLETION_SYMBOL);
                        this.setState(1590);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 371) {
                            {
                                this.setState(1589);
                                this.match(MySQLParser.NOT_SYMBOL);
                            }
                        }

                        this.setState(1592);
                        this.match(MySQLParser.PRESERVE_SYMBOL);
                    }
                }

                this.setState(1598);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 453) {
                    {
                        this.setState(1595);
                        this.match(MySQLParser.RENAME_SYMBOL);
                        this.setState(1596);
                        this.match(MySQLParser.TO_SYMBOL);
                        this.setState(1597);
                        this.identifier();
                    }
                }

                this.setState(1606);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 156:
                        {
                            this.setState(1600);
                            this.match(MySQLParser.ENABLE_SYMBOL);
                        }
                        break;
                    case 140:
                        {
                            this.setState(1601);
                            this.match(MySQLParser.DISABLE_SYMBOL);
                            this.setState(1604);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 383) {
                                {
                                    this.setState(1602);
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.setState(1603);
                                    this.replica();
                                }
                            }

                        }
                        break;
                    case -1:
                    case 75:
                    case 147:
                    case 774:
                        break;
                    default:
                        break;
                }
                this.setState(1610);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 75) {
                    {
                        this.setState(1608);
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(1609);
                        this.textLiteral();
                    }
                }

                this.setState(1614);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 147) {
                    {
                        this.setState(1612);
                        this.match(MySQLParser.DO_SYMBOL);
                        this.setState(1613);
                        this.compoundStatement();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterLogfileGroup(): AlterLogfileGroupContext {
        let localctx: AlterLogfileGroupContext = new AlterLogfileGroupContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 12, MySQLParser.RULE_alterLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1616);
                this.match(MySQLParser.LOGFILE_SYMBOL);
                this.setState(1617);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(1618);
                this.logfileGroupRef();
                this.setState(1619);
                this.match(MySQLParser.ADD_SYMBOL);
                this.setState(1620);
                this.match(MySQLParser.UNDOFILE_SYMBOL);
                this.setState(1621);
                this.textLiteral();
                this.setState(1623);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 163 || _la === 238 || _la === 374 || _la === 553 || _la === 638) {
                    {
                        this.setState(1622);
                        this.alterLogfileGroupOptions();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext {
        let localctx: AlterLogfileGroupOptionsContext = new AlterLogfileGroupOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 14, MySQLParser.RULE_alterLogfileGroupOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1625);
                this.alterLogfileGroupOption();
                this.setState(1632);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 163 || _la === 238 || _la === 374 || _la === 553 || _la === 638 || _la === 773) {
                    {
                        {
                            this.setState(1627);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 773) {
                                {
                                    this.setState(1626);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }

                            this.setState(1629);
                            this.alterLogfileGroupOption();
                        }
                    }
                    this.setState(1634);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterLogfileGroupOption(): AlterLogfileGroupOptionContext {
        let localctx: AlterLogfileGroupOptionContext = new AlterLogfileGroupOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 16, MySQLParser.RULE_alterLogfileGroupOption);
        try {
            this.setState(1638);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 238:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1635);
                        this.tsOptionInitialSize();
                    }
                    break;
                case 163:
                case 553:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1636);
                        this.tsOptionEngine();
                    }
                    break;
                case 374:
                case 638:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(1637);
                        this.tsOptionWait();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterServer(): AlterServerContext {
        let localctx: AlterServerContext = new AlterServerContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 18, MySQLParser.RULE_alterServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1640);
                this.match(MySQLParser.SERVER_SYMBOL);
                this.setState(1641);
                this.serverRef();
                this.setState(1642);
                this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterTable(): AlterTableContext {
        let localctx: AlterTableContext = new AlterTableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 20, MySQLParser.RULE_alterTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1645);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 380 || _la === 385) {
                    {
                        this.setState(1644);
                        this.onlineOption();
                    }
                }

                this.setState(1647);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(1648);
                this.tableRef();
                this.setState(1650);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 24, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1649);
                            this.alterTableActions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterTableActions(): AlterTableActionsContext {
        let localctx: AlterTableActionsContext = new AlterTableActionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 22, MySQLParser.RULE_alterTableActions);
        try {
            this.setState(1665);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 27, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1652);
                        this.alterCommandList();
                        this.setState(1655);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 405:
                                {
                                    this.setState(1653);
                                    this.partitionClause();
                                }
                                break;
                            case 452:
                                {
                                    this.setState(1654);
                                    this.removePartitioning();
                                }
                                break;
                            case -1:
                            case 774:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1657);
                        this.partitionClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(1658);
                        this.removePartitioning();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(1662);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 26, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1659);
                                    this.alterCommandsModifierList();
                                    this.setState(1660);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                                break;
                        }
                        this.setState(1664);
                        this.standaloneAlterCommands();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterCommandList(): AlterCommandListContext {
        let localctx: AlterCommandListContext = new AlterCommandListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 24, MySQLParser.RULE_alterCommandList);
        try {
            this.setState(1674);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 29, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1667);
                        this.alterCommandsModifierList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1671);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 28, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1668);
                                    this.alterCommandsModifierList();
                                    this.setState(1669);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                                break;
                        }
                        this.setState(1673);
                        this.alterList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterCommandsModifierList(): AlterCommandsModifierListContext {
        let localctx: AlterCommandsModifierListContext = new AlterCommandsModifierListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 26, MySQLParser.RULE_alterCommandsModifierList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1676);
                this.alterCommandsModifier();
                this.setState(1681);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 30, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(1677);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(1678);
                                this.alterCommandsModifier();
                            }
                        }
                    }
                    this.setState(1683);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 30, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public standaloneAlterCommands(): StandaloneAlterCommandsContext {
        let localctx: StandaloneAlterCommandsContext = new StandaloneAlterCommandsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 28, MySQLParser.RULE_standaloneAlterCommands);
        let _la: number;
        try {
            this.setState(1691);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 31, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1684);
                        this.match(MySQLParser.DISCARD_SYMBOL);
                        this.setState(1685);
                        this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1686);
                        this.match(MySQLParser.IMPORT_SYMBOL);
                        this.setState(1687);
                        this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(1688);
                        this.alterPartition();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(1689);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(1690);
                        _la = this.input().LA(1);
                        if (!(_la === 722 || _la === 723)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterPartition(): AlterPartitionContext {
        let localctx: AlterPartitionContext = new AlterPartitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 30, MySQLParser.RULE_alterPartition);
        let _la: number;
        try {
            this.setState(1787);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 4:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1693);
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.setState(1694);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1696);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 284 || _la === 375) {
                            {
                                this.setState(1695);
                                this.noWriteToBinLog();
                            }
                        }

                        this.setState(1701);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 776:
                                {
                                    this.setState(1698);
                                    this.partitionDefinitions();
                                }
                                break;
                            case 404:
                                {
                                    this.setState(1699);
                                    this.match(MySQLParser.PARTITIONS_SYMBOL);
                                    this.setState(1700);
                                    this.real_ulong_number();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 148:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1703);
                        this.match(MySQLParser.DROP_SYMBOL);
                        this.setState(1704);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1705);
                        this.identifierList();
                    }
                    break;
                case 438:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(1706);
                        this.match(MySQLParser.REBUILD_SYMBOL);
                        this.setState(1707);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1709);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 34, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1708);
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.setState(1711);
                        this.allOrPartitionNameList();
                    }
                    break;
                case 388:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(1712);
                        this.match(MySQLParser.OPTIMIZE_SYMBOL);
                        this.setState(1713);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1715);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 35, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1714);
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.setState(1717);
                        this.allOrPartitionNameList();
                        this.setState(1719);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 284 || _la === 375) {
                            {
                                this.setState(1718);
                                this.noWriteToBinLog();
                            }
                        }

                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(1721);
                        this.match(MySQLParser.ANALYZE_SYMBOL);
                        this.setState(1722);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1724);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 37, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1723);
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.setState(1726);
                        this.allOrPartitionNameList();
                    }
                    break;
                case 62:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(1727);
                        this.match(MySQLParser.CHECK_SYMBOL);
                        this.setState(1728);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1729);
                        this.allOrPartitionNameList();
                        this.setState(1733);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 56 || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 1048593) !== 0) || _la === 333 || _la === 431) {
                            {
                                {
                                    this.setState(1730);
                                    this.checkOption();
                                }
                            }
                            this.setState(1735);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                case 455:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(1736);
                        this.match(MySQLParser.REPAIR_SYMBOL);
                        this.setState(1737);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1739);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 39, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1738);
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.setState(1741);
                        this.allOrPartitionNameList();
                        this.setState(1745);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 180 || _la === 431 || _la === 619) {
                            {
                                {
                                    this.setState(1742);
                                    this.repairType();
                                }
                            }
                            this.setState(1747);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                case 67:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(1748);
                        this.match(MySQLParser.COALESCE_SYMBOL);
                        this.setState(1749);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1751);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 284 || _la === 375) {
                            {
                                this.setState(1750);
                                this.noWriteToBinLog();
                            }
                        }

                        this.setState(1753);
                        this.real_ulong_number();
                    }
                    break;
                case 597:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(1754);
                        this.match(MySQLParser.TRUNCATE_SYMBOL);
                        this.setState(1755);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1756);
                        this.allOrPartitionNameList();
                    }
                    break;
                case 454:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(1757);
                        this.match(MySQLParser.REORGANIZE_SYMBOL);
                        this.setState(1758);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1760);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 42, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1759);
                                    this.noWriteToBinLog();
                                }
                                break;
                        }
                        this.setState(1766);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 43, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1762);
                                    this.identifierList();
                                    this.setState(1763);
                                    this.match(MySQLParser.INTO_SYMBOL);
                                    this.setState(1764);
                                    this.partitionDefinitions();
                                }
                                break;
                        }
                    }
                    break;
                case 172:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(1768);
                        this.match(MySQLParser.EXCHANGE_SYMBOL);
                        this.setState(1769);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1770);
                        this.identifier();
                        this.setState(1771);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(1772);
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.setState(1773);
                        this.tableRef();
                        this.setState(1775);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 645 || _la === 646) {
                            {
                                this.setState(1774);
                                this.withValidation();
                            }
                        }

                    }
                    break;
                case 141:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(1777);
                        this.match(MySQLParser.DISCARD_SYMBOL);
                        this.setState(1778);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1779);
                        this.allOrPartitionNameList();
                        this.setState(1780);
                        this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                case 234:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(1782);
                        this.match(MySQLParser.IMPORT_SYMBOL);
                        this.setState(1783);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(1784);
                        this.allOrPartitionNameList();
                        this.setState(1785);
                        this.match(MySQLParser.TABLESPACE_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterList(): AlterListContext {
        let localctx: AlterListContext = new AlterListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 32, MySQLParser.RULE_alterList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1791);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 46, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1789);
                            this.alterListItem();
                        }
                        break;
                    case 2:
                        {
                            this.setState(1790);
                            this.createTableOptionsSpaceSeparated();
                        }
                        break;
                }
                this.setState(1801);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(1793);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(1797);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 47, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(1794);
                                        this.alterListItem();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(1795);
                                        this.alterCommandsModifier();
                                    }
                                    break;
                                case 3:
                                    {
                                        this.setState(1796);
                                        this.createTableOptionsSpaceSeparated();
                                    }
                                    break;
                            }
                        }
                    }
                    this.setState(1803);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterCommandsModifier(): AlterCommandsModifierContext {
        let localctx: AlterCommandsModifierContext = new AlterCommandsModifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 34, MySQLParser.RULE_alterCommandsModifier);
        try {
            this.setState(1807);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 9:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1804);
                        this.alterAlgorithmOption();
                    }
                    break;
                case 287:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1805);
                        this.alterLockOption();
                    }
                    break;
                case 645:
                case 646:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(1806);
                        this.withValidation();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterListItem(): AlterListItemContext {
        let localctx: AlterListItemContext = new AlterListItemContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 36, MySQLParser.RULE_alterListItem);
        let _la: number;
        try {
            this.setState(1944);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 67, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1809);
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.setState(1811);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 50, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1810);
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                }
                                break;
                        }
                        this.setState(1825);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 53, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1813);
                                    this.identifier();
                                    this.setState(1814);
                                    this.fieldDefinition();
                                    this.setState(1816);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 51, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(1815);
                                                this.checkOrReferences();
                                            }
                                            break;
                                    }
                                    this.setState(1819);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 6 || _la === 191) {
                                        {
                                            this.setState(1818);
                                            this.place();
                                        }
                                    }

                                }
                                break;
                            case 2:
                                {
                                    this.setState(1821);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(1822);
                                    this.tableElementList();
                                    this.setState(1823);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1827);
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.setState(1828);
                        this.tableConstraintDef();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(1829);
                        this.match(MySQLParser.CHANGE_SYMBOL);
                        this.setState(1831);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 54, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1830);
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                }
                                break;
                        }
                        this.setState(1833);
                        this.columnInternalRef();
                        this.setState(1834);
                        this.identifier();
                        this.setState(1835);
                        this.fieldDefinition();
                        this.setState(1837);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 6 || _la === 191) {
                            {
                                this.setState(1836);
                                this.place();
                            }
                        }

                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(1839);
                        this.match(MySQLParser.MODIFY_SYMBOL);
                        this.setState(1841);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 56, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1840);
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                }
                                break;
                        }
                        this.setState(1843);
                        this.columnInternalRef();
                        this.setState(1844);
                        this.fieldDefinition();
                        this.setState(1846);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 6 || _la === 191) {
                            {
                                this.setState(1845);
                                this.place();
                            }
                        }

                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(1848);
                        this.match(MySQLParser.DROP_SYMBOL);
                        this.setState(1870);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 60, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1850);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 58, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(1849);
                                                this.match(MySQLParser.COLUMN_SYMBOL);
                                            }
                                            break;
                                    }
                                    this.setState(1852);
                                    this.columnInternalRef();
                                    this.setState(1854);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 49 || _la === 471) {
                                        {
                                            this.setState(1853);
                                            this.restrict();
                                        }
                                    }

                                }
                                break;
                            case 2:
                                {
                                    this.setState(1856);
                                    this.match(MySQLParser.FOREIGN_SYMBOL);
                                    this.setState(1857);
                                    this.match(MySQLParser.KEY_SYMBOL);
                                    this.setState(1858);
                                    this.columnInternalRef();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(1859);
                                    this.match(MySQLParser.PRIMARY_SYMBOL);
                                    this.setState(1860);
                                    this.match(MySQLParser.KEY_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.setState(1861);
                                    this.keyOrIndex();
                                    this.setState(1862);
                                    this.indexRef();
                                }
                                break;
                            case 5:
                                {
                                    this.setState(1864);
                                    if (!(this.serverVersion >= 80017)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                                    }
                                    this.setState(1865);
                                    this.match(MySQLParser.CHECK_SYMBOL);
                                    this.setState(1866);
                                    this.identifier();
                                }
                                break;
                            case 6:
                                {
                                    this.setState(1867);
                                    if (!(this.serverVersion >= 80019)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80019");
                                    }
                                    this.setState(1868);
                                    this.match(MySQLParser.CONSTRAINT_SYMBOL);
                                    this.setState(1869);
                                    this.identifier();
                                }
                                break;
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(1872);
                        this.match(MySQLParser.DISABLE_SYMBOL);
                        this.setState(1873);
                        this.match(MySQLParser.KEYS_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(1874);
                        this.match(MySQLParser.ENABLE_SYMBOL);
                        this.setState(1875);
                        this.match(MySQLParser.KEYS_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(1876);
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.setState(1878);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 61, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1877);
                                    this.match(MySQLParser.COLUMN_SYMBOL);
                                }
                                break;
                        }
                        this.setState(1880);
                        this.columnInternalRef();
                        this.setState(1893);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 63, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1881);
                                    this.match(MySQLParser.SET_SYMBOL);
                                    this.setState(1882);
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                    this.setState(1886);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 62, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(1883);
                                                if (!(this.serverVersion >= 80014)) {
                                                    throw this.createFailedPredicateException("this.serverVersion >= 80014");
                                                }
                                                this.setState(1884);
                                                this.exprWithParentheses();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.setState(1885);
                                                this.signedLiteralOrNull();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.setState(1888);
                                    this.match(MySQLParser.DROP_SYMBOL);
                                    this.setState(1889);
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.setState(1890);
                                    if (!(this.serverVersion >= 80024)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                                    }
                                    this.setState(1891);
                                    this.match(MySQLParser.SET_SYMBOL);
                                    this.setState(1892);
                                    this.visibility();
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(1895);
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.setState(1896);
                        this.match(MySQLParser.INDEX_SYMBOL);
                        this.setState(1897);
                        this.indexRef();
                        this.setState(1898);
                        this.visibility();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(1900);
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.setState(1901);
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.setState(1902);
                        this.match(MySQLParser.CHECK_SYMBOL);
                        this.setState(1903);
                        this.identifier();
                        this.setState(1904);
                        this.constraintEnforcement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(1906);
                        if (!(this.serverVersion >= 80019)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80019");
                        }
                        this.setState(1907);
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.setState(1908);
                        this.match(MySQLParser.CONSTRAINT_SYMBOL);
                        this.setState(1909);
                        this.identifier();
                        this.setState(1910);
                        this.constraintEnforcement();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(1912);
                        this.match(MySQLParser.RENAME_SYMBOL);
                        this.setState(1913);
                        this.match(MySQLParser.COLUMN_SYMBOL);
                        this.setState(1914);
                        this.columnInternalRef();
                        this.setState(1915);
                        this.match(MySQLParser.TO_SYMBOL);
                        this.setState(1916);
                        this.identifier();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(1918);
                        this.match(MySQLParser.RENAME_SYMBOL);
                        this.setState(1920);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 64, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1919);
                                    _la = this.input().LA(1);
                                    if (!(_la === 17 || _la === 590)) {
                                        this.getErrorHandler().recoverInline(this);
                                    }
                                    else {
                                        this.getErrorHandler().reportMatch(this);
                                        this.consume();
                                    }
                                }
                                break;
                        }
                        this.setState(1922);
                        this.tableName();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                        this.setState(1923);
                        this.match(MySQLParser.RENAME_SYMBOL);
                        this.setState(1924);
                        this.keyOrIndex();
                        this.setState(1925);
                        this.indexRef();
                        this.setState(1926);
                        this.match(MySQLParser.TO_SYMBOL);
                        this.setState(1927);
                        this.indexName();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                        this.setState(1929);
                        this.match(MySQLParser.CONVERT_SYMBOL);
                        this.setState(1930);
                        this.match(MySQLParser.TO_SYMBOL);
                        this.setState(1931);
                        this.charset();
                        this.setState(1935);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 65, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(1932);
                                    if (!(this.serverVersion >= 80014)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                                    }
                                    this.setState(1933);
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(1934);
                                    this.charsetName();
                                }
                                break;
                        }
                        this.setState(1938);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 69) {
                            {
                                this.setState(1937);
                                this.collate();
                            }
                        }

                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                        this.setState(1940);
                        this.match(MySQLParser.FORCE_SYMBOL);
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                        this.setState(1941);
                        this.match(MySQLParser.ORDER_SYMBOL);
                        this.setState(1942);
                        this.match(MySQLParser.BY_SYMBOL);
                        this.setState(1943);
                        this.alterOrderList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public place(): PlaceContext {
        let localctx: PlaceContext = new PlaceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 38, MySQLParser.RULE_place);
        try {
            this.setState(1949);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 6:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1946);
                        this.match(MySQLParser.AFTER_SYMBOL);
                        this.setState(1947);
                        this.identifier();
                    }
                    break;
                case 191:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1948);
                        this.match(MySQLParser.FIRST_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public restrict(): RestrictContext {
        let localctx: RestrictContext = new RestrictContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 40, MySQLParser.RULE_restrict);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1951);
                _la = this.input().LA(1);
                if (!(_la === 49 || _la === 471)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterOrderList(): AlterOrderListContext {
        let localctx: AlterOrderListContext = new AlterOrderListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 42, MySQLParser.RULE_alterOrderList);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1953);
                this.identifier();
                this.setState(1955);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 18 || _la === 134) {
                    {
                        this.setState(1954);
                        this.direction();
                    }
                }

                this.setState(1964);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 71, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(1957);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(1958);
                                this.identifier();
                                this.setState(1960);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                                if (_la === 18 || _la === 134) {
                                    {
                                        this.setState(1959);
                                        this.direction();
                                    }
                                }

                            }
                        }
                    }
                    this.setState(1966);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 71, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterAlgorithmOption(): AlterAlgorithmOptionContext {
        let localctx: AlterAlgorithmOptionContext = new AlterAlgorithmOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 44, MySQLParser.RULE_alterAlgorithmOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1967);
                this.match(MySQLParser.ALGORITHM_SYMBOL);
                this.setState(1969);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 72, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1968);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(1973);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 73, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1971);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.setState(1972);
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterLockOption(): AlterLockOptionContext {
        let localctx: AlterLockOptionContext = new AlterLockOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 46, MySQLParser.RULE_alterLockOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1975);
                this.match(MySQLParser.LOCK_SYMBOL);
                this.setState(1977);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 74, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1976);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(1981);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 75, this.getCtx())) {
                    case 1:
                        {
                            this.setState(1979);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.setState(1980);
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
        let localctx: IndexLockAndAlgorithmContext = new IndexLockAndAlgorithmContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 48, MySQLParser.RULE_indexLockAndAlgorithm);
        let _la: number;
        try {
            this.setState(1991);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 9:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1983);
                        this.alterAlgorithmOption();
                        this.setState(1985);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 287) {
                            {
                                this.setState(1984);
                                this.alterLockOption();
                            }
                        }

                    }
                    break;
                case 287:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(1987);
                        this.alterLockOption();
                        this.setState(1989);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 9) {
                            {
                                this.setState(1988);
                                this.alterAlgorithmOption();
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public withValidation(): WithValidationContext {
        let localctx: WithValidationContext = new WithValidationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 50, MySQLParser.RULE_withValidation);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1993);
                _la = this.input().LA(1);
                if (!(_la === 645 || _la === 646)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(1994);
                this.match(MySQLParser.VALIDATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public removePartitioning(): RemovePartitioningContext {
        let localctx: RemovePartitioningContext = new RemovePartitioningContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 52, MySQLParser.RULE_removePartitioning);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(1996);
                this.match(MySQLParser.REMOVE_SYMBOL);
                this.setState(1997);
                this.match(MySQLParser.PARTITIONING_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        let localctx: AllOrPartitionNameListContext = new AllOrPartitionNameListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 54, MySQLParser.RULE_allOrPartitionNameList);
        try {
            this.setState(2001);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 79, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(1999);
                        this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2000);
                        this.identifierList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterTablespace(): AlterTablespaceContext {
        let localctx: AlterTablespaceContext = new AlterTablespaceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 56, MySQLParser.RULE_alterTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2003);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.setState(2004);
                this.tablespaceRef();
                this.setState(2016);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 81, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2005);
                            _la = this.input().LA(1);
                            if (!(_la === 4 || _la === 148)) {
                                this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(2006);
                            this.match(MySQLParser.DATAFILE_SYMBOL);
                            this.setState(2007);
                            this.textLiteral();
                            this.setState(2009);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 80, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(2008);
                                        this.alterTablespaceOptions();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(2011);
                            this.match(MySQLParser.RENAME_SYMBOL);
                            this.setState(2012);
                            this.match(MySQLParser.TO_SYMBOL);
                            this.setState(2013);
                            this.identifier();
                        }
                        break;
                    case 3:
                        {
                            this.setState(2014);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(2015);
                            this.alterTablespaceOptions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterUndoTablespace(): AlterUndoTablespaceContext {
        let localctx: AlterUndoTablespaceContext = new AlterUndoTablespaceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 58, MySQLParser.RULE_alterUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2018);
                this.match(MySQLParser.UNDO_SYMBOL);
                this.setState(2019);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.setState(2020);
                this.tablespaceRef();
                this.setState(2021);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(2022);
                _la = this.input().LA(1);
                if (!(_la === 724 || _la === 725)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(2024);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 163 || _la === 553) {
                    {
                        this.setState(2023);
                        this.undoTableSpaceOptions();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
        let localctx: UndoTableSpaceOptionsContext = new UndoTableSpaceOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 60, MySQLParser.RULE_undoTableSpaceOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2026);
                this.undoTableSpaceOption();
                this.setState(2033);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 163 || _la === 553 || _la === 773) {
                    {
                        {
                            this.setState(2028);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 773) {
                                {
                                    this.setState(2027);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }

                            this.setState(2030);
                            this.undoTableSpaceOption();
                        }
                    }
                    this.setState(2035);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public undoTableSpaceOption(): UndoTableSpaceOptionContext {
        let localctx: UndoTableSpaceOptionContext = new UndoTableSpaceOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 62, MySQLParser.RULE_undoTableSpaceOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2036);
                this.tsOptionEngine();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterTablespaceOptions(): AlterTablespaceOptionsContext {
        let localctx: AlterTablespaceOptionsContext = new AlterTablespaceOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 64, MySQLParser.RULE_alterTablespaceOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2038);
                this.alterTablespaceOption();
                this.setState(2045);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 86, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(2040);
                                this.getErrorHandler().sync(this);
                                switch (this.getInterpreter().adaptivePredict(this.input(), 85, this.getCtx())) {
                                    case 1:
                                        {
                                            this.setState(2039);
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                        break;
                                }
                                this.setState(2042);
                                this.alterTablespaceOption();
                            }
                        }
                    }
                    this.setState(2047);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 86, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterTablespaceOption(): AlterTablespaceOptionContext {
        let localctx: AlterTablespaceOptionContext = new AlterTablespaceOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 66, MySQLParser.RULE_alterTablespaceOption);
        try {
            this.setState(2060);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 88, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2048);
                        this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                        this.setState(2050);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 87, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(2049);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(2052);
                        this.sizeNumber();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2053);
                        this.tsOptionAutoextendSize();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2054);
                        this.tsOptionMaxSize();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(2055);
                        this.tsOptionEngine();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(2056);
                        this.tsOptionWait();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(2057);
                        this.tsOptionEncryption();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(2058);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(2059);
                        this.tsOptionEngineAttribute();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeTablespaceOption(): ChangeTablespaceOptionContext {
        let localctx: ChangeTablespaceOptionContext = new ChangeTablespaceOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 68, MySQLParser.RULE_changeTablespaceOption);
        try {
            this.setState(2069);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 238:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2062);
                        this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                        this.setState(2064);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 89, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(2063);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(2066);
                        this.sizeNumber();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2067);
                        this.tsOptionAutoextendSize();
                    }
                    break;
                case 324:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2068);
                        this.tsOptionMaxSize();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterView(): AlterViewContext {
        let localctx: AlterViewContext = new AlterViewContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 70, MySQLParser.RULE_alterView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2072);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 9) {
                    {
                        this.setState(2071);
                        this.viewAlgorithm();
                    }
                }

                this.setState(2075);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 130) {
                    {
                        this.setState(2074);
                        this.definerClause();
                    }
                }

                this.setState(2078);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 537) {
                    {
                        this.setState(2077);
                        this.viewSuid();
                    }
                }

                this.setState(2080);
                this.match(MySQLParser.VIEW_SYMBOL);
                this.setState(2081);
                this.viewRef();
                this.setState(2082);
                this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewTail(): ViewTailContext {
        let localctx: ViewTailContext = new ViewTailContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 72, MySQLParser.RULE_viewTail);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2085);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(2084);
                        this.columnInternalRefList();
                    }
                }

                this.setState(2087);
                this.match(MySQLParser.AS_SYMBOL);
                this.setState(2088);
                this.viewQueryBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewQueryBlock(): ViewQueryBlockContext {
        let localctx: ViewQueryBlockContext = new ViewQueryBlockContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 74, MySQLParser.RULE_viewQueryBlock);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2090);
                this.queryExpressionWithOptLockingClauses();
                this.setState(2092);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 645) {
                    {
                        this.setState(2091);
                        this.viewCheckOption();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewCheckOption(): ViewCheckOptionContext {
        let localctx: ViewCheckOptionContext = new ViewCheckOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 76, MySQLParser.RULE_viewCheckOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2094);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(2096);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 50 || _la === 284) {
                    {
                        this.setState(2095);
                        _la = this.input().LA(1);
                        if (!(_la === 50 || _la === 284)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                }

                this.setState(2098);
                this.match(MySQLParser.CHECK_SYMBOL);
                this.setState(2099);
                this.match(MySQLParser.OPTION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterInstanceStatement(): AlterInstanceStatementContext {
        let localctx: AlterInstanceStatementContext = new AlterInstanceStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 78, MySQLParser.RULE_alterInstanceStatement);
        let _la: number;
        try {
            this.setState(2133);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 100, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2101);
                        this.match(MySQLParser.INSTANCE_SYMBOL);
                        this.setState(2102);
                        this.match(MySQLParser.ROTATE_SYMBOL);
                        this.setState(2103);
                        this.textOrIdentifier();
                        this.setState(2104);
                        this.match(MySQLParser.MASTER_SYMBOL);
                        this.setState(2105);
                        this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2107);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(2131);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 99, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(2108);
                                    this.match(MySQLParser.RELOAD_SYMBOL);
                                    this.setState(2109);
                                    this.match(MySQLParser.TLS_SYMBOL);
                                    this.setState(2123);
                                    this.getErrorHandler().sync(this);
                                    switch (this.input().LA(1)) {
                                        case 373:
                                            {
                                                this.setState(2110);
                                                this.match(MySQLParser.NO_SYMBOL);
                                                this.setState(2111);
                                                this.match(MySQLParser.ROLLBACK_SYMBOL);
                                                this.setState(2112);
                                                this.match(MySQLParser.ON_SYMBOL);
                                                this.setState(2113);
                                                this.match(MySQLParser.ERROR_SYMBOL);
                                            }
                                            break;
                                        case 200:
                                            {
                                                this.setState(2114);
                                                this.match(MySQLParser.FOR_SYMBOL);
                                                this.setState(2115);
                                                this.match(MySQLParser.CHANNEL_SYMBOL);
                                                this.setState(2116);
                                                this.identifier();
                                                this.setState(2121);
                                                this.getErrorHandler().sync(this);
                                                _la = this.input().LA(1);
                                                if (_la === 373) {
                                                    {
                                                        this.setState(2117);
                                                        this.match(MySQLParser.NO_SYMBOL);
                                                        this.setState(2118);
                                                        this.match(MySQLParser.ROLLBACK_SYMBOL);
                                                        this.setState(2119);
                                                        this.match(MySQLParser.ON_SYMBOL);
                                                        this.setState(2120);
                                                        this.match(MySQLParser.ERROR_SYMBOL);
                                                    }
                                                }

                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.setState(2125);
                                    _la = this.input().LA(1);
                                    if (!(_la === 140 || _la === 156)) {
                                        this.getErrorHandler().recoverInline(this);
                                    }
                                    else {
                                        this.getErrorHandler().reportMatch(this);
                                        this.consume();
                                    }
                                    this.setState(2126);
                                    this.identifier();
                                    this.setState(2127);
                                    this.identifier();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(2129);
                                    this.match(MySQLParser.RELOAD_SYMBOL);
                                    this.setState(2130);
                                    this.match(MySQLParser.KEYRING_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createStatement(): CreateStatementContext {
        let localctx: CreateStatementContext = new CreateStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 80, MySQLParser.RULE_createStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2135);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(2153);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 101, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2136);
                            this.createDatabase();
                        }
                        break;
                    case 2:
                        {
                            this.setState(2137);
                            this.createTable();
                        }
                        break;
                    case 3:
                        {
                            this.setState(2138);
                            this.createFunction();
                        }
                        break;
                    case 4:
                        {
                            this.setState(2139);
                            this.createProcedure();
                        }
                        break;
                    case 5:
                        {
                            this.setState(2140);
                            this.createUdf();
                        }
                        break;
                    case 6:
                        {
                            this.setState(2141);
                            this.createLogfileGroup();
                        }
                        break;
                    case 7:
                        {
                            this.setState(2142);
                            this.createView();
                        }
                        break;
                    case 8:
                        {
                            this.setState(2143);
                            this.createTrigger();
                        }
                        break;
                    case 9:
                        {
                            this.setState(2144);
                            this.createIndex();
                        }
                        break;
                    case 10:
                        {
                            this.setState(2145);
                            this.createServer();
                        }
                        break;
                    case 11:
                        {
                            this.setState(2146);
                            this.createTablespace();
                        }
                        break;
                    case 12:
                        {
                            this.setState(2147);
                            this.createEvent();
                        }
                        break;
                    case 13:
                        {
                            this.setState(2148);
                            this.createRole();
                        }
                        break;
                    case 14:
                        {
                            this.setState(2149);
                            if (!(this.serverVersion >= 80011)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80011");
                            }
                            this.setState(2150);
                            this.createSpatialReference();
                        }
                        break;
                    case 15:
                        {
                            this.setState(2151);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(2152);
                            this.createUndoTablespace();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createDatabase(): CreateDatabaseContext {
        let localctx: CreateDatabaseContext = new CreateDatabaseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 82, MySQLParser.RULE_createDatabase);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2155);
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.setState(2157);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 102, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2156);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(2159);
                this.schemaName();
                this.setState(2163);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 103, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(2160);
                                this.createDatabaseOption();
                            }
                        }
                    }
                    this.setState(2165);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 103, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createDatabaseOption(): CreateDatabaseOptionContext {
        let localctx: CreateDatabaseOptionContext = new CreateDatabaseOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 84, MySQLParser.RULE_createDatabaseOption);
        try {
            this.setState(2170);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 104, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2166);
                        this.defaultCharset();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2167);
                        this.defaultCollation();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2168);
                        if (!(this.serverVersion >= 80016)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80016");
                        }
                        this.setState(2169);
                        this.defaultEncryption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createTable(): CreateTableContext {
        let localctx: CreateTableContext = new CreateTableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 86, MySQLParser.RULE_createTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2173);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 577) {
                    {
                        this.setState(2172);
                        this.match(MySQLParser.TEMPORARY_SYMBOL);
                    }
                }

                this.setState(2175);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(2177);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 106, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2176);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(2179);
                this.tableName();
                this.setState(2196);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 109, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2184);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 107, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(2180);
                                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                        this.setState(2181);
                                        this.tableElementList();
                                        this.setState(2182);
                                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                    }
                                    break;
                            }
                            this.setState(2187);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 108, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(2186);
                                        this.createTableOptionsEtc();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(2189);
                            this.match(MySQLParser.LIKE_SYMBOL);
                            this.setState(2190);
                            this.tableRef();
                        }
                        break;
                    case 3:
                        {
                            this.setState(2191);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(2192);
                            this.match(MySQLParser.LIKE_SYMBOL);
                            this.setState(2193);
                            this.tableRef();
                            this.setState(2194);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableElementList(): TableElementListContext {
        let localctx: TableElementListContext = new TableElementListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 88, MySQLParser.RULE_tableElementList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2198);
                this.tableElement();
                this.setState(2203);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(2199);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(2200);
                            this.tableElement();
                        }
                    }
                    this.setState(2205);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableElement(): TableElementContext {
        let localctx: TableElementContext = new TableElementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 90, MySQLParser.RULE_tableElement);
        try {
            this.setState(2208);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 111, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2206);
                        this.columnDefinition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2207);
                        this.tableConstraintDef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public duplicateAsQe(): DuplicateAsQeContext {
        let localctx: DuplicateAsQeContext = new DuplicateAsQeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 92, MySQLParser.RULE_duplicateAsQe);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2211);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 112, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2210);
                            _la = this.input().LA(1);
                            if (!(_la === 232 || _la === 458)) {
                                this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.setState(2213);
                this.asCreateQueryExpression();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public asCreateQueryExpression(): AsCreateQueryExpressionContext {
        let localctx: AsCreateQueryExpressionContext = new AsCreateQueryExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 94, MySQLParser.RULE_asCreateQueryExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2216);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 113, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2215);
                            this.match(MySQLParser.AS_SYMBOL);
                        }
                        break;
                }
                this.setState(2218);
                this.queryExpressionWithOptLockingClauses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public queryExpressionOrParens(): QueryExpressionOrParensContext {
        let localctx: QueryExpressionOrParensContext = new QueryExpressionOrParensContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 96, MySQLParser.RULE_queryExpressionOrParens);
        try {
            this.setState(2226);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 115, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2220);
                        this.queryExpression();
                        this.setState(2223);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 114, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(2221);
                                    if (!(this.serverVersion >= 80031)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80031");
                                    }
                                    this.setState(2222);
                                    this.lockingClauseList();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2225);
                        this.queryExpressionParens();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        let localctx: QueryExpressionWithOptLockingClausesContext = new QueryExpressionWithOptLockingClausesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 98, MySQLParser.RULE_queryExpressionWithOptLockingClauses);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2228);
                this.queryExpression();
                this.setState(2230);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200 || _la === 287) {
                    {
                        this.setState(2229);
                        this.lockingClauseList();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createRoutine(): CreateRoutineContext {
        let localctx: CreateRoutineContext = new CreateRoutineContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 100, MySQLParser.RULE_createRoutine);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2232);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(2236);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 117, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2233);
                            this.createProcedure();
                        }
                        break;
                    case 2:
                        {
                            this.setState(2234);
                            this.createFunction();
                        }
                        break;
                    case 3:
                        {
                            this.setState(2235);
                            this.createUdf();
                        }
                        break;
                }
                this.setState(2239);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 774) {
                    {
                        this.setState(2238);
                        this.match(MySQLParser.SEMICOLON_SYMBOL);
                    }
                }

                this.setState(2241);
                this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createProcedure(): CreateProcedureContext {
        let localctx: CreateProcedureContext = new CreateProcedureContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 102, MySQLParser.RULE_createProcedure);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2244);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 130) {
                    {
                        this.setState(2243);
                        this.definerClause();
                    }
                }

                this.setState(2246);
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.setState(2248);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 120, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2247);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(2250);
                this.procedureName();
                this.setState(2251);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(2260);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 122, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2252);
                            this.procedureParameter();
                            this.setState(2257);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            while (_la === 773) {
                                {
                                    {
                                        this.setState(2253);
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.setState(2254);
                                        this.procedureParameter();
                                    }
                                }
                                this.setState(2259);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                            }
                        }
                        break;
                }
                this.setState(2262);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(2266);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 123, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(2263);
                                this.routineCreateOption();
                            }
                        }
                    }
                    this.setState(2268);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 123, this.getCtx());
                }
                this.setState(2269);
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createFunction(): CreateFunctionContext {
        let localctx: CreateFunctionContext = new CreateFunctionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 104, MySQLParser.RULE_createFunction);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2272);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 130) {
                    {
                        this.setState(2271);
                        this.definerClause();
                    }
                }

                this.setState(2274);
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.setState(2276);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 125, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2275);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(2278);
                this.functionName();
                this.setState(2279);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(2288);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 127, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2280);
                            this.functionParameter();
                            this.setState(2285);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            while (_la === 773) {
                                {
                                    {
                                        this.setState(2281);
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.setState(2282);
                                        this.functionParameter();
                                    }
                                }
                                this.setState(2287);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                            }
                        }
                        break;
                }
                this.setState(2290);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(2291);
                this.match(MySQLParser.RETURNS_SYMBOL);
                this.setState(2292);
                this.typeWithOptCollate();
                this.setState(2296);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 128, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(2293);
                                this.routineCreateOption();
                            }
                        }
                    }
                    this.setState(2298);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 128, this.getCtx());
                }
                this.setState(2299);
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createUdf(): CreateUdfContext {
        let localctx: CreateUdfContext = new CreateUdfContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 106, MySQLParser.RULE_createUdf);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2302);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 8) {
                    {
                        this.setState(2301);
                        this.match(MySQLParser.AGGREGATE_SYMBOL);
                    }
                }

                this.setState(2304);
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.setState(2306);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 130, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2305);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(2308);
                this.udfName();
                this.setState(2309);
                this.match(MySQLParser.RETURNS_SYMBOL);
                this.setState(2310);
                localctx._type_ = this.input().LT(1);
                _la = this.input().LA(1);
                if (!(_la === 126 || _la === 249 || _la === 437 || _la === 556)) {
                    localctx._type_ = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(2311);
                this.match(MySQLParser.SONAME_SYMBOL);
                this.setState(2312);
                this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public routineCreateOption(): RoutineCreateOptionContext {
        let localctx: RoutineCreateOptionContext = new RoutineCreateOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 108, MySQLParser.RULE_routineCreateOption);
        let _la: number;
        try {
            this.setState(2319);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 75:
                case 90:
                case 267:
                case 347:
                case 373:
                case 433:
                case 537:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2314);
                        this.routineOption();
                    }
                    break;
                case 137:
                case 371:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2316);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 371) {
                            {
                                this.setState(2315);
                                this.match(MySQLParser.NOT_SYMBOL);
                            }
                        }

                        this.setState(2318);
                        this.match(MySQLParser.DETERMINISTIC_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public routineAlterOptions(): RoutineAlterOptionsContext {
        let localctx: RoutineAlterOptionsContext = new RoutineAlterOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 110, MySQLParser.RULE_routineAlterOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2322);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                do {
                    {
                        {
                            this.setState(2321);
                            this.routineCreateOption();
                        }
                    }
                    this.setState(2324);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                } while (_la === 75 || _la === 90 || _la === 137 || _la === 267 || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la === 433 || _la === 537);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public routineOption(): RoutineOptionContext {
        let localctx: RoutineOptionContext = new RoutineOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 112, MySQLParser.RULE_routineOption);
        let _la: number;
        try {
            this.setState(2343);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 75:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2326);
                        localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(2327);
                        this.textLiteral();
                    }
                    break;
                case 267:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2328);
                        localctx._option = this.match(MySQLParser.LANGUAGE_SYMBOL);
                        this.setState(2329);
                        this.match(MySQLParser.SQL_SYMBOL);
                    }
                    break;
                case 373:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2330);
                        localctx._option = this.match(MySQLParser.NO_SYMBOL);
                        this.setState(2331);
                        this.match(MySQLParser.SQL_SYMBOL);
                    }
                    break;
                case 90:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(2332);
                        localctx._option = this.match(MySQLParser.CONTAINS_SYMBOL);
                        this.setState(2333);
                        this.match(MySQLParser.SQL_SYMBOL);
                    }
                    break;
                case 433:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(2334);
                        localctx._option = this.match(MySQLParser.READS_SYMBOL);
                        this.setState(2335);
                        this.match(MySQLParser.SQL_SYMBOL);
                        this.setState(2336);
                        this.match(MySQLParser.DATA_SYMBOL);
                    }
                    break;
                case 347:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(2337);
                        localctx._option = this.match(MySQLParser.MODIFIES_SYMBOL);
                        this.setState(2338);
                        this.match(MySQLParser.SQL_SYMBOL);
                        this.setState(2339);
                        this.match(MySQLParser.DATA_SYMBOL);
                    }
                    break;
                case 537:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(2340);
                        localctx._option = this.match(MySQLParser.SQL_SYMBOL);
                        this.setState(2341);
                        this.match(MySQLParser.SECURITY_SYMBOL);
                        this.setState(2342);
                        localctx._security = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 130 || _la === 250)) {
                            localctx._security = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createIndex(): CreateIndexContext {
        let localctx: CreateIndexContext = new CreateIndexContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 114, MySQLParser.RULE_createIndex);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2346);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 380 || _la === 385) {
                    {
                        this.setState(2345);
                        this.onlineOption();
                    }
                }

                this.setState(2389);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 236:
                    case 609:
                        {
                            this.setState(2349);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 609) {
                                {
                                    this.setState(2348);
                                    this.match(MySQLParser.UNIQUE_SYMBOL);
                                }
                            }

                            this.setState(2351);
                            localctx._type_ = this.match(MySQLParser.INDEX_SYMBOL);
                            this.setState(2360);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 139, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(2352);
                                        if (!(this.serverVersion >= 80014)) {
                                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                                        }
                                        this.setState(2353);
                                        this.indexName();
                                        this.setState(2355);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 599 || _la === 621) {
                                            {
                                                this.setState(2354);
                                                this.indexTypeClause();
                                            }
                                        }

                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(2358);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 138, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(2357);
                                                    this.indexNameAndType();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                            this.setState(2362);
                            this.createIndexTarget();
                            this.setState(2366);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 140, this.getCtx());
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.setState(2363);
                                            this.indexOption();
                                        }
                                    }
                                }
                                this.setState(2368);
                                this.getErrorHandler().sync(this);
                                _alt = this.getInterpreter().adaptivePredict(this.input(), 140, this.getCtx());
                            }
                        }
                        break;
                    case 205:
                        {
                            this.setState(2369);
                            localctx._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
                            this.setState(2370);
                            this.match(MySQLParser.INDEX_SYMBOL);
                            this.setState(2371);
                            this.indexName();
                            this.setState(2372);
                            this.createIndexTarget();
                            this.setState(2376);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 141, this.getCtx());
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.setState(2373);
                                            this.fulltextIndexOption();
                                        }
                                    }
                                }
                                this.setState(2378);
                                this.getErrorHandler().sync(this);
                                _alt = this.getInterpreter().adaptivePredict(this.input(), 141, this.getCtx());
                            }
                        }
                        break;
                    case 523:
                        {
                            this.setState(2379);
                            localctx._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
                            this.setState(2380);
                            this.match(MySQLParser.INDEX_SYMBOL);
                            this.setState(2381);
                            this.indexName();
                            this.setState(2382);
                            this.createIndexTarget();
                            this.setState(2386);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 142, this.getCtx());
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.setState(2383);
                                            this.spatialIndexOption();
                                        }
                                    }
                                }
                                this.setState(2388);
                                this.getErrorHandler().sync(this);
                                _alt = this.getInterpreter().adaptivePredict(this.input(), 142, this.getCtx());
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                this.setState(2392);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 9 || _la === 287) {
                    {
                        this.setState(2391);
                        this.indexLockAndAlgorithm();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexNameAndType(): IndexNameAndTypeContext {
        let localctx: IndexNameAndTypeContext = new IndexNameAndTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 116, MySQLParser.RULE_indexNameAndType);
        try {
            this.setState(2404);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 146, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2394);
                        this.indexName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2396);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 145, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(2395);
                                    this.indexName();
                                }
                                break;
                        }
                        this.setState(2398);
                        this.match(MySQLParser.USING_SYMBOL);
                        this.setState(2399);
                        this.indexType();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2400);
                        this.indexName();
                        this.setState(2401);
                        this.match(MySQLParser.TYPE_SYMBOL);
                        this.setState(2402);
                        this.indexType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createIndexTarget(): CreateIndexTargetContext {
        let localctx: CreateIndexTargetContext = new CreateIndexTargetContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 118, MySQLParser.RULE_createIndexTarget);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2406);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(2407);
                this.tableRef();
                this.setState(2408);
                this.keyListVariants();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createLogfileGroup(): CreateLogfileGroupContext {
        let localctx: CreateLogfileGroupContext = new CreateLogfileGroupContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 120, MySQLParser.RULE_createLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2410);
                this.match(MySQLParser.LOGFILE_SYMBOL);
                this.setState(2411);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(2412);
                this.logfileGroupName();
                this.setState(2413);
                this.match(MySQLParser.ADD_SYMBOL);
                this.setState(2414);
                this.match(MySQLParser.UNDOFILE_SYMBOL);
                this.setState(2415);
                this.textLiteral();
                this.setState(2417);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 75 || _la === 163 || _la === 238 || _la === 368 || _la === 374 || _la === 441 || _la === 553 || _la === 604 || _la === 638) {
                    {
                        this.setState(2416);
                        this.logfileGroupOptions();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public logfileGroupOptions(): LogfileGroupOptionsContext {
        let localctx: LogfileGroupOptionsContext = new LogfileGroupOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 122, MySQLParser.RULE_logfileGroupOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2419);
                this.logfileGroupOption();
                this.setState(2426);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 75 || _la === 163 || _la === 238 || _la === 368 || _la === 374 || _la === 441 || _la === 553 || _la === 604 || _la === 638 || _la === 773) {
                    {
                        {
                            this.setState(2421);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 773) {
                                {
                                    this.setState(2420);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }

                            this.setState(2423);
                            this.logfileGroupOption();
                        }
                    }
                    this.setState(2428);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public logfileGroupOption(): LogfileGroupOptionContext {
        let localctx: LogfileGroupOptionContext = new LogfileGroupOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 124, MySQLParser.RULE_logfileGroupOption);
        try {
            this.setState(2435);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 238:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2429);
                        this.tsOptionInitialSize();
                    }
                    break;
                case 441:
                case 604:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2430);
                        this.tsOptionUndoRedoBufferSize();
                    }
                    break;
                case 368:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2431);
                        this.tsOptionNodegroup();
                    }
                    break;
                case 163:
                case 553:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(2432);
                        this.tsOptionEngine();
                    }
                    break;
                case 374:
                case 638:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(2433);
                        this.tsOptionWait();
                    }
                    break;
                case 75:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(2434);
                        this.tsOptionComment();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createServer(): CreateServerContext {
        let localctx: CreateServerContext = new CreateServerContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 126, MySQLParser.RULE_createServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2437);
                this.match(MySQLParser.SERVER_SYMBOL);
                this.setState(2438);
                this.serverName();
                this.setState(2439);
                this.match(MySQLParser.FOREIGN_SYMBOL);
                this.setState(2440);
                this.match(MySQLParser.DATA_SYMBOL);
                this.setState(2441);
                this.match(MySQLParser.WRAPPER_SYMBOL);
                this.setState(2442);
                this.textOrIdentifier();
                this.setState(2443);
                this.serverOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public serverOptions(): ServerOptionsContext {
        let localctx: ServerOptionsContext = new ServerOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 128, MySQLParser.RULE_serverOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2445);
                this.match(MySQLParser.OPTIONS_SYMBOL);
                this.setState(2446);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(2447);
                this.serverOption();
                this.setState(2452);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(2448);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(2449);
                            this.serverOption();
                        }
                    }
                    this.setState(2454);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(2455);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public serverOption(): ServerOptionContext {
        let localctx: ServerOptionContext = new ServerOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 130, MySQLParser.RULE_serverOption);
        try {
            this.setState(2471);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 224:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2457);
                        localctx._option = this.match(MySQLParser.HOST_SYMBOL);
                        this.setState(2458);
                        this.textLiteral();
                    }
                    break;
                case 109:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2459);
                        localctx._option = this.match(MySQLParser.DATABASE_SYMBOL);
                        this.setState(2460);
                        this.textLiteral();
                    }
                    break;
                case 618:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2461);
                        localctx._option = this.match(MySQLParser.USER_SYMBOL);
                        this.setState(2462);
                        this.textLiteral();
                    }
                    break;
                case 406:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(2463);
                        localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.setState(2464);
                        this.textLiteral();
                    }
                    break;
                case 519:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(2465);
                        localctx._option = this.match(MySQLParser.SOCKET_SYMBOL);
                        this.setState(2466);
                        this.textLiteral();
                    }
                    break;
                case 398:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(2467);
                        localctx._option = this.match(MySQLParser.OWNER_SYMBOL);
                        this.setState(2468);
                        this.textLiteral();
                    }
                    break;
                case 413:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(2469);
                        localctx._option = this.match(MySQLParser.PORT_SYMBOL);
                        this.setState(2470);
                        this.ulong_number();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createTablespace(): CreateTablespaceContext {
        let localctx: CreateTablespaceContext = new CreateTablespaceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 132, MySQLParser.RULE_createTablespace);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2473);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.setState(2474);
                this.tablespaceName();
                this.setState(2475);
                this.tsDataFileName();
                this.setState(2480);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 153, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2476);
                            this.match(MySQLParser.USE_SYMBOL);
                            this.setState(2477);
                            this.match(MySQLParser.LOGFILE_SYMBOL);
                            this.setState(2478);
                            this.match(MySQLParser.GROUP_SYMBOL);
                            this.setState(2479);
                            this.logfileGroupRef();
                        }
                        break;
                }
                this.setState(2483);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 154, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2482);
                            this.tablespaceOptions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createUndoTablespace(): CreateUndoTablespaceContext {
        let localctx: CreateUndoTablespaceContext = new CreateUndoTablespaceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 134, MySQLParser.RULE_createUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2485);
                this.match(MySQLParser.UNDO_SYMBOL);
                this.setState(2486);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.setState(2487);
                this.tablespaceName();
                this.setState(2488);
                this.match(MySQLParser.ADD_SYMBOL);
                this.setState(2489);
                this.tsDataFile();
                this.setState(2491);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 163 || _la === 553) {
                    {
                        this.setState(2490);
                        this.undoTableSpaceOptions();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsDataFileName(): TsDataFileNameContext {
        let localctx: TsDataFileNameContext = new TsDataFileNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 136, MySQLParser.RULE_tsDataFileName);
        try {
            this.setState(2500);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 157, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2493);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(2496);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 156, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(2494);
                                    this.match(MySQLParser.ADD_SYMBOL);
                                    this.setState(2495);
                                    this.tsDataFile();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2498);
                        this.match(MySQLParser.ADD_SYMBOL);
                        this.setState(2499);
                        this.tsDataFile();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsDataFile(): TsDataFileContext {
        let localctx: TsDataFileContext = new TsDataFileContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 138, MySQLParser.RULE_tsDataFile);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2502);
                this.match(MySQLParser.DATAFILE_SYMBOL);
                this.setState(2503);
                this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tablespaceOptions(): TablespaceOptionsContext {
        let localctx: TablespaceOptionsContext = new TablespaceOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 140, MySQLParser.RULE_tablespaceOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2505);
                this.tablespaceOption();
                this.setState(2512);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 159, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(2507);
                                this.getErrorHandler().sync(this);
                                switch (this.getInterpreter().adaptivePredict(this.input(), 158, this.getCtx())) {
                                    case 1:
                                        {
                                            this.setState(2506);
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                        break;
                                }
                                this.setState(2509);
                                this.tablespaceOption();
                            }
                        }
                    }
                    this.setState(2514);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 159, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tablespaceOption(): TablespaceOptionContext {
        let localctx: TablespaceOptionContext = new TablespaceOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 142, MySQLParser.RULE_tablespaceOption);
        try {
            this.setState(2526);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 160, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2515);
                        this.tsOptionInitialSize();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2516);
                        this.tsOptionAutoextendSize();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2517);
                        this.tsOptionMaxSize();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(2518);
                        this.tsOptionExtentSize();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(2519);
                        this.tsOptionNodegroup();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(2520);
                        this.tsOptionEngine();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(2521);
                        this.tsOptionWait();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(2522);
                        this.tsOptionComment();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(2523);
                        this.tsOptionFileblockSize();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(2524);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(2525);
                        this.tsOptionEncryption();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionInitialSize(): TsOptionInitialSizeContext {
        let localctx: TsOptionInitialSizeContext = new TsOptionInitialSizeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 144, MySQLParser.RULE_tsOptionInitialSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2528);
                this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
                this.setState(2530);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 161, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2529);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2532);
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext {
        let localctx: TsOptionUndoRedoBufferSizeContext = new TsOptionUndoRedoBufferSizeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 146, MySQLParser.RULE_tsOptionUndoRedoBufferSize);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2534);
                _la = this.input().LA(1);
                if (!(_la === 441 || _la === 604)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(2536);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 162, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2535);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2538);
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
        let localctx: TsOptionAutoextendSizeContext = new TsOptionAutoextendSizeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 148, MySQLParser.RULE_tsOptionAutoextendSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2540);
                this.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL);
                this.setState(2542);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 163, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2541);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2544);
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionMaxSize(): TsOptionMaxSizeContext {
        let localctx: TsOptionMaxSizeContext = new TsOptionMaxSizeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 150, MySQLParser.RULE_tsOptionMaxSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2546);
                this.match(MySQLParser.MAX_SIZE_SYMBOL);
                this.setState(2548);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 164, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2547);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2550);
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionExtentSize(): TsOptionExtentSizeContext {
        let localctx: TsOptionExtentSizeContext = new TsOptionExtentSizeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 152, MySQLParser.RULE_tsOptionExtentSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2552);
                this.match(MySQLParser.EXTENT_SIZE_SYMBOL);
                this.setState(2554);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 165, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2553);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2556);
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionNodegroup(): TsOptionNodegroupContext {
        let localctx: TsOptionNodegroupContext = new TsOptionNodegroupContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 154, MySQLParser.RULE_tsOptionNodegroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2558);
                this.match(MySQLParser.NODEGROUP_SYMBOL);
                this.setState(2560);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 750) {
                    {
                        this.setState(2559);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                    }
                }

                this.setState(2562);
                this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionEngine(): TsOptionEngineContext {
        let localctx: TsOptionEngineContext = new TsOptionEngineContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 156, MySQLParser.RULE_tsOptionEngine);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2565);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 553) {
                    {
                        this.setState(2564);
                        this.match(MySQLParser.STORAGE_SYMBOL);
                    }
                }

                this.setState(2567);
                this.match(MySQLParser.ENGINE_SYMBOL);
                this.setState(2569);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 168, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2568);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2571);
                this.engineRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionWait(): TsOptionWaitContext {
        let localctx: TsOptionWaitContext = new TsOptionWaitContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 158, MySQLParser.RULE_tsOptionWait);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2573);
                _la = this.input().LA(1);
                if (!(_la === 374 || _la === 638)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionComment(): TsOptionCommentContext {
        let localctx: TsOptionCommentContext = new TsOptionCommentContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 160, MySQLParser.RULE_tsOptionComment);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2575);
                this.match(MySQLParser.COMMENT_SYMBOL);
                this.setState(2577);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 169, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2576);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2579);
                this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionFileblockSize(): TsOptionFileblockSizeContext {
        let localctx: TsOptionFileblockSizeContext = new TsOptionFileblockSizeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 162, MySQLParser.RULE_tsOptionFileblockSize);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2581);
                this.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL);
                this.setState(2583);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 170, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2582);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2585);
                this.sizeNumber();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionEncryption(): TsOptionEncryptionContext {
        let localctx: TsOptionEncryptionContext = new TsOptionEncryptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 164, MySQLParser.RULE_tsOptionEncryption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2587);
                this.match(MySQLParser.ENCRYPTION_SYMBOL);
                this.setState(2589);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 171, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2588);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2591);
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tsOptionEngineAttribute(): TsOptionEngineAttributeContext {
        let localctx: TsOptionEngineAttributeContext = new TsOptionEngineAttributeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 166, MySQLParser.RULE_tsOptionEngineAttribute);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2593);
                this.match(MySQLParser.ENGINE_SYMBOL);
                this.setState(2595);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 172, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2594);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(2597);
                this.jsonAttribute();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createView(): CreateViewContext {
        let localctx: CreateViewContext = new CreateViewContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 168, MySQLParser.RULE_createView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2600);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 9 || _la === 394) {
                    {
                        this.setState(2599);
                        this.viewReplaceOrAlgorithm();
                    }
                }

                this.setState(2603);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 130) {
                    {
                        this.setState(2602);
                        this.definerClause();
                    }
                }

                this.setState(2606);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 537) {
                    {
                        this.setState(2605);
                        this.viewSuid();
                    }
                }

                this.setState(2608);
                this.match(MySQLParser.VIEW_SYMBOL);
                this.setState(2609);
                this.viewName();
                this.setState(2610);
                this.viewTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext {
        let localctx: ViewReplaceOrAlgorithmContext = new ViewReplaceOrAlgorithmContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 170, MySQLParser.RULE_viewReplaceOrAlgorithm);
        let _la: number;
        try {
            this.setState(2618);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 394:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2612);
                        this.match(MySQLParser.OR_SYMBOL);
                        this.setState(2613);
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.setState(2615);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 9) {
                            {
                                this.setState(2614);
                                this.viewAlgorithm();
                            }
                        }

                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2617);
                        this.viewAlgorithm();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewAlgorithm(): ViewAlgorithmContext {
        let localctx: ViewAlgorithmContext = new ViewAlgorithmContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 172, MySQLParser.RULE_viewAlgorithm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2620);
                this.match(MySQLParser.ALGORITHM_SYMBOL);
                this.setState(2621);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(2622);
                localctx._algorithm = this.input().LT(1);
                _la = this.input().LA(1);
                if (!(_la === 335 || _la === 578 || _la === 602)) {
                    localctx._algorithm = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewSuid(): ViewSuidContext {
        let localctx: ViewSuidContext = new ViewSuidContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 174, MySQLParser.RULE_viewSuid);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2624);
                this.match(MySQLParser.SQL_SYMBOL);
                this.setState(2625);
                this.match(MySQLParser.SECURITY_SYMBOL);
                this.setState(2626);
                _la = this.input().LA(1);
                if (!(_la === 130 || _la === 250)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createTrigger(): CreateTriggerContext {
        let localctx: CreateTriggerContext = new CreateTriggerContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 176, MySQLParser.RULE_createTrigger);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2629);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 130) {
                    {
                        this.setState(2628);
                        this.definerClause();
                    }
                }

                this.setState(2631);
                this.match(MySQLParser.TRIGGER_SYMBOL);
                this.setState(2633);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 179, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2632);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(2635);
                this.triggerName();
                this.setState(2636);
                localctx._timing = this.input().LT(1);
                _la = this.input().LA(1);
                if (!(_la === 6 || _la === 28)) {
                    localctx._timing = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(2637);
                localctx._event = this.input().LT(1);
                _la = this.input().LA(1);
                if (!(_la === 133 || _la === 242 || _la === 614)) {
                    localctx._event = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(2638);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(2639);
                this.tableRef();
                this.setState(2640);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(2641);
                this.match(MySQLParser.EACH_SYMBOL);
                this.setState(2642);
                this.match(MySQLParser.ROW_SYMBOL);
                this.setState(2644);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 180, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2643);
                            this.triggerFollowsPrecedesClause();
                        }
                        break;
                }
                this.setState(2646);
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext {
        let localctx: TriggerFollowsPrecedesClauseContext = new TriggerFollowsPrecedesClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 178, MySQLParser.RULE_triggerFollowsPrecedesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2648);
                localctx._ordering = this.input().LT(1);
                _la = this.input().LA(1);
                if (!(_la === 197 || _la === 415)) {
                    localctx._ordering = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(2649);
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createEvent(): CreateEventContext {
        let localctx: CreateEventContext = new CreateEventContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 180, MySQLParser.RULE_createEvent);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2652);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 130) {
                    {
                        this.setState(2651);
                        this.definerClause();
                    }
                }

                this.setState(2654);
                this.match(MySQLParser.EVENT_SYMBOL);
                this.setState(2656);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 182, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2655);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(2658);
                this.eventName();
                this.setState(2659);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(2660);
                this.match(MySQLParser.SCHEDULE_SYMBOL);
                this.setState(2661);
                this.schedule();
                this.setState(2668);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 383) {
                    {
                        this.setState(2662);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(2663);
                        this.match(MySQLParser.COMPLETION_SYMBOL);
                        this.setState(2665);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 371) {
                            {
                                this.setState(2664);
                                this.match(MySQLParser.NOT_SYMBOL);
                            }
                        }

                        this.setState(2667);
                        this.match(MySQLParser.PRESERVE_SYMBOL);
                    }
                }

                this.setState(2676);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 156:
                        {
                            this.setState(2670);
                            this.match(MySQLParser.ENABLE_SYMBOL);
                        }
                        break;
                    case 140:
                        {
                            this.setState(2671);
                            this.match(MySQLParser.DISABLE_SYMBOL);
                            this.setState(2674);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 383) {
                                {
                                    this.setState(2672);
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.setState(2673);
                                    this.replica();
                                }
                            }

                        }
                        break;
                    case 75:
                    case 147:
                        break;
                    default:
                        break;
                }
                this.setState(2680);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 75) {
                    {
                        this.setState(2678);
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(2679);
                        this.textLiteral();
                    }
                }

                this.setState(2682);
                this.match(MySQLParser.DO_SYMBOL);
                this.setState(2683);
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createRole(): CreateRoleContext {
        let localctx: CreateRoleContext = new CreateRoleContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 182, MySQLParser.RULE_createRole);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2685);
                this.match(MySQLParser.ROLE_SYMBOL);
                this.setState(2687);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 188, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2686);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(2689);
                this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createSpatialReference(): CreateSpatialReferenceContext {
        let localctx: CreateSpatialReferenceContext = new CreateSpatialReferenceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 184, MySQLParser.RULE_createSpatialReference);
        let _la: number;
        try {
            this.setState(2716);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 394:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2691);
                        this.match(MySQLParser.OR_SYMBOL);
                        this.setState(2692);
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.setState(2693);
                        this.match(MySQLParser.SPATIAL_SYMBOL);
                        this.setState(2694);
                        this.match(MySQLParser.REFERENCE_SYMBOL);
                        this.setState(2695);
                        this.match(MySQLParser.SYSTEM_SYMBOL);
                        this.setState(2696);
                        this.real_ulonglong_number();
                        this.setState(2700);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 357 || ((((_la - 715)) & ~0x1F) === 0 && ((1 << (_la - 715)) & 7) !== 0)) {
                            {
                                {
                                    this.setState(2697);
                                    this.srsAttribute();
                                }
                            }
                            this.setState(2702);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                case 523:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2703);
                        this.match(MySQLParser.SPATIAL_SYMBOL);
                        this.setState(2704);
                        this.match(MySQLParser.REFERENCE_SYMBOL);
                        this.setState(2705);
                        this.match(MySQLParser.SYSTEM_SYMBOL);
                        this.setState(2707);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 190, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(2706);
                                    this.ifNotExists();
                                }
                                break;
                        }
                        this.setState(2709);
                        this.real_ulonglong_number();
                        this.setState(2713);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 357 || ((((_la - 715)) & ~0x1F) === 0 && ((1 << (_la - 715)) & 7) !== 0)) {
                            {
                                {
                                    this.setState(2710);
                                    this.srsAttribute();
                                }
                            }
                            this.setState(2715);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public srsAttribute(): SrsAttributeContext {
        let localctx: SrsAttributeContext = new SrsAttributeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 186, MySQLParser.RULE_srsAttribute);
        try {
            this.setState(2733);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 357:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2718);
                        this.match(MySQLParser.NAME_SYMBOL);
                        this.setState(2719);
                        this.match(MySQLParser.TEXT_SYMBOL);
                        this.setState(2720);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 715:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2721);
                        this.match(MySQLParser.DEFINITION_SYMBOL);
                        this.setState(2722);
                        this.match(MySQLParser.TEXT_SYMBOL);
                        this.setState(2723);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 717:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(2724);
                        this.match(MySQLParser.ORGANIZATION_SYMBOL);
                        this.setState(2725);
                        this.textStringNoLinebreak();
                        this.setState(2726);
                        this.match(MySQLParser.IDENTIFIED_SYMBOL);
                        this.setState(2727);
                        this.match(MySQLParser.BY_SYMBOL);
                        this.setState(2728);
                        this.real_ulonglong_number();
                    }
                    break;
                case 716:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(2730);
                        this.match(MySQLParser.DESCRIPTION_SYMBOL);
                        this.setState(2731);
                        this.match(MySQLParser.TEXT_SYMBOL);
                        this.setState(2732);
                        this.textStringNoLinebreak();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropStatement(): DropStatementContext {
        let localctx: DropStatementContext = new DropStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 188, MySQLParser.RULE_dropStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2735);
                this.match(MySQLParser.DROP_SYMBOL);
                this.setState(2752);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 194, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2736);
                            this.dropDatabase();
                        }
                        break;
                    case 2:
                        {
                            this.setState(2737);
                            this.dropEvent();
                        }
                        break;
                    case 3:
                        {
                            this.setState(2738);
                            this.dropFunction();
                        }
                        break;
                    case 4:
                        {
                            this.setState(2739);
                            this.dropProcedure();
                        }
                        break;
                    case 5:
                        {
                            this.setState(2740);
                            this.dropIndex();
                        }
                        break;
                    case 6:
                        {
                            this.setState(2741);
                            this.dropLogfileGroup();
                        }
                        break;
                    case 7:
                        {
                            this.setState(2742);
                            this.dropServer();
                        }
                        break;
                    case 8:
                        {
                            this.setState(2743);
                            this.dropTable();
                        }
                        break;
                    case 9:
                        {
                            this.setState(2744);
                            this.dropTableSpace();
                        }
                        break;
                    case 10:
                        {
                            this.setState(2745);
                            this.dropTrigger();
                        }
                        break;
                    case 11:
                        {
                            this.setState(2746);
                            this.dropView();
                        }
                        break;
                    case 12:
                        {
                            this.setState(2747);
                            this.dropRole();
                        }
                        break;
                    case 13:
                        {
                            this.setState(2748);
                            if (!(this.serverVersion >= 80011)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80011");
                            }
                            this.setState(2749);
                            this.dropSpatialReference();
                        }
                        break;
                    case 14:
                        {
                            this.setState(2750);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(2751);
                            this.dropUndoTablespace();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropDatabase(): DropDatabaseContext {
        let localctx: DropDatabaseContext = new DropDatabaseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 190, MySQLParser.RULE_dropDatabase);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2754);
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.setState(2756);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 195, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2755);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2758);
                this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropEvent(): DropEventContext {
        let localctx: DropEventContext = new DropEventContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 192, MySQLParser.RULE_dropEvent);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2760);
                this.match(MySQLParser.EVENT_SYMBOL);
                this.setState(2762);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 196, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2761);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2764);
                this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropFunction(): DropFunctionContext {
        let localctx: DropFunctionContext = new DropFunctionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 194, MySQLParser.RULE_dropFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2766);
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.setState(2768);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 197, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2767);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2770);
                this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropProcedure(): DropProcedureContext {
        let localctx: DropProcedureContext = new DropProcedureContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 196, MySQLParser.RULE_dropProcedure);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2772);
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.setState(2774);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 198, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2773);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2776);
                this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropIndex(): DropIndexContext {
        let localctx: DropIndexContext = new DropIndexContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 198, MySQLParser.RULE_dropIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2779);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 380 || _la === 385) {
                    {
                        this.setState(2778);
                        this.onlineOption();
                    }
                }

                this.setState(2781);
                localctx._type_ = this.match(MySQLParser.INDEX_SYMBOL);
                this.setState(2782);
                this.indexRef();
                this.setState(2783);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(2784);
                this.tableRef();
                this.setState(2786);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 9 || _la === 287) {
                    {
                        this.setState(2785);
                        this.indexLockAndAlgorithm();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropLogfileGroup(): DropLogfileGroupContext {
        let localctx: DropLogfileGroupContext = new DropLogfileGroupContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 200, MySQLParser.RULE_dropLogfileGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2788);
                this.match(MySQLParser.LOGFILE_SYMBOL);
                this.setState(2789);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(2790);
                this.logfileGroupRef();
                this.setState(2801);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 163 || _la === 374 || _la === 553 || _la === 638) {
                    {
                        this.setState(2791);
                        this.dropLogfileGroupOption();
                        this.setState(2798);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 163 || _la === 374 || _la === 553 || _la === 638 || _la === 773) {
                            {
                                {
                                    this.setState(2793);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 773) {
                                        {
                                            this.setState(2792);
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                    }

                                    this.setState(2795);
                                    this.dropLogfileGroupOption();
                                }
                            }
                            this.setState(2800);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropLogfileGroupOption(): DropLogfileGroupOptionContext {
        let localctx: DropLogfileGroupOptionContext = new DropLogfileGroupOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 202, MySQLParser.RULE_dropLogfileGroupOption);
        try {
            this.setState(2805);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 374:
                case 638:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2803);
                        this.tsOptionWait();
                    }
                    break;
                case 163:
                case 553:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2804);
                        this.tsOptionEngine();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropServer(): DropServerContext {
        let localctx: DropServerContext = new DropServerContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 204, MySQLParser.RULE_dropServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2807);
                this.match(MySQLParser.SERVER_SYMBOL);
                this.setState(2809);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 205, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2808);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2811);
                this.serverRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropTable(): DropTableContext {
        let localctx: DropTableContext = new DropTableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 206, MySQLParser.RULE_dropTable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2814);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 577) {
                    {
                        this.setState(2813);
                        this.match(MySQLParser.TEMPORARY_SYMBOL);
                    }
                }

                this.setState(2816);
                localctx._type_ = this.input().LT(1);
                _la = this.input().LA(1);
                if (!(_la === 571 || _la === 574)) {
                    localctx._type_ = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(2818);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 207, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2817);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2820);
                this.tableRefList();
                this.setState(2822);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 49 || _la === 471) {
                    {
                        this.setState(2821);
                        _la = this.input().LA(1);
                        if (!(_la === 49 || _la === 471)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropTableSpace(): DropTableSpaceContext {
        let localctx: DropTableSpaceContext = new DropTableSpaceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 208, MySQLParser.RULE_dropTableSpace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2824);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.setState(2825);
                this.tablespaceRef();
                this.setState(2836);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 163 || _la === 374 || _la === 553 || _la === 638) {
                    {
                        this.setState(2826);
                        this.dropLogfileGroupOption();
                        this.setState(2833);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 163 || _la === 374 || _la === 553 || _la === 638 || _la === 773) {
                            {
                                {
                                    this.setState(2828);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 773) {
                                        {
                                            this.setState(2827);
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                    }

                                    this.setState(2830);
                                    this.dropLogfileGroupOption();
                                }
                            }
                            this.setState(2835);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropTrigger(): DropTriggerContext {
        let localctx: DropTriggerContext = new DropTriggerContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 210, MySQLParser.RULE_dropTrigger);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2838);
                this.match(MySQLParser.TRIGGER_SYMBOL);
                this.setState(2840);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 212, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2839);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2842);
                this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropView(): DropViewContext {
        let localctx: DropViewContext = new DropViewContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 212, MySQLParser.RULE_dropView);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2844);
                this.match(MySQLParser.VIEW_SYMBOL);
                this.setState(2846);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 213, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2845);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2848);
                this.viewRefList();
                this.setState(2850);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 49 || _la === 471) {
                    {
                        this.setState(2849);
                        _la = this.input().LA(1);
                        if (!(_la === 49 || _la === 471)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropRole(): DropRoleContext {
        let localctx: DropRoleContext = new DropRoleContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 214, MySQLParser.RULE_dropRole);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2852);
                this.match(MySQLParser.ROLE_SYMBOL);
                this.setState(2854);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 215, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2853);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2856);
                this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropSpatialReference(): DropSpatialReferenceContext {
        let localctx: DropSpatialReferenceContext = new DropSpatialReferenceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 216, MySQLParser.RULE_dropSpatialReference);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2858);
                this.match(MySQLParser.SPATIAL_SYMBOL);
                this.setState(2859);
                this.match(MySQLParser.REFERENCE_SYMBOL);
                this.setState(2860);
                this.match(MySQLParser.SYSTEM_SYMBOL);
                this.setState(2862);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 216, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2861);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(2864);
                this.real_ulonglong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropUndoTablespace(): DropUndoTablespaceContext {
        let localctx: DropUndoTablespaceContext = new DropUndoTablespaceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 218, MySQLParser.RULE_dropUndoTablespace);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2866);
                this.match(MySQLParser.UNDO_SYMBOL);
                this.setState(2867);
                this.match(MySQLParser.TABLESPACE_SYMBOL);
                this.setState(2868);
                this.tablespaceRef();
                this.setState(2870);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 163 || _la === 553) {
                    {
                        this.setState(2869);
                        this.undoTableSpaceOptions();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public renameTableStatement(): RenameTableStatementContext {
        let localctx: RenameTableStatementContext = new RenameTableStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 220, MySQLParser.RULE_renameTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2872);
                this.match(MySQLParser.RENAME_SYMBOL);
                this.setState(2873);
                _la = this.input().LA(1);
                if (!(_la === 571 || _la === 574)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(2874);
                this.renamePair();
                this.setState(2879);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(2875);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(2876);
                            this.renamePair();
                        }
                    }
                    this.setState(2881);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public renamePair(): RenamePairContext {
        let localctx: RenamePairContext = new RenamePairContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 222, MySQLParser.RULE_renamePair);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2882);
                this.tableRef();
                this.setState(2883);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(2884);
                this.tableName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public truncateTableStatement(): TruncateTableStatementContext {
        let localctx: TruncateTableStatementContext = new TruncateTableStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 224, MySQLParser.RULE_truncateTableStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2886);
                this.match(MySQLParser.TRUNCATE_SYMBOL);
                this.setState(2888);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 219, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2887);
                            this.match(MySQLParser.TABLE_SYMBOL);
                        }
                        break;
                }
                this.setState(2890);
                this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public importStatement(): ImportStatementContext {
        let localctx: ImportStatementContext = new ImportStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 226, MySQLParser.RULE_importStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2892);
                this.match(MySQLParser.IMPORT_SYMBOL);
                this.setState(2893);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(2894);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(2895);
                this.textStringLiteralList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public callStatement(): CallStatementContext {
        let localctx: CallStatementContext = new CallStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 228, MySQLParser.RULE_callStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2897);
                this.match(MySQLParser.CALL_SYMBOL);
                this.setState(2898);
                this.procedureRef();
                this.setState(2904);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(2899);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(2901);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 220, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(2900);
                                    this.exprList();
                                }
                                break;
                        }
                        this.setState(2903);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public deleteStatement(): DeleteStatementContext {
        let localctx: DeleteStatementContext = new DeleteStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 230, MySQLParser.RULE_deleteStatement);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2907);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 645) {
                    {
                        this.setState(2906);
                        this.withClause();
                    }
                }

                this.setState(2909);
                this.match(MySQLParser.DELETE_SYMBOL);
                this.setState(2913);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 223, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(2910);
                                this.deleteStatementOption();
                            }
                        }
                    }
                    this.setState(2915);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 223, this.getCtx());
                }
                this.setState(2948);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 232, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2916);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(2940);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 230, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(2917);
                                        this.tableAliasRefList();
                                        this.setState(2918);
                                        this.match(MySQLParser.USING_SYMBOL);
                                        this.setState(2919);
                                        this.tableReferenceList();
                                        this.setState(2921);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 643) {
                                            {
                                                this.setState(2920);
                                                this.whereClause();
                                            }
                                        }

                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(2923);
                                        this.tableRef();
                                        this.setState(2926);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 225, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(2924);
                                                    if (!(this.serverVersion >= 80017)) {
                                                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                                                    }
                                                    this.setState(2925);
                                                    this.tableAlias();
                                                }
                                                break;
                                        }
                                        this.setState(2929);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 405) {
                                            {
                                                this.setState(2928);
                                                this.partitionDelete();
                                            }
                                        }

                                        this.setState(2932);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 643) {
                                            {
                                                this.setState(2931);
                                                this.whereClause();
                                            }
                                        }

                                        this.setState(2935);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 393) {
                                            {
                                                this.setState(2934);
                                                this.orderClause();
                                            }
                                        }

                                        this.setState(2938);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 276) {
                                            {
                                                this.setState(2937);
                                                this.simpleLimitClause();
                                            }
                                        }

                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(2942);
                            this.tableAliasRefList();
                            this.setState(2943);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(2944);
                            this.tableReferenceList();
                            this.setState(2946);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 643) {
                                {
                                    this.setState(2945);
                                    this.whereClause();
                                }
                            }

                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionDelete(): PartitionDeleteContext {
        let localctx: PartitionDeleteContext = new PartitionDeleteContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 232, MySQLParser.RULE_partitionDelete);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2950);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(2951);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(2952);
                this.identifierList();
                this.setState(2953);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public deleteStatementOption(): DeleteStatementOptionContext {
        let localctx: DeleteStatementOptionContext = new DeleteStatementOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 234, MySQLParser.RULE_deleteStatementOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2955);
                _la = this.input().LA(1);
                if (!(_la === 232 || _la === 295 || _la === 431)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public doStatement(): DoStatementContext {
        let localctx: DoStatementContext = new DoStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 236, MySQLParser.RULE_doStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2957);
                this.match(MySQLParser.DO_SYMBOL);
                this.setState(2958);
                this.selectItemList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public handlerStatement(): HandlerStatementContext {
        let localctx: HandlerStatementContext = new HandlerStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 238, MySQLParser.RULE_handlerStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2960);
                this.match(MySQLParser.HANDLER_SYMBOL);
                this.setState(2978);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 237, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2961);
                            this.tableRef();
                            this.setState(2962);
                            this.match(MySQLParser.OPEN_SYMBOL);
                            this.setState(2964);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 233, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(2963);
                                        this.tableAlias();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(2966);
                            this.identifier();
                            this.setState(2976);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                                case 66:
                                    {
                                        this.setState(2967);
                                        this.match(MySQLParser.CLOSE_SYMBOL);
                                    }
                                    break;
                                case 435:
                                    {
                                        this.setState(2968);
                                        this.match(MySQLParser.READ_SYMBOL);
                                        this.setState(2969);
                                        this.handlerReadOrScan();
                                        this.setState(2971);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 643) {
                                            {
                                                this.setState(2970);
                                                this.whereClause();
                                            }
                                        }

                                        this.setState(2974);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 276) {
                                            {
                                                this.setState(2973);
                                                this.limitClause();
                                            }
                                        }

                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public handlerReadOrScan(): HandlerReadOrScanContext {
        let localctx: HandlerReadOrScanContext = new HandlerReadOrScanContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 240, MySQLParser.RULE_handlerReadOrScan);
        let _la: number;
        try {
            this.setState(2990);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 239, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(2980);
                        _la = this.input().LA(1);
                        if (!(_la === 191 || _la === 367)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(2981);
                        this.identifier();
                        this.setState(2988);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 191:
                            case 268:
                            case 367:
                            case 419:
                                {
                                    this.setState(2982);
                                    _la = this.input().LA(1);
                                    if (!(_la === 191 || _la === 268 || _la === 367 || _la === 419)) {
                                        this.getErrorHandler().recoverInline(this);
                                    }
                                    else {
                                        this.getErrorHandler().reportMatch(this);
                                        this.consume();
                                    }
                                }
                                break;
                            case 750:
                            case 753:
                            case 754:
                            case 755:
                            case 756:
                                {
                                    this.setState(2983);
                                    _la = this.input().LA(1);
                                    if (!(((((_la - 750)) & ~0x1F) === 0 && ((1 << (_la - 750)) & 121) !== 0))) {
                                        this.getErrorHandler().recoverInline(this);
                                    }
                                    else {
                                        this.getErrorHandler().reportMatch(this);
                                        this.consume();
                                    }
                                    this.setState(2984);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(2985);
                                    this.values();
                                    this.setState(2986);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public insertStatement(): InsertStatementContext {
        let localctx: InsertStatementContext = new InsertStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 242, MySQLParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(2992);
                this.match(MySQLParser.INSERT_SYMBOL);
                this.setState(2994);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 240, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2993);
                            this.insertLockOption();
                        }
                        break;
                }
                this.setState(2997);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 241, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2996);
                            this.match(MySQLParser.IGNORE_SYMBOL);
                        }
                        break;
                }
                this.setState(3000);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 242, this.getCtx())) {
                    case 1:
                        {
                            this.setState(2999);
                            this.match(MySQLParser.INTO_SYMBOL);
                        }
                        break;
                }
                this.setState(3002);
                this.tableRef();
                this.setState(3004);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 243, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3003);
                            this.usePartition();
                        }
                        break;
                }
                this.setState(3018);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 246, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3006);
                            this.insertFromConstructor();
                            this.setState(3009);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 244, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3007);
                                        if (!(this.serverVersion >= 80018)) {
                                            throw this.createFailedPredicateException(" this.serverVersion >= 80018");
                                        }
                                        this.setState(3008);
                                        this.valuesReference();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(3011);
                            this.match(MySQLParser.SET_SYMBOL);
                            this.setState(3012);
                            this.updateList();
                            this.setState(3015);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 245, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3013);
                                        if (!(this.serverVersion >= 80018)) {
                                            throw this.createFailedPredicateException(" this.serverVersion >= 80018");
                                        }
                                        this.setState(3014);
                                        this.valuesReference();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 3:
                        {
                            this.setState(3017);
                            this.insertQueryExpression();
                        }
                        break;
                }
                this.setState(3021);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 383) {
                    {
                        this.setState(3020);
                        this.insertUpdateList();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public insertLockOption(): InsertLockOptionContext {
        let localctx: InsertLockOptionContext = new InsertLockOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 244, MySQLParser.RULE_insertLockOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3023);
                _la = this.input().LA(1);
                if (!(_la === 131 || _la === 223 || _la === 295)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public insertFromConstructor(): InsertFromConstructorContext {
        let localctx: InsertFromConstructorContext = new InsertFromConstructorContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 246, MySQLParser.RULE_insertFromConstructor);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3030);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(3025);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(3027);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 248, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3026);
                                    this.fields();
                                }
                                break;
                        }
                        this.setState(3029);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                }

                this.setState(3032);
                this.insertValues();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fields(): FieldsContext {
        let localctx: FieldsContext = new FieldsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 248, MySQLParser.RULE_fields);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3034);
                this.insertIdentifier();
                this.setState(3039);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(3035);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(3036);
                            this.insertIdentifier();
                        }
                    }
                    this.setState(3041);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public insertValues(): InsertValuesContext {
        let localctx: InsertValuesContext = new InsertValuesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 250, MySQLParser.RULE_insertValues);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3042);
                _la = this.input().LA(1);
                if (!(_la === 626 || _la === 627)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(3043);
                this.valueList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public insertQueryExpression(): InsertQueryExpressionContext {
        let localctx: InsertQueryExpressionContext = new InsertQueryExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 252, MySQLParser.RULE_insertQueryExpression);
        try {
            this.setState(3065);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 255, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3045);
                        if (!(this.serverVersion < 80031)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80031");
                        }
                        this.setState(3053);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 252, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3046);
                                    this.queryExpressionOrParens();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(3047);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(3049);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 251, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(3048);
                                                this.fields();
                                            }
                                            break;
                                    }
                                    this.setState(3051);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                    this.setState(3052);
                                    this.queryExpressionWithOptLockingClauses();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3055);
                        if (!(this.serverVersion >= 80031)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80031");
                        }
                        this.setState(3063);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 254, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3056);
                                    this.queryExpressionWithOptLockingClauses();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(3057);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(3059);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 253, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(3058);
                                                this.fields();
                                            }
                                            break;
                                    }
                                    this.setState(3061);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                    this.setState(3062);
                                    this.queryExpressionWithOptLockingClauses();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public valueList(): ValueListContext {
        let localctx: ValueListContext = new ValueListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 254, MySQLParser.RULE_valueList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3067);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3069);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 256, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3068);
                            this.values();
                        }
                        break;
                }
                this.setState(3071);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(3080);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 258, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3072);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(3073);
                                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                this.setState(3075);
                                this.getErrorHandler().sync(this);
                                switch (this.getInterpreter().adaptivePredict(this.input(), 257, this.getCtx())) {
                                    case 1:
                                        {
                                            this.setState(3074);
                                            this.values();
                                        }
                                        break;
                                }
                                this.setState(3077);
                                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                            }
                        }
                    }
                    this.setState(3082);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 258, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public values(): ValuesContext {
        let localctx: ValuesContext = new ValuesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 256, MySQLParser.RULE_values);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3085);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 259, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3083);
                            this.expr(0);
                        }
                        break;
                    case 2:
                        {
                            this.setState(3084);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
                this.setState(3094);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(3087);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(3090);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 260, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3088);
                                        this.expr(0);
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(3089);
                                        this.match(MySQLParser.DEFAULT_SYMBOL);
                                    }
                                    break;
                            }
                        }
                    }
                    this.setState(3096);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public valuesReference(): ValuesReferenceContext {
        let localctx: ValuesReferenceContext = new ValuesReferenceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 258, MySQLParser.RULE_valuesReference);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3097);
                this.match(MySQLParser.AS_SYMBOL);
                this.setState(3098);
                this.identifier();
                this.setState(3100);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(3099);
                        this.columnInternalRefList();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public insertUpdateList(): InsertUpdateListContext {
        let localctx: InsertUpdateListContext = new InsertUpdateListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 260, MySQLParser.RULE_insertUpdateList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3102);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(3103);
                this.match(MySQLParser.DUPLICATE_SYMBOL);
                this.setState(3104);
                this.match(MySQLParser.KEY_SYMBOL);
                this.setState(3105);
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.setState(3106);
                this.updateList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public loadStatement(): LoadStatementContext {
        let localctx: LoadStatementContext = new LoadStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 262, MySQLParser.RULE_loadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3108);
                this.match(MySQLParser.LOAD_SYMBOL);
                this.setState(3109);
                this.dataOrXml();
                this.setState(3111);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 82 || _la === 295) {
                    {
                        this.setState(3110);
                        _la = this.input().LA(1);
                        if (!(_la === 82 || _la === 295)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                }

                this.setState(3114);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 284) {
                    {
                        this.setState(3113);
                        this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                }

                this.setState(3116);
                this.match(MySQLParser.INFILE_SYMBOL);
                this.setState(3117);
                this.textLiteral();
                this.setState(3119);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232 || _la === 458) {
                    {
                        this.setState(3118);
                        _la = this.input().LA(1);
                        if (!(_la === 232 || _la === 458)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                }

                this.setState(3121);
                this.match(MySQLParser.INTO_SYMBOL);
                this.setState(3122);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(3123);
                this.tableRef();
                this.setState(3125);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 405) {
                    {
                        this.setState(3124);
                        this.usePartition();
                    }
                }

                this.setState(3128);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 58 || _la === 60) {
                    {
                        this.setState(3127);
                        this.charsetClause();
                    }
                }

                this.setState(3131);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 484) {
                    {
                        this.setState(3130);
                        this.xmlRowsIdentifiedBy();
                    }
                }

                this.setState(3134);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 71) {
                    {
                        this.setState(3133);
                        this.fieldsClause();
                    }
                }

                this.setState(3137);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 278) {
                    {
                        this.setState(3136);
                        this.linesClause();
                    }
                }

                this.setState(3139);
                this.loadDataFileTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dataOrXml(): DataOrXmlContext {
        let localctx: DataOrXmlContext = new DataOrXmlContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 264, MySQLParser.RULE_dataOrXml);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3141);
                _la = this.input().LA(1);
                if (!(_la === 112 || _la === 653)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext {
        let localctx: XmlRowsIdentifiedByContext = new XmlRowsIdentifiedByContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 266, MySQLParser.RULE_xmlRowsIdentifiedBy);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3143);
                this.match(MySQLParser.ROWS_SYMBOL);
                this.setState(3144);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(3145);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(3146);
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public loadDataFileTail(): LoadDataFileTailContext {
        let localctx: LoadDataFileTailContext = new LoadDataFileTailContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 268, MySQLParser.RULE_loadDataFileTail);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3151);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232) {
                    {
                        this.setState(3148);
                        this.match(MySQLParser.IGNORE_SYMBOL);
                        this.setState(3149);
                        this.match(MySQLParser.INT_NUMBER);
                        this.setState(3150);
                        _la = this.input().LA(1);
                        if (!(_la === 278 || _la === 484)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                }

                this.setState(3154);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(3153);
                        this.loadDataFileTargetList();
                    }
                }

                this.setState(3158);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 506) {
                    {
                        this.setState(3156);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(3157);
                        this.updateList();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public loadDataFileTargetList(): LoadDataFileTargetListContext {
        let localctx: LoadDataFileTargetListContext = new LoadDataFileTargetListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 270, MySQLParser.RULE_loadDataFileTargetList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3160);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3162);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 274, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3161);
                            this.fieldOrVariableList();
                        }
                        break;
                }
                this.setState(3164);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fieldOrVariableList(): FieldOrVariableListContext {
        let localctx: FieldOrVariableListContext = new FieldOrVariableListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 272, MySQLParser.RULE_fieldOrVariableList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3170);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 275, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3166);
                            this.columnRef();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3167);
                            this.match(MySQLParser.AT_SIGN_SYMBOL);
                            this.setState(3168);
                            this.textOrIdentifier();
                        }
                        break;
                    case 3:
                        {
                            this.setState(3169);
                            this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                        }
                        break;
                }
                this.setState(3182);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(3172);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(3178);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 276, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3173);
                                        this.columnRef();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(3174);
                                        this.match(MySQLParser.AT_SIGN_SYMBOL);
                                        this.setState(3175);
                                        this.textOrIdentifier();
                                    }
                                    break;
                                case 3:
                                    {
                                        this.setState(3176);
                                        this.match(MySQLParser.AT_TEXT_SUFFIX);
                                    }
                                    break;
                                case 4:
                                    {
                                        this.setState(3177);
                                        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                                    }
                                    break;
                            }
                        }
                    }
                    this.setState(3184);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public replaceStatement(): ReplaceStatementContext {
        let localctx: ReplaceStatementContext = new ReplaceStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 274, MySQLParser.RULE_replaceStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3185);
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.setState(3187);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 278, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3186);
                            _la = this.input().LA(1);
                            if (!(_la === 131 || _la === 295)) {
                                this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.setState(3190);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 279, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3189);
                            this.match(MySQLParser.INTO_SYMBOL);
                        }
                        break;
                }
                this.setState(3192);
                this.tableRef();
                this.setState(3194);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 280, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3193);
                            this.usePartition();
                        }
                        break;
                }
                this.setState(3200);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 281, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3196);
                            this.insertFromConstructor();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3197);
                            this.match(MySQLParser.SET_SYMBOL);
                            this.setState(3198);
                            this.updateList();
                        }
                        break;
                    case 3:
                        {
                            this.setState(3199);
                            this.insertQueryExpression();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public selectStatement(): SelectStatementContext {
        let localctx: SelectStatementContext = new SelectStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 276, MySQLParser.RULE_selectStatement);
        let _la: number;
        try {
            this.setState(3207);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 283, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3202);
                        this.queryExpression();
                        this.setState(3204);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 200 || _la === 287) {
                            {
                                this.setState(3203);
                                this.lockingClauseList();
                            }
                        }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3206);
                        this.selectStatementWithInto();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public selectStatementWithInto(): SelectStatementWithIntoContext {
        let localctx: SelectStatementWithIntoContext = new SelectStatementWithIntoContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 278, MySQLParser.RULE_selectStatementWithInto);
        let _la: number;
        try {
            this.setState(3226);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 285, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3209);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(3210);
                        this.selectStatementWithInto();
                        this.setState(3211);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3213);
                        this.queryExpression();
                        this.setState(3214);
                        this.intoClause();
                        this.setState(3216);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 200 || _la === 287) {
                            {
                                this.setState(3215);
                                this.lockingClauseList();
                            }
                        }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3218);
                        this.queryExpression();
                        this.setState(3219);
                        this.lockingClauseList();
                        this.setState(3220);
                        this.intoClause();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(3222);
                        if (!(this.serverVersion >= 80024 && this.serverVersion < 80031)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024 && this.serverVersion < 80031");
                        }
                        this.setState(3223);
                        this.queryExpressionParens();
                        this.setState(3224);
                        this.intoClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public queryExpression(): QueryExpressionContext {
        let localctx: QueryExpressionContext = new QueryExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 280, MySQLParser.RULE_queryExpression);
        try {
            this.setState(3253);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 293, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3228);
                        if (!(this.serverVersion < 80031)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80031");
                        }
                        {
                            this.setState(3230);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 286, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3229);
                                        this.withClause();
                                    }
                                    break;
                            }
                            this.setState(3234);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 287, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3232);
                                        this.queryExpressionBody();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(3233);
                                        this.queryExpressionParens();
                                    }
                                    break;
                            }
                            this.setState(3237);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 288, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3236);
                                        this.orderClause();
                                    }
                                    break;
                            }
                            this.setState(3240);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 289, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3239);
                                        this.limitClause();
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3242);
                        if (!(this.serverVersion >= 80031)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80031");
                        }
                        {
                            this.setState(3244);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 290, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3243);
                                        this.withClause();
                                    }
                                    break;
                            }
                            this.setState(3246);
                            this.queryExpressionBodyNew();
                            this.setState(3248);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 291, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3247);
                                        this.orderClause();
                                    }
                                    break;
                            }
                            this.setState(3251);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 292, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3250);
                                        this.limitClause();
                                    }
                                    break;
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public queryExpressionBody(): QueryExpressionBodyContext {
        let localctx: QueryExpressionBodyContext = new QueryExpressionBodyContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 282, MySQLParser.RULE_queryExpressionBody);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3265);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 296, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3255);
                            this.queryPrimary();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3256);
                            this.queryExpressionParens();
                            this.setState(3257);
                            this.match(MySQLParser.UNION_SYMBOL);
                            this.setState(3259);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 294, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3258);
                                        this.unionOption();
                                    }
                                    break;
                            }
                            this.setState(3263);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 295, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3261);
                                        this.queryPrimary();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(3262);
                                        this.queryExpressionParens();
                                    }
                                    break;
                            }
                        }
                        break;
                }
                this.setState(3277);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 299, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3267);
                                this.match(MySQLParser.UNION_SYMBOL);
                                this.setState(3269);
                                this.getErrorHandler().sync(this);
                                switch (this.getInterpreter().adaptivePredict(this.input(), 297, this.getCtx())) {
                                    case 1:
                                        {
                                            this.setState(3268);
                                            this.unionOption();
                                        }
                                        break;
                                }
                                this.setState(3273);
                                this.getErrorHandler().sync(this);
                                switch (this.getInterpreter().adaptivePredict(this.input(), 298, this.getCtx())) {
                                    case 1:
                                        {
                                            this.setState(3271);
                                            this.queryPrimary();
                                        }
                                        break;
                                    case 2:
                                        {
                                            this.setState(3272);
                                            this.queryExpressionParens();
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    this.setState(3279);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 299, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public queryExpressionBodyNew(): QueryExpressionBodyNewContext {
        let localctx: QueryExpressionBodyNewContext = new QueryExpressionBodyNewContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 284, MySQLParser.RULE_queryExpressionBodyNew);
        let _la: number;
        try {
            this.setState(3289);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 301, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3280);
                        this.queryPrimary();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3281);
                        this.queryExpressionParens();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3282);
                        this.queryExpressionBody();
                        this.setState(3283);
                        _la = this.input().LA(1);
                        if (!(_la === 608 || _la === 663 || _la === 844)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(3285);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 300, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3284);
                                    this.unionOption();
                                }
                                break;
                        }
                        this.setState(3287);
                        this.queryExpressionBody();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public queryExpressionParens(): QueryExpressionParensContext {
        let localctx: QueryExpressionParensContext = new QueryExpressionParensContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 286, MySQLParser.RULE_queryExpressionParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3291);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3294);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 302, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3292);
                            this.queryExpressionParens();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3293);
                            this.queryExpressionWithOptLockingClauses();
                        }
                        break;
                }
                this.setState(3296);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public queryPrimary(): QueryPrimaryContext {
        let localctx: QueryPrimaryContext = new QueryPrimaryContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 288, MySQLParser.RULE_queryPrimary);
        try {
            this.setState(3303);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 303, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3298);
                        this.querySpecification();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3299);
                        if (!(this.serverVersion >= 80019)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80019");
                        }
                        this.setState(3300);
                        this.tableValueConstructor();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3301);
                        if (!(this.serverVersion >= 80019)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80019");
                        }
                        this.setState(3302);
                        this.explicitTable();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public querySpecification(): QuerySpecificationContext {
        let localctx: QuerySpecificationContext = new QuerySpecificationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 290, MySQLParser.RULE_querySpecification);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3305);
                this.match(MySQLParser.SELECT_SYMBOL);
                this.setState(3309);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 304, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3306);
                                this.selectOption();
                            }
                        }
                    }
                    this.setState(3311);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 304, this.getCtx());
                }
                this.setState(3312);
                this.selectItemList();
                this.setState(3314);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 305, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3313);
                            this.intoClause();
                        }
                        break;
                }
                this.setState(3317);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 306, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3316);
                            this.fromClause();
                        }
                        break;
                }
                this.setState(3320);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 307, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3319);
                            this.whereClause();
                        }
                        break;
                }
                this.setState(3323);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 308, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3322);
                            this.groupByClause();
                        }
                        break;
                }
                this.setState(3326);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 309, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3325);
                            this.havingClause();
                        }
                        break;
                }
                this.setState(3329);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 310, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3328);
                            this.windowClause();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public subquery(): SubqueryContext {
        let localctx: SubqueryContext = new SubqueryContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 292, MySQLParser.RULE_subquery);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3331);
                this.queryExpressionParens();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public querySpecOption(): QuerySpecOptionContext {
        let localctx: QuerySpecOptionContext = new QuerySpecOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 294, MySQLParser.RULE_querySpecOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3333);
                _la = this.input().LA(1);
                if (!(_la === 10 || _la === 143 || _la === 223 || ((((_la - 531)) & ~0x1F) === 0 && ((1 << (_la - 531)) & 16777259) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public limitClause(): LimitClauseContext {
        let localctx: LimitClauseContext = new LimitClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 296, MySQLParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3335);
                this.match(MySQLParser.LIMIT_SYMBOL);
                this.setState(3336);
                this.limitOptions();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public simpleLimitClause(): SimpleLimitClauseContext {
        let localctx: SimpleLimitClauseContext = new SimpleLimitClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 298, MySQLParser.RULE_simpleLimitClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3338);
                this.match(MySQLParser.LIMIT_SYMBOL);
                this.setState(3339);
                this.limitOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public limitOptions(): LimitOptionsContext {
        let localctx: LimitOptionsContext = new LimitOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 300, MySQLParser.RULE_limitOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3341);
                this.limitOption();
                this.setState(3344);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 311, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3342);
                            _la = this.input().LA(1);
                            if (!(_la === 381 || _la === 773)) {
                                this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(3343);
                            this.limitOption();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public limitOption(): LimitOptionContext {
        let localctx: LimitOptionContext = new LimitOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 302, MySQLParser.RULE_limitOption);
        let _la: number;
        try {
            this.setState(3348);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 312, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3346);
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3347);
                        _la = this.input().LA(1);
                        if (!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 787)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public intoClause(): IntoClauseContext {
        let localctx: IntoClauseContext = new IntoClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 304, MySQLParser.RULE_intoClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3350);
                this.match(MySQLParser.INTO_SYMBOL);
                this.setState(3378);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 319, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3351);
                            this.match(MySQLParser.OUTFILE_SYMBOL);
                            this.setState(3352);
                            this.textStringLiteral();
                            this.setState(3354);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 313, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3353);
                                        this.charsetClause();
                                    }
                                    break;
                            }
                            this.setState(3357);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 314, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3356);
                                        this.fieldsClause();
                                    }
                                    break;
                            }
                            this.setState(3360);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 315, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3359);
                                        this.linesClause();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(3362);
                            this.match(MySQLParser.DUMPFILE_SYMBOL);
                            this.setState(3363);
                            this.textStringLiteral();
                        }
                        break;
                    case 3:
                        {
                            this.setState(3366);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 316, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3364);
                                        this.textOrIdentifier();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(3365);
                                        this.userVariable();
                                    }
                                    break;
                            }
                            this.setState(3375);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 318, this.getCtx());
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.setState(3368);
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                            this.setState(3371);
                                            this.getErrorHandler().sync(this);
                                            switch (this.getInterpreter().adaptivePredict(this.input(), 317, this.getCtx())) {
                                                case 1:
                                                    {
                                                        this.setState(3369);
                                                        this.textOrIdentifier();
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        this.setState(3370);
                                                        this.userVariable();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                }
                                this.setState(3377);
                                this.getErrorHandler().sync(this);
                                _alt = this.getInterpreter().adaptivePredict(this.input(), 318, this.getCtx());
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public procedureAnalyseClause(): ProcedureAnalyseClauseContext {
        let localctx: ProcedureAnalyseClauseContext = new ProcedureAnalyseClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 306, MySQLParser.RULE_procedureAnalyseClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3380);
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.setState(3381);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3387);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 747) {
                    {
                        this.setState(3382);
                        this.match(MySQLParser.INT_NUMBER);
                        this.setState(3385);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 773) {
                            {
                                this.setState(3383);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(3384);
                                this.match(MySQLParser.INT_NUMBER);
                            }
                        }

                    }
                }

                this.setState(3389);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public havingClause(): HavingClauseContext {
        let localctx: HavingClauseContext = new HavingClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 308, MySQLParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3391);
                this.match(MySQLParser.HAVING_SYMBOL);
                this.setState(3392);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowClause(): WindowClauseContext {
        let localctx: WindowClauseContext = new WindowClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 310, MySQLParser.RULE_windowClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3394);
                this.match(MySQLParser.WINDOW_SYMBOL);
                this.setState(3395);
                this.windowDefinition();
                this.setState(3400);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 322, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3396);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(3397);
                                this.windowDefinition();
                            }
                        }
                    }
                    this.setState(3402);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 322, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowDefinition(): WindowDefinitionContext {
        let localctx: WindowDefinitionContext = new WindowDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 312, MySQLParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3403);
                this.windowName();
                this.setState(3404);
                this.match(MySQLParser.AS_SYMBOL);
                this.setState(3405);
                this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowSpec(): WindowSpecContext {
        let localctx: WindowSpecContext = new WindowSpecContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 314, MySQLParser.RULE_windowSpec);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3407);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3408);
                this.windowSpecDetails();
                this.setState(3409);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowSpecDetails(): WindowSpecDetailsContext {
        let localctx: WindowSpecDetailsContext = new WindowSpecDetailsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 316, MySQLParser.RULE_windowSpecDetails);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3412);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 323, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3411);
                            this.windowName();
                        }
                        break;
                }
                this.setState(3417);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 405) {
                    {
                        this.setState(3414);
                        this.match(MySQLParser.PARTITION_SYMBOL);
                        this.setState(3415);
                        this.match(MySQLParser.BY_SYMBOL);
                        this.setState(3416);
                        this.orderList();
                    }
                }

                this.setState(3420);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 393) {
                    {
                        this.setState(3419);
                        this.orderClause();
                    }
                }

                this.setState(3423);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 432 || _la === 484 || _la === 683) {
                    {
                        this.setState(3422);
                        this.windowFrameClause();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowFrameClause(): WindowFrameClauseContext {
        let localctx: WindowFrameClauseContext = new WindowFrameClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 318, MySQLParser.RULE_windowFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3425);
                this.windowFrameUnits();
                this.setState(3426);
                this.windowFrameExtent();
                this.setState(3428);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 680) {
                    {
                        this.setState(3427);
                        this.windowFrameExclusion();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowFrameUnits(): WindowFrameUnitsContext {
        let localctx: WindowFrameUnitsContext = new WindowFrameUnitsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 320, MySQLParser.RULE_windowFrameUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3430);
                _la = this.input().LA(1);
                if (!(_la === 432 || _la === 484 || _la === 683)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowFrameExtent(): WindowFrameExtentContext {
        let localctx: WindowFrameExtentContext = new WindowFrameExtentContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 322, MySQLParser.RULE_windowFrameExtent);
        try {
            this.setState(3434);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 101:
                case 247:
                case 698:
                case 747:
                case 748:
                case 749:
                case 787:
                case 790:
                case 791:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3432);
                        this.windowFrameStart();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3433);
                        this.windowFrameBetween();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowFrameStart(): WindowFrameStartContext {
        let localctx: WindowFrameStartContext = new WindowFrameStartContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 324, MySQLParser.RULE_windowFrameStart);
        try {
            this.setState(3450);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 698:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3436);
                        this.match(MySQLParser.UNBOUNDED_SYMBOL);
                        this.setState(3437);
                        this.match(MySQLParser.PRECEDING_SYMBOL);
                    }
                    break;
                case 747:
                case 748:
                case 749:
                case 790:
                case 791:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3438);
                        this.ulonglong_number();
                        this.setState(3439);
                        this.match(MySQLParser.PRECEDING_SYMBOL);
                    }
                    break;
                case 787:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3441);
                        this.match(MySQLParser.PARAM_MARKER);
                        this.setState(3442);
                        this.match(MySQLParser.PRECEDING_SYMBOL);
                    }
                    break;
                case 247:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(3443);
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.setState(3444);
                        this.expr(0);
                        this.setState(3445);
                        this.interval();
                        this.setState(3446);
                        this.match(MySQLParser.PRECEDING_SYMBOL);
                    }
                    break;
                case 101:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(3448);
                        this.match(MySQLParser.CURRENT_SYMBOL);
                        this.setState(3449);
                        this.match(MySQLParser.ROW_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowFrameBetween(): WindowFrameBetweenContext {
        let localctx: WindowFrameBetweenContext = new WindowFrameBetweenContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 326, MySQLParser.RULE_windowFrameBetween);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3452);
                this.match(MySQLParser.BETWEEN_SYMBOL);
                this.setState(3453);
                this.windowFrameBound();
                this.setState(3454);
                this.match(MySQLParser.AND_SYMBOL);
                this.setState(3455);
                this.windowFrameBound();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowFrameBound(): WindowFrameBoundContext {
        let localctx: WindowFrameBoundContext = new WindowFrameBoundContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 328, MySQLParser.RULE_windowFrameBound);
        try {
            this.setState(3470);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 330, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3457);
                        this.windowFrameStart();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3458);
                        this.match(MySQLParser.UNBOUNDED_SYMBOL);
                        this.setState(3459);
                        this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3460);
                        this.ulonglong_number();
                        this.setState(3461);
                        this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(3463);
                        this.match(MySQLParser.PARAM_MARKER);
                        this.setState(3464);
                        this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(3465);
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.setState(3466);
                        this.expr(0);
                        this.setState(3467);
                        this.interval();
                        this.setState(3468);
                        this.match(MySQLParser.FOLLOWING_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowFrameExclusion(): WindowFrameExclusionContext {
        let localctx: WindowFrameExclusionContext = new WindowFrameExclusionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 330, MySQLParser.RULE_windowFrameExclusion);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3472);
                this.match(MySQLParser.EXCLUDE_SYMBOL);
                this.setState(3479);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 101:
                        {
                            this.setState(3473);
                            this.match(MySQLParser.CURRENT_SYMBOL);
                            this.setState(3474);
                            this.match(MySQLParser.ROW_SYMBOL);
                        }
                        break;
                    case 217:
                        {
                            this.setState(3475);
                            this.match(MySQLParser.GROUP_SYMBOL);
                        }
                        break;
                    case 697:
                        {
                            this.setState(3476);
                            this.match(MySQLParser.TIES_SYMBOL);
                        }
                        break;
                    case 373:
                        {
                            this.setState(3477);
                            this.match(MySQLParser.NO_SYMBOL);
                            this.setState(3478);
                            this.match(MySQLParser.OTHERS_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public withClause(): WithClauseContext {
        let localctx: WithClauseContext = new WithClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 332, MySQLParser.RULE_withClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3481);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(3483);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 332, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3482);
                            this.match(MySQLParser.RECURSIVE_SYMBOL);
                        }
                        break;
                }
                this.setState(3485);
                this.commonTableExpression();
                this.setState(3490);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 333, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3486);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(3487);
                                this.commonTableExpression();
                            }
                        }
                    }
                    this.setState(3492);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 333, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public commonTableExpression(): CommonTableExpressionContext {
        let localctx: CommonTableExpressionContext = new CommonTableExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 334, MySQLParser.RULE_commonTableExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3493);
                this.identifier();
                this.setState(3495);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(3494);
                        this.columnInternalRefList();
                    }
                }

                this.setState(3497);
                this.match(MySQLParser.AS_SYMBOL);
                this.setState(3498);
                this.subquery();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupByClause(): GroupByClauseContext {
        let localctx: GroupByClauseContext = new GroupByClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 336, MySQLParser.RULE_groupByClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3500);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(3501);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(3502);
                this.orderList();
                this.setState(3504);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 335, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3503);
                            this.olapOption();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public olapOption(): OlapOptionContext {
        let localctx: OlapOptionContext = new OlapOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 338, MySQLParser.RULE_olapOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3506);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(3507);
                this.match(MySQLParser.ROLLUP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public orderClause(): OrderClauseContext {
        let localctx: OrderClauseContext = new OrderClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 340, MySQLParser.RULE_orderClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3509);
                this.match(MySQLParser.ORDER_SYMBOL);
                this.setState(3510);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(3511);
                this.orderList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public direction(): DirectionContext {
        let localctx: DirectionContext = new DirectionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 342, MySQLParser.RULE_direction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3513);
                _la = this.input().LA(1);
                if (!(_la === 18 || _la === 134)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fromClause(): FromClauseContext {
        let localctx: FromClauseContext = new FromClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 344, MySQLParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3515);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(3518);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 336, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3516);
                            this.match(MySQLParser.DUAL_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.setState(3517);
                            this.tableReferenceList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableReferenceList(): TableReferenceListContext {
        let localctx: TableReferenceListContext = new TableReferenceListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 346, MySQLParser.RULE_tableReferenceList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3520);
                this.tableReference();
                this.setState(3525);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 337, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3521);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(3522);
                                this.tableReference();
                            }
                        }
                    }
                    this.setState(3527);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 337, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableValueConstructor(): TableValueConstructorContext {
        let localctx: TableValueConstructorContext = new TableValueConstructorContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 348, MySQLParser.RULE_tableValueConstructor);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3528);
                this.match(MySQLParser.VALUES_SYMBOL);
                this.setState(3529);
                this.rowValueExplicit();
                this.setState(3534);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 338, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3530);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(3531);
                                this.rowValueExplicit();
                            }
                        }
                    }
                    this.setState(3536);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 338, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public explicitTable(): ExplicitTableContext {
        let localctx: ExplicitTableContext = new ExplicitTableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 350, MySQLParser.RULE_explicitTable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3537);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(3538);
                this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public rowValueExplicit(): RowValueExplicitContext {
        let localctx: RowValueExplicitContext = new RowValueExplicitContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 352, MySQLParser.RULE_rowValueExplicit);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3540);
                this.match(MySQLParser.ROW_SYMBOL);
                this.setState(3541);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3543);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 339, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3542);
                            this.values();
                        }
                        break;
                }
                this.setState(3545);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public selectOption(): SelectOptionContext {
        let localctx: SelectOptionContext = new SelectOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 354, MySQLParser.RULE_selectOption);
        try {
            this.setState(3549);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 10:
                case 143:
                case 223:
                case 531:
                case 532:
                case 534:
                case 536:
                case 555:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3547);
                        this.querySpecOption();
                    }
                    break;
                case 535:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3548);
                        this.match(MySQLParser.SQL_NO_CACHE_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lockingClauseList(): LockingClauseListContext {
        let localctx: LockingClauseListContext = new LockingClauseListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 356, MySQLParser.RULE_lockingClauseList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3552);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                do {
                    {
                        {
                            this.setState(3551);
                            this.lockingClause();
                        }
                    }
                    this.setState(3554);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                } while (_la === 200 || _la === 287);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lockingClause(): LockingClauseContext {
        let localctx: LockingClauseContext = new LockingClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 358, MySQLParser.RULE_lockingClause);
        let _la: number;
        try {
            this.setState(3569);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 200:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3556);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(3557);
                        this.lockStrengh();
                        this.setState(3560);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 668) {
                            {
                                this.setState(3558);
                                this.match(MySQLParser.OF_SYMBOL);
                                this.setState(3559);
                                this.tableAliasRefList();
                            }
                        }

                        this.setState(3563);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 669 || _la === 671) {
                            {
                                this.setState(3562);
                                this.lockedRowAction();
                            }
                        }

                    }
                    break;
                case 287:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3565);
                        this.match(MySQLParser.LOCK_SYMBOL);
                        this.setState(3566);
                        this.match(MySQLParser.IN_SYMBOL);
                        this.setState(3567);
                        this.match(MySQLParser.SHARE_SYMBOL);
                        this.setState(3568);
                        this.match(MySQLParser.MODE_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lockStrengh(): LockStrenghContext {
        let localctx: LockStrenghContext = new LockStrenghContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 360, MySQLParser.RULE_lockStrengh);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3571);
                _la = this.input().LA(1);
                if (!(_la === 508 || _la === 614)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lockedRowAction(): LockedRowActionContext {
        let localctx: LockedRowActionContext = new LockedRowActionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 362, MySQLParser.RULE_lockedRowAction);
        try {
            this.setState(3576);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 669:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3573);
                        this.match(MySQLParser.SKIP_SYMBOL);
                        this.setState(3574);
                        this.match(MySQLParser.LOCKED_SYMBOL);
                    }
                    break;
                case 671:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3575);
                        this.match(MySQLParser.NOWAIT_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public selectItemList(): SelectItemListContext {
        let localctx: SelectItemListContext = new SelectItemListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 364, MySQLParser.RULE_selectItemList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3580);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 346, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3578);
                            this.selectItem();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3579);
                            this.match(MySQLParser.MULT_OPERATOR);
                        }
                        break;
                }
                this.setState(3586);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 347, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3582);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(3583);
                                this.selectItem();
                            }
                        }
                    }
                    this.setState(3588);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 347, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public selectItem(): SelectItemContext {
        let localctx: SelectItemContext = new SelectItemContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 366, MySQLParser.RULE_selectItem);
        try {
            this.setState(3594);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 349, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3589);
                        this.tableWild();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3590);
                        this.expr(0);
                        this.setState(3592);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 348, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3591);
                                    this.selectAlias();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public selectAlias(): SelectAliasContext {
        let localctx: SelectAliasContext = new SelectAliasContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 368, MySQLParser.RULE_selectAlias);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3597);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 350, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3596);
                            this.match(MySQLParser.AS_SYMBOL);
                        }
                        break;
                }
                this.setState(3601);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 351, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3599);
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3600);
                            this.textStringLiteral();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public whereClause(): WhereClauseContext {
        let localctx: WhereClauseContext = new WhereClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 370, MySQLParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3603);
                this.match(MySQLParser.WHERE_SYMBOL);
                this.setState(3604);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableReference(): TableReferenceContext {
        let localctx: TableReferenceContext = new TableReferenceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 372, MySQLParser.RULE_tableReference);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3616);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 353, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3606);
                            this.tableFactor();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3607);
                            this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                            this.setState(3611);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 352, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(3608);
                                        if (!(this.serverVersion < 80017)) {
                                            throw this.createFailedPredicateException("this.serverVersion < 80017");
                                        }
                                        this.setState(3609);
                                        this.identifier();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(3610);
                                        this.match(MySQLParser.OJ_SYMBOL);
                                    }
                                    break;
                            }
                            this.setState(3613);
                            this.escapedTableReference();
                            this.setState(3614);
                            this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                        }
                        break;
                }
                this.setState(3621);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 354, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3618);
                                this.joinedTable();
                            }
                        }
                    }
                    this.setState(3623);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 354, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public escapedTableReference(): EscapedTableReferenceContext {
        let localctx: EscapedTableReferenceContext = new EscapedTableReferenceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 374, MySQLParser.RULE_escapedTableReference);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3624);
                this.tableFactor();
                this.setState(3628);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 98 || _la === 239 || _la === 261 || _la === 272 || _la === 359 || _la === 478 || _la === 555) {
                    {
                        {
                            this.setState(3625);
                            this.joinedTable();
                        }
                    }
                    this.setState(3630);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public joinedTable(): JoinedTableContext {
        let localctx: JoinedTableContext = new JoinedTableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 376, MySQLParser.RULE_joinedTable);
        try {
            this.setState(3650);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 98:
                case 239:
                case 261:
                case 555:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3631);
                        this.innerJoinType();
                        this.setState(3632);
                        this.tableReference();
                        this.setState(3637);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 356, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3633);
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.setState(3634);
                                    this.expr(0);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(3635);
                                    this.match(MySQLParser.USING_SYMBOL);
                                    this.setState(3636);
                                    this.identifierListWithParentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 272:
                case 478:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3639);
                        this.outerJoinType();
                        this.setState(3640);
                        this.tableReference();
                        this.setState(3645);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 383:
                                {
                                    this.setState(3641);
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.setState(3642);
                                    this.expr(0);
                                }
                                break;
                            case 621:
                                {
                                    this.setState(3643);
                                    this.match(MySQLParser.USING_SYMBOL);
                                    this.setState(3644);
                                    this.identifierListWithParentheses();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 359:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3647);
                        this.naturalJoinType();
                        this.setState(3648);
                        this.tableFactor();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public naturalJoinType(): NaturalJoinTypeContext {
        let localctx: NaturalJoinTypeContext = new NaturalJoinTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 378, MySQLParser.RULE_naturalJoinType);
        let _la: number;
        try {
            this.setState(3663);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 361, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3652);
                        this.match(MySQLParser.NATURAL_SYMBOL);
                        this.setState(3654);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 239) {
                            {
                                this.setState(3653);
                                this.match(MySQLParser.INNER_SYMBOL);
                            }
                        }

                        this.setState(3656);
                        this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3657);
                        this.match(MySQLParser.NATURAL_SYMBOL);
                        this.setState(3658);
                        _la = this.input().LA(1);
                        if (!(_la === 272 || _la === 478)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(3660);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 395) {
                            {
                                this.setState(3659);
                                this.match(MySQLParser.OUTER_SYMBOL);
                            }
                        }

                        this.setState(3662);
                        this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public innerJoinType(): InnerJoinTypeContext {
        let localctx: InnerJoinTypeContext = new InnerJoinTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 380, MySQLParser.RULE_innerJoinType);
        let _la: number;
        try {
            this.setState(3670);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 98:
                case 239:
                case 261:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3666);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 98 || _la === 239) {
                            {
                                this.setState(3665);
                                localctx._type_ = this.input().LT(1);
                                _la = this.input().LA(1);
                                if (!(_la === 98 || _la === 239)) {
                                    localctx._type_ = this.getErrorHandler().recoverInline(this);
                                }
                                else {
                                    this.getErrorHandler().reportMatch(this);
                                    this.consume();
                                }
                            }
                        }

                        this.setState(3668);
                        this.match(MySQLParser.JOIN_SYMBOL);
                    }
                    break;
                case 555:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3669);
                        localctx._type_ = this.match(MySQLParser.STRAIGHT_JOIN_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public outerJoinType(): OuterJoinTypeContext {
        let localctx: OuterJoinTypeContext = new OuterJoinTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 382, MySQLParser.RULE_outerJoinType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3672);
                localctx._type_ = this.input().LT(1);
                _la = this.input().LA(1);
                if (!(_la === 272 || _la === 478)) {
                    localctx._type_ = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(3674);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 395) {
                    {
                        this.setState(3673);
                        this.match(MySQLParser.OUTER_SYMBOL);
                    }
                }

                this.setState(3676);
                this.match(MySQLParser.JOIN_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableFactor(): TableFactorContext {
        let localctx: TableFactorContext = new TableFactorContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 384, MySQLParser.RULE_tableFactor);
        try {
            this.setState(3684);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 365, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3678);
                        this.singleTable();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3679);
                        this.singleTableParens();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3680);
                        this.derivedTable();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(3681);
                        this.tableReferenceListParens();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(3682);
                        if (!(this.serverVersion >= 80004)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80004");
                        }
                        this.setState(3683);
                        this.tableFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public singleTable(): SingleTableContext {
        let localctx: SingleTableContext = new SingleTableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 386, MySQLParser.RULE_singleTable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3686);
                this.tableRef();
                this.setState(3688);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 366, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3687);
                            this.usePartition();
                        }
                        break;
                }
                this.setState(3691);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 367, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3690);
                            this.tableAlias();
                        }
                        break;
                }
                this.setState(3694);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 368, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3693);
                            this.indexHintList();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public singleTableParens(): SingleTableParensContext {
        let localctx: SingleTableParensContext = new SingleTableParensContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 388, MySQLParser.RULE_singleTableParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3696);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3699);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 369, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3697);
                            this.singleTable();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3698);
                            this.singleTableParens();
                        }
                        break;
                }
                this.setState(3701);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public derivedTable(): DerivedTableContext {
        let localctx: DerivedTableContext = new DerivedTableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 390, MySQLParser.RULE_derivedTable);
        try {
            this.setState(3719);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 374, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3703);
                        this.subquery();
                        this.setState(3705);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 370, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3704);
                                    this.tableAlias();
                                }
                                break;
                        }
                        this.setState(3708);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 371, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3707);
                                    this.columnInternalRefList();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3710);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(3711);
                        this.match(MySQLParser.LATERAL_SYMBOL);
                        this.setState(3712);
                        this.subquery();
                        this.setState(3714);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 372, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3713);
                                    this.tableAlias();
                                }
                                break;
                        }
                        this.setState(3717);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 373, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3716);
                                    this.columnInternalRefList();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableReferenceListParens(): TableReferenceListParensContext {
        let localctx: TableReferenceListParensContext = new TableReferenceListParensContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 392, MySQLParser.RULE_tableReferenceListParens);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3721);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3724);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 375, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3722);
                            this.tableReferenceList();
                        }
                        break;
                    case 2:
                        {
                            this.setState(3723);
                            this.tableReferenceListParens();
                        }
                        break;
                }
                this.setState(3726);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableFunction(): TableFunctionContext {
        let localctx: TableFunctionContext = new TableFunctionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 394, MySQLParser.RULE_tableFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3728);
                this.match(MySQLParser.JSON_TABLE_SYMBOL);
                this.setState(3729);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3730);
                this.expr(0);
                this.setState(3731);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(3732);
                this.textStringLiteral();
                this.setState(3733);
                this.columnsClause();
                this.setState(3734);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(3736);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 376, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3735);
                            this.tableAlias();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public columnsClause(): ColumnsClauseContext {
        let localctx: ColumnsClauseContext = new ColumnsClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 396, MySQLParser.RULE_columnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3738);
                this.match(MySQLParser.COLUMNS_SYMBOL);
                this.setState(3739);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(3740);
                this.jtColumn();
                this.setState(3745);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(3741);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(3742);
                            this.jtColumn();
                        }
                    }
                    this.setState(3747);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(3748);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public jtColumn(): JtColumnContext {
        let localctx: JtColumnContext = new JtColumnContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 398, MySQLParser.RULE_jtColumn);
        let _la: number;
        try {
            this.setState(3773);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 381, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3750);
                        this.identifier();
                        this.setState(3751);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(3752);
                        this.match(MySQLParser.ORDINALITY_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3754);
                        this.identifier();
                        this.setState(3755);
                        this.dataType();
                        this.setState(3758);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 378, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3756);
                                    if (!(this.serverVersion >= 80014)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                                    }
                                    this.setState(3757);
                                    this.collate();
                                }
                                break;
                        }
                        this.setState(3761);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 174) {
                            {
                                this.setState(3760);
                                this.match(MySQLParser.EXISTS_SYMBOL);
                            }
                        }

                        this.setState(3763);
                        this.match(MySQLParser.PATH_SYMBOL);
                        this.setState(3764);
                        this.textStringLiteral();
                        this.setState(3766);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 128 || _la === 165 || _la === 376) {
                            {
                                this.setState(3765);
                                this.onEmptyOrErrorJsonTable();
                            }
                        }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3768);
                        this.match(MySQLParser.NESTED_SYMBOL);
                        this.setState(3769);
                        this.match(MySQLParser.PATH_SYMBOL);
                        this.setState(3770);
                        this.textStringLiteral();
                        this.setState(3771);
                        this.columnsClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public onEmptyOrError(): OnEmptyOrErrorContext {
        let localctx: OnEmptyOrErrorContext = new OnEmptyOrErrorContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 400, MySQLParser.RULE_onEmptyOrError);
        let _la: number;
        try {
            this.setState(3780);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 383, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3775);
                        this.onEmpty();
                        this.setState(3777);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 128 || _la === 165 || _la === 376) {
                            {
                                this.setState(3776);
                                this.onError();
                            }
                        }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3779);
                        this.onError();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public onEmptyOrErrorJsonTable(): OnEmptyOrErrorJsonTableContext {
        let localctx: OnEmptyOrErrorJsonTableContext = new OnEmptyOrErrorJsonTableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 402, MySQLParser.RULE_onEmptyOrErrorJsonTable);
        try {
            this.setState(3786);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 384, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3782);
                        this.onEmptyOrError();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3783);
                        this.onError();
                        this.setState(3784);
                        this.onEmpty();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public onEmpty(): OnEmptyContext {
        let localctx: OnEmptyContext = new OnEmptyContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 404, MySQLParser.RULE_onEmpty);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3788);
                this.jsonOnResponse();
                this.setState(3789);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(3790);
                this.match(MySQLParser.EMPTY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public onError(): OnErrorContext {
        let localctx: OnErrorContext = new OnErrorContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 406, MySQLParser.RULE_onError);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3792);
                this.jsonOnResponse();
                this.setState(3793);
                this.match(MySQLParser.ON_SYMBOL);
                this.setState(3794);
                this.match(MySQLParser.ERROR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public jsonOnResponse(): JsonOnResponseContext {
        let localctx: JsonOnResponseContext = new JsonOnResponseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 408, MySQLParser.RULE_jsonOnResponse);
        try {
            this.setState(3800);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 165:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3796);
                        this.match(MySQLParser.ERROR_SYMBOL);
                    }
                    break;
                case 376:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3797);
                        this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
                case 128:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3798);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.setState(3799);
                        this.textStringLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public unionOption(): UnionOptionContext {
        let localctx: UnionOptionContext = new UnionOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 410, MySQLParser.RULE_unionOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3802);
                _la = this.input().LA(1);
                if (!(_la === 10 || _la === 143)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableAlias(): TableAliasContext {
        let localctx: TableAliasContext = new TableAliasContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 412, MySQLParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3807);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 386, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3804);
                            this.match(MySQLParser.AS_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.setState(3805);
                            if (!(this.serverVersion < 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80017");
                            }
                            this.setState(3806);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(3809);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexHintList(): IndexHintListContext {
        let localctx: IndexHintListContext = new IndexHintListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 414, MySQLParser.RULE_indexHintList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3811);
                this.indexHint();
                this.setState(3816);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 387, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(3812);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(3813);
                                this.indexHint();
                            }
                        }
                    }
                    this.setState(3818);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 387, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexHint(): IndexHintContext {
        let localctx: IndexHintContext = new IndexHintContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 416, MySQLParser.RULE_indexHint);
        let _la: number;
        try {
            this.setState(3839);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 198:
                case 232:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3819);
                        this.indexHintType();
                        this.setState(3820);
                        this.keyOrIndex();
                        this.setState(3822);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 200) {
                            {
                                this.setState(3821);
                                this.indexHintClause();
                            }
                        }

                        this.setState(3824);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(3825);
                        this.indexList();
                        this.setState(3826);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 620:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3828);
                        this.match(MySQLParser.USE_SYMBOL);
                        this.setState(3829);
                        this.keyOrIndex();
                        this.setState(3831);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 200) {
                            {
                                this.setState(3830);
                                this.indexHintClause();
                            }
                        }

                        this.setState(3833);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(3835);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 390, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(3834);
                                    this.indexList();
                                }
                                break;
                        }
                        this.setState(3837);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexHintType(): IndexHintTypeContext {
        let localctx: IndexHintTypeContext = new IndexHintTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 418, MySQLParser.RULE_indexHintType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3841);
                _la = this.input().LA(1);
                if (!(_la === 198 || _la === 232)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyOrIndex(): KeyOrIndexContext {
        let localctx: KeyOrIndexContext = new KeyOrIndexContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 420, MySQLParser.RULE_keyOrIndex);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3843);
                _la = this.input().LA(1);
                if (!(_la === 236 || _la === 265)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public constraintKeyType(): ConstraintKeyTypeContext {
        let localctx: ConstraintKeyTypeContext = new ConstraintKeyTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 422, MySQLParser.RULE_constraintKeyType);
        let _la: number;
        try {
            this.setState(3851);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 420:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3845);
                        this.match(MySQLParser.PRIMARY_SYMBOL);
                        this.setState(3846);
                        this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 609:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3847);
                        this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.setState(3849);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 236 || _la === 265) {
                            {
                                this.setState(3848);
                                this.keyOrIndex();
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexHintClause(): IndexHintClauseContext {
        let localctx: IndexHintClauseContext = new IndexHintClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 424, MySQLParser.RULE_indexHintClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3853);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(3859);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 261:
                        {
                            this.setState(3854);
                            this.match(MySQLParser.JOIN_SYMBOL);
                        }
                        break;
                    case 393:
                        {
                            this.setState(3855);
                            this.match(MySQLParser.ORDER_SYMBOL);
                            this.setState(3856);
                            this.match(MySQLParser.BY_SYMBOL);
                        }
                        break;
                    case 217:
                        {
                            this.setState(3857);
                            this.match(MySQLParser.GROUP_SYMBOL);
                            this.setState(3858);
                            this.match(MySQLParser.BY_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexList(): IndexListContext {
        let localctx: IndexListContext = new IndexListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 426, MySQLParser.RULE_indexList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3861);
                this.indexListElement();
                this.setState(3866);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(3862);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(3863);
                            this.indexListElement();
                        }
                    }
                    this.setState(3868);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexListElement(): IndexListElementContext {
        let localctx: IndexListElementContext = new IndexListElementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 428, MySQLParser.RULE_indexListElement);
        try {
            this.setState(3871);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 396, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3869);
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3870);
                        this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public updateStatement(): UpdateStatementContext {
        let localctx: UpdateStatementContext = new UpdateStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 430, MySQLParser.RULE_updateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3874);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 645) {
                    {
                        this.setState(3873);
                        this.withClause();
                    }
                }

                this.setState(3876);
                this.match(MySQLParser.UPDATE_SYMBOL);
                this.setState(3878);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 398, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3877);
                            this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                        }
                        break;
                }
                this.setState(3881);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 399, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3880);
                            this.match(MySQLParser.IGNORE_SYMBOL);
                        }
                        break;
                }
                this.setState(3883);
                this.tableReferenceList();
                this.setState(3884);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(3885);
                this.updateList();
                this.setState(3887);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 643) {
                    {
                        this.setState(3886);
                        this.whereClause();
                    }
                }

                this.setState(3890);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 393) {
                    {
                        this.setState(3889);
                        this.orderClause();
                    }
                }

                this.setState(3893);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 276) {
                    {
                        this.setState(3892);
                        this.simpleLimitClause();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public transactionOrLockingStatement(): TransactionOrLockingStatementContext {
        let localctx: TransactionOrLockingStatementContext = new TransactionOrLockingStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 432, MySQLParser.RULE_transactionOrLockingStatement);
        try {
            this.setState(3899);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 77:
                case 543:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3895);
                        this.transactionStatement();
                    }
                    break;
                case 450:
                case 480:
                case 489:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3896);
                        this.savepointStatement();
                    }
                    break;
                case 287:
                case 611:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3897);
                        this.lockStatement();
                    }
                    break;
                case 651:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(3898);
                        this.xaStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public transactionStatement(): TransactionStatementContext {
        let localctx: TransactionStatementContext = new TransactionStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 434, MySQLParser.RULE_transactionStatement);
        let _la: number;
        try {
            this.setState(3926);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 543:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3901);
                        this.match(MySQLParser.START_SYMBOL);
                        this.setState(3902);
                        this.match(MySQLParser.TRANSACTION_SYMBOL);
                        this.setState(3906);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 435 || _la === 645) {
                            {
                                {
                                    this.setState(3903);
                                    this.startTransactionOptionList();
                                }
                            }
                            this.setState(3908);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                case 77:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3909);
                        this.match(MySQLParser.COMMIT_SYMBOL);
                        this.setState(3911);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 647) {
                            {
                                this.setState(3910);
                                this.match(MySQLParser.WORK_SYMBOL);
                            }
                        }

                        this.setState(3918);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 15) {
                            {
                                this.setState(3913);
                                this.match(MySQLParser.AND_SYMBOL);
                                this.setState(3915);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                                if (_la === 373) {
                                    {
                                        this.setState(3914);
                                        this.match(MySQLParser.NO_SYMBOL);
                                    }
                                }

                                this.setState(3917);
                                this.match(MySQLParser.CHAIN_SYMBOL);
                            }
                        }

                        this.setState(3924);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 373 || _la === 450) {
                            {
                                this.setState(3921);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                                if (_la === 373) {
                                    {
                                        this.setState(3920);
                                        this.match(MySQLParser.NO_SYMBOL);
                                    }
                                }

                                this.setState(3923);
                                this.match(MySQLParser.RELEASE_SYMBOL);
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public beginWork(): BeginWorkContext {
        let localctx: BeginWorkContext = new BeginWorkContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 436, MySQLParser.RULE_beginWork);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3928);
                this.match(MySQLParser.BEGIN_SYMBOL);
                this.setState(3930);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 647) {
                    {
                        this.setState(3929);
                        this.match(MySQLParser.WORK_SYMBOL);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public startTransactionOptionList(): StartTransactionOptionListContext {
        let localctx: StartTransactionOptionListContext = new StartTransactionOptionListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 438, MySQLParser.RULE_startTransactionOptionList);
        let _la: number;
        try {
            this.setState(3937);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 645:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3932);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(3933);
                        this.match(MySQLParser.CONSISTENT_SYMBOL);
                        this.setState(3934);
                        this.match(MySQLParser.SNAPSHOT_SYMBOL);
                    }
                    break;
                case 435:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3935);
                        this.match(MySQLParser.READ_SYMBOL);
                        this.setState(3936);
                        _la = this.input().LA(1);
                        if (!(_la === 386 || _la === 649)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public savepointStatement(): SavepointStatementContext {
        let localctx: SavepointStatementContext = new SavepointStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 440, MySQLParser.RULE_savepointStatement);
        let _la: number;
        try {
            this.setState(3968);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 489:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3939);
                        this.match(MySQLParser.SAVEPOINT_SYMBOL);
                        this.setState(3940);
                        this.identifier();
                    }
                    break;
                case 480:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3941);
                        this.match(MySQLParser.ROLLBACK_SYMBOL);
                        this.setState(3943);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 647) {
                            {
                                this.setState(3942);
                                this.match(MySQLParser.WORK_SYMBOL);
                            }
                        }

                        this.setState(3963);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 590:
                                {
                                    this.setState(3945);
                                    this.match(MySQLParser.TO_SYMBOL);
                                    this.setState(3947);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 414, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(3946);
                                                this.match(MySQLParser.SAVEPOINT_SYMBOL);
                                            }
                                            break;
                                    }
                                    this.setState(3949);
                                    this.identifier();
                                }
                                break;
                            case -1:
                            case 15:
                            case 373:
                            case 450:
                            case 774:
                                {
                                    this.setState(3955);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 15) {
                                        {
                                            this.setState(3950);
                                            this.match(MySQLParser.AND_SYMBOL);
                                            this.setState(3952);
                                            this.getErrorHandler().sync(this);
                                            _la = this.input().LA(1);
                                            if (_la === 373) {
                                                {
                                                    this.setState(3951);
                                                    this.match(MySQLParser.NO_SYMBOL);
                                                }
                                            }

                                            this.setState(3954);
                                            this.match(MySQLParser.CHAIN_SYMBOL);
                                        }
                                    }

                                    this.setState(3961);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 373 || _la === 450) {
                                        {
                                            this.setState(3958);
                                            this.getErrorHandler().sync(this);
                                            _la = this.input().LA(1);
                                            if (_la === 373) {
                                                {
                                                    this.setState(3957);
                                                    this.match(MySQLParser.NO_SYMBOL);
                                                }
                                            }

                                            this.setState(3960);
                                            this.match(MySQLParser.RELEASE_SYMBOL);
                                        }
                                    }

                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 450:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3965);
                        this.match(MySQLParser.RELEASE_SYMBOL);
                        this.setState(3966);
                        this.match(MySQLParser.SAVEPOINT_SYMBOL);
                        this.setState(3967);
                        this.identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lockStatement(): LockStatementContext {
        let localctx: LockStatementContext = new LockStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 442, MySQLParser.RULE_lockStatement);
        let _la: number;
        try {
            this.setState(3986);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 422, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3970);
                        this.match(MySQLParser.LOCK_SYMBOL);
                        this.setState(3971);
                        _la = this.input().LA(1);
                        if (!(_la === 571 || _la === 574)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(3972);
                        this.lockItem();
                        this.setState(3977);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 773) {
                            {
                                {
                                    this.setState(3973);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(3974);
                                    this.lockItem();
                                }
                            }
                            this.setState(3979);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3980);
                        this.match(MySQLParser.LOCK_SYMBOL);
                        this.setState(3981);
                        this.match(MySQLParser.INSTANCE_SYMBOL);
                        this.setState(3982);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(3983);
                        this.match(MySQLParser.BACKUP_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(3984);
                        this.match(MySQLParser.UNLOCK_SYMBOL);
                        this.setState(3985);
                        _la = this.input().LA(1);
                        if (!(_la === 244 || _la === 571 || _la === 574)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lockItem(): LockItemContext {
        let localctx: LockItemContext = new LockItemContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 444, MySQLParser.RULE_lockItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(3988);
                this.tableRef();
                this.setState(3990);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 423, this.getCtx())) {
                    case 1:
                        {
                            this.setState(3989);
                            this.tableAlias();
                        }
                        break;
                }
                this.setState(3992);
                this.lockOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lockOption(): LockOptionContext {
        let localctx: LockOptionContext = new LockOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 446, MySQLParser.RULE_lockOption);
        let _la: number;
        try {
            this.setState(4002);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 435:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(3994);
                        this.match(MySQLParser.READ_SYMBOL);
                        this.setState(3996);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 284) {
                            {
                                this.setState(3995);
                                this.match(MySQLParser.LOCAL_SYMBOL);
                            }
                        }

                    }
                    break;
                case 295:
                case 649:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(3999);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 295) {
                            {
                                this.setState(3998);
                                this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
                            }
                        }

                        this.setState(4001);
                        this.match(MySQLParser.WRITE_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public xaStatement(): XaStatementContext {
        let localctx: XaStatementContext = new XaStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 448, MySQLParser.RULE_xaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4004);
                this.match(MySQLParser.XA_SYMBOL);
                this.setState(4033);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 29:
                    case 543:
                        {
                            this.setState(4005);
                            _la = this.input().LA(1);
                            if (!(_la === 29 || _la === 543)) {
                                this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(4006);
                            this.xid();
                            this.setState(4008);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 261 || _la === 472) {
                                {
                                    this.setState(4007);
                                    _la = this.input().LA(1);
                                    if (!(_la === 261 || _la === 472)) {
                                        this.getErrorHandler().recoverInline(this);
                                    }
                                    else {
                                        this.getErrorHandler().reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }

                        }
                        break;
                    case 159:
                        {
                            this.setState(4010);
                            this.match(MySQLParser.END_SYMBOL);
                            this.setState(4011);
                            this.xid();
                            this.setState(4017);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 566) {
                                {
                                    this.setState(4012);
                                    this.match(MySQLParser.SUSPEND_SYMBOL);
                                    this.setState(4015);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 200) {
                                        {
                                            this.setState(4013);
                                            this.match(MySQLParser.FOR_SYMBOL);
                                            this.setState(4014);
                                            this.match(MySQLParser.MIGRATE_SYMBOL);
                                        }
                                    }

                                }
                            }

                        }
                        break;
                    case 417:
                        {
                            this.setState(4019);
                            this.match(MySQLParser.PREPARE_SYMBOL);
                            this.setState(4020);
                            this.xid();
                        }
                        break;
                    case 77:
                        {
                            this.setState(4021);
                            this.match(MySQLParser.COMMIT_SYMBOL);
                            this.setState(4022);
                            this.xid();
                            this.setState(4025);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 384) {
                                {
                                    this.setState(4023);
                                    this.match(MySQLParser.ONE_SYMBOL);
                                    this.setState(4024);
                                    this.match(MySQLParser.PHASE_SYMBOL);
                                }
                            }

                        }
                        break;
                    case 480:
                        {
                            this.setState(4027);
                            this.match(MySQLParser.ROLLBACK_SYMBOL);
                            this.setState(4028);
                            this.xid();
                        }
                        break;
                    case 439:
                        {
                            this.setState(4029);
                            this.match(MySQLParser.RECOVER_SYMBOL);
                            this.setState(4031);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 94) {
                                {
                                    this.setState(4030);
                                    this.xaConvert();
                                }
                            }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public xaConvert(): XaConvertContext {
        let localctx: XaConvertContext = new XaConvertContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 450, MySQLParser.RULE_xaConvert);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4035);
                this.match(MySQLParser.CONVERT_SYMBOL);
                this.setState(4036);
                this.match(MySQLParser.XID_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public xid(): XidContext {
        let localctx: XidContext = new XidContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 452, MySQLParser.RULE_xid);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4038);
                this.textString();
                this.setState(4045);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                        this.setState(4039);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(4040);
                        this.textString();
                        this.setState(4043);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 773) {
                            {
                                this.setState(4041);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(4042);
                                this.ulong_number();
                            }
                        }

                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public replicationStatement(): ReplicationStatementContext {
        let localctx: ReplicationStatementContext = new ReplicationStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 454, MySQLParser.RULE_replicationStatement);
        let _la: number;
        try {
            this.setState(4078);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 438, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4047);
                        this.match(MySQLParser.PURGE_SYMBOL);
                        this.setState(4048);
                        _la = this.input().LA(1);
                        if (!(_la === 32 || _la === 316)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(4049);
                        this.match(MySQLParser.LOGS_SYMBOL);
                        this.setState(4054);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 590:
                                {
                                    this.setState(4050);
                                    this.match(MySQLParser.TO_SYMBOL);
                                    this.setState(4051);
                                    this.textLiteral();
                                }
                                break;
                            case 28:
                                {
                                    this.setState(4052);
                                    this.match(MySQLParser.BEFORE_SYMBOL);
                                    this.setState(4053);
                                    this.expr(0);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4056);
                        this.changeSource();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4057);
                        this.match(MySQLParser.RESET_SYMBOL);
                        this.setState(4058);
                        this.resetOption();
                        this.setState(4063);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 773) {
                            {
                                {
                                    this.setState(4059);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(4060);
                                    this.resetOption();
                                }
                            }
                            this.setState(4065);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(4066);
                        this.match(MySQLParser.RESET_SYMBOL);
                        this.setState(4067);
                        this.match(MySQLParser.PERSIST_SYMBOL);
                        this.setState(4071);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 231) {
                            {
                                this.setState(4068);
                                this.ifExists();
                                this.setState(4069);
                                this.identifier();
                            }
                        }

                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(4073);
                        this.startReplicaStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(4074);
                        this.stopReplicaStatement();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(4075);
                        this.changeReplication();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(4076);
                        this.replicationLoad();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(4077);
                        this.groupReplication();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public resetOption(): ResetOptionContext {
        let localctx: ResetOptionContext = new ResetOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 456, MySQLParser.RULE_resetOption);
        let _la: number;
        try {
            this.setState(4091);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 316:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4080);
                        this.match(MySQLParser.MASTER_SYMBOL);
                        this.setState(4082);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 590) {
                            {
                                this.setState(4081);
                                this.sourceResetOptions();
                            }
                        }

                    }
                    break;
                case 514:
                case 803:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4084);
                        this.replica();
                        this.setState(4086);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 10) {
                            {
                                this.setState(4085);
                                this.match(MySQLParser.ALL_SYMBOL);
                            }
                        }

                        this.setState(4089);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 200) {
                            {
                                this.setState(4088);
                                this.channel();
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sourceResetOptions(): SourceResetOptionsContext {
        let localctx: SourceResetOptionsContext = new SourceResetOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 458, MySQLParser.RULE_sourceResetOptions);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4093);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(4098);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 443, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4094);
                            if (!(this.serverVersion < 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80017");
                            }
                            this.setState(4095);
                            this.real_ulong_number();
                        }
                        break;
                    case 2:
                        {
                            this.setState(4096);
                            if (!(this.serverVersion >= 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80017");
                            }
                            this.setState(4097);
                            this.real_ulonglong_number();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public replicationLoad(): ReplicationLoadContext {
        let localctx: ReplicationLoadContext = new ReplicationLoadContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 460, MySQLParser.RULE_replicationLoad);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4100);
                this.match(MySQLParser.LOAD_SYMBOL);
                this.setState(4104);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 112:
                        {
                            this.setState(4101);
                            this.match(MySQLParser.DATA_SYMBOL);
                        }
                        break;
                    case 574:
                        {
                            this.setState(4102);
                            this.match(MySQLParser.TABLE_SYMBOL);
                            this.setState(4103);
                            this.tableRef();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                this.setState(4106);
                this.match(MySQLParser.FROM_SYMBOL);
                this.setState(4107);
                this.match(MySQLParser.MASTER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSource(): ChangeReplicationSourceContext {
        let localctx: ChangeReplicationSourceContext = new ChangeReplicationSourceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 462, MySQLParser.RULE_changeReplicationSource);
        try {
            this.setState(4113);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 445, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4109);
                        this.match(MySQLParser.MASTER_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4110);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(4111);
                        this.match(MySQLParser.REPLICATION_SYMBOL);
                        this.setState(4112);
                        this.match(MySQLParser.SOURCE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeSource(): ChangeSourceContext {
        let localctx: ChangeSourceContext = new ChangeSourceContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 464, MySQLParser.RULE_changeSource);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4115);
                this.match(MySQLParser.CHANGE_SYMBOL);
                this.setState(4116);
                this.changeReplicationSource();
                this.setState(4117);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(4118);
                this.sourceDefinitions();
                this.setState(4120);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(4119);
                        this.channel();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sourceDefinitions(): SourceDefinitionsContext {
        let localctx: SourceDefinitionsContext = new SourceDefinitionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 466, MySQLParser.RULE_sourceDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4122);
                this.sourceDefinition();
                this.setState(4127);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4123);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4124);
                            this.sourceDefinition();
                        }
                    }
                    this.setState(4129);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sourceDefinition(): SourceDefinitionContext {
        let localctx: SourceDefinitionContext = new SourceDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 468, MySQLParser.RULE_sourceDefinition);
        try {
            this.setState(4258);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 448, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4130);
                        this.changeReplicationSourceHost();
                        this.setState(4131);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4132);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4134);
                        this.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL);
                        this.setState(4135);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4136);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4137);
                        this.changeReplicationSourceBind();
                        this.setState(4138);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4139);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(4141);
                        this.changeReplicationSourceUser();
                        this.setState(4142);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4143);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(4145);
                        this.changeReplicationSourcePassword();
                        this.setState(4146);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4147);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(4149);
                        this.changeReplicationSourcePort();
                        this.setState(4150);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4151);
                        this.ulong_number();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(4153);
                        this.changeReplicationSourceConnectRetry();
                        this.setState(4154);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4155);
                        this.ulong_number();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(4157);
                        this.changeReplicationSourceRetryCount();
                        this.setState(4158);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4159);
                        this.ulong_number();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(4161);
                        this.changeReplicationSourceDelay();
                        this.setState(4162);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4163);
                        this.ulong_number();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(4165);
                        this.changeReplicationSourceSSL();
                        this.setState(4166);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4167);
                        this.ulong_number();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(4169);
                        this.changeReplicationSourceSSLCA();
                        this.setState(4170);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4171);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(4173);
                        this.changeReplicationSourceSSLCApath();
                        this.setState(4174);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4175);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(4177);
                        this.changeReplicationSourceTLSVersion();
                        this.setState(4178);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4179);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                        this.setState(4181);
                        this.changeReplicationSourceSSLCert();
                        this.setState(4182);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4183);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                        this.setState(4185);
                        this.changeReplicationSourceTLSCiphersuites();
                        this.setState(4186);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4187);
                        this.sourceTlsCiphersuitesDef();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                        this.setState(4189);
                        this.changeReplicationSourceSSLCipher();
                        this.setState(4190);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4191);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                        this.setState(4193);
                        this.changeReplicationSourceSSLKey();
                        this.setState(4194);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4195);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                        this.setState(4197);
                        this.changeReplicationSourceSSLVerifyServerCert();
                        this.setState(4198);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4199);
                        this.ulong_number();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                        this.setState(4201);
                        this.changeReplicationSourceSSLCLR();
                        this.setState(4202);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4203);
                        this.textLiteral();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                        this.setState(4205);
                        this.changeReplicationSourceSSLCLRpath();
                        this.setState(4206);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4207);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                        this.setState(4209);
                        this.changeReplicationSourcePublicKey();
                        this.setState(4210);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4211);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                        this.setState(4213);
                        this.changeReplicationSourceGetSourcePublicKey();
                        this.setState(4214);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4215);
                        this.ulong_number();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                        this.setState(4217);
                        this.changeReplicationSourceHeartbeatPeriod();
                        this.setState(4218);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4219);
                        this.ulong_number();
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                        this.setState(4221);
                        this.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL);
                        this.setState(4222);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4223);
                        this.serverIdList();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                        this.setState(4224);
                        this.changeReplicationSourceCompressionAlgorithm();
                        this.setState(4225);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4226);
                        this.textStringLiteral();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                        this.setState(4228);
                        this.changeReplicationSourceZstdCompressionLevel();
                        this.setState(4229);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4230);
                        this.ulong_number();
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                        this.setState(4232);
                        this.changeReplicationSourceAutoPosition();
                        this.setState(4233);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4234);
                        this.ulong_number();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                        this.setState(4236);
                        this.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
                        this.setState(4237);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4238);
                        this.privilegeCheckDef();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                        this.setState(4239);
                        this.match(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL);
                        this.setState(4240);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4241);
                        this.ulong_number();
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                        this.setState(4242);
                        this.match(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
                        this.setState(4243);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4244);
                        this.tablePrimaryKeyCheckDef();
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                        this.setState(4245);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(4246);
                        this.match(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL);
                        this.setState(4247);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4248);
                        this.real_ulong_number();
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                        this.setState(4249);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(4250);
                        this.match(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL);
                        this.setState(4251);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4252);
                        this.assignGtidsToAnonymousTransactionsDefinition();
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                        this.setState(4253);
                        if (!(this.serverVersion >= 80027)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80027");
                        }
                        this.setState(4254);
                        this.match(MySQLParser.GTID_ONLY_SYMBOL);
                        this.setState(4255);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4256);
                        this.real_ulong_number();
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                        this.setState(4257);
                        this.sourceFileDef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceAutoPosition(): ChangeReplicationSourceAutoPositionContext {
        let localctx: ChangeReplicationSourceAutoPositionContext = new ChangeReplicationSourceAutoPositionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 470, MySQLParser.RULE_changeReplicationSourceAutoPosition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4260);
                _la = this.input().LA(1);
                if (!(_la === 296 || _la === 807)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceHost(): ChangeReplicationSourceHostContext {
        let localctx: ChangeReplicationSourceHostContext = new ChangeReplicationSourceHostContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 472, MySQLParser.RULE_changeReplicationSourceHost);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4262);
                _la = this.input().LA(1);
                if (!(_la === 300 || _la === 813)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceBind(): ChangeReplicationSourceBindContext {
        let localctx: ChangeReplicationSourceBindContext = new ChangeReplicationSourceBindContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 474, MySQLParser.RULE_changeReplicationSourceBind);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4264);
                _la = this.input().LA(1);
                if (!(_la === 297 || _la === 808)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceUser(): ChangeReplicationSourceUserContext {
        let localctx: ChangeReplicationSourceUserContext = new ChangeReplicationSourceUserContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 476, MySQLParser.RULE_changeReplicationSourceUser);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4266);
                _la = this.input().LA(1);
                if (!(_la === 318 || _la === 831)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourcePassword(): ChangeReplicationSourcePasswordContext {
        let localctx: ChangeReplicationSourcePasswordContext = new ChangeReplicationSourcePasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 478, MySQLParser.RULE_changeReplicationSourcePassword);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4268);
                _la = this.input().LA(1);
                if (!(_la === 303 || _la === 816)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourcePort(): ChangeReplicationSourcePortContext {
        let localctx: ChangeReplicationSourcePortContext = new ChangeReplicationSourcePortContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 480, MySQLParser.RULE_changeReplicationSourcePort);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4270);
                _la = this.input().LA(1);
                if (!(_la === 304 || _la === 817)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceConnectRetry(): ChangeReplicationSourceConnectRetryContext {
        let localctx: ChangeReplicationSourceConnectRetryContext = new ChangeReplicationSourceConnectRetryContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 482, MySQLParser.RULE_changeReplicationSourceConnectRetry);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4272);
                _la = this.input().LA(1);
                if (!(_la === 298 || _la === 810)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceRetryCount(): ChangeReplicationSourceRetryCountContext {
        let localctx: ChangeReplicationSourceRetryCountContext = new ChangeReplicationSourceRetryCountContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 484, MySQLParser.RULE_changeReplicationSourceRetryCount);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4274);
                _la = this.input().LA(1);
                if (!(_la === 305 || _la === 819)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceDelay(): ChangeReplicationSourceDelayContext {
        let localctx: ChangeReplicationSourceDelayContext = new ChangeReplicationSourceDelayContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 486, MySQLParser.RULE_changeReplicationSourceDelay);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4276);
                _la = this.input().LA(1);
                if (!(_la === 299 || _la === 811)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSL(): ChangeReplicationSourceSSLContext {
        let localctx: ChangeReplicationSourceSSLContext = new ChangeReplicationSourceSSLContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 488, MySQLParser.RULE_changeReplicationSourceSSL);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4278);
                _la = this.input().LA(1);
                if (!(_la === 314 || _la === 820)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSLCA(): ChangeReplicationSourceSSLCAContext {
        let localctx: ChangeReplicationSourceSSLCAContext = new ChangeReplicationSourceSSLCAContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 490, MySQLParser.RULE_changeReplicationSourceSSLCA);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4280);
                _la = this.input().LA(1);
                if (!(_la === 308 || _la === 821)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSLCApath(): ChangeReplicationSourceSSLCApathContext {
        let localctx: ChangeReplicationSourceSSLCApathContext = new ChangeReplicationSourceSSLCApathContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 492, MySQLParser.RULE_changeReplicationSourceSSLCApath);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4282);
                _la = this.input().LA(1);
                if (!(_la === 307 || _la === 822)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSLCipher(): ChangeReplicationSourceSSLCipherContext {
        let localctx: ChangeReplicationSourceSSLCipherContext = new ChangeReplicationSourceSSLCipherContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 494, MySQLParser.RULE_changeReplicationSourceSSLCipher);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4284);
                _la = this.input().LA(1);
                if (!(_la === 310 || _la === 824)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSLCLR(): ChangeReplicationSourceSSLCLRContext {
        let localctx: ChangeReplicationSourceSSLCLRContext = new ChangeReplicationSourceSSLCLRContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 496, MySQLParser.RULE_changeReplicationSourceSSLCLR);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4286);
                _la = this.input().LA(1);
                if (!(_la === 311 || _la === 825)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSLCLRpath(): ChangeReplicationSourceSSLCLRpathContext {
        let localctx: ChangeReplicationSourceSSLCLRpathContext = new ChangeReplicationSourceSSLCLRpathContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 498, MySQLParser.RULE_changeReplicationSourceSSLCLRpath);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4288);
                _la = this.input().LA(1);
                if (!(_la === 312 || _la === 826)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSLKey(): ChangeReplicationSourceSSLKeyContext {
        let localctx: ChangeReplicationSourceSSLKeyContext = new ChangeReplicationSourceSSLKeyContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 500, MySQLParser.RULE_changeReplicationSourceSSLKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4290);
                _la = this.input().LA(1);
                if (!(_la === 313 || _la === 827)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSLVerifyServerCert(): ChangeReplicationSourceSSLVerifyServerCertContext {
        let localctx: ChangeReplicationSourceSSLVerifyServerCertContext = new ChangeReplicationSourceSSLVerifyServerCertContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 502, MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4292);
                _la = this.input().LA(1);
                if (!(_la === 315 || _la === 828)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceTLSVersion(): ChangeReplicationSourceTLSVersionContext {
        let localctx: ChangeReplicationSourceTLSVersionContext = new ChangeReplicationSourceTLSVersionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 504, MySQLParser.RULE_changeReplicationSourceTLSVersion);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4294);
                _la = this.input().LA(1);
                if (!(_la === 317 || _la === 830)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceTLSCiphersuites(): ChangeReplicationSourceTLSCiphersuitesContext {
        let localctx: ChangeReplicationSourceTLSCiphersuitesContext = new ChangeReplicationSourceTLSCiphersuitesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 506, MySQLParser.RULE_changeReplicationSourceTLSCiphersuites);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4296);
                _la = this.input().LA(1);
                if (!(_la === 738 || _la === 829)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceSSLCert(): ChangeReplicationSourceSSLCertContext {
        let localctx: ChangeReplicationSourceSSLCertContext = new ChangeReplicationSourceSSLCertContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 508, MySQLParser.RULE_changeReplicationSourceSSLCert);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4298);
                _la = this.input().LA(1);
                if (!(_la === 309 || _la === 823)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourcePublicKey(): ChangeReplicationSourcePublicKeyContext {
        let localctx: ChangeReplicationSourcePublicKeyContext = new ChangeReplicationSourcePublicKeyContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 510, MySQLParser.RULE_changeReplicationSourcePublicKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4300);
                _la = this.input().LA(1);
                if (!(_la === 712 || _la === 818)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceGetSourcePublicKey(): ChangeReplicationSourceGetSourcePublicKeyContext {
        let localctx: ChangeReplicationSourceGetSourcePublicKeyContext = new ChangeReplicationSourceGetSourcePublicKeyContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 512, MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4302);
                _la = this.input().LA(1);
                if (!(_la === 713 || _la === 806)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceHeartbeatPeriod(): ChangeReplicationSourceHeartbeatPeriodContext {
        let localctx: ChangeReplicationSourceHeartbeatPeriodContext = new ChangeReplicationSourceHeartbeatPeriodContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 514, MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4304);
                _la = this.input().LA(1);
                if (!(_la === 319 || _la === 812)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceCompressionAlgorithm(): ChangeReplicationSourceCompressionAlgorithmContext {
        let localctx: ChangeReplicationSourceCompressionAlgorithmContext = new ChangeReplicationSourceCompressionAlgorithmContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 516, MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4306);
                _la = this.input().LA(1);
                if (!(_la === 735 || _la === 809)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplicationSourceZstdCompressionLevel(): ChangeReplicationSourceZstdCompressionLevelContext {
        let localctx: ChangeReplicationSourceZstdCompressionLevelContext = new ChangeReplicationSourceZstdCompressionLevelContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 518, MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4308);
                _la = this.input().LA(1);
                if (!(_la === 736 || _la === 832)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public privilegeCheckDef(): PrivilegeCheckDefContext {
        let localctx: PrivilegeCheckDefContext = new PrivilegeCheckDefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 520, MySQLParser.RULE_privilegeCheckDef);
        try {
            this.setState(4312);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 449, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4310);
                        this.userIdentifierOrText();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4311);
                        this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tablePrimaryKeyCheckDef(): TablePrimaryKeyCheckDefContext {
        let localctx: TablePrimaryKeyCheckDefContext = new TablePrimaryKeyCheckDefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 522, MySQLParser.RULE_tablePrimaryKeyCheckDef);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4314);
                _la = this.input().LA(1);
                if (!(_la === 383 || _la === 743 || _la === 744)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public assignGtidsToAnonymousTransactionsDefinition(): AssignGtidsToAnonymousTransactionsDefinitionContext {
        let localctx: AssignGtidsToAnonymousTransactionsDefinitionContext = new AssignGtidsToAnonymousTransactionsDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 524, MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition);
        try {
            this.setState(4319);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 450, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4316);
                        this.match(MySQLParser.OFF_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4317);
                        this.match(MySQLParser.LOCAL_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4318);
                        this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sourceTlsCiphersuitesDef(): SourceTlsCiphersuitesDefContext {
        let localctx: SourceTlsCiphersuitesDefContext = new SourceTlsCiphersuitesDefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 526, MySQLParser.RULE_sourceTlsCiphersuitesDef);
        try {
            this.setState(4323);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 451, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4321);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4322);
                        this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sourceFileDef(): SourceFileDefContext {
        let localctx: SourceFileDefContext = new SourceFileDefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 528, MySQLParser.RULE_sourceFileDef);
        try {
            this.setState(4339);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 301:
                case 814:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4325);
                        this.sourceLogFile();
                        this.setState(4326);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4327);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 302:
                case 815:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4329);
                        this.sourceLogPos();
                        this.setState(4330);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4331);
                        this.ulonglong_number();
                    }
                    break;
                case 447:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4333);
                        this.match(MySQLParser.RELAY_LOG_FILE_SYMBOL);
                        this.setState(4334);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4335);
                        this.textStringNoLinebreak();
                    }
                    break;
                case 448:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(4336);
                        this.match(MySQLParser.RELAY_LOG_POS_SYMBOL);
                        this.setState(4337);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4338);
                        this.ulong_number();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sourceLogFile(): SourceLogFileContext {
        let localctx: SourceLogFileContext = new SourceLogFileContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 530, MySQLParser.RULE_sourceLogFile);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4341);
                _la = this.input().LA(1);
                if (!(_la === 301 || _la === 814)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sourceLogPos(): SourceLogPosContext {
        let localctx: SourceLogPosContext = new SourceLogPosContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 532, MySQLParser.RULE_sourceLogPos);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4343);
                _la = this.input().LA(1);
                if (!(_la === 302 || _la === 815)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public serverIdList(): ServerIdListContext {
        let localctx: ServerIdListContext = new ServerIdListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 534, MySQLParser.RULE_serverIdList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4345);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(4354);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || ((((_la - 788)) & ~0x1F) === 0 && ((1 << (_la - 788)) & 13) !== 0)) {
                    {
                        this.setState(4346);
                        this.ulong_number();
                        this.setState(4351);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 773) {
                            {
                                {
                                    this.setState(4347);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(4348);
                                    this.ulong_number();
                                }
                            }
                            this.setState(4353);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                }

                this.setState(4356);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public changeReplication(): ChangeReplicationContext {
        let localctx: ChangeReplicationContext = new ChangeReplicationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 536, MySQLParser.RULE_changeReplication);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4358);
                this.match(MySQLParser.CHANGE_SYMBOL);
                this.setState(4359);
                this.match(MySQLParser.REPLICATION_SYMBOL);
                this.setState(4360);
                this.match(MySQLParser.FILTER_SYMBOL);
                this.setState(4361);
                this.filterDefinition();
                this.setState(4366);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4362);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4363);
                            this.filterDefinition();
                        }
                    }
                    this.setState(4368);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(4370);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(4369);
                        this.channel();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public filterDefinition(): FilterDefinitionContext {
        let localctx: FilterDefinitionContext = new FilterDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 538, MySQLParser.RULE_filterDefinition);
        let _la: number;
        try {
            this.setState(4421);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 460:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4372);
                        this.match(MySQLParser.REPLICATE_DO_DB_SYMBOL);
                        this.setState(4373);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4374);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(4376);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 457, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4375);
                                    this.filterDbList();
                                }
                                break;
                        }
                        this.setState(4378);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 461:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4379);
                        this.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
                        this.setState(4380);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4381);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(4383);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 458, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4382);
                                    this.filterDbList();
                                }
                                break;
                        }
                        this.setState(4385);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 462:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4386);
                        this.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL);
                        this.setState(4387);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4388);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(4390);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 459, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4389);
                                    this.filterTableList();
                                }
                                break;
                        }
                        this.setState(4392);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 463:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(4393);
                        this.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
                        this.setState(4394);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4395);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(4397);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 460, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4396);
                                    this.filterTableList();
                                }
                                break;
                        }
                        this.setState(4399);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 464:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(4400);
                        this.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
                        this.setState(4401);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4402);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(4404);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 461, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4403);
                                    this.filterStringList();
                                }
                                break;
                        }
                        this.setState(4406);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 465:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(4407);
                        this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
                        this.setState(4408);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4409);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(4411);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 462, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4410);
                                    this.filterStringList();
                                }
                                break;
                        }
                        this.setState(4413);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 466:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(4414);
                        this.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
                        this.setState(4415);
                        this.match(MySQLParser.EQUAL_OPERATOR);
                        this.setState(4416);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(4418);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 776) {
                            {
                                this.setState(4417);
                                this.filterDbPairList();
                            }
                        }

                        this.setState(4420);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public filterDbList(): FilterDbListContext {
        let localctx: FilterDbListContext = new FilterDbListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 540, MySQLParser.RULE_filterDbList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4423);
                this.schemaRef();
                this.setState(4428);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4424);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4425);
                            this.schemaRef();
                        }
                    }
                    this.setState(4430);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public filterTableList(): FilterTableListContext {
        let localctx: FilterTableListContext = new FilterTableListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 542, MySQLParser.RULE_filterTableList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4431);
                this.filterTableRef();
                this.setState(4436);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4432);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4433);
                            this.filterTableRef();
                        }
                    }
                    this.setState(4438);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public filterStringList(): FilterStringListContext {
        let localctx: FilterStringListContext = new FilterStringListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 544, MySQLParser.RULE_filterStringList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4439);
                this.filterWildDbTableString();
                this.setState(4444);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4440);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4441);
                            this.filterWildDbTableString();
                        }
                    }
                    this.setState(4446);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public filterWildDbTableString(): FilterWildDbTableStringContext {
        let localctx: FilterWildDbTableStringContext = new FilterWildDbTableStringContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 546, MySQLParser.RULE_filterWildDbTableString);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4447);
                this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public filterDbPairList(): FilterDbPairListContext {
        let localctx: FilterDbPairListContext = new FilterDbPairListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 548, MySQLParser.RULE_filterDbPairList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4449);
                this.schemaIdentifierPair();
                this.setState(4454);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4450);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4451);
                            this.schemaIdentifierPair();
                        }
                    }
                    this.setState(4456);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public startReplicaStatement(): StartReplicaStatementContext {
        let localctx: StartReplicaStatementContext = new StartReplicaStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 550, MySQLParser.RULE_startReplicaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4457);
                this.match(MySQLParser.START_SYMBOL);
                this.setState(4458);
                this.replica();
                this.setState(4460);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 449 || _la === 538) {
                    {
                        this.setState(4459);
                        this.replicaThreadOptions();
                    }
                }

                this.setState(4464);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 613) {
                    {
                        this.setState(4462);
                        this.match(MySQLParser.UNTIL_SYMBOL);
                        this.setState(4463);
                        this.replicaUntil();
                    }
                }

                this.setState(4467);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 618) {
                    {
                        this.setState(4466);
                        this.userOption();
                    }
                }

                this.setState(4470);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 406) {
                    {
                        this.setState(4469);
                        this.passwordOption();
                    }
                }

                this.setState(4473);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 129) {
                    {
                        this.setState(4472);
                        this.defaultAuthOption();
                    }
                }

                this.setState(4476);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 409) {
                    {
                        this.setState(4475);
                        this.pluginDirOption();
                    }
                }

                this.setState(4479);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(4478);
                        this.channel();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public stopReplicaStatement(): StopReplicaStatementContext {
        let localctx: StopReplicaStatementContext = new StopReplicaStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 552, MySQLParser.RULE_stopReplicaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4481);
                this.match(MySQLParser.STOP_SYMBOL);
                this.setState(4482);
                this.replica();
                this.setState(4484);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 449 || _la === 538) {
                    {
                        this.setState(4483);
                        this.replicaThreadOptions();
                    }
                }

                this.setState(4487);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(4486);
                        this.channel();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public replicaUntil(): ReplicaUntilContext {
        let localctx: ReplicaUntilContext = new ReplicaUntilContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 554, MySQLParser.RULE_replicaUntil);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4494);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 301:
                    case 302:
                    case 447:
                    case 448:
                    case 814:
                    case 815:
                        {
                            this.setState(4489);
                            this.sourceFileDef();
                        }
                        break;
                    case 528:
                    case 530:
                        {
                            this.setState(4490);
                            _la = this.input().LA(1);
                            if (!(_la === 528 || _la === 530)) {
                                this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(4491);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            this.setState(4492);
                            this.textString();
                        }
                        break;
                    case 529:
                        {
                            this.setState(4493);
                            this.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                this.setState(4500);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4496);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4497);
                            this.sourceFileDef();
                        }
                    }
                    this.setState(4502);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public userOption(): UserOptionContext {
        let localctx: UserOptionContext = new UserOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 556, MySQLParser.RULE_userOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4503);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(4504);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4505);
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public passwordOption(): PasswordOptionContext {
        let localctx: PasswordOptionContext = new PasswordOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 558, MySQLParser.RULE_passwordOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4507);
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.setState(4508);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4509);
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public defaultAuthOption(): DefaultAuthOptionContext {
        let localctx: DefaultAuthOptionContext = new DefaultAuthOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 560, MySQLParser.RULE_defaultAuthOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4511);
                this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
                this.setState(4512);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4513);
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public pluginDirOption(): PluginDirOptionContext {
        let localctx: PluginDirOptionContext = new PluginDirOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 562, MySQLParser.RULE_pluginDirOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4515);
                this.match(MySQLParser.PLUGIN_DIR_SYMBOL);
                this.setState(4516);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4517);
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public replicaThreadOptions(): ReplicaThreadOptionsContext {
        let localctx: ReplicaThreadOptionsContext = new ReplicaThreadOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 564, MySQLParser.RULE_replicaThreadOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4519);
                this.replicaThreadOption();
                this.setState(4524);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4520);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4521);
                            this.replicaThreadOption();
                        }
                    }
                    this.setState(4526);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public replicaThreadOption(): ReplicaThreadOptionContext {
        let localctx: ReplicaThreadOptionContext = new ReplicaThreadOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 566, MySQLParser.RULE_replicaThreadOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4527);
                _la = this.input().LA(1);
                if (!(_la === 449 || _la === 538)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupReplication(): GroupReplicationContext {
        let localctx: GroupReplicationContext = new GroupReplicationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 568, MySQLParser.RULE_groupReplication);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4534);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 543:
                        {
                            this.setState(4529);
                            this.match(MySQLParser.START_SYMBOL);
                            this.setState(4531);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 129 || _la === 406 || _la === 618) {
                                {
                                    this.setState(4530);
                                    this.groupReplicationStartOptions();
                                }
                            }

                        }
                        break;
                    case 552:
                        {
                            this.setState(4533);
                            this.match(MySQLParser.STOP_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                this.setState(4536);
                this.match(MySQLParser.GROUP_REPLICATION_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupReplicationStartOptions(): GroupReplicationStartOptionsContext {
        let localctx: GroupReplicationStartOptionsContext = new GroupReplicationStartOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 570, MySQLParser.RULE_groupReplicationStartOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4538);
                this.groupReplicationStartOption();
                this.setState(4543);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4539);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4540);
                            this.groupReplicationStartOption();
                        }
                    }
                    this.setState(4545);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupReplicationStartOption(): GroupReplicationStartOptionContext {
        let localctx: GroupReplicationStartOptionContext = new GroupReplicationStartOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 572, MySQLParser.RULE_groupReplicationStartOption);
        try {
            this.setState(4549);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 618:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4546);
                        this.groupReplicationUser();
                    }
                    break;
                case 406:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4547);
                        this.groupReplicationPassword();
                    }
                    break;
                case 129:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4548);
                        this.groupReplicationPluginAuth();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupReplicationUser(): GroupReplicationUserContext {
        let localctx: GroupReplicationUserContext = new GroupReplicationUserContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 574, MySQLParser.RULE_groupReplicationUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4551);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(4552);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4553);
                this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupReplicationPassword(): GroupReplicationPasswordContext {
        let localctx: GroupReplicationPasswordContext = new GroupReplicationPasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 576, MySQLParser.RULE_groupReplicationPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4555);
                this.match(MySQLParser.PASSWORD_SYMBOL);
                this.setState(4556);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4557);
                this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupReplicationPluginAuth(): GroupReplicationPluginAuthContext {
        let localctx: GroupReplicationPluginAuthContext = new GroupReplicationPluginAuthContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 578, MySQLParser.RULE_groupReplicationPluginAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4559);
                this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
                this.setState(4560);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(4561);
                this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public replica(): ReplicaContext {
        let localctx: ReplicaContext = new ReplicaContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 580, MySQLParser.RULE_replica);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4563);
                _la = this.input().LA(1);
                if (!(_la === 514 || _la === 803)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public preparedStatement(): PreparedStatementContext {
        let localctx: PreparedStatementContext = new PreparedStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 582, MySQLParser.RULE_preparedStatement);
        let _la: number;
        try {
            this.setState(4576);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 417:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4565);
                        localctx._type_ = this.match(MySQLParser.PREPARE_SYMBOL);
                        this.setState(4566);
                        this.identifier();
                        this.setState(4567);
                        this.match(MySQLParser.FROM_SYMBOL);
                        this.setState(4570);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 485, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4568);
                                    this.textLiteral();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(4569);
                                    this.userVariable();
                                }
                                break;
                        }
                    }
                    break;
                case 173:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4572);
                        this.executeStatement();
                    }
                    break;
                case 123:
                case 148:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4573);
                        localctx._type_ = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 123 || _la === 148)) {
                            localctx._type_ = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(4574);
                        this.match(MySQLParser.PREPARE_SYMBOL);
                        this.setState(4575);
                        this.identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public executeStatement(): ExecuteStatementContext {
        let localctx: ExecuteStatementContext = new ExecuteStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 584, MySQLParser.RULE_executeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4578);
                this.match(MySQLParser.EXECUTE_SYMBOL);
                this.setState(4579);
                this.identifier();
                this.setState(4582);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 621) {
                    {
                        this.setState(4580);
                        this.match(MySQLParser.USING_SYMBOL);
                        this.setState(4581);
                        this.executeVarList();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public executeVarList(): ExecuteVarListContext {
        let localctx: ExecuteVarListContext = new ExecuteVarListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 586, MySQLParser.RULE_executeVarList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4584);
                this.userVariable();
                this.setState(4589);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(4585);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(4586);
                            this.userVariable();
                        }
                    }
                    this.setState(4591);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public cloneStatement(): CloneStatementContext {
        let localctx: CloneStatementContext = new CloneStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 588, MySQLParser.RULE_cloneStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4592);
                this.match(MySQLParser.CLONE_SYMBOL);
                this.setState(4617);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 492, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4593);
                            this.match(MySQLParser.LOCAL_SYMBOL);
                            this.setState(4594);
                            this.match(MySQLParser.DATA_SYMBOL);
                            this.setState(4595);
                            this.match(MySQLParser.DIRECTORY_SYMBOL);
                            this.setState(4597);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 489, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(4596);
                                        this.equal();
                                    }
                                    break;
                            }
                            this.setState(4599);
                            this.textStringLiteral();
                        }
                        break;
                    case 2:
                        {
                            this.setState(4600);
                            this.match(MySQLParser.REMOTE_SYMBOL);
                            this.setState(4603);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 200) {
                                {
                                    this.setState(4601);
                                    this.match(MySQLParser.FOR_SYMBOL);
                                    this.setState(4602);
                                    this.match(MySQLParser.REPLICATION_SYMBOL);
                                }
                            }

                        }
                        break;
                    case 3:
                        {
                            this.setState(4605);
                            if (!(this.serverVersion >= 80014)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80014");
                            }
                            this.setState(4606);
                            this.match(MySQLParser.INSTANCE_SYMBOL);
                            this.setState(4607);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(4608);
                            this.user();
                            this.setState(4609);
                            this.match(MySQLParser.COLON_SYMBOL);
                            this.setState(4610);
                            this.ulong_number();
                            this.setState(4611);
                            this.match(MySQLParser.IDENTIFIED_SYMBOL);
                            this.setState(4612);
                            this.match(MySQLParser.BY_SYMBOL);
                            this.setState(4613);
                            this.textStringLiteral();
                            this.setState(4615);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 112 || _la === 467) {
                                {
                                    this.setState(4614);
                                    this.dataDirSSL();
                                }
                            }

                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dataDirSSL(): DataDirSSLContext {
        let localctx: DataDirSSLContext = new DataDirSSLContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 590, MySQLParser.RULE_dataDirSSL);
        let _la: number;
        try {
            this.setState(4629);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 467:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4619);
                        this.ssl();
                    }
                    break;
                case 112:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4620);
                        this.match(MySQLParser.DATA_SYMBOL);
                        this.setState(4621);
                        this.match(MySQLParser.DIRECTORY_SYMBOL);
                        this.setState(4623);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 493, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4622);
                                    this.equal();
                                }
                                break;
                        }
                        this.setState(4625);
                        this.textStringLiteral();
                        this.setState(4627);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 467) {
                            {
                                this.setState(4626);
                                this.ssl();
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ssl(): SslContext {
        let localctx: SslContext = new SslContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 592, MySQLParser.RULE_ssl);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4631);
                this.match(MySQLParser.REQUIRE_SYMBOL);
                this.setState(4633);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 373) {
                    {
                        this.setState(4632);
                        this.match(MySQLParser.NO_SYMBOL);
                    }
                }

                this.setState(4635);
                this.match(MySQLParser.SSL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public accountManagementStatement(): AccountManagementStatementContext {
        let localctx: AccountManagementStatementContext = new AccountManagementStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 594, MySQLParser.RULE_accountManagementStatement);
        try {
            this.setState(4644);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 11:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4637);
                        this.alterUserStatement();
                    }
                    break;
                case 97:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4638);
                        this.createUserStatement();
                    }
                    break;
                case 148:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4639);
                        this.dropUserStatement();
                    }
                    break;
                case 215:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(4640);
                        this.grantStatement();
                    }
                    break;
                case 453:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(4641);
                        this.renameUserStatement();
                    }
                    break;
                case 477:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(4642);
                        this.revokeStatement();
                    }
                    break;
                case 506:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(4643);
                        this.setRoleStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterUserStatement(): AlterUserStatementContext {
        let localctx: AlterUserStatementContext = new AlterUserStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 596, MySQLParser.RULE_alterUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4646);
                this.match(MySQLParser.ALTER_SYMBOL);
                this.setState(4647);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(4649);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 498, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4648);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(4691);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 508, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4655);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 499, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(4651);
                                        if (!(this.serverVersion < 80014)) {
                                            throw this.createFailedPredicateException("this.serverVersion < 80014");
                                        }
                                        this.setState(4652);
                                        this.createUserList();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(4653);
                                        if (!(this.serverVersion >= 80014)) {
                                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                                        }
                                        this.setState(4654);
                                        this.alterUserList();
                                    }
                                    break;
                            }
                            this.setState(4657);
                            this.createUserTail();
                        }
                        break;
                    case 2:
                        {
                            this.setState(4659);
                            this.userFunction();
                            this.setState(4676);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                                case 230:
                                    {
                                        this.setState(4662);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 500, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4660);
                                                    this.identifiedByRandomPassword();
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.setState(4661);
                                                    this.identifiedByPassword();
                                                }
                                                break;
                                        }
                                        this.setState(4665);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 458) {
                                            {
                                                this.setState(4664);
                                                this.replacePassword();
                                            }
                                        }

                                        this.setState(4668);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 727) {
                                            {
                                                this.setState(4667);
                                                this.retainCurrentPassword();
                                            }
                                        }

                                    }
                                    break;
                                case 141:
                                    {
                                        this.setState(4670);
                                        this.match(MySQLParser.DISCARD_SYMBOL);
                                        this.setState(4671);
                                        this.match(MySQLParser.OLD_SYMBOL);
                                        this.setState(4672);
                                        this.match(MySQLParser.PASSWORD_SYMBOL);
                                    }
                                    break;
                                case -1:
                                case 747:
                                case 748:
                                case 749:
                                case 774:
                                case 790:
                                case 791:
                                    {
                                        this.setState(4674);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 790 || _la === 791) {
                                            {
                                                this.setState(4673);
                                                this.userRegistration();
                                            }
                                        }

                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    case 3:
                        {
                            this.setState(4678);
                            this.user();
                            this.setState(4689);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                                case 128:
                                    {
                                        this.setState(4679);
                                        this.match(MySQLParser.DEFAULT_SYMBOL);
                                        this.setState(4680);
                                        this.match(MySQLParser.ROLE_SYMBOL);
                                        this.setState(4684);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 505, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4681);
                                                    this.match(MySQLParser.ALL_SYMBOL);
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.setState(4682);
                                                    this.match(MySQLParser.NONE_SYMBOL);
                                                }
                                                break;
                                            case 3:
                                                {
                                                    this.setState(4683);
                                                    this.roleList();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case -1:
                                case 747:
                                case 748:
                                case 749:
                                case 774:
                                case 790:
                                case 791:
                                    {
                                        this.setState(4687);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 790 || _la === 791) {
                                            {
                                                this.setState(4686);
                                                this.userRegistration();
                                            }
                                        }

                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterUserList(): AlterUserListContext {
        let localctx: AlterUserListContext = new AlterUserListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 598, MySQLParser.RULE_alterUserList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4693);
                this.alterUser();
                this.setState(4698);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 509, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(4694);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(4695);
                                this.alterUser();
                            }
                        }
                    }
                    this.setState(4700);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 509, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterUser(): AlterUserContext {
        let localctx: AlterUserContext = new AlterUserContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 600, MySQLParser.RULE_alterUser);
        try {
            this.setState(4776);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 526, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4701);
                        if (!(this.serverVersion < 80025)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80025");
                        }
                        this.setState(4702);
                        this.oldAlterUser();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4703);
                        if (!(this.serverVersion >= 80025)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80025");
                        }
                        {
                            this.setState(4704);
                            this.user();
                            this.setState(4774);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 525, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(4705);
                                        this.identifiedByPassword();
                                        this.setState(4714);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 512, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4706);
                                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                                    this.setState(4707);
                                                    this.textStringLiteral();
                                                    this.setState(4709);
                                                    this.getErrorHandler().sync(this);
                                                    switch (this.getInterpreter().adaptivePredict(this.input(), 510, this.getCtx())) {
                                                        case 1:
                                                            {
                                                                this.setState(4708);
                                                                this.retainCurrentPassword();
                                                            }
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.setState(4712);
                                                    this.getErrorHandler().sync(this);
                                                    switch (this.getInterpreter().adaptivePredict(this.input(), 511, this.getCtx())) {
                                                        case 1:
                                                            {
                                                                this.setState(4711);
                                                                this.retainCurrentPassword();
                                                            }
                                                            break;
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(4716);
                                        this.identifiedByRandomPassword();
                                        this.setState(4725);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 515, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4718);
                                                    this.getErrorHandler().sync(this);
                                                    switch (this.getInterpreter().adaptivePredict(this.input(), 513, this.getCtx())) {
                                                        case 1:
                                                            {
                                                                this.setState(4717);
                                                                this.retainCurrentPassword();
                                                            }
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.setState(4720);
                                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                                    this.setState(4721);
                                                    this.textStringLiteral();
                                                    this.setState(4723);
                                                    this.getErrorHandler().sync(this);
                                                    switch (this.getInterpreter().adaptivePredict(this.input(), 514, this.getCtx())) {
                                                        case 1:
                                                            {
                                                                this.setState(4722);
                                                                this.retainCurrentPassword();
                                                            }
                                                            break;
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 3:
                                    {
                                        this.setState(4727);
                                        this.identifiedWithPlugin();
                                    }
                                    break;
                                case 4:
                                    {
                                        this.setState(4728);
                                        this.identifiedWithPluginAsAuth();
                                        this.setState(4730);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 516, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4729);
                                                    this.retainCurrentPassword();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 5:
                                    {
                                        this.setState(4732);
                                        this.identifiedWithPluginByPassword();
                                        this.setState(4741);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 519, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4733);
                                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                                    this.setState(4734);
                                                    this.textStringLiteral();
                                                    this.setState(4736);
                                                    this.getErrorHandler().sync(this);
                                                    switch (this.getInterpreter().adaptivePredict(this.input(), 517, this.getCtx())) {
                                                        case 1:
                                                            {
                                                                this.setState(4735);
                                                                this.retainCurrentPassword();
                                                            }
                                                            break;
                                                    }
                                                }
                                                break;
                                            case 2:
                                                {
                                                    this.setState(4739);
                                                    this.getErrorHandler().sync(this);
                                                    switch (this.getInterpreter().adaptivePredict(this.input(), 518, this.getCtx())) {
                                                        case 1:
                                                            {
                                                                this.setState(4738);
                                                                this.retainCurrentPassword();
                                                            }
                                                            break;
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 6:
                                    {
                                        this.setState(4743);
                                        this.identifiedWithPluginByRandomPassword();
                                        this.setState(4745);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 520, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4744);
                                                    this.retainCurrentPassword();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 7:
                                    {
                                        this.setState(4748);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 521, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4747);
                                                    this.discardOldPassword();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 8:
                                    {
                                        this.setState(4750);
                                        this.match(MySQLParser.ADD_SYMBOL);
                                        this.setState(4751);
                                        this.factor();
                                        this.setState(4752);
                                        this.identification();
                                        this.setState(4757);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 522, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4753);
                                                    this.match(MySQLParser.ADD_SYMBOL);
                                                    this.setState(4754);
                                                    this.factor();
                                                    this.setState(4755);
                                                    this.identification();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 9:
                                    {
                                        this.setState(4759);
                                        this.match(MySQLParser.MODIFY_SYMBOL);
                                        this.setState(4760);
                                        this.factor();
                                        this.setState(4761);
                                        this.identification();
                                        this.setState(4766);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 523, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4762);
                                                    this.match(MySQLParser.MODIFY_SYMBOL);
                                                    this.setState(4763);
                                                    this.factor();
                                                    this.setState(4764);
                                                    this.identification();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 10:
                                    {
                                        this.setState(4768);
                                        this.match(MySQLParser.DROP_SYMBOL);
                                        this.setState(4769);
                                        this.factor();
                                        this.setState(4772);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 524, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4770);
                                                    this.match(MySQLParser.DROP_SYMBOL);
                                                    this.setState(4771);
                                                    this.factor();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public oldAlterUser(): OldAlterUserContext {
        let localctx: OldAlterUserContext = new OldAlterUserContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 602, MySQLParser.RULE_oldAlterUser);
        try {
            this.setState(4835);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 538, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4778);
                        this.user();
                        this.setState(4779);
                        this.match(MySQLParser.IDENTIFIED_SYMBOL);
                        this.setState(4780);
                        this.match(MySQLParser.BY_SYMBOL);
                        this.setState(4800);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 531, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4781);
                                    this.textString();
                                    this.setState(4782);
                                    this.match(MySQLParser.REPLACE_SYMBOL);
                                    this.setState(4783);
                                    this.textString();
                                    this.setState(4785);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 527, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(4784);
                                                this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.setState(4787);
                                    this.textString();
                                    this.setState(4789);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 528, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(4788);
                                                this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 3:
                                {
                                    this.setState(4791);
                                    this.match(MySQLParser.RANDOM_SYMBOL);
                                    this.setState(4792);
                                    this.match(MySQLParser.PASSWORD_SYMBOL);
                                    this.setState(4795);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 529, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(4793);
                                                this.match(MySQLParser.REPLACE_SYMBOL);
                                                this.setState(4794);
                                                this.textString();
                                            }
                                            break;
                                    }
                                    this.setState(4798);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 530, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(4797);
                                                this.retainCurrentPassword();
                                            }
                                            break;
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4802);
                        this.user();
                        this.setState(4803);
                        this.match(MySQLParser.IDENTIFIED_SYMBOL);
                        this.setState(4804);
                        this.match(MySQLParser.WITH_SYMBOL);
                        {
                            this.setState(4805);
                            this.textOrIdentifier();
                            this.setState(4829);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 536, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(4806);
                                        this.match(MySQLParser.BY_SYMBOL);
                                        this.setState(4807);
                                        this.textString();
                                        this.setState(4808);
                                        this.match(MySQLParser.REPLACE_SYMBOL);
                                        this.setState(4809);
                                        this.textString();
                                        this.setState(4811);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 532, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4810);
                                                    this.retainCurrentPassword();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(4813);
                                        this.match(MySQLParser.AS_SYMBOL);
                                        this.setState(4814);
                                        this.textStringHash();
                                        this.setState(4816);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 533, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4815);
                                                    this.retainCurrentPassword();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 3:
                                    {
                                        this.setState(4818);
                                        this.match(MySQLParser.BY_SYMBOL);
                                        this.setState(4819);
                                        this.textString();
                                        this.setState(4821);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 534, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4820);
                                                    this.retainCurrentPassword();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 4:
                                    {
                                        this.setState(4823);
                                        this.match(MySQLParser.BY_SYMBOL);
                                        this.setState(4824);
                                        this.match(MySQLParser.RANDOM_SYMBOL);
                                        this.setState(4825);
                                        this.match(MySQLParser.PASSWORD_SYMBOL);
                                        this.setState(4827);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 535, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(4826);
                                                    this.retainCurrentPassword();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4831);
                        this.user();
                        this.setState(4833);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 537, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4832);
                                    this.discardOldPassword();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public userFunction(): UserFunctionContext {
        let localctx: UserFunctionContext = new UserFunctionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 604, MySQLParser.RULE_userFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4837);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(4838);
                this.parentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createUserStatement(): CreateUserStatementContext {
        let localctx: CreateUserStatementContext = new CreateUserStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 606, MySQLParser.RULE_createUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4840);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(4841);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(4843);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 539, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4842);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(4845);
                this.createUserList();
                this.setState(4847);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 540, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4846);
                            this.defaultRoleClause();
                        }
                        break;
                }
                this.setState(4849);
                this.createUserTail();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createUserTail(): CreateUserTailContext {
        let localctx: CreateUserTailContext = new CreateUserTailContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 608, MySQLParser.RULE_createUserTail);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4852);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 541, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4851);
                            this.requireClause();
                        }
                        break;
                }
                this.setState(4855);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 542, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4854);
                            this.connectOptions();
                        }
                        break;
                }
                this.setState(4860);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 543, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(4857);
                                this.accountLockPasswordExpireOptions();
                            }
                        }
                    }
                    this.setState(4862);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 543, this.getCtx());
                }
                this.setState(4865);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 544, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4863);
                            if (!(this.serverVersion >= 80024)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80024");
                            }
                            this.setState(4864);
                            this.userAttributes();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public userAttributes(): UserAttributesContext {
        let localctx: UserAttributesContext = new UserAttributesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 610, MySQLParser.RULE_userAttributes);
        try {
            this.setState(4871);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 797:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4867);
                        this.match(MySQLParser.ATTRIBUTE_SYMBOL);
                        this.setState(4868);
                        this.textStringLiteral();
                    }
                    break;
                case 75:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4869);
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(4870);
                        this.textStringLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public defaultRoleClause(): DefaultRoleClauseContext {
        let localctx: DefaultRoleClauseContext = new DefaultRoleClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 612, MySQLParser.RULE_defaultRoleClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4873);
                this.match(MySQLParser.DEFAULT_SYMBOL);
                this.setState(4874);
                this.match(MySQLParser.ROLE_SYMBOL);
                this.setState(4875);
                this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public requireClause(): RequireClauseContext {
        let localctx: RequireClauseContext = new RequireClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 614, MySQLParser.RULE_requireClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4877);
                this.match(MySQLParser.REQUIRE_SYMBOL);
                this.setState(4880);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 63:
                    case 259:
                    case 559:
                        {
                            this.setState(4878);
                            this.requireList();
                        }
                        break;
                    case 369:
                    case 539:
                    case 650:
                        {
                            this.setState(4879);
                            localctx._option = this.input().LT(1);
                            _la = this.input().LA(1);
                            if (!(_la === 369 || _la === 539 || _la === 650)) {
                                localctx._option = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public connectOptions(): ConnectOptionsContext {
        let localctx: ConnectOptionsContext = new ConnectOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 616, MySQLParser.RULE_connectOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4882);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(4891);
                this.getErrorHandler().sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                this.setState(4891);
                                this.getErrorHandler().sync(this);
                                switch (this.input().LA(1)) {
                                    case 322:
                                        {
                                            this.setState(4883);
                                            this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                                            this.setState(4884);
                                            this.ulong_number();
                                        }
                                        break;
                                    case 327:
                                        {
                                            this.setState(4885);
                                            this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                                            this.setState(4886);
                                            this.ulong_number();
                                        }
                                        break;
                                    case 321:
                                        {
                                            this.setState(4887);
                                            this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                                            this.setState(4888);
                                            this.ulong_number();
                                        }
                                        break;
                                    case 328:
                                        {
                                            this.setState(4889);
                                            this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                                            this.setState(4890);
                                            this.ulong_number();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.setState(4893);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 548, this.getCtx());
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public accountLockPasswordExpireOptions(): AccountLockPasswordExpireOptionsContext {
        let localctx: AccountLockPasswordExpireOptionsContext = new AccountLockPasswordExpireOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 618, MySQLParser.RULE_accountLockPasswordExpireOptions);
        let _la: number;
        try {
            this.setState(4935);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 2:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4895);
                        this.match(MySQLParser.ACCOUNT_SYMBOL);
                        this.setState(4896);
                        _la = this.input().LA(1);
                        if (!(_la === 287 || _la === 611)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 406:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4897);
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.setState(4926);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 553, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(4898);
                                    this.match(MySQLParser.EXPIRE_SYMBOL);
                                    this.setState(4905);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 549, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(4899);
                                                this.match(MySQLParser.INTERVAL_SYMBOL);
                                                this.setState(4900);
                                                this.real_ulong_number();
                                                this.setState(4901);
                                                this.match(MySQLParser.DAY_SYMBOL);
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.setState(4903);
                                                this.match(MySQLParser.NEVER_SYMBOL);
                                            }
                                            break;
                                        case 3:
                                            {
                                                this.setState(4904);
                                                this.match(MySQLParser.DEFAULT_SYMBOL);
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 2:
                                {
                                    this.setState(4907);
                                    this.match(MySQLParser.HISTORY_SYMBOL);
                                    this.setState(4910);
                                    this.getErrorHandler().sync(this);
                                    switch (this.input().LA(1)) {
                                        case 747:
                                        case 748:
                                        case 749:
                                        case 788:
                                            {
                                                this.setState(4908);
                                                this.real_ulong_number();
                                            }
                                            break;
                                        case 128:
                                            {
                                                this.setState(4909);
                                                this.match(MySQLParser.DEFAULT_SYMBOL);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                break;
                            case 3:
                                {
                                    this.setState(4912);
                                    this.match(MySQLParser.REUSE_SYMBOL);
                                    this.setState(4913);
                                    this.match(MySQLParser.INTERVAL_SYMBOL);
                                    this.setState(4918);
                                    this.getErrorHandler().sync(this);
                                    switch (this.input().LA(1)) {
                                        case 747:
                                        case 748:
                                        case 749:
                                        case 788:
                                            {
                                                this.setState(4914);
                                                this.real_ulong_number();
                                                this.setState(4915);
                                                this.match(MySQLParser.DAY_SYMBOL);
                                            }
                                            break;
                                        case 128:
                                            {
                                                this.setState(4917);
                                                this.match(MySQLParser.DEFAULT_SYMBOL);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                break;
                            case 4:
                                {
                                    this.setState(4920);
                                    if (!(this.serverVersion >= 80014)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80014");
                                    }
                                    this.setState(4921);
                                    this.match(MySQLParser.REQUIRE_SYMBOL);
                                    this.setState(4922);
                                    this.match(MySQLParser.CURRENT_SYMBOL);
                                    this.setState(4924);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 552, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(4923);
                                                _la = this.input().LA(1);
                                                if (!(_la === 128 || _la === 719)) {
                                                    this.getErrorHandler().recoverInline(this);
                                                }
                                                else {
                                                    this.getErrorHandler().reportMatch(this);
                                                    this.consume();
                                                }
                                            }
                                            break;
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 741:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4928);
                        this.match(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL);
                        this.setState(4929);
                        this.real_ulong_number();
                    }
                    break;
                case 740:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(4930);
                        this.match(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL);
                        this.setState(4933);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 747:
                            case 748:
                            case 749:
                            case 788:
                                {
                                    this.setState(4931);
                                    this.real_ulong_number();
                                }
                                break;
                            case 698:
                                {
                                    this.setState(4932);
                                    this.match(MySQLParser.UNBOUNDED_SYMBOL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public userAttribute(): UserAttributeContext {
        let localctx: UserAttributeContext = new UserAttributeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 620, MySQLParser.RULE_userAttribute);
        try {
            this.setState(4942);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case -1:
                    this.enterOuterAlt(localctx, 1);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                case 797:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4938);
                        this.match(MySQLParser.ATTRIBUTE_SYMBOL);
                        this.setState(4939);
                        this.textStringLiteral();
                    }
                    break;
                case 75:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(4940);
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(4941);
                        this.textStringLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropUserStatement(): DropUserStatementContext {
        let localctx: DropUserStatementContext = new DropUserStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 622, MySQLParser.RULE_dropUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4944);
                this.match(MySQLParser.DROP_SYMBOL);
                this.setState(4945);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(4947);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 557, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4946);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(4949);
                this.userList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public grantStatement(): GrantStatementContext {
        let localctx: GrantStatementContext = new GrantStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 624, MySQLParser.RULE_grantStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(4951);
                this.match(MySQLParser.GRANT_SYMBOL);
                this.setState(4993);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 566, this.getCtx())) {
                    case 1:
                        {
                            this.setState(4952);
                            this.roleOrPrivilegesList();
                            this.setState(4953);
                            this.match(MySQLParser.TO_SYMBOL);
                            this.setState(4954);
                            this.userList();
                            this.setState(4958);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 645) {
                                {
                                    this.setState(4955);
                                    this.match(MySQLParser.WITH_SYMBOL);
                                    this.setState(4956);
                                    this.match(MySQLParser.ADMIN_SYMBOL);
                                    this.setState(4957);
                                    this.match(MySQLParser.OPTION_SYMBOL);
                                }
                            }

                        }
                        break;
                    case 2:
                        {
                            this.setState(4965);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 560, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(4960);
                                        this.roleOrPrivilegesList();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.setState(4961);
                                        this.match(MySQLParser.ALL_SYMBOL);
                                        this.setState(4963);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 421) {
                                            {
                                                this.setState(4962);
                                                this.match(MySQLParser.PRIVILEGES_SYMBOL);
                                            }
                                        }

                                    }
                                    break;
                            }
                            this.setState(4967);
                            this.match(MySQLParser.ON_SYMBOL);
                            this.setState(4969);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 561, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(4968);
                                        this.aclType();
                                    }
                                    break;
                            }
                            this.setState(4971);
                            this.grantIdentifier();
                            this.setState(4972);
                            this.match(MySQLParser.TO_SYMBOL);
                            this.setState(4973);
                            this.grantTargetList();
                            this.setState(4975);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 562, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(4974);
                                        this.versionedRequireClause();
                                    }
                                    break;
                            }
                            this.setState(4978);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 563, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(4977);
                                        this.grantOptions();
                                    }
                                    break;
                            }
                            this.setState(4981);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 17) {
                                {
                                    this.setState(4980);
                                    this.grantAs();
                                }
                            }

                        }
                        break;
                    case 3:
                        {
                            this.setState(4983);
                            this.match(MySQLParser.PROXY_SYMBOL);
                            this.setState(4984);
                            this.match(MySQLParser.ON_SYMBOL);
                            this.setState(4985);
                            this.user();
                            this.setState(4986);
                            this.match(MySQLParser.TO_SYMBOL);
                            this.setState(4987);
                            this.grantTargetList();
                            this.setState(4991);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 645) {
                                {
                                    this.setState(4988);
                                    this.match(MySQLParser.WITH_SYMBOL);
                                    this.setState(4989);
                                    this.match(MySQLParser.GRANT_SYMBOL);
                                    this.setState(4990);
                                    this.match(MySQLParser.OPTION_SYMBOL);
                                }
                            }

                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public grantTargetList(): GrantTargetListContext {
        let localctx: GrantTargetListContext = new GrantTargetListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 626, MySQLParser.RULE_grantTargetList);
        try {
            this.setState(4999);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 567, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(4995);
                        if (!(this.serverVersion < 80011)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80011");
                        }
                        this.setState(4996);
                        this.createUserList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(4997);
                        if (!(this.serverVersion >= 80011)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80011");
                        }
                        this.setState(4998);
                        this.userList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public grantOptions(): GrantOptionsContext {
        let localctx: GrantOptionsContext = new GrantOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 628, MySQLParser.RULE_grantOptions);
        let _la: number;
        try {
            this.setState(5012);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 569, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5001);
                        if (!(this.serverVersion < 80011)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80011");
                        }
                        this.setState(5002);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(5004);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        do {
                            {
                                {
                                    this.setState(5003);
                                    this.grantOption();
                                }
                            }
                            this.setState(5006);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        } while (_la === 215 || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 195) !== 0));
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5008);
                        if (!(this.serverVersion >= 80011)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80011");
                        }
                        this.setState(5009);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(5010);
                        this.match(MySQLParser.GRANT_SYMBOL);
                        this.setState(5011);
                        this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public exceptRoleList(): ExceptRoleListContext {
        let localctx: ExceptRoleListContext = new ExceptRoleListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 630, MySQLParser.RULE_exceptRoleList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5014);
                this.match(MySQLParser.EXCEPT_SYMBOL);
                this.setState(5015);
                this.roleList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public withRoles(): WithRolesContext {
        let localctx: WithRolesContext = new WithRolesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 632, MySQLParser.RULE_withRoles);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5017);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(5018);
                this.match(MySQLParser.ROLE_SYMBOL);
                this.setState(5026);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 571, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5019);
                            this.roleList();
                        }
                        break;
                    case 2:
                        {
                            this.setState(5020);
                            this.match(MySQLParser.ALL_SYMBOL);
                            this.setState(5022);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 663) {
                                {
                                    this.setState(5021);
                                    this.exceptRoleList();
                                }
                            }

                        }
                        break;
                    case 3:
                        {
                            this.setState(5024);
                            this.match(MySQLParser.NONE_SYMBOL);
                        }
                        break;
                    case 4:
                        {
                            this.setState(5025);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public grantAs(): GrantAsContext {
        let localctx: GrantAsContext = new GrantAsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 634, MySQLParser.RULE_grantAs);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5028);
                this.match(MySQLParser.AS_SYMBOL);
                this.setState(5029);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(5031);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 645) {
                    {
                        this.setState(5030);
                        this.withRoles();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public versionedRequireClause(): VersionedRequireClauseContext {
        let localctx: VersionedRequireClauseContext = new VersionedRequireClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 636, MySQLParser.RULE_versionedRequireClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5033);
                if (!(this.serverVersion < 80011)) {
                    throw this.createFailedPredicateException("this.serverVersion < 80011");
                }
                this.setState(5034);
                this.requireClause();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public renameUserStatement(): RenameUserStatementContext {
        let localctx: RenameUserStatementContext = new RenameUserStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 638, MySQLParser.RULE_renameUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5036);
                this.match(MySQLParser.RENAME_SYMBOL);
                this.setState(5037);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(5038);
                this.user();
                this.setState(5039);
                this.match(MySQLParser.TO_SYMBOL);
                this.setState(5040);
                this.user();
                this.setState(5048);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(5041);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(5042);
                            this.user();
                            this.setState(5043);
                            this.match(MySQLParser.TO_SYMBOL);
                            this.setState(5044);
                            this.user();
                        }
                    }
                    this.setState(5050);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public revokeStatement(): RevokeStatementContext {
        let localctx: RevokeStatementContext = new RevokeStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 640, MySQLParser.RULE_revokeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5051);
                this.match(MySQLParser.REVOKE_SYMBOL);
                this.setState(5054);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 574, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5052);
                            if (!(this.serverVersion >= 80031)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80031");
                            }
                            this.setState(5053);
                            this.ifExists();
                        }
                        break;
                }
                this.setState(5091);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 579, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5056);
                            this.roleOrPrivilegesList();
                            this.setState(5057);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(5058);
                            this.userList();
                        }
                        break;
                    case 2:
                        {
                            this.setState(5060);
                            this.roleOrPrivilegesList();
                            this.setState(5061);
                            this.match(MySQLParser.ON_SYMBOL);
                            this.setState(5063);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 575, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(5062);
                                        this.aclType();
                                    }
                                    break;
                            }
                            this.setState(5065);
                            this.grantIdentifier();
                            this.setState(5066);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(5067);
                            this.userList();
                        }
                        break;
                    case 3:
                        {
                            this.setState(5069);
                            this.match(MySQLParser.ALL_SYMBOL);
                            this.setState(5071);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 421) {
                                {
                                    this.setState(5070);
                                    this.match(MySQLParser.PRIVILEGES_SYMBOL);
                                }
                            }

                            this.setState(5081);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                                case 383:
                                    {
                                        this.setState(5073);
                                        this.match(MySQLParser.ON_SYMBOL);
                                        this.setState(5075);
                                        this.getErrorHandler().sync(this);
                                        switch (this.getInterpreter().adaptivePredict(this.input(), 577, this.getCtx())) {
                                            case 1:
                                                {
                                                    this.setState(5074);
                                                    this.aclType();
                                                }
                                                break;
                                        }
                                        this.setState(5077);
                                        this.grantIdentifier();
                                    }
                                    break;
                                case 773:
                                    {
                                        this.setState(5078);
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.setState(5079);
                                        this.match(MySQLParser.GRANT_SYMBOL);
                                        this.setState(5080);
                                        this.match(MySQLParser.OPTION_SYMBOL);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            this.setState(5083);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(5084);
                            this.userList();
                        }
                        break;
                    case 4:
                        {
                            this.setState(5085);
                            this.match(MySQLParser.PROXY_SYMBOL);
                            this.setState(5086);
                            this.match(MySQLParser.ON_SYMBOL);
                            this.setState(5087);
                            this.user();
                            this.setState(5088);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(5089);
                            this.userList();
                        }
                        break;
                }
                this.setState(5095);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 580, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5093);
                            if (!(this.serverVersion >= 80031)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80031");
                            }
                            this.setState(5094);
                            this.ignoreUnknownUser();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public aclType(): AclTypeContext {
        let localctx: AclTypeContext = new AclTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 642, MySQLParser.RULE_aclType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5097);
                _la = this.input().LA(1);
                if (!(_la === 206 || _la === 422 || _la === 574)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
        let localctx: RoleOrPrivilegesListContext = new RoleOrPrivilegesListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 644, MySQLParser.RULE_roleOrPrivilegesList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5099);
                this.roleOrPrivilege();
                this.setState(5104);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(5100);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(5101);
                            this.roleOrPrivilege();
                        }
                    }
                    this.setState(5106);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public roleOrPrivilege(): RoleOrPrivilegeContext {
        let localctx: RoleOrPrivilegeContext = new RoleOrPrivilegeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 646, MySQLParser.RULE_roleOrPrivilege);
        let _la: number;
        try {
            this.setState(5149);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 589, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5117);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 584, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(5107);
                                    this.roleIdentifierOrText();
                                    this.setState(5109);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 776) {
                                        {
                                            this.setState(5108);
                                            this.columnInternalRefList();
                                        }
                                    }

                                }
                                break;
                            case 2:
                                {
                                    this.setState(5111);
                                    this.roleIdentifierOrText();
                                    this.setState(5115);
                                    this.getErrorHandler().sync(this);
                                    switch (this.input().LA(1)) {
                                        case 784:
                                            {
                                                this.setState(5112);
                                                this.match(MySQLParser.AT_TEXT_SUFFIX);
                                            }
                                            break;
                                        case 783:
                                            {
                                                this.setState(5113);
                                                this.match(MySQLParser.AT_SIGN_SYMBOL);
                                                this.setState(5114);
                                                this.textOrIdentifier();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5119);
                        _la = this.input().LA(1);
                        if (!(_la === 242 || _la === 443 || _la === 497 || _la === 614)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(5121);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 776) {
                            {
                                this.setState(5120);
                                this.columnInternalRefList();
                            }
                        }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5123);
                        _la = this.input().LA(1);
                        if (!(_la === 133 || _la === 148 || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & 262153) !== 0) || _la === 236 || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & 268435473) !== 0) || _la === 510 || _la === 565 || _la === 594 || _la === 616)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5124);
                        this.match(MySQLParser.GRANT_SYMBOL);
                        this.setState(5125);
                        this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(5126);
                        this.match(MySQLParser.SHOW_SYMBOL);
                        this.setState(5127);
                        this.match(MySQLParser.DATABASES_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(5128);
                        this.match(MySQLParser.CREATE_SYMBOL);
                        this.setState(5132);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 577:
                                {
                                    this.setState(5129);
                                    this.match(MySQLParser.TEMPORARY_SYMBOL);
                                    this.setState(5130);
                                    localctx._object = this.match(MySQLParser.TABLES_SYMBOL);
                                }
                                break;
                            case 483:
                            case 572:
                            case 618:
                            case 636:
                                {
                                    this.setState(5131);
                                    localctx._object = this.input().LT(1);
                                    _la = this.input().LA(1);
                                    if (!(_la === 483 || _la === 572 || _la === 618 || _la === 636)) {
                                        localctx._object = this.getErrorHandler().recoverInline(this);
                                    }
                                    else {
                                        this.getErrorHandler().reportMatch(this);
                                        this.consume();
                                    }
                                }
                                break;
                            case 203:
                            case 383:
                            case 590:
                            case 773:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(5134);
                        this.match(MySQLParser.LOCK_SYMBOL);
                        this.setState(5135);
                        this.match(MySQLParser.TABLES_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(5136);
                        this.match(MySQLParser.REPLICATION_SYMBOL);
                        this.setState(5139);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 65:
                                {
                                    this.setState(5137);
                                    this.match(MySQLParser.CLIENT_SYMBOL);
                                }
                                break;
                            case 514:
                            case 803:
                                {
                                    this.setState(5138);
                                    this.replica();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(5141);
                        this.match(MySQLParser.SHOW_SYMBOL);
                        this.setState(5142);
                        this.match(MySQLParser.VIEW_SYMBOL);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(5143);
                        this.match(MySQLParser.ALTER_SYMBOL);
                        this.setState(5145);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 483) {
                            {
                                this.setState(5144);
                                this.match(MySQLParser.ROUTINE_SYMBOL);
                            }
                        }

                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(5147);
                        _la = this.input().LA(1);
                        if (!(_la === 97 || _la === 148)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(5148);
                        this.match(MySQLParser.ROLE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public grantIdentifier(): GrantIdentifierContext {
        let localctx: GrantIdentifierContext = new GrantIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 648, MySQLParser.RULE_grantIdentifier);
        let _la: number;
        try {
            this.setState(5167);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 592, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5151);
                        this.match(MySQLParser.MULT_OPERATOR);
                        this.setState(5154);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 772) {
                            {
                                this.setState(5152);
                                this.match(MySQLParser.DOT_SYMBOL);
                                this.setState(5153);
                                this.match(MySQLParser.MULT_OPERATOR);
                            }
                        }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5156);
                        this.schemaRef();
                        this.setState(5159);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 772) {
                            {
                                this.setState(5157);
                                this.match(MySQLParser.DOT_SYMBOL);
                                this.setState(5158);
                                this.match(MySQLParser.MULT_OPERATOR);
                            }
                        }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5161);
                        this.tableRef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5162);
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.setState(5163);
                        this.schemaRef();
                        this.setState(5164);
                        this.match(MySQLParser.DOT_SYMBOL);
                        this.setState(5165);
                        this.tableRef();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public requireList(): RequireListContext {
        let localctx: RequireListContext = new RequireListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 650, MySQLParser.RULE_requireList);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5169);
                this.requireListElement();
                this.setState(5176);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 594, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(5171);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                                if (_la === 15) {
                                    {
                                        this.setState(5170);
                                        this.match(MySQLParser.AND_SYMBOL);
                                    }
                                }

                                this.setState(5173);
                                this.requireListElement();
                            }
                        }
                    }
                    this.setState(5178);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 594, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public requireListElement(): RequireListElementContext {
        let localctx: RequireListElementContext = new RequireListElementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 652, MySQLParser.RULE_requireListElement);
        try {
            this.setState(5185);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 63:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5179);
                        localctx._element = this.match(MySQLParser.CIPHER_SYMBOL);
                        this.setState(5180);
                        this.textString();
                    }
                    break;
                case 259:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5181);
                        localctx._element = this.match(MySQLParser.ISSUER_SYMBOL);
                        this.setState(5182);
                        this.textString();
                    }
                    break;
                case 559:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5183);
                        localctx._element = this.match(MySQLParser.SUBJECT_SYMBOL);
                        this.setState(5184);
                        this.textString();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public grantOption(): GrantOptionContext {
        let localctx: GrantOptionContext = new GrantOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 654, MySQLParser.RULE_grantOption);
        try {
            this.setState(5197);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 215:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5187);
                        localctx._option = this.match(MySQLParser.GRANT_SYMBOL);
                        this.setState(5188);
                        this.match(MySQLParser.OPTION_SYMBOL);
                    }
                    break;
                case 322:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5189);
                        localctx._option = this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
                        this.setState(5190);
                        this.ulong_number();
                    }
                    break;
                case 327:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5191);
                        localctx._option = this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
                        this.setState(5192);
                        this.ulong_number();
                    }
                    break;
                case 321:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5193);
                        localctx._option = this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
                        this.setState(5194);
                        this.ulong_number();
                    }
                    break;
                case 328:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(5195);
                        localctx._option = this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
                        this.setState(5196);
                        this.ulong_number();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public setRoleStatement(): SetRoleStatementContext {
        let localctx: SetRoleStatementContext = new SetRoleStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 656, MySQLParser.RULE_setRoleStatement);
        let _la: number;
        try {
            this.setState(5222);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 599, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5199);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(5200);
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.setState(5201);
                        this.roleList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5202);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(5203);
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.setState(5204);
                        _la = this.input().LA(1);
                        if (!(_la === 128 || _la === 369)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5205);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(5206);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.setState(5207);
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.setState(5211);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 597, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(5208);
                                    this.roleList();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(5209);
                                    this.match(MySQLParser.NONE_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.setState(5210);
                                    this.match(MySQLParser.ALL_SYMBOL);
                                }
                                break;
                        }
                        this.setState(5213);
                        this.match(MySQLParser.TO_SYMBOL);
                        this.setState(5214);
                        this.roleList();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5215);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(5216);
                        this.match(MySQLParser.ROLE_SYMBOL);
                        this.setState(5217);
                        this.match(MySQLParser.ALL_SYMBOL);
                        this.setState(5220);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 663) {
                            {
                                this.setState(5218);
                                this.match(MySQLParser.EXCEPT_SYMBOL);
                                this.setState(5219);
                                this.roleList();
                            }
                        }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public roleList(): RoleListContext {
        let localctx: RoleListContext = new RoleListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 658, MySQLParser.RULE_roleList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5224);
                this.role();
                this.setState(5229);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 600, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(5225);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(5226);
                                this.role();
                            }
                        }
                    }
                    this.setState(5231);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 600, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public role(): RoleContext {
        let localctx: RoleContext = new RoleContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 660, MySQLParser.RULE_role);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5232);
                this.roleIdentifierOrText();
                this.setState(5234);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 601, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5233);
                            this.userVariable();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableAdministrationStatement(): TableAdministrationStatementContext {
        let localctx: TableAdministrationStatementContext = new TableAdministrationStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 662, MySQLParser.RULE_tableAdministrationStatement);
        let _la: number;
        try {
            this.setState(5278);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 14:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5236);
                        localctx._type_ = this.match(MySQLParser.ANALYZE_SYMBOL);
                        this.setState(5238);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 284 || _la === 375) {
                            {
                                this.setState(5237);
                                this.noWriteToBinLog();
                            }
                        }

                        this.setState(5240);
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.setState(5241);
                        this.tableRefList();
                        this.setState(5243);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 148 || _la === 614) {
                            {
                                this.setState(5242);
                                this.histogram();
                            }
                        }

                    }
                    break;
                case 62:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5245);
                        localctx._type_ = this.match(MySQLParser.CHECK_SYMBOL);
                        this.setState(5246);
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.setState(5247);
                        this.tableRefList();
                        this.setState(5251);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 56 || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 1048593) !== 0) || _la === 333 || _la === 431) {
                            {
                                {
                                    this.setState(5248);
                                    this.checkOption();
                                }
                            }
                            this.setState(5253);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                case 61:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5254);
                        localctx._type_ = this.match(MySQLParser.CHECKSUM_SYMBOL);
                        this.setState(5255);
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.setState(5256);
                        this.tableRefList();
                        this.setState(5258);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 180 || _la === 431) {
                            {
                                this.setState(5257);
                                _la = this.input().LA(1);
                                if (!(_la === 180 || _la === 431)) {
                                    this.getErrorHandler().recoverInline(this);
                                }
                                else {
                                    this.getErrorHandler().reportMatch(this);
                                    this.consume();
                                }
                            }
                        }

                    }
                    break;
                case 388:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5260);
                        localctx._type_ = this.match(MySQLParser.OPTIMIZE_SYMBOL);
                        this.setState(5262);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 284 || _la === 375) {
                            {
                                this.setState(5261);
                                this.noWriteToBinLog();
                            }
                        }

                        this.setState(5264);
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.setState(5265);
                        this.tableRefList();
                    }
                    break;
                case 455:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(5266);
                        localctx._type_ = this.match(MySQLParser.REPAIR_SYMBOL);
                        this.setState(5268);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 284 || _la === 375) {
                            {
                                this.setState(5267);
                                this.noWriteToBinLog();
                            }
                        }

                        this.setState(5270);
                        this.match(MySQLParser.TABLE_SYMBOL);
                        this.setState(5271);
                        this.tableRefList();
                        this.setState(5275);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 180 || _la === 431 || _la === 619) {
                            {
                                {
                                    this.setState(5272);
                                    this.repairType();
                                }
                            }
                            this.setState(5277);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public histogram(): HistogramContext {
        let localctx: HistogramContext = new HistogramContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 664, MySQLParser.RULE_histogram);
        try {
            this.setState(5297);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 614:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5280);
                        this.match(MySQLParser.UPDATE_SYMBOL);
                        this.setState(5281);
                        this.match(MySQLParser.HISTOGRAM_SYMBOL);
                        this.setState(5282);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(5283);
                        this.identifierList();
                        this.setState(5291);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 610, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(5284);
                                    this.match(MySQLParser.WITH_SYMBOL);
                                    this.setState(5285);
                                    this.match(MySQLParser.INT_NUMBER);
                                    this.setState(5286);
                                    this.match(MySQLParser.BUCKETS_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(5287);
                                    if (!(this.serverVersion >= 80031)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80031");
                                    }
                                    this.setState(5288);
                                    this.match(MySQLParser.USING_SYMBOL);
                                    this.setState(5289);
                                    this.match(MySQLParser.DATA_SYMBOL);
                                    this.setState(5290);
                                    this.textStringLiteral();
                                }
                                break;
                        }
                    }
                    break;
                case 148:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5293);
                        this.match(MySQLParser.DROP_SYMBOL);
                        this.setState(5294);
                        this.match(MySQLParser.HISTOGRAM_SYMBOL);
                        this.setState(5295);
                        this.match(MySQLParser.ON_SYMBOL);
                        this.setState(5296);
                        this.identifierList();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public checkOption(): CheckOptionContext {
        let localctx: CheckOptionContext = new CheckOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 666, MySQLParser.RULE_checkOption);
        let _la: number;
        try {
            this.setState(5302);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 200:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5299);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(5300);
                        this.match(MySQLParser.UPGRADE_SYMBOL);
                    }
                    break;
                case 56:
                case 180:
                case 184:
                case 333:
                case 431:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5301);
                        _la = this.input().LA(1);
                        if (!(_la === 56 || _la === 180 || _la === 184 || _la === 333 || _la === 431)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public repairType(): RepairTypeContext {
        let localctx: RepairTypeContext = new RepairTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 668, MySQLParser.RULE_repairType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5304);
                _la = this.input().LA(1);
                if (!(_la === 180 || _la === 431 || _la === 619)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public installUninstallStatement(): InstallUninstallStatementContext {
        let localctx: InstallUninstallStatementContext = new InstallUninstallStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 670, MySQLParser.RULE_installUninstallStatement);
        let _la: number;
        try {
            this.setState(5328);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 614, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5306);
                        localctx._action = this.match(MySQLParser.INSTALL_SYMBOL);
                        this.setState(5307);
                        localctx._type_ = this.match(MySQLParser.PLUGIN_SYMBOL);
                        this.setState(5308);
                        this.identifier();
                        this.setState(5309);
                        this.match(MySQLParser.SONAME_SYMBOL);
                        this.setState(5310);
                        this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5312);
                        localctx._action = this.match(MySQLParser.INSTALL_SYMBOL);
                        this.setState(5313);
                        localctx._type_ = this.match(MySQLParser.COMPONENT_SYMBOL);
                        this.setState(5314);
                        this.textStringLiteralList();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5315);
                        localctx._action = this.match(MySQLParser.UNINSTALL_SYMBOL);
                        this.setState(5316);
                        localctx._type_ = this.match(MySQLParser.PLUGIN_SYMBOL);
                        this.setState(5317);
                        this.pluginRef();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5318);
                        localctx._action = this.match(MySQLParser.UNINSTALL_SYMBOL);
                        this.setState(5319);
                        localctx._type_ = this.match(MySQLParser.COMPONENT_SYMBOL);
                        this.setState(5320);
                        this.componentRef();
                        this.setState(5325);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 773) {
                            {
                                {
                                    this.setState(5321);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(5322);
                                    this.componentRef();
                                }
                            }
                            this.setState(5327);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public setStatement(): SetStatementContext {
        let localctx: SetStatementContext = new SetStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 672, MySQLParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5330);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(5331);
                this.startOptionValueList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public startOptionValueList(): StartOptionValueListContext {
        let localctx: StartOptionValueListContext = new StartOptionValueListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 674, MySQLParser.RULE_startOptionValueList);
        let _la: number;
        try {
            this.setState(5383);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 624, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5333);
                        this.optionValueNoOptionType();
                        this.setState(5334);
                        this.optionValueListContinued();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5336);
                        this.match(MySQLParser.TRANSACTION_SYMBOL);
                        this.setState(5337);
                        this.transactionCharacteristics();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5338);
                        this.optionType();
                        this.setState(5339);
                        this.startOptionValueListFollowingOptionType();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5341);
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.setState(5344);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 200) {
                            {
                                this.setState(5342);
                                this.match(MySQLParser.FOR_SYMBOL);
                                this.setState(5343);
                                this.user();
                            }
                        }

                        this.setState(5346);
                        this.equal();
                        this.setState(5367);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 620, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(5347);
                                    this.textString();
                                    this.setState(5349);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 458) {
                                        {
                                            this.setState(5348);
                                            this.replacePassword();
                                        }
                                    }

                                    this.setState(5352);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 727) {
                                        {
                                            this.setState(5351);
                                            this.retainCurrentPassword();
                                        }
                                    }

                                }
                                break;
                            case 2:
                                {
                                    this.setState(5354);
                                    this.textString();
                                    this.setState(5356);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 458) {
                                        {
                                            this.setState(5355);
                                            this.replacePassword();
                                        }
                                    }

                                    this.setState(5359);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 727) {
                                        {
                                            this.setState(5358);
                                            this.retainCurrentPassword();
                                        }
                                    }

                                }
                                break;
                            case 3:
                                {
                                    this.setState(5361);
                                    if (!(this.serverVersion < 80014)) {
                                        throw this.createFailedPredicateException("this.serverVersion < 80014");
                                    }
                                    this.setState(5362);
                                    this.match(MySQLParser.PASSWORD_SYMBOL);
                                    this.setState(5363);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(5364);
                                    this.textString();
                                    this.setState(5365);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(5369);
                        if (!(this.serverVersion >= 80018)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80018");
                        }
                        this.setState(5370);
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.setState(5373);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 200) {
                            {
                                this.setState(5371);
                                this.match(MySQLParser.FOR_SYMBOL);
                                this.setState(5372);
                                this.user();
                            }
                        }

                        this.setState(5375);
                        this.match(MySQLParser.TO_SYMBOL);
                        this.setState(5376);
                        this.match(MySQLParser.RANDOM_SYMBOL);
                        this.setState(5378);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 458) {
                            {
                                this.setState(5377);
                                this.replacePassword();
                            }
                        }

                        this.setState(5381);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 727) {
                            {
                                this.setState(5380);
                                this.retainCurrentPassword();
                            }
                        }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public transactionCharacteristics(): TransactionCharacteristicsContext {
        let localctx: TransactionCharacteristicsContext = new TransactionCharacteristicsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 676, MySQLParser.RULE_transactionCharacteristics);
        let _la: number;
        try {
            this.setState(5394);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 435:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5385);
                        this.transactionAccessMode();
                        this.setState(5387);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 258) {
                            {
                                this.setState(5386);
                                this.isolationLevel();
                            }
                        }

                    }
                    break;
                case 258:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5389);
                        this.isolationLevel();
                        this.setState(5392);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 773) {
                            {
                                this.setState(5390);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(5391);
                                this.transactionAccessMode();
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public transactionAccessMode(): TransactionAccessModeContext {
        let localctx: TransactionAccessModeContext = new TransactionAccessModeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 678, MySQLParser.RULE_transactionAccessMode);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5396);
                this.match(MySQLParser.READ_SYMBOL);
                this.setState(5397);
                _la = this.input().LA(1);
                if (!(_la === 386 || _la === 649)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public isolationLevel(): IsolationLevelContext {
        let localctx: IsolationLevelContext = new IsolationLevelContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 680, MySQLParser.RULE_isolationLevel);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5399);
                this.match(MySQLParser.ISOLATION_SYMBOL);
                this.setState(5400);
                this.match(MySQLParser.LEVEL_SYMBOL);
                this.setState(5406);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 456:
                        {
                            this.setState(5401);
                            this.match(MySQLParser.REPEATABLE_SYMBOL);
                            this.setState(5402);
                            this.match(MySQLParser.READ_SYMBOL);
                        }
                        break;
                    case 435:
                        {
                            this.setState(5403);
                            this.match(MySQLParser.READ_SYMBOL);
                            this.setState(5404);
                            _la = this.input().LA(1);
                            if (!(_la === 76 || _la === 601)) {
                                this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case 500:
                        {
                            this.setState(5405);
                            this.match(MySQLParser.SERIALIZABLE_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public optionValueListContinued(): OptionValueListContinuedContext {
        let localctx: OptionValueListContinuedContext = new OptionValueListContinuedContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 682, MySQLParser.RULE_optionValueListContinued);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5412);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(5408);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(5409);
                            this.optionValue();
                        }
                    }
                    this.setState(5414);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
        let localctx: OptionValueNoOptionTypeContext = new OptionValueNoOptionTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 684, MySQLParser.RULE_optionValueNoOptionType);
        let _la: number;
        try {
            this.setState(5444);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 633, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5415);
                        this.lvalueVariable();
                        this.setState(5416);
                        this.equal();
                        this.setState(5417);
                        this.setExprOrDefault();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5419);
                        this.charsetClause();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5420);
                        this.userVariable();
                        this.setState(5421);
                        this.equal();
                        this.setState(5422);
                        this.expr(0);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5424);
                        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                        this.setState(5426);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 630, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(5425);
                                    this.setVarIdentType();
                                }
                                break;
                        }
                        this.setState(5428);
                        this.lvalueVariable();
                        this.setState(5429);
                        this.equal();
                        this.setState(5430);
                        this.setExprOrDefault();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(5432);
                        this.match(MySQLParser.NAMES_SYMBOL);
                        this.setState(5442);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 632, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(5433);
                                    this.equal();
                                    this.setState(5434);
                                    this.expr(0);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(5436);
                                    this.charsetName();
                                    this.setState(5438);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 69) {
                                        {
                                            this.setState(5437);
                                            this.collate();
                                        }
                                    }

                                }
                                break;
                            case 3:
                                {
                                    this.setState(5440);
                                    if (!(this.serverVersion >= 80011)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                                    }
                                    this.setState(5441);
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public optionValue(): OptionValueContext {
        let localctx: OptionValueContext = new OptionValueContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 686, MySQLParser.RULE_optionValue);
        try {
            this.setState(5452);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 634, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5446);
                        this.optionType();
                        this.setState(5447);
                        this.lvalueVariable();
                        this.setState(5448);
                        this.equal();
                        this.setState(5449);
                        this.setExprOrDefault();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5451);
                        this.optionValueNoOptionType();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public setSystemVariable(): SetSystemVariableContext {
        let localctx: SetSystemVariableContext = new SetSystemVariableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 688, MySQLParser.RULE_setSystemVariable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5454);
                this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                this.setState(5456);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 635, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5455);
                            this.setVarIdentType();
                        }
                        break;
                }
                this.setState(5458);
                this.lvalueVariable();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext {
        let localctx: StartOptionValueListFollowingOptionTypeContext = new StartOptionValueListFollowingOptionTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 690, MySQLParser.RULE_startOptionValueListFollowingOptionType);
        try {
            this.setState(5465);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 636, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5460);
                        this.optionValueFollowingOptionType();
                        this.setState(5461);
                        this.optionValueListContinued();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5463);
                        this.match(MySQLParser.TRANSACTION_SYMBOL);
                        this.setState(5464);
                        this.transactionCharacteristics();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext {
        let localctx: OptionValueFollowingOptionTypeContext = new OptionValueFollowingOptionTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 692, MySQLParser.RULE_optionValueFollowingOptionType);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5467);
                this.lvalueVariable();
                this.setState(5468);
                this.equal();
                this.setState(5469);
                this.setExprOrDefault();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public setExprOrDefault(): SetExprOrDefaultContext {
        let localctx: SetExprOrDefaultContext = new SetExprOrDefaultContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 694, MySQLParser.RULE_setExprOrDefault);
        try {
            this.setState(5478);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 637, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5471);
                        this.expr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5472);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5473);
                        this.match(MySQLParser.ON_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5474);
                        this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(5475);
                        this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(5476);
                        this.match(MySQLParser.ROW_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(5477);
                        this.match(MySQLParser.SYSTEM_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showDatabasesStatement(): ShowDatabasesStatementContext {
        let localctx: ShowDatabasesStatementContext = new ShowDatabasesStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 696, MySQLParser.RULE_showDatabasesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5480);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5481);
                this.match(MySQLParser.DATABASES_SYMBOL);
                this.setState(5483);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5482);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showTablesStatement(): ShowTablesStatementContext {
        let localctx: ShowTablesStatementContext = new ShowTablesStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 698, MySQLParser.RULE_showTablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5485);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5487);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 180 || _la === 204) {
                    {
                        this.setState(5486);
                        this.showCommandType();
                    }
                }

                this.setState(5489);
                localctx._value = this.match(MySQLParser.TABLES_SYMBOL);
                this.setState(5491);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203 || _la === 251) {
                    {
                        this.setState(5490);
                        this.inDb();
                    }
                }

                this.setState(5494);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5493);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showTriggersStatement(): ShowTriggersStatementContext {
        let localctx: ShowTriggersStatementContext = new ShowTriggersStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 700, MySQLParser.RULE_showTriggersStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5496);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5498);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 204) {
                    {
                        this.setState(5497);
                        this.match(MySQLParser.FULL_SYMBOL);
                    }
                }

                this.setState(5500);
                this.match(MySQLParser.TRIGGERS_SYMBOL);
                this.setState(5502);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203 || _la === 251) {
                    {
                        this.setState(5501);
                        this.inDb();
                    }
                }

                this.setState(5505);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5504);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showEventsStatement(): ShowEventsStatementContext {
        let localctx: ShowEventsStatementContext = new ShowEventsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 702, MySQLParser.RULE_showEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5507);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5508);
                this.match(MySQLParser.EVENTS_SYMBOL);
                this.setState(5510);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203 || _la === 251) {
                    {
                        this.setState(5509);
                        this.inDb();
                    }
                }

                this.setState(5513);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5512);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showTableStatusStatement(): ShowTableStatusStatementContext {
        let localctx: ShowTableStatusStatementContext = new ShowTableStatusStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 704, MySQLParser.RULE_showTableStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5515);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5516);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5517);
                this.match(MySQLParser.STATUS_SYMBOL);
                this.setState(5519);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203 || _la === 251) {
                    {
                        this.setState(5518);
                        this.inDb();
                    }
                }

                this.setState(5522);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5521);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showOpenTablesStatement(): ShowOpenTablesStatementContext {
        let localctx: ShowOpenTablesStatementContext = new ShowOpenTablesStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 706, MySQLParser.RULE_showOpenTablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5524);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5525);
                this.match(MySQLParser.OPEN_SYMBOL);
                this.setState(5526);
                this.match(MySQLParser.TABLES_SYMBOL);
                this.setState(5528);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203 || _la === 251) {
                    {
                        this.setState(5527);
                        this.inDb();
                    }
                }

                this.setState(5531);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5530);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showPluginsStatement(): ShowPluginsStatementContext {
        let localctx: ShowPluginsStatementContext = new ShowPluginsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 708, MySQLParser.RULE_showPluginsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5533);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5534);
                this.match(MySQLParser.PLUGINS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showEngineLogsStatement(): ShowEngineLogsStatementContext {
        let localctx: ShowEngineLogsStatementContext = new ShowEngineLogsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 710, MySQLParser.RULE_showEngineLogsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5536);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5537);
                this.match(MySQLParser.ENGINE_SYMBOL);
                this.setState(5538);
                this.engineOrAll();
                this.setState(5539);
                this.match(MySQLParser.LOGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showEngineMutexStatement(): ShowEngineMutexStatementContext {
        let localctx: ShowEngineMutexStatementContext = new ShowEngineMutexStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 712, MySQLParser.RULE_showEngineMutexStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5541);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5542);
                this.match(MySQLParser.ENGINE_SYMBOL);
                this.setState(5543);
                this.engineOrAll();
                this.setState(5544);
                this.match(MySQLParser.MUTEX_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showEngineStatusStatement(): ShowEngineStatusStatementContext {
        let localctx: ShowEngineStatusStatementContext = new ShowEngineStatusStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 714, MySQLParser.RULE_showEngineStatusStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5546);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5547);
                this.match(MySQLParser.ENGINE_SYMBOL);
                this.setState(5548);
                this.engineOrAll();
                this.setState(5549);
                this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showColumnsStatement(): ShowColumnsStatementContext {
        let localctx: ShowColumnsStatementContext = new ShowColumnsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 716, MySQLParser.RULE_showColumnsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5551);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5553);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 180 || _la === 204) {
                    {
                        this.setState(5552);
                        this.showCommandType();
                    }
                }

                this.setState(5555);
                this.match(MySQLParser.COLUMNS_SYMBOL);
                this.setState(5556);
                _la = this.input().LA(1);
                if (!(_la === 203 || _la === 251)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(5557);
                this.tableRef();
                this.setState(5559);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203 || _la === 251) {
                    {
                        this.setState(5558);
                        this.inDb();
                    }
                }

                this.setState(5562);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5561);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showBinaryLogsStatement(): ShowBinaryLogsStatementContext {
        let localctx: ShowBinaryLogsStatementContext = new ShowBinaryLogsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 718, MySQLParser.RULE_showBinaryLogsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5564);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5565);
                _la = this.input().LA(1);
                if (!(_la === 32 || _la === 316)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(5566);
                localctx._value = this.match(MySQLParser.LOGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showReplicasStatement(): ShowReplicasStatementContext {
        let localctx: ShowReplicasStatementContext = new ShowReplicasStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 720, MySQLParser.RULE_showReplicasStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5568);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5573);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 514:
                    case 803:
                        {
                            this.setState(5569);
                            this.replica();
                            this.setState(5570);
                            this.match(MySQLParser.HOSTS_SYMBOL);
                        }
                        break;
                    case 804:
                        {
                            this.setState(5572);
                            this.match(MySQLParser.REPLICAS_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showBinlogEventsStatement(): ShowBinlogEventsStatementContext {
        let localctx: ShowBinlogEventsStatementContext = new ShowBinlogEventsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 722, MySQLParser.RULE_showBinlogEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5575);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5576);
                this.match(MySQLParser.BINLOG_SYMBOL);
                this.setState(5577);
                this.match(MySQLParser.EVENTS_SYMBOL);
                this.setState(5580);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 251) {
                    {
                        this.setState(5578);
                        this.match(MySQLParser.IN_SYMBOL);
                        this.setState(5579);
                        this.textString();
                    }
                }

                this.setState(5584);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203) {
                    {
                        this.setState(5582);
                        this.match(MySQLParser.FROM_SYMBOL);
                        this.setState(5583);
                        this.ulonglong_number();
                    }
                }

                this.setState(5587);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 276) {
                    {
                        this.setState(5586);
                        this.limitClause();
                    }
                }

                this.setState(5590);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(5589);
                        this.channel();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showRelaylogEventsStatement(): ShowRelaylogEventsStatementContext {
        let localctx: ShowRelaylogEventsStatementContext = new ShowRelaylogEventsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 724, MySQLParser.RULE_showRelaylogEventsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5592);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5593);
                this.match(MySQLParser.RELAYLOG_SYMBOL);
                this.setState(5594);
                this.match(MySQLParser.EVENTS_SYMBOL);
                this.setState(5597);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 251) {
                    {
                        this.setState(5595);
                        this.match(MySQLParser.IN_SYMBOL);
                        this.setState(5596);
                        this.textString();
                    }
                }

                this.setState(5601);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203) {
                    {
                        this.setState(5599);
                        this.match(MySQLParser.FROM_SYMBOL);
                        this.setState(5600);
                        this.ulonglong_number();
                    }
                }

                this.setState(5604);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 276) {
                    {
                        this.setState(5603);
                        this.limitClause();
                    }
                }

                this.setState(5607);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(5606);
                        this.channel();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showKeysStatement(): ShowKeysStatementContext {
        let localctx: ShowKeysStatementContext = new ShowKeysStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 726, MySQLParser.RULE_showKeysStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5609);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5611);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 180) {
                    {
                        this.setState(5610);
                        this.match(MySQLParser.EXTENDED_SYMBOL);
                    }
                }

                this.setState(5613);
                _la = this.input().LA(1);
                if (!(((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & 268435459) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(5614);
                this.fromOrIn();
                this.setState(5615);
                this.tableRef();
                this.setState(5617);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 203 || _la === 251) {
                    {
                        this.setState(5616);
                        this.inDb();
                    }
                }

                this.setState(5620);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 643) {
                    {
                        this.setState(5619);
                        this.whereClause();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showEnginesStatement(): ShowEnginesStatementContext {
        let localctx: ShowEnginesStatementContext = new ShowEnginesStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 728, MySQLParser.RULE_showEnginesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5622);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5624);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 553) {
                    {
                        this.setState(5623);
                        this.match(MySQLParser.STORAGE_SYMBOL);
                    }
                }

                this.setState(5626);
                localctx._value = this.match(MySQLParser.ENGINES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCountWarningsStatement(): ShowCountWarningsStatementContext {
        let localctx: ShowCountWarningsStatementContext = new ShowCountWarningsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 730, MySQLParser.RULE_showCountWarningsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5628);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5629);
                this.match(MySQLParser.COUNT_SYMBOL);
                this.setState(5630);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(5631);
                this.match(MySQLParser.MULT_OPERATOR);
                this.setState(5632);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(5633);
                this.match(MySQLParser.WARNINGS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCountErrorsStatement(): ShowCountErrorsStatementContext {
        let localctx: ShowCountErrorsStatementContext = new ShowCountErrorsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 732, MySQLParser.RULE_showCountErrorsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5635);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5636);
                this.match(MySQLParser.COUNT_SYMBOL);
                this.setState(5637);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(5638);
                this.match(MySQLParser.MULT_OPERATOR);
                this.setState(5639);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(5640);
                this.match(MySQLParser.ERRORS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showWarningsStatement(): ShowWarningsStatementContext {
        let localctx: ShowWarningsStatementContext = new ShowWarningsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 734, MySQLParser.RULE_showWarningsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5642);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5643);
                this.match(MySQLParser.WARNINGS_SYMBOL);
                this.setState(5645);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 276) {
                    {
                        this.setState(5644);
                        this.limitClause();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showErrorsStatement(): ShowErrorsStatementContext {
        let localctx: ShowErrorsStatementContext = new ShowErrorsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 736, MySQLParser.RULE_showErrorsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5647);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5648);
                this.match(MySQLParser.ERRORS_SYMBOL);
                this.setState(5650);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 276) {
                    {
                        this.setState(5649);
                        this.limitClause();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showProfilesStatement(): ShowProfilesStatementContext {
        let localctx: ShowProfilesStatementContext = new ShowProfilesStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 738, MySQLParser.RULE_showProfilesStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5652);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5653);
                this.match(MySQLParser.PROFILES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showProfileStatement(): ShowProfileStatementContext {
        let localctx: ShowProfileStatementContext = new ShowProfileStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 740, MySQLParser.RULE_showProfileStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5655);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5656);
                this.match(MySQLParser.PROFILE_SYMBOL);
                this.setState(5658);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 10 || _la === 40 || _la === 91 || _la === 96 || _la === 256 || _la === 334 || _la === 400 || _la === 522 || _la === 567) {
                    {
                        this.setState(5657);
                        this.profileDefinitions();
                    }
                }

                this.setState(5663);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(5660);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(5661);
                        this.match(MySQLParser.QUERY_SYMBOL);
                        this.setState(5662);
                        this.match(MySQLParser.INT_NUMBER);
                    }
                }

                this.setState(5666);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 276) {
                    {
                        this.setState(5665);
                        this.limitClause();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showStatusStatement(): ShowStatusStatementContext {
        let localctx: ShowStatusStatementContext = new ShowStatusStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 742, MySQLParser.RULE_showStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5668);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5670);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673) {
                    {
                        this.setState(5669);
                        this.optionType();
                    }
                }

                this.setState(5672);
                this.match(MySQLParser.STATUS_SYMBOL);
                this.setState(5674);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5673);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showProcessListStatement(): ShowProcessListStatementContext {
        let localctx: ShowProcessListStatementContext = new ShowProcessListStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 744, MySQLParser.RULE_showProcessListStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5676);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5678);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 204) {
                    {
                        this.setState(5677);
                        this.match(MySQLParser.FULL_SYMBOL);
                    }
                }

                this.setState(5680);
                this.match(MySQLParser.PROCESSLIST_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showVariablesStatement(): ShowVariablesStatementContext {
        let localctx: ShowVariablesStatementContext = new ShowVariablesStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 746, MySQLParser.RULE_showVariablesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5682);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5684);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673) {
                    {
                        this.setState(5683);
                        this.optionType();
                    }
                }

                this.setState(5686);
                this.match(MySQLParser.VARIABLES_SYMBOL);
                this.setState(5688);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5687);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCharacterSetStatement(): ShowCharacterSetStatementContext {
        let localctx: ShowCharacterSetStatementContext = new ShowCharacterSetStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 748, MySQLParser.RULE_showCharacterSetStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5690);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5691);
                this.charset();
                this.setState(5693);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5692);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCollationStatement(): ShowCollationStatementContext {
        let localctx: ShowCollationStatementContext = new ShowCollationStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 750, MySQLParser.RULE_showCollationStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5695);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5696);
                this.match(MySQLParser.COLLATION_SYMBOL);
                this.setState(5698);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5697);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showPrivilegesStatement(): ShowPrivilegesStatementContext {
        let localctx: ShowPrivilegesStatementContext = new ShowPrivilegesStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 752, MySQLParser.RULE_showPrivilegesStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5700);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5701);
                this.match(MySQLParser.PRIVILEGES_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showGrantsStatement(): ShowGrantsStatementContext {
        let localctx: ShowGrantsStatementContext = new ShowGrantsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 754, MySQLParser.RULE_showGrantsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5703);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5704);
                this.match(MySQLParser.GRANTS_SYMBOL);
                this.setState(5711);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(5705);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(5706);
                        this.user();
                        this.setState(5709);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 621) {
                            {
                                this.setState(5707);
                                this.match(MySQLParser.USING_SYMBOL);
                                this.setState(5708);
                                this.userList();
                            }
                        }

                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateDatabaseStatement(): ShowCreateDatabaseStatementContext {
        let localctx: ShowCreateDatabaseStatementContext = new ShowCreateDatabaseStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 756, MySQLParser.RULE_showCreateDatabaseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5713);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5714);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5715);
                this.match(MySQLParser.DATABASE_SYMBOL);
                this.setState(5717);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 681, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5716);
                            this.ifNotExists();
                        }
                        break;
                }
                this.setState(5719);
                this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateTableStatement(): ShowCreateTableStatementContext {
        let localctx: ShowCreateTableStatementContext = new ShowCreateTableStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 758, MySQLParser.RULE_showCreateTableStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5721);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5722);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5723);
                this.match(MySQLParser.TABLE_SYMBOL);
                this.setState(5724);
                this.tableRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateViewStatement(): ShowCreateViewStatementContext {
        let localctx: ShowCreateViewStatementContext = new ShowCreateViewStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 760, MySQLParser.RULE_showCreateViewStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5726);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5727);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5728);
                this.match(MySQLParser.VIEW_SYMBOL);
                this.setState(5729);
                this.viewRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showMasterStatusStatement(): ShowMasterStatusStatementContext {
        let localctx: ShowMasterStatusStatementContext = new ShowMasterStatusStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 762, MySQLParser.RULE_showMasterStatusStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5731);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5732);
                this.match(MySQLParser.MASTER_SYMBOL);
                this.setState(5733);
                this.match(MySQLParser.STATUS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showReplicaStatusStatement(): ShowReplicaStatusStatementContext {
        let localctx: ShowReplicaStatusStatementContext = new ShowReplicaStatusStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 764, MySQLParser.RULE_showReplicaStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5735);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5736);
                this.replica();
                this.setState(5737);
                this.match(MySQLParser.STATUS_SYMBOL);
                this.setState(5739);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(5738);
                        this.channel();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateProcedureStatement(): ShowCreateProcedureStatementContext {
        let localctx: ShowCreateProcedureStatementContext = new ShowCreateProcedureStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 766, MySQLParser.RULE_showCreateProcedureStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5741);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5742);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5743);
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.setState(5744);
                this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateFunctionStatement(): ShowCreateFunctionStatementContext {
        let localctx: ShowCreateFunctionStatementContext = new ShowCreateFunctionStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 768, MySQLParser.RULE_showCreateFunctionStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5746);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5747);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5748);
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.setState(5749);
                this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateTriggerStatement(): ShowCreateTriggerStatementContext {
        let localctx: ShowCreateTriggerStatementContext = new ShowCreateTriggerStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 770, MySQLParser.RULE_showCreateTriggerStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5751);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5752);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5753);
                this.match(MySQLParser.TRIGGER_SYMBOL);
                this.setState(5754);
                this.triggerRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateProcedureStatusStatement(): ShowCreateProcedureStatusStatementContext {
        let localctx: ShowCreateProcedureStatusStatementContext = new ShowCreateProcedureStatusStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 772, MySQLParser.RULE_showCreateProcedureStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5756);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5757);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5758);
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.setState(5759);
                this.match(MySQLParser.STATUS_SYMBOL);
                this.setState(5761);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5760);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateFunctionStatusStatement(): ShowCreateFunctionStatusStatementContext {
        let localctx: ShowCreateFunctionStatusStatementContext = new ShowCreateFunctionStatusStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 774, MySQLParser.RULE_showCreateFunctionStatusStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5763);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5764);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5765);
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.setState(5766);
                this.match(MySQLParser.STATUS_SYMBOL);
                this.setState(5768);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 275 || _la === 643) {
                    {
                        this.setState(5767);
                        this.likeOrWhere();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateProcedureCodeStatement(): ShowCreateProcedureCodeStatementContext {
        let localctx: ShowCreateProcedureCodeStatementContext = new ShowCreateProcedureCodeStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 776, MySQLParser.RULE_showCreateProcedureCodeStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5770);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5771);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5772);
                this.match(MySQLParser.PROCEDURE_SYMBOL);
                this.setState(5773);
                this.match(MySQLParser.CODE_SYMBOL);
                this.setState(5774);
                this.procedureRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateFunctionCodeStatement(): ShowCreateFunctionCodeStatementContext {
        let localctx: ShowCreateFunctionCodeStatementContext = new ShowCreateFunctionCodeStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 778, MySQLParser.RULE_showCreateFunctionCodeStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5776);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5777);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5778);
                this.match(MySQLParser.FUNCTION_SYMBOL);
                this.setState(5779);
                this.match(MySQLParser.CODE_SYMBOL);
                this.setState(5780);
                this.functionRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateEventStatement(): ShowCreateEventStatementContext {
        let localctx: ShowCreateEventStatementContext = new ShowCreateEventStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 780, MySQLParser.RULE_showCreateEventStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5782);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5783);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5784);
                this.match(MySQLParser.EVENT_SYMBOL);
                this.setState(5785);
                this.eventRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCreateUserStatement(): ShowCreateUserStatementContext {
        let localctx: ShowCreateUserStatementContext = new ShowCreateUserStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 782, MySQLParser.RULE_showCreateUserStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5787);
                this.match(MySQLParser.SHOW_SYMBOL);
                this.setState(5788);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5789);
                this.match(MySQLParser.USER_SYMBOL);
                this.setState(5790);
                this.user();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public showCommandType(): ShowCommandTypeContext {
        let localctx: ShowCommandTypeContext = new ShowCommandTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 784, MySQLParser.RULE_showCommandType);
        let _la: number;
        try {
            this.setState(5797);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 204:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5792);
                        this.match(MySQLParser.FULL_SYMBOL);
                    }
                    break;
                case 180:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5793);
                        this.match(MySQLParser.EXTENDED_SYMBOL);
                        this.setState(5795);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 204) {
                            {
                                this.setState(5794);
                                this.match(MySQLParser.FULL_SYMBOL);
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public engineOrAll(): EngineOrAllContext {
        let localctx: EngineOrAllContext = new EngineOrAllContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 786, MySQLParser.RULE_engineOrAll);
        try {
            this.setState(5801);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 687, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5799);
                        this.engineRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5800);
                        this.match(MySQLParser.ALL_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fromOrIn(): FromOrInContext {
        let localctx: FromOrInContext = new FromOrInContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 788, MySQLParser.RULE_fromOrIn);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5803);
                _la = this.input().LA(1);
                if (!(_la === 203 || _la === 251)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public inDb(): InDbContext {
        let localctx: InDbContext = new InDbContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 790, MySQLParser.RULE_inDb);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5805);
                this.fromOrIn();
                this.setState(5806);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public profileDefinitions(): ProfileDefinitionsContext {
        let localctx: ProfileDefinitionsContext = new ProfileDefinitionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 792, MySQLParser.RULE_profileDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5808);
                this.profileDefinition();
                this.setState(5813);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(5809);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(5810);
                            this.profileDefinition();
                        }
                    }
                    this.setState(5815);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public profileDefinition(): ProfileDefinitionContext {
        let localctx: ProfileDefinitionContext = new ProfileDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 794, MySQLParser.RULE_profileDefinition);
        let _la: number;
        try {
            this.setState(5823);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 40:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5816);
                        this.match(MySQLParser.BLOCK_SYMBOL);
                        this.setState(5817);
                        this.match(MySQLParser.IO_SYMBOL);
                    }
                    break;
                case 91:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5818);
                        this.match(MySQLParser.CONTEXT_SYMBOL);
                        this.setState(5819);
                        this.match(MySQLParser.SWITCHES_SYMBOL);
                    }
                    break;
                case 400:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5820);
                        this.match(MySQLParser.PAGE_SYMBOL);
                        this.setState(5821);
                        this.match(MySQLParser.FAULTS_SYMBOL);
                    }
                    break;
                case 10:
                case 96:
                case 256:
                case 334:
                case 522:
                case 567:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5822);
                        _la = this.input().LA(1);
                        if (!(_la === 10 || _la === 96 || _la === 256 || _la === 334 || _la === 522 || _la === 567)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public otherAdministrativeStatement(): OtherAdministrativeStatementContext {
        let localctx: OtherAdministrativeStatementContext = new OtherAdministrativeStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 796, MySQLParser.RULE_otherAdministrativeStatement);
        let _la: number;
        try {
            this.setState(5861);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 33:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5825);
                        localctx._type_ = this.match(MySQLParser.BINLOG_SYMBOL);
                        this.setState(5826);
                        this.textLiteral();
                    }
                    break;
                case 47:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5827);
                        localctx._type_ = this.match(MySQLParser.CACHE_SYMBOL);
                        this.setState(5828);
                        this.match(MySQLParser.INDEX_SYMBOL);
                        this.setState(5829);
                        this.keyCacheListOrParts();
                        this.setState(5830);
                        this.match(MySQLParser.IN_SYMBOL);
                        this.setState(5833);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 690, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(5831);
                                    this.identifier();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(5832);
                                    this.match(MySQLParser.DEFAULT_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 196:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5835);
                        localctx._type_ = this.match(MySQLParser.FLUSH_SYMBOL);
                        this.setState(5837);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 284 || _la === 375) {
                            {
                                this.setState(5836);
                                this.noWriteToBinLog();
                            }
                        }

                        this.setState(5848);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 571:
                            case 574:
                                {
                                    this.setState(5839);
                                    this.flushTables();
                                }
                                break;
                            case 32:
                            case 163:
                            case 165:
                            case 208:
                            case 225:
                            case 289:
                            case 389:
                            case 421:
                            case 445:
                            case 515:
                            case 547:
                            case 617:
                                {
                                    this.setState(5840);
                                    this.flushOption();
                                    this.setState(5845);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    while (_la === 773) {
                                        {
                                            {
                                                this.setState(5841);
                                                this.match(MySQLParser.COMMA_SYMBOL);
                                                this.setState(5842);
                                                this.flushOption();
                                            }
                                        }
                                        this.setState(5847);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 266:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5850);
                        localctx._type_ = this.match(MySQLParser.KILL_SYMBOL);
                        this.setState(5852);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 694, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(5851);
                                    _la = this.input().LA(1);
                                    if (!(_la === 84 || _la === 430)) {
                                        this.getErrorHandler().recoverInline(this);
                                    }
                                    else {
                                        this.getErrorHandler().reportMatch(this);
                                        this.consume();
                                    }
                                }
                                break;
                        }
                        this.setState(5854);
                        this.expr(0);
                    }
                    break;
                case 281:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(5855);
                        localctx._type_ = this.match(MySQLParser.LOAD_SYMBOL);
                        this.setState(5856);
                        this.match(MySQLParser.INDEX_SYMBOL);
                        this.setState(5857);
                        this.match(MySQLParser.INTO_SYMBOL);
                        this.setState(5858);
                        this.match(MySQLParser.CACHE_SYMBOL);
                        this.setState(5859);
                        this.preloadTail();
                    }
                    break;
                case 510:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(5860);
                        localctx._type_ = this.match(MySQLParser.SHUTDOWN_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyCacheListOrParts(): KeyCacheListOrPartsContext {
        let localctx: KeyCacheListOrPartsContext = new KeyCacheListOrPartsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 798, MySQLParser.RULE_keyCacheListOrParts);
        try {
            this.setState(5865);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 696, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5863);
                        this.keyCacheList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5864);
                        this.assignToKeycachePartition();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyCacheList(): KeyCacheListContext {
        let localctx: KeyCacheListContext = new KeyCacheListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 800, MySQLParser.RULE_keyCacheList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5867);
                this.assignToKeycache();
                this.setState(5872);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(5868);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(5869);
                            this.assignToKeycache();
                        }
                    }
                    this.setState(5874);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public assignToKeycache(): AssignToKeycacheContext {
        let localctx: AssignToKeycacheContext = new AssignToKeycacheContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 802, MySQLParser.RULE_assignToKeycache);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5875);
                this.tableRef();
                this.setState(5877);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 236 || _la === 265) {
                    {
                        this.setState(5876);
                        this.cacheKeyList();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public assignToKeycachePartition(): AssignToKeycachePartitionContext {
        let localctx: AssignToKeycachePartitionContext = new AssignToKeycachePartitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 804, MySQLParser.RULE_assignToKeycachePartition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5879);
                this.tableRef();
                this.setState(5880);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(5881);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(5882);
                this.allOrPartitionNameList();
                this.setState(5883);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                this.setState(5885);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 236 || _la === 265) {
                    {
                        this.setState(5884);
                        this.cacheKeyList();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public cacheKeyList(): CacheKeyListContext {
        let localctx: CacheKeyListContext = new CacheKeyListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 806, MySQLParser.RULE_cacheKeyList);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5887);
                this.keyOrIndex();
                this.setState(5888);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(5890);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 700, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5889);
                            this.keyUsageList();
                        }
                        break;
                }
                this.setState(5892);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyUsageElement(): KeyUsageElementContext {
        let localctx: KeyUsageElementContext = new KeyUsageElementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 808, MySQLParser.RULE_keyUsageElement);
        try {
            this.setState(5896);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 701, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5894);
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5895);
                        this.match(MySQLParser.PRIMARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyUsageList(): KeyUsageListContext {
        let localctx: KeyUsageListContext = new KeyUsageListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 810, MySQLParser.RULE_keyUsageList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5898);
                this.keyUsageElement();
                this.setState(5903);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(5899);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(5900);
                            this.keyUsageElement();
                        }
                    }
                    this.setState(5905);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public flushOption(): FlushOptionContext {
        let localctx: FlushOptionContext = new FlushOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 812, MySQLParser.RULE_flushOption);
        let _la: number;
        try {
            this.setState(5917);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 225:
                case 421:
                case 547:
                case 617:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5906);
                        localctx._option = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 225 || _la === 421 || _la === 547 || _la === 617)) {
                            localctx._option = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 32:
                case 163:
                case 165:
                case 208:
                case 289:
                case 515:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5908);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 32 || _la === 163 || _la === 165 || _la === 208 || _la === 515) {
                            {
                                this.setState(5907);
                                this.logType();
                            }
                        }

                        this.setState(5910);
                        localctx._option = this.match(MySQLParser.LOGS_SYMBOL);
                    }
                    break;
                case 445:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5911);
                        localctx._option = this.match(MySQLParser.RELAY_SYMBOL);
                        this.setState(5912);
                        this.match(MySQLParser.LOGS_SYMBOL);
                        this.setState(5914);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 200) {
                            {
                                this.setState(5913);
                                this.channel();
                            }
                        }

                    }
                    break;
                case 389:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5916);
                        localctx._option = this.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public logType(): LogTypeContext {
        let localctx: LogTypeContext = new LogTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 814, MySQLParser.RULE_logType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5919);
                _la = this.input().LA(1);
                if (!(_la === 32 || _la === 163 || _la === 165 || _la === 208 || _la === 515)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public flushTables(): FlushTablesContext {
        let localctx: FlushTablesContext = new FlushTablesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 816, MySQLParser.RULE_flushTables);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5921);
                _la = this.input().LA(1);
                if (!(_la === 571 || _la === 574)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(5929);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 707, this.getCtx())) {
                    case 1:
                        {
                            this.setState(5922);
                            this.match(MySQLParser.WITH_SYMBOL);
                            this.setState(5923);
                            this.match(MySQLParser.READ_SYMBOL);
                            this.setState(5924);
                            this.match(MySQLParser.LOCK_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.setState(5925);
                            this.identifierList();
                            this.setState(5927);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 200 || _la === 645) {
                                {
                                    this.setState(5926);
                                    this.flushTablesOptions();
                                }
                            }

                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public flushTablesOptions(): FlushTablesOptionsContext {
        let localctx: FlushTablesOptionsContext = new FlushTablesOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 818, MySQLParser.RULE_flushTablesOptions);
        try {
            this.setState(5936);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 200:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5931);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(5932);
                        this.match(MySQLParser.EXPORT_SYMBOL);
                    }
                    break;
                case 645:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5933);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(5934);
                        this.match(MySQLParser.READ_SYMBOL);
                        this.setState(5935);
                        this.match(MySQLParser.LOCK_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public preloadTail(): PreloadTailContext {
        let localctx: PreloadTailContext = new PreloadTailContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 820, MySQLParser.RULE_preloadTail);
        let _la: number;
        try {
            this.setState(5948);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 711, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5938);
                        this.tableRef();
                        this.setState(5939);
                        this.adminPartition();
                        this.setState(5941);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 236 || _la === 265) {
                            {
                                this.setState(5940);
                                this.cacheKeyList();
                            }
                        }

                        this.setState(5945);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 232) {
                            {
                                this.setState(5943);
                                this.match(MySQLParser.IGNORE_SYMBOL);
                                this.setState(5944);
                                this.match(MySQLParser.LEAVES_SYMBOL);
                            }
                        }

                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5947);
                        this.preloadList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public preloadList(): PreloadListContext {
        let localctx: PreloadListContext = new PreloadListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 822, MySQLParser.RULE_preloadList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5950);
                this.preloadKeys();
                this.setState(5955);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(5951);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(5952);
                            this.preloadKeys();
                        }
                    }
                    this.setState(5957);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public preloadKeys(): PreloadKeysContext {
        let localctx: PreloadKeysContext = new PreloadKeysContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 824, MySQLParser.RULE_preloadKeys);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5958);
                this.tableRef();
                this.setState(5960);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 236 || _la === 265) {
                    {
                        this.setState(5959);
                        this.cacheKeyList();
                    }
                }

                this.setState(5964);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 232) {
                    {
                        this.setState(5962);
                        this.match(MySQLParser.IGNORE_SYMBOL);
                        this.setState(5963);
                        this.match(MySQLParser.LEAVES_SYMBOL);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public adminPartition(): AdminPartitionContext {
        let localctx: AdminPartitionContext = new AdminPartitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 826, MySQLParser.RULE_adminPartition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5966);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(5967);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(5968);
                this.allOrPartitionNameList();
                this.setState(5969);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public resourceGroupManagement(): ResourceGroupManagementContext {
        let localctx: ResourceGroupManagementContext = new ResourceGroupManagementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 828, MySQLParser.RULE_resourceGroupManagement);
        try {
            this.setState(5975);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 97:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(5971);
                        this.createResourceGroup();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(5972);
                        this.alterResourceGroup();
                    }
                    break;
                case 506:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(5973);
                        this.setResourceGroup();
                    }
                    break;
                case 148:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(5974);
                        this.dropResourceGroup();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createResourceGroup(): CreateResourceGroupContext {
        let localctx: CreateResourceGroupContext = new CreateResourceGroupContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 830, MySQLParser.RULE_createResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5977);
                this.match(MySQLParser.CREATE_SYMBOL);
                this.setState(5978);
                this.match(MySQLParser.RESOURCE_SYMBOL);
                this.setState(5979);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(5980);
                this.identifier();
                this.setState(5981);
                this.match(MySQLParser.TYPE_SYMBOL);
                this.setState(5983);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 750 || _la === 751) {
                    {
                        this.setState(5982);
                        this.equal();
                    }
                }

                this.setState(5985);
                _la = this.input().LA(1);
                if (!(_la === 618 || _la === 710)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(5987);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 711) {
                    {
                        this.setState(5986);
                        this.resourceGroupVcpuList();
                    }
                }

                this.setState(5990);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 708) {
                    {
                        this.setState(5989);
                        this.resourceGroupPriority();
                    }
                }

                this.setState(5993);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 140 || _la === 156) {
                    {
                        this.setState(5992);
                        this.resourceGroupEnableDisable();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
        let localctx: ResourceGroupVcpuListContext = new ResourceGroupVcpuListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 832, MySQLParser.RULE_resourceGroupVcpuList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(5995);
                this.match(MySQLParser.VCPU_SYMBOL);
                this.setState(5997);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 750 || _la === 751) {
                    {
                        this.setState(5996);
                        this.equal();
                    }
                }

                this.setState(5999);
                this.vcpuNumOrRange();
                this.setState(6006);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 747 || _la === 773) {
                    {
                        {
                            this.setState(6001);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 773) {
                                {
                                    this.setState(6000);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }

                            this.setState(6003);
                            this.vcpuNumOrRange();
                        }
                    }
                    this.setState(6008);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public vcpuNumOrRange(): VcpuNumOrRangeContext {
        let localctx: VcpuNumOrRangeContext = new VcpuNumOrRangeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 834, MySQLParser.RULE_vcpuNumOrRange);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6009);
                this.match(MySQLParser.INT_NUMBER);
                this.setState(6012);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 759) {
                    {
                        this.setState(6010);
                        this.match(MySQLParser.MINUS_OPERATOR);
                        this.setState(6011);
                        this.match(MySQLParser.INT_NUMBER);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public resourceGroupPriority(): ResourceGroupPriorityContext {
        let localctx: ResourceGroupPriorityContext = new ResourceGroupPriorityContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 836, MySQLParser.RULE_resourceGroupPriority);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6014);
                this.match(MySQLParser.THREAD_PRIORITY_SYMBOL);
                this.setState(6016);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 750 || _la === 751) {
                    {
                        this.setState(6015);
                        this.equal();
                    }
                }

                this.setState(6018);
                this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
        let localctx: ResourceGroupEnableDisableContext = new ResourceGroupEnableDisableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 838, MySQLParser.RULE_resourceGroupEnableDisable);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6020);
                _la = this.input().LA(1);
                if (!(_la === 140 || _la === 156)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public alterResourceGroup(): AlterResourceGroupContext {
        let localctx: AlterResourceGroupContext = new AlterResourceGroupContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 840, MySQLParser.RULE_alterResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6022);
                this.match(MySQLParser.ALTER_SYMBOL);
                this.setState(6023);
                this.match(MySQLParser.RESOURCE_SYMBOL);
                this.setState(6024);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(6025);
                this.resourceGroupRef();
                this.setState(6027);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 711) {
                    {
                        this.setState(6026);
                        this.resourceGroupVcpuList();
                    }
                }

                this.setState(6030);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 708) {
                    {
                        this.setState(6029);
                        this.resourceGroupPriority();
                    }
                }

                this.setState(6033);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 140 || _la === 156) {
                    {
                        this.setState(6032);
                        this.resourceGroupEnableDisable();
                    }
                }

                this.setState(6036);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 198) {
                    {
                        this.setState(6035);
                        this.match(MySQLParser.FORCE_SYMBOL);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public setResourceGroup(): SetResourceGroupContext {
        let localctx: SetResourceGroupContext = new SetResourceGroupContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 842, MySQLParser.RULE_setResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6038);
                this.match(MySQLParser.SET_SYMBOL);
                this.setState(6039);
                this.match(MySQLParser.RESOURCE_SYMBOL);
                this.setState(6040);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(6041);
                this.identifier();
                this.setState(6044);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 200) {
                    {
                        this.setState(6042);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(6043);
                        this.threadIdList();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public threadIdList(): ThreadIdListContext {
        let localctx: ThreadIdListContext = new ThreadIdListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 844, MySQLParser.RULE_threadIdList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6046);
                this.real_ulong_number();
                this.setState(6053);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 67108871) !== 0) || _la === 788) {
                    {
                        {
                            this.setState(6048);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 773) {
                                {
                                    this.setState(6047);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                }
                            }

                            this.setState(6050);
                            this.real_ulong_number();
                        }
                    }
                    this.setState(6055);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dropResourceGroup(): DropResourceGroupContext {
        let localctx: DropResourceGroupContext = new DropResourceGroupContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 846, MySQLParser.RULE_dropResourceGroup);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6056);
                this.match(MySQLParser.DROP_SYMBOL);
                this.setState(6057);
                this.match(MySQLParser.RESOURCE_SYMBOL);
                this.setState(6058);
                this.match(MySQLParser.GROUP_SYMBOL);
                this.setState(6059);
                this.resourceGroupRef();
                this.setState(6061);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 198) {
                    {
                        this.setState(6060);
                        this.match(MySQLParser.FORCE_SYMBOL);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public utilityStatement(): UtilityStatementContext {
        let localctx: UtilityStatementContext = new UtilityStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 848, MySQLParser.RULE_utilityStatement);
        try {
            this.setState(6069);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 733, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6063);
                        this.describeStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6064);
                        this.explainStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6065);
                        this.helpCommand();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(6066);
                        this.useCommand();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(6067);
                        if (!(this.serverVersion >= 80011)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80011");
                        }
                        this.setState(6068);
                        this.restartServer();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public describeStatement(): DescribeStatementContext {
        let localctx: DescribeStatementContext = new DescribeStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 850, MySQLParser.RULE_describeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6071);
                _la = this.input().LA(1);
                if (!(_la === 134 || _la === 135 || _la === 178)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6072);
                this.tableRef();
                this.setState(6075);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 734, this.getCtx())) {
                    case 1:
                        {
                            this.setState(6073);
                            this.textString();
                        }
                        break;
                    case 2:
                        {
                            this.setState(6074);
                            this.columnRef();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public explainStatement(): ExplainStatementContext {
        let localctx: ExplainStatementContext = new ExplainStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 852, MySQLParser.RULE_explainStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6077);
                _la = this.input().LA(1);
                if (!(_la === 134 || _la === 135 || _la === 178)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6089);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 735, this.getCtx())) {
                    case 1:
                        {
                            this.setState(6078);
                            this.match(MySQLParser.EXTENDED_SYMBOL);
                        }
                        break;
                    case 2:
                        {
                            this.setState(6079);
                            this.match(MySQLParser.FORMAT_SYMBOL);
                            this.setState(6080);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            this.setState(6081);
                            this.textOrIdentifier();
                        }
                        break;
                    case 3:
                        {
                            this.setState(6082);
                            if (!(this.serverVersion >= 80018)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80018");
                            }
                            this.setState(6083);
                            this.match(MySQLParser.ANALYZE_SYMBOL);
                        }
                        break;
                    case 4:
                        {
                            this.setState(6084);
                            if (!(this.serverVersion >= 80019)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80019");
                            }
                            this.setState(6085);
                            this.match(MySQLParser.ANALYZE_SYMBOL);
                            this.setState(6086);
                            this.match(MySQLParser.FORMAT_SYMBOL);
                            this.setState(6087);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                            this.setState(6088);
                            this.textOrIdentifier();
                        }
                        break;
                }
                this.setState(6091);
                this.explainableStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public explainableStatement(): ExplainableStatementContext {
        let localctx: ExplainableStatementContext = new ExplainableStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 854, MySQLParser.RULE_explainableStatement);
        try {
            this.setState(6101);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 736, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6093);
                        this.selectStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6094);
                        this.deleteStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6095);
                        this.insertStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(6096);
                        this.replaceStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(6097);
                        this.updateStatement();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(6098);
                        this.match(MySQLParser.FOR_SYMBOL);
                        this.setState(6099);
                        this.match(MySQLParser.CONNECTION_SYMBOL);
                        this.setState(6100);
                        this.real_ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public helpCommand(): HelpCommandContext {
        let localctx: HelpCommandContext = new HelpCommandContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 856, MySQLParser.RULE_helpCommand);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6103);
                this.match(MySQLParser.HELP_SYMBOL);
                this.setState(6104);
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public useCommand(): UseCommandContext {
        let localctx: UseCommandContext = new UseCommandContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 858, MySQLParser.RULE_useCommand);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6106);
                this.match(MySQLParser.USE_SYMBOL);
                this.setState(6107);
                this.schemaRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public restartServer(): RestartServerContext {
        let localctx: RestartServerContext = new RestartServerContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 860, MySQLParser.RULE_restartServer);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6109);
                this.match(MySQLParser.RESTART_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public expr(): ExprContext;
    public expr(_p: number): ExprContext;
    // @RuleVersion(0)
    public expr(_p?: number): ExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        let _parentctx = this.getCtx();
        let _parentState: number = this.getState();
        let localctx: ExprContext = new ExprContext(this.getCtx(), _parentState);
        let _prevctx: ExprContext = localctx;
        let _startState: number = 862;
        this.enterRecursionRule(localctx, 862, MySQLParser.RULE_expr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6122);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 739, this.getCtx())) {
                    case 1:
                        {
                            localctx = new ExprIsContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;

                            this.setState(6112);
                            this.boolPri(0);
                            this.setState(6118);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 738, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(6113);
                                        this.match(MySQLParser.IS_SYMBOL);
                                        this.setState(6115);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 371 || _la === 745) {
                                            {
                                                this.setState(6114);
                                                this.notRule();
                                            }
                                        }

                                        this.setState(6117);
                                        (localctx as ExprIsContext)._type_ = this.input().LT(1);
                                        _la = this.input().LA(1);
                                        if (!(_la === 183 || _la === 596 || _la === 610)) {
                                            (localctx as ExprIsContext)._type_ = this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            localctx = new ExprNotContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6120);
                            this.match(MySQLParser.NOT_SYMBOL);
                            this.setState(6121);
                            this.expr(4);
                        }
                        break;
                }
                this.getCtx()!.setStop(this.input().LT(-1));
                this.setState(6135);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 741, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this.getParseListeners() != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = localctx;
                        {
                            this.setState(6133);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 740, this.getCtx())) {
                                case 1:
                                    {
                                        localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                                        this.setState(6124);
                                        if (!(this.precpred(this.getCtx(), 3))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 3)");
                                        }
                                        this.setState(6125);
                                        (localctx as ExprAndContext)._op = this.input().LT(1);
                                        _la = this.input().LA(1);
                                        if (!(_la === 15 || _la === 767)) {
                                            (localctx as ExprAndContext)._op = this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                        this.setState(6126);
                                        this.expr(4);
                                    }
                                    break;
                                case 2:
                                    {
                                        localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                                        this.setState(6127);
                                        if (!(this.precpred(this.getCtx(), 2))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 2)");
                                        }
                                        this.setState(6128);
                                        this.match(MySQLParser.XOR_SYMBOL);
                                        this.setState(6129);
                                        this.expr(3);
                                    }
                                    break;
                                case 3:
                                    {
                                        localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
                                        this.setState(6130);
                                        if (!(this.precpred(this.getCtx(), 1))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 1)");
                                        }
                                        this.setState(6131);
                                        (localctx as ExprOrContext)._op = this.input().LT(1);
                                        _la = this.input().LA(1);
                                        if (!(_la === 394 || _la === 770)) {
                                            (localctx as ExprOrContext)._op = this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                        this.setState(6132);
                                        this.expr(2);
                                    }
                                    break;
                            }
                        }
                    }
                    this.setState(6137);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 741, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }

    public boolPri(): BoolPriContext;
    public boolPri(_p: number): BoolPriContext;
    // @RuleVersion(0)
    public boolPri(_p?: number): BoolPriContext {
        if (_p === undefined) {
            _p = 0;
        }

        let _parentctx = this.getCtx();
        let _parentState: number = this.getState();
        let localctx: BoolPriContext = new BoolPriContext(this.getCtx(), _parentState);
        let _prevctx: BoolPriContext = localctx;
        let _startState: number = 864;
        this.enterRecursionRule(localctx, 864, MySQLParser.RULE_boolPri, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                {
                    localctx = new PrimaryExprPredicateContext(localctx);
                    this.setCtx(localctx);
                    _prevctx = localctx;

                    this.setState(6139);
                    this.predicate();
                }
                this.getCtx()!.setStop(this.input().LT(-1));
                this.setState(6158);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 744, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this.getParseListeners() != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = localctx;
                        {
                            this.setState(6156);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 743, this.getCtx())) {
                                case 1:
                                    {
                                        localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                                        this.setState(6141);
                                        if (!(this.precpred(this.getCtx(), 3))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 3)");
                                        }
                                        this.setState(6142);
                                        this.match(MySQLParser.IS_SYMBOL);
                                        this.setState(6144);
                                        this.getErrorHandler().sync(this);
                                        _la = this.input().LA(1);
                                        if (_la === 371 || _la === 745) {
                                            {
                                                this.setState(6143);
                                                this.notRule();
                                            }
                                        }

                                        this.setState(6146);
                                        this.match(MySQLParser.NULL_SYMBOL);
                                    }
                                    break;
                                case 2:
                                    {
                                        localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                                        this.setState(6147);
                                        if (!(this.precpred(this.getCtx(), 2))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 2)");
                                        }
                                        this.setState(6148);
                                        this.compOp();
                                        this.setState(6149);
                                        this.predicate();
                                    }
                                    break;
                                case 3:
                                    {
                                        localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
                                        this.setState(6151);
                                        if (!(this.precpred(this.getCtx(), 1))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 1)");
                                        }
                                        this.setState(6152);
                                        this.compOp();
                                        this.setState(6153);
                                        _la = this.input().LA(1);
                                        if (!(_la === 10 || _la === 16)) {
                                            this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                        this.setState(6154);
                                        this.subquery();
                                    }
                                    break;
                            }
                        }
                    }
                    this.setState(6160);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 744, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    // @RuleVersion(0)
    public compOp(): CompOpContext {
        let localctx: CompOpContext = new CompOpContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 866, MySQLParser.RULE_compOp);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6161);
                _la = this.input().LA(1);
                if (!(((((_la - 750)) & ~0x1F) === 0 && ((1 << (_la - 750)) & 253) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public predicate(): PredicateContext {
        let localctx: PredicateContext = new PredicateContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 868, MySQLParser.RULE_predicate);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6163);
                this.bitExpr(0);
                this.setState(6177);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 747, this.getCtx())) {
                    case 1:
                        {
                            this.setState(6165);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 371 || _la === 745) {
                                {
                                    this.setState(6164);
                                    this.notRule();
                                }
                            }

                            this.setState(6167);
                            this.predicateOperations();
                        }
                        break;
                    case 2:
                        {
                            this.setState(6168);
                            if (!(this.serverVersion >= 80017)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80017");
                            }
                            this.setState(6169);
                            this.match(MySQLParser.MEMBER_SYMBOL);
                            this.setState(6171);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 668) {
                                {
                                    this.setState(6170);
                                    this.match(MySQLParser.OF_SYMBOL);
                                }
                            }

                            this.setState(6173);
                            this.simpleExprWithParentheses();
                        }
                        break;
                    case 3:
                        {
                            this.setState(6174);
                            this.match(MySQLParser.SOUNDS_SYMBOL);
                            this.setState(6175);
                            this.match(MySQLParser.LIKE_SYMBOL);
                            this.setState(6176);
                            this.bitExpr(0);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public predicateOperations(): PredicateOperationsContext {
        let localctx: PredicateOperationsContext = new PredicateOperationsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 870, MySQLParser.RULE_predicateOperations);
        try {
            this.setState(6200);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 251:
                    localctx = new PredicateExprInContext(localctx);
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6179);
                        this.match(MySQLParser.IN_SYMBOL);
                        this.setState(6185);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 748, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6180);
                                    this.subquery();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(6181);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(6182);
                                    this.exprList();
                                    this.setState(6183);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 30:
                    localctx = new PredicateExprBetweenContext(localctx);
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6187);
                        this.match(MySQLParser.BETWEEN_SYMBOL);
                        this.setState(6188);
                        this.bitExpr(0);
                        this.setState(6189);
                        this.match(MySQLParser.AND_SYMBOL);
                        this.setState(6190);
                        this.predicate();
                    }
                    break;
                case 275:
                    localctx = new PredicateExprLikeContext(localctx);
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6192);
                        this.match(MySQLParser.LIKE_SYMBOL);
                        this.setState(6193);
                        this.simpleExpr(0);
                        this.setState(6196);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 749, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6194);
                                    this.match(MySQLParser.ESCAPE_SYMBOL);
                                    this.setState(6195);
                                    this.simpleExpr(0);
                                }
                                break;
                        }
                    }
                    break;
                case 444:
                    localctx = new PredicateExprRegexContext(localctx);
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(6198);
                        this.match(MySQLParser.REGEXP_SYMBOL);
                        this.setState(6199);
                        this.bitExpr(0);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public bitExpr(): BitExprContext;
    public bitExpr(_p: number): BitExprContext;
    // @RuleVersion(0)
    public bitExpr(_p?: number): BitExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        let _parentctx = this.getCtx();
        let _parentState: number = this.getState();
        let localctx: BitExprContext = new BitExprContext(this.getCtx(), _parentState);
        let _prevctx: BitExprContext = localctx;
        let _startState: number = 872;
        this.enterRecursionRule(localctx, 872, MySQLParser.RULE_bitExpr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                {
                    this.setState(6203);
                    this.simpleExpr(0);
                }
                this.getCtx()!.setStop(this.input().LT(-1));
                this.setState(6231);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 752, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this.getParseListeners() != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = localctx;
                        {
                            this.setState(6229);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 751, this.getCtx())) {
                                case 1:
                                    {
                                        localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.setState(6205);
                                        if (!(this.precpred(this.getCtx(), 7))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 7)");
                                        }
                                        this.setState(6206);
                                        localctx._op = this.match(MySQLParser.BITWISE_XOR_OPERATOR);
                                        this.setState(6207);
                                        this.bitExpr(8);
                                    }
                                    break;
                                case 2:
                                    {
                                        localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.setState(6208);
                                        if (!(this.precpred(this.getCtx(), 6))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 6)");
                                        }
                                        this.setState(6209);
                                        localctx._op = this.input().LT(1);
                                        _la = this.input().LA(1);
                                        if (!(_la === 145 || _la === 349 || ((((_la - 760)) & ~0x1F) === 0 && ((1 << (_la - 760)) & 7) !== 0))) {
                                            localctx._op = this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                        this.setState(6210);
                                        this.bitExpr(7);
                                    }
                                    break;
                                case 3:
                                    {
                                        localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.setState(6211);
                                        if (!(this.precpred(this.getCtx(), 5))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 5)");
                                        }
                                        this.setState(6212);
                                        localctx._op = this.input().LT(1);
                                        _la = this.input().LA(1);
                                        if (!(_la === 758 || _la === 759)) {
                                            localctx._op = this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                        this.setState(6213);
                                        this.bitExpr(6);
                                    }
                                    break;
                                case 4:
                                    {
                                        localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.setState(6214);
                                        if (!(this.precpred(this.getCtx(), 3))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 3)");
                                        }
                                        this.setState(6215);
                                        localctx._op = this.input().LT(1);
                                        _la = this.input().LA(1);
                                        if (!(_la === 765 || _la === 766)) {
                                            localctx._op = this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                        this.setState(6216);
                                        this.bitExpr(4);
                                    }
                                    break;
                                case 5:
                                    {
                                        localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.setState(6217);
                                        if (!(this.precpred(this.getCtx(), 2))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 2)");
                                        }
                                        this.setState(6218);
                                        localctx._op = this.match(MySQLParser.BITWISE_AND_OPERATOR);
                                        this.setState(6219);
                                        this.bitExpr(3);
                                    }
                                    break;
                                case 6:
                                    {
                                        localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.setState(6220);
                                        if (!(this.precpred(this.getCtx(), 1))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 1)");
                                        }
                                        this.setState(6221);
                                        localctx._op = this.match(MySQLParser.BITWISE_OR_OPERATOR);
                                        this.setState(6222);
                                        this.bitExpr(2);
                                    }
                                    break;
                                case 7:
                                    {
                                        localctx = new BitExprContext(_parentctx, _parentState);
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
                                        this.setState(6223);
                                        if (!(this.precpred(this.getCtx(), 4))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 4)");
                                        }
                                        this.setState(6224);
                                        localctx._op = this.input().LT(1);
                                        _la = this.input().LA(1);
                                        if (!(_la === 758 || _la === 759)) {
                                            localctx._op = this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                        this.setState(6225);
                                        this.match(MySQLParser.INTERVAL_SYMBOL);
                                        this.setState(6226);
                                        this.expr(0);
                                        this.setState(6227);
                                        this.interval();
                                    }
                                    break;
                            }
                        }
                    }
                    this.setState(6233);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 752, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }

    public simpleExpr(): SimpleExprContext;
    public simpleExpr(_p: number): SimpleExprContext;
    // @RuleVersion(0)
    public simpleExpr(_p?: number): SimpleExprContext {
        if (_p === undefined) {
            _p = 0;
        }

        let _parentctx = this.getCtx();
        let _parentState: number = this.getState();
        let localctx: SimpleExprContext = new SimpleExprContext(this.getCtx(), _parentState);
        let _prevctx: SimpleExprContext = localctx;
        let _startState: number = 874;
        this.enterRecursionRule(localctx, 874, MySQLParser.RULE_simpleExpr, _p);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6356);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 763, this.getCtx())) {
                    case 1:
                        {
                            localctx = new SimpleExprColumnRefContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;

                            this.setState(6235);
                            this.columnRef();
                            this.setState(6237);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 753, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(6236);
                                        this.jsonOperator();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            localctx = new SimpleExprRuntimeFunctionContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6239);
                            this.runtimeFunctionCall();
                        }
                        break;
                    case 3:
                        {
                            localctx = new SimpleExprFunctionContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6240);
                            this.functionCall();
                        }
                        break;
                    case 4:
                        {
                            localctx = new SimpleExprLiteralContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6241);
                            this.literalOrNull();
                        }
                        break;
                    case 5:
                        {
                            localctx = new SimpleExprParamMarkerContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6242);
                            this.match(MySQLParser.PARAM_MARKER);
                        }
                        break;
                    case 6:
                        {
                            localctx = new SimpleExpressionRValueContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6243);
                            this.rvalueSystemOrUserVariable();
                        }
                        break;
                    case 7:
                        {
                            localctx = new SimpleExprUserVariableAssignmentContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6244);
                            this.inExpressionUserVariableAssignment();
                        }
                        break;
                    case 8:
                        {
                            localctx = new SimpleExprSumContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6245);
                            this.sumExpr();
                        }
                        break;
                    case 9:
                        {
                            localctx = new SimpleExprGroupingOperationContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6246);
                            this.groupingOperation();
                        }
                        break;
                    case 10:
                        {
                            localctx = new SimpleExprWindowingFunctionContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6247);
                            this.windowFunctionCall();
                        }
                        break;
                    case 11:
                        {
                            localctx = new SimpleExprUnaryContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6248);
                            (localctx as SimpleExprUnaryContext)._op = this.input().LT(1);
                            _la = this.input().LA(1);
                            if (!(((((_la - 758)) & ~0x1F) === 0 && ((1 << (_la - 758)) & 67) !== 0))) {
                                (localctx as SimpleExprUnaryContext)._op = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6249);
                            this.simpleExpr(15);
                        }
                        break;
                    case 12:
                        {
                            localctx = new SimpleExprNotContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6250);
                            this.not2Rule();
                            this.setState(6251);
                            this.simpleExpr(14);
                        }
                        break;
                    case 13:
                        {
                            localctx = new SimpleExprListContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6254);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 487) {
                                {
                                    this.setState(6253);
                                    this.match(MySQLParser.ROW_SYMBOL);
                                }
                            }

                            this.setState(6256);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(6257);
                            this.exprList();
                            this.setState(6258);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 14:
                        {
                            localctx = new SimpleExprSubQueryContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6261);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 174) {
                                {
                                    this.setState(6260);
                                    this.match(MySQLParser.EXISTS_SYMBOL);
                                }
                            }

                            this.setState(6263);
                            this.subquery();
                        }
                        break;
                    case 15:
                        {
                            localctx = new SimpleExprOdbcContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6264);
                            this.match(MySQLParser.OPEN_CURLY_SYMBOL);
                            this.setState(6265);
                            this.identifier();
                            this.setState(6266);
                            this.expr(0);
                            this.setState(6267);
                            this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
                        }
                        break;
                    case 16:
                        {
                            localctx = new SimpleExprMatchContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6269);
                            this.match(MySQLParser.MATCH_SYMBOL);
                            this.setState(6270);
                            this.identListArg();
                            this.setState(6271);
                            this.match(MySQLParser.AGAINST_SYMBOL);
                            this.setState(6272);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(6273);
                            this.bitExpr(0);
                            this.setState(6275);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 251 || _la === 645) {
                                {
                                    this.setState(6274);
                                    this.fulltextOptions();
                                }
                            }

                            this.setState(6277);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 17:
                        {
                            localctx = new SimpleExprBinaryContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6279);
                            this.match(MySQLParser.BINARY_SYMBOL);
                            this.setState(6280);
                            this.simpleExpr(9);
                        }
                        break;
                    case 18:
                        {
                            localctx = new SimpleExprCastContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6281);
                            this.match(MySQLParser.CAST_SYMBOL);
                            this.setState(6282);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(6283);
                            this.expr(0);
                            this.setState(6286);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 21) {
                                {
                                    this.setState(6284);
                                    this.match(MySQLParser.AT_SYMBOL);
                                    this.setState(6285);
                                    this.match(MySQLParser.LOCAL_SYMBOL);
                                }
                            }

                            this.setState(6288);
                            this.match(MySQLParser.AS_SYMBOL);
                            this.setState(6289);
                            this.castType();
                            this.setState(6291);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 758, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(6290);
                                        this.arrayCast();
                                    }
                                    break;
                            }
                            this.setState(6293);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 19:
                        {
                            localctx = new SimpleExprCastTimeContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6295);
                            this.match(MySQLParser.CAST_SYMBOL);
                            this.setState(6296);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(6297);
                            this.expr(0);
                            this.setState(6298);
                            this.match(MySQLParser.AT_SYMBOL);
                            this.setState(6299);
                            this.match(MySQLParser.TIME_SYMBOL);
                            this.setState(6300);
                            this.match(MySQLParser.ZONE_SYMBOL);
                            this.setState(6302);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 759, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(6301);
                                        this.match(MySQLParser.INTERVAL_SYMBOL);
                                    }
                                    break;
                            }
                            this.setState(6304);
                            this.textStringLiteral();
                            this.setState(6305);
                            this.match(MySQLParser.AS_SYMBOL);
                            this.setState(6306);
                            this.match(MySQLParser.DATETIME_SYMBOL);
                            this.setState(6307);
                            this.typeDatetimePrecision();
                            this.setState(6308);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 20:
                        {
                            localctx = new SimpleExprCaseContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6310);
                            this.match(MySQLParser.CASE_SYMBOL);
                            this.setState(6312);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 760, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(6311);
                                        this.expr(0);
                                    }
                                    break;
                            }
                            this.setState(6317);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            do {
                                {
                                    {
                                        this.setState(6314);
                                        this.whenExpression();
                                        this.setState(6315);
                                        this.thenExpression();
                                    }
                                }
                                this.setState(6319);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                            } while (_la === 642);
                            this.setState(6322);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 154) {
                                {
                                    this.setState(6321);
                                    this.elseExpression();
                                }
                            }

                            this.setState(6324);
                            this.match(MySQLParser.END_SYMBOL);
                        }
                        break;
                    case 21:
                        {
                            localctx = new SimpleExprConvertContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6326);
                            this.match(MySQLParser.CONVERT_SYMBOL);
                            this.setState(6327);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(6328);
                            this.expr(0);
                            this.setState(6329);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(6330);
                            this.castType();
                            this.setState(6331);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 22:
                        {
                            localctx = new SimpleExprConvertUsingContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6333);
                            this.match(MySQLParser.CONVERT_SYMBOL);
                            this.setState(6334);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(6335);
                            this.expr(0);
                            this.setState(6336);
                            this.match(MySQLParser.USING_SYMBOL);
                            this.setState(6337);
                            this.charsetName();
                            this.setState(6338);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 23:
                        {
                            localctx = new SimpleExprDefaultContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6340);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                            this.setState(6341);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(6342);
                            this.simpleIdentifier();
                            this.setState(6343);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 24:
                        {
                            localctx = new SimpleExprValuesContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6345);
                            this.match(MySQLParser.VALUES_SYMBOL);
                            this.setState(6346);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(6347);
                            this.simpleIdentifier();
                            this.setState(6348);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 25:
                        {
                            localctx = new SimpleExprIntervalContext(localctx);
                            this.setCtx(localctx);
                            _prevctx = localctx;
                            this.setState(6350);
                            this.match(MySQLParser.INTERVAL_SYMBOL);
                            this.setState(6351);
                            this.expr(0);
                            this.setState(6352);
                            this.interval();
                            this.setState(6353);
                            this.match(MySQLParser.PLUS_OPERATOR);
                            this.setState(6354);
                            this.expr(0);
                        }
                        break;
                }
                this.getCtx()!.setStop(this.input().LT(-1));
                this.setState(6366);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 765, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this.getParseListeners() != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = localctx;
                        {
                            this.setState(6364);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 764, this.getCtx())) {
                                case 1:
                                    {
                                        localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
                                        this.setState(6358);
                                        if (!(this.precpred(this.getCtx(), 16))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 16)");
                                        }
                                        this.setState(6359);
                                        this.match(MySQLParser.CONCAT_PIPES_SYMBOL);
                                        this.setState(6360);
                                        this.simpleExpr(17);
                                    }
                                    break;
                                case 2:
                                    {
                                        localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
                                        this.setState(6361);
                                        if (!(this.precpred(this.getCtx(), 24))) {
                                            throw this.createFailedPredicateException("this.precpred(this.ctx(), 24)");
                                        }
                                        this.setState(6362);
                                        this.match(MySQLParser.COLLATE_SYMBOL);
                                        this.setState(6363);
                                        this.textOrIdentifier();
                                    }
                                    break;
                            }
                        }
                    }
                    this.setState(6368);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 765, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    // @RuleVersion(0)
    public arrayCast(): ArrayCastContext {
        let localctx: ArrayCastContext = new ArrayCastContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 876, MySQLParser.RULE_arrayCast);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6369);
                if (!(this.serverVersion >= 80017)) {
                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                }
                this.setState(6370);
                this.match(MySQLParser.ARRAY_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public jsonOperator(): JsonOperatorContext {
        let localctx: JsonOperatorContext = new JsonOperatorContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 878, MySQLParser.RULE_jsonOperator);
        try {
            this.setState(6376);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 781:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6372);
                        this.match(MySQLParser.JSON_SEPARATOR_SYMBOL);
                        this.setState(6373);
                        this.textStringLiteral();
                    }
                    break;
                case 782:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6374);
                        this.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
                        this.setState(6375);
                        this.textStringLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sumExpr(): SumExprContext {
        let localctx: SumExprContext = new SumExprContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 880, MySQLParser.RULE_sumExpr);
        let _la: number;
        try {
            this.setState(6463);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 783, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6378);
                        localctx._name = this.match(MySQLParser.AVG_SYMBOL);
                        this.setState(6379);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6381);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 767, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6380);
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.setState(6383);
                        this.inSumExpr();
                        this.setState(6384);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6386);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 768, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6385);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6388);
                        localctx._name = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 11) !== 0))) {
                            localctx._name = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6389);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6390);
                        this.inSumExpr();
                        this.setState(6391);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6393);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 769, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6392);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6395);
                        this.jsonFunction();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(6396);
                        localctx._name = this.match(MySQLParser.ST_COLLECT_SYMBOL);
                        this.setState(6397);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6399);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 770, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6398);
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.setState(6401);
                        this.inSumExpr();
                        this.setState(6402);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6404);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 771, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6403);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(6406);
                        localctx._name = this.match(MySQLParser.COUNT_SYMBOL);
                        this.setState(6407);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6415);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 773, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6409);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 10) {
                                        {
                                            this.setState(6408);
                                            this.match(MySQLParser.ALL_SYMBOL);
                                        }
                                    }

                                    this.setState(6411);
                                    this.match(MySQLParser.MULT_OPERATOR);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(6412);
                                    this.inSumExpr();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(6413);
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                    this.setState(6414);
                                    this.exprList();
                                }
                                break;
                        }
                        this.setState(6417);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6419);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 774, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6418);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(6421);
                        localctx._name = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 326 || _la === 345)) {
                            localctx._name = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6422);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6424);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 775, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6423);
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.setState(6426);
                        this.inSumExpr();
                        this.setState(6427);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6429);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 776, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6428);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(6431);
                        localctx._name = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(((((_la - 548)) & ~0x1F) === 0 && ((1 << (_la - 548)) & 65545) !== 0) || _la === 632 || _la === 635)) {
                            localctx._name = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6432);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6433);
                        this.inSumExpr();
                        this.setState(6434);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6436);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 777, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6435);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(6438);
                        localctx._name = this.match(MySQLParser.SUM_SYMBOL);
                        this.setState(6439);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6440);
                        this.match(MySQLParser.DISTINCT_SYMBOL);
                        this.setState(6441);
                        this.inSumExpr();
                        this.setState(6442);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6444);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 778, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6443);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(6446);
                        localctx._name = this.match(MySQLParser.GROUP_CONCAT_SYMBOL);
                        this.setState(6447);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6449);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 779, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6448);
                                    this.match(MySQLParser.DISTINCT_SYMBOL);
                                }
                                break;
                        }
                        this.setState(6451);
                        this.exprList();
                        this.setState(6453);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 393) {
                            {
                                this.setState(6452);
                                this.orderClause();
                            }
                        }

                        this.setState(6457);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 499) {
                            {
                                this.setState(6455);
                                this.match(MySQLParser.SEPARATOR_SYMBOL);
                                this.setState(6456);
                                this.textString();
                            }
                        }

                        this.setState(6459);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6461);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 782, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6460);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupingOperation(): GroupingOperationContext {
        let localctx: GroupingOperationContext = new GroupingOperationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 882, MySQLParser.RULE_groupingOperation);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6465);
                this.match(MySQLParser.GROUPING_SYMBOL);
                this.setState(6466);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6467);
                this.exprList();
                this.setState(6468);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowFunctionCall(): WindowFunctionCallContext {
        let localctx: WindowFunctionCallContext = new WindowFunctionCallContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 884, MySQLParser.RULE_windowFunctionCall);
        let _la: number;
        try {
            this.setState(6520);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 678:
                case 679:
                case 692:
                case 694:
                case 696:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6470);
                        _la = this.input().LA(1);
                        if (!(((((_la - 678)) & ~0x1F) === 0 && ((1 << (_la - 678)) & 344067) !== 0))) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6471);
                        this.parentheses();
                        this.setState(6472);
                        this.windowingClause();
                    }
                    break;
                case 688:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6474);
                        this.match(MySQLParser.NTILE_SYMBOL);
                        this.setState(6482);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 784, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6475);
                                    if (!(this.serverVersion < 80024)) {
                                        throw this.createFailedPredicateException("this.serverVersion < 80024");
                                    }
                                    this.setState(6476);
                                    this.simpleExprWithParentheses();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(6477);
                                    if (!(this.serverVersion >= 80024)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                                    }
                                    this.setState(6478);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(6479);
                                    this.stableInteger();
                                    this.setState(6480);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                        }
                        this.setState(6484);
                        this.windowingClause();
                    }
                    break;
                case 684:
                case 686:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6486);
                        _la = this.input().LA(1);
                        if (!(_la === 684 || _la === 686)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6487);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6488);
                        this.expr(0);
                        this.setState(6490);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 773) {
                            {
                                this.setState(6489);
                                this.leadLagInfo();
                            }
                        }

                        this.setState(6492);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6494);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 232 || _la === 695) {
                            {
                                this.setState(6493);
                                this.nullTreatment();
                            }
                        }

                        this.setState(6496);
                        this.windowingClause();
                    }
                    break;
                case 681:
                case 685:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(6498);
                        _la = this.input().LA(1);
                        if (!(_la === 681 || _la === 685)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6499);
                        this.exprWithParentheses();
                        this.setState(6501);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 232 || _la === 695) {
                            {
                                this.setState(6500);
                                this.nullTreatment();
                            }
                        }

                        this.setState(6503);
                        this.windowingClause();
                    }
                    break;
                case 687:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(6505);
                        this.match(MySQLParser.NTH_VALUE_SYMBOL);
                        this.setState(6506);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6507);
                        this.expr(0);
                        this.setState(6508);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6509);
                        this.simpleExpr(0);
                        this.setState(6510);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6513);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 203) {
                            {
                                this.setState(6511);
                                this.match(MySQLParser.FROM_SYMBOL);
                                this.setState(6512);
                                _la = this.input().LA(1);
                                if (!(_la === 191 || _la === 268)) {
                                    this.getErrorHandler().recoverInline(this);
                                }
                                else {
                                    this.getErrorHandler().reportMatch(this);
                                    this.consume();
                                }
                            }
                        }

                        this.setState(6516);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 232 || _la === 695) {
                            {
                                this.setState(6515);
                                this.nullTreatment();
                            }
                        }

                        this.setState(6518);
                        this.windowingClause();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowingClause(): WindowingClauseContext {
        let localctx: WindowingClauseContext = new WindowingClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 886, MySQLParser.RULE_windowingClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6522);
                this.match(MySQLParser.OVER_SYMBOL);
                this.setState(6525);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 791, this.getCtx())) {
                    case 1:
                        {
                            this.setState(6523);
                            this.windowName();
                        }
                        break;
                    case 2:
                        {
                            this.setState(6524);
                            this.windowSpec();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public leadLagInfo(): LeadLagInfoContext {
        let localctx: LeadLagInfoContext = new LeadLagInfoContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 888, MySQLParser.RULE_leadLagInfo);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6527);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(6535);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 793, this.getCtx())) {
                    case 1:
                        {
                            this.setState(6528);
                            if (!(this.serverVersion < 80024)) {
                                throw this.createFailedPredicateException("this.serverVersion < 80024");
                            }
                            this.setState(6531);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                                case 747:
                                case 748:
                                case 749:
                                case 790:
                                case 791:
                                    {
                                        this.setState(6529);
                                        this.ulonglong_number();
                                    }
                                    break;
                                case 787:
                                    {
                                        this.setState(6530);
                                        this.match(MySQLParser.PARAM_MARKER);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(6533);
                            if (!(this.serverVersion >= 80024)) {
                                throw this.createFailedPredicateException("this.serverVersion >= 80024");
                            }
                            this.setState(6534);
                            this.stableInteger();
                        }
                        break;
                }
                this.setState(6539);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 773) {
                    {
                        this.setState(6537);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6538);
                        this.expr(0);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public stableInteger(): StableIntegerContext {
        let localctx: StableIntegerContext = new StableIntegerContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 890, MySQLParser.RULE_stableInteger);
        try {
            this.setState(6543);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 795, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6541);
                        this.int64Literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6542);
                        this.paramOrVar();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public paramOrVar(): ParamOrVarContext {
        let localctx: ParamOrVarContext = new ParamOrVarContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 892, MySQLParser.RULE_paramOrVar);
        try {
            this.setState(6549);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 796, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6545);
                        this.match(MySQLParser.PARAM_MARKER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6546);
                        this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6547);
                        this.match(MySQLParser.AT_SIGN_SYMBOL);
                        this.setState(6548);
                        this.textOrIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public nullTreatment(): NullTreatmentContext {
        let localctx: NullTreatmentContext = new NullTreatmentContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 894, MySQLParser.RULE_nullTreatment);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6551);
                _la = this.input().LA(1);
                if (!(_la === 232 || _la === 695)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(6552);
                this.match(MySQLParser.NULLS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public jsonFunction(): JsonFunctionContext {
        let localctx: JsonFunctionContext = new JsonFunctionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 896, MySQLParser.RULE_jsonFunction);
        try {
            this.setState(6570);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 667:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6554);
                        this.match(MySQLParser.JSON_ARRAYAGG_SYMBOL);
                        this.setState(6555);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6556);
                        this.inSumExpr();
                        this.setState(6557);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6559);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 797, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6558);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                case 666:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6561);
                        this.match(MySQLParser.JSON_OBJECTAGG_SYMBOL);
                        this.setState(6562);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6563);
                        this.inSumExpr();
                        this.setState(6564);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6565);
                        this.inSumExpr();
                        this.setState(6566);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        this.setState(6568);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 798, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6567);
                                    this.windowingClause();
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public inSumExpr(): InSumExprContext {
        let localctx: InSumExprContext = new InSumExprContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 898, MySQLParser.RULE_inSumExpr);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6573);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 800, this.getCtx())) {
                    case 1:
                        {
                            this.setState(6572);
                            this.match(MySQLParser.ALL_SYMBOL);
                        }
                        break;
                }
                this.setState(6575);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identListArg(): IdentListArgContext {
        let localctx: IdentListArgContext = new IdentListArgContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 900, MySQLParser.RULE_identListArg);
        try {
            this.setState(6582);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 801, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6577);
                        this.identList();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6578);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6579);
                        this.identList();
                        this.setState(6580);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identList(): IdentListContext {
        let localctx: IdentListContext = new IdentListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 902, MySQLParser.RULE_identList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6584);
                this.simpleIdentifier();
                this.setState(6589);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(6585);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(6586);
                            this.simpleIdentifier();
                        }
                    }
                    this.setState(6591);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fulltextOptions(): FulltextOptionsContext {
        let localctx: FulltextOptionsContext = new FulltextOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 904, MySQLParser.RULE_fulltextOptions);
        let _la: number;
        try {
            this.setState(6607);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 804, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6592);
                        this.match(MySQLParser.IN_SYMBOL);
                        this.setState(6593);
                        this.match(MySQLParser.BOOLEAN_SYMBOL);
                        this.setState(6594);
                        this.match(MySQLParser.MODE_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6595);
                        this.match(MySQLParser.IN_SYMBOL);
                        this.setState(6596);
                        this.match(MySQLParser.NATURAL_SYMBOL);
                        this.setState(6597);
                        this.match(MySQLParser.LANGUAGE_SYMBOL);
                        this.setState(6598);
                        this.match(MySQLParser.MODE_SYMBOL);
                        this.setState(6602);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 645) {
                            {
                                this.setState(6599);
                                this.match(MySQLParser.WITH_SYMBOL);
                                this.setState(6600);
                                this.match(MySQLParser.QUERY_SYMBOL);
                                this.setState(6601);
                                this.match(MySQLParser.EXPANSION_SYMBOL);
                            }
                        }

                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6604);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(6605);
                        this.match(MySQLParser.QUERY_SYMBOL);
                        this.setState(6606);
                        this.match(MySQLParser.EXPANSION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public runtimeFunctionCall(): RuntimeFunctionCallContext {
        let localctx: RuntimeFunctionCallContext = new RuntimeFunctionCallContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 906, MySQLParser.RULE_runtimeFunctionCall);
        let _la: number;
        try {
            this.setState(6882);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 822, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6609);
                        this.match(MySQLParser.CHAR_SYMBOL);
                        this.setState(6610);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6611);
                        this.exprList();
                        this.setState(6614);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 621) {
                            {
                                this.setState(6612);
                                this.match(MySQLParser.USING_SYMBOL);
                                this.setState(6613);
                                this.charsetName();
                            }
                        }

                        this.setState(6616);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6618);
                        this.match(MySQLParser.CURRENT_USER_SYMBOL);
                        this.setState(6620);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 806, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6619);
                                    this.parentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6622);
                        this.match(MySQLParser.DATE_SYMBOL);
                        this.setState(6623);
                        this.exprWithParentheses();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(6624);
                        this.match(MySQLParser.DAY_SYMBOL);
                        this.setState(6625);
                        this.exprWithParentheses();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(6626);
                        this.match(MySQLParser.HOUR_SYMBOL);
                        this.setState(6627);
                        this.exprWithParentheses();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(6628);
                        this.match(MySQLParser.INSERT_SYMBOL);
                        this.setState(6629);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6630);
                        this.expr(0);
                        this.setState(6631);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6632);
                        this.expr(0);
                        this.setState(6633);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6634);
                        this.expr(0);
                        this.setState(6635);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6636);
                        this.expr(0);
                        this.setState(6637);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(6639);
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.setState(6640);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6641);
                        this.expr(0);
                        this.setState(6644);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        do {
                            {
                                {
                                    this.setState(6642);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(6643);
                                    this.expr(0);
                                }
                            }
                            this.setState(6646);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        } while (_la === 773);
                        this.setState(6648);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(6650);
                        this.match(MySQLParser.JSON_VALUE_SYMBOL);
                        this.setState(6651);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6652);
                        this.simpleExpr(0);
                        this.setState(6653);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6654);
                        this.textLiteral();
                        this.setState(6656);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 794) {
                            {
                                this.setState(6655);
                                this.returningType();
                            }
                        }

                        this.setState(6658);
                        this.onEmptyOrError();
                        this.setState(6659);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(6661);
                        this.match(MySQLParser.LEFT_SYMBOL);
                        this.setState(6662);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6663);
                        this.expr(0);
                        this.setState(6664);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6665);
                        this.expr(0);
                        this.setState(6666);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(6668);
                        this.match(MySQLParser.MINUTE_SYMBOL);
                        this.setState(6669);
                        this.exprWithParentheses();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(6670);
                        this.match(MySQLParser.MONTH_SYMBOL);
                        this.setState(6671);
                        this.exprWithParentheses();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(6672);
                        this.match(MySQLParser.RIGHT_SYMBOL);
                        this.setState(6673);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6674);
                        this.expr(0);
                        this.setState(6675);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6676);
                        this.expr(0);
                        this.setState(6677);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(6679);
                        this.match(MySQLParser.SECOND_SYMBOL);
                        this.setState(6680);
                        this.exprWithParentheses();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                        this.setState(6681);
                        this.match(MySQLParser.TIME_SYMBOL);
                        this.setState(6682);
                        this.exprWithParentheses();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                        this.setState(6683);
                        this.match(MySQLParser.TIMESTAMP_SYMBOL);
                        this.setState(6684);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6685);
                        this.expr(0);
                        this.setState(6688);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 773) {
                            {
                                this.setState(6686);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(6687);
                                this.expr(0);
                            }
                        }

                        this.setState(6690);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                        this.setState(6692);
                        this.trimFunction();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                        this.setState(6693);
                        this.userFunction();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                        this.setState(6694);
                        this.match(MySQLParser.VALUES_SYMBOL);
                        this.setState(6695);
                        this.exprWithParentheses();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                        this.setState(6696);
                        this.match(MySQLParser.YEAR_SYMBOL);
                        this.setState(6697);
                        this.exprWithParentheses();
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                        this.setState(6698);
                        _la = this.input().LA(1);
                        if (!(_la === 5 || _la === 558)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6699);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6700);
                        this.expr(0);
                        this.setState(6701);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6707);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 810, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6702);
                                    this.expr(0);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(6703);
                                    this.match(MySQLParser.INTERVAL_SYMBOL);
                                    this.setState(6704);
                                    this.expr(0);
                                    this.setState(6705);
                                    this.interval();
                                }
                                break;
                        }
                        this.setState(6709);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                        this.setState(6711);
                        this.match(MySQLParser.CURDATE_SYMBOL);
                        this.setState(6713);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 811, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6712);
                                    this.parentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                        this.setState(6715);
                        this.match(MySQLParser.CURTIME_SYMBOL);
                        this.setState(6717);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 812, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6716);
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                        this.setState(6719);
                        _la = this.input().LA(1);
                        if (!(_la === 114 || _la === 115)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6720);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6721);
                        this.expr(0);
                        this.setState(6722);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6723);
                        this.match(MySQLParser.INTERVAL_SYMBOL);
                        this.setState(6724);
                        this.expr(0);
                        this.setState(6725);
                        this.interval();
                        this.setState(6726);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                        this.setState(6728);
                        this.match(MySQLParser.EXTRACT_SYMBOL);
                        this.setState(6729);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6730);
                        this.interval();
                        this.setState(6731);
                        this.match(MySQLParser.FROM_SYMBOL);
                        this.setState(6732);
                        this.expr(0);
                        this.setState(6733);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                        this.setState(6735);
                        this.match(MySQLParser.GET_FORMAT_SYMBOL);
                        this.setState(6736);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6737);
                        this.dateTimeTtype();
                        this.setState(6738);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6739);
                        this.expr(0);
                        this.setState(6740);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                        this.setState(6742);
                        this.match(MySQLParser.NOW_SYMBOL);
                        this.setState(6744);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 813, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6743);
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                        this.setState(6746);
                        this.match(MySQLParser.POSITION_SYMBOL);
                        this.setState(6747);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6748);
                        this.bitExpr(0);
                        this.setState(6749);
                        this.match(MySQLParser.IN_SYMBOL);
                        this.setState(6750);
                        this.expr(0);
                        this.setState(6751);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                        this.setState(6753);
                        this.substringFunction();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                        this.setState(6754);
                        this.match(MySQLParser.SYSDATE_SYMBOL);
                        this.setState(6756);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 814, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6755);
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                        this.setState(6758);
                        _la = this.input().LA(1);
                        if (!(_la === 792 || _la === 793)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(6759);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6760);
                        this.intervalTimeStamp();
                        this.setState(6761);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6762);
                        this.expr(0);
                        this.setState(6763);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6764);
                        this.expr(0);
                        this.setState(6765);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 31:
                    this.enterOuterAlt(localctx, 31);
                    {
                        this.setState(6767);
                        this.match(MySQLParser.UTC_DATE_SYMBOL);
                        this.setState(6769);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 815, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6768);
                                    this.parentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 32);
                    {
                        this.setState(6771);
                        this.match(MySQLParser.UTC_TIME_SYMBOL);
                        this.setState(6773);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 816, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6772);
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 33:
                    this.enterOuterAlt(localctx, 33);
                    {
                        this.setState(6775);
                        this.match(MySQLParser.UTC_TIMESTAMP_SYMBOL);
                        this.setState(6777);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 817, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6776);
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 34:
                    this.enterOuterAlt(localctx, 34);
                    {
                        this.setState(6779);
                        this.match(MySQLParser.ASCII_SYMBOL);
                        this.setState(6780);
                        this.exprWithParentheses();
                    }
                    break;
                case 35:
                    this.enterOuterAlt(localctx, 35);
                    {
                        this.setState(6781);
                        this.match(MySQLParser.CHARSET_SYMBOL);
                        this.setState(6782);
                        this.exprWithParentheses();
                    }
                    break;
                case 36:
                    this.enterOuterAlt(localctx, 36);
                    {
                        this.setState(6783);
                        this.match(MySQLParser.COALESCE_SYMBOL);
                        this.setState(6784);
                        this.exprListWithParentheses();
                    }
                    break;
                case 37:
                    this.enterOuterAlt(localctx, 37);
                    {
                        this.setState(6785);
                        this.match(MySQLParser.COLLATION_SYMBOL);
                        this.setState(6786);
                        this.exprWithParentheses();
                    }
                    break;
                case 38:
                    this.enterOuterAlt(localctx, 38);
                    {
                        this.setState(6787);
                        this.match(MySQLParser.DATABASE_SYMBOL);
                        this.setState(6788);
                        this.parentheses();
                    }
                    break;
                case 39:
                    this.enterOuterAlt(localctx, 39);
                    {
                        this.setState(6789);
                        this.match(MySQLParser.IF_SYMBOL);
                        this.setState(6790);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6791);
                        this.expr(0);
                        this.setState(6792);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6793);
                        this.expr(0);
                        this.setState(6794);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6795);
                        this.expr(0);
                        this.setState(6796);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 40:
                    this.enterOuterAlt(localctx, 40);
                    {
                        this.setState(6798);
                        this.match(MySQLParser.FORMAT_SYMBOL);
                        this.setState(6799);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6800);
                        this.expr(0);
                        this.setState(6801);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6802);
                        this.expr(0);
                        this.setState(6805);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 773) {
                            {
                                this.setState(6803);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(6804);
                                this.expr(0);
                            }
                        }

                        this.setState(6807);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 41:
                    this.enterOuterAlt(localctx, 41);
                    {
                        this.setState(6809);
                        this.match(MySQLParser.MICROSECOND_SYMBOL);
                        this.setState(6810);
                        this.exprWithParentheses();
                    }
                    break;
                case 42:
                    this.enterOuterAlt(localctx, 42);
                    {
                        this.setState(6811);
                        this.match(MySQLParser.MOD_SYMBOL);
                        this.setState(6812);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6813);
                        this.expr(0);
                        this.setState(6814);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6815);
                        this.expr(0);
                        this.setState(6816);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 43:
                    this.enterOuterAlt(localctx, 43);
                    {
                        this.setState(6818);
                        if (!(this.serverVersion < 80011)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80011");
                        }
                        this.setState(6819);
                        this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.setState(6820);
                        this.exprWithParentheses();
                    }
                    break;
                case 44:
                    this.enterOuterAlt(localctx, 44);
                    {
                        this.setState(6821);
                        this.match(MySQLParser.QUARTER_SYMBOL);
                        this.setState(6822);
                        this.exprWithParentheses();
                    }
                    break;
                case 45:
                    this.enterOuterAlt(localctx, 45);
                    {
                        this.setState(6823);
                        this.match(MySQLParser.REPEAT_SYMBOL);
                        this.setState(6824);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6825);
                        this.expr(0);
                        this.setState(6826);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6827);
                        this.expr(0);
                        this.setState(6828);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 46:
                    this.enterOuterAlt(localctx, 46);
                    {
                        this.setState(6830);
                        this.match(MySQLParser.REPLACE_SYMBOL);
                        this.setState(6831);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6832);
                        this.expr(0);
                        this.setState(6833);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6834);
                        this.expr(0);
                        this.setState(6835);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6836);
                        this.expr(0);
                        this.setState(6837);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 47:
                    this.enterOuterAlt(localctx, 47);
                    {
                        this.setState(6839);
                        this.match(MySQLParser.REVERSE_SYMBOL);
                        this.setState(6840);
                        this.exprWithParentheses();
                    }
                    break;
                case 48:
                    this.enterOuterAlt(localctx, 48);
                    {
                        this.setState(6841);
                        this.match(MySQLParser.ROW_COUNT_SYMBOL);
                        this.setState(6842);
                        this.parentheses();
                    }
                    break;
                case 49:
                    this.enterOuterAlt(localctx, 49);
                    {
                        this.setState(6843);
                        this.match(MySQLParser.TRUNCATE_SYMBOL);
                        this.setState(6844);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6845);
                        this.expr(0);
                        this.setState(6846);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6847);
                        this.expr(0);
                        this.setState(6848);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 50:
                    this.enterOuterAlt(localctx, 50);
                    {
                        this.setState(6850);
                        this.match(MySQLParser.WEEK_SYMBOL);
                        this.setState(6851);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6852);
                        this.expr(0);
                        this.setState(6855);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 773) {
                            {
                                this.setState(6853);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(6854);
                                this.expr(0);
                            }
                        }

                        this.setState(6857);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 51:
                    this.enterOuterAlt(localctx, 51);
                    {
                        this.setState(6859);
                        this.match(MySQLParser.WEIGHT_STRING_SYMBOL);
                        this.setState(6860);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6861);
                        this.expr(0);
                        this.setState(6877);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 821, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6865);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 17) {
                                        {
                                            this.setState(6862);
                                            this.match(MySQLParser.AS_SYMBOL);
                                            this.setState(6863);
                                            this.match(MySQLParser.CHAR_SYMBOL);
                                            this.setState(6864);
                                            this.wsNumCodepoints();
                                        }
                                    }

                                }
                                break;
                            case 2:
                                {
                                    this.setState(6867);
                                    this.match(MySQLParser.AS_SYMBOL);
                                    this.setState(6868);
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                    this.setState(6869);
                                    this.wsNumCodepoints();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(6870);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(6871);
                                    this.ulong_number();
                                    this.setState(6872);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(6873);
                                    this.ulong_number();
                                    this.setState(6874);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(6875);
                                    this.ulong_number();
                                }
                                break;
                        }
                        this.setState(6879);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 52:
                    this.enterOuterAlt(localctx, 52);
                    {
                        this.setState(6881);
                        this.geometryFunction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public returningType(): ReturningTypeContext {
        let localctx: ReturningTypeContext = new ReturningTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 908, MySQLParser.RULE_returningType);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6884);
                this.match(MySQLParser.RETURNING_SYMBOL);
                this.setState(6885);
                this.castType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public geometryFunction(): GeometryFunctionContext {
        let localctx: GeometryFunctionContext = new GeometryFunctionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 910, MySQLParser.RULE_geometryFunction);
        try {
            this.setState(6910);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 211:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6887);
                        this.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL);
                        this.setState(6888);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6890);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 823, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6889);
                                    this.exprList();
                                }
                                break;
                        }
                        this.setState(6892);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 279:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(6893);
                        this.match(MySQLParser.LINESTRING_SYMBOL);
                        this.setState(6894);
                        this.exprListWithParentheses();
                    }
                    break;
                case 351:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(6895);
                        this.match(MySQLParser.MULTILINESTRING_SYMBOL);
                        this.setState(6896);
                        this.exprListWithParentheses();
                    }
                    break;
                case 352:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(6897);
                        this.match(MySQLParser.MULTIPOINT_SYMBOL);
                        this.setState(6898);
                        this.exprListWithParentheses();
                    }
                    break;
                case 353:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(6899);
                        this.match(MySQLParser.MULTIPOLYGON_SYMBOL);
                        this.setState(6900);
                        this.exprListWithParentheses();
                    }
                    break;
                case 411:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(6901);
                        this.match(MySQLParser.POINT_SYMBOL);
                        this.setState(6902);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6903);
                        this.expr(0);
                        this.setState(6904);
                        this.match(MySQLParser.COMMA_SYMBOL);
                        this.setState(6905);
                        this.expr(0);
                        this.setState(6906);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 412:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(6908);
                        this.match(MySQLParser.POLYGON_SYMBOL);
                        this.setState(6909);
                        this.exprListWithParentheses();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public timeFunctionParameters(): TimeFunctionParametersContext {
        let localctx: TimeFunctionParametersContext = new TimeFunctionParametersContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 912, MySQLParser.RULE_timeFunctionParameters);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6912);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6914);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 747) {
                    {
                        this.setState(6913);
                        this.fractionalPrecision();
                    }
                }

                this.setState(6916);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fractionalPrecision(): FractionalPrecisionContext {
        let localctx: FractionalPrecisionContext = new FractionalPrecisionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 914, MySQLParser.RULE_fractionalPrecision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6918);
                this.match(MySQLParser.INT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public weightStringLevels(): WeightStringLevelsContext {
        let localctx: WeightStringLevelsContext = new WeightStringLevelsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 916, MySQLParser.RULE_weightStringLevels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6920);
                this.match(MySQLParser.LEVEL_SYMBOL);
                this.setState(6933);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 827, this.getCtx())) {
                    case 1:
                        {
                            this.setState(6921);
                            this.real_ulong_number();
                            this.setState(6922);
                            this.match(MySQLParser.MINUS_OPERATOR);
                            this.setState(6923);
                            this.real_ulong_number();
                        }
                        break;
                    case 2:
                        {
                            this.setState(6925);
                            this.weightStringLevelListItem();
                            this.setState(6930);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            while (_la === 773) {
                                {
                                    {
                                        this.setState(6926);
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.setState(6927);
                                        this.weightStringLevelListItem();
                                    }
                                }
                                this.setState(6932);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public weightStringLevelListItem(): WeightStringLevelListItemContext {
        let localctx: WeightStringLevelListItemContext = new WeightStringLevelListItemContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 918, MySQLParser.RULE_weightStringLevelListItem);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6935);
                this.real_ulong_number();
                this.setState(6941);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 18:
                    case 134:
                        {
                            this.setState(6936);
                            _la = this.input().LA(1);
                            if (!(_la === 18 || _la === 134)) {
                                this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                            this.setState(6938);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 476) {
                                {
                                    this.setState(6937);
                                    this.match(MySQLParser.REVERSE_SYMBOL);
                                }
                            }

                        }
                        break;
                    case 476:
                        {
                            this.setState(6940);
                            this.match(MySQLParser.REVERSE_SYMBOL);
                        }
                        break;
                    case -1:
                    case 773:
                        break;
                    default:
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dateTimeTtype(): DateTimeTtypeContext {
        let localctx: DateTimeTtypeContext = new DateTimeTtypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 920, MySQLParser.RULE_dateTimeTtype);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6943);
                _la = this.input().LA(1);
                if (!(_la === 113 || _la === 116 || _la === 583 || _la === 586)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public trimFunction(): TrimFunctionContext {
        let localctx: TrimFunctionContext = new TrimFunctionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 922, MySQLParser.RULE_trimFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6945);
                this.match(MySQLParser.TRIM_SYMBOL);
                this.setState(6946);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6970);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 834, this.getCtx())) {
                    case 1:
                        {
                            this.setState(6947);
                            this.expr(0);
                            this.setState(6950);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 203) {
                                {
                                    this.setState(6948);
                                    this.match(MySQLParser.FROM_SYMBOL);
                                    this.setState(6949);
                                    this.expr(0);
                                }
                            }

                        }
                        break;
                    case 2:
                        {
                            this.setState(6952);
                            this.match(MySQLParser.LEADING_SYMBOL);
                            this.setState(6954);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 831, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(6953);
                                        this.expr(0);
                                    }
                                    break;
                            }
                            this.setState(6956);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(6957);
                            this.expr(0);
                        }
                        break;
                    case 3:
                        {
                            this.setState(6958);
                            this.match(MySQLParser.TRAILING_SYMBOL);
                            this.setState(6960);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 832, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(6959);
                                        this.expr(0);
                                    }
                                    break;
                            }
                            this.setState(6962);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(6963);
                            this.expr(0);
                        }
                        break;
                    case 4:
                        {
                            this.setState(6964);
                            this.match(MySQLParser.BOTH_SYMBOL);
                            this.setState(6966);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 833, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(6965);
                                        this.expr(0);
                                    }
                                    break;
                            }
                            this.setState(6968);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(6969);
                            this.expr(0);
                        }
                        break;
                }
                this.setState(6972);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public substringFunction(): SubstringFunctionContext {
        let localctx: SubstringFunctionContext = new SubstringFunctionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 924, MySQLParser.RULE_substringFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(6974);
                this.match(MySQLParser.SUBSTRING_SYMBOL);
                this.setState(6975);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(6976);
                this.expr(0);
                this.setState(6989);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 773:
                        {
                            this.setState(6977);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(6978);
                            this.expr(0);
                            this.setState(6981);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 773) {
                                {
                                    this.setState(6979);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(6980);
                                    this.expr(0);
                                }
                            }

                        }
                        break;
                    case 203:
                        {
                            this.setState(6983);
                            this.match(MySQLParser.FROM_SYMBOL);
                            this.setState(6984);
                            this.expr(0);
                            this.setState(6987);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 200) {
                                {
                                    this.setState(6985);
                                    this.match(MySQLParser.FOR_SYMBOL);
                                    this.setState(6986);
                                    this.expr(0);
                                }
                            }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                this.setState(6991);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public functionCall(): FunctionCallContext {
        let localctx: FunctionCallContext = new FunctionCallContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 926, MySQLParser.RULE_functionCall);
        try {
            this.setState(7007);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 840, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(6993);
                        this.pureIdentifier();
                        this.setState(6994);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(6996);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 838, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(6995);
                                    this.udfExprList();
                                }
                                break;
                        }
                        this.setState(6998);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7000);
                        this.qualifiedIdentifier();
                        this.setState(7001);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(7003);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 839, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7002);
                                    this.exprList();
                                }
                                break;
                        }
                        this.setState(7005);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public udfExprList(): UdfExprListContext {
        let localctx: UdfExprListContext = new UdfExprListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 928, MySQLParser.RULE_udfExprList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7009);
                this.udfExpr();
                this.setState(7014);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(7010);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(7011);
                            this.udfExpr();
                        }
                    }
                    this.setState(7016);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public udfExpr(): UdfExprContext {
        let localctx: UdfExprContext = new UdfExprContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 930, MySQLParser.RULE_udfExpr);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7017);
                this.expr(0);
                this.setState(7019);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 842, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7018);
                            this.selectAlias();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public userVariable(): UserVariableContext {
        let localctx: UserVariableContext = new UserVariableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 932, MySQLParser.RULE_userVariable);
        try {
            this.setState(7024);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 783:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7021);
                        this.match(MySQLParser.AT_SIGN_SYMBOL);
                        this.setState(7022);
                        this.textOrIdentifier();
                    }
                    break;
                case 784:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7023);
                        this.match(MySQLParser.AT_TEXT_SUFFIX);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public inExpressionUserVariableAssignment(): InExpressionUserVariableAssignmentContext {
        let localctx: InExpressionUserVariableAssignmentContext = new InExpressionUserVariableAssignmentContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 934, MySQLParser.RULE_inExpressionUserVariableAssignment);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7026);
                this.userVariable();
                this.setState(7027);
                this.match(MySQLParser.ASSIGN_OPERATOR);
                this.setState(7028);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext {
        let localctx: RvalueSystemOrUserVariableContext = new RvalueSystemOrUserVariableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 936, MySQLParser.RULE_rvalueSystemOrUserVariable);
        try {
            this.setState(7036);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 783:
                case 784:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7030);
                        this.userVariable();
                    }
                    break;
                case 785:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7031);
                        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
                        this.setState(7033);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 844, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7032);
                                    this.rvalueSystemVariableType();
                                }
                                break;
                        }
                        this.setState(7035);
                        this.rvalueSystemVariable();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lvalueVariable(): LvalueVariableContext {
        let localctx: LvalueVariableContext = new LvalueVariableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 938, MySQLParser.RULE_lvalueVariable);
        let _la: number;
        try {
            this.setState(7052);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 849, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7048);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 848, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7038);
                                    if (!(this.serverVersion < 80017)) {
                                        throw this.createFailedPredicateException("this.serverVersion < 80017");
                                    }
                                    this.setState(7039);
                                    this.identifier();
                                    this.setState(7041);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 772) {
                                        {
                                            this.setState(7040);
                                            this.dotIdentifier();
                                        }
                                    }

                                }
                                break;
                            case 2:
                                {
                                    this.setState(7043);
                                    if (!(this.serverVersion >= 80017)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80017");
                                    }
                                    this.setState(7044);
                                    this.lValueIdentifier();
                                    this.setState(7046);
                                    this.getErrorHandler().sync(this);
                                    _la = this.input().LA(1);
                                    if (_la === 772) {
                                        {
                                            this.setState(7045);
                                            this.dotIdentifier();
                                        }
                                    }

                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7050);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.setState(7051);
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public rvalueSystemVariable(): RvalueSystemVariableContext {
        let localctx: RvalueSystemVariableContext = new RvalueSystemVariableContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 940, MySQLParser.RULE_rvalueSystemVariable);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7054);
                this.textOrIdentifier();
                this.setState(7056);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 850, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7055);
                            this.dotIdentifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public whenExpression(): WhenExpressionContext {
        let localctx: WhenExpressionContext = new WhenExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 942, MySQLParser.RULE_whenExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7058);
                this.match(MySQLParser.WHEN_SYMBOL);
                this.setState(7059);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public thenExpression(): ThenExpressionContext {
        let localctx: ThenExpressionContext = new ThenExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 944, MySQLParser.RULE_thenExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7061);
                this.match(MySQLParser.THEN_SYMBOL);
                this.setState(7062);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public elseExpression(): ElseExpressionContext {
        let localctx: ElseExpressionContext = new ElseExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 946, MySQLParser.RULE_elseExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7064);
                this.match(MySQLParser.ELSE_SYMBOL);
                this.setState(7065);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public castType(): CastTypeContext {
        let localctx: CastTypeContext = new CastTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 948, MySQLParser.RULE_castType);
        let _la: number;
        try {
            this.setState(7115);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 861, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7067);
                        this.match(MySQLParser.BINARY_SYMBOL);
                        this.setState(7069);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 851, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7068);
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7071);
                        this.match(MySQLParser.CHAR_SYMBOL);
                        this.setState(7073);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 852, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7072);
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.setState(7076);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 853, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7075);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7078);
                        this.nchar();
                        this.setState(7080);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 854, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7079);
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7082);
                        this.match(MySQLParser.SIGNED_SYMBOL);
                        this.setState(7084);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 855, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7083);
                                    this.match(MySQLParser.INT_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(7086);
                        this.match(MySQLParser.UNSIGNED_SYMBOL);
                        this.setState(7088);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 856, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7087);
                                    this.match(MySQLParser.INT_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(7090);
                        this.match(MySQLParser.DATE_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(7091);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(7092);
                        this.match(MySQLParser.YEAR_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(7093);
                        this.match(MySQLParser.TIME_SYMBOL);
                        this.setState(7095);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 857, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7094);
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(7097);
                        this.match(MySQLParser.DATETIME_SYMBOL);
                        this.setState(7099);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 858, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7098);
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(7101);
                        this.match(MySQLParser.DECIMAL_SYMBOL);
                        this.setState(7103);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 859, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7102);
                                    this.floatOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(7105);
                        this.match(MySQLParser.JSON_SYMBOL);
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(7106);
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.setState(7107);
                        this.realType();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(7108);
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.setState(7109);
                        this.match(MySQLParser.FLOAT_SYMBOL);
                        this.setState(7111);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 860, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7110);
                                    this.standardFloatOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                        this.setState(7113);
                        if (!(this.serverVersion >= 80027)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80027");
                        }
                        this.setState(7114);
                        _la = this.input().LA(1);
                        if (!(_la === 211 || _la === 279 || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 7) !== 0) || _la === 411 || _la === 412)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public exprList(): ExprListContext {
        let localctx: ExprListContext = new ExprListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 950, MySQLParser.RULE_exprList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7117);
                this.expr(0);
                this.setState(7122);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(7118);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(7119);
                            this.expr(0);
                        }
                    }
                    this.setState(7124);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public charset(): CharsetContext {
        let localctx: CharsetContext = new CharsetContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 952, MySQLParser.RULE_charset);
        try {
            this.setState(7128);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 60:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7125);
                        this.match(MySQLParser.CHAR_SYMBOL);
                        this.setState(7126);
                        this.match(MySQLParser.SET_SYMBOL);
                    }
                    break;
                case 58:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7127);
                        this.match(MySQLParser.CHARSET_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public notRule(): NotRuleContext {
        let localctx: NotRuleContext = new NotRuleContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 954, MySQLParser.RULE_notRule);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7130);
                _la = this.input().LA(1);
                if (!(_la === 371 || _la === 745)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public not2Rule(): Not2RuleContext {
        let localctx: Not2RuleContext = new Not2RuleContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 956, MySQLParser.RULE_not2Rule);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7132);
                _la = this.input().LA(1);
                if (!(_la === 745 || _la === 763)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public interval(): IntervalContext {
        let localctx: IntervalContext = new IntervalContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 958, MySQLParser.RULE_interval);
        let _la: number;
        try {
            this.setState(7136);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 122:
                case 229:
                case 337:
                case 343:
                case 350:
                case 429:
                case 495:
                case 640:
                case 656:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7134);
                        this.intervalTimeStamp();
                    }
                    break;
                case 118:
                case 119:
                case 120:
                case 121:
                case 226:
                case 227:
                case 228:
                case 341:
                case 342:
                case 494:
                case 655:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7135);
                        _la = this.input().LA(1);
                        if (!(((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 15) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 7) !== 0) || _la === 341 || _la === 342 || _la === 494 || _la === 655)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public intervalTimeStamp(): IntervalTimeStampContext {
        let localctx: IntervalTimeStampContext = new IntervalTimeStampContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 960, MySQLParser.RULE_intervalTimeStamp);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7138);
                _la = this.input().LA(1);
                if (!(_la === 122 || _la === 229 || ((((_la - 337)) & ~0x1F) === 0 && ((1 << (_la - 337)) & 8257) !== 0) || _la === 429 || _la === 495 || _la === 640 || _la === 656)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public exprListWithParentheses(): ExprListWithParenthesesContext {
        let localctx: ExprListWithParenthesesContext = new ExprListWithParenthesesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 962, MySQLParser.RULE_exprListWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7140);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(7141);
                this.exprList();
                this.setState(7142);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public exprWithParentheses(): ExprWithParenthesesContext {
        let localctx: ExprWithParenthesesContext = new ExprWithParenthesesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 964, MySQLParser.RULE_exprWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7144);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(7145);
                this.expr(0);
                this.setState(7146);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
        let localctx: SimpleExprWithParenthesesContext = new SimpleExprWithParenthesesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 966, MySQLParser.RULE_simpleExprWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7148);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(7149);
                this.simpleExpr(0);
                this.setState(7150);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public orderList(): OrderListContext {
        let localctx: OrderListContext = new OrderListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 968, MySQLParser.RULE_orderList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7152);
                this.orderExpression();
                this.setState(7157);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 865, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(7153);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(7154);
                                this.orderExpression();
                            }
                        }
                    }
                    this.setState(7159);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 865, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public orderExpression(): OrderExpressionContext {
        let localctx: OrderExpressionContext = new OrderExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 970, MySQLParser.RULE_orderExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7160);
                this.expr(0);
                this.setState(7162);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 866, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7161);
                            this.direction();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupList(): GroupListContext {
        let localctx: GroupListContext = new GroupListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 972, MySQLParser.RULE_groupList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7164);
                this.groupingExpression();
                this.setState(7169);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(7165);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(7166);
                            this.groupingExpression();
                        }
                    }
                    this.setState(7171);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public groupingExpression(): GroupingExpressionContext {
        let localctx: GroupingExpressionContext = new GroupingExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 974, MySQLParser.RULE_groupingExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7172);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public channel(): ChannelContext {
        let localctx: ChannelContext = new ChannelContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 976, MySQLParser.RULE_channel);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7174);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(7175);
                this.match(MySQLParser.CHANNEL_SYMBOL);
                this.setState(7176);
                this.textStringNoLinebreak();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public compoundStatement(): CompoundStatementContext {
        let localctx: CompoundStatementContext = new CompoundStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 978, MySQLParser.RULE_compoundStatement);
        try {
            this.setState(7191);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 868, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7178);
                        this.simpleStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7179);
                        this.returnStatement();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7180);
                        this.ifStatement();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7181);
                        this.caseStatement();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(7182);
                        this.labeledBlock();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(7183);
                        this.unlabeledBlock();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(7184);
                        this.labeledControl();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(7185);
                        this.unlabeledControl();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(7186);
                        this.leaveStatement();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(7187);
                        this.iterateStatement();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(7188);
                        this.cursorOpen();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(7189);
                        this.cursorFetch();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(7190);
                        this.cursorClose();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public returnStatement(): ReturnStatementContext {
        let localctx: ReturnStatementContext = new ReturnStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 980, MySQLParser.RULE_returnStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7193);
                this.match(MySQLParser.RETURN_SYMBOL);
                this.setState(7194);
                this.expr(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ifStatement(): IfStatementContext {
        let localctx: IfStatementContext = new IfStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 982, MySQLParser.RULE_ifStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7196);
                this.match(MySQLParser.IF_SYMBOL);
                this.setState(7197);
                this.ifBody();
                this.setState(7198);
                this.match(MySQLParser.END_SYMBOL);
                this.setState(7199);
                this.match(MySQLParser.IF_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ifBody(): IfBodyContext {
        let localctx: IfBodyContext = new IfBodyContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 984, MySQLParser.RULE_ifBody);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7201);
                this.expr(0);
                this.setState(7202);
                this.thenStatement();
                this.setState(7207);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 155:
                        {
                            this.setState(7203);
                            this.match(MySQLParser.ELSEIF_SYMBOL);
                            this.setState(7204);
                            this.ifBody();
                        }
                        break;
                    case 154:
                        {
                            this.setState(7205);
                            this.match(MySQLParser.ELSE_SYMBOL);
                            this.setState(7206);
                            this.compoundStatementList();
                        }
                        break;
                    case 159:
                        break;
                    default:
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public thenStatement(): ThenStatementContext {
        let localctx: ThenStatementContext = new ThenStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 986, MySQLParser.RULE_thenStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7209);
                this.match(MySQLParser.THEN_SYMBOL);
                this.setState(7210);
                this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public compoundStatementList(): CompoundStatementListContext {
        let localctx: CompoundStatementListContext = new CompoundStatementListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 988, MySQLParser.RULE_compoundStatementList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7215);
                this.getErrorHandler().sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.setState(7212);
                                    this.compoundStatement();
                                    this.setState(7213);
                                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.setState(7217);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 870, this.getCtx());
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public caseStatement(): CaseStatementContext {
        let localctx: CaseStatementContext = new CaseStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 990, MySQLParser.RULE_caseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7219);
                this.match(MySQLParser.CASE_SYMBOL);
                this.setState(7221);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 871, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7220);
                            this.expr(0);
                        }
                        break;
                }
                this.setState(7226);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                do {
                    {
                        {
                            this.setState(7223);
                            this.whenExpression();
                            this.setState(7224);
                            this.thenStatement();
                        }
                    }
                    this.setState(7228);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                } while (_la === 642);
                this.setState(7231);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 154) {
                    {
                        this.setState(7230);
                        this.elseStatement();
                    }
                }

                this.setState(7233);
                this.match(MySQLParser.END_SYMBOL);
                this.setState(7234);
                this.match(MySQLParser.CASE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public elseStatement(): ElseStatementContext {
        let localctx: ElseStatementContext = new ElseStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 992, MySQLParser.RULE_elseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7236);
                this.match(MySQLParser.ELSE_SYMBOL);
                this.setState(7237);
                this.compoundStatementList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public labeledBlock(): LabeledBlockContext {
        let localctx: LabeledBlockContext = new LabeledBlockContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 994, MySQLParser.RULE_labeledBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7239);
                this.label();
                this.setState(7240);
                this.beginEndBlock();
                this.setState(7242);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 874, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7241);
                            this.labelRef();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public unlabeledBlock(): UnlabeledBlockContext {
        let localctx: UnlabeledBlockContext = new UnlabeledBlockContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 996, MySQLParser.RULE_unlabeledBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7244);
                this.beginEndBlock();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public label(): LabelContext {
        let localctx: LabelContext = new LabelContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 998, MySQLParser.RULE_label);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7246);
                this.labelIdentifier();
                this.setState(7247);
                this.match(MySQLParser.COLON_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public beginEndBlock(): BeginEndBlockContext {
        let localctx: BeginEndBlockContext = new BeginEndBlockContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1000, MySQLParser.RULE_beginEndBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7249);
                this.match(MySQLParser.BEGIN_SYMBOL);
                this.setState(7251);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 875, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7250);
                            this.spDeclarations();
                        }
                        break;
                }
                this.setState(7254);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 876, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7253);
                            this.compoundStatementList();
                        }
                        break;
                }
                this.setState(7256);
                this.match(MySQLParser.END_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public labeledControl(): LabeledControlContext {
        let localctx: LabeledControlContext = new LabeledControlContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1002, MySQLParser.RULE_labeledControl);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7258);
                this.label();
                this.setState(7259);
                this.unlabeledControl();
                this.setState(7261);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 877, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7260);
                            this.labelRef();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public unlabeledControl(): UnlabeledControlContext {
        let localctx: UnlabeledControlContext = new UnlabeledControlContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1004, MySQLParser.RULE_unlabeledControl);
        try {
            this.setState(7266);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 294:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7263);
                        this.loopBlock();
                    }
                    break;
                case 644:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7264);
                        this.whileDoBlock();
                    }
                    break;
                case 457:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7265);
                        this.repeatUntilBlock();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public loopBlock(): LoopBlockContext {
        let localctx: LoopBlockContext = new LoopBlockContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1006, MySQLParser.RULE_loopBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7268);
                this.match(MySQLParser.LOOP_SYMBOL);
                this.setState(7269);
                this.compoundStatementList();
                this.setState(7270);
                this.match(MySQLParser.END_SYMBOL);
                this.setState(7271);
                this.match(MySQLParser.LOOP_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public whileDoBlock(): WhileDoBlockContext {
        let localctx: WhileDoBlockContext = new WhileDoBlockContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1008, MySQLParser.RULE_whileDoBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7273);
                this.match(MySQLParser.WHILE_SYMBOL);
                this.setState(7274);
                this.expr(0);
                this.setState(7275);
                this.match(MySQLParser.DO_SYMBOL);
                this.setState(7276);
                this.compoundStatementList();
                this.setState(7277);
                this.match(MySQLParser.END_SYMBOL);
                this.setState(7278);
                this.match(MySQLParser.WHILE_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public repeatUntilBlock(): RepeatUntilBlockContext {
        let localctx: RepeatUntilBlockContext = new RepeatUntilBlockContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1010, MySQLParser.RULE_repeatUntilBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7280);
                this.match(MySQLParser.REPEAT_SYMBOL);
                this.setState(7281);
                this.compoundStatementList();
                this.setState(7282);
                this.match(MySQLParser.UNTIL_SYMBOL);
                this.setState(7283);
                this.expr(0);
                this.setState(7284);
                this.match(MySQLParser.END_SYMBOL);
                this.setState(7285);
                this.match(MySQLParser.REPEAT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public spDeclarations(): SpDeclarationsContext {
        let localctx: SpDeclarationsContext = new SpDeclarationsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1012, MySQLParser.RULE_spDeclarations);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7290);
                this.getErrorHandler().sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.setState(7287);
                                    this.spDeclaration();
                                    this.setState(7288);
                                    this.match(MySQLParser.SEMICOLON_SYMBOL);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.setState(7292);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 879, this.getCtx());
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public spDeclaration(): SpDeclarationContext {
        let localctx: SpDeclarationContext = new SpDeclarationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1014, MySQLParser.RULE_spDeclaration);
        try {
            this.setState(7298);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 880, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7294);
                        this.variableDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7295);
                        this.conditionDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7296);
                        this.handlerDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7297);
                        this.cursorDeclaration();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public variableDeclaration(): VariableDeclarationContext {
        let localctx: VariableDeclarationContext = new VariableDeclarationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1016, MySQLParser.RULE_variableDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7300);
                this.match(MySQLParser.DECLARE_SYMBOL);
                this.setState(7301);
                this.identifierList();
                this.setState(7302);
                this.dataType();
                this.setState(7304);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 69) {
                    {
                        this.setState(7303);
                        this.collate();
                    }
                }

                this.setState(7308);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 128) {
                    {
                        this.setState(7306);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.setState(7307);
                        this.expr(0);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public conditionDeclaration(): ConditionDeclarationContext {
        let localctx: ConditionDeclarationContext = new ConditionDeclarationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1018, MySQLParser.RULE_conditionDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7310);
                this.match(MySQLParser.DECLARE_SYMBOL);
                this.setState(7311);
                this.identifier();
                this.setState(7312);
                this.match(MySQLParser.CONDITION_SYMBOL);
                this.setState(7313);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(7314);
                this.spCondition();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public spCondition(): SpConditionContext {
        let localctx: SpConditionContext = new SpConditionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1020, MySQLParser.RULE_spCondition);
        try {
            this.setState(7318);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 747:
                case 748:
                case 749:
                case 788:
                case 790:
                case 791:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7316);
                        this.ulong_number();
                    }
                    break;
                case 526:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7317);
                        this.sqlstate();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sqlstate(): SqlstateContext {
        let localctx: SqlstateContext = new SqlstateContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1022, MySQLParser.RULE_sqlstate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7320);
                this.match(MySQLParser.SQLSTATE_SYMBOL);
                this.setState(7322);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 884, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7321);
                            this.match(MySQLParser.VALUE_SYMBOL);
                        }
                        break;
                }
                this.setState(7324);
                this.textLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public handlerDeclaration(): HandlerDeclarationContext {
        let localctx: HandlerDeclarationContext = new HandlerDeclarationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1024, MySQLParser.RULE_handlerDeclaration);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7326);
                this.match(MySQLParser.DECLARE_SYMBOL);
                this.setState(7327);
                _la = this.input().LA(1);
                if (!(_la === 92 || _la === 175 || _la === 605)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(7328);
                this.match(MySQLParser.HANDLER_SYMBOL);
                this.setState(7329);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(7330);
                this.handlerCondition();
                this.setState(7335);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 885, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(7331);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(7332);
                                this.handlerCondition();
                            }
                        }
                    }
                    this.setState(7337);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 885, this.getCtx());
                }
                this.setState(7338);
                this.compoundStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public handlerCondition(): HandlerConditionContext {
        let localctx: HandlerConditionContext = new HandlerConditionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1026, MySQLParser.RULE_handlerCondition);
        try {
            this.setState(7347);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 886, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7340);
                        this.spCondition();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7341);
                        this.identifier();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7342);
                        this.match(MySQLParser.SQLWARNING_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7343);
                        this.notRule();
                        this.setState(7344);
                        this.match(MySQLParser.FOUND_SYMBOL);
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(7346);
                        this.match(MySQLParser.SQLEXCEPTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public cursorDeclaration(): CursorDeclarationContext {
        let localctx: CursorDeclarationContext = new CursorDeclarationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1028, MySQLParser.RULE_cursorDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7349);
                this.match(MySQLParser.DECLARE_SYMBOL);
                this.setState(7350);
                this.identifier();
                this.setState(7351);
                this.match(MySQLParser.CURSOR_SYMBOL);
                this.setState(7352);
                this.match(MySQLParser.FOR_SYMBOL);
                this.setState(7353);
                this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public iterateStatement(): IterateStatementContext {
        let localctx: IterateStatementContext = new IterateStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1030, MySQLParser.RULE_iterateStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7355);
                this.match(MySQLParser.ITERATE_SYMBOL);
                this.setState(7356);
                this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public leaveStatement(): LeaveStatementContext {
        let localctx: LeaveStatementContext = new LeaveStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1032, MySQLParser.RULE_leaveStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7358);
                this.match(MySQLParser.LEAVE_SYMBOL);
                this.setState(7359);
                this.labelRef();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public getDiagnosticsStatement(): GetDiagnosticsStatementContext {
        let localctx: GetDiagnosticsStatementContext = new GetDiagnosticsStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1034, MySQLParser.RULE_getDiagnosticsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7361);
                this.match(MySQLParser.GET_SYMBOL);
                this.setState(7363);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 101 || _la === 540) {
                    {
                        this.setState(7362);
                        _la = this.input().LA(1);
                        if (!(_la === 101 || _la === 540)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                }

                this.setState(7365);
                this.match(MySQLParser.DIAGNOSTICS_SYMBOL);
                this.setState(7384);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 890, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7366);
                            this.statementInformationItem();
                            this.setState(7371);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            while (_la === 773) {
                                {
                                    {
                                        this.setState(7367);
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.setState(7368);
                                        this.statementInformationItem();
                                    }
                                }
                                this.setState(7373);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(7374);
                            this.match(MySQLParser.CONDITION_SYMBOL);
                            this.setState(7375);
                            this.signalAllowedExpr();
                            this.setState(7376);
                            this.conditionInformationItem();
                            this.setState(7381);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            while (_la === 773) {
                                {
                                    {
                                        this.setState(7377);
                                        this.match(MySQLParser.COMMA_SYMBOL);
                                        this.setState(7378);
                                        this.conditionInformationItem();
                                    }
                                }
                                this.setState(7383);
                                this.getErrorHandler().sync(this);
                                _la = this.input().LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public signalAllowedExpr(): SignalAllowedExprContext {
        let localctx: SignalAllowedExprContext = new SignalAllowedExprContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1036, MySQLParser.RULE_signalAllowedExpr);
        try {
            this.setState(7389);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 891, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7386);
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7387);
                        this.rvalueSystemOrUserVariable();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7388);
                        this.qualifiedIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public statementInformationItem(): StatementInformationItemContext {
        let localctx: StatementInformationItemContext = new StatementInformationItemContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1038, MySQLParser.RULE_statementInformationItem);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7393);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 892, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7391);
                            this.userVariable();
                        }
                        break;
                    case 2:
                        {
                            this.setState(7392);
                            this.identifier();
                        }
                        break;
                }
                this.setState(7395);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(7396);
                _la = this.input().LA(1);
                if (!(_la === 377 || _la === 485)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public conditionInformationItem(): ConditionInformationItemContext {
        let localctx: ConditionInformationItemContext = new ConditionInformationItemContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1040, MySQLParser.RULE_conditionInformationItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7400);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 893, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7398);
                            this.userVariable();
                        }
                        break;
                    case 2:
                        {
                            this.setState(7399);
                            this.identifier();
                        }
                        break;
                }
                this.setState(7402);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(7405);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 53:
                    case 64:
                    case 73:
                    case 87:
                    case 88:
                    case 89:
                    case 107:
                    case 336:
                    case 355:
                    case 492:
                    case 557:
                    case 576:
                        {
                            this.setState(7403);
                            this.signalInformationItemName();
                        }
                        break;
                    case 473:
                        {
                            this.setState(7404);
                            this.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public signalInformationItemName(): SignalInformationItemNameContext {
        let localctx: SignalInformationItemNameContext = new SignalInformationItemNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1042, MySQLParser.RULE_signalInformationItemName);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7407);
                _la = this.input().LA(1);
                if (!(((((_la - 53)) & ~0x1F) === 0 && ((1 << (_la - 53)) & 1050625) !== 0) || ((((_la - 87)) & ~0x1F) === 0 && ((1 << (_la - 87)) & 1048583) !== 0) || _la === 336 || _la === 355 || _la === 492 || _la === 557 || _la === 576)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public signalStatement(): SignalStatementContext {
        let localctx: SignalStatementContext = new SignalStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1044, MySQLParser.RULE_signalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7409);
                this.match(MySQLParser.SIGNAL_SYMBOL);
                this.setState(7412);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 895, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7410);
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.setState(7411);
                            this.sqlstate();
                        }
                        break;
                }
                this.setState(7423);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 506) {
                    {
                        this.setState(7414);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(7415);
                        this.signalInformationItem();
                        this.setState(7420);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 773) {
                            {
                                {
                                    this.setState(7416);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(7417);
                                    this.signalInformationItem();
                                }
                            }
                            this.setState(7422);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public resignalStatement(): ResignalStatementContext {
        let localctx: ResignalStatementContext = new ResignalStatementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1046, MySQLParser.RULE_resignalStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7425);
                this.match(MySQLParser.RESIGNAL_SYMBOL);
                this.setState(7428);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 898, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7426);
                            this.identifier();
                        }
                        break;
                    case 2:
                        {
                            this.setState(7427);
                            this.sqlstate();
                        }
                        break;
                }
                this.setState(7439);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 506) {
                    {
                        this.setState(7430);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(7431);
                        this.signalInformationItem();
                        this.setState(7436);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 773) {
                            {
                                {
                                    this.setState(7432);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(7433);
                                    this.signalInformationItem();
                                }
                            }
                            this.setState(7438);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public signalInformationItem(): SignalInformationItemContext {
        let localctx: SignalInformationItemContext = new SignalInformationItemContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1048, MySQLParser.RULE_signalInformationItem);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7441);
                this.signalInformationItemName();
                this.setState(7442);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(7443);
                this.signalAllowedExpr();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public cursorOpen(): CursorOpenContext {
        let localctx: CursorOpenContext = new CursorOpenContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1050, MySQLParser.RULE_cursorOpen);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7445);
                this.match(MySQLParser.OPEN_SYMBOL);
                this.setState(7446);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public cursorClose(): CursorCloseContext {
        let localctx: CursorCloseContext = new CursorCloseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1052, MySQLParser.RULE_cursorClose);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7448);
                this.match(MySQLParser.CLOSE_SYMBOL);
                this.setState(7449);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public cursorFetch(): CursorFetchContext {
        let localctx: CursorFetchContext = new CursorFetchContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1054, MySQLParser.RULE_cursorFetch);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7451);
                this.match(MySQLParser.FETCH_SYMBOL);
                this.setState(7456);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 902, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7453);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 367) {
                                {
                                    this.setState(7452);
                                    this.match(MySQLParser.NEXT_SYMBOL);
                                }
                            }

                            this.setState(7455);
                            this.match(MySQLParser.FROM_SYMBOL);
                        }
                        break;
                }
                this.setState(7458);
                this.identifier();
                this.setState(7459);
                this.match(MySQLParser.INTO_SYMBOL);
                this.setState(7460);
                this.identifierList();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public schedule(): ScheduleContext {
        let localctx: ScheduleContext = new ScheduleContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1056, MySQLParser.RULE_schedule);
        let _la: number;
        try {
            this.setState(7475);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 21:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7462);
                        this.match(MySQLParser.AT_SYMBOL);
                        this.setState(7463);
                        this.expr(0);
                    }
                    break;
                case 171:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7464);
                        this.match(MySQLParser.EVERY_SYMBOL);
                        this.setState(7465);
                        this.expr(0);
                        this.setState(7466);
                        this.interval();
                        this.setState(7469);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 542) {
                            {
                                this.setState(7467);
                                this.match(MySQLParser.STARTS_SYMBOL);
                                this.setState(7468);
                                this.expr(0);
                            }
                        }

                        this.setState(7473);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 160) {
                            {
                                this.setState(7471);
                                this.match(MySQLParser.ENDS_SYMBOL);
                                this.setState(7472);
                                this.expr(0);
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public columnDefinition(): ColumnDefinitionContext {
        let localctx: ColumnDefinitionContext = new ColumnDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1058, MySQLParser.RULE_columnDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7477);
                this.columnName();
                this.setState(7478);
                this.fieldDefinition();
                this.setState(7480);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 906, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7479);
                            this.checkOrReferences();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public checkOrReferences(): CheckOrReferencesContext {
        let localctx: CheckOrReferencesContext = new CheckOrReferencesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1060, MySQLParser.RULE_checkOrReferences);
        try {
            this.setState(7485);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 907, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7482);
                        if (!(this.serverVersion < 80016)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80016");
                        }
                        this.setState(7483);
                        this.checkConstraint();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7484);
                        this.references();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public checkConstraint(): CheckConstraintContext {
        let localctx: CheckConstraintContext = new CheckConstraintContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1062, MySQLParser.RULE_checkConstraint);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7487);
                this.match(MySQLParser.CHECK_SYMBOL);
                this.setState(7488);
                this.exprWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public constraintEnforcement(): ConstraintEnforcementContext {
        let localctx: ConstraintEnforcementContext = new ConstraintEnforcementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1064, MySQLParser.RULE_constraintEnforcement);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7491);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 371) {
                    {
                        this.setState(7490);
                        this.match(MySQLParser.NOT_SYMBOL);
                    }
                }

                this.setState(7493);
                this.match(MySQLParser.ENFORCED_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableConstraintDef(): TableConstraintDefContext {
        let localctx: TableConstraintDefContext = new TableConstraintDefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1066, MySQLParser.RULE_tableConstraintDef);
        let _la: number;
        try {
            let _alt: number;
            this.setState(7570);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 236:
                case 265:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7495);
                        localctx._type_ = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 236 || _la === 265)) {
                            localctx._type_ = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(7497);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 909, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7496);
                                    this.indexNameAndType();
                                }
                                break;
                        }
                        this.setState(7499);
                        this.keyListVariants();
                        this.setState(7503);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 910, this.getCtx());
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.setState(7500);
                                        this.indexOption();
                                    }
                                }
                            }
                            this.setState(7505);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 910, this.getCtx());
                        }
                    }
                    break;
                case 205:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7506);
                        localctx._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
                        this.setState(7508);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 911, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7507);
                                    this.keyOrIndex();
                                }
                                break;
                        }
                        this.setState(7511);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 912, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7510);
                                    this.indexName();
                                }
                                break;
                        }
                        this.setState(7513);
                        this.keyListVariants();
                        this.setState(7517);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 913, this.getCtx());
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.setState(7514);
                                        this.fulltextIndexOption();
                                    }
                                }
                            }
                            this.setState(7519);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 913, this.getCtx());
                        }
                    }
                    break;
                case 523:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7520);
                        localctx._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
                        this.setState(7522);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 914, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7521);
                                    this.keyOrIndex();
                                }
                                break;
                        }
                        this.setState(7525);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 915, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7524);
                                    this.indexName();
                                }
                                break;
                        }
                        this.setState(7527);
                        this.keyListVariants();
                        this.setState(7531);
                        this.getErrorHandler().sync(this);
                        _alt = this.getInterpreter().adaptivePredict(this.input(), 916, this.getCtx());
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.setState(7528);
                                        this.spatialIndexOption();
                                    }
                                }
                            }
                            this.setState(7533);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 916, this.getCtx());
                        }
                    }
                    break;
                case 62:
                case 86:
                case 199:
                case 420:
                case 609:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7535);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 86) {
                            {
                                this.setState(7534);
                                this.constraintName();
                            }
                        }

                        this.setState(7568);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 420:
                            case 609:
                                {
                                    this.setState(7543);
                                    this.getErrorHandler().sync(this);
                                    switch (this.input().LA(1)) {
                                        case 420:
                                            {
                                                this.setState(7537);
                                                localctx._type_ = this.match(MySQLParser.PRIMARY_SYMBOL);
                                                this.setState(7538);
                                                this.match(MySQLParser.KEY_SYMBOL);
                                            }
                                            break;
                                        case 609:
                                            {
                                                this.setState(7539);
                                                localctx._type_ = this.match(MySQLParser.UNIQUE_SYMBOL);
                                                this.setState(7541);
                                                this.getErrorHandler().sync(this);
                                                switch (this.getInterpreter().adaptivePredict(this.input(), 918, this.getCtx())) {
                                                    case 1:
                                                        {
                                                            this.setState(7540);
                                                            this.keyOrIndex();
                                                        }
                                                        break;
                                                }
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                    this.setState(7546);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 920, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(7545);
                                                this.indexNameAndType();
                                            }
                                            break;
                                    }
                                    this.setState(7548);
                                    this.keyListVariants();
                                    this.setState(7552);
                                    this.getErrorHandler().sync(this);
                                    _alt = this.getInterpreter().adaptivePredict(this.input(), 921, this.getCtx());
                                    while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                        if (_alt === 1) {
                                            {
                                                {
                                                    this.setState(7549);
                                                    this.indexOption();
                                                }
                                            }
                                        }
                                        this.setState(7554);
                                        this.getErrorHandler().sync(this);
                                        _alt = this.getInterpreter().adaptivePredict(this.input(), 921, this.getCtx());
                                    }
                                }
                                break;
                            case 199:
                                {
                                    this.setState(7555);
                                    localctx._type_ = this.match(MySQLParser.FOREIGN_SYMBOL);
                                    this.setState(7556);
                                    this.match(MySQLParser.KEY_SYMBOL);
                                    this.setState(7558);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 922, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(7557);
                                                this.indexName();
                                            }
                                            break;
                                    }
                                    this.setState(7560);
                                    this.keyList();
                                    this.setState(7561);
                                    this.references();
                                }
                                break;
                            case 62:
                                {
                                    this.setState(7563);
                                    this.checkConstraint();
                                    this.setState(7566);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 923, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(7564);
                                                if (!(this.serverVersion >= 80017)) {
                                                    throw this.createFailedPredicateException("this.serverVersion >= 80017");
                                                }
                                                this.setState(7565);
                                                this.constraintEnforcement();
                                            }
                                            break;
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public constraintName(): ConstraintNameContext {
        let localctx: ConstraintNameContext = new ConstraintNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1068, MySQLParser.RULE_constraintName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7572);
                this.match(MySQLParser.CONSTRAINT_SYMBOL);
                this.setState(7574);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 926, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7573);
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fieldDefinition(): FieldDefinitionContext {
        let localctx: FieldDefinitionContext = new FieldDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1070, MySQLParser.RULE_fieldDefinition);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7576);
                this.dataType();
                this.setState(7601);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 932, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7580);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 927, this.getCtx());
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.setState(7577);
                                            this.columnAttribute();
                                        }
                                    }
                                }
                                this.setState(7582);
                                this.getErrorHandler().sync(this);
                                _alt = this.getInterpreter().adaptivePredict(this.input(), 927, this.getCtx());
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(7584);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 69) {
                                {
                                    this.setState(7583);
                                    this.collate();
                                }
                            }

                            this.setState(7588);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 209) {
                                {
                                    this.setState(7586);
                                    this.match(MySQLParser.GENERATED_SYMBOL);
                                    this.setState(7587);
                                    this.match(MySQLParser.ALWAYS_SYMBOL);
                                }
                            }

                            this.setState(7590);
                            this.match(MySQLParser.AS_SYMBOL);
                            this.setState(7591);
                            this.exprWithParentheses();
                            this.setState(7593);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 930, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(7592);
                                        _la = this.input().LA(1);
                                        if (!(_la === 554 || _la === 637)) {
                                            this.getErrorHandler().recoverInline(this);
                                        }
                                        else {
                                            this.getErrorHandler().reportMatch(this);
                                            this.consume();
                                        }
                                    }
                                    break;
                            }
                            this.setState(7598);
                            this.getErrorHandler().sync(this);
                            _alt = this.getInterpreter().adaptivePredict(this.input(), 931, this.getCtx());
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.setState(7595);
                                            this.columnAttribute();
                                        }
                                    }
                                }
                                this.setState(7600);
                                this.getErrorHandler().sync(this);
                                _alt = this.getInterpreter().adaptivePredict(this.input(), 931, this.getCtx());
                            }
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public columnAttribute(): ColumnAttributeContext {
        let localctx: ColumnAttributeContext = new ColumnAttributeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1072, MySQLParser.RULE_columnAttribute);
        let _la: number;
        try {
            this.setState(7671);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 942, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7604);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 371) {
                            {
                                this.setState(7603);
                                this.match(MySQLParser.NOT_SYMBOL);
                            }
                        }

                        this.setState(7606);
                        this.nullLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7607);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(7608);
                        this.match(MySQLParser.NOT_SYMBOL);
                        this.setState(7609);
                        this.match(MySQLParser.SECONDARY_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7610);
                        localctx._value = this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.setState(7621);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 935, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7611);
                                    if (!(this.serverVersion < 80024)) {
                                        throw this.createFailedPredicateException("this.serverVersion < 80024");
                                    }
                                    this.setState(7612);
                                    this.signedLiteral();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(7613);
                                    if (!(this.serverVersion >= 80024)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80024");
                                    }
                                    this.setState(7614);
                                    this.nowOrSignedLiteral();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(7615);
                                    this.match(MySQLParser.NOW_SYMBOL);
                                    this.setState(7617);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 934, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(7616);
                                                this.timeFunctionParameters();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case 4:
                                {
                                    this.setState(7619);
                                    if (!(this.serverVersion >= 80013)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80013");
                                    }
                                    this.setState(7620);
                                    this.exprWithParentheses();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7623);
                        localctx._value = this.match(MySQLParser.ON_SYMBOL);
                        this.setState(7624);
                        this.match(MySQLParser.UPDATE_SYMBOL);
                        this.setState(7625);
                        this.match(MySQLParser.NOW_SYMBOL);
                        this.setState(7627);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 936, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7626);
                                    this.timeFunctionParameters();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(7629);
                        localctx._value = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(7630);
                        localctx._value = this.match(MySQLParser.SERIAL_SYMBOL);
                        this.setState(7631);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                        this.setState(7632);
                        this.match(MySQLParser.VALUE_SYMBOL);
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(7634);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 420) {
                            {
                                this.setState(7633);
                                this.match(MySQLParser.PRIMARY_SYMBOL);
                            }
                        }

                        this.setState(7636);
                        localctx._value = this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(7637);
                        localctx._value = this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.setState(7639);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 938, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7638);
                                    this.match(MySQLParser.KEY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(7641);
                        localctx._value = this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(7642);
                        this.textLiteral();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(7643);
                        this.collate();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(7644);
                        localctx._value = this.match(MySQLParser.COLUMN_FORMAT_SYMBOL);
                        this.setState(7645);
                        this.columnFormat();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(7646);
                        localctx._value = this.match(MySQLParser.STORAGE_SYMBOL);
                        this.setState(7647);
                        this.storageMedia();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(7648);
                        localctx._value = this.match(MySQLParser.SRID_SYMBOL);
                        this.setState(7649);
                        this.real_ulonglong_number();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                        this.setState(7650);
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.setState(7652);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 86) {
                            {
                                this.setState(7651);
                                this.constraintName();
                            }
                        }

                        this.setState(7654);
                        this.checkConstraint();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                        this.setState(7655);
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.setState(7656);
                        this.constraintEnforcement();
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                        this.setState(7657);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(7658);
                        localctx._value = this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                        this.setState(7660);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 940, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7659);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(7662);
                        this.jsonAttribute();
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                        this.setState(7663);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(7664);
                        localctx._value = this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                        this.setState(7666);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 941, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7665);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(7668);
                        this.jsonAttribute();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                        this.setState(7669);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(7670);
                        this.visibility();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public columnFormat(): ColumnFormatContext {
        let localctx: ColumnFormatContext = new ColumnFormatContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1074, MySQLParser.RULE_columnFormat);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7673);
                _la = this.input().LA(1);
                if (!(_la === 128 || _la === 152 || _la === 192)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public storageMedia(): StorageMediaContext {
        let localctx: StorageMediaContext = new StorageMediaContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1076, MySQLParser.RULE_storageMedia);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7675);
                _la = this.input().LA(1);
                if (!(_la === 128 || _la === 142 || _la === 334)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public now(): NowContext {
        let localctx: NowContext = new NowContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1078, MySQLParser.RULE_now);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7677);
                this.match(MySQLParser.NOW_SYMBOL);
                this.setState(7678);
                this.functionDatetimePrecision();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public nowOrSignedLiteral(): NowOrSignedLiteralContext {
        let localctx: NowOrSignedLiteralContext = new NowOrSignedLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1080, MySQLParser.RULE_nowOrSignedLiteral);
        try {
            this.setState(7682);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 943, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7680);
                        this.now();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7681);
                        this.signedLiteralOrNull();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public gcolAttribute(): GcolAttributeContext {
        let localctx: GcolAttributeContext = new GcolAttributeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1082, MySQLParser.RULE_gcolAttribute);
        let _la: number;
        try {
            this.setState(7698);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 609:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7684);
                        this.match(MySQLParser.UNIQUE_SYMBOL);
                        this.setState(7686);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 265) {
                            {
                                this.setState(7685);
                                this.match(MySQLParser.KEY_SYMBOL);
                            }
                        }

                    }
                    break;
                case 75:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7688);
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(7689);
                        this.textString();
                    }
                    break;
                case 371:
                case 376:
                case 745:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7691);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 371 || _la === 745) {
                            {
                                this.setState(7690);
                                this.notRule();
                            }
                        }

                        this.setState(7693);
                        this.match(MySQLParser.NULL_SYMBOL);
                    }
                    break;
                case 265:
                case 420:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7695);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 420) {
                            {
                                this.setState(7694);
                                this.match(MySQLParser.PRIMARY_SYMBOL);
                            }
                        }

                        this.setState(7697);
                        this.match(MySQLParser.KEY_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public references(): ReferencesContext {
        let localctx: ReferencesContext = new ReferencesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1084, MySQLParser.RULE_references);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7700);
                this.match(MySQLParser.REFERENCES_SYMBOL);
                this.setState(7701);
                this.tableRef();
                this.setState(7703);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(7702);
                        this.identifierListWithParentheses();
                    }
                }

                this.setState(7707);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 320) {
                    {
                        this.setState(7705);
                        this.match(MySQLParser.MATCH_SYMBOL);
                        this.setState(7706);
                        localctx._match = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 204 || _la === 402 || _la === 513)) {
                            localctx._match = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                }

                this.setState(7725);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 952, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7709);
                            this.match(MySQLParser.ON_SYMBOL);
                            this.setState(7710);
                            localctx._option = this.match(MySQLParser.UPDATE_SYMBOL);
                            this.setState(7711);
                            this.deleteOption();
                            this.setState(7715);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 383) {
                                {
                                    this.setState(7712);
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.setState(7713);
                                    this.match(MySQLParser.DELETE_SYMBOL);
                                    this.setState(7714);
                                    this.deleteOption();
                                }
                            }

                        }
                        break;
                    case 2:
                        {
                            this.setState(7717);
                            this.match(MySQLParser.ON_SYMBOL);
                            this.setState(7718);
                            localctx._option = this.match(MySQLParser.DELETE_SYMBOL);
                            this.setState(7719);
                            this.deleteOption();
                            this.setState(7723);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 383) {
                                {
                                    this.setState(7720);
                                    this.match(MySQLParser.ON_SYMBOL);
                                    this.setState(7721);
                                    this.match(MySQLParser.UPDATE_SYMBOL);
                                    this.setState(7722);
                                    this.deleteOption();
                                }
                            }

                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public deleteOption(): DeleteOptionContext {
        let localctx: DeleteOptionContext = new DeleteOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1086, MySQLParser.RULE_deleteOption);
        let _la: number;
        try {
            this.setState(7734);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 953, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7727);
                        _la = this.input().LA(1);
                        if (!(_la === 49 || _la === 471)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7728);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(7729);
                        this.nullLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7730);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(7731);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7732);
                        this.match(MySQLParser.NO_SYMBOL);
                        this.setState(7733);
                        this.match(MySQLParser.ACTION_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyList(): KeyListContext {
        let localctx: KeyListContext = new KeyListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1088, MySQLParser.RULE_keyList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7736);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(7737);
                this.keyPart();
                this.setState(7742);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(7738);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(7739);
                            this.keyPart();
                        }
                    }
                    this.setState(7744);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(7745);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyPart(): KeyPartContext {
        let localctx: KeyPartContext = new KeyPartContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1090, MySQLParser.RULE_keyPart);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7747);
                this.identifier();
                this.setState(7749);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(7748);
                        this.fieldLength();
                    }
                }

                this.setState(7752);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 18 || _la === 134) {
                    {
                        this.setState(7751);
                        this.direction();
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyListWithExpression(): KeyListWithExpressionContext {
        let localctx: KeyListWithExpressionContext = new KeyListWithExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1092, MySQLParser.RULE_keyListWithExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7754);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(7755);
                this.keyPartOrExpression();
                this.setState(7760);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(7756);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(7757);
                            this.keyPartOrExpression();
                        }
                    }
                    this.setState(7762);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(7763);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyPartOrExpression(): KeyPartOrExpressionContext {
        let localctx: KeyPartOrExpressionContext = new KeyPartOrExpressionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1094, MySQLParser.RULE_keyPartOrExpression);
        let _la: number;
        try {
            this.setState(7770);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 959, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7765);
                        this.keyPart();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7766);
                        this.exprWithParentheses();
                        this.setState(7768);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 18 || _la === 134) {
                            {
                                this.setState(7767);
                                this.direction();
                            }
                        }

                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public keyListVariants(): KeyListVariantsContext {
        let localctx: KeyListVariantsContext = new KeyListVariantsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1096, MySQLParser.RULE_keyListVariants);
        try {
            this.setState(7776);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 960, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7772);
                        if (!(this.serverVersion >= 80013)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80013");
                        }
                        this.setState(7773);
                        this.keyListWithExpression();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7774);
                        if (!(this.serverVersion < 80013)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80013");
                        }
                        this.setState(7775);
                        this.keyList();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexType(): IndexTypeContext {
        let localctx: IndexTypeContext = new IndexTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1098, MySQLParser.RULE_indexType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7778);
                localctx._algorithm = this.input().LT(1);
                _la = this.input().LA(1);
                if (!(_la === 44 || _la === 220 || _la === 488)) {
                    localctx._algorithm = this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexOption(): IndexOptionContext {
        let localctx: IndexOptionContext = new IndexOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1100, MySQLParser.RULE_indexOption);
        try {
            this.setState(7782);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 961, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7780);
                        this.commonIndexOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7781);
                        this.indexTypeClause();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public commonIndexOption(): CommonIndexOptionContext {
        let localctx: CommonIndexOptionContext = new CommonIndexOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1102, MySQLParser.RULE_commonIndexOption);
        let _la: number;
        try {
            this.setState(7804);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 965, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7784);
                        this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                        this.setState(7786);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(7785);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(7788);
                        this.ulong_number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7789);
                        this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(7790);
                        this.textLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7791);
                        this.visibility();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7792);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(7793);
                        this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                        this.setState(7795);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 963, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7794);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(7797);
                        this.jsonAttribute();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(7798);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(7799);
                        this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                        this.setState(7801);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 964, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7800);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(7803);
                        this.jsonAttribute();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public visibility(): VisibilityContext {
        let localctx: VisibilityContext = new VisibilityContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1104, MySQLParser.RULE_visibility);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7806);
                _la = this.input().LA(1);
                if (!(_la === 661 || _la === 662)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexTypeClause(): IndexTypeClauseContext {
        let localctx: IndexTypeClauseContext = new IndexTypeClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1106, MySQLParser.RULE_indexTypeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7808);
                _la = this.input().LA(1);
                if (!(_la === 599 || _la === 621)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(7809);
                this.indexType();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fulltextIndexOption(): FulltextIndexOptionContext {
        let localctx: FulltextIndexOptionContext = new FulltextIndexOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1108, MySQLParser.RULE_fulltextIndexOption);
        try {
            this.setState(7815);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 966, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7811);
                        this.commonIndexOption();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7812);
                        this.match(MySQLParser.WITH_SYMBOL);
                        this.setState(7813);
                        this.match(MySQLParser.PARSER_SYMBOL);
                        this.setState(7814);
                        this.identifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public spatialIndexOption(): SpatialIndexOptionContext {
        let localctx: SpatialIndexOptionContext = new SpatialIndexOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1110, MySQLParser.RULE_spatialIndexOption);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7817);
                this.commonIndexOption();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dataTypeDefinition(): DataTypeDefinitionContext {
        let localctx: DataTypeDefinitionContext = new DataTypeDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1112, MySQLParser.RULE_dataTypeDefinition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7819);
                this.dataType();
                this.setState(7820);
                this.match(MySQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dataType(): DataTypeContext {
        let localctx: DataTypeContext = new DataTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1114, MySQLParser.RULE_dataType);
        let _la: number;
        try {
            this.setState(7968);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1000, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7822);
                        localctx._type_ = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 31 || _la === 249 || _la === 331 || _la === 516 || _la === 588)) {
                            localctx._type_ = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(7824);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 967, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7823);
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.setState(7827);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 968, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7826);
                                    this.fieldOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7834);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 437:
                                {
                                    this.setState(7829);
                                    localctx._type_ = this.match(MySQLParser.REAL_SYMBOL);
                                }
                                break;
                            case 146:
                                {
                                    this.setState(7830);
                                    localctx._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
                                    this.setState(7832);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 969, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(7831);
                                                this.match(MySQLParser.PRECISION_SYMBOL);
                                            }
                                            break;
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.setState(7837);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 971, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7836);
                                    this.precision();
                                }
                                break;
                        }
                        this.setState(7840);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 972, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7839);
                                    this.fieldOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7842);
                        localctx._type_ = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 126 || _la === 192 || _la === 195 || _la === 378)) {
                            localctx._type_ = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(7844);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 973, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7843);
                                    this.floatOptions();
                                }
                                break;
                        }
                        this.setState(7847);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 974, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7846);
                                    this.fieldOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7849);
                        localctx._type_ = this.match(MySQLParser.BIT_SYMBOL);
                        this.setState(7851);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 975, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7850);
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(7853);
                        localctx._type_ = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 41 || _la === 42)) {
                            localctx._type_ = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(7854);
                        localctx._type_ = this.match(MySQLParser.CHAR_SYMBOL);
                        this.setState(7856);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 976, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7855);
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.setState(7859);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 977, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7858);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(7861);
                        this.nchar();
                        this.setState(7863);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 978, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7862);
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.setState(7866);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 979, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7865);
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(7868);
                        localctx._type_ = this.match(MySQLParser.BINARY_SYMBOL);
                        this.setState(7870);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 980, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7869);
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(7875);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 60:
                                {
                                    this.setState(7872);
                                    localctx._type_ = this.match(MySQLParser.CHAR_SYMBOL);
                                    this.setState(7873);
                                    this.match(MySQLParser.VARYING_SYMBOL);
                                }
                                break;
                            case 629:
                                {
                                    this.setState(7874);
                                    localctx._type_ = this.match(MySQLParser.VARCHAR_SYMBOL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        this.setState(7877);
                        this.fieldLength();
                        this.setState(7879);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 982, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7878);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(7891);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 983, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7881);
                                    localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                                    this.setState(7882);
                                    this.match(MySQLParser.VARCHAR_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(7883);
                                    localctx._type_ = this.match(MySQLParser.NVARCHAR_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.setState(7884);
                                    localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                                    this.setState(7885);
                                    this.match(MySQLParser.VARCHAR_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.setState(7886);
                                    localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                                    this.setState(7887);
                                    this.match(MySQLParser.CHAR_SYMBOL);
                                    this.setState(7888);
                                    this.match(MySQLParser.VARYING_SYMBOL);
                                }
                                break;
                            case 5:
                                {
                                    this.setState(7889);
                                    localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                                    this.setState(7890);
                                    this.match(MySQLParser.VARYING_SYMBOL);
                                }
                                break;
                        }
                        this.setState(7893);
                        this.fieldLength();
                        this.setState(7895);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 984, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7894);
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(7897);
                        localctx._type_ = this.match(MySQLParser.VARBINARY_SYMBOL);
                        this.setState(7898);
                        this.fieldLength();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(7899);
                        localctx._type_ = this.match(MySQLParser.YEAR_SYMBOL);
                        this.setState(7901);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 985, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7900);
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.setState(7904);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 986, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7903);
                                    this.fieldOptions();
                                }
                                break;
                        }
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(7906);
                        localctx._type_ = this.match(MySQLParser.DATE_SYMBOL);
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                        this.setState(7907);
                        localctx._type_ = this.match(MySQLParser.TIME_SYMBOL);
                        this.setState(7909);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 987, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7908);
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                        this.setState(7911);
                        localctx._type_ = this.match(MySQLParser.TIMESTAMP_SYMBOL);
                        this.setState(7913);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 988, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7912);
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                        this.setState(7915);
                        localctx._type_ = this.match(MySQLParser.DATETIME_SYMBOL);
                        this.setState(7917);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 989, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7916);
                                    this.typeDatetimePrecision();
                                }
                                break;
                        }
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                        this.setState(7919);
                        localctx._type_ = this.match(MySQLParser.TINYBLOB_SYMBOL);
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                        this.setState(7920);
                        localctx._type_ = this.match(MySQLParser.BLOB_SYMBOL);
                        this.setState(7922);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 990, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7921);
                                    this.fieldLength();
                                }
                                break;
                        }
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                        this.setState(7924);
                        localctx._type_ = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 290 || _la === 330)) {
                            localctx._type_ = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                        this.setState(7925);
                        localctx._type_ = this.match(MySQLParser.LONG_SYMBOL);
                        this.setState(7926);
                        this.match(MySQLParser.VARBINARY_SYMBOL);
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                        this.setState(7927);
                        localctx._type_ = this.match(MySQLParser.LONG_SYMBOL);
                        this.setState(7931);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 991, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7928);
                                    this.match(MySQLParser.CHAR_SYMBOL);
                                    this.setState(7929);
                                    this.match(MySQLParser.VARYING_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(7930);
                                    this.match(MySQLParser.VARCHAR_SYMBOL);
                                }
                                break;
                        }
                        this.setState(7934);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 992, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7933);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                        this.setState(7936);
                        localctx._type_ = this.match(MySQLParser.TINYTEXT_SYMBOL);
                        this.setState(7938);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 993, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7937);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                        this.setState(7940);
                        localctx._type_ = this.match(MySQLParser.TEXT_SYMBOL);
                        this.setState(7942);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 994, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7941);
                                    this.fieldLength();
                                }
                                break;
                        }
                        this.setState(7945);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 995, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7944);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                        this.setState(7947);
                        localctx._type_ = this.match(MySQLParser.MEDIUMTEXT_SYMBOL);
                        this.setState(7949);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 996, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7948);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                        this.setState(7951);
                        localctx._type_ = this.match(MySQLParser.LONGTEXT_SYMBOL);
                        this.setState(7953);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 997, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7952);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                        this.setState(7955);
                        localctx._type_ = this.match(MySQLParser.ENUM_SYMBOL);
                        this.setState(7956);
                        this.stringList();
                        this.setState(7958);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 998, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7957);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                        this.setState(7960);
                        localctx._type_ = this.match(MySQLParser.SET_SYMBOL);
                        this.setState(7961);
                        this.stringList();
                        this.setState(7963);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 999, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7962);
                                    this.charsetWithOptBinary();
                                }
                                break;
                        }
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                        this.setState(7965);
                        localctx._type_ = this.match(MySQLParser.SERIAL_SYMBOL);
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                        this.setState(7966);
                        localctx._type_ = this.match(MySQLParser.JSON_SYMBOL);
                    }
                    break;
                case 30:
                    this.enterOuterAlt(localctx, 30);
                    {
                        this.setState(7967);
                        localctx._type_ = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 211 || _la === 212 || _la === 279 || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 7) !== 0) || _la === 411 || _la === 412)) {
                            localctx._type_ = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public nchar(): NcharContext {
        let localctx: NcharContext = new NcharContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1116, MySQLParser.RULE_nchar);
        try {
            this.setState(7973);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 361:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7970);
                        localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
                    }
                    break;
                case 358:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7971);
                        localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
                        this.setState(7972);
                        this.match(MySQLParser.CHAR_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public realType(): RealTypeContext {
        let localctx: RealTypeContext = new RealTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1118, MySQLParser.RULE_realType);
        try {
            this.setState(7980);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 437:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7975);
                        localctx._type_ = this.match(MySQLParser.REAL_SYMBOL);
                    }
                    break;
                case 146:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7976);
                        localctx._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
                        this.setState(7978);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1002, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7977);
                                    this.match(MySQLParser.PRECISION_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fieldLength(): FieldLengthContext {
        let localctx: FieldLengthContext = new FieldLengthContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1120, MySQLParser.RULE_fieldLength);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7982);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(7985);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1004, this.getCtx())) {
                    case 1:
                        {
                            this.setState(7983);
                            this.real_ulonglong_number();
                        }
                        break;
                    case 2:
                        {
                            this.setState(7984);
                            this.match(MySQLParser.DECIMAL_NUMBER);
                        }
                        break;
                }
                this.setState(7987);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fieldOptions(): FieldOptionsContext {
        let localctx: FieldOptionsContext = new FieldOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1122, MySQLParser.RULE_fieldOptions);
        let _la: number;
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(7990);
                this.getErrorHandler().sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.setState(7989);
                                    _la = this.input().LA(1);
                                    if (!(_la === 512 || _la === 612 || _la === 657)) {
                                        this.getErrorHandler().recoverInline(this);
                                    }
                                    else {
                                        this.getErrorHandler().reportMatch(this);
                                        this.consume();
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.setState(7992);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1005, this.getCtx());
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public charsetWithOptBinary(): CharsetWithOptBinaryContext {
        let localctx: CharsetWithOptBinaryContext = new CharsetWithOptBinaryContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1124, MySQLParser.RULE_charsetWithOptBinary);
        try {
            this.setState(8008);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1008, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(7994);
                        this.ascii();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(7995);
                        this.unicode();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(7996);
                        this.match(MySQLParser.BYTE_SYMBOL);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(7997);
                        this.charset();
                        this.setState(7998);
                        this.charsetName();
                        this.setState(8000);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1006, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(7999);
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(8002);
                        this.match(MySQLParser.BINARY_SYMBOL);
                        this.setState(8006);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1007, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8003);
                                    this.charset();
                                    this.setState(8004);
                                    this.charsetName();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ascii(): AsciiContext {
        let localctx: AsciiContext = new AsciiContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1126, MySQLParser.RULE_ascii);
        try {
            this.setState(8016);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 19:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8010);
                        this.match(MySQLParser.ASCII_SYMBOL);
                        this.setState(8012);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1009, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8011);
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8014);
                        this.match(MySQLParser.BINARY_SYMBOL);
                        this.setState(8015);
                        this.match(MySQLParser.ASCII_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public unicode(): UnicodeContext {
        let localctx: UnicodeContext = new UnicodeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1128, MySQLParser.RULE_unicode);
        try {
            this.setState(8024);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 606:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8018);
                        this.match(MySQLParser.UNICODE_SYMBOL);
                        this.setState(8020);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1011, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8019);
                                    this.match(MySQLParser.BINARY_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 32:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8022);
                        this.match(MySQLParser.BINARY_SYMBOL);
                        this.setState(8023);
                        this.match(MySQLParser.UNICODE_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public wsNumCodepoints(): WsNumCodepointsContext {
        let localctx: WsNumCodepointsContext = new WsNumCodepointsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1130, MySQLParser.RULE_wsNumCodepoints);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8026);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8027);
                this.real_ulong_number();
                this.setState(8028);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public typeDatetimePrecision(): TypeDatetimePrecisionContext {
        let localctx: TypeDatetimePrecisionContext = new TypeDatetimePrecisionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1132, MySQLParser.RULE_typeDatetimePrecision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8030);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8031);
                this.match(MySQLParser.INT_NUMBER);
                this.setState(8032);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public functionDatetimePrecision(): FunctionDatetimePrecisionContext {
        let localctx: FunctionDatetimePrecisionContext = new FunctionDatetimePrecisionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1134, MySQLParser.RULE_functionDatetimePrecision);
        try {
            this.setState(8039);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1013, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8035);
                        this.parentheses();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8036);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8037);
                        this.match(MySQLParser.INT_NUMBER);
                        this.setState(8038);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public charsetName(): CharsetNameContext {
        let localctx: CharsetNameContext = new CharsetNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1136, MySQLParser.RULE_charsetName);
        try {
            this.setState(8045);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1014, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8041);
                        this.textOrIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8042);
                        this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8043);
                        if (!(this.serverVersion < 80011)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80011");
                        }
                        this.setState(8044);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public collationName(): CollationNameContext {
        let localctx: CollationNameContext = new CollationNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1138, MySQLParser.RULE_collationName);
        try {
            this.setState(8052);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1015, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8047);
                        this.textOrIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8048);
                        if (!(this.serverVersion < 80011)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80011");
                        }
                        this.setState(8049);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8050);
                        if (!(this.serverVersion >= 80018)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80018");
                        }
                        this.setState(8051);
                        this.match(MySQLParser.BINARY_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createTableOptions(): CreateTableOptionsContext {
        let localctx: CreateTableOptionsContext = new CreateTableOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1140, MySQLParser.RULE_createTableOptions);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8054);
                this.createTableOption();
                this.setState(8061);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1017, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(8056);
                                this.getErrorHandler().sync(this);
                                switch (this.getInterpreter().adaptivePredict(this.input(), 1016, this.getCtx())) {
                                    case 1:
                                        {
                                            this.setState(8055);
                                            this.match(MySQLParser.COMMA_SYMBOL);
                                        }
                                        break;
                                }
                                this.setState(8058);
                                this.createTableOption();
                            }
                        }
                    }
                    this.setState(8063);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1017, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createTableOptionsEtc(): CreateTableOptionsEtcContext {
        let localctx: CreateTableOptionsEtcContext = new CreateTableOptionsEtcContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1142, MySQLParser.RULE_createTableOptionsEtc);
        try {
            this.setState(8069);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1019, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8064);
                        this.createTableOptions();
                        this.setState(8066);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1018, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8065);
                                    this.createPartitioningEtc();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8068);
                        this.createPartitioningEtc();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createPartitioningEtc(): CreatePartitioningEtcContext {
        let localctx: CreatePartitioningEtcContext = new CreatePartitioningEtcContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1144, MySQLParser.RULE_createPartitioningEtc);
        try {
            this.setState(8076);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1021, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8071);
                        this.partitionClause();
                        this.setState(8073);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1020, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8072);
                                    this.duplicateAsQe();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8075);
                        this.duplicateAsQe();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createTableOptionsSpaceSeparated(): CreateTableOptionsSpaceSeparatedContext {
        let localctx: CreateTableOptionsSpaceSeparatedContext = new CreateTableOptionsSpaceSeparatedContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1146, MySQLParser.RULE_createTableOptionsSpaceSeparated);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8079);
                this.getErrorHandler().sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.setState(8078);
                                    this.createTableOption();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.setState(8081);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1022, this.getCtx());
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createTableOption(): CreateTableOptionContext {
        let localctx: CreateTableOptionContext = new CreateTableOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1148, MySQLParser.RULE_createTableOption);
        let _la: number;
        try {
            this.setState(8223);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1048, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8083);
                        localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
                        this.setState(8085);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1023, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8084);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8087);
                        this.engineRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8088);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(8089);
                        localctx._option = this.match(MySQLParser.SECONDARY_ENGINE_SYMBOL);
                        this.setState(8091);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1024, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8090);
                                    this.equal();
                                }
                                break;
                        }
                        this.setState(8095);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1025, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8093);
                                    this.match(MySQLParser.NULL_SYMBOL);
                                }
                                break;
                            case 2:
                                {
                                    this.setState(8094);
                                    this.textOrIdentifier();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8097);
                        localctx._option = this.match(MySQLParser.MAX_ROWS_SYMBOL);
                        this.setState(8099);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8098);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8101);
                        this.ulonglong_number();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(8102);
                        localctx._option = this.match(MySQLParser.MIN_ROWS_SYMBOL);
                        this.setState(8104);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8103);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8106);
                        this.ulonglong_number();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(8107);
                        localctx._option = this.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL);
                        this.setState(8109);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8108);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8111);
                        this.ulonglong_number();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(8112);
                        localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
                        this.setState(8114);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1029, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8113);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8116);
                        this.textStringLiteral();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    {
                        this.setState(8117);
                        localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(8119);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1030, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8118);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8121);
                        this.textStringLiteral();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    {
                        this.setState(8122);
                        localctx._option = this.match(MySQLParser.COMPRESSION_SYMBOL);
                        this.setState(8124);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1031, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8123);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8126);
                        this.textString();
                    }
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    {
                        this.setState(8127);
                        localctx._option = this.match(MySQLParser.ENCRYPTION_SYMBOL);
                        this.setState(8129);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1032, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8128);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8131);
                        this.textString();
                    }
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    {
                        this.setState(8132);
                        localctx._option = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
                        this.setState(8134);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8133);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8136);
                        this.ulonglong_number();
                    }
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    {
                        this.setState(8137);
                        localctx._option = this.match(MySQLParser.PACK_KEYS_SYMBOL);
                        this.setState(8139);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8138);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8141);
                        this.ternaryOption();
                    }
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    {
                        this.setState(8142);
                        localctx._option = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(((((_la - 544)) & ~0x1F) === 0 && ((1 << (_la - 544)) & 7) !== 0))) {
                            localctx._option = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(8144);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8143);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8146);
                        this.ternaryOption();
                    }
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    {
                        this.setState(8147);
                        localctx._option = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 61 || _la === 575)) {
                            localctx._option = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(8149);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8148);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8151);
                        this.ulong_number();
                    }
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    {
                        this.setState(8152);
                        localctx._option = this.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL);
                        this.setState(8154);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8153);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8156);
                        this.ulong_number();
                    }
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    {
                        this.setState(8157);
                        localctx._option = this.match(MySQLParser.ROW_FORMAT_SYMBOL);
                        this.setState(8159);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8158);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8161);
                        localctx._format = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 78 || _la === 80 || _la === 128 || _la === 152 || _la === 192 || _la === 442)) {
                            localctx._format = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    {
                        this.setState(8162);
                        localctx._option = this.match(MySQLParser.UNION_SYMBOL);
                        this.setState(8164);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8163);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8166);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8167);
                        this.tableRefList();
                        this.setState(8168);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    {
                        this.setState(8170);
                        this.defaultCharset();
                    }
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    {
                        this.setState(8171);
                        this.defaultCollation();
                    }
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    {
                        this.setState(8172);
                        localctx._option = this.match(MySQLParser.INSERT_METHOD_SYMBOL);
                        this.setState(8174);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8173);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8176);
                        localctx._method = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 191 || _la === 268 || _la === 373)) {
                            localctx._method = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    {
                        this.setState(8177);
                        localctx._option = this.match(MySQLParser.DATA_SYMBOL);
                        this.setState(8178);
                        this.match(MySQLParser.DIRECTORY_SYMBOL);
                        this.setState(8180);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1041, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8179);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8182);
                        this.textString();
                    }
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    {
                        this.setState(8183);
                        localctx._option = this.match(MySQLParser.INDEX_SYMBOL);
                        this.setState(8184);
                        this.match(MySQLParser.DIRECTORY_SYMBOL);
                        this.setState(8186);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1042, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8185);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8188);
                        this.textString();
                    }
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    {
                        this.setState(8189);
                        localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                        this.setState(8191);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1043, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8190);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8193);
                        this.identifier();
                    }
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    {
                        this.setState(8194);
                        localctx._option = this.match(MySQLParser.STORAGE_SYMBOL);
                        this.setState(8195);
                        _la = this.input().LA(1);
                        if (!(_la === 142 || _la === 334)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 24:
                    this.enterOuterAlt(localctx, 24);
                    {
                        this.setState(8196);
                        localctx._option = this.match(MySQLParser.CONNECTION_SYMBOL);
                        this.setState(8198);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1044, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8197);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8200);
                        this.textString();
                    }
                    break;
                case 25:
                    this.enterOuterAlt(localctx, 25);
                    {
                        this.setState(8201);
                        localctx._option = this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
                        this.setState(8203);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8202);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8205);
                        this.ulonglong_number();
                    }
                    break;
                case 26:
                    this.enterOuterAlt(localctx, 26);
                    {
                        this.setState(8206);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(8207);
                        localctx._option = this.match(MySQLParser.START_SYMBOL);
                        this.setState(8208);
                        this.match(MySQLParser.TRANSACTION_SYMBOL);
                    }
                    break;
                case 27:
                    this.enterOuterAlt(localctx, 27);
                    {
                        this.setState(8209);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(8210);
                        localctx._option = this.match(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL);
                        this.setState(8212);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1046, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8211);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8214);
                        this.jsonAttribute();
                    }
                    break;
                case 28:
                    this.enterOuterAlt(localctx, 28);
                    {
                        this.setState(8215);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(8216);
                        localctx._option = this.match(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
                        this.setState(8218);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1047, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8217);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8220);
                        this.jsonAttribute();
                    }
                    break;
                case 29:
                    this.enterOuterAlt(localctx, 29);
                    {
                        this.setState(8221);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(8222);
                        this.tsOptionAutoextendSize();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ternaryOption(): TernaryOptionContext {
        let localctx: TernaryOptionContext = new TernaryOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1150, MySQLParser.RULE_ternaryOption);
        try {
            this.setState(8227);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 747:
                case 748:
                case 749:
                case 788:
                case 790:
                case 791:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8225);
                        this.ulong_number();
                    }
                    break;
                case 128:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8226);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public defaultCollation(): DefaultCollationContext {
        let localctx: DefaultCollationContext = new DefaultCollationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1152, MySQLParser.RULE_defaultCollation);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8230);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 128) {
                    {
                        this.setState(8229);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                }

                this.setState(8232);
                this.match(MySQLParser.COLLATE_SYMBOL);
                this.setState(8234);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1051, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8233);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8236);
                this.collationName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public defaultEncryption(): DefaultEncryptionContext {
        let localctx: DefaultEncryptionContext = new DefaultEncryptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1154, MySQLParser.RULE_defaultEncryption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8239);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 128) {
                    {
                        this.setState(8238);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                }

                this.setState(8241);
                this.match(MySQLParser.ENCRYPTION_SYMBOL);
                this.setState(8243);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1053, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8242);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8245);
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public defaultCharset(): DefaultCharsetContext {
        let localctx: DefaultCharsetContext = new DefaultCharsetContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1156, MySQLParser.RULE_defaultCharset);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8248);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 128) {
                    {
                        this.setState(8247);
                        this.match(MySQLParser.DEFAULT_SYMBOL);
                    }
                }

                this.setState(8250);
                this.charset();
                this.setState(8252);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1055, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8251);
                            this.match(MySQLParser.EQUAL_OPERATOR);
                        }
                        break;
                }
                this.setState(8254);
                this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionClause(): PartitionClauseContext {
        let localctx: PartitionClauseContext = new PartitionClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1158, MySQLParser.RULE_partitionClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8256);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(8257);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8258);
                this.partitionTypeDef();
                this.setState(8261);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1056, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8259);
                            this.match(MySQLParser.PARTITIONS_SYMBOL);
                            this.setState(8260);
                            this.real_ulong_number();
                        }
                        break;
                }
                this.setState(8264);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1057, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8263);
                            this.subPartitions();
                        }
                        break;
                }
                this.setState(8267);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1058, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8266);
                            this.partitionDefinitions();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionTypeDef(): PartitionTypeDefContext {
        let localctx: PartitionTypeDefContext = new PartitionTypeDefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1160, MySQLParser.RULE_partitionTypeDef);
        let _la: number;
        try {
            this.setState(8302);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1065, this.getCtx())) {
                case 1:
                    localctx = new PartitionDefKeyContext(localctx);
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8270);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 277) {
                            {
                                this.setState(8269);
                                this.match(MySQLParser.LINEAR_SYMBOL);
                            }
                        }

                        this.setState(8272);
                        this.match(MySQLParser.KEY_SYMBOL);
                        this.setState(8274);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 9) {
                            {
                                this.setState(8273);
                                this.partitionKeyAlgorithm();
                            }
                        }

                        this.setState(8276);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8278);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1061, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8277);
                                    this.identifierList();
                                }
                                break;
                        }
                        this.setState(8280);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 2:
                    localctx = new PartitionDefHashContext(localctx);
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8282);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 277) {
                            {
                                this.setState(8281);
                                this.match(MySQLParser.LINEAR_SYMBOL);
                            }
                        }

                        this.setState(8284);
                        this.match(MySQLParser.HASH_SYMBOL);
                        this.setState(8285);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8286);
                        this.bitExpr(0);
                        this.setState(8287);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
                case 3:
                    localctx = new PartitionDefRangeListContext(localctx);
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8289);
                        _la = this.input().LA(1);
                        if (!(_la === 280 || _la === 432)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(8300);
                        this.getErrorHandler().sync(this);
                        switch (this.input().LA(1)) {
                            case 776:
                                {
                                    this.setState(8290);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(8291);
                                    this.bitExpr(0);
                                    this.setState(8292);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                            case 71:
                                {
                                    this.setState(8294);
                                    this.match(MySQLParser.COLUMNS_SYMBOL);
                                    this.setState(8295);
                                    this.match(MySQLParser.OPEN_PAR_SYMBOL);
                                    this.setState(8297);
                                    this.getErrorHandler().sync(this);
                                    switch (this.getInterpreter().adaptivePredict(this.input(), 1063, this.getCtx())) {
                                        case 1:
                                            {
                                                this.setState(8296);
                                                this.identifierList();
                                            }
                                            break;
                                    }
                                    this.setState(8299);
                                    this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public subPartitions(): SubPartitionsContext {
        let localctx: SubPartitionsContext = new SubPartitionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1162, MySQLParser.RULE_subPartitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8304);
                this.match(MySQLParser.SUBPARTITION_SYMBOL);
                this.setState(8305);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8307);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 277) {
                    {
                        this.setState(8306);
                        this.match(MySQLParser.LINEAR_SYMBOL);
                    }
                }

                this.setState(8319);
                this.getErrorHandler().sync(this);
                switch (this.input().LA(1)) {
                    case 220:
                        {
                            this.setState(8309);
                            this.match(MySQLParser.HASH_SYMBOL);
                            this.setState(8310);
                            this.match(MySQLParser.OPEN_PAR_SYMBOL);
                            this.setState(8311);
                            this.bitExpr(0);
                            this.setState(8312);
                            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                        }
                        break;
                    case 265:
                        {
                            this.setState(8314);
                            this.match(MySQLParser.KEY_SYMBOL);
                            this.setState(8316);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 9) {
                                {
                                    this.setState(8315);
                                    this.partitionKeyAlgorithm();
                                }
                            }

                            this.setState(8318);
                            this.identifierListWithParentheses();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                this.setState(8323);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1069, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8321);
                            this.match(MySQLParser.SUBPARTITIONS_SYMBOL);
                            this.setState(8322);
                            this.real_ulong_number();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
        let localctx: PartitionKeyAlgorithmContext = new PartitionKeyAlgorithmContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1164, MySQLParser.RULE_partitionKeyAlgorithm);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8325);
                this.match(MySQLParser.ALGORITHM_SYMBOL);
                this.setState(8326);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(8327);
                this.real_ulong_number();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionDefinitions(): PartitionDefinitionsContext {
        let localctx: PartitionDefinitionsContext = new PartitionDefinitionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1166, MySQLParser.RULE_partitionDefinitions);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8329);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8330);
                this.partitionDefinition();
                this.setState(8335);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(8331);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(8332);
                            this.partitionDefinition();
                        }
                    }
                    this.setState(8337);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(8338);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionDefinition(): PartitionDefinitionContext {
        let localctx: PartitionDefinitionContext = new PartitionDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1168, MySQLParser.RULE_partitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8340);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(8341);
                this.identifier();
                this.setState(8352);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1072, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8342);
                            this.match(MySQLParser.VALUES_SYMBOL);
                            this.setState(8343);
                            this.match(MySQLParser.LESS_SYMBOL);
                            this.setState(8344);
                            this.match(MySQLParser.THAN_SYMBOL);
                            this.setState(8347);
                            this.getErrorHandler().sync(this);
                            switch (this.input().LA(1)) {
                                case 776:
                                    {
                                        this.setState(8345);
                                        this.partitionValueItemListParen();
                                    }
                                    break;
                                case 329:
                                    {
                                        this.setState(8346);
                                        this.match(MySQLParser.MAXVALUE_SYMBOL);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(8349);
                            this.match(MySQLParser.VALUES_SYMBOL);
                            this.setState(8350);
                            this.match(MySQLParser.IN_SYMBOL);
                            this.setState(8351);
                            this.partitionValuesIn();
                        }
                        break;
                }
                this.setState(8357);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 75 || _la === 112 || _la === 163 || _la === 236 || _la === 323 || _la === 344 || _la === 368 || _la === 553 || _la === 572) {
                    {
                        {
                            this.setState(8354);
                            this.partitionOption();
                        }
                    }
                    this.setState(8359);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(8371);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 776) {
                    {
                        this.setState(8360);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8361);
                        this.subpartitionDefinition();
                        this.setState(8366);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 773) {
                            {
                                {
                                    this.setState(8362);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(8363);
                                    this.subpartitionDefinition();
                                }
                            }
                            this.setState(8368);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                        this.setState(8369);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionValuesIn(): PartitionValuesInContext {
        let localctx: PartitionValuesInContext = new PartitionValuesInContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1170, MySQLParser.RULE_partitionValuesIn);
        let _la: number;
        try {
            this.setState(8385);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1077, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8373);
                        this.partitionValueItemListParen();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8374);
                        this.match(MySQLParser.OPEN_PAR_SYMBOL);
                        this.setState(8375);
                        this.partitionValueItemListParen();
                        this.setState(8380);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        while (_la === 773) {
                            {
                                {
                                    this.setState(8376);
                                    this.match(MySQLParser.COMMA_SYMBOL);
                                    this.setState(8377);
                                    this.partitionValueItemListParen();
                                }
                            }
                            this.setState(8382);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                        }
                        this.setState(8383);
                        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionOption(): PartitionOptionContext {
        let localctx: PartitionOptionContext = new PartitionOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1172, MySQLParser.RULE_partitionOption);
        let _la: number;
        try {
            this.setState(8421);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 572:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8387);
                        localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
                        this.setState(8389);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1078, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8388);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8391);
                        this.identifier();
                    }
                    break;
                case 163:
                case 553:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8393);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 553) {
                            {
                                this.setState(8392);
                                this.match(MySQLParser.STORAGE_SYMBOL);
                            }
                        }

                        this.setState(8395);
                        localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
                        this.setState(8397);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1080, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8396);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8399);
                        this.engineRef();
                    }
                    break;
                case 368:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8400);
                        localctx._option = this.match(MySQLParser.NODEGROUP_SYMBOL);
                        this.setState(8402);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8401);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8404);
                        this.real_ulong_number();
                    }
                    break;
                case 323:
                case 344:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(8405);
                        localctx._option = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 323 || _la === 344)) {
                            localctx._option = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(8407);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 750) {
                            {
                                this.setState(8406);
                                this.match(MySQLParser.EQUAL_OPERATOR);
                            }
                        }

                        this.setState(8409);
                        this.real_ulong_number();
                    }
                    break;
                case 112:
                case 236:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(8410);
                        localctx._option = this.input().LT(1);
                        _la = this.input().LA(1);
                        if (!(_la === 112 || _la === 236)) {
                            localctx._option = this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                        this.setState(8411);
                        this.match(MySQLParser.DIRECTORY_SYMBOL);
                        this.setState(8413);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1083, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8412);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8415);
                        this.textLiteral();
                    }
                    break;
                case 75:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(8416);
                        localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
                        this.setState(8418);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1084, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8417);
                                    this.match(MySQLParser.EQUAL_OPERATOR);
                                }
                                break;
                        }
                        this.setState(8420);
                        this.textLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public subpartitionDefinition(): SubpartitionDefinitionContext {
        let localctx: SubpartitionDefinitionContext = new SubpartitionDefinitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1174, MySQLParser.RULE_subpartitionDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8423);
                this.match(MySQLParser.SUBPARTITION_SYMBOL);
                this.setState(8424);
                this.textOrIdentifier();
                this.setState(8428);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 75 || _la === 112 || _la === 163 || _la === 236 || _la === 323 || _la === 344 || _la === 368 || _la === 553 || _la === 572) {
                    {
                        {
                            this.setState(8425);
                            this.partitionOption();
                        }
                    }
                    this.setState(8430);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionValueItemListParen(): PartitionValueItemListParenContext {
        let localctx: PartitionValueItemListParenContext = new PartitionValueItemListParenContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1176, MySQLParser.RULE_partitionValueItemListParen);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8431);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8432);
                this.partitionValueItem();
                this.setState(8437);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(8433);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(8434);
                            this.partitionValueItem();
                        }
                    }
                    this.setState(8439);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(8440);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public partitionValueItem(): PartitionValueItemContext {
        let localctx: PartitionValueItemContext = new PartitionValueItemContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1178, MySQLParser.RULE_partitionValueItem);
        try {
            this.setState(8444);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1088, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8442);
                        this.bitExpr(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8443);
                        this.match(MySQLParser.MAXVALUE_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public definerClause(): DefinerClauseContext {
        let localctx: DefinerClauseContext = new DefinerClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1180, MySQLParser.RULE_definerClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8446);
                this.match(MySQLParser.DEFINER_SYMBOL);
                this.setState(8447);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(8448);
                this.user();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ifExists(): IfExistsContext {
        let localctx: IfExistsContext = new IfExistsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1182, MySQLParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8450);
                this.match(MySQLParser.IF_SYMBOL);
                this.setState(8451);
                this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ifNotExists(): IfNotExistsContext {
        let localctx: IfNotExistsContext = new IfNotExistsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1184, MySQLParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8453);
                this.match(MySQLParser.IF_SYMBOL);
                this.setState(8454);
                this.notRule();
                this.setState(8455);
                this.match(MySQLParser.EXISTS_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ignoreUnknownUser(): IgnoreUnknownUserContext {
        let localctx: IgnoreUnknownUserContext = new IgnoreUnknownUserContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1186, MySQLParser.RULE_ignoreUnknownUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8457);
                this.match(MySQLParser.IGNORE_SYMBOL);
                this.setState(8458);
                this.match(MySQLParser.UNKNOWN_SYMBOL);
                this.setState(8459);
                this.match(MySQLParser.USER_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public procedureParameter(): ProcedureParameterContext {
        let localctx: ProcedureParameterContext = new ProcedureParameterContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1188, MySQLParser.RULE_procedureParameter);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8462);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1089, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8461);
                            localctx._type_ = this.input().LT(1);
                            _la = this.input().LA(1);
                            if (!(_la === 240 || _la === 251 || _la === 397)) {
                                localctx._type_ = this.getErrorHandler().recoverInline(this);
                            }
                            else {
                                this.getErrorHandler().reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.setState(8464);
                this.functionParameter();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public functionParameter(): FunctionParameterContext {
        let localctx: FunctionParameterContext = new FunctionParameterContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1190, MySQLParser.RULE_functionParameter);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8466);
                this.parameterName();
                this.setState(8467);
                this.typeWithOptCollate();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public collate(): CollateContext {
        let localctx: CollateContext = new CollateContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1192, MySQLParser.RULE_collate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8469);
                this.match(MySQLParser.COLLATE_SYMBOL);
                this.setState(8470);
                this.collationName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public typeWithOptCollate(): TypeWithOptCollateContext {
        let localctx: TypeWithOptCollateContext = new TypeWithOptCollateContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1194, MySQLParser.RULE_typeWithOptCollate);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8472);
                this.dataType();
                this.setState(8474);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1090, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8473);
                            this.collate();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public schemaIdentifierPair(): SchemaIdentifierPairContext {
        let localctx: SchemaIdentifierPairContext = new SchemaIdentifierPairContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1196, MySQLParser.RULE_schemaIdentifierPair);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8476);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8477);
                this.schemaRef();
                this.setState(8478);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8479);
                this.schemaRef();
                this.setState(8480);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewRefList(): ViewRefListContext {
        let localctx: ViewRefListContext = new ViewRefListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1198, MySQLParser.RULE_viewRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8482);
                this.viewRef();
                this.setState(8487);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(8483);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(8484);
                            this.viewRef();
                        }
                    }
                    this.setState(8489);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public updateList(): UpdateListContext {
        let localctx: UpdateListContext = new UpdateListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1200, MySQLParser.RULE_updateList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8490);
                this.updateElement();
                this.setState(8495);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1092, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(8491);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(8492);
                                this.updateElement();
                            }
                        }
                    }
                    this.setState(8497);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1092, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public updateElement(): UpdateElementContext {
        let localctx: UpdateElementContext = new UpdateElementContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1202, MySQLParser.RULE_updateElement);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8498);
                this.columnRef();
                this.setState(8499);
                this.match(MySQLParser.EQUAL_OPERATOR);
                this.setState(8502);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1093, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8500);
                            this.expr(0);
                        }
                        break;
                    case 2:
                        {
                            this.setState(8501);
                            this.match(MySQLParser.DEFAULT_SYMBOL);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public charsetClause(): CharsetClauseContext {
        let localctx: CharsetClauseContext = new CharsetClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1204, MySQLParser.RULE_charsetClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8504);
                this.charset();
                this.setState(8505);
                this.charsetName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fieldsClause(): FieldsClauseContext {
        let localctx: FieldsClauseContext = new FieldsClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1206, MySQLParser.RULE_fieldsClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8507);
                this.match(MySQLParser.COLUMNS_SYMBOL);
                this.setState(8509);
                this.getErrorHandler().sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.setState(8508);
                                    this.fieldTerm();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.setState(8511);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1094, this.getCtx());
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fieldTerm(): FieldTermContext {
        let localctx: FieldTermContext = new FieldTermContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1208, MySQLParser.RULE_fieldTerm);
        let _la: number;
        try {
            this.setState(8525);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 579:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8513);
                        this.match(MySQLParser.TERMINATED_SYMBOL);
                        this.setState(8514);
                        this.match(MySQLParser.BY_SYMBOL);
                        this.setState(8515);
                        this.textString();
                    }
                    break;
                case 157:
                case 392:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8517);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 392) {
                            {
                                this.setState(8516);
                                this.match(MySQLParser.OPTIONALLY_SYMBOL);
                            }
                        }

                        this.setState(8519);
                        this.match(MySQLParser.ENCLOSED_SYMBOL);
                        this.setState(8520);
                        this.match(MySQLParser.BY_SYMBOL);
                        this.setState(8521);
                        this.textString();
                    }
                    break;
                case 167:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8522);
                        this.match(MySQLParser.ESCAPED_SYMBOL);
                        this.setState(8523);
                        this.match(MySQLParser.BY_SYMBOL);
                        this.setState(8524);
                        this.textString();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public linesClause(): LinesClauseContext {
        let localctx: LinesClauseContext = new LinesClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1210, MySQLParser.RULE_linesClause);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8527);
                this.match(MySQLParser.LINES_SYMBOL);
                this.setState(8529);
                this.getErrorHandler().sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.setState(8528);
                                    this.lineTerm();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    this.setState(8531);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1097, this.getCtx());
                } while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lineTerm(): LineTermContext {
        let localctx: LineTermContext = new LineTermContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1212, MySQLParser.RULE_lineTerm);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8533);
                _la = this.input().LA(1);
                if (!(_la === 541 || _la === 579)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(8534);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8535);
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public userList(): UserListContext {
        let localctx: UserListContext = new UserListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1214, MySQLParser.RULE_userList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8537);
                this.user();
                this.setState(8542);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1098, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(8538);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(8539);
                                this.user();
                            }
                        }
                    }
                    this.setState(8544);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1098, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createUserList(): CreateUserListContext {
        let localctx: CreateUserListContext = new CreateUserListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1216, MySQLParser.RULE_createUserList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8545);
                this.createUser();
                this.setState(8550);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1099, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(8546);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(8547);
                                this.createUser();
                            }
                        }
                    }
                    this.setState(8552);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1099, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createUser(): CreateUserContext {
        let localctx: CreateUserContext = new CreateUserContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1218, MySQLParser.RULE_createUser);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8553);
                this.user();
                this.setState(8563);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1102, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8554);
                            this.identification();
                            this.setState(8556);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 1100, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(8555);
                                        this.createUserWithMfa();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            this.setState(8558);
                            this.identifiedWithPlugin();
                            this.setState(8560);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 1101, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(8559);
                                        this.initialAuth();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 3:
                        {
                            this.setState(8562);
                            this.createUserWithMfa();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public createUserWithMfa(): CreateUserWithMfaContext {
        let localctx: CreateUserWithMfaContext = new CreateUserWithMfaContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1220, MySQLParser.RULE_createUserWithMfa);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8565);
                this.match(MySQLParser.AND_SYMBOL);
                this.setState(8566);
                this.identification();
                this.setState(8569);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1103, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8567);
                            this.match(MySQLParser.AND_SYMBOL);
                            this.setState(8568);
                            this.identification();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identification(): IdentificationContext {
        let localctx: IdentificationContext = new IdentificationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1222, MySQLParser.RULE_identification);
        try {
            this.setState(8577);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1104, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8571);
                        this.identifiedByPassword();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8572);
                        this.identifiedByRandomPassword();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8573);
                        this.identifiedWithPlugin();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(8574);
                        this.identifiedWithPluginAsAuth();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(8575);
                        this.identifiedWithPluginByPassword();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(8576);
                        this.identifiedWithPluginByRandomPassword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifiedByPassword(): IdentifiedByPasswordContext {
        let localctx: IdentifiedByPasswordContext = new IdentifiedByPasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1224, MySQLParser.RULE_identifiedByPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8579);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(8580);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8581);
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext {
        let localctx: IdentifiedByRandomPasswordContext = new IdentifiedByRandomPasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1226, MySQLParser.RULE_identifiedByRandomPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8583);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(8584);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8585);
                this.match(MySQLParser.RANDOM_SYMBOL);
                this.setState(8586);
                this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifiedWithPlugin(): IdentifiedWithPluginContext {
        let localctx: IdentifiedWithPluginContext = new IdentifiedWithPluginContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1228, MySQLParser.RULE_identifiedWithPlugin);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8588);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(8589);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(8590);
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext {
        let localctx: IdentifiedWithPluginAsAuthContext = new IdentifiedWithPluginAsAuthContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1230, MySQLParser.RULE_identifiedWithPluginAsAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8592);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(8593);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(8594);
                this.textOrIdentifier();
                this.setState(8595);
                this.match(MySQLParser.AS_SYMBOL);
                this.setState(8596);
                this.textStringHash();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext {
        let localctx: IdentifiedWithPluginByPasswordContext = new IdentifiedWithPluginByPasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1232, MySQLParser.RULE_identifiedWithPluginByPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8598);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(8599);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(8600);
                this.textOrIdentifier();
                this.setState(8601);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8602);
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext {
        let localctx: IdentifiedWithPluginByRandomPasswordContext = new IdentifiedWithPluginByRandomPasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1234, MySQLParser.RULE_identifiedWithPluginByRandomPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8604);
                this.match(MySQLParser.IDENTIFIED_SYMBOL);
                this.setState(8605);
                this.match(MySQLParser.WITH_SYMBOL);
                this.setState(8606);
                this.textOrIdentifier();
                this.setState(8607);
                this.match(MySQLParser.BY_SYMBOL);
                this.setState(8608);
                this.match(MySQLParser.RANDOM_SYMBOL);
                this.setState(8609);
                this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public initialAuth(): InitialAuthContext {
        let localctx: InitialAuthContext = new InitialAuthContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1236, MySQLParser.RULE_initialAuth);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8611);
                this.match(MySQLParser.INITIAL_SYMBOL);
                this.setState(8612);
                this.match(MySQLParser.AUTHENTICATION_SYMBOL);
                this.setState(8616);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1105, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8613);
                            this.identifiedByRandomPassword();
                        }
                        break;
                    case 2:
                        {
                            this.setState(8614);
                            this.identifiedWithPluginAsAuth();
                        }
                        break;
                    case 3:
                        {
                            this.setState(8615);
                            this.identifiedByPassword();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public retainCurrentPassword(): RetainCurrentPasswordContext {
        let localctx: RetainCurrentPasswordContext = new RetainCurrentPasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1238, MySQLParser.RULE_retainCurrentPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8618);
                this.match(MySQLParser.RETAIN_SYMBOL);
                this.setState(8619);
                this.match(MySQLParser.CURRENT_SYMBOL);
                this.setState(8620);
                this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public discardOldPassword(): DiscardOldPasswordContext {
        let localctx: DiscardOldPasswordContext = new DiscardOldPasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1240, MySQLParser.RULE_discardOldPassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8622);
                this.match(MySQLParser.DISCARD_SYMBOL);
                this.setState(8623);
                this.match(MySQLParser.OLD_SYMBOL);
                this.setState(8624);
                this.match(MySQLParser.PASSWORD_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public userRegistration(): UserRegistrationContext {
        let localctx: UserRegistrationContext = new UserRegistrationContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1242, MySQLParser.RULE_userRegistration);
        try {
            this.setState(8641);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1106, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8626);
                        this.factor();
                        this.setState(8627);
                        this.match(MySQLParser.INITIATE_SYMBOL);
                        this.setState(8628);
                        this.match(MySQLParser.REGISTRATION_SYMBOL);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8630);
                        this.factor();
                        this.setState(8631);
                        this.match(MySQLParser.UNREGISTER_SYMBOL);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8633);
                        this.factor();
                        this.setState(8634);
                        this.match(MySQLParser.FINISH_SYMBOL);
                        this.setState(8635);
                        this.match(MySQLParser.REGISTRATION_SYMBOL);
                        this.setState(8636);
                        this.match(MySQLParser.SET_SYMBOL);
                        this.setState(8637);
                        this.match(MySQLParser.CHALLENGE_RESPONSE_SYMBOL);
                        this.setState(8638);
                        this.match(MySQLParser.AS_SYMBOL);
                        this.setState(8639);
                        this.textStringHash();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public factor(): FactorContext {
        let localctx: FactorContext = new FactorContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1244, MySQLParser.RULE_factor);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8643);
                this.numLiteral();
                this.setState(8644);
                this.match(MySQLParser.FACTOR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public replacePassword(): ReplacePasswordContext {
        let localctx: ReplacePasswordContext = new ReplacePasswordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1246, MySQLParser.RULE_replacePassword);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8646);
                this.match(MySQLParser.REPLACE_SYMBOL);
                this.setState(8647);
                this.textString();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public userIdentifierOrText(): UserIdentifierOrTextContext {
        let localctx: UserIdentifierOrTextContext = new UserIdentifierOrTextContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1248, MySQLParser.RULE_userIdentifierOrText);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8649);
                this.textOrIdentifier();
                this.setState(8651);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1107, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8650);
                            this.userVariable();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public user(): UserContext {
        let localctx: UserContext = new UserContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1250, MySQLParser.RULE_user);
        try {
            this.setState(8658);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1109, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8653);
                        this.userIdentifierOrText();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8654);
                        this.match(MySQLParser.CURRENT_USER_SYMBOL);
                        this.setState(8656);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1108, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8655);
                                    this.parentheses();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public likeClause(): LikeClauseContext {
        let localctx: LikeClauseContext = new LikeClauseContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1252, MySQLParser.RULE_likeClause);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8660);
                this.match(MySQLParser.LIKE_SYMBOL);
                this.setState(8661);
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public likeOrWhere(): LikeOrWhereContext {
        let localctx: LikeOrWhereContext = new LikeOrWhereContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1254, MySQLParser.RULE_likeOrWhere);
        try {
            this.setState(8665);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 275:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8663);
                        this.likeClause();
                    }
                    break;
                case 643:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8664);
                        this.whereClause();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public onlineOption(): OnlineOptionContext {
        let localctx: OnlineOptionContext = new OnlineOptionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1256, MySQLParser.RULE_onlineOption);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8667);
                _la = this.input().LA(1);
                if (!(_la === 380 || _la === 385)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public noWriteToBinLog(): NoWriteToBinLogContext {
        let localctx: NoWriteToBinLogContext = new NoWriteToBinLogContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1258, MySQLParser.RULE_noWriteToBinLog);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8669);
                _la = this.input().LA(1);
                if (!(_la === 284 || _la === 375)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public usePartition(): UsePartitionContext {
        let localctx: UsePartitionContext = new UsePartitionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1260, MySQLParser.RULE_usePartition);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8671);
                this.match(MySQLParser.PARTITION_SYMBOL);
                this.setState(8672);
                this.identifierListWithParentheses();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public fieldIdentifier(): FieldIdentifierContext {
        let localctx: FieldIdentifierContext = new FieldIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1262, MySQLParser.RULE_fieldIdentifier);
        try {
            this.setState(8679);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1112, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8674);
                        this.dotIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8675);
                        this.qualifiedIdentifier();
                        this.setState(8677);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1111, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(8676);
                                    this.dotIdentifier();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public columnName(): ColumnNameContext {
        let localctx: ColumnNameContext = new ColumnNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1264, MySQLParser.RULE_columnName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8681);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public columnInternalRef(): ColumnInternalRefContext {
        let localctx: ColumnInternalRefContext = new ColumnInternalRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1266, MySQLParser.RULE_columnInternalRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8683);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public columnInternalRefList(): ColumnInternalRefListContext {
        let localctx: ColumnInternalRefListContext = new ColumnInternalRefListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1268, MySQLParser.RULE_columnInternalRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8685);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8686);
                this.columnInternalRef();
                this.setState(8691);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(8687);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(8688);
                            this.columnInternalRef();
                        }
                    }
                    this.setState(8693);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(8694);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public columnRef(): ColumnRefContext {
        let localctx: ColumnRefContext = new ColumnRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1270, MySQLParser.RULE_columnRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8696);
                this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public insertIdentifier(): InsertIdentifierContext {
        let localctx: InsertIdentifierContext = new InsertIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1272, MySQLParser.RULE_insertIdentifier);
        try {
            this.setState(8700);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1114, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8698);
                        this.columnRef();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8699);
                        this.tableWild();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexName(): IndexNameContext {
        let localctx: IndexNameContext = new IndexNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1274, MySQLParser.RULE_indexName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8702);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public indexRef(): IndexRefContext {
        let localctx: IndexRefContext = new IndexRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1276, MySQLParser.RULE_indexRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8704);
                this.fieldIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableWild(): TableWildContext {
        let localctx: TableWildContext = new TableWildContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1278, MySQLParser.RULE_tableWild);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8706);
                this.identifier();
                this.setState(8707);
                this.match(MySQLParser.DOT_SYMBOL);
                this.setState(8711);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1115, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8708);
                            this.identifier();
                            this.setState(8709);
                            this.match(MySQLParser.DOT_SYMBOL);
                        }
                        break;
                }
                this.setState(8713);
                this.match(MySQLParser.MULT_OPERATOR);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public schemaName(): SchemaNameContext {
        let localctx: SchemaNameContext = new SchemaNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1280, MySQLParser.RULE_schemaName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8715);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public schemaRef(): SchemaRefContext {
        let localctx: SchemaRefContext = new SchemaRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1282, MySQLParser.RULE_schemaRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8717);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public procedureName(): ProcedureNameContext {
        let localctx: ProcedureNameContext = new ProcedureNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1284, MySQLParser.RULE_procedureName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8719);
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public procedureRef(): ProcedureRefContext {
        let localctx: ProcedureRefContext = new ProcedureRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1286, MySQLParser.RULE_procedureRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8721);
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public functionName(): FunctionNameContext {
        let localctx: FunctionNameContext = new FunctionNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1288, MySQLParser.RULE_functionName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8723);
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public functionRef(): FunctionRefContext {
        let localctx: FunctionRefContext = new FunctionRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1290, MySQLParser.RULE_functionRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8725);
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public triggerName(): TriggerNameContext {
        let localctx: TriggerNameContext = new TriggerNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1292, MySQLParser.RULE_triggerName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8727);
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public triggerRef(): TriggerRefContext {
        let localctx: TriggerRefContext = new TriggerRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1294, MySQLParser.RULE_triggerRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8729);
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewName(): ViewNameContext {
        let localctx: ViewNameContext = new ViewNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1296, MySQLParser.RULE_viewName);
        try {
            this.setState(8733);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1116, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8731);
                        this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8732);
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public viewRef(): ViewRefContext {
        let localctx: ViewRefContext = new ViewRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1298, MySQLParser.RULE_viewRef);
        try {
            this.setState(8737);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1117, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8735);
                        this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8736);
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tablespaceName(): TablespaceNameContext {
        let localctx: TablespaceNameContext = new TablespaceNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1300, MySQLParser.RULE_tablespaceName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8739);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tablespaceRef(): TablespaceRefContext {
        let localctx: TablespaceRefContext = new TablespaceRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1302, MySQLParser.RULE_tablespaceRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8741);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public logfileGroupName(): LogfileGroupNameContext {
        let localctx: LogfileGroupNameContext = new LogfileGroupNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1304, MySQLParser.RULE_logfileGroupName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8743);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public logfileGroupRef(): LogfileGroupRefContext {
        let localctx: LogfileGroupRefContext = new LogfileGroupRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1306, MySQLParser.RULE_logfileGroupRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8745);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public eventName(): EventNameContext {
        let localctx: EventNameContext = new EventNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1308, MySQLParser.RULE_eventName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8747);
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public eventRef(): EventRefContext {
        let localctx: EventRefContext = new EventRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1310, MySQLParser.RULE_eventRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8749);
                this.qualifiedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public udfName(): UdfNameContext {
        let localctx: UdfNameContext = new UdfNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1312, MySQLParser.RULE_udfName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8751);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public serverName(): ServerNameContext {
        let localctx: ServerNameContext = new ServerNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1314, MySQLParser.RULE_serverName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8753);
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public serverRef(): ServerRefContext {
        let localctx: ServerRefContext = new ServerRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1316, MySQLParser.RULE_serverRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8755);
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public engineRef(): EngineRefContext {
        let localctx: EngineRefContext = new EngineRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1318, MySQLParser.RULE_engineRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8757);
                this.textOrIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableName(): TableNameContext {
        let localctx: TableNameContext = new TableNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1320, MySQLParser.RULE_tableName);
        try {
            this.setState(8761);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1118, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8759);
                        this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8760);
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public filterTableRef(): FilterTableRefContext {
        let localctx: FilterTableRefContext = new FilterTableRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1322, MySQLParser.RULE_filterTableRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8763);
                this.schemaRef();
                this.setState(8764);
                this.dotIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableRefWithWildcard(): TableRefWithWildcardContext {
        let localctx: TableRefWithWildcardContext = new TableRefWithWildcardContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1324, MySQLParser.RULE_tableRefWithWildcard);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8766);
                this.identifier();
                this.setState(8774);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1120, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8767);
                            this.match(MySQLParser.DOT_SYMBOL);
                            this.setState(8768);
                            this.match(MySQLParser.MULT_OPERATOR);
                        }
                        break;
                    case 2:
                        {
                            this.setState(8769);
                            this.dotIdentifier();
                            this.setState(8772);
                            this.getErrorHandler().sync(this);
                            _la = this.input().LA(1);
                            if (_la === 772) {
                                {
                                    this.setState(8770);
                                    this.match(MySQLParser.DOT_SYMBOL);
                                    this.setState(8771);
                                    this.match(MySQLParser.MULT_OPERATOR);
                                }
                            }

                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableRef(): TableRefContext {
        let localctx: TableRefContext = new TableRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1326, MySQLParser.RULE_tableRef);
        try {
            this.setState(8778);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1121, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8776);
                        this.qualifiedIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8777);
                        this.dotIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableRefList(): TableRefListContext {
        let localctx: TableRefListContext = new TableRefListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1328, MySQLParser.RULE_tableRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8780);
                this.tableRef();
                this.setState(8785);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(8781);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(8782);
                            this.tableRef();
                        }
                    }
                    this.setState(8787);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public tableAliasRefList(): TableAliasRefListContext {
        let localctx: TableAliasRefListContext = new TableAliasRefListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1330, MySQLParser.RULE_tableAliasRefList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8788);
                this.tableRefWithWildcard();
                this.setState(8793);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(8789);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(8790);
                            this.tableRefWithWildcard();
                        }
                    }
                    this.setState(8795);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public parameterName(): ParameterNameContext {
        let localctx: ParameterNameContext = new ParameterNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1332, MySQLParser.RULE_parameterName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8796);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public labelIdentifier(): LabelIdentifierContext {
        let localctx: LabelIdentifierContext = new LabelIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1334, MySQLParser.RULE_labelIdentifier);
        try {
            this.setState(8800);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1124, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8798);
                        this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8799);
                        this.labelKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public labelRef(): LabelRefContext {
        let localctx: LabelRefContext = new LabelRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1336, MySQLParser.RULE_labelRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8802);
                this.labelIdentifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public roleIdentifier(): RoleIdentifierContext {
        let localctx: RoleIdentifierContext = new RoleIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1338, MySQLParser.RULE_roleIdentifier);
        try {
            this.setState(8806);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1125, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8804);
                        this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8805);
                        this.roleKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public pluginRef(): PluginRefContext {
        let localctx: PluginRefContext = new PluginRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1340, MySQLParser.RULE_pluginRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8808);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public componentRef(): ComponentRefContext {
        let localctx: ComponentRefContext = new ComponentRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1342, MySQLParser.RULE_componentRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8810);
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public resourceGroupRef(): ResourceGroupRefContext {
        let localctx: ResourceGroupRefContext = new ResourceGroupRefContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1344, MySQLParser.RULE_resourceGroupRef);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8812);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public windowName(): WindowNameContext {
        let localctx: WindowNameContext = new WindowNameContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1346, MySQLParser.RULE_windowName);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8814);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public pureIdentifier(): PureIdentifierContext {
        let localctx: PureIdentifierContext = new PureIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1348, MySQLParser.RULE_pureIdentifier);
        let _la: number;
        try {
            this.setState(8819);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1126, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8816);
                        _la = this.input().LA(1);
                        if (!(_la === 848 || _la === 850)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8817);
                        if (!(this.isSqlModeActive(SqlMode.AnsiQuotes))) {
                            throw this.createFailedPredicateException("this.isSqlModeActive(SqlMode.AnsiQuotes)");
                        }
                        this.setState(8818);
                        this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifier(): IdentifierContext {
        let localctx: IdentifierContext = new IdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1350, MySQLParser.RULE_identifier);
        try {
            this.setState(8823);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1127, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8821);
                        this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8822);
                        this.identifierKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifierList(): IdentifierListContext {
        let localctx: IdentifierListContext = new IdentifierListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1352, MySQLParser.RULE_identifierList);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8825);
                this.identifier();
                this.setState(8830);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1128, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(8826);
                                this.match(MySQLParser.COMMA_SYMBOL);
                                this.setState(8827);
                                this.identifier();
                            }
                        }
                    }
                    this.setState(8832);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1128, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        let localctx: IdentifierListWithParenthesesContext = new IdentifierListWithParenthesesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1354, MySQLParser.RULE_identifierListWithParentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8833);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8834);
                this.identifierList();
                this.setState(8835);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        let localctx: QualifiedIdentifierContext = new QualifiedIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1356, MySQLParser.RULE_qualifiedIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8837);
                this.identifier();
                this.setState(8839);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1129, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8838);
                            this.dotIdentifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public simpleIdentifier(): SimpleIdentifierContext {
        let localctx: SimpleIdentifierContext = new SimpleIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1358, MySQLParser.RULE_simpleIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8841);
                this.identifier();
                this.setState(8846);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                if (_la === 772) {
                    {
                        this.setState(8842);
                        this.dotIdentifier();
                        this.setState(8844);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 772) {
                            {
                                this.setState(8843);
                                this.dotIdentifier();
                            }
                        }

                    }
                }

            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public dotIdentifier(): DotIdentifierContext {
        let localctx: DotIdentifierContext = new DotIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1360, MySQLParser.RULE_dotIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8848);
                this.match(MySQLParser.DOT_SYMBOL);
                this.setState(8849);
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ulong_number(): Ulong_numberContext {
        let localctx: Ulong_numberContext = new Ulong_numberContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1362, MySQLParser.RULE_ulong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8851);
                _la = this.input().LA(1);
                if (!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || ((((_la - 788)) & ~0x1F) === 0 && ((1 << (_la - 788)) & 13) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public real_ulong_number(): Real_ulong_numberContext {
        let localctx: Real_ulong_numberContext = new Real_ulong_numberContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1364, MySQLParser.RULE_real_ulong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8853);
                _la = this.input().LA(1);
                if (!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 788)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public ulonglong_number(): Ulonglong_numberContext {
        let localctx: Ulonglong_numberContext = new Ulonglong_numberContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1366, MySQLParser.RULE_ulonglong_number);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8855);
                _la = this.input().LA(1);
                if (!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la === 790 || _la === 791)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        let localctx: Real_ulonglong_numberContext = new Real_ulonglong_numberContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1368, MySQLParser.RULE_real_ulonglong_number);
        try {
            this.setState(8862);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1132, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8857);
                        this.match(MySQLParser.INT_NUMBER);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8858);
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.setState(8859);
                        this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8860);
                        this.match(MySQLParser.ULONGLONG_NUMBER);
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(8861);
                        this.match(MySQLParser.LONG_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public signedLiteral(): SignedLiteralContext {
        let localctx: SignedLiteralContext = new SignedLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1370, MySQLParser.RULE_signedLiteral);
        try {
            this.setState(8869);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1133, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8864);
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8865);
                        this.match(MySQLParser.PLUS_OPERATOR);
                        this.setState(8866);
                        this.ulong_number();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8867);
                        this.match(MySQLParser.MINUS_OPERATOR);
                        this.setState(8868);
                        this.ulong_number();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public signedLiteralOrNull(): SignedLiteralOrNullContext {
        let localctx: SignedLiteralOrNullContext = new SignedLiteralOrNullContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1372, MySQLParser.RULE_signedLiteralOrNull);
        try {
            this.setState(8874);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1134, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8871);
                        this.signedLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8872);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(8873);
                        this.nullAsLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public literal(): LiteralContext {
        let localctx: LiteralContext = new LiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1374, MySQLParser.RULE_literal);
        let _la: number;
        try {
            this.setState(8885);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1136, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8876);
                        this.textLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8877);
                        this.numLiteral();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8878);
                        this.temporalLiteral();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(8879);
                        this.nullLiteral();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    {
                        this.setState(8880);
                        this.boolLiteral();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    {
                        this.setState(8882);
                        this.getErrorHandler().sync(this);
                        _la = this.input().LA(1);
                        if (_la === 847) {
                            {
                                this.setState(8881);
                                this.match(MySQLParser.UNDERSCORE_CHARSET);
                            }
                        }

                        this.setState(8884);
                        _la = this.input().LA(1);
                        if (!(_la === 788 || _la === 789)) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public literalOrNull(): LiteralOrNullContext {
        let localctx: LiteralOrNullContext = new LiteralOrNullContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1376, MySQLParser.RULE_literalOrNull);
        try {
            this.setState(8890);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1137, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8887);
                        this.literal();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8888);
                        if (!(this.serverVersion >= 80024)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80024");
                        }
                        this.setState(8889);
                        this.nullAsLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public nullAsLiteral(): NullAsLiteralContext {
        let localctx: NullAsLiteralContext = new NullAsLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1378, MySQLParser.RULE_nullAsLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8892);
                this.match(MySQLParser.NULL_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public stringList(): StringListContext {
        let localctx: StringListContext = new StringListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1380, MySQLParser.RULE_stringList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8894);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8895);
                this.textString();
                this.setState(8900);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(8896);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(8897);
                            this.textString();
                        }
                    }
                    this.setState(8902);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
                this.setState(8903);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public textStringLiteral(): TextStringLiteralContext {
        let localctx: TextStringLiteralContext = new TextStringLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1382, MySQLParser.RULE_textStringLiteral);
        try {
            this.setState(8908);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1139, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8905);
                        localctx._value = this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8906);
                        if (!(!this.isSqlModeActive(SqlMode.AnsiQuotes))) {
                            throw this.createFailedPredicateException("!this.isSqlModeActive(SqlMode.AnsiQuotes)");
                        }
                        this.setState(8907);
                        localctx._value = this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public textString(): TextStringContext {
        let localctx: TextStringContext = new TextStringContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1384, MySQLParser.RULE_textString);
        try {
            this.setState(8913);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1140, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8910);
                        this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8911);
                        this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8912);
                        this.match(MySQLParser.BIN_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public textStringHash(): TextStringHashContext {
        let localctx: TextStringHashContext = new TextStringHashContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1386, MySQLParser.RULE_textStringHash);
        try {
            this.setState(8918);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1141, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8915);
                        this.textStringLiteral();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8916);
                        if (!(this.serverVersion >= 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80017");
                        }
                        this.setState(8917);
                        this.match(MySQLParser.HEX_NUMBER);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public textLiteral(): TextLiteralContext {
        let localctx: TextLiteralContext = new TextLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1388, MySQLParser.RULE_textLiteral);
        try {
            let _alt: number;
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8925);
                this.getErrorHandler().sync(this);
                switch (this.getInterpreter().adaptivePredict(this.input(), 1143, this.getCtx())) {
                    case 1:
                        {
                            this.setState(8921);
                            this.getErrorHandler().sync(this);
                            switch (this.getInterpreter().adaptivePredict(this.input(), 1142, this.getCtx())) {
                                case 1:
                                    {
                                        this.setState(8920);
                                        this.match(MySQLParser.UNDERSCORE_CHARSET);
                                    }
                                    break;
                            }
                            this.setState(8923);
                            this.textStringLiteral();
                        }
                        break;
                    case 2:
                        {
                            this.setState(8924);
                            this.match(MySQLParser.NCHAR_TEXT);
                        }
                        break;
                }
                this.setState(8930);
                this.getErrorHandler().sync(this);
                _alt = this.getInterpreter().adaptivePredict(this.input(), 1144, this.getCtx());
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.setState(8927);
                                this.textStringLiteral();
                            }
                        }
                    }
                    this.setState(8932);
                    this.getErrorHandler().sync(this);
                    _alt = this.getInterpreter().adaptivePredict(this.input(), 1144, this.getCtx());
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        let localctx: TextStringNoLinebreakContext = new TextStringNoLinebreakContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1390, MySQLParser.RULE_textStringNoLinebreak);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8933);
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public textStringLiteralList(): TextStringLiteralListContext {
        let localctx: TextStringLiteralListContext = new TextStringLiteralListContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1392, MySQLParser.RULE_textStringLiteralList);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8935);
                this.textStringLiteral();
                this.setState(8940);
                this.getErrorHandler().sync(this);
                _la = this.input().LA(1);
                while (_la === 773) {
                    {
                        {
                            this.setState(8936);
                            this.match(MySQLParser.COMMA_SYMBOL);
                            this.setState(8937);
                            this.textStringLiteral();
                        }
                    }
                    this.setState(8942);
                    this.getErrorHandler().sync(this);
                    _la = this.input().LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public numLiteral(): NumLiteralContext {
        let localctx: NumLiteralContext = new NumLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1394, MySQLParser.RULE_numLiteral);
        try {
            this.setState(8946);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 747:
                case 748:
                case 749:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8943);
                        this.int64Literal();
                    }
                    break;
                case 790:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8944);
                        this.match(MySQLParser.DECIMAL_NUMBER);
                    }
                    break;
                case 791:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8945);
                        this.match(MySQLParser.FLOAT_NUMBER);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public boolLiteral(): BoolLiteralContext {
        let localctx: BoolLiteralContext = new BoolLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1396, MySQLParser.RULE_boolLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8948);
                _la = this.input().LA(1);
                if (!(_la === 183 || _la === 596)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public nullLiteral(): NullLiteralContext {
        let localctx: NullLiteralContext = new NullLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1398, MySQLParser.RULE_nullLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8950);
                _la = this.input().LA(1);
                if (!(_la === 376 || _la === 786)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public int64Literal(): Int64LiteralContext {
        let localctx: Int64LiteralContext = new Int64LiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1400, MySQLParser.RULE_int64Literal);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8952);
                _la = this.input().LA(1);
                if (!(((((_la - 747)) & ~0x1F) === 0 && ((1 << (_la - 747)) & 7) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public temporalLiteral(): TemporalLiteralContext {
        let localctx: TemporalLiteralContext = new TemporalLiteralContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1402, MySQLParser.RULE_temporalLiteral);
        try {
            this.setState(8960);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 116:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8954);
                        this.match(MySQLParser.DATE_SYMBOL);
                        this.setState(8955);
                        this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case 586:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8956);
                        this.match(MySQLParser.TIME_SYMBOL);
                        this.setState(8957);
                        this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                case 583:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(8958);
                        this.match(MySQLParser.TIMESTAMP_SYMBOL);
                        this.setState(8959);
                        this.match(MySQLParser.SINGLE_QUOTED_TEXT);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public floatOptions(): FloatOptionsContext {
        let localctx: FloatOptionsContext = new FloatOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1404, MySQLParser.RULE_floatOptions);
        try {
            this.setState(8964);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1148, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8962);
                        this.fieldLength();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8963);
                        this.precision();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public standardFloatOptions(): StandardFloatOptionsContext {
        let localctx: StandardFloatOptionsContext = new StandardFloatOptionsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1406, MySQLParser.RULE_standardFloatOptions);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8966);
                this.precision();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public precision(): PrecisionContext {
        let localctx: PrecisionContext = new PrecisionContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1408, MySQLParser.RULE_precision);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8968);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8969);
                this.match(MySQLParser.INT_NUMBER);
                this.setState(8970);
                this.match(MySQLParser.COMMA_SYMBOL);
                this.setState(8971);
                this.match(MySQLParser.INT_NUMBER);
                this.setState(8972);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public textOrIdentifier(): TextOrIdentifierContext {
        let localctx: TextOrIdentifierContext = new TextOrIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1410, MySQLParser.RULE_textOrIdentifier);
        try {
            this.setState(8976);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1149, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8974);
                        this.identifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8975);
                        this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lValueIdentifier(): LValueIdentifierContext {
        let localctx: LValueIdentifierContext = new LValueIdentifierContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1412, MySQLParser.RULE_lValueIdentifier);
        try {
            this.setState(8980);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1150, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8978);
                        this.pureIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8979);
                        this.lValueKeyword();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public roleIdentifierOrText(): RoleIdentifierOrTextContext {
        let localctx: RoleIdentifierOrTextContext = new RoleIdentifierOrTextContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1414, MySQLParser.RULE_roleIdentifierOrText);
        try {
            this.setState(8984);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1151, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8982);
                        this.roleIdentifier();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8983);
                        this.textStringLiteral();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public sizeNumber(): SizeNumberContext {
        let localctx: SizeNumberContext = new SizeNumberContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1416, MySQLParser.RULE_sizeNumber);
        try {
            this.setState(8988);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1152, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8986);
                        this.real_ulonglong_number();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8987);
                        this.pureIdentifier();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public parentheses(): ParenthesesContext {
        let localctx: ParenthesesContext = new ParenthesesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1418, MySQLParser.RULE_parentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8990);
                this.match(MySQLParser.OPEN_PAR_SYMBOL);
                this.setState(8991);
                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public equal(): EqualContext {
        let localctx: EqualContext = new EqualContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1420, MySQLParser.RULE_equal);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8993);
                _la = this.input().LA(1);
                if (!(_la === 750 || _la === 751)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public optionType(): OptionTypeContext {
        let localctx: OptionTypeContext = new OptionTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1422, MySQLParser.RULE_optionType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(8995);
                _la = this.input().LA(1);
                if (!(_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public rvalueSystemVariableType(): RvalueSystemVariableTypeContext {
        let localctx: RvalueSystemVariableTypeContext = new RvalueSystemVariableTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1424, MySQLParser.RULE_rvalueSystemVariableType);
        try {
            this.setState(9003);
            this.getErrorHandler().sync(this);
            switch (this.input().LA(1)) {
                case 214:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(8997);
                        this.match(MySQLParser.GLOBAL_SYMBOL);
                        this.setState(8998);
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                case 284:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(8999);
                        this.match(MySQLParser.LOCAL_SYMBOL);
                        this.setState(9000);
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                case 502:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(9001);
                        this.match(MySQLParser.SESSION_SYMBOL);
                        this.setState(9002);
                        this.match(MySQLParser.DOT_SYMBOL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public setVarIdentType(): SetVarIdentTypeContext {
        let localctx: SetVarIdentTypeContext = new SetVarIdentTypeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1426, MySQLParser.RULE_setVarIdentType);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(9005);
                _la = this.input().LA(1);
                if (!(_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
                this.setState(9006);
                this.match(MySQLParser.DOT_SYMBOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public jsonAttribute(): JsonAttributeContext {
        let localctx: JsonAttributeContext = new JsonAttributeContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1428, MySQLParser.RULE_jsonAttribute);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(9008);
                this.textStringLiteral();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifierKeyword(): IdentifierKeywordContext {
        let localctx: IdentifierKeywordContext = new IdentifierKeywordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1430, MySQLParser.RULE_identifierKeyword);
        try {
            this.setState(9026);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1156, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(9010);
                        if (!(this.serverVersion < 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80017");
                        }
                        this.setState(9017);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1154, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(9011);
                                    this.labelKeyword();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(9012);
                                    this.roleOrIdentifierKeyword();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(9013);
                                    this.match(MySQLParser.EXECUTE_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.setState(9014);
                                    this.match(MySQLParser.SHUTDOWN_SYMBOL);
                                }
                                break;
                            case 5:
                                {
                                    this.setState(9015);
                                    if (!(this.serverVersion >= 80011)) {
                                        throw this.createFailedPredicateException("this.serverVersion >= 80011");
                                    }
                                    this.setState(9016);
                                    this.match(MySQLParser.RESTART_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(9024);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1155, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(9019);
                                    this.identifierKeywordsUnambiguous();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(9020);
                                    this.identifierKeywordsAmbiguous1RolesAndLabels();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(9021);
                                    this.identifierKeywordsAmbiguous2Labels();
                                }
                                break;
                            case 4:
                                {
                                    this.setState(9022);
                                    this.identifierKeywordsAmbiguous3Roles();
                                }
                                break;
                            case 5:
                                {
                                    this.setState(9023);
                                    this.identifierKeywordsAmbiguous4SystemVariables();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
        let localctx: IdentifierKeywordsAmbiguous1RolesAndLabelsContext = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1432, MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(9028);
                _la = this.input().LA(1);
                if (!(_la === 173 || _la === 510 || _la === 714)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
        let localctx: IdentifierKeywordsAmbiguous2LabelsContext = new IdentifierKeywordsAmbiguous2LabelsContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1434, MySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(9030);
                _la = this.input().LA(1);
                if (!(_la === 19 || _la === 29 || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 2684391427) !== 0) || _la === 90 || _la === 123 || _la === 147 || _la === 159 || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 75497475) !== 0) || _la === 234 || _la === 245 || _la === 267 || _la === 373 || _la === 415 || _la === 417 || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & 33562625) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & 41943041) !== 0) || _la === 543 || _la === 552 || ((((_la - 597)) & ~0x1F) === 0 && ((1 << (_la - 597)) & 1537) !== 0) || _la === 651 || _la === 677)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public labelKeyword(): LabelKeywordContext {
        let localctx: LabelKeywordContext = new LabelKeywordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1436, MySQLParser.RULE_labelKeyword);
        try {
            this.setState(9050);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1159, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(9032);
                        if (!(this.serverVersion < 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80017");
                        }
                        this.setState(9043);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1157, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(9033);
                                    this.roleOrLabelKeyword();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(9034);
                                    this.match(MySQLParser.EVENT_SYMBOL);
                                }
                                break;
                            case 3:
                                {
                                    this.setState(9035);
                                    this.match(MySQLParser.FILE_SYMBOL);
                                }
                                break;
                            case 4:
                                {
                                    this.setState(9036);
                                    this.match(MySQLParser.NONE_SYMBOL);
                                }
                                break;
                            case 5:
                                {
                                    this.setState(9037);
                                    this.match(MySQLParser.PROCESS_SYMBOL);
                                }
                                break;
                            case 6:
                                {
                                    this.setState(9038);
                                    this.match(MySQLParser.PROXY_SYMBOL);
                                }
                                break;
                            case 7:
                                {
                                    this.setState(9039);
                                    this.match(MySQLParser.RELOAD_SYMBOL);
                                }
                                break;
                            case 8:
                                {
                                    this.setState(9040);
                                    this.match(MySQLParser.REPLICATION_SYMBOL);
                                }
                                break;
                            case 9:
                                {
                                    this.setState(9041);
                                    this.match(MySQLParser.RESOURCE_SYMBOL);
                                }
                                break;
                            case 10:
                                {
                                    this.setState(9042);
                                    this.match(MySQLParser.SUPER_SYMBOL);
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(9048);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1158, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(9045);
                                    this.identifierKeywordsUnambiguous();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(9046);
                                    this.identifierKeywordsAmbiguous3Roles();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(9047);
                                    this.identifierKeywordsAmbiguous4SystemVariables();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
        let localctx: IdentifierKeywordsAmbiguous3RolesContext = new IdentifierKeywordsAmbiguous3RolesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1438, MySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(9052);
                _la = this.input().LA(1);
                if (!(_la === 170 || _la === 188 || _la === 369 || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & 268435473) !== 0) || _la === 459 || _la === 565 || _la === 709)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
        let localctx: IdentifierKeywordsUnambiguousContext = new IdentifierKeywordsUnambiguousContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1440, MySQLParser.RULE_identifierKeywordsUnambiguous);
        let _la: number;
        try {
            this.setState(9057);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1160, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(9054);
                        _la = this.input().LA(1);
                        if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & 262214636) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3249671057) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 2245782383) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 2954927169) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 3746852895) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 3225184099) !== 0) || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & 2788234193) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 1161171041) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4094494233) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 2256265199) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 2852083279) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 20228359) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 2628845439) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 3310328595) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 1438145823) !== 0) || ((((_la - 495)) & ~0x1F) === 0 && ((1 << (_la - 495)) & 257171811) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & 4061090967) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & 79141315) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & 245636803) !== 0) || ((((_la - 625)) & ~0x1F) === 0 && ((1 << (_la - 625)) & 2598496325) !== 0) || ((((_la - 659)) & ~0x1F) === 0 && ((1 << (_la - 659)) & 3231816751) !== 0) || ((((_la - 693)) & ~0x1F) === 0 && ((1 << (_la - 693)) & 4292673077) !== 0) || ((((_la - 725)) & ~0x1F) === 0 && ((1 << (_la - 725)) & 15549) !== 0) || ((((_la - 792)) & ~0x1F) === 0 && ((1 << (_la - 792)) & 4294966207) !== 0) || ((((_la - 824)) & ~0x1F) === 0 && ((1 << (_la - 824)) & 1048575) !== 0))) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(9055);
                        if (!(this.serverVersion >= 80019)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80019");
                        }
                        this.setState(9056);
                        _la = this.input().LA(1);
                        if (!(_la === 583 || _la === 586 || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 16381) !== 0))) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public roleKeyword(): RoleKeywordContext {
        let localctx: RoleKeywordContext = new RoleKeywordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1442, MySQLParser.RULE_roleKeyword);
        try {
            this.setState(9069);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1163, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(9059);
                        if (!(this.serverVersion < 80017)) {
                            throw this.createFailedPredicateException("this.serverVersion < 80017");
                        }
                        this.setState(9062);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1161, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(9060);
                                    this.roleOrLabelKeyword();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(9061);
                                    this.roleOrIdentifierKeyword();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(9067);
                        this.getErrorHandler().sync(this);
                        switch (this.getInterpreter().adaptivePredict(this.input(), 1162, this.getCtx())) {
                            case 1:
                                {
                                    this.setState(9064);
                                    this.identifierKeywordsUnambiguous();
                                }
                                break;
                            case 2:
                                {
                                    this.setState(9065);
                                    this.identifierKeywordsAmbiguous2Labels();
                                }
                                break;
                            case 3:
                                {
                                    this.setState(9066);
                                    this.identifierKeywordsAmbiguous4SystemVariables();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public lValueKeyword(): LValueKeywordContext {
        let localctx: LValueKeywordContext = new LValueKeywordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1444, MySQLParser.RULE_lValueKeyword);
        try {
            this.setState(9075);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1164, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(9071);
                        this.identifierKeywordsUnambiguous();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(9072);
                        this.identifierKeywordsAmbiguous1RolesAndLabels();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    {
                        this.setState(9073);
                        this.identifierKeywordsAmbiguous2Labels();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    {
                        this.setState(9074);
                        this.identifierKeywordsAmbiguous3Roles();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
        let localctx: IdentifierKeywordsAmbiguous4SystemVariablesContext = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1446, MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(9077);
                _la = this.input().LA(1);
                if (!(_la === 214 || _la === 284 || _la === 502 || _la === 658 || _la === 673)) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
        let localctx: RoleOrIdentifierKeywordContext = new RoleOrIdentifierKeywordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1448, MySQLParser.RULE_roleOrIdentifierKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.setState(9079);
                _la = this.input().LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & 671617028) !== 0) || ((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & 2685440003) !== 0) || _la === 90 || _la === 123 || _la === 147 || _la === 159 || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 343949347) !== 0) || _la === 245 || _la === 267 || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & 302137345) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 5377) !== 0) || ((((_la - 452)) & ~0x1F) === 0 && ((1 << (_la - 452)) & 268763145) !== 0) || ((((_la - 489)) & ~0x1F) === 0 && ((1 << (_la - 489)) & 3263185025) !== 0) || _la === 543 || _la === 552 || ((((_la - 597)) & ~0x1F) === 0 && ((1 << (_la - 597)) & 263681) !== 0) || ((((_la - 648)) & ~0x1F) === 0 && ((1 << (_la - 648)) & 536897545) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & 15) !== 0))) {
                    this.getErrorHandler().recoverInline(this);
                }
                else {
                    this.getErrorHandler().reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
        let localctx: RoleOrLabelKeywordContext = new RoleOrLabelKeywordContext(this.getCtx(), this.getState());
        this.enterRule(localctx, 1450, MySQLParser.RULE_roleOrLabelKeyword);
        let _la: number;
        try {
            this.setState(9084);
            this.getErrorHandler().sync(this);
            switch (this.getInterpreter().adaptivePredict(this.input(), 1165, this.getCtx())) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.setState(9081);
                        _la = this.input().LA(1);
                        if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & 127992808) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3249671057) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 2245782381) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 2954927169) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 3746852895) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 2151442209) !== 0) || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & 2787186577) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 1161171041) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4094510617) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 2256265199) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 2852083279) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 305415) !== 0) || ((((_la - 399)) & ~0x1F) === 0 && ((1 << (_la - 399)) & 3461889979) !== 0) || ((((_la - 431)) & ~0x1F) === 0 && ((1 << (_la - 431)) & 3800550793) !== 0) || ((((_la - 463)) & ~0x1F) === 0 && ((1 << (_la - 463)) & 719072783) !== 0) || ((((_la - 495)) & ~0x1F) === 0 && ((1 << (_la - 495)) & 206840033) !== 0) || ((((_la - 528)) & ~0x1F) === 0 && ((1 << (_la - 528)) & 4061090967) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & 79141347) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & 237248451) !== 0) || ((((_la - 627)) & ~0x1F) === 0 && ((1 << (_la - 627)) & 647002641) !== 0) || ((((_la - 664)) & ~0x1F) === 0 && ((1 << (_la - 664)) & 2785352929) !== 0) || ((((_la - 697)) & ~0x1F) === 0 && ((1 << (_la - 697)) & 3629699043) !== 0) || ((((_la - 792)) & ~0x1F) === 0 && ((1 << (_la - 792)) & 67) !== 0))) {
                            this.getErrorHandler().recoverInline(this);
                        }
                        else {
                            this.getErrorHandler().reportMatch(this);
                            this.consume();
                        }
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.setState(9082);
                        if (!(this.serverVersion >= 80014)) {
                            throw this.createFailedPredicateException("this.serverVersion >= 80014");
                        }
                        this.setState(9083);
                        this.match(MySQLParser.ADMIN_SYMBOL);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                localctx.captureException();
                this.getErrorHandler().reportError(this, re);
                this.getErrorHandler().recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }

    public override sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
            case 2:
                return this.alterStatement_sempred(localctx as AlterStatementContext, predIndex);
            case 14:
                return this.standaloneAlterCommands_sempred(localctx as StandaloneAlterCommandsContext, predIndex);
            case 18:
                return this.alterListItem_sempred(localctx as AlterListItemContext, predIndex);
            case 28:
                return this.alterTablespace_sempred(localctx as AlterTablespaceContext, predIndex);
            case 33:
                return this.alterTablespaceOption_sempred(localctx as AlterTablespaceOptionContext, predIndex);
            case 39:
                return this.alterInstanceStatement_sempred(localctx as AlterInstanceStatementContext, predIndex);
            case 40:
                return this.createStatement_sempred(localctx as CreateStatementContext, predIndex);
            case 42:
                return this.createDatabaseOption_sempred(localctx as CreateDatabaseOptionContext, predIndex);
            case 48:
                return this.queryExpressionOrParens_sempred(localctx as QueryExpressionOrParensContext, predIndex);
            case 57:
                return this.createIndex_sempred(localctx as CreateIndexContext, predIndex);
            case 68:
                return this.tsDataFileName_sempred(localctx as TsDataFileNameContext, predIndex);
            case 71:
                return this.tablespaceOption_sempred(localctx as TablespaceOptionContext, predIndex);
            case 94:
                return this.dropStatement_sempred(localctx as DropStatementContext, predIndex);
            case 115:
                return this.deleteStatement_sempred(localctx as DeleteStatementContext, predIndex);
            case 121:
                return this.insertStatement_sempred(localctx as InsertStatementContext, predIndex);
            case 126:
                return this.insertQueryExpression_sempred(localctx as InsertQueryExpressionContext, predIndex);
            case 139:
                return this.selectStatementWithInto_sempred(localctx as SelectStatementWithIntoContext, predIndex);
            case 140:
                return this.queryExpression_sempred(localctx as QueryExpressionContext, predIndex);
            case 144:
                return this.queryPrimary_sempred(localctx as QueryPrimaryContext, predIndex);
            case 186:
                return this.tableReference_sempred(localctx as TableReferenceContext, predIndex);
            case 192:
                return this.tableFactor_sempred(localctx as TableFactorContext, predIndex);
            case 195:
                return this.derivedTable_sempred(localctx as DerivedTableContext, predIndex);
            case 199:
                return this.jtColumn_sempred(localctx as JtColumnContext, predIndex);
            case 206:
                return this.tableAlias_sempred(localctx as TableAliasContext, predIndex);
            case 229:
                return this.sourceResetOptions_sempred(localctx as SourceResetOptionsContext, predIndex);
            case 231:
                return this.changeReplicationSource_sempred(localctx as ChangeReplicationSourceContext, predIndex);
            case 234:
                return this.sourceDefinition_sempred(localctx as SourceDefinitionContext, predIndex);
            case 294:
                return this.cloneStatement_sempred(localctx as CloneStatementContext, predIndex);
            case 298:
                return this.alterUserStatement_sempred(localctx as AlterUserStatementContext, predIndex);
            case 300:
                return this.alterUser_sempred(localctx as AlterUserContext, predIndex);
            case 304:
                return this.createUserTail_sempred(localctx as CreateUserTailContext, predIndex);
            case 309:
                return this.accountLockPasswordExpireOptions_sempred(localctx as AccountLockPasswordExpireOptionsContext, predIndex);
            case 313:
                return this.grantTargetList_sempred(localctx as GrantTargetListContext, predIndex);
            case 314:
                return this.grantOptions_sempred(localctx as GrantOptionsContext, predIndex);
            case 318:
                return this.versionedRequireClause_sempred(localctx as VersionedRequireClauseContext, predIndex);
            case 320:
                return this.revokeStatement_sempred(localctx as RevokeStatementContext, predIndex);
            case 324:
                return this.grantIdentifier_sempred(localctx as GrantIdentifierContext, predIndex);
            case 332:
                return this.histogram_sempred(localctx as HistogramContext, predIndex);
            case 337:
                return this.startOptionValueList_sempred(localctx as StartOptionValueListContext, predIndex);
            case 342:
                return this.optionValueNoOptionType_sempred(localctx as OptionValueNoOptionTypeContext, predIndex);
            case 424:
                return this.utilityStatement_sempred(localctx as UtilityStatementContext, predIndex);
            case 426:
                return this.explainStatement_sempred(localctx as ExplainStatementContext, predIndex);
            case 431:
                return this.expr_sempred(localctx as ExprContext, predIndex);
            case 432:
                return this.boolPri_sempred(localctx as BoolPriContext, predIndex);
            case 434:
                return this.predicate_sempred(localctx as PredicateContext, predIndex);
            case 436:
                return this.bitExpr_sempred(localctx as BitExprContext, predIndex);
            case 437:
                return this.simpleExpr_sempred(localctx as SimpleExprContext, predIndex);
            case 438:
                return this.arrayCast_sempred(localctx as ArrayCastContext, predIndex);
            case 442:
                return this.windowFunctionCall_sempred(localctx as WindowFunctionCallContext, predIndex);
            case 444:
                return this.leadLagInfo_sempred(localctx as LeadLagInfoContext, predIndex);
            case 453:
                return this.runtimeFunctionCall_sempred(localctx as RuntimeFunctionCallContext, predIndex);
            case 469:
                return this.lvalueVariable_sempred(localctx as LvalueVariableContext, predIndex);
            case 474:
                return this.castType_sempred(localctx as CastTypeContext, predIndex);
            case 530:
                return this.checkOrReferences_sempred(localctx as CheckOrReferencesContext, predIndex);
            case 533:
                return this.tableConstraintDef_sempred(localctx as TableConstraintDefContext, predIndex);
            case 536:
                return this.columnAttribute_sempred(localctx as ColumnAttributeContext, predIndex);
            case 548:
                return this.keyListVariants_sempred(localctx as KeyListVariantsContext, predIndex);
            case 551:
                return this.commonIndexOption_sempred(localctx as CommonIndexOptionContext, predIndex);
            case 568:
                return this.charsetName_sempred(localctx as CharsetNameContext, predIndex);
            case 569:
                return this.collationName_sempred(localctx as CollationNameContext, predIndex);
            case 574:
                return this.createTableOption_sempred(localctx as CreateTableOptionContext, predIndex);
            case 674:
                return this.pureIdentifier_sempred(localctx as PureIdentifierContext, predIndex);
            case 684:
                return this.real_ulonglong_number_sempred(localctx as Real_ulonglong_numberContext, predIndex);
            case 686:
                return this.signedLiteralOrNull_sempred(localctx as SignedLiteralOrNullContext, predIndex);
            case 688:
                return this.literalOrNull_sempred(localctx as LiteralOrNullContext, predIndex);
            case 691:
                return this.textStringLiteral_sempred(localctx as TextStringLiteralContext, predIndex);
            case 693:
                return this.textStringHash_sempred(localctx as TextStringHashContext, predIndex);
            case 715:
                return this.identifierKeyword_sempred(localctx as IdentifierKeywordContext, predIndex);
            case 718:
                return this.labelKeyword_sempred(localctx as LabelKeywordContext, predIndex);
            case 720:
                return this.identifierKeywordsUnambiguous_sempred(localctx as IdentifierKeywordsUnambiguousContext, predIndex);
            case 721:
                return this.roleKeyword_sempred(localctx as RoleKeywordContext, predIndex);
            case 725:
                return this.roleOrLabelKeyword_sempred(localctx as RoleOrLabelKeywordContext, predIndex);
        }
        return true;
    }
    private alterStatement_sempred(localctx: AlterStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 0:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private standaloneAlterCommands_sempred(localctx: StandaloneAlterCommandsContext, predIndex: number): boolean {
        switch (predIndex) {
            case 1:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterListItem_sempred(localctx: AlterListItemContext, predIndex: number): boolean {
        switch (predIndex) {
            case 2:
                return this.serverVersion >= 80017;
            case 3:
                return this.serverVersion >= 80019;
            case 4:
                return this.serverVersion >= 80014;
            case 5:
                return this.serverVersion >= 80024;
            case 6:
                return this.serverVersion >= 80017;
            case 7:
                return this.serverVersion >= 80019;
            case 8:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterTablespace_sempred(localctx: AlterTablespaceContext, predIndex: number): boolean {
        switch (predIndex) {
            case 9:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterTablespaceOption_sempred(localctx: AlterTablespaceOptionContext, predIndex: number): boolean {
        switch (predIndex) {
            case 10:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private alterInstanceStatement_sempred(localctx: AlterInstanceStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 11:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private createStatement_sempred(localctx: CreateStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 12:
                return this.serverVersion >= 80011;
            case 13:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private createDatabaseOption_sempred(localctx: CreateDatabaseOptionContext, predIndex: number): boolean {
        switch (predIndex) {
            case 14:
                return this.serverVersion >= 80016;
        }
        return true;
    }
    private queryExpressionOrParens_sempred(localctx: QueryExpressionOrParensContext, predIndex: number): boolean {
        switch (predIndex) {
            case 15:
                return this.serverVersion >= 80031;
        }
        return true;
    }
    private createIndex_sempred(localctx: CreateIndexContext, predIndex: number): boolean {
        switch (predIndex) {
            case 16:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private tsDataFileName_sempred(localctx: TsDataFileNameContext, predIndex: number): boolean {
        switch (predIndex) {
            case 17:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private tablespaceOption_sempred(localctx: TablespaceOptionContext, predIndex: number): boolean {
        switch (predIndex) {
            case 18:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private dropStatement_sempred(localctx: DropStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 19:
                return this.serverVersion >= 80011;
            case 20:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private deleteStatement_sempred(localctx: DeleteStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 21:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private insertStatement_sempred(localctx: InsertStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 22:
                return this.serverVersion >= 80018;
            case 23:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    private insertQueryExpression_sempred(localctx: InsertQueryExpressionContext, predIndex: number): boolean {
        switch (predIndex) {
            case 24:
                return this.serverVersion < 80031;
            case 25:
                return this.serverVersion >= 80031;
        }
        return true;
    }
    private selectStatementWithInto_sempred(localctx: SelectStatementWithIntoContext, predIndex: number): boolean {
        switch (predIndex) {
            case 26:
                return this.serverVersion >= 80024 && this.serverVersion < 80031;
        }
        return true;
    }
    private queryExpression_sempred(localctx: QueryExpressionContext, predIndex: number): boolean {
        switch (predIndex) {
            case 27:
                return this.serverVersion < 80031;
            case 28:
                return this.serverVersion >= 80031;
        }
        return true;
    }
    private queryPrimary_sempred(localctx: QueryPrimaryContext, predIndex: number): boolean {
        switch (predIndex) {
            case 29:
                return this.serverVersion >= 80019;
            case 30:
                return this.serverVersion >= 80019;
        }
        return true;
    }
    private tableReference_sempred(localctx: TableReferenceContext, predIndex: number): boolean {
        switch (predIndex) {
            case 31:
                return this.serverVersion < 80017;
        }
        return true;
    }
    private tableFactor_sempred(localctx: TableFactorContext, predIndex: number): boolean {
        switch (predIndex) {
            case 32:
                return this.serverVersion >= 80004;
        }
        return true;
    }
    private derivedTable_sempred(localctx: DerivedTableContext, predIndex: number): boolean {
        switch (predIndex) {
            case 33:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private jtColumn_sempred(localctx: JtColumnContext, predIndex: number): boolean {
        switch (predIndex) {
            case 34:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private tableAlias_sempred(localctx: TableAliasContext, predIndex: number): boolean {
        switch (predIndex) {
            case 35:
                return this.serverVersion < 80017;
        }
        return true;
    }
    private sourceResetOptions_sempred(localctx: SourceResetOptionsContext, predIndex: number): boolean {
        switch (predIndex) {
            case 36:
                return this.serverVersion < 80017;
            case 37:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private changeReplicationSource_sempred(localctx: ChangeReplicationSourceContext, predIndex: number): boolean {
        switch (predIndex) {
            case 38:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private sourceDefinition_sempred(localctx: SourceDefinitionContext, predIndex: number): boolean {
        switch (predIndex) {
            case 39:
                return this.serverVersion >= 80024;
            case 40:
                return this.serverVersion >= 80024;
            case 41:
                return this.serverVersion >= 80027;
        }
        return true;
    }
    private cloneStatement_sempred(localctx: CloneStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 42:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterUserStatement_sempred(localctx: AlterUserStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 43:
                return this.serverVersion < 80014;
            case 44:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private alterUser_sempred(localctx: AlterUserContext, predIndex: number): boolean {
        switch (predIndex) {
            case 45:
                return this.serverVersion < 80025;
            case 46:
                return this.serverVersion >= 80025;
        }
        return true;
    }
    private createUserTail_sempred(localctx: CreateUserTailContext, predIndex: number): boolean {
        switch (predIndex) {
            case 47:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private accountLockPasswordExpireOptions_sempred(localctx: AccountLockPasswordExpireOptionsContext, predIndex: number): boolean {
        switch (predIndex) {
            case 48:
                return this.serverVersion >= 80014;
        }
        return true;
    }
    private grantTargetList_sempred(localctx: GrantTargetListContext, predIndex: number): boolean {
        switch (predIndex) {
            case 49:
                return this.serverVersion < 80011;
            case 50:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    private grantOptions_sempred(localctx: GrantOptionsContext, predIndex: number): boolean {
        switch (predIndex) {
            case 51:
                return this.serverVersion < 80011;
            case 52:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    private versionedRequireClause_sempred(localctx: VersionedRequireClauseContext, predIndex: number): boolean {
        switch (predIndex) {
            case 53:
                return this.serverVersion < 80011;
        }
        return true;
    }
    private revokeStatement_sempred(localctx: RevokeStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 54:
                return this.serverVersion >= 80031;
            case 55:
                return this.serverVersion >= 80031;
        }
        return true;
    }
    private grantIdentifier_sempred(localctx: GrantIdentifierContext, predIndex: number): boolean {
        switch (predIndex) {
            case 56:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private histogram_sempred(localctx: HistogramContext, predIndex: number): boolean {
        switch (predIndex) {
            case 57:
                return this.serverVersion >= 80031;
        }
        return true;
    }
    private startOptionValueList_sempred(localctx: StartOptionValueListContext, predIndex: number): boolean {
        switch (predIndex) {
            case 58:
                return this.serverVersion < 80014;
            case 59:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    private optionValueNoOptionType_sempred(localctx: OptionValueNoOptionTypeContext, predIndex: number): boolean {
        switch (predIndex) {
            case 60:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    private utilityStatement_sempred(localctx: UtilityStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 61:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    private explainStatement_sempred(localctx: ExplainStatementContext, predIndex: number): boolean {
        switch (predIndex) {
            case 62:
                return this.serverVersion >= 80018;
            case 63:
                return this.serverVersion >= 80019;
        }
        return true;
    }
    private expr_sempred(localctx: ExprContext, predIndex: number): boolean {
        switch (predIndex) {
            case 64:
                return this.precpred(this.getCtx(), 3);
            case 65:
                return this.precpred(this.getCtx(), 2);
            case 66:
                return this.precpred(this.getCtx(), 1);
        }
        return true;
    }
    private boolPri_sempred(localctx: BoolPriContext, predIndex: number): boolean {
        switch (predIndex) {
            case 67:
                return this.precpred(this.getCtx(), 3);
            case 68:
                return this.precpred(this.getCtx(), 2);
            case 69:
                return this.precpred(this.getCtx(), 1);
        }
        return true;
    }
    private predicate_sempred(localctx: PredicateContext, predIndex: number): boolean {
        switch (predIndex) {
            case 70:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private bitExpr_sempred(localctx: BitExprContext, predIndex: number): boolean {
        switch (predIndex) {
            case 71:
                return this.precpred(this.getCtx(), 7);
            case 72:
                return this.precpred(this.getCtx(), 6);
            case 73:
                return this.precpred(this.getCtx(), 5);
            case 74:
                return this.precpred(this.getCtx(), 3);
            case 75:
                return this.precpred(this.getCtx(), 2);
            case 76:
                return this.precpred(this.getCtx(), 1);
            case 77:
                return this.precpred(this.getCtx(), 4);
        }
        return true;
    }
    private simpleExpr_sempred(localctx: SimpleExprContext, predIndex: number): boolean {
        switch (predIndex) {
            case 78:
                return this.precpred(this.getCtx(), 16);
            case 79:
                return this.precpred(this.getCtx(), 24);
        }
        return true;
    }
    private arrayCast_sempred(localctx: ArrayCastContext, predIndex: number): boolean {
        switch (predIndex) {
            case 80:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private windowFunctionCall_sempred(localctx: WindowFunctionCallContext, predIndex: number): boolean {
        switch (predIndex) {
            case 81:
                return this.serverVersion < 80024;
            case 82:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private leadLagInfo_sempred(localctx: LeadLagInfoContext, predIndex: number): boolean {
        switch (predIndex) {
            case 83:
                return this.serverVersion < 80024;
            case 84:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private runtimeFunctionCall_sempred(localctx: RuntimeFunctionCallContext, predIndex: number): boolean {
        switch (predIndex) {
            case 85:
                return this.serverVersion < 80011;
        }
        return true;
    }
    private lvalueVariable_sempred(localctx: LvalueVariableContext, predIndex: number): boolean {
        switch (predIndex) {
            case 86:
                return this.serverVersion < 80017;
            case 87:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private castType_sempred(localctx: CastTypeContext, predIndex: number): boolean {
        switch (predIndex) {
            case 88:
                return this.serverVersion >= 80024;
            case 89:
                return this.serverVersion >= 80017;
            case 90:
                return this.serverVersion >= 80017;
            case 91:
                return this.serverVersion >= 80027;
        }
        return true;
    }
    private checkOrReferences_sempred(localctx: CheckOrReferencesContext, predIndex: number): boolean {
        switch (predIndex) {
            case 92:
                return this.serverVersion < 80016;
        }
        return true;
    }
    private tableConstraintDef_sempred(localctx: TableConstraintDefContext, predIndex: number): boolean {
        switch (predIndex) {
            case 93:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private columnAttribute_sempred(localctx: ColumnAttributeContext, predIndex: number): boolean {
        switch (predIndex) {
            case 94:
                return this.serverVersion >= 80014;
            case 95:
                return this.serverVersion < 80024;
            case 96:
                return this.serverVersion >= 80024;
            case 97:
                return this.serverVersion >= 80013;
            case 98:
                return this.serverVersion >= 80017;
            case 99:
                return this.serverVersion >= 80017;
            case 100:
                return this.serverVersion >= 80024;
            case 101:
                return this.serverVersion >= 80024;
            case 102:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private keyListVariants_sempred(localctx: KeyListVariantsContext, predIndex: number): boolean {
        switch (predIndex) {
            case 103:
                return this.serverVersion >= 80013;
            case 104:
                return this.serverVersion < 80013;
        }
        return true;
    }
    private commonIndexOption_sempred(localctx: CommonIndexOptionContext, predIndex: number): boolean {
        switch (predIndex) {
            case 105:
                return this.serverVersion >= 80024;
            case 106:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private charsetName_sempred(localctx: CharsetNameContext, predIndex: number): boolean {
        switch (predIndex) {
            case 107:
                return this.serverVersion < 80011;
        }
        return true;
    }
    private collationName_sempred(localctx: CollationNameContext, predIndex: number): boolean {
        switch (predIndex) {
            case 108:
                return this.serverVersion < 80011;
            case 109:
                return this.serverVersion >= 80018;
        }
        return true;
    }
    private createTableOption_sempred(localctx: CreateTableOptionContext, predIndex: number): boolean {
        switch (predIndex) {
            case 110:
                return this.serverVersion >= 80014;
            case 111:
                return this.serverVersion >= 80024;
            case 112:
                return this.serverVersion >= 80024;
            case 113:
                return this.serverVersion >= 80024;
            case 114:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private pureIdentifier_sempred(localctx: PureIdentifierContext, predIndex: number): boolean {
        switch (predIndex) {
            case 115:
                return this.isSqlModeActive(SqlMode.AnsiQuotes);
        }
        return true;
    }
    private real_ulonglong_number_sempred(localctx: Real_ulonglong_numberContext, predIndex: number): boolean {
        switch (predIndex) {
            case 116:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private signedLiteralOrNull_sempred(localctx: SignedLiteralOrNullContext, predIndex: number): boolean {
        switch (predIndex) {
            case 117:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private literalOrNull_sempred(localctx: LiteralOrNullContext, predIndex: number): boolean {
        switch (predIndex) {
            case 118:
                return this.serverVersion >= 80024;
        }
        return true;
    }
    private textStringLiteral_sempred(localctx: TextStringLiteralContext, predIndex: number): boolean {
        switch (predIndex) {
            case 119:
                return !this.isSqlModeActive(SqlMode.AnsiQuotes);
        }
        return true;
    }
    private textStringHash_sempred(localctx: TextStringHashContext, predIndex: number): boolean {
        switch (predIndex) {
            case 120:
                return this.serverVersion >= 80017;
        }
        return true;
    }
    private identifierKeyword_sempred(localctx: IdentifierKeywordContext, predIndex: number): boolean {
        switch (predIndex) {
            case 121:
                return this.serverVersion < 80017;
            case 122:
                return this.serverVersion >= 80011;
        }
        return true;
    }
    private labelKeyword_sempred(localctx: LabelKeywordContext, predIndex: number): boolean {
        switch (predIndex) {
            case 123:
                return this.serverVersion < 80017;
        }
        return true;
    }
    private identifierKeywordsUnambiguous_sempred(localctx: IdentifierKeywordsUnambiguousContext, predIndex: number): boolean {
        switch (predIndex) {
            case 124:
                return this.serverVersion >= 80019;
        }
        return true;
    }
    private roleKeyword_sempred(localctx: RoleKeywordContext, predIndex: number): boolean {
        switch (predIndex) {
            case 125:
                return this.serverVersion < 80017;
        }
        return true;
    }
    private roleOrLabelKeyword_sempred(localctx: RoleOrLabelKeywordContext, predIndex: number): boolean {
        switch (predIndex) {
            case 126:
                return this.serverVersion >= 80014;
        }
        return true;
    }

    public static readonly _serializedATN = new SerializedATNView([4, 1, 860, 9087, 2, 0, 7, 0,
        2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9,
        2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2,
        17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24,
        7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
        31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38,
        2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2,
        46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53,
        7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7,
        60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67,
        2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2,
        75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82,
        7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7,
        89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96,
        2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103,
        7, 103, 2, 104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109,
        7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115,
        7, 115, 2, 116, 7, 116, 2, 117, 7, 117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121,
        7, 121, 2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127,
        7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 131, 7, 131, 2, 132, 7, 132, 2, 133,
        7, 133, 2, 134, 7, 134, 2, 135, 7, 135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139,
        7, 139, 2, 140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 144, 2, 145,
        7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 149, 7, 149, 2, 150, 7, 150, 2, 151,
        7, 151, 2, 152, 7, 152, 2, 153, 7, 153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157,
        7, 157, 2, 158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162, 2, 163,
        7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2, 167, 7, 167, 2, 168, 7, 168, 2, 169,
        7, 169, 2, 170, 7, 170, 2, 171, 7, 171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175,
        7, 175, 2, 176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 180, 2, 181,
        7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2, 185, 7, 185, 2, 186, 7, 186, 2, 187,
        7, 187, 2, 188, 7, 188, 2, 189, 7, 189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193,
        7, 193, 2, 194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7, 198, 2, 199,
        7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2, 202, 7, 202, 2, 203, 7, 203, 2, 204, 7, 204, 2, 205,
        7, 205, 2, 206, 7, 206, 2, 207, 7, 207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211,
        7, 211, 2, 212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7, 216, 2, 217,
        7, 217, 2, 218, 7, 218, 2, 219, 7, 219, 2, 220, 7, 220, 2, 221, 7, 221, 2, 222, 7, 222, 2, 223,
        7, 223, 2, 224, 7, 224, 2, 225, 7, 225, 2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229,
        7, 229, 2, 230, 7, 230, 2, 231, 7, 231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7, 234, 2, 235,
        7, 235, 2, 236, 7, 236, 2, 237, 7, 237, 2, 238, 7, 238, 2, 239, 7, 239, 2, 240, 7, 240, 2, 241,
        7, 241, 2, 242, 7, 242, 2, 243, 7, 243, 2, 244, 7, 244, 2, 245, 7, 245, 2, 246, 7, 246, 2, 247,
        7, 247, 2, 248, 7, 248, 2, 249, 7, 249, 2, 250, 7, 250, 2, 251, 7, 251, 2, 252, 7, 252, 2, 253,
        7, 253, 2, 254, 7, 254, 2, 255, 7, 255, 2, 256, 7, 256, 2, 257, 7, 257, 2, 258, 7, 258, 2, 259,
        7, 259, 2, 260, 7, 260, 2, 261, 7, 261, 2, 262, 7, 262, 2, 263, 7, 263, 2, 264, 7, 264, 2, 265,
        7, 265, 2, 266, 7, 266, 2, 267, 7, 267, 2, 268, 7, 268, 2, 269, 7, 269, 2, 270, 7, 270, 2, 271,
        7, 271, 2, 272, 7, 272, 2, 273, 7, 273, 2, 274, 7, 274, 2, 275, 7, 275, 2, 276, 7, 276, 2, 277,
        7, 277, 2, 278, 7, 278, 2, 279, 7, 279, 2, 280, 7, 280, 2, 281, 7, 281, 2, 282, 7, 282, 2, 283,
        7, 283, 2, 284, 7, 284, 2, 285, 7, 285, 2, 286, 7, 286, 2, 287, 7, 287, 2, 288, 7, 288, 2, 289,
        7, 289, 2, 290, 7, 290, 2, 291, 7, 291, 2, 292, 7, 292, 2, 293, 7, 293, 2, 294, 7, 294, 2, 295,
        7, 295, 2, 296, 7, 296, 2, 297, 7, 297, 2, 298, 7, 298, 2, 299, 7, 299, 2, 300, 7, 300, 2, 301,
        7, 301, 2, 302, 7, 302, 2, 303, 7, 303, 2, 304, 7, 304, 2, 305, 7, 305, 2, 306, 7, 306, 2, 307,
        7, 307, 2, 308, 7, 308, 2, 309, 7, 309, 2, 310, 7, 310, 2, 311, 7, 311, 2, 312, 7, 312, 2, 313,
        7, 313, 2, 314, 7, 314, 2, 315, 7, 315, 2, 316, 7, 316, 2, 317, 7, 317, 2, 318, 7, 318, 2, 319,
        7, 319, 2, 320, 7, 320, 2, 321, 7, 321, 2, 322, 7, 322, 2, 323, 7, 323, 2, 324, 7, 324, 2, 325,
        7, 325, 2, 326, 7, 326, 2, 327, 7, 327, 2, 328, 7, 328, 2, 329, 7, 329, 2, 330, 7, 330, 2, 331,
        7, 331, 2, 332, 7, 332, 2, 333, 7, 333, 2, 334, 7, 334, 2, 335, 7, 335, 2, 336, 7, 336, 2, 337,
        7, 337, 2, 338, 7, 338, 2, 339, 7, 339, 2, 340, 7, 340, 2, 341, 7, 341, 2, 342, 7, 342, 2, 343,
        7, 343, 2, 344, 7, 344, 2, 345, 7, 345, 2, 346, 7, 346, 2, 347, 7, 347, 2, 348, 7, 348, 2, 349,
        7, 349, 2, 350, 7, 350, 2, 351, 7, 351, 2, 352, 7, 352, 2, 353, 7, 353, 2, 354, 7, 354, 2, 355,
        7, 355, 2, 356, 7, 356, 2, 357, 7, 357, 2, 358, 7, 358, 2, 359, 7, 359, 2, 360, 7, 360, 2, 361,
        7, 361, 2, 362, 7, 362, 2, 363, 7, 363, 2, 364, 7, 364, 2, 365, 7, 365, 2, 366, 7, 366, 2, 367,
        7, 367, 2, 368, 7, 368, 2, 369, 7, 369, 2, 370, 7, 370, 2, 371, 7, 371, 2, 372, 7, 372, 2, 373,
        7, 373, 2, 374, 7, 374, 2, 375, 7, 375, 2, 376, 7, 376, 2, 377, 7, 377, 2, 378, 7, 378, 2, 379,
        7, 379, 2, 380, 7, 380, 2, 381, 7, 381, 2, 382, 7, 382, 2, 383, 7, 383, 2, 384, 7, 384, 2, 385,
        7, 385, 2, 386, 7, 386, 2, 387, 7, 387, 2, 388, 7, 388, 2, 389, 7, 389, 2, 390, 7, 390, 2, 391,
        7, 391, 2, 392, 7, 392, 2, 393, 7, 393, 2, 394, 7, 394, 2, 395, 7, 395, 2, 396, 7, 396, 2, 397,
        7, 397, 2, 398, 7, 398, 2, 399, 7, 399, 2, 400, 7, 400, 2, 401, 7, 401, 2, 402, 7, 402, 2, 403,
        7, 403, 2, 404, 7, 404, 2, 405, 7, 405, 2, 406, 7, 406, 2, 407, 7, 407, 2, 408, 7, 408, 2, 409,
        7, 409, 2, 410, 7, 410, 2, 411, 7, 411, 2, 412, 7, 412, 2, 413, 7, 413, 2, 414, 7, 414, 2, 415,
        7, 415, 2, 416, 7, 416, 2, 417, 7, 417, 2, 418, 7, 418, 2, 419, 7, 419, 2, 420, 7, 420, 2, 421,
        7, 421, 2, 422, 7, 422, 2, 423, 7, 423, 2, 424, 7, 424, 2, 425, 7, 425, 2, 426, 7, 426, 2, 427,
        7, 427, 2, 428, 7, 428, 2, 429, 7, 429, 2, 430, 7, 430, 2, 431, 7, 431, 2, 432, 7, 432, 2, 433,
        7, 433, 2, 434, 7, 434, 2, 435, 7, 435, 2, 436, 7, 436, 2, 437, 7, 437, 2, 438, 7, 438, 2, 439,
        7, 439, 2, 440, 7, 440, 2, 441, 7, 441, 2, 442, 7, 442, 2, 443, 7, 443, 2, 444, 7, 444, 2, 445,
        7, 445, 2, 446, 7, 446, 2, 447, 7, 447, 2, 448, 7, 448, 2, 449, 7, 449, 2, 450, 7, 450, 2, 451,
        7, 451, 2, 452, 7, 452, 2, 453, 7, 453, 2, 454, 7, 454, 2, 455, 7, 455, 2, 456, 7, 456, 2, 457,
        7, 457, 2, 458, 7, 458, 2, 459, 7, 459, 2, 460, 7, 460, 2, 461, 7, 461, 2, 462, 7, 462, 2, 463,
        7, 463, 2, 464, 7, 464, 2, 465, 7, 465, 2, 466, 7, 466, 2, 467, 7, 467, 2, 468, 7, 468, 2, 469,
        7, 469, 2, 470, 7, 470, 2, 471, 7, 471, 2, 472, 7, 472, 2, 473, 7, 473, 2, 474, 7, 474, 2, 475,
        7, 475, 2, 476, 7, 476, 2, 477, 7, 477, 2, 478, 7, 478, 2, 479, 7, 479, 2, 480, 7, 480, 2, 481,
        7, 481, 2, 482, 7, 482, 2, 483, 7, 483, 2, 484, 7, 484, 2, 485, 7, 485, 2, 486, 7, 486, 2, 487,
        7, 487, 2, 488, 7, 488, 2, 489, 7, 489, 2, 490, 7, 490, 2, 491, 7, 491, 2, 492, 7, 492, 2, 493,
        7, 493, 2, 494, 7, 494, 2, 495, 7, 495, 2, 496, 7, 496, 2, 497, 7, 497, 2, 498, 7, 498, 2, 499,
        7, 499, 2, 500, 7, 500, 2, 501, 7, 501, 2, 502, 7, 502, 2, 503, 7, 503, 2, 504, 7, 504, 2, 505,
        7, 505, 2, 506, 7, 506, 2, 507, 7, 507, 2, 508, 7, 508, 2, 509, 7, 509, 2, 510, 7, 510, 2, 511,
        7, 511, 2, 512, 7, 512, 2, 513, 7, 513, 2, 514, 7, 514, 2, 515, 7, 515, 2, 516, 7, 516, 2, 517,
        7, 517, 2, 518, 7, 518, 2, 519, 7, 519, 2, 520, 7, 520, 2, 521, 7, 521, 2, 522, 7, 522, 2, 523,
        7, 523, 2, 524, 7, 524, 2, 525, 7, 525, 2, 526, 7, 526, 2, 527, 7, 527, 2, 528, 7, 528, 2, 529,
        7, 529, 2, 530, 7, 530, 2, 531, 7, 531, 2, 532, 7, 532, 2, 533, 7, 533, 2, 534, 7, 534, 2, 535,
        7, 535, 2, 536, 7, 536, 2, 537, 7, 537, 2, 538, 7, 538, 2, 539, 7, 539, 2, 540, 7, 540, 2, 541,
        7, 541, 2, 542, 7, 542, 2, 543, 7, 543, 2, 544, 7, 544, 2, 545, 7, 545, 2, 546, 7, 546, 2, 547,
        7, 547, 2, 548, 7, 548, 2, 549, 7, 549, 2, 550, 7, 550, 2, 551, 7, 551, 2, 552, 7, 552, 2, 553,
        7, 553, 2, 554, 7, 554, 2, 555, 7, 555, 2, 556, 7, 556, 2, 557, 7, 557, 2, 558, 7, 558, 2, 559,
        7, 559, 2, 560, 7, 560, 2, 561, 7, 561, 2, 562, 7, 562, 2, 563, 7, 563, 2, 564, 7, 564, 2, 565,
        7, 565, 2, 566, 7, 566, 2, 567, 7, 567, 2, 568, 7, 568, 2, 569, 7, 569, 2, 570, 7, 570, 2, 571,
        7, 571, 2, 572, 7, 572, 2, 573, 7, 573, 2, 574, 7, 574, 2, 575, 7, 575, 2, 576, 7, 576, 2, 577,
        7, 577, 2, 578, 7, 578, 2, 579, 7, 579, 2, 580, 7, 580, 2, 581, 7, 581, 2, 582, 7, 582, 2, 583,
        7, 583, 2, 584, 7, 584, 2, 585, 7, 585, 2, 586, 7, 586, 2, 587, 7, 587, 2, 588, 7, 588, 2, 589,
        7, 589, 2, 590, 7, 590, 2, 591, 7, 591, 2, 592, 7, 592, 2, 593, 7, 593, 2, 594, 7, 594, 2, 595,
        7, 595, 2, 596, 7, 596, 2, 597, 7, 597, 2, 598, 7, 598, 2, 599, 7, 599, 2, 600, 7, 600, 2, 601,
        7, 601, 2, 602, 7, 602, 2, 603, 7, 603, 2, 604, 7, 604, 2, 605, 7, 605, 2, 606, 7, 606, 2, 607,
        7, 607, 2, 608, 7, 608, 2, 609, 7, 609, 2, 610, 7, 610, 2, 611, 7, 611, 2, 612, 7, 612, 2, 613,
        7, 613, 2, 614, 7, 614, 2, 615, 7, 615, 2, 616, 7, 616, 2, 617, 7, 617, 2, 618, 7, 618, 2, 619,
        7, 619, 2, 620, 7, 620, 2, 621, 7, 621, 2, 622, 7, 622, 2, 623, 7, 623, 2, 624, 7, 624, 2, 625,
        7, 625, 2, 626, 7, 626, 2, 627, 7, 627, 2, 628, 7, 628, 2, 629, 7, 629, 2, 630, 7, 630, 2, 631,
        7, 631, 2, 632, 7, 632, 2, 633, 7, 633, 2, 634, 7, 634, 2, 635, 7, 635, 2, 636, 7, 636, 2, 637,
        7, 637, 2, 638, 7, 638, 2, 639, 7, 639, 2, 640, 7, 640, 2, 641, 7, 641, 2, 642, 7, 642, 2, 643,
        7, 643, 2, 644, 7, 644, 2, 645, 7, 645, 2, 646, 7, 646, 2, 647, 7, 647, 2, 648, 7, 648, 2, 649,
        7, 649, 2, 650, 7, 650, 2, 651, 7, 651, 2, 652, 7, 652, 2, 653, 7, 653, 2, 654, 7, 654, 2, 655,
        7, 655, 2, 656, 7, 656, 2, 657, 7, 657, 2, 658, 7, 658, 2, 659, 7, 659, 2, 660, 7, 660, 2, 661,
        7, 661, 2, 662, 7, 662, 2, 663, 7, 663, 2, 664, 7, 664, 2, 665, 7, 665, 2, 666, 7, 666, 2, 667,
        7, 667, 2, 668, 7, 668, 2, 669, 7, 669, 2, 670, 7, 670, 2, 671, 7, 671, 2, 672, 7, 672, 2, 673,
        7, 673, 2, 674, 7, 674, 2, 675, 7, 675, 2, 676, 7, 676, 2, 677, 7, 677, 2, 678, 7, 678, 2, 679,
        7, 679, 2, 680, 7, 680, 2, 681, 7, 681, 2, 682, 7, 682, 2, 683, 7, 683, 2, 684, 7, 684, 2, 685,
        7, 685, 2, 686, 7, 686, 2, 687, 7, 687, 2, 688, 7, 688, 2, 689, 7, 689, 2, 690, 7, 690, 2, 691,
        7, 691, 2, 692, 7, 692, 2, 693, 7, 693, 2, 694, 7, 694, 2, 695, 7, 695, 2, 696, 7, 696, 2, 697,
        7, 697, 2, 698, 7, 698, 2, 699, 7, 699, 2, 700, 7, 700, 2, 701, 7, 701, 2, 702, 7, 702, 2, 703,
        7, 703, 2, 704, 7, 704, 2, 705, 7, 705, 2, 706, 7, 706, 2, 707, 7, 707, 2, 708, 7, 708, 2, 709,
        7, 709, 2, 710, 7, 710, 2, 711, 7, 711, 2, 712, 7, 712, 2, 713, 7, 713, 2, 714, 7, 714, 2, 715,
        7, 715, 2, 716, 7, 716, 2, 717, 7, 717, 2, 718, 7, 718, 2, 719, 7, 719, 2, 720, 7, 720, 2, 721,
        7, 721, 2, 722, 7, 722, 2, 723, 7, 723, 2, 724, 7, 724, 2, 725, 7, 725, 1, 0, 1, 0, 3, 0, 1455,
        8, 0, 1, 0, 3, 0, 1458, 8, 0, 3, 0, 1460, 8, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1537, 8, 1, 1, 2, 1, 2, 1, 2,
        1, 2, 1, 2, 1, 2, 3, 2, 1545, 8, 2, 1, 2, 1, 2, 1, 2, 3, 2, 1550, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
        2, 1, 2, 1, 2, 3, 2, 1560, 8, 2, 1, 3, 1, 3, 1, 3, 4, 3, 1565, 8, 3, 11, 3, 12, 3, 1566, 1, 4, 1, 4,
        1, 4, 1, 4, 3, 4, 1573, 8, 4, 1, 4, 3, 4, 1576, 8, 4, 1, 5, 3, 5, 1579, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5,
        1, 5, 3, 5, 1586, 8, 5, 1, 5, 1, 5, 1, 5, 3, 5, 1591, 8, 5, 1, 5, 3, 5, 1594, 8, 5, 1, 5, 1, 5, 1, 5,
        3, 5, 1599, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 1605, 8, 5, 3, 5, 1607, 8, 5, 1, 5, 1, 5, 3, 5, 1611,
        8, 5, 1, 5, 1, 5, 3, 5, 1615, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 1624, 8, 6, 1, 7, 1,
        7, 3, 7, 1628, 8, 7, 1, 7, 5, 7, 1631, 8, 7, 10, 7, 12, 7, 1634, 9, 7, 1, 8, 1, 8, 1, 8, 3, 8, 1639,
        8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 3, 10, 1646, 8, 10, 1, 10, 1, 10, 1, 10, 3, 10, 1651, 8, 10, 1,
        11, 1, 11, 1, 11, 3, 11, 1656, 8, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 1663, 8, 11, 1, 11,
        3, 11, 1666, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 1672, 8, 12, 1, 12, 3, 12, 1675, 8, 12, 1,
        13, 1, 13, 1, 13, 5, 13, 1680, 8, 13, 10, 13, 12, 13, 1683, 9, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1,
        14, 1, 14, 1, 14, 3, 14, 1692, 8, 14, 1, 15, 1, 15, 1, 15, 3, 15, 1697, 8, 15, 1, 15, 1, 15, 1, 15,
        3, 15, 1702, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 1710, 8, 15, 1, 15, 1, 15, 1,
        15, 1, 15, 3, 15, 1716, 8, 15, 1, 15, 1, 15, 3, 15, 1720, 8, 15, 1, 15, 1, 15, 1, 15, 3, 15, 1725,
        8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 5, 15, 1732, 8, 15, 10, 15, 12, 15, 1735, 9, 15, 1, 15,
        1, 15, 1, 15, 3, 15, 1740, 8, 15, 1, 15, 1, 15, 5, 15, 1744, 8, 15, 10, 15, 12, 15, 1747, 9, 15,
        1, 15, 1, 15, 1, 15, 3, 15, 1752, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 1761,
        8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 1767, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
        15, 3, 15, 1776, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15,
        1788, 8, 15, 1, 16, 1, 16, 3, 16, 1792, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 1798, 8, 16, 5,
        16, 1800, 8, 16, 10, 16, 12, 16, 1803, 9, 16, 1, 17, 1, 17, 1, 17, 3, 17, 1808, 8, 17, 1, 18, 1,
        18, 3, 18, 1812, 8, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1817, 8, 18, 1, 18, 3, 18, 1820, 8, 18, 1, 18,
        1, 18, 1, 18, 1, 18, 3, 18, 1826, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1832, 8, 18, 1, 18, 1,
        18, 1, 18, 1, 18, 3, 18, 1838, 8, 18, 1, 18, 1, 18, 3, 18, 1842, 8, 18, 1, 18, 1, 18, 1, 18, 3, 18,
        1847, 8, 18, 1, 18, 1, 18, 3, 18, 1851, 8, 18, 1, 18, 1, 18, 3, 18, 1855, 8, 18, 1, 18, 1, 18, 1,
        18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1871, 8, 18,
        1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1879, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1,
        18, 3, 18, 1887, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1894, 8, 18, 1, 18, 1, 18, 1, 18,
        1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1,
        18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1921, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18,
        1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1936, 8, 18, 1, 18, 3, 18, 1939,
        8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 1945, 8, 18, 1, 19, 1, 19, 1, 19, 3, 19, 1950, 8, 19, 1,
        20, 1, 20, 1, 21, 1, 21, 3, 21, 1956, 8, 21, 1, 21, 1, 21, 1, 21, 3, 21, 1961, 8, 21, 5, 21, 1963,
        8, 21, 10, 21, 12, 21, 1966, 9, 21, 1, 22, 1, 22, 3, 22, 1970, 8, 22, 1, 22, 1, 22, 3, 22, 1974,
        8, 22, 1, 23, 1, 23, 3, 23, 1978, 8, 23, 1, 23, 1, 23, 3, 23, 1982, 8, 23, 1, 24, 1, 24, 3, 24, 1986,
        8, 24, 1, 24, 1, 24, 3, 24, 1990, 8, 24, 3, 24, 1992, 8, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1,
        26, 1, 27, 1, 27, 3, 27, 2002, 8, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 2010, 8, 28,
        1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 3, 28, 2017, 8, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3,
        29, 2025, 8, 29, 1, 30, 1, 30, 3, 30, 2029, 8, 30, 1, 30, 5, 30, 2032, 8, 30, 10, 30, 12, 30, 2035,
        9, 30, 1, 31, 1, 31, 1, 32, 1, 32, 3, 32, 2041, 8, 32, 1, 32, 5, 32, 2044, 8, 32, 10, 32, 12, 32,
        2047, 9, 32, 1, 33, 1, 33, 3, 33, 2051, 8, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1,
        33, 3, 33, 2061, 8, 33, 1, 34, 1, 34, 3, 34, 2065, 8, 34, 1, 34, 1, 34, 1, 34, 3, 34, 2070, 8, 34,
        1, 35, 3, 35, 2073, 8, 35, 1, 35, 3, 35, 2076, 8, 35, 1, 35, 3, 35, 2079, 8, 35, 1, 35, 1, 35, 1,
        35, 1, 35, 1, 36, 3, 36, 2086, 8, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 3, 37, 2093, 8, 37, 1, 38,
        1, 38, 3, 38, 2097, 8, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1,
        39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 2122,
        8, 39, 3, 39, 2124, 8, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 2132, 8, 39, 3, 39, 2134,
        8, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1,
        40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 2154, 8, 40, 1, 41, 1, 41, 3, 41, 2158, 8, 41, 1, 41, 1, 41,
        5, 41, 2162, 8, 41, 10, 41, 12, 41, 2165, 9, 41, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 2171, 8, 42,
        1, 43, 3, 43, 2174, 8, 43, 1, 43, 1, 43, 3, 43, 2178, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3,
        43, 2185, 8, 43, 1, 43, 3, 43, 2188, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43,
        2197, 8, 43, 1, 44, 1, 44, 1, 44, 5, 44, 2202, 8, 44, 10, 44, 12, 44, 2205, 9, 44, 1, 45, 1, 45,
        3, 45, 2209, 8, 45, 1, 46, 3, 46, 2212, 8, 46, 1, 46, 1, 46, 1, 47, 3, 47, 2217, 8, 47, 1, 47, 1,
        47, 1, 48, 1, 48, 1, 48, 3, 48, 2224, 8, 48, 1, 48, 3, 48, 2227, 8, 48, 1, 49, 1, 49, 3, 49, 2231,
        8, 49, 1, 50, 1, 50, 1, 50, 1, 50, 3, 50, 2237, 8, 50, 1, 50, 3, 50, 2240, 8, 50, 1, 50, 1, 50, 1,
        51, 3, 51, 2245, 8, 51, 1, 51, 1, 51, 3, 51, 2249, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 5, 51,
        2256, 8, 51, 10, 51, 12, 51, 2259, 9, 51, 3, 51, 2261, 8, 51, 1, 51, 1, 51, 5, 51, 2265, 8, 51,
        10, 51, 12, 51, 2268, 9, 51, 1, 51, 1, 51, 1, 52, 3, 52, 2273, 8, 52, 1, 52, 1, 52, 3, 52, 2277,
        8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 5, 52, 2284, 8, 52, 10, 52, 12, 52, 2287, 9, 52, 3, 52,
        2289, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 5, 52, 2295, 8, 52, 10, 52, 12, 52, 2298, 9, 52, 1, 52,
        1, 52, 1, 53, 3, 53, 2303, 8, 53, 1, 53, 1, 53, 3, 53, 2307, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1,
        53, 1, 53, 1, 54, 1, 54, 3, 54, 2317, 8, 54, 1, 54, 3, 54, 2320, 8, 54, 1, 55, 4, 55, 2323, 8, 55,
        11, 55, 12, 55, 2324, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56,
        1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 2344, 8, 56, 1, 57, 3, 57, 2347, 8, 57, 1, 57, 3,
        57, 2350, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 2356, 8, 57, 1, 57, 3, 57, 2359, 8, 57, 3, 57,
        2361, 8, 57, 1, 57, 1, 57, 5, 57, 2365, 8, 57, 10, 57, 12, 57, 2368, 9, 57, 1, 57, 1, 57, 1, 57,
        1, 57, 1, 57, 5, 57, 2375, 8, 57, 10, 57, 12, 57, 2378, 9, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57,
        5, 57, 2385, 8, 57, 10, 57, 12, 57, 2388, 9, 57, 3, 57, 2390, 8, 57, 1, 57, 3, 57, 2393, 8, 57,
        1, 58, 1, 58, 3, 58, 2397, 8, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 2405, 8, 58, 1,
        59, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 3, 60, 2418, 8, 60, 1, 61,
        1, 61, 3, 61, 2422, 8, 61, 1, 61, 5, 61, 2425, 8, 61, 10, 61, 12, 61, 2428, 9, 61, 1, 62, 1, 62,
        1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 2436, 8, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1,
        63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 5, 64, 2451, 8, 64, 10, 64, 12, 64, 2454, 9, 64, 1, 64, 1,
        64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65,
        3, 65, 2472, 8, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 2481, 8, 66, 1, 66, 3,
        66, 2484, 8, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 2492, 8, 67, 1, 68, 1, 68, 1, 68,
        3, 68, 2497, 8, 68, 1, 68, 1, 68, 3, 68, 2501, 8, 68, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 3, 70, 2508,
        8, 70, 1, 70, 5, 70, 2511, 8, 70, 10, 70, 12, 70, 2514, 9, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71,
        1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 3, 71, 2527, 8, 71, 1, 72, 1, 72, 3, 72, 2531, 8, 72, 1,
        72, 1, 72, 1, 73, 1, 73, 3, 73, 2537, 8, 73, 1, 73, 1, 73, 1, 74, 1, 74, 3, 74, 2543, 8, 74, 1, 74,
        1, 74, 1, 75, 1, 75, 3, 75, 2549, 8, 75, 1, 75, 1, 75, 1, 76, 1, 76, 3, 76, 2555, 8, 76, 1, 76, 1,
        76, 1, 77, 1, 77, 3, 77, 2561, 8, 77, 1, 77, 1, 77, 1, 78, 3, 78, 2566, 8, 78, 1, 78, 1, 78, 3, 78,
        2570, 8, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 80, 1, 80, 3, 80, 2578, 8, 80, 1, 80, 1, 80, 1, 81, 1,
        81, 3, 81, 2584, 8, 81, 1, 81, 1, 81, 1, 82, 1, 82, 3, 82, 2590, 8, 82, 1, 82, 1, 82, 1, 83, 1, 83,
        3, 83, 2596, 8, 83, 1, 83, 1, 83, 1, 84, 3, 84, 2601, 8, 84, 1, 84, 3, 84, 2604, 8, 84, 1, 84, 3,
        84, 2607, 8, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 3, 85, 2616, 8, 85, 1, 85, 3, 85,
        2619, 8, 85, 1, 86, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 88, 3, 88, 2630, 8, 88, 1,
        88, 1, 88, 3, 88, 2634, 8, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 3, 88,
        2645, 8, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 90, 3, 90, 2653, 8, 90, 1, 90, 1, 90, 3, 90, 2657,
        8, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 3, 90, 2666, 8, 90, 1, 90, 3, 90, 2669, 8,
        90, 1, 90, 1, 90, 1, 90, 1, 90, 3, 90, 2675, 8, 90, 3, 90, 2677, 8, 90, 1, 90, 1, 90, 3, 90, 2681,
        8, 90, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91, 3, 91, 2688, 8, 91, 1, 91, 1, 91, 1, 92, 1, 92, 1, 92, 1,
        92, 1, 92, 1, 92, 1, 92, 5, 92, 2699, 8, 92, 10, 92, 12, 92, 2702, 9, 92, 1, 92, 1, 92, 1, 92, 1,
        92, 3, 92, 2708, 8, 92, 1, 92, 1, 92, 5, 92, 2712, 8, 92, 10, 92, 12, 92, 2715, 9, 92, 3, 92, 2717,
        8, 92, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1,
        93, 1, 93, 3, 93, 2734, 8, 93, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94,
        1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 3, 94, 2753, 8, 94, 1, 95, 1, 95, 3, 95, 2757, 8,
        95, 1, 95, 1, 95, 1, 96, 1, 96, 3, 96, 2763, 8, 96, 1, 96, 1, 96, 1, 97, 1, 97, 3, 97, 2769, 8, 97,
        1, 97, 1, 97, 1, 98, 1, 98, 3, 98, 2775, 8, 98, 1, 98, 1, 98, 1, 99, 3, 99, 2780, 8, 99, 1, 99, 1,
        99, 1, 99, 1, 99, 1, 99, 3, 99, 2787, 8, 99, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 3, 100, 2794,
        8, 100, 1, 100, 5, 100, 2797, 8, 100, 10, 100, 12, 100, 2800, 9, 100, 3, 100, 2802, 8, 100,
        1, 101, 1, 101, 3, 101, 2806, 8, 101, 1, 102, 1, 102, 3, 102, 2810, 8, 102, 1, 102, 1, 102, 1,
        103, 3, 103, 2815, 8, 103, 1, 103, 1, 103, 3, 103, 2819, 8, 103, 1, 103, 1, 103, 3, 103, 2823,
        8, 103, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 2829, 8, 104, 1, 104, 5, 104, 2832, 8, 104, 10,
        104, 12, 104, 2835, 9, 104, 3, 104, 2837, 8, 104, 1, 105, 1, 105, 3, 105, 2841, 8, 105, 1, 105,
        1, 105, 1, 106, 1, 106, 3, 106, 2847, 8, 106, 1, 106, 1, 106, 3, 106, 2851, 8, 106, 1, 107, 1,
        107, 3, 107, 2855, 8, 107, 1, 107, 1, 107, 1, 108, 1, 108, 1, 108, 1, 108, 3, 108, 2863, 8, 108,
        1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 1, 109, 3, 109, 2871, 8, 109, 1, 110, 1, 110, 1, 110,
        1, 110, 1, 110, 5, 110, 2878, 8, 110, 10, 110, 12, 110, 2881, 9, 110, 1, 111, 1, 111, 1, 111,
        1, 111, 1, 112, 1, 112, 3, 112, 2889, 8, 112, 1, 112, 1, 112, 1, 113, 1, 113, 1, 113, 1, 113,
        1, 113, 1, 114, 1, 114, 1, 114, 1, 114, 3, 114, 2902, 8, 114, 1, 114, 3, 114, 2905, 8, 114, 1,
        115, 3, 115, 2908, 8, 115, 1, 115, 1, 115, 5, 115, 2912, 8, 115, 10, 115, 12, 115, 2915, 9,
        115, 1, 115, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 2922, 8, 115, 1, 115, 1, 115, 1, 115, 3,
        115, 2927, 8, 115, 1, 115, 3, 115, 2930, 8, 115, 1, 115, 3, 115, 2933, 8, 115, 1, 115, 3, 115,
        2936, 8, 115, 1, 115, 3, 115, 2939, 8, 115, 3, 115, 2941, 8, 115, 1, 115, 1, 115, 1, 115, 1,
        115, 3, 115, 2947, 8, 115, 3, 115, 2949, 8, 115, 1, 116, 1, 116, 1, 116, 1, 116, 1, 116, 1, 117,
        1, 117, 1, 118, 1, 118, 1, 118, 1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 2965, 8, 119, 1, 119,
        1, 119, 1, 119, 1, 119, 1, 119, 3, 119, 2972, 8, 119, 1, 119, 3, 119, 2975, 8, 119, 3, 119, 2977,
        8, 119, 3, 119, 2979, 8, 119, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120, 1, 120,
        3, 120, 2989, 8, 120, 3, 120, 2991, 8, 120, 1, 121, 1, 121, 3, 121, 2995, 8, 121, 1, 121, 3,
        121, 2998, 8, 121, 1, 121, 3, 121, 3001, 8, 121, 1, 121, 1, 121, 3, 121, 3005, 8, 121, 1, 121,
        1, 121, 1, 121, 3, 121, 3010, 8, 121, 1, 121, 1, 121, 1, 121, 1, 121, 3, 121, 3016, 8, 121, 1,
        121, 3, 121, 3019, 8, 121, 1, 121, 3, 121, 3022, 8, 121, 1, 122, 1, 122, 1, 123, 1, 123, 3, 123,
        3028, 8, 123, 1, 123, 3, 123, 3031, 8, 123, 1, 123, 1, 123, 1, 124, 1, 124, 1, 124, 5, 124, 3038,
        8, 124, 10, 124, 12, 124, 3041, 9, 124, 1, 125, 1, 125, 1, 125, 1, 126, 1, 126, 1, 126, 1, 126,
        3, 126, 3050, 8, 126, 1, 126, 1, 126, 3, 126, 3054, 8, 126, 1, 126, 1, 126, 1, 126, 1, 126, 3,
        126, 3060, 8, 126, 1, 126, 1, 126, 3, 126, 3064, 8, 126, 3, 126, 3066, 8, 126, 1, 127, 1, 127,
        3, 127, 3070, 8, 127, 1, 127, 1, 127, 1, 127, 1, 127, 3, 127, 3076, 8, 127, 1, 127, 5, 127, 3079,
        8, 127, 10, 127, 12, 127, 3082, 9, 127, 1, 128, 1, 128, 3, 128, 3086, 8, 128, 1, 128, 1, 128,
        1, 128, 3, 128, 3091, 8, 128, 5, 128, 3093, 8, 128, 10, 128, 12, 128, 3096, 9, 128, 1, 129,
        1, 129, 1, 129, 3, 129, 3101, 8, 129, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 130, 1, 131,
        1, 131, 1, 131, 3, 131, 3112, 8, 131, 1, 131, 3, 131, 3115, 8, 131, 1, 131, 1, 131, 1, 131, 3,
        131, 3120, 8, 131, 1, 131, 1, 131, 1, 131, 1, 131, 3, 131, 3126, 8, 131, 1, 131, 3, 131, 3129,
        8, 131, 1, 131, 3, 131, 3132, 8, 131, 1, 131, 3, 131, 3135, 8, 131, 1, 131, 3, 131, 3138, 8,
        131, 1, 131, 1, 131, 1, 132, 1, 132, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 134, 1, 134, 1,
        134, 3, 134, 3152, 8, 134, 1, 134, 3, 134, 3155, 8, 134, 1, 134, 1, 134, 3, 134, 3159, 8, 134,
        1, 135, 1, 135, 3, 135, 3163, 8, 135, 1, 135, 1, 135, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136,
        3171, 8, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 3, 136, 3179, 8, 136, 5, 136, 3181,
        8, 136, 10, 136, 12, 136, 3184, 9, 136, 1, 137, 1, 137, 3, 137, 3188, 8, 137, 1, 137, 3, 137,
        3191, 8, 137, 1, 137, 1, 137, 3, 137, 3195, 8, 137, 1, 137, 1, 137, 1, 137, 1, 137, 3, 137, 3201,
        8, 137, 1, 138, 1, 138, 3, 138, 3205, 8, 138, 1, 138, 3, 138, 3208, 8, 138, 1, 139, 1, 139, 1,
        139, 1, 139, 1, 139, 1, 139, 1, 139, 3, 139, 3217, 8, 139, 1, 139, 1, 139, 1, 139, 1, 139, 1,
        139, 1, 139, 1, 139, 1, 139, 3, 139, 3227, 8, 139, 1, 140, 1, 140, 3, 140, 3231, 8, 140, 1, 140,
        1, 140, 3, 140, 3235, 8, 140, 1, 140, 3, 140, 3238, 8, 140, 1, 140, 3, 140, 3241, 8, 140, 1,
        140, 1, 140, 3, 140, 3245, 8, 140, 1, 140, 1, 140, 3, 140, 3249, 8, 140, 1, 140, 3, 140, 3252,
        8, 140, 3, 140, 3254, 8, 140, 1, 141, 1, 141, 1, 141, 1, 141, 3, 141, 3260, 8, 141, 1, 141, 1,
        141, 3, 141, 3264, 8, 141, 3, 141, 3266, 8, 141, 1, 141, 1, 141, 3, 141, 3270, 8, 141, 1, 141,
        1, 141, 3, 141, 3274, 8, 141, 5, 141, 3276, 8, 141, 10, 141, 12, 141, 3279, 9, 141, 1, 142,
        1, 142, 1, 142, 1, 142, 1, 142, 3, 142, 3286, 8, 142, 1, 142, 1, 142, 3, 142, 3290, 8, 142, 1,
        143, 1, 143, 1, 143, 3, 143, 3295, 8, 143, 1, 143, 1, 143, 1, 144, 1, 144, 1, 144, 1, 144, 1,
        144, 3, 144, 3304, 8, 144, 1, 145, 1, 145, 5, 145, 3308, 8, 145, 10, 145, 12, 145, 3311, 9,
        145, 1, 145, 1, 145, 3, 145, 3315, 8, 145, 1, 145, 3, 145, 3318, 8, 145, 1, 145, 3, 145, 3321,
        8, 145, 1, 145, 3, 145, 3324, 8, 145, 1, 145, 3, 145, 3327, 8, 145, 1, 145, 3, 145, 3330, 8,
        145, 1, 146, 1, 146, 1, 147, 1, 147, 1, 148, 1, 148, 1, 148, 1, 149, 1, 149, 1, 149, 1, 150, 1,
        150, 1, 150, 3, 150, 3345, 8, 150, 1, 151, 1, 151, 3, 151, 3349, 8, 151, 1, 152, 1, 152, 1, 152,
        1, 152, 3, 152, 3355, 8, 152, 1, 152, 3, 152, 3358, 8, 152, 1, 152, 3, 152, 3361, 8, 152, 1,
        152, 1, 152, 1, 152, 1, 152, 3, 152, 3367, 8, 152, 1, 152, 1, 152, 1, 152, 3, 152, 3372, 8, 152,
        5, 152, 3374, 8, 152, 10, 152, 12, 152, 3377, 9, 152, 3, 152, 3379, 8, 152, 1, 153, 1, 153,
        1, 153, 1, 153, 1, 153, 3, 153, 3386, 8, 153, 3, 153, 3388, 8, 153, 1, 153, 1, 153, 1, 154, 1,
        154, 1, 154, 1, 155, 1, 155, 1, 155, 1, 155, 5, 155, 3399, 8, 155, 10, 155, 12, 155, 3402, 9,
        155, 1, 156, 1, 156, 1, 156, 1, 156, 1, 157, 1, 157, 1, 157, 1, 157, 1, 158, 3, 158, 3413, 8,
        158, 1, 158, 1, 158, 1, 158, 3, 158, 3418, 8, 158, 1, 158, 3, 158, 3421, 8, 158, 1, 158, 3, 158,
        3424, 8, 158, 1, 159, 1, 159, 1, 159, 3, 159, 3429, 8, 159, 1, 160, 1, 160, 1, 161, 1, 161, 3,
        161, 3435, 8, 161, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 1,
        162, 1, 162, 1, 162, 1, 162, 1, 162, 3, 162, 3451, 8, 162, 1, 163, 1, 163, 1, 163, 1, 163, 1,
        163, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1,
        164, 1, 164, 3, 164, 3471, 8, 164, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 1, 165, 3,
        165, 3480, 8, 165, 1, 166, 1, 166, 3, 166, 3484, 8, 166, 1, 166, 1, 166, 1, 166, 5, 166, 3489,
        8, 166, 10, 166, 12, 166, 3492, 9, 166, 1, 167, 1, 167, 3, 167, 3496, 8, 167, 1, 167, 1, 167,
        1, 167, 1, 168, 1, 168, 1, 168, 1, 168, 3, 168, 3505, 8, 168, 1, 169, 1, 169, 1, 169, 1, 170,
        1, 170, 1, 170, 1, 170, 1, 171, 1, 171, 1, 172, 1, 172, 1, 172, 3, 172, 3519, 8, 172, 1, 173,
        1, 173, 1, 173, 5, 173, 3524, 8, 173, 10, 173, 12, 173, 3527, 9, 173, 1, 174, 1, 174, 1, 174,
        1, 174, 5, 174, 3533, 8, 174, 10, 174, 12, 174, 3536, 9, 174, 1, 175, 1, 175, 1, 175, 1, 176,
        1, 176, 1, 176, 3, 176, 3544, 8, 176, 1, 176, 1, 176, 1, 177, 1, 177, 3, 177, 3550, 8, 177, 1,
        178, 4, 178, 3553, 8, 178, 11, 178, 12, 178, 3554, 1, 179, 1, 179, 1, 179, 1, 179, 3, 179, 3561,
        8, 179, 1, 179, 3, 179, 3564, 8, 179, 1, 179, 1, 179, 1, 179, 1, 179, 3, 179, 3570, 8, 179, 1,
        180, 1, 180, 1, 181, 1, 181, 1, 181, 3, 181, 3577, 8, 181, 1, 182, 1, 182, 3, 182, 3581, 8, 182,
        1, 182, 1, 182, 5, 182, 3585, 8, 182, 10, 182, 12, 182, 3588, 9, 182, 1, 183, 1, 183, 1, 183,
        3, 183, 3593, 8, 183, 3, 183, 3595, 8, 183, 1, 184, 3, 184, 3598, 8, 184, 1, 184, 1, 184, 3,
        184, 3602, 8, 184, 1, 185, 1, 185, 1, 185, 1, 186, 1, 186, 1, 186, 1, 186, 1, 186, 3, 186, 3612,
        8, 186, 1, 186, 1, 186, 1, 186, 3, 186, 3617, 8, 186, 1, 186, 5, 186, 3620, 8, 186, 10, 186,
        12, 186, 3623, 9, 186, 1, 187, 1, 187, 5, 187, 3627, 8, 187, 10, 187, 12, 187, 3630, 9, 187,
        1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 3, 188, 3638, 8, 188, 1, 188, 1, 188, 1, 188,
        1, 188, 1, 188, 1, 188, 3, 188, 3646, 8, 188, 1, 188, 1, 188, 1, 188, 3, 188, 3651, 8, 188, 1,
        189, 1, 189, 3, 189, 3655, 8, 189, 1, 189, 1, 189, 1, 189, 1, 189, 3, 189, 3661, 8, 189, 1, 189,
        3, 189, 3664, 8, 189, 1, 190, 3, 190, 3667, 8, 190, 1, 190, 1, 190, 3, 190, 3671, 8, 190, 1,
        191, 1, 191, 3, 191, 3675, 8, 191, 1, 191, 1, 191, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1,
        192, 3, 192, 3685, 8, 192, 1, 193, 1, 193, 3, 193, 3689, 8, 193, 1, 193, 3, 193, 3692, 8, 193,
        1, 193, 3, 193, 3695, 8, 193, 1, 194, 1, 194, 1, 194, 3, 194, 3700, 8, 194, 1, 194, 1, 194, 1,
        195, 1, 195, 3, 195, 3706, 8, 195, 1, 195, 3, 195, 3709, 8, 195, 1, 195, 1, 195, 1, 195, 1, 195,
        3, 195, 3715, 8, 195, 1, 195, 3, 195, 3718, 8, 195, 3, 195, 3720, 8, 195, 1, 196, 1, 196, 1,
        196, 3, 196, 3725, 8, 196, 1, 196, 1, 196, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 1,
        197, 1, 197, 3, 197, 3737, 8, 197, 1, 198, 1, 198, 1, 198, 1, 198, 1, 198, 5, 198, 3744, 8, 198,
        10, 198, 12, 198, 3747, 9, 198, 1, 198, 1, 198, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199,
        1, 199, 1, 199, 3, 199, 3759, 8, 199, 1, 199, 3, 199, 3762, 8, 199, 1, 199, 1, 199, 1, 199, 3,
        199, 3767, 8, 199, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 3, 199, 3774, 8, 199, 1, 200, 1, 200,
        3, 200, 3778, 8, 200, 1, 200, 3, 200, 3781, 8, 200, 1, 201, 1, 201, 1, 201, 1, 201, 3, 201, 3787,
        8, 201, 1, 202, 1, 202, 1, 202, 1, 202, 1, 203, 1, 203, 1, 203, 1, 203, 1, 204, 1, 204, 1, 204,
        1, 204, 3, 204, 3801, 8, 204, 1, 205, 1, 205, 1, 206, 1, 206, 1, 206, 3, 206, 3808, 8, 206, 1,
        206, 1, 206, 1, 207, 1, 207, 1, 207, 5, 207, 3815, 8, 207, 10, 207, 12, 207, 3818, 9, 207, 1,
        208, 1, 208, 1, 208, 3, 208, 3823, 8, 208, 1, 208, 1, 208, 1, 208, 1, 208, 1, 208, 1, 208, 1,
        208, 3, 208, 3832, 8, 208, 1, 208, 1, 208, 3, 208, 3836, 8, 208, 1, 208, 1, 208, 3, 208, 3840,
        8, 208, 1, 209, 1, 209, 1, 210, 1, 210, 1, 211, 1, 211, 1, 211, 1, 211, 3, 211, 3850, 8, 211,
        3, 211, 3852, 8, 211, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212, 1, 212, 3, 212, 3860, 8, 212, 1,
        213, 1, 213, 1, 213, 5, 213, 3865, 8, 213, 10, 213, 12, 213, 3868, 9, 213, 1, 214, 1, 214, 3,
        214, 3872, 8, 214, 1, 215, 3, 215, 3875, 8, 215, 1, 215, 1, 215, 3, 215, 3879, 8, 215, 1, 215,
        3, 215, 3882, 8, 215, 1, 215, 1, 215, 1, 215, 1, 215, 3, 215, 3888, 8, 215, 1, 215, 3, 215, 3891,
        8, 215, 1, 215, 3, 215, 3894, 8, 215, 1, 216, 1, 216, 1, 216, 1, 216, 3, 216, 3900, 8, 216, 1,
        217, 1, 217, 1, 217, 5, 217, 3905, 8, 217, 10, 217, 12, 217, 3908, 9, 217, 1, 217, 1, 217, 3,
        217, 3912, 8, 217, 1, 217, 1, 217, 3, 217, 3916, 8, 217, 1, 217, 3, 217, 3919, 8, 217, 1, 217,
        3, 217, 3922, 8, 217, 1, 217, 3, 217, 3925, 8, 217, 3, 217, 3927, 8, 217, 1, 218, 1, 218, 3,
        218, 3931, 8, 218, 1, 219, 1, 219, 1, 219, 1, 219, 1, 219, 3, 219, 3938, 8, 219, 1, 220, 1, 220,
        1, 220, 1, 220, 3, 220, 3944, 8, 220, 1, 220, 1, 220, 3, 220, 3948, 8, 220, 1, 220, 1, 220, 1,
        220, 3, 220, 3953, 8, 220, 1, 220, 3, 220, 3956, 8, 220, 1, 220, 3, 220, 3959, 8, 220, 1, 220,
        3, 220, 3962, 8, 220, 3, 220, 3964, 8, 220, 1, 220, 1, 220, 1, 220, 3, 220, 3969, 8, 220, 1,
        221, 1, 221, 1, 221, 1, 221, 1, 221, 5, 221, 3976, 8, 221, 10, 221, 12, 221, 3979, 9, 221, 1,
        221, 1, 221, 1, 221, 1, 221, 1, 221, 1, 221, 3, 221, 3987, 8, 221, 1, 222, 1, 222, 3, 222, 3991,
        8, 222, 1, 222, 1, 222, 1, 223, 1, 223, 3, 223, 3997, 8, 223, 1, 223, 3, 223, 4000, 8, 223, 1,
        223, 3, 223, 4003, 8, 223, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 4009, 8, 224, 1, 224, 1, 224,
        1, 224, 1, 224, 1, 224, 3, 224, 4016, 8, 224, 3, 224, 4018, 8, 224, 1, 224, 1, 224, 1, 224, 1,
        224, 1, 224, 1, 224, 3, 224, 4026, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 4032, 8, 224,
        3, 224, 4034, 8, 224, 1, 225, 1, 225, 1, 225, 1, 226, 1, 226, 1, 226, 1, 226, 1, 226, 3, 226,
        4044, 8, 226, 3, 226, 4046, 8, 226, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 3,
        227, 4055, 8, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 5, 227, 4062, 8, 227, 10, 227, 12,
        227, 4065, 9, 227, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227, 3, 227, 4072, 8, 227, 1, 227, 1, 227,
        1, 227, 1, 227, 1, 227, 3, 227, 4079, 8, 227, 1, 228, 1, 228, 3, 228, 4083, 8, 228, 1, 228, 1,
        228, 3, 228, 4087, 8, 228, 1, 228, 3, 228, 4090, 8, 228, 3, 228, 4092, 8, 228, 1, 229, 1, 229,
        1, 229, 1, 229, 1, 229, 3, 229, 4099, 8, 229, 1, 230, 1, 230, 1, 230, 1, 230, 3, 230, 4105, 8,
        230, 1, 230, 1, 230, 1, 230, 1, 231, 1, 231, 1, 231, 1, 231, 3, 231, 4114, 8, 231, 1, 232, 1,
        232, 1, 232, 1, 232, 1, 232, 3, 232, 4121, 8, 232, 1, 233, 1, 233, 1, 233, 5, 233, 4126, 8, 233,
        10, 233, 12, 233, 4129, 9, 233, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234, 1, 234,
        3, 234, 4259, 8, 234, 1, 235, 1, 235, 1, 236, 1, 236, 1, 237, 1, 237, 1, 238, 1, 238, 1, 239,
        1, 239, 1, 240, 1, 240, 1, 241, 1, 241, 1, 242, 1, 242, 1, 243, 1, 243, 1, 244, 1, 244, 1, 245,
        1, 245, 1, 246, 1, 246, 1, 247, 1, 247, 1, 248, 1, 248, 1, 249, 1, 249, 1, 250, 1, 250, 1, 251,
        1, 251, 1, 252, 1, 252, 1, 253, 1, 253, 1, 254, 1, 254, 1, 255, 1, 255, 1, 256, 1, 256, 1, 257,
        1, 257, 1, 258, 1, 258, 1, 259, 1, 259, 1, 260, 1, 260, 3, 260, 4313, 8, 260, 1, 261, 1, 261,
        1, 262, 1, 262, 1, 262, 3, 262, 4320, 8, 262, 1, 263, 1, 263, 3, 263, 4324, 8, 263, 1, 264, 1,
        264, 1, 264, 1, 264, 1, 264, 1, 264, 1, 264, 1, 264, 1, 264, 1, 264, 1, 264, 1, 264, 1, 264, 1,
        264, 3, 264, 4340, 8, 264, 1, 265, 1, 265, 1, 266, 1, 266, 1, 267, 1, 267, 1, 267, 1, 267, 5,
        267, 4350, 8, 267, 10, 267, 12, 267, 4353, 9, 267, 3, 267, 4355, 8, 267, 1, 267, 1, 267, 1,
        268, 1, 268, 1, 268, 1, 268, 1, 268, 1, 268, 5, 268, 4365, 8, 268, 10, 268, 12, 268, 4368, 9,
        268, 1, 268, 3, 268, 4371, 8, 268, 1, 269, 1, 269, 1, 269, 1, 269, 3, 269, 4377, 8, 269, 1, 269,
        1, 269, 1, 269, 1, 269, 1, 269, 3, 269, 4384, 8, 269, 1, 269, 1, 269, 1, 269, 1, 269, 1, 269,
        3, 269, 4391, 8, 269, 1, 269, 1, 269, 1, 269, 1, 269, 1, 269, 3, 269, 4398, 8, 269, 1, 269, 1,
        269, 1, 269, 1, 269, 1, 269, 3, 269, 4405, 8, 269, 1, 269, 1, 269, 1, 269, 1, 269, 1, 269, 3,
        269, 4412, 8, 269, 1, 269, 1, 269, 1, 269, 1, 269, 1, 269, 3, 269, 4419, 8, 269, 1, 269, 3, 269,
        4422, 8, 269, 1, 270, 1, 270, 1, 270, 5, 270, 4427, 8, 270, 10, 270, 12, 270, 4430, 9, 270,
        1, 271, 1, 271, 1, 271, 5, 271, 4435, 8, 271, 10, 271, 12, 271, 4438, 9, 271, 1, 272, 1, 272,
        1, 272, 5, 272, 4443, 8, 272, 10, 272, 12, 272, 4446, 9, 272, 1, 273, 1, 273, 1, 274, 1, 274,
        1, 274, 5, 274, 4453, 8, 274, 10, 274, 12, 274, 4456, 9, 274, 1, 275, 1, 275, 1, 275, 3, 275,
        4461, 8, 275, 1, 275, 1, 275, 3, 275, 4465, 8, 275, 1, 275, 3, 275, 4468, 8, 275, 1, 275, 3,
        275, 4471, 8, 275, 1, 275, 3, 275, 4474, 8, 275, 1, 275, 3, 275, 4477, 8, 275, 1, 275, 3, 275,
        4480, 8, 275, 1, 276, 1, 276, 1, 276, 3, 276, 4485, 8, 276, 1, 276, 3, 276, 4488, 8, 276, 1,
        277, 1, 277, 1, 277, 1, 277, 1, 277, 3, 277, 4495, 8, 277, 1, 277, 1, 277, 5, 277, 4499, 8, 277,
        10, 277, 12, 277, 4502, 9, 277, 1, 278, 1, 278, 1, 278, 1, 278, 1, 279, 1, 279, 1, 279, 1, 279,
        1, 280, 1, 280, 1, 280, 1, 280, 1, 281, 1, 281, 1, 281, 1, 281, 1, 282, 1, 282, 1, 282, 5, 282,
        4523, 8, 282, 10, 282, 12, 282, 4526, 9, 282, 1, 283, 1, 283, 1, 284, 1, 284, 3, 284, 4532,
        8, 284, 1, 284, 3, 284, 4535, 8, 284, 1, 284, 1, 284, 1, 285, 1, 285, 1, 285, 5, 285, 4542, 8,
        285, 10, 285, 12, 285, 4545, 9, 285, 1, 286, 1, 286, 1, 286, 3, 286, 4550, 8, 286, 1, 287, 1,
        287, 1, 287, 1, 287, 1, 288, 1, 288, 1, 288, 1, 288, 1, 289, 1, 289, 1, 289, 1, 289, 1, 290, 1,
        290, 1, 291, 1, 291, 1, 291, 1, 291, 1, 291, 3, 291, 4571, 8, 291, 1, 291, 1, 291, 1, 291, 1,
        291, 3, 291, 4577, 8, 291, 1, 292, 1, 292, 1, 292, 1, 292, 3, 292, 4583, 8, 292, 1, 293, 1, 293,
        1, 293, 5, 293, 4588, 8, 293, 10, 293, 12, 293, 4591, 9, 293, 1, 294, 1, 294, 1, 294, 1, 294,
        1, 294, 3, 294, 4598, 8, 294, 1, 294, 1, 294, 1, 294, 1, 294, 3, 294, 4604, 8, 294, 1, 294, 1,
        294, 1, 294, 1, 294, 1, 294, 1, 294, 1, 294, 1, 294, 1, 294, 1, 294, 3, 294, 4616, 8, 294, 3,
        294, 4618, 8, 294, 1, 295, 1, 295, 1, 295, 1, 295, 3, 295, 4624, 8, 295, 1, 295, 1, 295, 3, 295,
        4628, 8, 295, 3, 295, 4630, 8, 295, 1, 296, 1, 296, 3, 296, 4634, 8, 296, 1, 296, 1, 296, 1,
        297, 1, 297, 1, 297, 1, 297, 1, 297, 1, 297, 1, 297, 3, 297, 4645, 8, 297, 1, 298, 1, 298, 1,
        298, 3, 298, 4650, 8, 298, 1, 298, 1, 298, 1, 298, 1, 298, 3, 298, 4656, 8, 298, 1, 298, 1, 298,
        1, 298, 1, 298, 1, 298, 3, 298, 4663, 8, 298, 1, 298, 3, 298, 4666, 8, 298, 1, 298, 3, 298, 4669,
        8, 298, 1, 298, 1, 298, 1, 298, 1, 298, 3, 298, 4675, 8, 298, 3, 298, 4677, 8, 298, 1, 298, 1,
        298, 1, 298, 1, 298, 1, 298, 1, 298, 3, 298, 4685, 8, 298, 1, 298, 3, 298, 4688, 8, 298, 3, 298,
        4690, 8, 298, 3, 298, 4692, 8, 298, 1, 299, 1, 299, 1, 299, 5, 299, 4697, 8, 299, 10, 299, 12,
        299, 4700, 9, 299, 1, 300, 1, 300, 1, 300, 1, 300, 1, 300, 1, 300, 1, 300, 1, 300, 3, 300, 4710,
        8, 300, 1, 300, 3, 300, 4713, 8, 300, 3, 300, 4715, 8, 300, 1, 300, 1, 300, 3, 300, 4719, 8,
        300, 1, 300, 1, 300, 1, 300, 3, 300, 4724, 8, 300, 3, 300, 4726, 8, 300, 1, 300, 1, 300, 1, 300,
        3, 300, 4731, 8, 300, 1, 300, 1, 300, 1, 300, 1, 300, 3, 300, 4737, 8, 300, 1, 300, 3, 300, 4740,
        8, 300, 3, 300, 4742, 8, 300, 1, 300, 1, 300, 3, 300, 4746, 8, 300, 1, 300, 3, 300, 4749, 8,
        300, 1, 300, 1, 300, 1, 300, 1, 300, 1, 300, 1, 300, 1, 300, 3, 300, 4758, 8, 300, 1, 300, 1,
        300, 1, 300, 1, 300, 1, 300, 1, 300, 1, 300, 3, 300, 4767, 8, 300, 1, 300, 1, 300, 1, 300, 1,
        300, 3, 300, 4773, 8, 300, 3, 300, 4775, 8, 300, 3, 300, 4777, 8, 300, 1, 301, 1, 301, 1, 301,
        1, 301, 1, 301, 1, 301, 1, 301, 3, 301, 4786, 8, 301, 1, 301, 1, 301, 3, 301, 4790, 8, 301, 1,
        301, 1, 301, 1, 301, 1, 301, 3, 301, 4796, 8, 301, 1, 301, 3, 301, 4799, 8, 301, 3, 301, 4801,
        8, 301, 1, 301, 1, 301, 1, 301, 1, 301, 1, 301, 1, 301, 1, 301, 1, 301, 1, 301, 3, 301, 4812,
        8, 301, 1, 301, 1, 301, 1, 301, 3, 301, 4817, 8, 301, 1, 301, 1, 301, 1, 301, 3, 301, 4822, 8,
        301, 1, 301, 1, 301, 1, 301, 1, 301, 3, 301, 4828, 8, 301, 3, 301, 4830, 8, 301, 1, 301, 1, 301,
        3, 301, 4834, 8, 301, 3, 301, 4836, 8, 301, 1, 302, 1, 302, 1, 302, 1, 303, 1, 303, 1, 303, 3,
        303, 4844, 8, 303, 1, 303, 1, 303, 3, 303, 4848, 8, 303, 1, 303, 1, 303, 1, 304, 3, 304, 4853,
        8, 304, 1, 304, 3, 304, 4856, 8, 304, 1, 304, 5, 304, 4859, 8, 304, 10, 304, 12, 304, 4862,
        9, 304, 1, 304, 1, 304, 3, 304, 4866, 8, 304, 1, 305, 1, 305, 1, 305, 1, 305, 3, 305, 4872, 8,
        305, 1, 306, 1, 306, 1, 306, 1, 306, 1, 307, 1, 307, 1, 307, 3, 307, 4881, 8, 307, 1, 308, 1,
        308, 1, 308, 1, 308, 1, 308, 1, 308, 1, 308, 1, 308, 1, 308, 4, 308, 4892, 8, 308, 11, 308, 12,
        308, 4893, 1, 309, 1, 309, 1, 309, 1, 309, 1, 309, 1, 309, 1, 309, 1, 309, 1, 309, 1, 309, 3,
        309, 4906, 8, 309, 1, 309, 1, 309, 1, 309, 3, 309, 4911, 8, 309, 1, 309, 1, 309, 1, 309, 1, 309,
        1, 309, 1, 309, 3, 309, 4919, 8, 309, 1, 309, 1, 309, 1, 309, 1, 309, 3, 309, 4925, 8, 309, 3,
        309, 4927, 8, 309, 1, 309, 1, 309, 1, 309, 1, 309, 1, 309, 3, 309, 4934, 8, 309, 3, 309, 4936,
        8, 309, 1, 310, 1, 310, 1, 310, 1, 310, 1, 310, 3, 310, 4943, 8, 310, 1, 311, 1, 311, 1, 311,
        3, 311, 4948, 8, 311, 1, 311, 1, 311, 1, 312, 1, 312, 1, 312, 1, 312, 1, 312, 1, 312, 1, 312,
        3, 312, 4959, 8, 312, 1, 312, 1, 312, 1, 312, 3, 312, 4964, 8, 312, 3, 312, 4966, 8, 312, 1,
        312, 1, 312, 3, 312, 4970, 8, 312, 1, 312, 1, 312, 1, 312, 1, 312, 3, 312, 4976, 8, 312, 1, 312,
        3, 312, 4979, 8, 312, 1, 312, 3, 312, 4982, 8, 312, 1, 312, 1, 312, 1, 312, 1, 312, 1, 312, 1,
        312, 1, 312, 1, 312, 3, 312, 4992, 8, 312, 3, 312, 4994, 8, 312, 1, 313, 1, 313, 1, 313, 1, 313,
        3, 313, 5000, 8, 313, 1, 314, 1, 314, 1, 314, 4, 314, 5005, 8, 314, 11, 314, 12, 314, 5006,
        1, 314, 1, 314, 1, 314, 1, 314, 3, 314, 5013, 8, 314, 1, 315, 1, 315, 1, 315, 1, 316, 1, 316,
        1, 316, 1, 316, 1, 316, 3, 316, 5023, 8, 316, 1, 316, 1, 316, 3, 316, 5027, 8, 316, 1, 317, 1,
        317, 1, 317, 3, 317, 5032, 8, 317, 1, 318, 1, 318, 1, 318, 1, 319, 1, 319, 1, 319, 1, 319, 1,
        319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 5, 319, 5047, 8, 319, 10, 319, 12, 319, 5050, 9,
        319, 1, 320, 1, 320, 1, 320, 3, 320, 5055, 8, 320, 1, 320, 1, 320, 1, 320, 1, 320, 1, 320, 1,
        320, 1, 320, 3, 320, 5064, 8, 320, 1, 320, 1, 320, 1, 320, 1, 320, 1, 320, 1, 320, 3, 320, 5072,
        8, 320, 1, 320, 1, 320, 3, 320, 5076, 8, 320, 1, 320, 1, 320, 1, 320, 1, 320, 3, 320, 5082, 8,
        320, 1, 320, 1, 320, 1, 320, 1, 320, 1, 320, 1, 320, 1, 320, 1, 320, 3, 320, 5092, 8, 320, 1,
        320, 1, 320, 3, 320, 5096, 8, 320, 1, 321, 1, 321, 1, 322, 1, 322, 1, 322, 5, 322, 5103, 8, 322,
        10, 322, 12, 322, 5106, 9, 322, 1, 323, 1, 323, 3, 323, 5110, 8, 323, 1, 323, 1, 323, 1, 323,
        1, 323, 3, 323, 5116, 8, 323, 3, 323, 5118, 8, 323, 1, 323, 1, 323, 3, 323, 5122, 8, 323, 1,
        323, 1, 323, 1, 323, 1, 323, 1, 323, 1, 323, 1, 323, 1, 323, 1, 323, 3, 323, 5133, 8, 323, 1,
        323, 1, 323, 1, 323, 1, 323, 1, 323, 3, 323, 5140, 8, 323, 1, 323, 1, 323, 1, 323, 1, 323, 3,
        323, 5146, 8, 323, 1, 323, 1, 323, 3, 323, 5150, 8, 323, 1, 324, 1, 324, 1, 324, 3, 324, 5155,
        8, 324, 1, 324, 1, 324, 1, 324, 3, 324, 5160, 8, 324, 1, 324, 1, 324, 1, 324, 1, 324, 1, 324,
        1, 324, 3, 324, 5168, 8, 324, 1, 325, 1, 325, 3, 325, 5172, 8, 325, 1, 325, 5, 325, 5175, 8,
        325, 10, 325, 12, 325, 5178, 9, 325, 1, 326, 1, 326, 1, 326, 1, 326, 1, 326, 1, 326, 3, 326,
        5186, 8, 326, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327,
        3, 327, 5198, 8, 327, 1, 328, 1, 328, 1, 328, 1, 328, 1, 328, 1, 328, 1, 328, 1, 328, 1, 328,
        1, 328, 1, 328, 1, 328, 3, 328, 5212, 8, 328, 1, 328, 1, 328, 1, 328, 1, 328, 1, 328, 1, 328,
        1, 328, 3, 328, 5221, 8, 328, 3, 328, 5223, 8, 328, 1, 329, 1, 329, 1, 329, 5, 329, 5228, 8,
        329, 10, 329, 12, 329, 5231, 9, 329, 1, 330, 1, 330, 3, 330, 5235, 8, 330, 1, 331, 1, 331, 3,
        331, 5239, 8, 331, 1, 331, 1, 331, 1, 331, 3, 331, 5244, 8, 331, 1, 331, 1, 331, 1, 331, 1, 331,
        5, 331, 5250, 8, 331, 10, 331, 12, 331, 5253, 9, 331, 1, 331, 1, 331, 1, 331, 1, 331, 3, 331,
        5259, 8, 331, 1, 331, 1, 331, 3, 331, 5263, 8, 331, 1, 331, 1, 331, 1, 331, 1, 331, 3, 331, 5269,
        8, 331, 1, 331, 1, 331, 1, 331, 5, 331, 5274, 8, 331, 10, 331, 12, 331, 5277, 9, 331, 3, 331,
        5279, 8, 331, 1, 332, 1, 332, 1, 332, 1, 332, 1, 332, 1, 332, 1, 332, 1, 332, 1, 332, 1, 332,
        1, 332, 3, 332, 5292, 8, 332, 1, 332, 1, 332, 1, 332, 1, 332, 3, 332, 5298, 8, 332, 1, 333, 1,
        333, 1, 333, 3, 333, 5303, 8, 333, 1, 334, 1, 334, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 1,
        335, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 5,
        335, 5324, 8, 335, 10, 335, 12, 335, 5327, 9, 335, 3, 335, 5329, 8, 335, 1, 336, 1, 336, 1,
        336, 1, 337, 1, 337, 1, 337, 1, 337, 1, 337, 1, 337, 1, 337, 1, 337, 1, 337, 1, 337, 1, 337, 3,
        337, 5345, 8, 337, 1, 337, 1, 337, 1, 337, 3, 337, 5350, 8, 337, 1, 337, 3, 337, 5353, 8, 337,
        1, 337, 1, 337, 3, 337, 5357, 8, 337, 1, 337, 3, 337, 5360, 8, 337, 1, 337, 1, 337, 1, 337, 1,
        337, 1, 337, 1, 337, 3, 337, 5368, 8, 337, 1, 337, 1, 337, 1, 337, 1, 337, 3, 337, 5374, 8, 337,
        1, 337, 1, 337, 1, 337, 3, 337, 5379, 8, 337, 1, 337, 3, 337, 5382, 8, 337, 3, 337, 5384, 8,
        337, 1, 338, 1, 338, 3, 338, 5388, 8, 338, 1, 338, 1, 338, 1, 338, 3, 338, 5393, 8, 338, 3, 338,
        5395, 8, 338, 1, 339, 1, 339, 1, 339, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340,
        3, 340, 5407, 8, 340, 1, 341, 1, 341, 5, 341, 5411, 8, 341, 10, 341, 12, 341, 5414, 9, 341,
        1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 3, 342,
        5427, 8, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342,
        3, 342, 5439, 8, 342, 1, 342, 1, 342, 3, 342, 5443, 8, 342, 3, 342, 5445, 8, 342, 1, 343, 1,
        343, 1, 343, 1, 343, 1, 343, 1, 343, 3, 343, 5453, 8, 343, 1, 344, 1, 344, 3, 344, 5457, 8, 344,
        1, 344, 1, 344, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 3, 345, 5466, 8, 345, 1, 346, 1, 346,
        1, 346, 1, 346, 1, 347, 1, 347, 1, 347, 1, 347, 1, 347, 1, 347, 1, 347, 3, 347, 5479, 8, 347,
        1, 348, 1, 348, 1, 348, 3, 348, 5484, 8, 348, 1, 349, 1, 349, 3, 349, 5488, 8, 349, 1, 349, 1,
        349, 3, 349, 5492, 8, 349, 1, 349, 3, 349, 5495, 8, 349, 1, 350, 1, 350, 3, 350, 5499, 8, 350,
        1, 350, 1, 350, 3, 350, 5503, 8, 350, 1, 350, 3, 350, 5506, 8, 350, 1, 351, 1, 351, 1, 351, 3,
        351, 5511, 8, 351, 1, 351, 3, 351, 5514, 8, 351, 1, 352, 1, 352, 1, 352, 1, 352, 3, 352, 5520,
        8, 352, 1, 352, 3, 352, 5523, 8, 352, 1, 353, 1, 353, 1, 353, 1, 353, 3, 353, 5529, 8, 353, 1,
        353, 3, 353, 5532, 8, 353, 1, 354, 1, 354, 1, 354, 1, 355, 1, 355, 1, 355, 1, 355, 1, 355, 1,
        356, 1, 356, 1, 356, 1, 356, 1, 356, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 358, 1, 358, 3,
        358, 5554, 8, 358, 1, 358, 1, 358, 1, 358, 1, 358, 3, 358, 5560, 8, 358, 1, 358, 3, 358, 5563,
        8, 358, 1, 359, 1, 359, 1, 359, 1, 359, 1, 360, 1, 360, 1, 360, 1, 360, 1, 360, 3, 360, 5574,
        8, 360, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361, 3, 361, 5581, 8, 361, 1, 361, 1, 361, 3, 361,
        5585, 8, 361, 1, 361, 3, 361, 5588, 8, 361, 1, 361, 3, 361, 5591, 8, 361, 1, 362, 1, 362, 1,
        362, 1, 362, 1, 362, 3, 362, 5598, 8, 362, 1, 362, 1, 362, 3, 362, 5602, 8, 362, 1, 362, 3, 362,
        5605, 8, 362, 1, 362, 3, 362, 5608, 8, 362, 1, 363, 1, 363, 3, 363, 5612, 8, 363, 1, 363, 1,
        363, 1, 363, 1, 363, 3, 363, 5618, 8, 363, 1, 363, 3, 363, 5621, 8, 363, 1, 364, 1, 364, 3, 364,
        5625, 8, 364, 1, 364, 1, 364, 1, 365, 1, 365, 1, 365, 1, 365, 1, 365, 1, 365, 1, 365, 1, 366,
        1, 366, 1, 366, 1, 366, 1, 366, 1, 366, 1, 366, 1, 367, 1, 367, 1, 367, 3, 367, 5646, 8, 367,
        1, 368, 1, 368, 1, 368, 3, 368, 5651, 8, 368, 1, 369, 1, 369, 1, 369, 1, 370, 1, 370, 1, 370,
        3, 370, 5659, 8, 370, 1, 370, 1, 370, 1, 370, 3, 370, 5664, 8, 370, 1, 370, 3, 370, 5667, 8,
        370, 1, 371, 1, 371, 3, 371, 5671, 8, 371, 1, 371, 1, 371, 3, 371, 5675, 8, 371, 1, 372, 1, 372,
        3, 372, 5679, 8, 372, 1, 372, 1, 372, 1, 373, 1, 373, 3, 373, 5685, 8, 373, 1, 373, 1, 373, 3,
        373, 5689, 8, 373, 1, 374, 1, 374, 1, 374, 3, 374, 5694, 8, 374, 1, 375, 1, 375, 1, 375, 3, 375,
        5699, 8, 375, 1, 376, 1, 376, 1, 376, 1, 377, 1, 377, 1, 377, 1, 377, 1, 377, 1, 377, 3, 377,
        5710, 8, 377, 3, 377, 5712, 8, 377, 1, 378, 1, 378, 1, 378, 1, 378, 3, 378, 5718, 8, 378, 1,
        378, 1, 378, 1, 379, 1, 379, 1, 379, 1, 379, 1, 379, 1, 380, 1, 380, 1, 380, 1, 380, 1, 380, 1,
        381, 1, 381, 1, 381, 1, 381, 1, 382, 1, 382, 1, 382, 1, 382, 3, 382, 5740, 8, 382, 1, 383, 1,
        383, 1, 383, 1, 383, 1, 383, 1, 384, 1, 384, 1, 384, 1, 384, 1, 384, 1, 385, 1, 385, 1, 385, 1,
        385, 1, 385, 1, 386, 1, 386, 1, 386, 1, 386, 1, 386, 3, 386, 5762, 8, 386, 1, 387, 1, 387, 1,
        387, 1, 387, 1, 387, 3, 387, 5769, 8, 387, 1, 388, 1, 388, 1, 388, 1, 388, 1, 388, 1, 388, 1,
        389, 1, 389, 1, 389, 1, 389, 1, 389, 1, 389, 1, 390, 1, 390, 1, 390, 1, 390, 1, 390, 1, 391, 1,
        391, 1, 391, 1, 391, 1, 391, 1, 392, 1, 392, 1, 392, 3, 392, 5796, 8, 392, 3, 392, 5798, 8, 392,
        1, 393, 1, 393, 3, 393, 5802, 8, 393, 1, 394, 1, 394, 1, 395, 1, 395, 1, 395, 1, 396, 1, 396,
        1, 396, 5, 396, 5812, 8, 396, 10, 396, 12, 396, 5815, 9, 396, 1, 397, 1, 397, 1, 397, 1, 397,
        1, 397, 1, 397, 1, 397, 3, 397, 5824, 8, 397, 1, 398, 1, 398, 1, 398, 1, 398, 1, 398, 1, 398,
        1, 398, 1, 398, 3, 398, 5834, 8, 398, 1, 398, 1, 398, 3, 398, 5838, 8, 398, 1, 398, 1, 398, 1,
        398, 1, 398, 5, 398, 5844, 8, 398, 10, 398, 12, 398, 5847, 9, 398, 3, 398, 5849, 8, 398, 1,
        398, 1, 398, 3, 398, 5853, 8, 398, 1, 398, 1, 398, 1, 398, 1, 398, 1, 398, 1, 398, 1, 398, 3,
        398, 5862, 8, 398, 1, 399, 1, 399, 3, 399, 5866, 8, 399, 1, 400, 1, 400, 1, 400, 5, 400, 5871,
        8, 400, 10, 400, 12, 400, 5874, 9, 400, 1, 401, 1, 401, 3, 401, 5878, 8, 401, 1, 402, 1, 402,
        1, 402, 1, 402, 1, 402, 1, 402, 3, 402, 5886, 8, 402, 1, 403, 1, 403, 1, 403, 3, 403, 5891, 8,
        403, 1, 403, 1, 403, 1, 404, 1, 404, 3, 404, 5897, 8, 404, 1, 405, 1, 405, 1, 405, 5, 405, 5902,
        8, 405, 10, 405, 12, 405, 5905, 9, 405, 1, 406, 1, 406, 3, 406, 5909, 8, 406, 1, 406, 1, 406,
        1, 406, 1, 406, 3, 406, 5915, 8, 406, 1, 406, 3, 406, 5918, 8, 406, 1, 407, 1, 407, 1, 408, 1,
        408, 1, 408, 1, 408, 1, 408, 1, 408, 3, 408, 5928, 8, 408, 3, 408, 5930, 8, 408, 1, 409, 1, 409,
        1, 409, 1, 409, 1, 409, 3, 409, 5937, 8, 409, 1, 410, 1, 410, 1, 410, 3, 410, 5942, 8, 410, 1,
        410, 1, 410, 3, 410, 5946, 8, 410, 1, 410, 3, 410, 5949, 8, 410, 1, 411, 1, 411, 1, 411, 5, 411,
        5954, 8, 411, 10, 411, 12, 411, 5957, 9, 411, 1, 412, 1, 412, 3, 412, 5961, 8, 412, 1, 412,
        1, 412, 3, 412, 5965, 8, 412, 1, 413, 1, 413, 1, 413, 1, 413, 1, 413, 1, 414, 1, 414, 1, 414,
        1, 414, 3, 414, 5976, 8, 414, 1, 415, 1, 415, 1, 415, 1, 415, 1, 415, 1, 415, 3, 415, 5984, 8,
        415, 1, 415, 1, 415, 3, 415, 5988, 8, 415, 1, 415, 3, 415, 5991, 8, 415, 1, 415, 3, 415, 5994,
        8, 415, 1, 416, 1, 416, 3, 416, 5998, 8, 416, 1, 416, 1, 416, 3, 416, 6002, 8, 416, 1, 416, 5,
        416, 6005, 8, 416, 10, 416, 12, 416, 6008, 9, 416, 1, 417, 1, 417, 1, 417, 3, 417, 6013, 8,
        417, 1, 418, 1, 418, 3, 418, 6017, 8, 418, 1, 418, 1, 418, 1, 419, 1, 419, 1, 420, 1, 420, 1,
        420, 1, 420, 1, 420, 3, 420, 6028, 8, 420, 1, 420, 3, 420, 6031, 8, 420, 1, 420, 3, 420, 6034,
        8, 420, 1, 420, 3, 420, 6037, 8, 420, 1, 421, 1, 421, 1, 421, 1, 421, 1, 421, 1, 421, 3, 421,
        6045, 8, 421, 1, 422, 1, 422, 3, 422, 6049, 8, 422, 1, 422, 5, 422, 6052, 8, 422, 10, 422, 12,
        422, 6055, 9, 422, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 3, 423, 6062, 8, 423, 1, 424, 1, 424,
        1, 424, 1, 424, 1, 424, 1, 424, 3, 424, 6070, 8, 424, 1, 425, 1, 425, 1, 425, 1, 425, 3, 425,
        6076, 8, 425, 1, 426, 1, 426, 1, 426, 1, 426, 1, 426, 1, 426, 1, 426, 1, 426, 1, 426, 1, 426,
        1, 426, 1, 426, 3, 426, 6090, 8, 426, 1, 426, 1, 426, 1, 427, 1, 427, 1, 427, 1, 427, 1, 427,
        1, 427, 1, 427, 1, 427, 3, 427, 6102, 8, 427, 1, 428, 1, 428, 1, 428, 1, 429, 1, 429, 1, 429,
        1, 430, 1, 430, 1, 431, 1, 431, 1, 431, 1, 431, 3, 431, 6116, 8, 431, 1, 431, 3, 431, 6119, 8,
        431, 1, 431, 1, 431, 3, 431, 6123, 8, 431, 1, 431, 1, 431, 1, 431, 1, 431, 1, 431, 1, 431, 1,
        431, 1, 431, 1, 431, 5, 431, 6134, 8, 431, 10, 431, 12, 431, 6137, 9, 431, 1, 432, 1, 432, 1,
        432, 1, 432, 1, 432, 1, 432, 3, 432, 6145, 8, 432, 1, 432, 1, 432, 1, 432, 1, 432, 1, 432, 1,
        432, 1, 432, 1, 432, 1, 432, 1, 432, 5, 432, 6157, 8, 432, 10, 432, 12, 432, 6160, 9, 432, 1,
        433, 1, 433, 1, 434, 1, 434, 3, 434, 6166, 8, 434, 1, 434, 1, 434, 1, 434, 1, 434, 3, 434, 6172,
        8, 434, 1, 434, 1, 434, 1, 434, 1, 434, 3, 434, 6178, 8, 434, 1, 435, 1, 435, 1, 435, 1, 435,
        1, 435, 1, 435, 3, 435, 6186, 8, 435, 1, 435, 1, 435, 1, 435, 1, 435, 1, 435, 1, 435, 1, 435,
        1, 435, 1, 435, 3, 435, 6197, 8, 435, 1, 435, 1, 435, 3, 435, 6201, 8, 435, 1, 436, 1, 436, 1,
        436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1,
        436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1, 436, 1,
        436, 5, 436, 6230, 8, 436, 10, 436, 12, 436, 6233, 9, 436, 1, 437, 1, 437, 1, 437, 3, 437, 6238,
        8, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437,
        1, 437, 1, 437, 1, 437, 1, 437, 3, 437, 6255, 8, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437,
        3, 437, 6262, 8, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437,
        1, 437, 1, 437, 1, 437, 3, 437, 6276, 8, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437,
        1, 437, 1, 437, 1, 437, 3, 437, 6287, 8, 437, 1, 437, 1, 437, 1, 437, 3, 437, 6292, 8, 437, 1,
        437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 3, 437, 6303, 8, 437, 1,
        437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 3, 437, 6313, 8, 437, 1, 437, 1,
        437, 1, 437, 4, 437, 6318, 8, 437, 11, 437, 12, 437, 6319, 1, 437, 3, 437, 6323, 8, 437, 1,
        437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1,
        437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1,
        437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 3, 437, 6357, 8, 437, 1, 437, 1,
        437, 1, 437, 1, 437, 1, 437, 1, 437, 5, 437, 6365, 8, 437, 10, 437, 12, 437, 6368, 9, 437, 1,
        438, 1, 438, 1, 438, 1, 439, 1, 439, 1, 439, 1, 439, 3, 439, 6377, 8, 439, 1, 440, 1, 440, 1,
        440, 3, 440, 6382, 8, 440, 1, 440, 1, 440, 1, 440, 3, 440, 6387, 8, 440, 1, 440, 1, 440, 1, 440,
        1, 440, 1, 440, 3, 440, 6394, 8, 440, 1, 440, 1, 440, 1, 440, 1, 440, 3, 440, 6400, 8, 440, 1,
        440, 1, 440, 1, 440, 3, 440, 6405, 8, 440, 1, 440, 1, 440, 1, 440, 3, 440, 6410, 8, 440, 1, 440,
        1, 440, 1, 440, 1, 440, 3, 440, 6416, 8, 440, 1, 440, 1, 440, 3, 440, 6420, 8, 440, 1, 440, 1,
        440, 1, 440, 3, 440, 6425, 8, 440, 1, 440, 1, 440, 1, 440, 3, 440, 6430, 8, 440, 1, 440, 1, 440,
        1, 440, 1, 440, 1, 440, 3, 440, 6437, 8, 440, 1, 440, 1, 440, 1, 440, 1, 440, 1, 440, 1, 440,
        3, 440, 6445, 8, 440, 1, 440, 1, 440, 1, 440, 3, 440, 6450, 8, 440, 1, 440, 1, 440, 3, 440, 6454,
        8, 440, 1, 440, 1, 440, 3, 440, 6458, 8, 440, 1, 440, 1, 440, 3, 440, 6462, 8, 440, 3, 440, 6464,
        8, 440, 1, 441, 1, 441, 1, 441, 1, 441, 1, 441, 1, 442, 1, 442, 1, 442, 1, 442, 1, 442, 1, 442,
        1, 442, 1, 442, 1, 442, 1, 442, 1, 442, 1, 442, 3, 442, 6483, 8, 442, 1, 442, 1, 442, 1, 442,
        1, 442, 1, 442, 1, 442, 3, 442, 6491, 8, 442, 1, 442, 1, 442, 3, 442, 6495, 8, 442, 1, 442, 1,
        442, 1, 442, 1, 442, 1, 442, 3, 442, 6502, 8, 442, 1, 442, 1, 442, 1, 442, 1, 442, 1, 442, 1,
        442, 1, 442, 1, 442, 1, 442, 1, 442, 3, 442, 6514, 8, 442, 1, 442, 3, 442, 6517, 8, 442, 1, 442,
        1, 442, 3, 442, 6521, 8, 442, 1, 443, 1, 443, 1, 443, 3, 443, 6526, 8, 443, 1, 444, 1, 444, 1,
        444, 1, 444, 3, 444, 6532, 8, 444, 1, 444, 1, 444, 3, 444, 6536, 8, 444, 1, 444, 1, 444, 3, 444,
        6540, 8, 444, 1, 445, 1, 445, 3, 445, 6544, 8, 445, 1, 446, 1, 446, 1, 446, 1, 446, 3, 446, 6550,
        8, 446, 1, 447, 1, 447, 1, 447, 1, 448, 1, 448, 1, 448, 1, 448, 1, 448, 3, 448, 6560, 8, 448,
        1, 448, 1, 448, 1, 448, 1, 448, 1, 448, 1, 448, 1, 448, 3, 448, 6569, 8, 448, 3, 448, 6571, 8,
        448, 1, 449, 3, 449, 6574, 8, 449, 1, 449, 1, 449, 1, 450, 1, 450, 1, 450, 1, 450, 1, 450, 3,
        450, 6583, 8, 450, 1, 451, 1, 451, 1, 451, 5, 451, 6588, 8, 451, 10, 451, 12, 451, 6591, 9,
        451, 1, 452, 1, 452, 1, 452, 1, 452, 1, 452, 1, 452, 1, 452, 1, 452, 1, 452, 1, 452, 3, 452, 6603,
        8, 452, 1, 452, 1, 452, 1, 452, 3, 452, 6608, 8, 452, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        3, 453, 6615, 8, 453, 1, 453, 1, 453, 1, 453, 1, 453, 3, 453, 6621, 8, 453, 1, 453, 1, 453, 1,
        453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1,
        453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 4, 453, 6645, 8, 453, 11, 453, 12,
        453, 6646, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 3, 453, 6657, 8, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 3, 453, 6689, 8, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 3, 453, 6708, 8, 453, 1, 453, 1, 453, 1, 453, 1, 453, 3, 453, 6714, 8, 453, 1,
        453, 1, 453, 3, 453, 6718, 8, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1,
        453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1,
        453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 3, 453, 6745, 8, 453, 1, 453, 1, 453, 1, 453, 1,
        453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 3, 453, 6757, 8, 453, 1, 453, 1, 453, 1,
        453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 3, 453, 6770, 8, 453, 1,
        453, 1, 453, 3, 453, 6774, 8, 453, 1, 453, 1, 453, 3, 453, 6778, 8, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 3, 453,
        6806, 8, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 3, 453, 6856, 8, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 3, 453, 6866, 8, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453, 1, 453,
        1, 453, 1, 453, 3, 453, 6878, 8, 453, 1, 453, 1, 453, 1, 453, 3, 453, 6883, 8, 453, 1, 454, 1,
        454, 1, 454, 1, 455, 1, 455, 1, 455, 3, 455, 6891, 8, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1,
        455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1,
        455, 1, 455, 3, 455, 6911, 8, 455, 1, 456, 1, 456, 3, 456, 6915, 8, 456, 1, 456, 1, 456, 1, 457,
        1, 457, 1, 458, 1, 458, 1, 458, 1, 458, 1, 458, 1, 458, 1, 458, 1, 458, 5, 458, 6929, 8, 458,
        10, 458, 12, 458, 6932, 9, 458, 3, 458, 6934, 8, 458, 1, 459, 1, 459, 1, 459, 3, 459, 6939,
        8, 459, 1, 459, 3, 459, 6942, 8, 459, 1, 460, 1, 460, 1, 461, 1, 461, 1, 461, 1, 461, 1, 461,
        3, 461, 6951, 8, 461, 1, 461, 1, 461, 3, 461, 6955, 8, 461, 1, 461, 1, 461, 1, 461, 1, 461, 3,
        461, 6961, 8, 461, 1, 461, 1, 461, 1, 461, 1, 461, 3, 461, 6967, 8, 461, 1, 461, 1, 461, 3, 461,
        6971, 8, 461, 1, 461, 1, 461, 1, 462, 1, 462, 1, 462, 1, 462, 1, 462, 1, 462, 1, 462, 3, 462,
        6982, 8, 462, 1, 462, 1, 462, 1, 462, 1, 462, 3, 462, 6988, 8, 462, 3, 462, 6990, 8, 462, 1,
        462, 1, 462, 1, 463, 1, 463, 1, 463, 3, 463, 6997, 8, 463, 1, 463, 1, 463, 1, 463, 1, 463, 1,
        463, 3, 463, 7004, 8, 463, 1, 463, 1, 463, 3, 463, 7008, 8, 463, 1, 464, 1, 464, 1, 464, 5, 464,
        7013, 8, 464, 10, 464, 12, 464, 7016, 9, 464, 1, 465, 1, 465, 3, 465, 7020, 8, 465, 1, 466,
        1, 466, 1, 466, 3, 466, 7025, 8, 466, 1, 467, 1, 467, 1, 467, 1, 467, 1, 468, 1, 468, 1, 468,
        3, 468, 7034, 8, 468, 1, 468, 3, 468, 7037, 8, 468, 1, 469, 1, 469, 1, 469, 3, 469, 7042, 8,
        469, 1, 469, 1, 469, 1, 469, 3, 469, 7047, 8, 469, 3, 469, 7049, 8, 469, 1, 469, 1, 469, 3, 469,
        7053, 8, 469, 1, 470, 1, 470, 3, 470, 7057, 8, 470, 1, 471, 1, 471, 1, 471, 1, 472, 1, 472, 1,
        472, 1, 473, 1, 473, 1, 473, 1, 474, 1, 474, 3, 474, 7070, 8, 474, 1, 474, 1, 474, 3, 474, 7074,
        8, 474, 1, 474, 3, 474, 7077, 8, 474, 1, 474, 1, 474, 3, 474, 7081, 8, 474, 1, 474, 1, 474, 3,
        474, 7085, 8, 474, 1, 474, 1, 474, 3, 474, 7089, 8, 474, 1, 474, 1, 474, 1, 474, 1, 474, 1, 474,
        3, 474, 7096, 8, 474, 1, 474, 1, 474, 3, 474, 7100, 8, 474, 1, 474, 1, 474, 3, 474, 7104, 8,
        474, 1, 474, 1, 474, 1, 474, 1, 474, 1, 474, 1, 474, 3, 474, 7112, 8, 474, 1, 474, 1, 474, 3,
        474, 7116, 8, 474, 1, 475, 1, 475, 1, 475, 5, 475, 7121, 8, 475, 10, 475, 12, 475, 7124, 9,
        475, 1, 476, 1, 476, 1, 476, 3, 476, 7129, 8, 476, 1, 477, 1, 477, 1, 478, 1, 478, 1, 479, 1,
        479, 3, 479, 7137, 8, 479, 1, 480, 1, 480, 1, 481, 1, 481, 1, 481, 1, 481, 1, 482, 1, 482, 1,
        482, 1, 482, 1, 483, 1, 483, 1, 483, 1, 483, 1, 484, 1, 484, 1, 484, 5, 484, 7156, 8, 484, 10,
        484, 12, 484, 7159, 9, 484, 1, 485, 1, 485, 3, 485, 7163, 8, 485, 1, 486, 1, 486, 1, 486, 5,
        486, 7168, 8, 486, 10, 486, 12, 486, 7171, 9, 486, 1, 487, 1, 487, 1, 488, 1, 488, 1, 488, 1,
        488, 1, 489, 1, 489, 1, 489, 1, 489, 1, 489, 1, 489, 1, 489, 1, 489, 1, 489, 1, 489, 1, 489, 1,
        489, 1, 489, 3, 489, 7192, 8, 489, 1, 490, 1, 490, 1, 490, 1, 491, 1, 491, 1, 491, 1, 491, 1,
        491, 1, 492, 1, 492, 1, 492, 1, 492, 1, 492, 1, 492, 3, 492, 7208, 8, 492, 1, 493, 1, 493, 1,
        493, 1, 494, 1, 494, 1, 494, 4, 494, 7216, 8, 494, 11, 494, 12, 494, 7217, 1, 495, 1, 495, 3,
        495, 7222, 8, 495, 1, 495, 1, 495, 1, 495, 4, 495, 7227, 8, 495, 11, 495, 12, 495, 7228, 1,
        495, 3, 495, 7232, 8, 495, 1, 495, 1, 495, 1, 495, 1, 496, 1, 496, 1, 496, 1, 497, 1, 497, 1,
        497, 3, 497, 7243, 8, 497, 1, 498, 1, 498, 1, 499, 1, 499, 1, 499, 1, 500, 1, 500, 3, 500, 7252,
        8, 500, 1, 500, 3, 500, 7255, 8, 500, 1, 500, 1, 500, 1, 501, 1, 501, 1, 501, 3, 501, 7262, 8,
        501, 1, 502, 1, 502, 1, 502, 3, 502, 7267, 8, 502, 1, 503, 1, 503, 1, 503, 1, 503, 1, 503, 1,
        504, 1, 504, 1, 504, 1, 504, 1, 504, 1, 504, 1, 504, 1, 505, 1, 505, 1, 505, 1, 505, 1, 505, 1,
        505, 1, 505, 1, 506, 1, 506, 1, 506, 4, 506, 7291, 8, 506, 11, 506, 12, 506, 7292, 1, 507, 1,
        507, 1, 507, 1, 507, 3, 507, 7299, 8, 507, 1, 508, 1, 508, 1, 508, 1, 508, 3, 508, 7305, 8, 508,
        1, 508, 1, 508, 3, 508, 7309, 8, 508, 1, 509, 1, 509, 1, 509, 1, 509, 1, 509, 1, 509, 1, 510,
        1, 510, 3, 510, 7319, 8, 510, 1, 511, 1, 511, 3, 511, 7323, 8, 511, 1, 511, 1, 511, 1, 512, 1,
        512, 1, 512, 1, 512, 1, 512, 1, 512, 1, 512, 5, 512, 7334, 8, 512, 10, 512, 12, 512, 7337, 9,
        512, 1, 512, 1, 512, 1, 513, 1, 513, 1, 513, 1, 513, 1, 513, 1, 513, 1, 513, 3, 513, 7348, 8,
        513, 1, 514, 1, 514, 1, 514, 1, 514, 1, 514, 1, 514, 1, 515, 1, 515, 1, 515, 1, 516, 1, 516, 1,
        516, 1, 517, 1, 517, 3, 517, 7364, 8, 517, 1, 517, 1, 517, 1, 517, 1, 517, 5, 517, 7370, 8, 517,
        10, 517, 12, 517, 7373, 9, 517, 1, 517, 1, 517, 1, 517, 1, 517, 1, 517, 5, 517, 7380, 8, 517,
        10, 517, 12, 517, 7383, 9, 517, 3, 517, 7385, 8, 517, 1, 518, 1, 518, 1, 518, 3, 518, 7390,
        8, 518, 1, 519, 1, 519, 3, 519, 7394, 8, 519, 1, 519, 1, 519, 1, 519, 1, 520, 1, 520, 3, 520,
        7401, 8, 520, 1, 520, 1, 520, 1, 520, 3, 520, 7406, 8, 520, 1, 521, 1, 521, 1, 522, 1, 522, 1,
        522, 3, 522, 7413, 8, 522, 1, 522, 1, 522, 1, 522, 1, 522, 5, 522, 7419, 8, 522, 10, 522, 12,
        522, 7422, 9, 522, 3, 522, 7424, 8, 522, 1, 523, 1, 523, 1, 523, 3, 523, 7429, 8, 523, 1, 523,
        1, 523, 1, 523, 1, 523, 5, 523, 7435, 8, 523, 10, 523, 12, 523, 7438, 9, 523, 3, 523, 7440,
        8, 523, 1, 524, 1, 524, 1, 524, 1, 524, 1, 525, 1, 525, 1, 525, 1, 526, 1, 526, 1, 526, 1, 527,
        1, 527, 3, 527, 7454, 8, 527, 1, 527, 3, 527, 7457, 8, 527, 1, 527, 1, 527, 1, 527, 1, 527, 1,
        528, 1, 528, 1, 528, 1, 528, 1, 528, 1, 528, 1, 528, 3, 528, 7470, 8, 528, 1, 528, 1, 528, 3,
        528, 7474, 8, 528, 3, 528, 7476, 8, 528, 1, 529, 1, 529, 1, 529, 3, 529, 7481, 8, 529, 1, 530,
        1, 530, 1, 530, 3, 530, 7486, 8, 530, 1, 531, 1, 531, 1, 531, 1, 532, 3, 532, 7492, 8, 532, 1,
        532, 1, 532, 1, 533, 1, 533, 3, 533, 7498, 8, 533, 1, 533, 1, 533, 5, 533, 7502, 8, 533, 10,
        533, 12, 533, 7505, 9, 533, 1, 533, 1, 533, 3, 533, 7509, 8, 533, 1, 533, 3, 533, 7512, 8, 533,
        1, 533, 1, 533, 5, 533, 7516, 8, 533, 10, 533, 12, 533, 7519, 9, 533, 1, 533, 1, 533, 3, 533,
        7523, 8, 533, 1, 533, 3, 533, 7526, 8, 533, 1, 533, 1, 533, 5, 533, 7530, 8, 533, 10, 533, 12,
        533, 7533, 9, 533, 1, 533, 3, 533, 7536, 8, 533, 1, 533, 1, 533, 1, 533, 1, 533, 3, 533, 7542,
        8, 533, 3, 533, 7544, 8, 533, 1, 533, 3, 533, 7547, 8, 533, 1, 533, 1, 533, 5, 533, 7551, 8,
        533, 10, 533, 12, 533, 7554, 9, 533, 1, 533, 1, 533, 1, 533, 3, 533, 7559, 8, 533, 1, 533, 1,
        533, 1, 533, 1, 533, 1, 533, 1, 533, 3, 533, 7567, 8, 533, 3, 533, 7569, 8, 533, 3, 533, 7571,
        8, 533, 1, 534, 1, 534, 3, 534, 7575, 8, 534, 1, 535, 1, 535, 5, 535, 7579, 8, 535, 10, 535,
        12, 535, 7582, 9, 535, 1, 535, 3, 535, 7585, 8, 535, 1, 535, 1, 535, 3, 535, 7589, 8, 535, 1,
        535, 1, 535, 1, 535, 3, 535, 7594, 8, 535, 1, 535, 5, 535, 7597, 8, 535, 10, 535, 12, 535, 7600,
        9, 535, 3, 535, 7602, 8, 535, 1, 536, 3, 536, 7605, 8, 536, 1, 536, 1, 536, 1, 536, 1, 536, 1,
        536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 3, 536, 7618, 8, 536, 1, 536, 1, 536, 3,
        536, 7622, 8, 536, 1, 536, 1, 536, 1, 536, 1, 536, 3, 536, 7628, 8, 536, 1, 536, 1, 536, 1, 536,
        1, 536, 1, 536, 3, 536, 7635, 8, 536, 1, 536, 1, 536, 1, 536, 3, 536, 7640, 8, 536, 1, 536, 1,
        536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 3, 536, 7653, 8,
        536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 1, 536, 3, 536, 7661, 8, 536, 1, 536, 1, 536, 1,
        536, 1, 536, 3, 536, 7667, 8, 536, 1, 536, 1, 536, 1, 536, 3, 536, 7672, 8, 536, 1, 537, 1, 537,
        1, 538, 1, 538, 1, 539, 1, 539, 1, 539, 1, 540, 1, 540, 3, 540, 7683, 8, 540, 1, 541, 1, 541,
        3, 541, 7687, 8, 541, 1, 541, 1, 541, 1, 541, 3, 541, 7692, 8, 541, 1, 541, 1, 541, 3, 541, 7696,
        8, 541, 1, 541, 3, 541, 7699, 8, 541, 1, 542, 1, 542, 1, 542, 3, 542, 7704, 8, 542, 1, 542, 1,
        542, 3, 542, 7708, 8, 542, 1, 542, 1, 542, 1, 542, 1, 542, 1, 542, 1, 542, 3, 542, 7716, 8, 542,
        1, 542, 1, 542, 1, 542, 1, 542, 1, 542, 1, 542, 3, 542, 7724, 8, 542, 3, 542, 7726, 8, 542, 1,
        543, 1, 543, 1, 543, 1, 543, 1, 543, 1, 543, 1, 543, 3, 543, 7735, 8, 543, 1, 544, 1, 544, 1,
        544, 1, 544, 5, 544, 7741, 8, 544, 10, 544, 12, 544, 7744, 9, 544, 1, 544, 1, 544, 1, 545, 1,
        545, 3, 545, 7750, 8, 545, 1, 545, 3, 545, 7753, 8, 545, 1, 546, 1, 546, 1, 546, 1, 546, 5, 546,
        7759, 8, 546, 10, 546, 12, 546, 7762, 9, 546, 1, 546, 1, 546, 1, 547, 1, 547, 1, 547, 3, 547,
        7769, 8, 547, 3, 547, 7771, 8, 547, 1, 548, 1, 548, 1, 548, 1, 548, 3, 548, 7777, 8, 548, 1,
        549, 1, 549, 1, 550, 1, 550, 3, 550, 7783, 8, 550, 1, 551, 1, 551, 3, 551, 7787, 8, 551, 1, 551,
        1, 551, 1, 551, 1, 551, 1, 551, 1, 551, 1, 551, 3, 551, 7796, 8, 551, 1, 551, 1, 551, 1, 551,
        1, 551, 3, 551, 7802, 8, 551, 1, 551, 3, 551, 7805, 8, 551, 1, 552, 1, 552, 1, 553, 1, 553, 1,
        553, 1, 554, 1, 554, 1, 554, 1, 554, 3, 554, 7816, 8, 554, 1, 555, 1, 555, 1, 556, 1, 556, 1,
        556, 1, 557, 1, 557, 3, 557, 7825, 8, 557, 1, 557, 3, 557, 7828, 8, 557, 1, 557, 1, 557, 1, 557,
        3, 557, 7833, 8, 557, 3, 557, 7835, 8, 557, 1, 557, 3, 557, 7838, 8, 557, 1, 557, 3, 557, 7841,
        8, 557, 1, 557, 1, 557, 3, 557, 7845, 8, 557, 1, 557, 3, 557, 7848, 8, 557, 1, 557, 1, 557, 3,
        557, 7852, 8, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7857, 8, 557, 1, 557, 3, 557, 7860, 8, 557,
        1, 557, 1, 557, 3, 557, 7864, 8, 557, 1, 557, 3, 557, 7867, 8, 557, 1, 557, 1, 557, 3, 557, 7871,
        8, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7876, 8, 557, 1, 557, 1, 557, 3, 557, 7880, 8, 557, 1,
        557, 1, 557, 1, 557, 1, 557, 1, 557, 1, 557, 1, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7892, 8,
        557, 1, 557, 1, 557, 3, 557, 7896, 8, 557, 1, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7902, 8, 557,
        1, 557, 3, 557, 7905, 8, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7910, 8, 557, 1, 557, 1, 557, 3,
        557, 7914, 8, 557, 1, 557, 1, 557, 3, 557, 7918, 8, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7923,
        8, 557, 1, 557, 1, 557, 1, 557, 1, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7932, 8, 557, 1, 557,
        3, 557, 7935, 8, 557, 1, 557, 1, 557, 3, 557, 7939, 8, 557, 1, 557, 1, 557, 3, 557, 7943, 8,
        557, 1, 557, 3, 557, 7946, 8, 557, 1, 557, 1, 557, 3, 557, 7950, 8, 557, 1, 557, 1, 557, 3, 557,
        7954, 8, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7959, 8, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7964,
        8, 557, 1, 557, 1, 557, 1, 557, 3, 557, 7969, 8, 557, 1, 558, 1, 558, 1, 558, 3, 558, 7974, 8,
        558, 1, 559, 1, 559, 1, 559, 3, 559, 7979, 8, 559, 3, 559, 7981, 8, 559, 1, 560, 1, 560, 1, 560,
        3, 560, 7986, 8, 560, 1, 560, 1, 560, 1, 561, 4, 561, 7991, 8, 561, 11, 561, 12, 561, 7992,
        1, 562, 1, 562, 1, 562, 1, 562, 1, 562, 1, 562, 3, 562, 8001, 8, 562, 1, 562, 1, 562, 1, 562,
        1, 562, 3, 562, 8007, 8, 562, 3, 562, 8009, 8, 562, 1, 563, 1, 563, 3, 563, 8013, 8, 563, 1,
        563, 1, 563, 3, 563, 8017, 8, 563, 1, 564, 1, 564, 3, 564, 8021, 8, 564, 1, 564, 1, 564, 3, 564,
        8025, 8, 564, 1, 565, 1, 565, 1, 565, 1, 565, 1, 566, 1, 566, 1, 566, 1, 566, 1, 567, 1, 567,
        1, 567, 1, 567, 1, 567, 3, 567, 8040, 8, 567, 1, 568, 1, 568, 1, 568, 1, 568, 3, 568, 8046, 8,
        568, 1, 569, 1, 569, 1, 569, 1, 569, 1, 569, 3, 569, 8053, 8, 569, 1, 570, 1, 570, 3, 570, 8057,
        8, 570, 1, 570, 5, 570, 8060, 8, 570, 10, 570, 12, 570, 8063, 9, 570, 1, 571, 1, 571, 3, 571,
        8067, 8, 571, 1, 571, 3, 571, 8070, 8, 571, 1, 572, 1, 572, 3, 572, 8074, 8, 572, 1, 572, 3,
        572, 8077, 8, 572, 1, 573, 4, 573, 8080, 8, 573, 11, 573, 12, 573, 8081, 1, 574, 1, 574, 3,
        574, 8086, 8, 574, 1, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8092, 8, 574, 1, 574, 1, 574, 3, 574,
        8096, 8, 574, 1, 574, 1, 574, 3, 574, 8100, 8, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8105, 8,
        574, 1, 574, 1, 574, 1, 574, 3, 574, 8110, 8, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8115, 8, 574,
        1, 574, 1, 574, 1, 574, 3, 574, 8120, 8, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8125, 8, 574, 1,
        574, 1, 574, 1, 574, 3, 574, 8130, 8, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8135, 8, 574, 1, 574,
        1, 574, 1, 574, 3, 574, 8140, 8, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8145, 8, 574, 1, 574, 1,
        574, 1, 574, 3, 574, 8150, 8, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8155, 8, 574, 1, 574, 1, 574,
        1, 574, 3, 574, 8160, 8, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8165, 8, 574, 1, 574, 1, 574, 1,
        574, 1, 574, 1, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8175, 8, 574, 1, 574, 1, 574, 1, 574, 1,
        574, 3, 574, 8181, 8, 574, 1, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8187, 8, 574, 1, 574, 1, 574,
        1, 574, 3, 574, 8192, 8, 574, 1, 574, 1, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8199, 8, 574, 1,
        574, 1, 574, 1, 574, 3, 574, 8204, 8, 574, 1, 574, 1, 574, 1, 574, 1, 574, 1, 574, 1, 574, 1,
        574, 3, 574, 8213, 8, 574, 1, 574, 1, 574, 1, 574, 1, 574, 3, 574, 8219, 8, 574, 1, 574, 1, 574,
        1, 574, 3, 574, 8224, 8, 574, 1, 575, 1, 575, 3, 575, 8228, 8, 575, 1, 576, 3, 576, 8231, 8,
        576, 1, 576, 1, 576, 3, 576, 8235, 8, 576, 1, 576, 1, 576, 1, 577, 3, 577, 8240, 8, 577, 1, 577,
        1, 577, 3, 577, 8244, 8, 577, 1, 577, 1, 577, 1, 578, 3, 578, 8249, 8, 578, 1, 578, 1, 578, 3,
        578, 8253, 8, 578, 1, 578, 1, 578, 1, 579, 1, 579, 1, 579, 1, 579, 1, 579, 3, 579, 8262, 8, 579,
        1, 579, 3, 579, 8265, 8, 579, 1, 579, 3, 579, 8268, 8, 579, 1, 580, 3, 580, 8271, 8, 580, 1,
        580, 1, 580, 3, 580, 8275, 8, 580, 1, 580, 1, 580, 3, 580, 8279, 8, 580, 1, 580, 1, 580, 3, 580,
        8283, 8, 580, 1, 580, 1, 580, 1, 580, 1, 580, 1, 580, 1, 580, 1, 580, 1, 580, 1, 580, 1, 580,
        1, 580, 1, 580, 1, 580, 3, 580, 8298, 8, 580, 1, 580, 3, 580, 8301, 8, 580, 3, 580, 8303, 8,
        580, 1, 581, 1, 581, 1, 581, 3, 581, 8308, 8, 581, 1, 581, 1, 581, 1, 581, 1, 581, 1, 581, 1,
        581, 1, 581, 3, 581, 8317, 8, 581, 1, 581, 3, 581, 8320, 8, 581, 1, 581, 1, 581, 3, 581, 8324,
        8, 581, 1, 582, 1, 582, 1, 582, 1, 582, 1, 583, 1, 583, 1, 583, 1, 583, 5, 583, 8334, 8, 583,
        10, 583, 12, 583, 8337, 9, 583, 1, 583, 1, 583, 1, 584, 1, 584, 1, 584, 1, 584, 1, 584, 1, 584,
        1, 584, 3, 584, 8348, 8, 584, 1, 584, 1, 584, 1, 584, 3, 584, 8353, 8, 584, 1, 584, 5, 584, 8356,
        8, 584, 10, 584, 12, 584, 8359, 9, 584, 1, 584, 1, 584, 1, 584, 1, 584, 5, 584, 8365, 8, 584,
        10, 584, 12, 584, 8368, 9, 584, 1, 584, 1, 584, 3, 584, 8372, 8, 584, 1, 585, 1, 585, 1, 585,
        1, 585, 1, 585, 5, 585, 8379, 8, 585, 10, 585, 12, 585, 8382, 9, 585, 1, 585, 1, 585, 3, 585,
        8386, 8, 585, 1, 586, 1, 586, 3, 586, 8390, 8, 586, 1, 586, 1, 586, 3, 586, 8394, 8, 586, 1,
        586, 1, 586, 3, 586, 8398, 8, 586, 1, 586, 1, 586, 1, 586, 3, 586, 8403, 8, 586, 1, 586, 1, 586,
        1, 586, 3, 586, 8408, 8, 586, 1, 586, 1, 586, 1, 586, 1, 586, 3, 586, 8414, 8, 586, 1, 586, 1,
        586, 1, 586, 3, 586, 8419, 8, 586, 1, 586, 3, 586, 8422, 8, 586, 1, 587, 1, 587, 1, 587, 5, 587,
        8427, 8, 587, 10, 587, 12, 587, 8430, 9, 587, 1, 588, 1, 588, 1, 588, 1, 588, 5, 588, 8436,
        8, 588, 10, 588, 12, 588, 8439, 9, 588, 1, 588, 1, 588, 1, 589, 1, 589, 3, 589, 8445, 8, 589,
        1, 590, 1, 590, 1, 590, 1, 590, 1, 591, 1, 591, 1, 591, 1, 592, 1, 592, 1, 592, 1, 592, 1, 593,
        1, 593, 1, 593, 1, 593, 1, 594, 3, 594, 8463, 8, 594, 1, 594, 1, 594, 1, 595, 1, 595, 1, 595,
        1, 596, 1, 596, 1, 596, 1, 597, 1, 597, 3, 597, 8475, 8, 597, 1, 598, 1, 598, 1, 598, 1, 598,
        1, 598, 1, 598, 1, 599, 1, 599, 1, 599, 5, 599, 8486, 8, 599, 10, 599, 12, 599, 8489, 9, 599,
        1, 600, 1, 600, 1, 600, 5, 600, 8494, 8, 600, 10, 600, 12, 600, 8497, 9, 600, 1, 601, 1, 601,
        1, 601, 1, 601, 3, 601, 8503, 8, 601, 1, 602, 1, 602, 1, 602, 1, 603, 1, 603, 4, 603, 8510, 8,
        603, 11, 603, 12, 603, 8511, 1, 604, 1, 604, 1, 604, 1, 604, 3, 604, 8518, 8, 604, 1, 604, 1,
        604, 1, 604, 1, 604, 1, 604, 1, 604, 3, 604, 8526, 8, 604, 1, 605, 1, 605, 4, 605, 8530, 8, 605,
        11, 605, 12, 605, 8531, 1, 606, 1, 606, 1, 606, 1, 606, 1, 607, 1, 607, 1, 607, 5, 607, 8541,
        8, 607, 10, 607, 12, 607, 8544, 9, 607, 1, 608, 1, 608, 1, 608, 5, 608, 8549, 8, 608, 10, 608,
        12, 608, 8552, 9, 608, 1, 609, 1, 609, 1, 609, 3, 609, 8557, 8, 609, 1, 609, 1, 609, 3, 609,
        8561, 8, 609, 1, 609, 3, 609, 8564, 8, 609, 1, 610, 1, 610, 1, 610, 1, 610, 3, 610, 8570, 8,
        610, 1, 611, 1, 611, 1, 611, 1, 611, 1, 611, 1, 611, 3, 611, 8578, 8, 611, 1, 612, 1, 612, 1,
        612, 1, 612, 1, 613, 1, 613, 1, 613, 1, 613, 1, 613, 1, 614, 1, 614, 1, 614, 1, 614, 1, 615, 1,
        615, 1, 615, 1, 615, 1, 615, 1, 615, 1, 616, 1, 616, 1, 616, 1, 616, 1, 616, 1, 616, 1, 617, 1,
        617, 1, 617, 1, 617, 1, 617, 1, 617, 1, 617, 1, 618, 1, 618, 1, 618, 1, 618, 1, 618, 3, 618, 8617,
        8, 618, 1, 619, 1, 619, 1, 619, 1, 619, 1, 620, 1, 620, 1, 620, 1, 620, 1, 621, 1, 621, 1, 621,
        1, 621, 1, 621, 1, 621, 1, 621, 1, 621, 1, 621, 1, 621, 1, 621, 1, 621, 1, 621, 1, 621, 1, 621,
        3, 621, 8642, 8, 621, 1, 622, 1, 622, 1, 622, 1, 623, 1, 623, 1, 623, 1, 624, 1, 624, 3, 624,
        8652, 8, 624, 1, 625, 1, 625, 1, 625, 3, 625, 8657, 8, 625, 3, 625, 8659, 8, 625, 1, 626, 1,
        626, 1, 626, 1, 627, 1, 627, 3, 627, 8666, 8, 627, 1, 628, 1, 628, 1, 629, 1, 629, 1, 630, 1,
        630, 1, 630, 1, 631, 1, 631, 1, 631, 3, 631, 8678, 8, 631, 3, 631, 8680, 8, 631, 1, 632, 1, 632,
        1, 633, 1, 633, 1, 634, 1, 634, 1, 634, 1, 634, 5, 634, 8690, 8, 634, 10, 634, 12, 634, 8693,
        9, 634, 1, 634, 1, 634, 1, 635, 1, 635, 1, 636, 1, 636, 3, 636, 8701, 8, 636, 1, 637, 1, 637,
        1, 638, 1, 638, 1, 639, 1, 639, 1, 639, 1, 639, 1, 639, 3, 639, 8712, 8, 639, 1, 639, 1, 639,
        1, 640, 1, 640, 1, 641, 1, 641, 1, 642, 1, 642, 1, 643, 1, 643, 1, 644, 1, 644, 1, 645, 1, 645,
        1, 646, 1, 646, 1, 647, 1, 647, 1, 648, 1, 648, 3, 648, 8734, 8, 648, 1, 649, 1, 649, 3, 649,
        8738, 8, 649, 1, 650, 1, 650, 1, 651, 1, 651, 1, 652, 1, 652, 1, 653, 1, 653, 1, 654, 1, 654,
        1, 655, 1, 655, 1, 656, 1, 656, 1, 657, 1, 657, 1, 658, 1, 658, 1, 659, 1, 659, 1, 660, 1, 660,
        3, 660, 8762, 8, 660, 1, 661, 1, 661, 1, 661, 1, 662, 1, 662, 1, 662, 1, 662, 1, 662, 1, 662,
        3, 662, 8773, 8, 662, 3, 662, 8775, 8, 662, 1, 663, 1, 663, 3, 663, 8779, 8, 663, 1, 664, 1,
        664, 1, 664, 5, 664, 8784, 8, 664, 10, 664, 12, 664, 8787, 9, 664, 1, 665, 1, 665, 1, 665, 5,
        665, 8792, 8, 665, 10, 665, 12, 665, 8795, 9, 665, 1, 666, 1, 666, 1, 667, 1, 667, 3, 667, 8801,
        8, 667, 1, 668, 1, 668, 1, 669, 1, 669, 3, 669, 8807, 8, 669, 1, 670, 1, 670, 1, 671, 1, 671,
        1, 672, 1, 672, 1, 673, 1, 673, 1, 674, 1, 674, 1, 674, 3, 674, 8820, 8, 674, 1, 675, 1, 675,
        3, 675, 8824, 8, 675, 1, 676, 1, 676, 1, 676, 5, 676, 8829, 8, 676, 10, 676, 12, 676, 8832,
        9, 676, 1, 677, 1, 677, 1, 677, 1, 677, 1, 678, 1, 678, 3, 678, 8840, 8, 678, 1, 679, 1, 679,
        1, 679, 3, 679, 8845, 8, 679, 3, 679, 8847, 8, 679, 1, 680, 1, 680, 1, 680, 1, 681, 1, 681, 1,
        682, 1, 682, 1, 683, 1, 683, 1, 684, 1, 684, 1, 684, 1, 684, 1, 684, 3, 684, 8863, 8, 684, 1,
        685, 1, 685, 1, 685, 1, 685, 1, 685, 3, 685, 8870, 8, 685, 1, 686, 1, 686, 1, 686, 3, 686, 8875,
        8, 686, 1, 687, 1, 687, 1, 687, 1, 687, 1, 687, 1, 687, 3, 687, 8883, 8, 687, 1, 687, 3, 687,
        8886, 8, 687, 1, 688, 1, 688, 1, 688, 3, 688, 8891, 8, 688, 1, 689, 1, 689, 1, 690, 1, 690, 1,
        690, 1, 690, 5, 690, 8899, 8, 690, 10, 690, 12, 690, 8902, 9, 690, 1, 690, 1, 690, 1, 691, 1,
        691, 1, 691, 3, 691, 8909, 8, 691, 1, 692, 1, 692, 1, 692, 3, 692, 8914, 8, 692, 1, 693, 1, 693,
        1, 693, 3, 693, 8919, 8, 693, 1, 694, 3, 694, 8922, 8, 694, 1, 694, 1, 694, 3, 694, 8926, 8,
        694, 1, 694, 5, 694, 8929, 8, 694, 10, 694, 12, 694, 8932, 9, 694, 1, 695, 1, 695, 1, 696, 1,
        696, 1, 696, 5, 696, 8939, 8, 696, 10, 696, 12, 696, 8942, 9, 696, 1, 697, 1, 697, 1, 697, 3,
        697, 8947, 8, 697, 1, 698, 1, 698, 1, 699, 1, 699, 1, 700, 1, 700, 1, 701, 1, 701, 1, 701, 1,
        701, 1, 701, 1, 701, 3, 701, 8961, 8, 701, 1, 702, 1, 702, 3, 702, 8965, 8, 702, 1, 703, 1, 703,
        1, 704, 1, 704, 1, 704, 1, 704, 1, 704, 1, 704, 1, 705, 1, 705, 3, 705, 8977, 8, 705, 1, 706,
        1, 706, 3, 706, 8981, 8, 706, 1, 707, 1, 707, 3, 707, 8985, 8, 707, 1, 708, 1, 708, 3, 708, 8989,
        8, 708, 1, 709, 1, 709, 1, 709, 1, 710, 1, 710, 1, 711, 1, 711, 1, 712, 1, 712, 1, 712, 1, 712,
        1, 712, 1, 712, 3, 712, 9004, 8, 712, 1, 713, 1, 713, 1, 713, 1, 714, 1, 714, 1, 715, 1, 715,
        1, 715, 1, 715, 1, 715, 1, 715, 1, 715, 3, 715, 9018, 8, 715, 1, 715, 1, 715, 1, 715, 1, 715,
        1, 715, 3, 715, 9025, 8, 715, 3, 715, 9027, 8, 715, 1, 716, 1, 716, 1, 717, 1, 717, 1, 718, 1,
        718, 1, 718, 1, 718, 1, 718, 1, 718, 1, 718, 1, 718, 1, 718, 1, 718, 1, 718, 3, 718, 9044, 8,
        718, 1, 718, 1, 718, 1, 718, 3, 718, 9049, 8, 718, 3, 718, 9051, 8, 718, 1, 719, 1, 719, 1, 720,
        1, 720, 1, 720, 3, 720, 9058, 8, 720, 1, 721, 1, 721, 1, 721, 3, 721, 9063, 8, 721, 1, 721, 1,
        721, 1, 721, 3, 721, 9068, 8, 721, 3, 721, 9070, 8, 721, 1, 722, 1, 722, 1, 722, 1, 722, 3, 722,
        9076, 8, 722, 1, 723, 1, 723, 1, 724, 1, 724, 1, 725, 1, 725, 1, 725, 3, 725, 9085, 8, 725, 1,
        725, 0, 4, 862, 864, 872, 874, 726, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
        32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
        80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
        122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156,
        158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192,
        194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228,
        230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264,
        266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300,
        302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336,
        338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372,
        374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408,
        410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444,
        446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480,
        482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516,
        518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552,
        554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588,
        590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624,
        626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660,
        662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696,
        698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732,
        734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768,
        770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804,
        806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840,
        842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876,
        878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912,
        914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948,
        950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984,
        986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016,
        1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046,
        1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076,
        1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106,
        1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136,
        1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166,
        1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196,
        1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226,
        1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256,
        1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286,
        1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316,
        1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1346,
        1348, 1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 1372, 1374, 1376,
        1378, 1380, 1382, 1384, 1386, 1388, 1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404, 1406,
        1408, 1410, 1412, 1414, 1416, 1418, 1420, 1422, 1424, 1426, 1428, 1430, 1432, 1434, 1436,
        1438, 1440, 1442, 1444, 1446, 1448, 1450, 0, 170, 1, 0, 722, 723, 2, 0, 17, 17, 590, 590,
        2, 0, 49, 49, 471, 471, 1, 0, 645, 646, 2, 0, 4, 4, 148, 148, 1, 0, 724, 725, 2, 0, 50, 50, 284,
        284, 2, 0, 140, 140, 156, 156, 2, 0, 232, 232, 458, 458, 4, 0, 126, 126, 249, 249, 437, 437,
        556, 556, 2, 0, 130, 130, 250, 250, 2, 0, 441, 441, 604, 604, 2, 0, 374, 374, 638, 638, 3, 0,
        335, 335, 578, 578, 602, 602, 2, 0, 6, 6, 28, 28, 3, 0, 133, 133, 242, 242, 614, 614, 2, 0, 197,
        197, 415, 415, 2, 0, 571, 571, 574, 574, 3, 0, 232, 232, 295, 295, 431, 431, 2, 0, 191, 191,
        367, 367, 4, 0, 191, 191, 268, 268, 367, 367, 419, 419, 2, 0, 750, 750, 753, 756, 3, 0, 131,
        131, 223, 223, 295, 295, 1, 0, 626, 627, 2, 0, 82, 82, 295, 295, 2, 0, 112, 112, 653, 653, 2,
        0, 278, 278, 484, 484, 2, 0, 131, 131, 295, 295, 3, 0, 608, 608, 663, 663, 844, 844, 7, 0, 10,
        10, 143, 143, 223, 223, 531, 532, 534, 534, 536, 536, 555, 555, 2, 0, 381, 381, 773, 773,
        2, 0, 747, 749, 787, 787, 3, 0, 432, 432, 484, 484, 683, 683, 2, 0, 18, 18, 134, 134, 2, 0, 508,
        508, 614, 614, 2, 0, 272, 272, 478, 478, 2, 0, 98, 98, 239, 239, 2, 0, 10, 10, 143, 143, 2, 0,
        198, 198, 232, 232, 2, 0, 236, 236, 265, 265, 2, 0, 386, 386, 649, 649, 3, 0, 244, 244, 571,
        571, 574, 574, 2, 0, 29, 29, 543, 543, 2, 0, 261, 261, 472, 472, 2, 0, 32, 32, 316, 316, 2, 0,
        296, 296, 807, 807, 2, 0, 300, 300, 813, 813, 2, 0, 297, 297, 808, 808, 2, 0, 318, 318, 831,
        831, 2, 0, 303, 303, 816, 816, 2, 0, 304, 304, 817, 817, 2, 0, 298, 298, 810, 810, 2, 0, 305,
        305, 819, 819, 2, 0, 299, 299, 811, 811, 2, 0, 314, 314, 820, 820, 2, 0, 308, 308, 821, 821,
        2, 0, 307, 307, 822, 822, 2, 0, 310, 310, 824, 824, 2, 0, 311, 311, 825, 825, 2, 0, 312, 312,
        826, 826, 2, 0, 313, 313, 827, 827, 2, 0, 315, 315, 828, 828, 2, 0, 317, 317, 830, 830, 2, 0,
        738, 738, 829, 829, 2, 0, 309, 309, 823, 823, 2, 0, 712, 712, 818, 818, 2, 0, 713, 713, 806,
        806, 2, 0, 319, 319, 812, 812, 2, 0, 735, 735, 809, 809, 2, 0, 736, 736, 832, 832, 2, 0, 383,
        383, 743, 744, 2, 0, 301, 301, 814, 814, 2, 0, 302, 302, 815, 815, 2, 0, 528, 528, 530, 530,
        2, 0, 449, 449, 538, 538, 2, 0, 514, 514, 803, 803, 2, 0, 123, 123, 148, 148, 3, 0, 369, 369,
        539, 539, 650, 650, 2, 0, 287, 287, 611, 611, 2, 0, 128, 128, 719, 719, 3, 0, 206, 206, 422,
        422, 574, 574, 4, 0, 242, 242, 443, 443, 497, 497, 614, 614, 13, 0, 133, 133, 148, 148, 170,
        170, 173, 173, 188, 188, 236, 236, 423, 423, 427, 427, 451, 451, 510, 510, 565, 565, 594,
        594, 616, 616, 4, 0, 483, 483, 572, 572, 618, 618, 636, 636, 2, 0, 97, 97, 148, 148, 2, 0, 128,
        128, 369, 369, 2, 0, 180, 180, 431, 431, 5, 0, 56, 56, 180, 180, 184, 184, 333, 333, 431, 431,
        3, 0, 180, 180, 431, 431, 619, 619, 2, 0, 76, 76, 601, 601, 2, 0, 203, 203, 251, 251, 2, 0, 235,
        236, 263, 263, 6, 0, 10, 10, 96, 96, 256, 256, 334, 334, 522, 522, 567, 567, 2, 0, 84, 84, 430,
        430, 4, 0, 225, 225, 421, 421, 547, 547, 617, 617, 5, 0, 32, 32, 163, 163, 165, 165, 208, 208,
        515, 515, 2, 0, 618, 618, 710, 710, 2, 0, 134, 135, 178, 178, 3, 0, 183, 183, 596, 596, 610,
        610, 2, 0, 15, 15, 767, 767, 2, 0, 394, 394, 770, 770, 2, 0, 10, 10, 16, 16, 2, 0, 750, 750, 752,
        757, 3, 0, 145, 145, 349, 349, 760, 762, 1, 0, 758, 759, 1, 0, 765, 766, 2, 0, 758, 759, 764,
        764, 2, 0, 35, 36, 38, 38, 2, 0, 326, 326, 345, 345, 5, 0, 548, 548, 551, 551, 564, 564, 632,
        632, 635, 635, 4, 0, 678, 679, 692, 692, 694, 694, 696, 696, 2, 0, 684, 684, 686, 686, 2, 0,
        681, 681, 685, 685, 2, 0, 191, 191, 268, 268, 2, 0, 232, 232, 695, 695, 2, 0, 5, 5, 558, 558,
        1, 0, 114, 115, 1, 0, 792, 793, 4, 0, 113, 113, 116, 116, 583, 583, 586, 586, 4, 0, 211, 211,
        279, 279, 351, 353, 411, 412, 2, 0, 371, 371, 745, 745, 2, 0, 745, 745, 763, 763, 5, 0, 118,
        121, 226, 228, 341, 342, 494, 494, 655, 655, 9, 0, 122, 122, 229, 229, 337, 337, 343, 343,
        350, 350, 429, 429, 495, 495, 640, 640, 656, 656, 3, 0, 92, 92, 175, 175, 605, 605, 2, 0, 101,
        101, 540, 540, 2, 0, 377, 377, 485, 485, 10, 0, 53, 53, 64, 64, 73, 73, 87, 89, 107, 107, 336,
        336, 355, 355, 492, 492, 557, 557, 576, 576, 2, 0, 554, 554, 637, 637, 3, 0, 128, 128, 152,
        152, 192, 192, 3, 0, 128, 128, 142, 142, 334, 334, 3, 0, 204, 204, 402, 402, 513, 513, 3, 0,
        44, 44, 220, 220, 488, 488, 1, 0, 661, 662, 2, 0, 599, 599, 621, 621, 5, 0, 31, 31, 249, 249,
        331, 331, 516, 516, 588, 588, 4, 0, 126, 126, 192, 192, 195, 195, 378, 378, 1, 0, 41, 42, 2,
        0, 290, 290, 330, 330, 4, 0, 211, 212, 279, 279, 351, 353, 411, 412, 3, 0, 512, 512, 612, 612,
        657, 657, 1, 0, 544, 546, 2, 0, 61, 61, 575, 575, 6, 0, 78, 78, 80, 80, 128, 128, 152, 152, 192,
        192, 442, 442, 3, 0, 191, 191, 268, 268, 373, 373, 2, 0, 142, 142, 334, 334, 2, 0, 280, 280,
        432, 432, 2, 0, 323, 323, 344, 344, 2, 0, 112, 112, 236, 236, 3, 0, 240, 240, 251, 251, 397,
        397, 2, 0, 541, 541, 579, 579, 2, 0, 380, 380, 385, 385, 2, 0, 284, 284, 375, 375, 2, 0, 848,
        848, 850, 850, 3, 0, 747, 749, 788, 788, 790, 791, 2, 0, 747, 749, 788, 788, 2, 0, 747, 749,
        790, 791, 1, 0, 788, 789, 2, 0, 183, 183, 596, 596, 2, 0, 376, 376, 786, 786, 1, 0, 747, 749,
        1, 0, 750, 751, 5, 0, 214, 214, 284, 284, 502, 502, 658, 658, 673, 673, 3, 0, 173, 173, 510,
        510, 714, 714, 32, 0, 19, 19, 29, 29, 46, 47, 58, 58, 61, 61, 75, 75, 77, 77, 90, 90, 123, 123,
        147, 147, 159, 159, 196, 197, 219, 219, 222, 222, 234, 234, 245, 245, 267, 267, 373, 373,
        415, 415, 417, 417, 455, 455, 468, 468, 480, 480, 489, 489, 512, 512, 514, 514, 543, 543,
        552, 552, 597, 597, 606, 607, 651, 651, 677, 677, 9, 0, 170, 170, 188, 188, 369, 369, 423,
        423, 427, 427, 451, 451, 459, 459, 565, 565, 709, 709, 166, 0, 2, 3, 5, 9, 12, 12, 16, 16, 21,
        21, 23, 27, 33, 33, 37, 37, 40, 42, 44, 44, 50, 50, 53, 54, 56, 57, 63, 68, 70, 71, 73, 74, 76,
        76, 78, 82, 84, 85, 87, 89, 91, 91, 96, 96, 101, 101, 107, 107, 111, 113, 116, 116, 122, 122,
        129, 130, 132, 132, 138, 142, 150, 152, 156, 156, 158, 158, 160, 160, 162, 166, 168, 169,
        171, 172, 176, 177, 179, 181, 184, 185, 189, 192, 201, 202, 204, 204, 208, 208, 210, 213,
        216, 216, 220, 220, 224, 225, 229, 230, 233, 233, 235, 235, 238, 238, 243, 244, 250, 250,
        255, 256, 258, 259, 262, 262, 264, 264, 268, 268, 270, 270, 273, 274, 279, 280, 286, 286,
        288, 289, 296, 296, 298, 305, 307, 314, 316, 319, 321, 324, 327, 328, 333, 337, 340, 340,
        343, 344, 346, 346, 348, 348, 350, 358, 361, 361, 363, 363, 365, 368, 374, 374, 377, 377,
        379, 379, 381, 381, 384, 384, 386, 387, 390, 390, 398, 404, 406, 413, 418, 419, 421, 421,
        424, 426, 429, 431, 434, 434, 438, 439, 441, 442, 445, 449, 452, 452, 454, 454, 456, 456,
        460, 466, 470, 470, 472, 474, 476, 476, 481, 483, 485, 486, 488, 488, 490, 490, 492, 492,
        495, 496, 500, 501, 503, 503, 508, 508, 513, 513, 515, 515, 517, 517, 519, 522, 528, 530,
        532, 532, 535, 535, 538, 538, 540, 540, 542, 542, 544, 547, 553, 553, 556, 561, 566, 568,
        571, 572, 575, 578, 580, 581, 583, 583, 586, 586, 592, 593, 598, 599, 601, 604, 610, 610,
        613, 613, 615, 615, 617, 619, 625, 625, 627, 627, 631, 631, 636, 636, 638, 641, 646, 648,
        650, 650, 652, 653, 656, 656, 659, 662, 664, 664, 669, 671, 674, 675, 680, 680, 682, 682,
        689, 690, 693, 693, 695, 695, 697, 698, 702, 708, 711, 713, 715, 725, 727, 730, 732, 732,
        735, 738, 792, 797, 799, 801, 803, 843, 4, 0, 583, 583, 586, 586, 731, 731, 733, 744, 54,
        0, 2, 2, 12, 12, 19, 19, 27, 27, 29, 29, 46, 47, 58, 58, 61, 61, 66, 66, 75, 75, 77, 77, 90, 90,
        123, 123, 147, 147, 159, 159, 196, 197, 201, 201, 210, 210, 219, 219, 222, 222, 224, 224,
        245, 245, 267, 267, 373, 373, 387, 387, 390, 390, 398, 398, 401, 401, 405, 405, 413, 413,
        415, 415, 417, 417, 452, 452, 455, 455, 468, 468, 470, 470, 480, 480, 489, 489, 496, 496,
        503, 503, 512, 512, 514, 514, 519, 520, 543, 543, 552, 552, 597, 597, 606, 607, 615, 615,
        648, 648, 651, 651, 659, 659, 661, 662, 677, 677, 720, 723, 158, 0, 3, 3, 5, 9, 16, 16, 21,
        21, 23, 26, 33, 33, 37, 37, 40, 42, 44, 44, 50, 50, 53, 54, 56, 57, 63, 65, 67, 68, 70, 71, 73,
        74, 76, 76, 78, 82, 84, 85, 87, 89, 91, 91, 96, 96, 101, 101, 107, 107, 111, 113, 116, 116,
        122, 122, 129, 130, 132, 132, 138, 142, 150, 152, 156, 156, 158, 158, 160, 160, 162, 166,
        168, 169, 171, 171, 176, 176, 179, 181, 184, 185, 189, 192, 202, 202, 204, 204, 208, 208,
        211, 214, 216, 216, 220, 220, 225, 225, 229, 230, 233, 233, 235, 235, 238, 238, 243, 244,
        250, 250, 255, 256, 258, 259, 262, 262, 264, 264, 268, 268, 270, 270, 273, 274, 279, 280,
        284, 284, 286, 286, 288, 289, 296, 296, 298, 305, 307, 314, 316, 319, 321, 324, 327, 328,
        333, 337, 340, 340, 343, 344, 346, 346, 348, 348, 350, 358, 361, 361, 363, 363, 365, 368,
        374, 374, 377, 377, 379, 379, 381, 381, 384, 384, 399, 400, 402, 404, 406, 412, 418, 419,
        421, 421, 424, 426, 429, 431, 434, 434, 438, 439, 441, 442, 445, 449, 454, 454, 456, 456,
        460, 466, 472, 474, 476, 476, 481, 483, 485, 486, 488, 488, 490, 490, 492, 492, 495, 495,
        500, 502, 508, 508, 513, 513, 515, 515, 517, 517, 521, 522, 528, 530, 532, 532, 535, 535,
        538, 538, 540, 540, 542, 542, 544, 547, 553, 553, 556, 561, 565, 568, 571, 572, 575, 578,
        580, 581, 583, 583, 586, 586, 592, 593, 598, 604, 610, 610, 613, 613, 617, 619, 627, 627,
        631, 631, 636, 636, 638, 641, 647, 647, 650, 650, 652, 653, 656, 656, 664, 664, 669, 671,
        674, 676, 680, 680, 682, 682, 689, 690, 693, 693, 695, 695, 697, 698, 702, 708, 711, 712,
        716, 717, 719, 719, 724, 725, 727, 728, 792, 793, 798, 798, 10168, 0, 1459, 1, 0, 0, 0, 2,
        1536, 1, 0, 0, 0, 4, 1538, 1, 0, 0, 0, 6, 1561, 1, 0, 0, 0, 8, 1575, 1, 0, 0, 0, 10, 1578, 1, 0, 0,
        0, 12, 1616, 1, 0, 0, 0, 14, 1625, 1, 0, 0, 0, 16, 1638, 1, 0, 0, 0, 18, 1640, 1, 0, 0, 0, 20, 1645,
        1, 0, 0, 0, 22, 1665, 1, 0, 0, 0, 24, 1674, 1, 0, 0, 0, 26, 1676, 1, 0, 0, 0, 28, 1691, 1, 0, 0, 0,
        30, 1787, 1, 0, 0, 0, 32, 1791, 1, 0, 0, 0, 34, 1807, 1, 0, 0, 0, 36, 1944, 1, 0, 0, 0, 38, 1949,
        1, 0, 0, 0, 40, 1951, 1, 0, 0, 0, 42, 1953, 1, 0, 0, 0, 44, 1967, 1, 0, 0, 0, 46, 1975, 1, 0, 0, 0,
        48, 1991, 1, 0, 0, 0, 50, 1993, 1, 0, 0, 0, 52, 1996, 1, 0, 0, 0, 54, 2001, 1, 0, 0, 0, 56, 2003,
        1, 0, 0, 0, 58, 2018, 1, 0, 0, 0, 60, 2026, 1, 0, 0, 0, 62, 2036, 1, 0, 0, 0, 64, 2038, 1, 0, 0, 0,
        66, 2060, 1, 0, 0, 0, 68, 2069, 1, 0, 0, 0, 70, 2072, 1, 0, 0, 0, 72, 2085, 1, 0, 0, 0, 74, 2090,
        1, 0, 0, 0, 76, 2094, 1, 0, 0, 0, 78, 2133, 1, 0, 0, 0, 80, 2135, 1, 0, 0, 0, 82, 2155, 1, 0, 0, 0,
        84, 2170, 1, 0, 0, 0, 86, 2173, 1, 0, 0, 0, 88, 2198, 1, 0, 0, 0, 90, 2208, 1, 0, 0, 0, 92, 2211,
        1, 0, 0, 0, 94, 2216, 1, 0, 0, 0, 96, 2226, 1, 0, 0, 0, 98, 2228, 1, 0, 0, 0, 100, 2232, 1, 0, 0,
        0, 102, 2244, 1, 0, 0, 0, 104, 2272, 1, 0, 0, 0, 106, 2302, 1, 0, 0, 0, 108, 2319, 1, 0, 0, 0, 110,
        2322, 1, 0, 0, 0, 112, 2343, 1, 0, 0, 0, 114, 2346, 1, 0, 0, 0, 116, 2404, 1, 0, 0, 0, 118, 2406,
        1, 0, 0, 0, 120, 2410, 1, 0, 0, 0, 122, 2419, 1, 0, 0, 0, 124, 2435, 1, 0, 0, 0, 126, 2437, 1, 0,
        0, 0, 128, 2445, 1, 0, 0, 0, 130, 2471, 1, 0, 0, 0, 132, 2473, 1, 0, 0, 0, 134, 2485, 1, 0, 0, 0,
        136, 2500, 1, 0, 0, 0, 138, 2502, 1, 0, 0, 0, 140, 2505, 1, 0, 0, 0, 142, 2526, 1, 0, 0, 0, 144,
        2528, 1, 0, 0, 0, 146, 2534, 1, 0, 0, 0, 148, 2540, 1, 0, 0, 0, 150, 2546, 1, 0, 0, 0, 152, 2552,
        1, 0, 0, 0, 154, 2558, 1, 0, 0, 0, 156, 2565, 1, 0, 0, 0, 158, 2573, 1, 0, 0, 0, 160, 2575, 1, 0,
        0, 0, 162, 2581, 1, 0, 0, 0, 164, 2587, 1, 0, 0, 0, 166, 2593, 1, 0, 0, 0, 168, 2600, 1, 0, 0, 0,
        170, 2618, 1, 0, 0, 0, 172, 2620, 1, 0, 0, 0, 174, 2624, 1, 0, 0, 0, 176, 2629, 1, 0, 0, 0, 178,
        2648, 1, 0, 0, 0, 180, 2652, 1, 0, 0, 0, 182, 2685, 1, 0, 0, 0, 184, 2716, 1, 0, 0, 0, 186, 2733,
        1, 0, 0, 0, 188, 2735, 1, 0, 0, 0, 190, 2754, 1, 0, 0, 0, 192, 2760, 1, 0, 0, 0, 194, 2766, 1, 0,
        0, 0, 196, 2772, 1, 0, 0, 0, 198, 2779, 1, 0, 0, 0, 200, 2788, 1, 0, 0, 0, 202, 2805, 1, 0, 0, 0,
        204, 2807, 1, 0, 0, 0, 206, 2814, 1, 0, 0, 0, 208, 2824, 1, 0, 0, 0, 210, 2838, 1, 0, 0, 0, 212,
        2844, 1, 0, 0, 0, 214, 2852, 1, 0, 0, 0, 216, 2858, 1, 0, 0, 0, 218, 2866, 1, 0, 0, 0, 220, 2872,
        1, 0, 0, 0, 222, 2882, 1, 0, 0, 0, 224, 2886, 1, 0, 0, 0, 226, 2892, 1, 0, 0, 0, 228, 2897, 1, 0,
        0, 0, 230, 2907, 1, 0, 0, 0, 232, 2950, 1, 0, 0, 0, 234, 2955, 1, 0, 0, 0, 236, 2957, 1, 0, 0, 0,
        238, 2960, 1, 0, 0, 0, 240, 2990, 1, 0, 0, 0, 242, 2992, 1, 0, 0, 0, 244, 3023, 1, 0, 0, 0, 246,
        3030, 1, 0, 0, 0, 248, 3034, 1, 0, 0, 0, 250, 3042, 1, 0, 0, 0, 252, 3065, 1, 0, 0, 0, 254, 3067,
        1, 0, 0, 0, 256, 3085, 1, 0, 0, 0, 258, 3097, 1, 0, 0, 0, 260, 3102, 1, 0, 0, 0, 262, 3108, 1, 0,
        0, 0, 264, 3141, 1, 0, 0, 0, 266, 3143, 1, 0, 0, 0, 268, 3151, 1, 0, 0, 0, 270, 3160, 1, 0, 0, 0,
        272, 3170, 1, 0, 0, 0, 274, 3185, 1, 0, 0, 0, 276, 3207, 1, 0, 0, 0, 278, 3226, 1, 0, 0, 0, 280,
        3253, 1, 0, 0, 0, 282, 3265, 1, 0, 0, 0, 284, 3289, 1, 0, 0, 0, 286, 3291, 1, 0, 0, 0, 288, 3303,
        1, 0, 0, 0, 290, 3305, 1, 0, 0, 0, 292, 3331, 1, 0, 0, 0, 294, 3333, 1, 0, 0, 0, 296, 3335, 1, 0,
        0, 0, 298, 3338, 1, 0, 0, 0, 300, 3341, 1, 0, 0, 0, 302, 3348, 1, 0, 0, 0, 304, 3350, 1, 0, 0, 0,
        306, 3380, 1, 0, 0, 0, 308, 3391, 1, 0, 0, 0, 310, 3394, 1, 0, 0, 0, 312, 3403, 1, 0, 0, 0, 314,
        3407, 1, 0, 0, 0, 316, 3412, 1, 0, 0, 0, 318, 3425, 1, 0, 0, 0, 320, 3430, 1, 0, 0, 0, 322, 3434,
        1, 0, 0, 0, 324, 3450, 1, 0, 0, 0, 326, 3452, 1, 0, 0, 0, 328, 3470, 1, 0, 0, 0, 330, 3472, 1, 0,
        0, 0, 332, 3481, 1, 0, 0, 0, 334, 3493, 1, 0, 0, 0, 336, 3500, 1, 0, 0, 0, 338, 3506, 1, 0, 0, 0,
        340, 3509, 1, 0, 0, 0, 342, 3513, 1, 0, 0, 0, 344, 3515, 1, 0, 0, 0, 346, 3520, 1, 0, 0, 0, 348,
        3528, 1, 0, 0, 0, 350, 3537, 1, 0, 0, 0, 352, 3540, 1, 0, 0, 0, 354, 3549, 1, 0, 0, 0, 356, 3552,
        1, 0, 0, 0, 358, 3569, 1, 0, 0, 0, 360, 3571, 1, 0, 0, 0, 362, 3576, 1, 0, 0, 0, 364, 3580, 1, 0,
        0, 0, 366, 3594, 1, 0, 0, 0, 368, 3597, 1, 0, 0, 0, 370, 3603, 1, 0, 0, 0, 372, 3616, 1, 0, 0, 0,
        374, 3624, 1, 0, 0, 0, 376, 3650, 1, 0, 0, 0, 378, 3663, 1, 0, 0, 0, 380, 3670, 1, 0, 0, 0, 382,
        3672, 1, 0, 0, 0, 384, 3684, 1, 0, 0, 0, 386, 3686, 1, 0, 0, 0, 388, 3696, 1, 0, 0, 0, 390, 3719,
        1, 0, 0, 0, 392, 3721, 1, 0, 0, 0, 394, 3728, 1, 0, 0, 0, 396, 3738, 1, 0, 0, 0, 398, 3773, 1, 0,
        0, 0, 400, 3780, 1, 0, 0, 0, 402, 3786, 1, 0, 0, 0, 404, 3788, 1, 0, 0, 0, 406, 3792, 1, 0, 0, 0,
        408, 3800, 1, 0, 0, 0, 410, 3802, 1, 0, 0, 0, 412, 3807, 1, 0, 0, 0, 414, 3811, 1, 0, 0, 0, 416,
        3839, 1, 0, 0, 0, 418, 3841, 1, 0, 0, 0, 420, 3843, 1, 0, 0, 0, 422, 3851, 1, 0, 0, 0, 424, 3853,
        1, 0, 0, 0, 426, 3861, 1, 0, 0, 0, 428, 3871, 1, 0, 0, 0, 430, 3874, 1, 0, 0, 0, 432, 3899, 1, 0,
        0, 0, 434, 3926, 1, 0, 0, 0, 436, 3928, 1, 0, 0, 0, 438, 3937, 1, 0, 0, 0, 440, 3968, 1, 0, 0, 0,
        442, 3986, 1, 0, 0, 0, 444, 3988, 1, 0, 0, 0, 446, 4002, 1, 0, 0, 0, 448, 4004, 1, 0, 0, 0, 450,
        4035, 1, 0, 0, 0, 452, 4038, 1, 0, 0, 0, 454, 4078, 1, 0, 0, 0, 456, 4091, 1, 0, 0, 0, 458, 4093,
        1, 0, 0, 0, 460, 4100, 1, 0, 0, 0, 462, 4113, 1, 0, 0, 0, 464, 4115, 1, 0, 0, 0, 466, 4122, 1, 0,
        0, 0, 468, 4258, 1, 0, 0, 0, 470, 4260, 1, 0, 0, 0, 472, 4262, 1, 0, 0, 0, 474, 4264, 1, 0, 0, 0,
        476, 4266, 1, 0, 0, 0, 478, 4268, 1, 0, 0, 0, 480, 4270, 1, 0, 0, 0, 482, 4272, 1, 0, 0, 0, 484,
        4274, 1, 0, 0, 0, 486, 4276, 1, 0, 0, 0, 488, 4278, 1, 0, 0, 0, 490, 4280, 1, 0, 0, 0, 492, 4282,
        1, 0, 0, 0, 494, 4284, 1, 0, 0, 0, 496, 4286, 1, 0, 0, 0, 498, 4288, 1, 0, 0, 0, 500, 4290, 1, 0,
        0, 0, 502, 4292, 1, 0, 0, 0, 504, 4294, 1, 0, 0, 0, 506, 4296, 1, 0, 0, 0, 508, 4298, 1, 0, 0, 0,
        510, 4300, 1, 0, 0, 0, 512, 4302, 1, 0, 0, 0, 514, 4304, 1, 0, 0, 0, 516, 4306, 1, 0, 0, 0, 518,
        4308, 1, 0, 0, 0, 520, 4312, 1, 0, 0, 0, 522, 4314, 1, 0, 0, 0, 524, 4319, 1, 0, 0, 0, 526, 4323,
        1, 0, 0, 0, 528, 4339, 1, 0, 0, 0, 530, 4341, 1, 0, 0, 0, 532, 4343, 1, 0, 0, 0, 534, 4345, 1, 0,
        0, 0, 536, 4358, 1, 0, 0, 0, 538, 4421, 1, 0, 0, 0, 540, 4423, 1, 0, 0, 0, 542, 4431, 1, 0, 0, 0,
        544, 4439, 1, 0, 0, 0, 546, 4447, 1, 0, 0, 0, 548, 4449, 1, 0, 0, 0, 550, 4457, 1, 0, 0, 0, 552,
        4481, 1, 0, 0, 0, 554, 4494, 1, 0, 0, 0, 556, 4503, 1, 0, 0, 0, 558, 4507, 1, 0, 0, 0, 560, 4511,
        1, 0, 0, 0, 562, 4515, 1, 0, 0, 0, 564, 4519, 1, 0, 0, 0, 566, 4527, 1, 0, 0, 0, 568, 4534, 1, 0,
        0, 0, 570, 4538, 1, 0, 0, 0, 572, 4549, 1, 0, 0, 0, 574, 4551, 1, 0, 0, 0, 576, 4555, 1, 0, 0, 0,
        578, 4559, 1, 0, 0, 0, 580, 4563, 1, 0, 0, 0, 582, 4576, 1, 0, 0, 0, 584, 4578, 1, 0, 0, 0, 586,
        4584, 1, 0, 0, 0, 588, 4592, 1, 0, 0, 0, 590, 4629, 1, 0, 0, 0, 592, 4631, 1, 0, 0, 0, 594, 4644,
        1, 0, 0, 0, 596, 4646, 1, 0, 0, 0, 598, 4693, 1, 0, 0, 0, 600, 4776, 1, 0, 0, 0, 602, 4835, 1, 0,
        0, 0, 604, 4837, 1, 0, 0, 0, 606, 4840, 1, 0, 0, 0, 608, 4852, 1, 0, 0, 0, 610, 4871, 1, 0, 0, 0,
        612, 4873, 1, 0, 0, 0, 614, 4877, 1, 0, 0, 0, 616, 4882, 1, 0, 0, 0, 618, 4935, 1, 0, 0, 0, 620,
        4942, 1, 0, 0, 0, 622, 4944, 1, 0, 0, 0, 624, 4951, 1, 0, 0, 0, 626, 4999, 1, 0, 0, 0, 628, 5012,
        1, 0, 0, 0, 630, 5014, 1, 0, 0, 0, 632, 5017, 1, 0, 0, 0, 634, 5028, 1, 0, 0, 0, 636, 5033, 1, 0,
        0, 0, 638, 5036, 1, 0, 0, 0, 640, 5051, 1, 0, 0, 0, 642, 5097, 1, 0, 0, 0, 644, 5099, 1, 0, 0, 0,
        646, 5149, 1, 0, 0, 0, 648, 5167, 1, 0, 0, 0, 650, 5169, 1, 0, 0, 0, 652, 5185, 1, 0, 0, 0, 654,
        5197, 1, 0, 0, 0, 656, 5222, 1, 0, 0, 0, 658, 5224, 1, 0, 0, 0, 660, 5232, 1, 0, 0, 0, 662, 5278,
        1, 0, 0, 0, 664, 5297, 1, 0, 0, 0, 666, 5302, 1, 0, 0, 0, 668, 5304, 1, 0, 0, 0, 670, 5328, 1, 0,
        0, 0, 672, 5330, 1, 0, 0, 0, 674, 5383, 1, 0, 0, 0, 676, 5394, 1, 0, 0, 0, 678, 5396, 1, 0, 0, 0,
        680, 5399, 1, 0, 0, 0, 682, 5412, 1, 0, 0, 0, 684, 5444, 1, 0, 0, 0, 686, 5452, 1, 0, 0, 0, 688,
        5454, 1, 0, 0, 0, 690, 5465, 1, 0, 0, 0, 692, 5467, 1, 0, 0, 0, 694, 5478, 1, 0, 0, 0, 696, 5480,
        1, 0, 0, 0, 698, 5485, 1, 0, 0, 0, 700, 5496, 1, 0, 0, 0, 702, 5507, 1, 0, 0, 0, 704, 5515, 1, 0,
        0, 0, 706, 5524, 1, 0, 0, 0, 708, 5533, 1, 0, 0, 0, 710, 5536, 1, 0, 0, 0, 712, 5541, 1, 0, 0, 0,
        714, 5546, 1, 0, 0, 0, 716, 5551, 1, 0, 0, 0, 718, 5564, 1, 0, 0, 0, 720, 5568, 1, 0, 0, 0, 722,
        5575, 1, 0, 0, 0, 724, 5592, 1, 0, 0, 0, 726, 5609, 1, 0, 0, 0, 728, 5622, 1, 0, 0, 0, 730, 5628,
        1, 0, 0, 0, 732, 5635, 1, 0, 0, 0, 734, 5642, 1, 0, 0, 0, 736, 5647, 1, 0, 0, 0, 738, 5652, 1, 0,
        0, 0, 740, 5655, 1, 0, 0, 0, 742, 5668, 1, 0, 0, 0, 744, 5676, 1, 0, 0, 0, 746, 5682, 1, 0, 0, 0,
        748, 5690, 1, 0, 0, 0, 750, 5695, 1, 0, 0, 0, 752, 5700, 1, 0, 0, 0, 754, 5703, 1, 0, 0, 0, 756,
        5713, 1, 0, 0, 0, 758, 5721, 1, 0, 0, 0, 760, 5726, 1, 0, 0, 0, 762, 5731, 1, 0, 0, 0, 764, 5735,
        1, 0, 0, 0, 766, 5741, 1, 0, 0, 0, 768, 5746, 1, 0, 0, 0, 770, 5751, 1, 0, 0, 0, 772, 5756, 1, 0,
        0, 0, 774, 5763, 1, 0, 0, 0, 776, 5770, 1, 0, 0, 0, 778, 5776, 1, 0, 0, 0, 780, 5782, 1, 0, 0, 0,
        782, 5787, 1, 0, 0, 0, 784, 5797, 1, 0, 0, 0, 786, 5801, 1, 0, 0, 0, 788, 5803, 1, 0, 0, 0, 790,
        5805, 1, 0, 0, 0, 792, 5808, 1, 0, 0, 0, 794, 5823, 1, 0, 0, 0, 796, 5861, 1, 0, 0, 0, 798, 5865,
        1, 0, 0, 0, 800, 5867, 1, 0, 0, 0, 802, 5875, 1, 0, 0, 0, 804, 5879, 1, 0, 0, 0, 806, 5887, 1, 0,
        0, 0, 808, 5896, 1, 0, 0, 0, 810, 5898, 1, 0, 0, 0, 812, 5917, 1, 0, 0, 0, 814, 5919, 1, 0, 0, 0,
        816, 5921, 1, 0, 0, 0, 818, 5936, 1, 0, 0, 0, 820, 5948, 1, 0, 0, 0, 822, 5950, 1, 0, 0, 0, 824,
        5958, 1, 0, 0, 0, 826, 5966, 1, 0, 0, 0, 828, 5975, 1, 0, 0, 0, 830, 5977, 1, 0, 0, 0, 832, 5995,
        1, 0, 0, 0, 834, 6009, 1, 0, 0, 0, 836, 6014, 1, 0, 0, 0, 838, 6020, 1, 0, 0, 0, 840, 6022, 1, 0,
        0, 0, 842, 6038, 1, 0, 0, 0, 844, 6046, 1, 0, 0, 0, 846, 6056, 1, 0, 0, 0, 848, 6069, 1, 0, 0, 0,
        850, 6071, 1, 0, 0, 0, 852, 6077, 1, 0, 0, 0, 854, 6101, 1, 0, 0, 0, 856, 6103, 1, 0, 0, 0, 858,
        6106, 1, 0, 0, 0, 860, 6109, 1, 0, 0, 0, 862, 6122, 1, 0, 0, 0, 864, 6138, 1, 0, 0, 0, 866, 6161,
        1, 0, 0, 0, 868, 6163, 1, 0, 0, 0, 870, 6200, 1, 0, 0, 0, 872, 6202, 1, 0, 0, 0, 874, 6356, 1, 0,
        0, 0, 876, 6369, 1, 0, 0, 0, 878, 6376, 1, 0, 0, 0, 880, 6463, 1, 0, 0, 0, 882, 6465, 1, 0, 0, 0,
        884, 6520, 1, 0, 0, 0, 886, 6522, 1, 0, 0, 0, 888, 6527, 1, 0, 0, 0, 890, 6543, 1, 0, 0, 0, 892,
        6549, 1, 0, 0, 0, 894, 6551, 1, 0, 0, 0, 896, 6570, 1, 0, 0, 0, 898, 6573, 1, 0, 0, 0, 900, 6582,
        1, 0, 0, 0, 902, 6584, 1, 0, 0, 0, 904, 6607, 1, 0, 0, 0, 906, 6882, 1, 0, 0, 0, 908, 6884, 1, 0,
        0, 0, 910, 6910, 1, 0, 0, 0, 912, 6912, 1, 0, 0, 0, 914, 6918, 1, 0, 0, 0, 916, 6920, 1, 0, 0, 0,
        918, 6935, 1, 0, 0, 0, 920, 6943, 1, 0, 0, 0, 922, 6945, 1, 0, 0, 0, 924, 6974, 1, 0, 0, 0, 926,
        7007, 1, 0, 0, 0, 928, 7009, 1, 0, 0, 0, 930, 7017, 1, 0, 0, 0, 932, 7024, 1, 0, 0, 0, 934, 7026,
        1, 0, 0, 0, 936, 7036, 1, 0, 0, 0, 938, 7052, 1, 0, 0, 0, 940, 7054, 1, 0, 0, 0, 942, 7058, 1, 0,
        0, 0, 944, 7061, 1, 0, 0, 0, 946, 7064, 1, 0, 0, 0, 948, 7115, 1, 0, 0, 0, 950, 7117, 1, 0, 0, 0,
        952, 7128, 1, 0, 0, 0, 954, 7130, 1, 0, 0, 0, 956, 7132, 1, 0, 0, 0, 958, 7136, 1, 0, 0, 0, 960,
        7138, 1, 0, 0, 0, 962, 7140, 1, 0, 0, 0, 964, 7144, 1, 0, 0, 0, 966, 7148, 1, 0, 0, 0, 968, 7152,
        1, 0, 0, 0, 970, 7160, 1, 0, 0, 0, 972, 7164, 1, 0, 0, 0, 974, 7172, 1, 0, 0, 0, 976, 7174, 1, 0,
        0, 0, 978, 7191, 1, 0, 0, 0, 980, 7193, 1, 0, 0, 0, 982, 7196, 1, 0, 0, 0, 984, 7201, 1, 0, 0, 0,
        986, 7209, 1, 0, 0, 0, 988, 7215, 1, 0, 0, 0, 990, 7219, 1, 0, 0, 0, 992, 7236, 1, 0, 0, 0, 994,
        7239, 1, 0, 0, 0, 996, 7244, 1, 0, 0, 0, 998, 7246, 1, 0, 0, 0, 1000, 7249, 1, 0, 0, 0, 1002, 7258,
        1, 0, 0, 0, 1004, 7266, 1, 0, 0, 0, 1006, 7268, 1, 0, 0, 0, 1008, 7273, 1, 0, 0, 0, 1010, 7280,
        1, 0, 0, 0, 1012, 7290, 1, 0, 0, 0, 1014, 7298, 1, 0, 0, 0, 1016, 7300, 1, 0, 0, 0, 1018, 7310,
        1, 0, 0, 0, 1020, 7318, 1, 0, 0, 0, 1022, 7320, 1, 0, 0, 0, 1024, 7326, 1, 0, 0, 0, 1026, 7347,
        1, 0, 0, 0, 1028, 7349, 1, 0, 0, 0, 1030, 7355, 1, 0, 0, 0, 1032, 7358, 1, 0, 0, 0, 1034, 7361,
        1, 0, 0, 0, 1036, 7389, 1, 0, 0, 0, 1038, 7393, 1, 0, 0, 0, 1040, 7400, 1, 0, 0, 0, 1042, 7407,
        1, 0, 0, 0, 1044, 7409, 1, 0, 0, 0, 1046, 7425, 1, 0, 0, 0, 1048, 7441, 1, 0, 0, 0, 1050, 7445,
        1, 0, 0, 0, 1052, 7448, 1, 0, 0, 0, 1054, 7451, 1, 0, 0, 0, 1056, 7475, 1, 0, 0, 0, 1058, 7477,
        1, 0, 0, 0, 1060, 7485, 1, 0, 0, 0, 1062, 7487, 1, 0, 0, 0, 1064, 7491, 1, 0, 0, 0, 1066, 7570,
        1, 0, 0, 0, 1068, 7572, 1, 0, 0, 0, 1070, 7576, 1, 0, 0, 0, 1072, 7671, 1, 0, 0, 0, 1074, 7673,
        1, 0, 0, 0, 1076, 7675, 1, 0, 0, 0, 1078, 7677, 1, 0, 0, 0, 1080, 7682, 1, 0, 0, 0, 1082, 7698,
        1, 0, 0, 0, 1084, 7700, 1, 0, 0, 0, 1086, 7734, 1, 0, 0, 0, 1088, 7736, 1, 0, 0, 0, 1090, 7747,
        1, 0, 0, 0, 1092, 7754, 1, 0, 0, 0, 1094, 7770, 1, 0, 0, 0, 1096, 7776, 1, 0, 0, 0, 1098, 7778,
        1, 0, 0, 0, 1100, 7782, 1, 0, 0, 0, 1102, 7804, 1, 0, 0, 0, 1104, 7806, 1, 0, 0, 0, 1106, 7808,
        1, 0, 0, 0, 1108, 7815, 1, 0, 0, 0, 1110, 7817, 1, 0, 0, 0, 1112, 7819, 1, 0, 0, 0, 1114, 7968,
        1, 0, 0, 0, 1116, 7973, 1, 0, 0, 0, 1118, 7980, 1, 0, 0, 0, 1120, 7982, 1, 0, 0, 0, 1122, 7990,
        1, 0, 0, 0, 1124, 8008, 1, 0, 0, 0, 1126, 8016, 1, 0, 0, 0, 1128, 8024, 1, 0, 0, 0, 1130, 8026,
        1, 0, 0, 0, 1132, 8030, 1, 0, 0, 0, 1134, 8039, 1, 0, 0, 0, 1136, 8045, 1, 0, 0, 0, 1138, 8052,
        1, 0, 0, 0, 1140, 8054, 1, 0, 0, 0, 1142, 8069, 1, 0, 0, 0, 1144, 8076, 1, 0, 0, 0, 1146, 8079,
        1, 0, 0, 0, 1148, 8223, 1, 0, 0, 0, 1150, 8227, 1, 0, 0, 0, 1152, 8230, 1, 0, 0, 0, 1154, 8239,
        1, 0, 0, 0, 1156, 8248, 1, 0, 0, 0, 1158, 8256, 1, 0, 0, 0, 1160, 8302, 1, 0, 0, 0, 1162, 8304,
        1, 0, 0, 0, 1164, 8325, 1, 0, 0, 0, 1166, 8329, 1, 0, 0, 0, 1168, 8340, 1, 0, 0, 0, 1170, 8385,
        1, 0, 0, 0, 1172, 8421, 1, 0, 0, 0, 1174, 8423, 1, 0, 0, 0, 1176, 8431, 1, 0, 0, 0, 1178, 8444,
        1, 0, 0, 0, 1180, 8446, 1, 0, 0, 0, 1182, 8450, 1, 0, 0, 0, 1184, 8453, 1, 0, 0, 0, 1186, 8457,
        1, 0, 0, 0, 1188, 8462, 1, 0, 0, 0, 1190, 8466, 1, 0, 0, 0, 1192, 8469, 1, 0, 0, 0, 1194, 8472,
        1, 0, 0, 0, 1196, 8476, 1, 0, 0, 0, 1198, 8482, 1, 0, 0, 0, 1200, 8490, 1, 0, 0, 0, 1202, 8498,
        1, 0, 0, 0, 1204, 8504, 1, 0, 0, 0, 1206, 8507, 1, 0, 0, 0, 1208, 8525, 1, 0, 0, 0, 1210, 8527,
        1, 0, 0, 0, 1212, 8533, 1, 0, 0, 0, 1214, 8537, 1, 0, 0, 0, 1216, 8545, 1, 0, 0, 0, 1218, 8553,
        1, 0, 0, 0, 1220, 8565, 1, 0, 0, 0, 1222, 8577, 1, 0, 0, 0, 1224, 8579, 1, 0, 0, 0, 1226, 8583,
        1, 0, 0, 0, 1228, 8588, 1, 0, 0, 0, 1230, 8592, 1, 0, 0, 0, 1232, 8598, 1, 0, 0, 0, 1234, 8604,
        1, 0, 0, 0, 1236, 8611, 1, 0, 0, 0, 1238, 8618, 1, 0, 0, 0, 1240, 8622, 1, 0, 0, 0, 1242, 8641,
        1, 0, 0, 0, 1244, 8643, 1, 0, 0, 0, 1246, 8646, 1, 0, 0, 0, 1248, 8649, 1, 0, 0, 0, 1250, 8658,
        1, 0, 0, 0, 1252, 8660, 1, 0, 0, 0, 1254, 8665, 1, 0, 0, 0, 1256, 8667, 1, 0, 0, 0, 1258, 8669,
        1, 0, 0, 0, 1260, 8671, 1, 0, 0, 0, 1262, 8679, 1, 0, 0, 0, 1264, 8681, 1, 0, 0, 0, 1266, 8683,
        1, 0, 0, 0, 1268, 8685, 1, 0, 0, 0, 1270, 8696, 1, 0, 0, 0, 1272, 8700, 1, 0, 0, 0, 1274, 8702,
        1, 0, 0, 0, 1276, 8704, 1, 0, 0, 0, 1278, 8706, 1, 0, 0, 0, 1280, 8715, 1, 0, 0, 0, 1282, 8717,
        1, 0, 0, 0, 1284, 8719, 1, 0, 0, 0, 1286, 8721, 1, 0, 0, 0, 1288, 8723, 1, 0, 0, 0, 1290, 8725,
        1, 0, 0, 0, 1292, 8727, 1, 0, 0, 0, 1294, 8729, 1, 0, 0, 0, 1296, 8733, 1, 0, 0, 0, 1298, 8737,
        1, 0, 0, 0, 1300, 8739, 1, 0, 0, 0, 1302, 8741, 1, 0, 0, 0, 1304, 8743, 1, 0, 0, 0, 1306, 8745,
        1, 0, 0, 0, 1308, 8747, 1, 0, 0, 0, 1310, 8749, 1, 0, 0, 0, 1312, 8751, 1, 0, 0, 0, 1314, 8753,
        1, 0, 0, 0, 1316, 8755, 1, 0, 0, 0, 1318, 8757, 1, 0, 0, 0, 1320, 8761, 1, 0, 0, 0, 1322, 8763,
        1, 0, 0, 0, 1324, 8766, 1, 0, 0, 0, 1326, 8778, 1, 0, 0, 0, 1328, 8780, 1, 0, 0, 0, 1330, 8788,
        1, 0, 0, 0, 1332, 8796, 1, 0, 0, 0, 1334, 8800, 1, 0, 0, 0, 1336, 8802, 1, 0, 0, 0, 1338, 8806,
        1, 0, 0, 0, 1340, 8808, 1, 0, 0, 0, 1342, 8810, 1, 0, 0, 0, 1344, 8812, 1, 0, 0, 0, 1346, 8814,
        1, 0, 0, 0, 1348, 8819, 1, 0, 0, 0, 1350, 8823, 1, 0, 0, 0, 1352, 8825, 1, 0, 0, 0, 1354, 8833,
        1, 0, 0, 0, 1356, 8837, 1, 0, 0, 0, 1358, 8841, 1, 0, 0, 0, 1360, 8848, 1, 0, 0, 0, 1362, 8851,
        1, 0, 0, 0, 1364, 8853, 1, 0, 0, 0, 1366, 8855, 1, 0, 0, 0, 1368, 8862, 1, 0, 0, 0, 1370, 8869,
        1, 0, 0, 0, 1372, 8874, 1, 0, 0, 0, 1374, 8885, 1, 0, 0, 0, 1376, 8890, 1, 0, 0, 0, 1378, 8892,
        1, 0, 0, 0, 1380, 8894, 1, 0, 0, 0, 1382, 8908, 1, 0, 0, 0, 1384, 8913, 1, 0, 0, 0, 1386, 8918,
        1, 0, 0, 0, 1388, 8925, 1, 0, 0, 0, 1390, 8933, 1, 0, 0, 0, 1392, 8935, 1, 0, 0, 0, 1394, 8946,
        1, 0, 0, 0, 1396, 8948, 1, 0, 0, 0, 1398, 8950, 1, 0, 0, 0, 1400, 8952, 1, 0, 0, 0, 1402, 8960,
        1, 0, 0, 0, 1404, 8964, 1, 0, 0, 0, 1406, 8966, 1, 0, 0, 0, 1408, 8968, 1, 0, 0, 0, 1410, 8976,
        1, 0, 0, 0, 1412, 8980, 1, 0, 0, 0, 1414, 8984, 1, 0, 0, 0, 1416, 8988, 1, 0, 0, 0, 1418, 8990,
        1, 0, 0, 0, 1420, 8993, 1, 0, 0, 0, 1422, 8995, 1, 0, 0, 0, 1424, 9003, 1, 0, 0, 0, 1426, 9005,
        1, 0, 0, 0, 1428, 9008, 1, 0, 0, 0, 1430, 9026, 1, 0, 0, 0, 1432, 9028, 1, 0, 0, 0, 1434, 9030,
        1, 0, 0, 0, 1436, 9050, 1, 0, 0, 0, 1438, 9052, 1, 0, 0, 0, 1440, 9057, 1, 0, 0, 0, 1442, 9069,
        1, 0, 0, 0, 1444, 9075, 1, 0, 0, 0, 1446, 9077, 1, 0, 0, 0, 1448, 9079, 1, 0, 0, 0, 1450, 9084,
        1, 0, 0, 0, 1452, 1455, 3, 2, 1, 0, 1453, 1455, 3, 436, 218, 0, 1454, 1452, 1, 0, 0, 0, 1454,
        1453, 1, 0, 0, 0, 1455, 1457, 1, 0, 0, 0, 1456, 1458, 5, 774, 0, 0, 1457, 1456, 1, 0, 0, 0, 1457,
        1458, 1, 0, 0, 0, 1458, 1460, 1, 0, 0, 0, 1459, 1454, 1, 0, 0, 0, 1459, 1460, 1, 0, 0, 0, 1460,
        1461, 1, 0, 0, 0, 1461, 1462, 5, 0, 0, 1, 1462, 1, 1, 0, 0, 0, 1463, 1537, 3, 4, 2, 0, 1464, 1537,
        3, 80, 40, 0, 1465, 1537, 3, 188, 94, 0, 1466, 1537, 3, 220, 110, 0, 1467, 1537, 3, 224, 112,
        0, 1468, 1537, 3, 226, 113, 0, 1469, 1537, 3, 228, 114, 0, 1470, 1537, 3, 230, 115, 0, 1471,
        1537, 3, 236, 118, 0, 1472, 1537, 3, 238, 119, 0, 1473, 1537, 3, 242, 121, 0, 1474, 1537,
        3, 262, 131, 0, 1475, 1537, 3, 274, 137, 0, 1476, 1537, 3, 276, 138, 0, 1477, 1537, 3, 430,
        215, 0, 1478, 1537, 3, 432, 216, 0, 1479, 1537, 3, 454, 227, 0, 1480, 1537, 3, 582, 291, 0,
        1481, 1537, 3, 588, 294, 0, 1482, 1537, 3, 594, 297, 0, 1483, 1537, 3, 662, 331, 0, 1484,
        1537, 3, 670, 335, 0, 1485, 1537, 3, 672, 336, 0, 1486, 1537, 3, 696, 348, 0, 1487, 1537,
        3, 698, 349, 0, 1488, 1537, 3, 700, 350, 0, 1489, 1537, 3, 702, 351, 0, 1490, 1537, 3, 704,
        352, 0, 1491, 1537, 3, 706, 353, 0, 1492, 1537, 3, 708, 354, 0, 1493, 1537, 3, 710, 355, 0,
        1494, 1537, 3, 712, 356, 0, 1495, 1537, 3, 714, 357, 0, 1496, 1537, 3, 716, 358, 0, 1497,
        1537, 3, 718, 359, 0, 1498, 1537, 3, 720, 360, 0, 1499, 1537, 3, 722, 361, 0, 1500, 1537,
        3, 724, 362, 0, 1501, 1537, 3, 726, 363, 0, 1502, 1537, 3, 728, 364, 0, 1503, 1537, 3, 730,
        365, 0, 1504, 1537, 3, 732, 366, 0, 1505, 1537, 3, 734, 367, 0, 1506, 1537, 3, 736, 368, 0,
        1507, 1537, 3, 738, 369, 0, 1508, 1537, 3, 740, 370, 0, 1509, 1537, 3, 742, 371, 0, 1510,
        1537, 3, 744, 372, 0, 1511, 1537, 3, 746, 373, 0, 1512, 1537, 3, 748, 374, 0, 1513, 1537,
        3, 750, 375, 0, 1514, 1537, 3, 752, 376, 0, 1515, 1537, 3, 754, 377, 0, 1516, 1537, 3, 756,
        378, 0, 1517, 1537, 3, 758, 379, 0, 1518, 1537, 3, 760, 380, 0, 1519, 1537, 3, 762, 381, 0,
        1520, 1537, 3, 764, 382, 0, 1521, 1537, 3, 766, 383, 0, 1522, 1537, 3, 768, 384, 0, 1523,
        1537, 3, 770, 385, 0, 1524, 1537, 3, 772, 386, 0, 1525, 1537, 3, 774, 387, 0, 1526, 1537,
        3, 776, 388, 0, 1527, 1537, 3, 778, 389, 0, 1528, 1537, 3, 780, 390, 0, 1529, 1537, 3, 782,
        391, 0, 1530, 1537, 3, 828, 414, 0, 1531, 1537, 3, 796, 398, 0, 1532, 1537, 3, 848, 424, 0,
        1533, 1537, 3, 1034, 517, 0, 1534, 1537, 3, 1044, 522, 0, 1535, 1537, 3, 1046, 523, 0, 1536,
        1463, 1, 0, 0, 0, 1536, 1464, 1, 0, 0, 0, 1536, 1465, 1, 0, 0, 0, 1536, 1466, 1, 0, 0, 0, 1536,
        1467, 1, 0, 0, 0, 1536, 1468, 1, 0, 0, 0, 1536, 1469, 1, 0, 0, 0, 1536, 1470, 1, 0, 0, 0, 1536,
        1471, 1, 0, 0, 0, 1536, 1472, 1, 0, 0, 0, 1536, 1473, 1, 0, 0, 0, 1536, 1474, 1, 0, 0, 0, 1536,
        1475, 1, 0, 0, 0, 1536, 1476, 1, 0, 0, 0, 1536, 1477, 1, 0, 0, 0, 1536, 1478, 1, 0, 0, 0, 1536,
        1479, 1, 0, 0, 0, 1536, 1480, 1, 0, 0, 0, 1536, 1481, 1, 0, 0, 0, 1536, 1482, 1, 0, 0, 0, 1536,
        1483, 1, 0, 0, 0, 1536, 1484, 1, 0, 0, 0, 1536, 1485, 1, 0, 0, 0, 1536, 1486, 1, 0, 0, 0, 1536,
        1487, 1, 0, 0, 0, 1536, 1488, 1, 0, 0, 0, 1536, 1489, 1, 0, 0, 0, 1536, 1490, 1, 0, 0, 0, 1536,
        1491, 1, 0, 0, 0, 1536, 1492, 1, 0, 0, 0, 1536, 1493, 1, 0, 0, 0, 1536, 1494, 1, 0, 0, 0, 1536,
        1495, 1, 0, 0, 0, 1536, 1496, 1, 0, 0, 0, 1536, 1497, 1, 0, 0, 0, 1536, 1498, 1, 0, 0, 0, 1536,
        1499, 1, 0, 0, 0, 1536, 1500, 1, 0, 0, 0, 1536, 1501, 1, 0, 0, 0, 1536, 1502, 1, 0, 0, 0, 1536,
        1503, 1, 0, 0, 0, 1536, 1504, 1, 0, 0, 0, 1536, 1505, 1, 0, 0, 0, 1536, 1506, 1, 0, 0, 0, 1536,
        1507, 1, 0, 0, 0, 1536, 1508, 1, 0, 0, 0, 1536, 1509, 1, 0, 0, 0, 1536, 1510, 1, 0, 0, 0, 1536,
        1511, 1, 0, 0, 0, 1536, 1512, 1, 0, 0, 0, 1536, 1513, 1, 0, 0, 0, 1536, 1514, 1, 0, 0, 0, 1536,
        1515, 1, 0, 0, 0, 1536, 1516, 1, 0, 0, 0, 1536, 1517, 1, 0, 0, 0, 1536, 1518, 1, 0, 0, 0, 1536,
        1519, 1, 0, 0, 0, 1536, 1520, 1, 0, 0, 0, 1536, 1521, 1, 0, 0, 0, 1536, 1522, 1, 0, 0, 0, 1536,
        1523, 1, 0, 0, 0, 1536, 1524, 1, 0, 0, 0, 1536, 1525, 1, 0, 0, 0, 1536, 1526, 1, 0, 0, 0, 1536,
        1527, 1, 0, 0, 0, 1536, 1528, 1, 0, 0, 0, 1536, 1529, 1, 0, 0, 0, 1536, 1530, 1, 0, 0, 0, 1536,
        1531, 1, 0, 0, 0, 1536, 1532, 1, 0, 0, 0, 1536, 1533, 1, 0, 0, 0, 1536, 1534, 1, 0, 0, 0, 1536,
        1535, 1, 0, 0, 0, 1537, 3, 1, 0, 0, 0, 1538, 1559, 5, 11, 0, 0, 1539, 1560, 3, 20, 10, 0, 1540,
        1560, 3, 6, 3, 0, 1541, 1542, 5, 422, 0, 0, 1542, 1544, 3, 1286, 643, 0, 1543, 1545, 3, 110,
        55, 0, 1544, 1543, 1, 0, 0, 0, 1544, 1545, 1, 0, 0, 0, 1545, 1560, 1, 0, 0, 0, 1546, 1547, 5,
        206, 0, 0, 1547, 1549, 3, 1290, 645, 0, 1548, 1550, 3, 110, 55, 0, 1549, 1548, 1, 0, 0, 0, 1549,
        1550, 1, 0, 0, 0, 1550, 1560, 1, 0, 0, 0, 1551, 1560, 3, 70, 35, 0, 1552, 1560, 3, 10, 5, 0, 1553,
        1560, 3, 56, 28, 0, 1554, 1555, 4, 2, 0, 0, 1555, 1560, 3, 58, 29, 0, 1556, 1560, 3, 12, 6, 0,
        1557, 1560, 3, 18, 9, 0, 1558, 1560, 3, 78, 39, 0, 1559, 1539, 1, 0, 0, 0, 1559, 1540, 1, 0,
        0, 0, 1559, 1541, 1, 0, 0, 0, 1559, 1546, 1, 0, 0, 0, 1559, 1551, 1, 0, 0, 0, 1559, 1552, 1, 0,
        0, 0, 1559, 1553, 1, 0, 0, 0, 1559, 1554, 1, 0, 0, 0, 1559, 1556, 1, 0, 0, 0, 1559, 1557, 1, 0,
        0, 0, 1559, 1558, 1, 0, 0, 0, 1560, 5, 1, 0, 0, 0, 1561, 1562, 5, 109, 0, 0, 1562, 1564, 3, 1282,
        641, 0, 1563, 1565, 3, 8, 4, 0, 1564, 1563, 1, 0, 0, 0, 1565, 1566, 1, 0, 0, 0, 1566, 1564, 1,
        0, 0, 0, 1566, 1567, 1, 0, 0, 0, 1567, 7, 1, 0, 0, 0, 1568, 1576, 3, 84, 42, 0, 1569, 1570, 5,
        435, 0, 0, 1570, 1572, 5, 386, 0, 0, 1571, 1573, 5, 750, 0, 0, 1572, 1571, 1, 0, 0, 0, 1572,
        1573, 1, 0, 0, 0, 1573, 1574, 1, 0, 0, 0, 1574, 1576, 3, 1150, 575, 0, 1575, 1568, 1, 0, 0, 0,
        1575, 1569, 1, 0, 0, 0, 1576, 9, 1, 0, 0, 0, 1577, 1579, 3, 1180, 590, 0, 1578, 1577, 1, 0, 0,
        0, 1578, 1579, 1, 0, 0, 0, 1579, 1580, 1, 0, 0, 0, 1580, 1581, 5, 170, 0, 0, 1581, 1585, 3, 1310,
        655, 0, 1582, 1583, 5, 383, 0, 0, 1583, 1584, 5, 490, 0, 0, 1584, 1586, 3, 1056, 528, 0, 1585,
        1582, 1, 0, 0, 0, 1585, 1586, 1, 0, 0, 0, 1586, 1593, 1, 0, 0, 0, 1587, 1588, 5, 383, 0, 0, 1588,
        1590, 5, 79, 0, 0, 1589, 1591, 5, 371, 0, 0, 1590, 1589, 1, 0, 0, 0, 1590, 1591, 1, 0, 0, 0, 1591,
        1592, 1, 0, 0, 0, 1592, 1594, 5, 418, 0, 0, 1593, 1587, 1, 0, 0, 0, 1593, 1594, 1, 0, 0, 0, 1594,
        1598, 1, 0, 0, 0, 1595, 1596, 5, 453, 0, 0, 1596, 1597, 5, 590, 0, 0, 1597, 1599, 3, 1350, 675,
        0, 1598, 1595, 1, 0, 0, 0, 1598, 1599, 1, 0, 0, 0, 1599, 1606, 1, 0, 0, 0, 1600, 1607, 5, 156,
        0, 0, 1601, 1604, 5, 140, 0, 0, 1602, 1603, 5, 383, 0, 0, 1603, 1605, 3, 580, 290, 0, 1604,
        1602, 1, 0, 0, 0, 1604, 1605, 1, 0, 0, 0, 1605, 1607, 1, 0, 0, 0, 1606, 1600, 1, 0, 0, 0, 1606,
        1601, 1, 0, 0, 0, 1606, 1607, 1, 0, 0, 0, 1607, 1610, 1, 0, 0, 0, 1608, 1609, 5, 75, 0, 0, 1609,
        1611, 3, 1388, 694, 0, 1610, 1608, 1, 0, 0, 0, 1610, 1611, 1, 0, 0, 0, 1611, 1614, 1, 0, 0, 0,
        1612, 1613, 5, 147, 0, 0, 1613, 1615, 3, 978, 489, 0, 1614, 1612, 1, 0, 0, 0, 1614, 1615, 1,
        0, 0, 0, 1615, 11, 1, 0, 0, 0, 1616, 1617, 5, 288, 0, 0, 1617, 1618, 5, 217, 0, 0, 1618, 1619,
        3, 1306, 653, 0, 1619, 1620, 5, 4, 0, 0, 1620, 1621, 5, 603, 0, 0, 1621, 1623, 3, 1388, 694,
        0, 1622, 1624, 3, 14, 7, 0, 1623, 1622, 1, 0, 0, 0, 1623, 1624, 1, 0, 0, 0, 1624, 13, 1, 0, 0,
        0, 1625, 1632, 3, 16, 8, 0, 1626, 1628, 5, 773, 0, 0, 1627, 1626, 1, 0, 0, 0, 1627, 1628, 1,
        0, 0, 0, 1628, 1629, 1, 0, 0, 0, 1629, 1631, 3, 16, 8, 0, 1630, 1627, 1, 0, 0, 0, 1631, 1634,
        1, 0, 0, 0, 1632, 1630, 1, 0, 0, 0, 1632, 1633, 1, 0, 0, 0, 1633, 15, 1, 0, 0, 0, 1634, 1632, 1,
        0, 0, 0, 1635, 1639, 3, 144, 72, 0, 1636, 1639, 3, 156, 78, 0, 1637, 1639, 3, 158, 79, 0, 1638,
        1635, 1, 0, 0, 0, 1638, 1636, 1, 0, 0, 0, 1638, 1637, 1, 0, 0, 0, 1639, 17, 1, 0, 0, 0, 1640, 1641,
        5, 503, 0, 0, 1641, 1642, 3, 1316, 658, 0, 1642, 1643, 3, 128, 64, 0, 1643, 19, 1, 0, 0, 0, 1644,
        1646, 3, 1256, 628, 0, 1645, 1644, 1, 0, 0, 0, 1645, 1646, 1, 0, 0, 0, 1646, 1647, 1, 0, 0, 0,
        1647, 1648, 5, 574, 0, 0, 1648, 1650, 3, 1326, 663, 0, 1649, 1651, 3, 22, 11, 0, 1650, 1649,
        1, 0, 0, 0, 1650, 1651, 1, 0, 0, 0, 1651, 21, 1, 0, 0, 0, 1652, 1655, 3, 24, 12, 0, 1653, 1656,
        3, 1158, 579, 0, 1654, 1656, 3, 52, 26, 0, 1655, 1653, 1, 0, 0, 0, 1655, 1654, 1, 0, 0, 0, 1655,
        1656, 1, 0, 0, 0, 1656, 1666, 1, 0, 0, 0, 1657, 1666, 3, 1158, 579, 0, 1658, 1666, 3, 52, 26,
        0, 1659, 1660, 3, 26, 13, 0, 1660, 1661, 5, 773, 0, 0, 1661, 1663, 1, 0, 0, 0, 1662, 1659, 1,
        0, 0, 0, 1662, 1663, 1, 0, 0, 0, 1663, 1664, 1, 0, 0, 0, 1664, 1666, 3, 28, 14, 0, 1665, 1652,
        1, 0, 0, 0, 1665, 1657, 1, 0, 0, 0, 1665, 1658, 1, 0, 0, 0, 1665, 1662, 1, 0, 0, 0, 1666, 23, 1,
        0, 0, 0, 1667, 1675, 3, 26, 13, 0, 1668, 1669, 3, 26, 13, 0, 1669, 1670, 5, 773, 0, 0, 1670,
        1672, 1, 0, 0, 0, 1671, 1668, 1, 0, 0, 0, 1671, 1672, 1, 0, 0, 0, 1672, 1673, 1, 0, 0, 0, 1673,
        1675, 3, 32, 16, 0, 1674, 1667, 1, 0, 0, 0, 1674, 1671, 1, 0, 0, 0, 1675, 25, 1, 0, 0, 0, 1676,
        1681, 3, 34, 17, 0, 1677, 1678, 5, 773, 0, 0, 1678, 1680, 3, 34, 17, 0, 1679, 1677, 1, 0, 0,
        0, 1680, 1683, 1, 0, 0, 0, 1681, 1679, 1, 0, 0, 0, 1681, 1682, 1, 0, 0, 0, 1682, 27, 1, 0, 0, 0,
        1683, 1681, 1, 0, 0, 0, 1684, 1685, 5, 141, 0, 0, 1685, 1692, 5, 572, 0, 0, 1686, 1687, 5, 234,
        0, 0, 1687, 1692, 5, 572, 0, 0, 1688, 1692, 3, 30, 15, 0, 1689, 1690, 4, 14, 1, 0, 1690, 1692,
        7, 0, 0, 0, 1691, 1684, 1, 0, 0, 0, 1691, 1686, 1, 0, 0, 0, 1691, 1688, 1, 0, 0, 0, 1691, 1689,
        1, 0, 0, 0, 1692, 29, 1, 0, 0, 0, 1693, 1694, 5, 4, 0, 0, 1694, 1696, 5, 405, 0, 0, 1695, 1697,
        3, 1258, 629, 0, 1696, 1695, 1, 0, 0, 0, 1696, 1697, 1, 0, 0, 0, 1697, 1701, 1, 0, 0, 0, 1698,
        1702, 3, 1166, 583, 0, 1699, 1700, 5, 404, 0, 0, 1700, 1702, 3, 1364, 682, 0, 1701, 1698,
        1, 0, 0, 0, 1701, 1699, 1, 0, 0, 0, 1702, 1788, 1, 0, 0, 0, 1703, 1704, 5, 148, 0, 0, 1704, 1705,
        5, 405, 0, 0, 1705, 1788, 3, 1352, 676, 0, 1706, 1707, 5, 438, 0, 0, 1707, 1709, 5, 405, 0,
        0, 1708, 1710, 3, 1258, 629, 0, 1709, 1708, 1, 0, 0, 0, 1709, 1710, 1, 0, 0, 0, 1710, 1711,
        1, 0, 0, 0, 1711, 1788, 3, 54, 27, 0, 1712, 1713, 5, 388, 0, 0, 1713, 1715, 5, 405, 0, 0, 1714,
        1716, 3, 1258, 629, 0, 1715, 1714, 1, 0, 0, 0, 1715, 1716, 1, 0, 0, 0, 1716, 1717, 1, 0, 0, 0,
        1717, 1719, 3, 54, 27, 0, 1718, 1720, 3, 1258, 629, 0, 1719, 1718, 1, 0, 0, 0, 1719, 1720,
        1, 0, 0, 0, 1720, 1788, 1, 0, 0, 0, 1721, 1722, 5, 14, 0, 0, 1722, 1724, 5, 405, 0, 0, 1723, 1725,
        3, 1258, 629, 0, 1724, 1723, 1, 0, 0, 0, 1724, 1725, 1, 0, 0, 0, 1725, 1726, 1, 0, 0, 0, 1726,
        1788, 3, 54, 27, 0, 1727, 1728, 5, 62, 0, 0, 1728, 1729, 5, 405, 0, 0, 1729, 1733, 3, 54, 27,
        0, 1730, 1732, 3, 666, 333, 0, 1731, 1730, 1, 0, 0, 0, 1732, 1735, 1, 0, 0, 0, 1733, 1731, 1,
        0, 0, 0, 1733, 1734, 1, 0, 0, 0, 1734, 1788, 1, 0, 0, 0, 1735, 1733, 1, 0, 0, 0, 1736, 1737, 5,
        455, 0, 0, 1737, 1739, 5, 405, 0, 0, 1738, 1740, 3, 1258, 629, 0, 1739, 1738, 1, 0, 0, 0, 1739,
        1740, 1, 0, 0, 0, 1740, 1741, 1, 0, 0, 0, 1741, 1745, 3, 54, 27, 0, 1742, 1744, 3, 668, 334,
        0, 1743, 1742, 1, 0, 0, 0, 1744, 1747, 1, 0, 0, 0, 1745, 1743, 1, 0, 0, 0, 1745, 1746, 1, 0, 0,
        0, 1746, 1788, 1, 0, 0, 0, 1747, 1745, 1, 0, 0, 0, 1748, 1749, 5, 67, 0, 0, 1749, 1751, 5, 405,
        0, 0, 1750, 1752, 3, 1258, 629, 0, 1751, 1750, 1, 0, 0, 0, 1751, 1752, 1, 0, 0, 0, 1752, 1753,
        1, 0, 0, 0, 1753, 1788, 3, 1364, 682, 0, 1754, 1755, 5, 597, 0, 0, 1755, 1756, 5, 405, 0, 0,
        1756, 1788, 3, 54, 27, 0, 1757, 1758, 5, 454, 0, 0, 1758, 1760, 5, 405, 0, 0, 1759, 1761, 3,
        1258, 629, 0, 1760, 1759, 1, 0, 0, 0, 1760, 1761, 1, 0, 0, 0, 1761, 1766, 1, 0, 0, 0, 1762, 1763,
        3, 1352, 676, 0, 1763, 1764, 5, 248, 0, 0, 1764, 1765, 3, 1166, 583, 0, 1765, 1767, 1, 0, 0,
        0, 1766, 1762, 1, 0, 0, 0, 1766, 1767, 1, 0, 0, 0, 1767, 1788, 1, 0, 0, 0, 1768, 1769, 5, 172,
        0, 0, 1769, 1770, 5, 405, 0, 0, 1770, 1771, 3, 1350, 675, 0, 1771, 1772, 5, 645, 0, 0, 1772,
        1773, 5, 574, 0, 0, 1773, 1775, 3, 1326, 663, 0, 1774, 1776, 3, 50, 25, 0, 1775, 1774, 1, 0,
        0, 0, 1775, 1776, 1, 0, 0, 0, 1776, 1788, 1, 0, 0, 0, 1777, 1778, 5, 141, 0, 0, 1778, 1779, 5,
        405, 0, 0, 1779, 1780, 3, 54, 27, 0, 1780, 1781, 5, 572, 0, 0, 1781, 1788, 1, 0, 0, 0, 1782,
        1783, 5, 234, 0, 0, 1783, 1784, 5, 405, 0, 0, 1784, 1785, 3, 54, 27, 0, 1785, 1786, 5, 572,
        0, 0, 1786, 1788, 1, 0, 0, 0, 1787, 1693, 1, 0, 0, 0, 1787, 1703, 1, 0, 0, 0, 1787, 1706, 1, 0,
        0, 0, 1787, 1712, 1, 0, 0, 0, 1787, 1721, 1, 0, 0, 0, 1787, 1727, 1, 0, 0, 0, 1787, 1736, 1, 0,
        0, 0, 1787, 1748, 1, 0, 0, 0, 1787, 1754, 1, 0, 0, 0, 1787, 1757, 1, 0, 0, 0, 1787, 1768, 1, 0,
        0, 0, 1787, 1777, 1, 0, 0, 0, 1787, 1782, 1, 0, 0, 0, 1788, 31, 1, 0, 0, 0, 1789, 1792, 3, 36,
        18, 0, 1790, 1792, 3, 1146, 573, 0, 1791, 1789, 1, 0, 0, 0, 1791, 1790, 1, 0, 0, 0, 1792, 1801,
        1, 0, 0, 0, 1793, 1797, 5, 773, 0, 0, 1794, 1798, 3, 36, 18, 0, 1795, 1798, 3, 34, 17, 0, 1796,
        1798, 3, 1146, 573, 0, 1797, 1794, 1, 0, 0, 0, 1797, 1795, 1, 0, 0, 0, 1797, 1796, 1, 0, 0, 0,
        1798, 1800, 1, 0, 0, 0, 1799, 1793, 1, 0, 0, 0, 1800, 1803, 1, 0, 0, 0, 1801, 1799, 1, 0, 0, 0,
        1801, 1802, 1, 0, 0, 0, 1802, 33, 1, 0, 0, 0, 1803, 1801, 1, 0, 0, 0, 1804, 1808, 3, 44, 22, 0,
        1805, 1808, 3, 46, 23, 0, 1806, 1808, 3, 50, 25, 0, 1807, 1804, 1, 0, 0, 0, 1807, 1805, 1, 0,
        0, 0, 1807, 1806, 1, 0, 0, 0, 1808, 35, 1, 0, 0, 0, 1809, 1811, 5, 4, 0, 0, 1810, 1812, 5, 72,
        0, 0, 1811, 1810, 1, 0, 0, 0, 1811, 1812, 1, 0, 0, 0, 1812, 1825, 1, 0, 0, 0, 1813, 1814, 3, 1350,
        675, 0, 1814, 1816, 3, 1070, 535, 0, 1815, 1817, 3, 1060, 530, 0, 1816, 1815, 1, 0, 0, 0, 1816,
        1817, 1, 0, 0, 0, 1817, 1819, 1, 0, 0, 0, 1818, 1820, 3, 38, 19, 0, 1819, 1818, 1, 0, 0, 0, 1819,
        1820, 1, 0, 0, 0, 1820, 1826, 1, 0, 0, 0, 1821, 1822, 5, 776, 0, 0, 1822, 1823, 3, 88, 44, 0,
        1823, 1824, 5, 777, 0, 0, 1824, 1826, 1, 0, 0, 0, 1825, 1813, 1, 0, 0, 0, 1825, 1821, 1, 0, 0,
        0, 1826, 1945, 1, 0, 0, 0, 1827, 1828, 5, 4, 0, 0, 1828, 1945, 3, 1066, 533, 0, 1829, 1831,
        5, 55, 0, 0, 1830, 1832, 5, 72, 0, 0, 1831, 1830, 1, 0, 0, 0, 1831, 1832, 1, 0, 0, 0, 1832, 1833,
        1, 0, 0, 0, 1833, 1834, 3, 1266, 633, 0, 1834, 1835, 3, 1350, 675, 0, 1835, 1837, 3, 1070,
        535, 0, 1836, 1838, 3, 38, 19, 0, 1837, 1836, 1, 0, 0, 0, 1837, 1838, 1, 0, 0, 0, 1838, 1945,
        1, 0, 0, 0, 1839, 1841, 5, 348, 0, 0, 1840, 1842, 5, 72, 0, 0, 1841, 1840, 1, 0, 0, 0, 1841, 1842,
        1, 0, 0, 0, 1842, 1843, 1, 0, 0, 0, 1843, 1844, 3, 1266, 633, 0, 1844, 1846, 3, 1070, 535, 0,
        1845, 1847, 3, 38, 19, 0, 1846, 1845, 1, 0, 0, 0, 1846, 1847, 1, 0, 0, 0, 1847, 1945, 1, 0, 0,
        0, 1848, 1870, 5, 148, 0, 0, 1849, 1851, 5, 72, 0, 0, 1850, 1849, 1, 0, 0, 0, 1850, 1851, 1,
        0, 0, 0, 1851, 1852, 1, 0, 0, 0, 1852, 1854, 3, 1266, 633, 0, 1853, 1855, 3, 40, 20, 0, 1854,
        1853, 1, 0, 0, 0, 1854, 1855, 1, 0, 0, 0, 1855, 1871, 1, 0, 0, 0, 1856, 1857, 5, 199, 0, 0, 1857,
        1858, 5, 265, 0, 0, 1858, 1871, 3, 1266, 633, 0, 1859, 1860, 5, 420, 0, 0, 1860, 1871, 5, 265,
        0, 0, 1861, 1862, 3, 420, 210, 0, 1862, 1863, 3, 1276, 638, 0, 1863, 1871, 1, 0, 0, 0, 1864,
        1865, 4, 18, 2, 0, 1865, 1866, 5, 62, 0, 0, 1866, 1871, 3, 1350, 675, 0, 1867, 1868, 4, 18,
        3, 0, 1868, 1869, 5, 86, 0, 0, 1869, 1871, 3, 1350, 675, 0, 1870, 1850, 1, 0, 0, 0, 1870, 1856,
        1, 0, 0, 0, 1870, 1859, 1, 0, 0, 0, 1870, 1861, 1, 0, 0, 0, 1870, 1864, 1, 0, 0, 0, 1870, 1867,
        1, 0, 0, 0, 1871, 1945, 1, 0, 0, 0, 1872, 1873, 5, 140, 0, 0, 1873, 1945, 5, 263, 0, 0, 1874,
        1875, 5, 156, 0, 0, 1875, 1945, 5, 263, 0, 0, 1876, 1878, 5, 11, 0, 0, 1877, 1879, 5, 72, 0,
        0, 1878, 1877, 1, 0, 0, 0, 1878, 1879, 1, 0, 0, 0, 1879, 1880, 1, 0, 0, 0, 1880, 1893, 3, 1266,
        633, 0, 1881, 1882, 5, 506, 0, 0, 1882, 1886, 5, 128, 0, 0, 1883, 1884, 4, 18, 4, 0, 1884, 1887,
        3, 964, 482, 0, 1885, 1887, 3, 1372, 686, 0, 1886, 1883, 1, 0, 0, 0, 1886, 1885, 1, 0, 0, 0,
        1887, 1894, 1, 0, 0, 0, 1888, 1889, 5, 148, 0, 0, 1889, 1894, 5, 128, 0, 0, 1890, 1891, 4, 18,
        5, 0, 1891, 1892, 5, 506, 0, 0, 1892, 1894, 3, 1104, 552, 0, 1893, 1881, 1, 0, 0, 0, 1893, 1888,
        1, 0, 0, 0, 1893, 1890, 1, 0, 0, 0, 1894, 1945, 1, 0, 0, 0, 1895, 1896, 5, 11, 0, 0, 1896, 1897,
        5, 236, 0, 0, 1897, 1898, 3, 1276, 638, 0, 1898, 1899, 3, 1104, 552, 0, 1899, 1945, 1, 0, 0,
        0, 1900, 1901, 4, 18, 6, 0, 1901, 1902, 5, 11, 0, 0, 1902, 1903, 5, 62, 0, 0, 1903, 1904, 3,
        1350, 675, 0, 1904, 1905, 3, 1064, 532, 0, 1905, 1945, 1, 0, 0, 0, 1906, 1907, 4, 18, 7, 0,
        1907, 1908, 5, 11, 0, 0, 1908, 1909, 5, 86, 0, 0, 1909, 1910, 3, 1350, 675, 0, 1910, 1911,
        3, 1064, 532, 0, 1911, 1945, 1, 0, 0, 0, 1912, 1913, 5, 453, 0, 0, 1913, 1914, 5, 72, 0, 0, 1914,
        1915, 3, 1266, 633, 0, 1915, 1916, 5, 590, 0, 0, 1916, 1917, 3, 1350, 675, 0, 1917, 1945,
        1, 0, 0, 0, 1918, 1920, 5, 453, 0, 0, 1919, 1921, 7, 1, 0, 0, 1920, 1919, 1, 0, 0, 0, 1920, 1921,
        1, 0, 0, 0, 1921, 1922, 1, 0, 0, 0, 1922, 1945, 3, 1320, 660, 0, 1923, 1924, 5, 453, 0, 0, 1924,
        1925, 3, 420, 210, 0, 1925, 1926, 3, 1276, 638, 0, 1926, 1927, 5, 590, 0, 0, 1927, 1928, 3,
        1274, 637, 0, 1928, 1945, 1, 0, 0, 0, 1929, 1930, 5, 94, 0, 0, 1930, 1931, 5, 590, 0, 0, 1931,
        1935, 3, 952, 476, 0, 1932, 1933, 4, 18, 8, 0, 1933, 1936, 5, 128, 0, 0, 1934, 1936, 3, 1136,
        568, 0, 1935, 1932, 1, 0, 0, 0, 1935, 1934, 1, 0, 0, 0, 1936, 1938, 1, 0, 0, 0, 1937, 1939, 3,
        1192, 596, 0, 1938, 1937, 1, 0, 0, 0, 1938, 1939, 1, 0, 0, 0, 1939, 1945, 1, 0, 0, 0, 1940, 1945,
        5, 198, 0, 0, 1941, 1942, 5, 393, 0, 0, 1942, 1943, 5, 45, 0, 0, 1943, 1945, 3, 42, 21, 0, 1944,
        1809, 1, 0, 0, 0, 1944, 1827, 1, 0, 0, 0, 1944, 1829, 1, 0, 0, 0, 1944, 1839, 1, 0, 0, 0, 1944,
        1848, 1, 0, 0, 0, 1944, 1872, 1, 0, 0, 0, 1944, 1874, 1, 0, 0, 0, 1944, 1876, 1, 0, 0, 0, 1944,
        1895, 1, 0, 0, 0, 1944, 1900, 1, 0, 0, 0, 1944, 1906, 1, 0, 0, 0, 1944, 1912, 1, 0, 0, 0, 1944,
        1918, 1, 0, 0, 0, 1944, 1923, 1, 0, 0, 0, 1944, 1929, 1, 0, 0, 0, 1944, 1940, 1, 0, 0, 0, 1944,
        1941, 1, 0, 0, 0, 1945, 37, 1, 0, 0, 0, 1946, 1947, 5, 6, 0, 0, 1947, 1950, 3, 1350, 675, 0, 1948,
        1950, 5, 191, 0, 0, 1949, 1946, 1, 0, 0, 0, 1949, 1948, 1, 0, 0, 0, 1950, 39, 1, 0, 0, 0, 1951,
        1952, 7, 2, 0, 0, 1952, 41, 1, 0, 0, 0, 1953, 1955, 3, 1350, 675, 0, 1954, 1956, 3, 342, 171,
        0, 1955, 1954, 1, 0, 0, 0, 1955, 1956, 1, 0, 0, 0, 1956, 1964, 1, 0, 0, 0, 1957, 1958, 5, 773,
        0, 0, 1958, 1960, 3, 1350, 675, 0, 1959, 1961, 3, 342, 171, 0, 1960, 1959, 1, 0, 0, 0, 1960,
        1961, 1, 0, 0, 0, 1961, 1963, 1, 0, 0, 0, 1962, 1957, 1, 0, 0, 0, 1963, 1966, 1, 0, 0, 0, 1964,
        1962, 1, 0, 0, 0, 1964, 1965, 1, 0, 0, 0, 1965, 43, 1, 0, 0, 0, 1966, 1964, 1, 0, 0, 0, 1967, 1969,
        5, 9, 0, 0, 1968, 1970, 5, 750, 0, 0, 1969, 1968, 1, 0, 0, 0, 1969, 1970, 1, 0, 0, 0, 1970, 1973,
        1, 0, 0, 0, 1971, 1974, 5, 128, 0, 0, 1972, 1974, 3, 1350, 675, 0, 1973, 1971, 1, 0, 0, 0, 1973,
        1972, 1, 0, 0, 0, 1974, 45, 1, 0, 0, 0, 1975, 1977, 5, 287, 0, 0, 1976, 1978, 5, 750, 0, 0, 1977,
        1976, 1, 0, 0, 0, 1977, 1978, 1, 0, 0, 0, 1978, 1981, 1, 0, 0, 0, 1979, 1982, 5, 128, 0, 0, 1980,
        1982, 3, 1350, 675, 0, 1981, 1979, 1, 0, 0, 0, 1981, 1980, 1, 0, 0, 0, 1982, 47, 1, 0, 0, 0, 1983,
        1985, 3, 44, 22, 0, 1984, 1986, 3, 46, 23, 0, 1985, 1984, 1, 0, 0, 0, 1985, 1986, 1, 0, 0, 0,
        1986, 1992, 1, 0, 0, 0, 1987, 1989, 3, 46, 23, 0, 1988, 1990, 3, 44, 22, 0, 1989, 1988, 1, 0,
        0, 0, 1989, 1990, 1, 0, 0, 0, 1990, 1992, 1, 0, 0, 0, 1991, 1983, 1, 0, 0, 0, 1991, 1987, 1, 0,
        0, 0, 1992, 49, 1, 0, 0, 0, 1993, 1994, 7, 3, 0, 0, 1994, 1995, 5, 625, 0, 0, 1995, 51, 1, 0, 0,
        0, 1996, 1997, 5, 452, 0, 0, 1997, 1998, 5, 403, 0, 0, 1998, 53, 1, 0, 0, 0, 1999, 2002, 5, 10,
        0, 0, 2000, 2002, 3, 1352, 676, 0, 2001, 1999, 1, 0, 0, 0, 2001, 2000, 1, 0, 0, 0, 2002, 55,
        1, 0, 0, 0, 2003, 2004, 5, 572, 0, 0, 2004, 2016, 3, 1302, 651, 0, 2005, 2006, 7, 4, 0, 0, 2006,
        2007, 5, 111, 0, 0, 2007, 2009, 3, 1388, 694, 0, 2008, 2010, 3, 64, 32, 0, 2009, 2008, 1, 0,
        0, 0, 2009, 2010, 1, 0, 0, 0, 2010, 2017, 1, 0, 0, 0, 2011, 2012, 5, 453, 0, 0, 2012, 2013, 5,
        590, 0, 0, 2013, 2017, 3, 1350, 675, 0, 2014, 2015, 4, 28, 9, 0, 2015, 2017, 3, 64, 32, 0, 2016,
        2005, 1, 0, 0, 0, 2016, 2011, 1, 0, 0, 0, 2016, 2014, 1, 0, 0, 0, 2017, 57, 1, 0, 0, 0, 2018, 2019,
        5, 605, 0, 0, 2019, 2020, 5, 572, 0, 0, 2020, 2021, 3, 1302, 651, 0, 2021, 2022, 5, 506, 0,
        0, 2022, 2024, 7, 5, 0, 0, 2023, 2025, 3, 60, 30, 0, 2024, 2023, 1, 0, 0, 0, 2024, 2025, 1, 0,
        0, 0, 2025, 59, 1, 0, 0, 0, 2026, 2033, 3, 62, 31, 0, 2027, 2029, 5, 773, 0, 0, 2028, 2027, 1,
        0, 0, 0, 2028, 2029, 1, 0, 0, 0, 2029, 2030, 1, 0, 0, 0, 2030, 2032, 3, 62, 31, 0, 2031, 2028,
        1, 0, 0, 0, 2032, 2035, 1, 0, 0, 0, 2033, 2031, 1, 0, 0, 0, 2033, 2034, 1, 0, 0, 0, 2034, 61, 1,
        0, 0, 0, 2035, 2033, 1, 0, 0, 0, 2036, 2037, 3, 156, 78, 0, 2037, 63, 1, 0, 0, 0, 2038, 2045,
        3, 66, 33, 0, 2039, 2041, 5, 773, 0, 0, 2040, 2039, 1, 0, 0, 0, 2040, 2041, 1, 0, 0, 0, 2041,
        2042, 1, 0, 0, 0, 2042, 2044, 3, 66, 33, 0, 2043, 2040, 1, 0, 0, 0, 2044, 2047, 1, 0, 0, 0, 2045,
        2043, 1, 0, 0, 0, 2045, 2046, 1, 0, 0, 0, 2046, 65, 1, 0, 0, 0, 2047, 2045, 1, 0, 0, 0, 2048, 2050,
        5, 238, 0, 0, 2049, 2051, 5, 750, 0, 0, 2050, 2049, 1, 0, 0, 0, 2050, 2051, 1, 0, 0, 0, 2051,
        2052, 1, 0, 0, 0, 2052, 2061, 3, 1416, 708, 0, 2053, 2061, 3, 148, 74, 0, 2054, 2061, 3, 150,
        75, 0, 2055, 2061, 3, 156, 78, 0, 2056, 2061, 3, 158, 79, 0, 2057, 2061, 3, 164, 82, 0, 2058,
        2059, 4, 33, 10, 0, 2059, 2061, 3, 166, 83, 0, 2060, 2048, 1, 0, 0, 0, 2060, 2053, 1, 0, 0, 0,
        2060, 2054, 1, 0, 0, 0, 2060, 2055, 1, 0, 0, 0, 2060, 2056, 1, 0, 0, 0, 2060, 2057, 1, 0, 0, 0,
        2060, 2058, 1, 0, 0, 0, 2061, 67, 1, 0, 0, 0, 2062, 2064, 5, 238, 0, 0, 2063, 2065, 5, 750, 0,
        0, 2064, 2063, 1, 0, 0, 0, 2064, 2065, 1, 0, 0, 0, 2065, 2066, 1, 0, 0, 0, 2066, 2070, 3, 1416,
        708, 0, 2067, 2070, 3, 148, 74, 0, 2068, 2070, 3, 150, 75, 0, 2069, 2062, 1, 0, 0, 0, 2069,
        2067, 1, 0, 0, 0, 2069, 2068, 1, 0, 0, 0, 2070, 69, 1, 0, 0, 0, 2071, 2073, 3, 172, 86, 0, 2072,
        2071, 1, 0, 0, 0, 2072, 2073, 1, 0, 0, 0, 2073, 2075, 1, 0, 0, 0, 2074, 2076, 3, 1180, 590, 0,
        2075, 2074, 1, 0, 0, 0, 2075, 2076, 1, 0, 0, 0, 2076, 2078, 1, 0, 0, 0, 2077, 2079, 3, 174, 87,
        0, 2078, 2077, 1, 0, 0, 0, 2078, 2079, 1, 0, 0, 0, 2079, 2080, 1, 0, 0, 0, 2080, 2081, 5, 636,
        0, 0, 2081, 2082, 3, 1298, 649, 0, 2082, 2083, 3, 72, 36, 0, 2083, 71, 1, 0, 0, 0, 2084, 2086,
        3, 1268, 634, 0, 2085, 2084, 1, 0, 0, 0, 2085, 2086, 1, 0, 0, 0, 2086, 2087, 1, 0, 0, 0, 2087,
        2088, 5, 17, 0, 0, 2088, 2089, 3, 74, 37, 0, 2089, 73, 1, 0, 0, 0, 2090, 2092, 3, 98, 49, 0, 2091,
        2093, 3, 76, 38, 0, 2092, 2091, 1, 0, 0, 0, 2092, 2093, 1, 0, 0, 0, 2093, 75, 1, 0, 0, 0, 2094,
        2096, 5, 645, 0, 0, 2095, 2097, 7, 6, 0, 0, 2096, 2095, 1, 0, 0, 0, 2096, 2097, 1, 0, 0, 0, 2097,
        2098, 1, 0, 0, 0, 2098, 2099, 5, 62, 0, 0, 2099, 2100, 5, 391, 0, 0, 2100, 77, 1, 0, 0, 0, 2101,
        2102, 5, 244, 0, 0, 2102, 2103, 5, 482, 0, 0, 2103, 2104, 3, 1410, 705, 0, 2104, 2105, 5, 316,
        0, 0, 2105, 2106, 5, 265, 0, 0, 2106, 2134, 1, 0, 0, 0, 2107, 2131, 4, 39, 11, 0, 2108, 2109,
        5, 451, 0, 0, 2109, 2123, 5, 796, 0, 0, 2110, 2111, 5, 373, 0, 0, 2111, 2112, 5, 480, 0, 0, 2112,
        2113, 5, 383, 0, 0, 2113, 2124, 5, 165, 0, 0, 2114, 2115, 5, 200, 0, 0, 2115, 2116, 5, 57, 0,
        0, 2116, 2121, 3, 1350, 675, 0, 2117, 2118, 5, 373, 0, 0, 2118, 2119, 5, 480, 0, 0, 2119, 2120,
        5, 383, 0, 0, 2120, 2122, 5, 165, 0, 0, 2121, 2117, 1, 0, 0, 0, 2121, 2122, 1, 0, 0, 0, 2122,
        2124, 1, 0, 0, 0, 2123, 2110, 1, 0, 0, 0, 2123, 2114, 1, 0, 0, 0, 2124, 2132, 1, 0, 0, 0, 2125,
        2126, 7, 7, 0, 0, 2126, 2127, 3, 1350, 675, 0, 2127, 2128, 3, 1350, 675, 0, 2128, 2132, 1,
        0, 0, 0, 2129, 2130, 5, 451, 0, 0, 2130, 2132, 5, 834, 0, 0, 2131, 2108, 1, 0, 0, 0, 2131, 2125,
        1, 0, 0, 0, 2131, 2129, 1, 0, 0, 0, 2132, 2134, 1, 0, 0, 0, 2133, 2101, 1, 0, 0, 0, 2133, 2107,
        1, 0, 0, 0, 2134, 79, 1, 0, 0, 0, 2135, 2153, 5, 97, 0, 0, 2136, 2154, 3, 82, 41, 0, 2137, 2154,
        3, 86, 43, 0, 2138, 2154, 3, 104, 52, 0, 2139, 2154, 3, 102, 51, 0, 2140, 2154, 3, 106, 53,
        0, 2141, 2154, 3, 120, 60, 0, 2142, 2154, 3, 168, 84, 0, 2143, 2154, 3, 176, 88, 0, 2144, 2154,
        3, 114, 57, 0, 2145, 2154, 3, 126, 63, 0, 2146, 2154, 3, 132, 66, 0, 2147, 2154, 3, 180, 90,
        0, 2148, 2154, 3, 182, 91, 0, 2149, 2150, 4, 40, 12, 0, 2150, 2154, 3, 184, 92, 0, 2151, 2152,
        4, 40, 13, 0, 2152, 2154, 3, 134, 67, 0, 2153, 2136, 1, 0, 0, 0, 2153, 2137, 1, 0, 0, 0, 2153,
        2138, 1, 0, 0, 0, 2153, 2139, 1, 0, 0, 0, 2153, 2140, 1, 0, 0, 0, 2153, 2141, 1, 0, 0, 0, 2153,
        2142, 1, 0, 0, 0, 2153, 2143, 1, 0, 0, 0, 2153, 2144, 1, 0, 0, 0, 2153, 2145, 1, 0, 0, 0, 2153,
        2146, 1, 0, 0, 0, 2153, 2147, 1, 0, 0, 0, 2153, 2148, 1, 0, 0, 0, 2153, 2149, 1, 0, 0, 0, 2153,
        2151, 1, 0, 0, 0, 2154, 81, 1, 0, 0, 0, 2155, 2157, 5, 109, 0, 0, 2156, 2158, 3, 1184, 592, 0,
        2157, 2156, 1, 0, 0, 0, 2157, 2158, 1, 0, 0, 0, 2158, 2159, 1, 0, 0, 0, 2159, 2163, 3, 1280,
        640, 0, 2160, 2162, 3, 84, 42, 0, 2161, 2160, 1, 0, 0, 0, 2162, 2165, 1, 0, 0, 0, 2163, 2161,
        1, 0, 0, 0, 2163, 2164, 1, 0, 0, 0, 2164, 83, 1, 0, 0, 0, 2165, 2163, 1, 0, 0, 0, 2166, 2171, 3,
        1156, 578, 0, 2167, 2171, 3, 1152, 576, 0, 2168, 2169, 4, 42, 14, 0, 2169, 2171, 3, 1154,
        577, 0, 2170, 2166, 1, 0, 0, 0, 2170, 2167, 1, 0, 0, 0, 2170, 2168, 1, 0, 0, 0, 2171, 85, 1, 0,
        0, 0, 2172, 2174, 5, 577, 0, 0, 2173, 2172, 1, 0, 0, 0, 2173, 2174, 1, 0, 0, 0, 2174, 2175, 1,
        0, 0, 0, 2175, 2177, 5, 574, 0, 0, 2176, 2178, 3, 1184, 592, 0, 2177, 2176, 1, 0, 0, 0, 2177,
        2178, 1, 0, 0, 0, 2178, 2179, 1, 0, 0, 0, 2179, 2196, 3, 1320, 660, 0, 2180, 2181, 5, 776, 0,
        0, 2181, 2182, 3, 88, 44, 0, 2182, 2183, 5, 777, 0, 0, 2183, 2185, 1, 0, 0, 0, 2184, 2180, 1,
        0, 0, 0, 2184, 2185, 1, 0, 0, 0, 2185, 2187, 1, 0, 0, 0, 2186, 2188, 3, 1142, 571, 0, 2187, 2186,
        1, 0, 0, 0, 2187, 2188, 1, 0, 0, 0, 2188, 2197, 1, 0, 0, 0, 2189, 2190, 5, 275, 0, 0, 2190, 2197,
        3, 1326, 663, 0, 2191, 2192, 5, 776, 0, 0, 2192, 2193, 5, 275, 0, 0, 2193, 2194, 3, 1326, 663,
        0, 2194, 2195, 5, 777, 0, 0, 2195, 2197, 1, 0, 0, 0, 2196, 2184, 1, 0, 0, 0, 2196, 2189, 1, 0,
        0, 0, 2196, 2191, 1, 0, 0, 0, 2197, 87, 1, 0, 0, 0, 2198, 2203, 3, 90, 45, 0, 2199, 2200, 5, 773,
        0, 0, 2200, 2202, 3, 90, 45, 0, 2201, 2199, 1, 0, 0, 0, 2202, 2205, 1, 0, 0, 0, 2203, 2201, 1,
        0, 0, 0, 2203, 2204, 1, 0, 0, 0, 2204, 89, 1, 0, 0, 0, 2205, 2203, 1, 0, 0, 0, 2206, 2209, 3, 1058,
        529, 0, 2207, 2209, 3, 1066, 533, 0, 2208, 2206, 1, 0, 0, 0, 2208, 2207, 1, 0, 0, 0, 2209, 91,
        1, 0, 0, 0, 2210, 2212, 7, 8, 0, 0, 2211, 2210, 1, 0, 0, 0, 2211, 2212, 1, 0, 0, 0, 2212, 2213,
        1, 0, 0, 0, 2213, 2214, 3, 94, 47, 0, 2214, 93, 1, 0, 0, 0, 2215, 2217, 5, 17, 0, 0, 2216, 2215,
        1, 0, 0, 0, 2216, 2217, 1, 0, 0, 0, 2217, 2218, 1, 0, 0, 0, 2218, 2219, 3, 98, 49, 0, 2219, 95,
        1, 0, 0, 0, 2220, 2223, 3, 280, 140, 0, 2221, 2222, 4, 48, 15, 0, 2222, 2224, 3, 356, 178, 0,
        2223, 2221, 1, 0, 0, 0, 2223, 2224, 1, 0, 0, 0, 2224, 2227, 1, 0, 0, 0, 2225, 2227, 3, 286, 143,
        0, 2226, 2220, 1, 0, 0, 0, 2226, 2225, 1, 0, 0, 0, 2227, 97, 1, 0, 0, 0, 2228, 2230, 3, 280, 140,
        0, 2229, 2231, 3, 356, 178, 0, 2230, 2229, 1, 0, 0, 0, 2230, 2231, 1, 0, 0, 0, 2231, 99, 1, 0,
        0, 0, 2232, 2236, 5, 97, 0, 0, 2233, 2237, 3, 102, 51, 0, 2234, 2237, 3, 104, 52, 0, 2235, 2237,
        3, 106, 53, 0, 2236, 2233, 1, 0, 0, 0, 2236, 2234, 1, 0, 0, 0, 2236, 2235, 1, 0, 0, 0, 2237, 2239,
        1, 0, 0, 0, 2238, 2240, 5, 774, 0, 0, 2239, 2238, 1, 0, 0, 0, 2239, 2240, 1, 0, 0, 0, 2240, 2241,
        1, 0, 0, 0, 2241, 2242, 5, 0, 0, 1, 2242, 101, 1, 0, 0, 0, 2243, 2245, 3, 1180, 590, 0, 2244,
        2243, 1, 0, 0, 0, 2244, 2245, 1, 0, 0, 0, 2245, 2246, 1, 0, 0, 0, 2246, 2248, 5, 422, 0, 0, 2247,
        2249, 3, 1184, 592, 0, 2248, 2247, 1, 0, 0, 0, 2248, 2249, 1, 0, 0, 0, 2249, 2250, 1, 0, 0, 0,
        2250, 2251, 3, 1284, 642, 0, 2251, 2260, 5, 776, 0, 0, 2252, 2257, 3, 1188, 594, 0, 2253,
        2254, 5, 773, 0, 0, 2254, 2256, 3, 1188, 594, 0, 2255, 2253, 1, 0, 0, 0, 2256, 2259, 1, 0, 0,
        0, 2257, 2255, 1, 0, 0, 0, 2257, 2258, 1, 0, 0, 0, 2258, 2261, 1, 0, 0, 0, 2259, 2257, 1, 0, 0,
        0, 2260, 2252, 1, 0, 0, 0, 2260, 2261, 1, 0, 0, 0, 2261, 2262, 1, 0, 0, 0, 2262, 2266, 5, 777,
        0, 0, 2263, 2265, 3, 108, 54, 0, 2264, 2263, 1, 0, 0, 0, 2265, 2268, 1, 0, 0, 0, 2266, 2264,
        1, 0, 0, 0, 2266, 2267, 1, 0, 0, 0, 2267, 2269, 1, 0, 0, 0, 2268, 2266, 1, 0, 0, 0, 2269, 2270,
        3, 978, 489, 0, 2270, 103, 1, 0, 0, 0, 2271, 2273, 3, 1180, 590, 0, 2272, 2271, 1, 0, 0, 0, 2272,
        2273, 1, 0, 0, 0, 2273, 2274, 1, 0, 0, 0, 2274, 2276, 5, 206, 0, 0, 2275, 2277, 3, 1184, 592,
        0, 2276, 2275, 1, 0, 0, 0, 2276, 2277, 1, 0, 0, 0, 2277, 2278, 1, 0, 0, 0, 2278, 2279, 3, 1288,
        644, 0, 2279, 2288, 5, 776, 0, 0, 2280, 2285, 3, 1190, 595, 0, 2281, 2282, 5, 773, 0, 0, 2282,
        2284, 3, 1190, 595, 0, 2283, 2281, 1, 0, 0, 0, 2284, 2287, 1, 0, 0, 0, 2285, 2283, 1, 0, 0, 0,
        2285, 2286, 1, 0, 0, 0, 2286, 2289, 1, 0, 0, 0, 2287, 2285, 1, 0, 0, 0, 2288, 2280, 1, 0, 0, 0,
        2288, 2289, 1, 0, 0, 0, 2289, 2290, 1, 0, 0, 0, 2290, 2291, 5, 777, 0, 0, 2291, 2292, 5, 474,
        0, 0, 2292, 2296, 3, 1194, 597, 0, 2293, 2295, 3, 108, 54, 0, 2294, 2293, 1, 0, 0, 0, 2295,
        2298, 1, 0, 0, 0, 2296, 2294, 1, 0, 0, 0, 2296, 2297, 1, 0, 0, 0, 2297, 2299, 1, 0, 0, 0, 2298,
        2296, 1, 0, 0, 0, 2299, 2300, 3, 978, 489, 0, 2300, 105, 1, 0, 0, 0, 2301, 2303, 5, 8, 0, 0, 2302,
        2301, 1, 0, 0, 0, 2302, 2303, 1, 0, 0, 0, 2303, 2304, 1, 0, 0, 0, 2304, 2306, 5, 206, 0, 0, 2305,
        2307, 3, 1184, 592, 0, 2306, 2305, 1, 0, 0, 0, 2306, 2307, 1, 0, 0, 0, 2307, 2308, 1, 0, 0, 0,
        2308, 2309, 3, 1312, 656, 0, 2309, 2310, 5, 474, 0, 0, 2310, 2311, 7, 9, 0, 0, 2311, 2312,
        5, 520, 0, 0, 2312, 2313, 3, 1388, 694, 0, 2313, 107, 1, 0, 0, 0, 2314, 2320, 3, 112, 56, 0,
        2315, 2317, 5, 371, 0, 0, 2316, 2315, 1, 0, 0, 0, 2316, 2317, 1, 0, 0, 0, 2317, 2318, 1, 0, 0,
        0, 2318, 2320, 5, 137, 0, 0, 2319, 2314, 1, 0, 0, 0, 2319, 2316, 1, 0, 0, 0, 2320, 109, 1, 0,
        0, 0, 2321, 2323, 3, 108, 54, 0, 2322, 2321, 1, 0, 0, 0, 2323, 2324, 1, 0, 0, 0, 2324, 2322,
        1, 0, 0, 0, 2324, 2325, 1, 0, 0, 0, 2325, 111, 1, 0, 0, 0, 2326, 2327, 5, 75, 0, 0, 2327, 2344,
        3, 1388, 694, 0, 2328, 2329, 5, 267, 0, 0, 2329, 2344, 5, 537, 0, 0, 2330, 2331, 5, 373, 0,
        0, 2331, 2344, 5, 537, 0, 0, 2332, 2333, 5, 90, 0, 0, 2333, 2344, 5, 537, 0, 0, 2334, 2335,
        5, 433, 0, 0, 2335, 2336, 5, 537, 0, 0, 2336, 2344, 5, 112, 0, 0, 2337, 2338, 5, 347, 0, 0, 2338,
        2339, 5, 537, 0, 0, 2339, 2344, 5, 112, 0, 0, 2340, 2341, 5, 537, 0, 0, 2341, 2342, 5, 496,
        0, 0, 2342, 2344, 7, 10, 0, 0, 2343, 2326, 1, 0, 0, 0, 2343, 2328, 1, 0, 0, 0, 2343, 2330, 1,
        0, 0, 0, 2343, 2332, 1, 0, 0, 0, 2343, 2334, 1, 0, 0, 0, 2343, 2337, 1, 0, 0, 0, 2343, 2340, 1,
        0, 0, 0, 2344, 113, 1, 0, 0, 0, 2345, 2347, 3, 1256, 628, 0, 2346, 2345, 1, 0, 0, 0, 2346, 2347,
        1, 0, 0, 0, 2347, 2389, 1, 0, 0, 0, 2348, 2350, 5, 609, 0, 0, 2349, 2348, 1, 0, 0, 0, 2349, 2350,
        1, 0, 0, 0, 2350, 2351, 1, 0, 0, 0, 2351, 2360, 5, 236, 0, 0, 2352, 2353, 4, 57, 16, 0, 2353,
        2355, 3, 1274, 637, 0, 2354, 2356, 3, 1106, 553, 0, 2355, 2354, 1, 0, 0, 0, 2355, 2356, 1,
        0, 0, 0, 2356, 2361, 1, 0, 0, 0, 2357, 2359, 3, 116, 58, 0, 2358, 2357, 1, 0, 0, 0, 2358, 2359,
        1, 0, 0, 0, 2359, 2361, 1, 0, 0, 0, 2360, 2352, 1, 0, 0, 0, 2360, 2358, 1, 0, 0, 0, 2361, 2362,
        1, 0, 0, 0, 2362, 2366, 3, 118, 59, 0, 2363, 2365, 3, 1100, 550, 0, 2364, 2363, 1, 0, 0, 0, 2365,
        2368, 1, 0, 0, 0, 2366, 2364, 1, 0, 0, 0, 2366, 2367, 1, 0, 0, 0, 2367, 2390, 1, 0, 0, 0, 2368,
        2366, 1, 0, 0, 0, 2369, 2370, 5, 205, 0, 0, 2370, 2371, 5, 236, 0, 0, 2371, 2372, 3, 1274, 637,
        0, 2372, 2376, 3, 118, 59, 0, 2373, 2375, 3, 1108, 554, 0, 2374, 2373, 1, 0, 0, 0, 2375, 2378,
        1, 0, 0, 0, 2376, 2374, 1, 0, 0, 0, 2376, 2377, 1, 0, 0, 0, 2377, 2390, 1, 0, 0, 0, 2378, 2376,
        1, 0, 0, 0, 2379, 2380, 5, 523, 0, 0, 2380, 2381, 5, 236, 0, 0, 2381, 2382, 3, 1274, 637, 0,
        2382, 2386, 3, 118, 59, 0, 2383, 2385, 3, 1110, 555, 0, 2384, 2383, 1, 0, 0, 0, 2385, 2388,
        1, 0, 0, 0, 2386, 2384, 1, 0, 0, 0, 2386, 2387, 1, 0, 0, 0, 2387, 2390, 1, 0, 0, 0, 2388, 2386,
        1, 0, 0, 0, 2389, 2349, 1, 0, 0, 0, 2389, 2369, 1, 0, 0, 0, 2389, 2379, 1, 0, 0, 0, 2390, 2392,
        1, 0, 0, 0, 2391, 2393, 3, 48, 24, 0, 2392, 2391, 1, 0, 0, 0, 2392, 2393, 1, 0, 0, 0, 2393, 115,
        1, 0, 0, 0, 2394, 2405, 3, 1274, 637, 0, 2395, 2397, 3, 1274, 637, 0, 2396, 2395, 1, 0, 0, 0,
        2396, 2397, 1, 0, 0, 0, 2397, 2398, 1, 0, 0, 0, 2398, 2399, 5, 621, 0, 0, 2399, 2405, 3, 1098,
        549, 0, 2400, 2401, 3, 1274, 637, 0, 2401, 2402, 5, 599, 0, 0, 2402, 2403, 3, 1098, 549, 0,
        2403, 2405, 1, 0, 0, 0, 2404, 2394, 1, 0, 0, 0, 2404, 2396, 1, 0, 0, 0, 2404, 2400, 1, 0, 0, 0,
        2405, 117, 1, 0, 0, 0, 2406, 2407, 5, 383, 0, 0, 2407, 2408, 3, 1326, 663, 0, 2408, 2409, 3,
        1096, 548, 0, 2409, 119, 1, 0, 0, 0, 2410, 2411, 5, 288, 0, 0, 2411, 2412, 5, 217, 0, 0, 2412,
        2413, 3, 1304, 652, 0, 2413, 2414, 5, 4, 0, 0, 2414, 2415, 5, 603, 0, 0, 2415, 2417, 3, 1388,
        694, 0, 2416, 2418, 3, 122, 61, 0, 2417, 2416, 1, 0, 0, 0, 2417, 2418, 1, 0, 0, 0, 2418, 121,
        1, 0, 0, 0, 2419, 2426, 3, 124, 62, 0, 2420, 2422, 5, 773, 0, 0, 2421, 2420, 1, 0, 0, 0, 2421,
        2422, 1, 0, 0, 0, 2422, 2423, 1, 0, 0, 0, 2423, 2425, 3, 124, 62, 0, 2424, 2421, 1, 0, 0, 0, 2425,
        2428, 1, 0, 0, 0, 2426, 2424, 1, 0, 0, 0, 2426, 2427, 1, 0, 0, 0, 2427, 123, 1, 0, 0, 0, 2428,
        2426, 1, 0, 0, 0, 2429, 2436, 3, 144, 72, 0, 2430, 2436, 3, 146, 73, 0, 2431, 2436, 3, 154,
        77, 0, 2432, 2436, 3, 156, 78, 0, 2433, 2436, 3, 158, 79, 0, 2434, 2436, 3, 160, 80, 0, 2435,
        2429, 1, 0, 0, 0, 2435, 2430, 1, 0, 0, 0, 2435, 2431, 1, 0, 0, 0, 2435, 2432, 1, 0, 0, 0, 2435,
        2433, 1, 0, 0, 0, 2435, 2434, 1, 0, 0, 0, 2436, 125, 1, 0, 0, 0, 2437, 2438, 5, 503, 0, 0, 2438,
        2439, 3, 1314, 657, 0, 2439, 2440, 5, 199, 0, 0, 2440, 2441, 5, 112, 0, 0, 2441, 2442, 5, 648,
        0, 0, 2442, 2443, 3, 1410, 705, 0, 2443, 2444, 3, 128, 64, 0, 2444, 127, 1, 0, 0, 0, 2445, 2446,
        5, 390, 0, 0, 2446, 2447, 5, 776, 0, 0, 2447, 2452, 3, 130, 65, 0, 2448, 2449, 5, 773, 0, 0,
        2449, 2451, 3, 130, 65, 0, 2450, 2448, 1, 0, 0, 0, 2451, 2454, 1, 0, 0, 0, 2452, 2450, 1, 0,
        0, 0, 2452, 2453, 1, 0, 0, 0, 2453, 2455, 1, 0, 0, 0, 2454, 2452, 1, 0, 0, 0, 2455, 2456, 5, 777,
        0, 0, 2456, 129, 1, 0, 0, 0, 2457, 2458, 5, 224, 0, 0, 2458, 2472, 3, 1388, 694, 0, 2459, 2460,
        5, 109, 0, 0, 2460, 2472, 3, 1388, 694, 0, 2461, 2462, 5, 618, 0, 0, 2462, 2472, 3, 1388, 694,
        0, 2463, 2464, 5, 406, 0, 0, 2464, 2472, 3, 1388, 694, 0, 2465, 2466, 5, 519, 0, 0, 2466, 2472,
        3, 1388, 694, 0, 2467, 2468, 5, 398, 0, 0, 2468, 2472, 3, 1388, 694, 0, 2469, 2470, 5, 413,
        0, 0, 2470, 2472, 3, 1362, 681, 0, 2471, 2457, 1, 0, 0, 0, 2471, 2459, 1, 0, 0, 0, 2471, 2461,
        1, 0, 0, 0, 2471, 2463, 1, 0, 0, 0, 2471, 2465, 1, 0, 0, 0, 2471, 2467, 1, 0, 0, 0, 2471, 2469,
        1, 0, 0, 0, 2472, 131, 1, 0, 0, 0, 2473, 2474, 5, 572, 0, 0, 2474, 2475, 3, 1300, 650, 0, 2475,
        2480, 3, 136, 68, 0, 2476, 2477, 5, 620, 0, 0, 2477, 2478, 5, 288, 0, 0, 2478, 2479, 5, 217,
        0, 0, 2479, 2481, 3, 1306, 653, 0, 2480, 2476, 1, 0, 0, 0, 2480, 2481, 1, 0, 0, 0, 2481, 2483,
        1, 0, 0, 0, 2482, 2484, 3, 140, 70, 0, 2483, 2482, 1, 0, 0, 0, 2483, 2484, 1, 0, 0, 0, 2484, 133,
        1, 0, 0, 0, 2485, 2486, 5, 605, 0, 0, 2486, 2487, 5, 572, 0, 0, 2487, 2488, 3, 1300, 650, 0,
        2488, 2489, 5, 4, 0, 0, 2489, 2491, 3, 138, 69, 0, 2490, 2492, 3, 60, 30, 0, 2491, 2490, 1,
        0, 0, 0, 2491, 2492, 1, 0, 0, 0, 2492, 135, 1, 0, 0, 0, 2493, 2496, 4, 68, 17, 0, 2494, 2495,
        5, 4, 0, 0, 2495, 2497, 3, 138, 69, 0, 2496, 2494, 1, 0, 0, 0, 2496, 2497, 1, 0, 0, 0, 2497, 2501,
        1, 0, 0, 0, 2498, 2499, 5, 4, 0, 0, 2499, 2501, 3, 138, 69, 0, 2500, 2493, 1, 0, 0, 0, 2500, 2498,
        1, 0, 0, 0, 2501, 137, 1, 0, 0, 0, 2502, 2503, 5, 111, 0, 0, 2503, 2504, 3, 1388, 694, 0, 2504,
        139, 1, 0, 0, 0, 2505, 2512, 3, 142, 71, 0, 2506, 2508, 5, 773, 0, 0, 2507, 2506, 1, 0, 0, 0,
        2507, 2508, 1, 0, 0, 0, 2508, 2509, 1, 0, 0, 0, 2509, 2511, 3, 142, 71, 0, 2510, 2507, 1, 0,
        0, 0, 2511, 2514, 1, 0, 0, 0, 2512, 2510, 1, 0, 0, 0, 2512, 2513, 1, 0, 0, 0, 2513, 141, 1, 0,
        0, 0, 2514, 2512, 1, 0, 0, 0, 2515, 2527, 3, 144, 72, 0, 2516, 2527, 3, 148, 74, 0, 2517, 2527,
        3, 150, 75, 0, 2518, 2527, 3, 152, 76, 0, 2519, 2527, 3, 154, 77, 0, 2520, 2527, 3, 156, 78,
        0, 2521, 2527, 3, 158, 79, 0, 2522, 2527, 3, 160, 80, 0, 2523, 2527, 3, 162, 81, 0, 2524, 2525,
        4, 71, 18, 0, 2525, 2527, 3, 164, 82, 0, 2526, 2515, 1, 0, 0, 0, 2526, 2516, 1, 0, 0, 0, 2526,
        2517, 1, 0, 0, 0, 2526, 2518, 1, 0, 0, 0, 2526, 2519, 1, 0, 0, 0, 2526, 2520, 1, 0, 0, 0, 2526,
        2521, 1, 0, 0, 0, 2526, 2522, 1, 0, 0, 0, 2526, 2523, 1, 0, 0, 0, 2526, 2524, 1, 0, 0, 0, 2527,
        143, 1, 0, 0, 0, 2528, 2530, 5, 238, 0, 0, 2529, 2531, 5, 750, 0, 0, 2530, 2529, 1, 0, 0, 0, 2530,
        2531, 1, 0, 0, 0, 2531, 2532, 1, 0, 0, 0, 2532, 2533, 3, 1416, 708, 0, 2533, 145, 1, 0, 0, 0,
        2534, 2536, 7, 11, 0, 0, 2535, 2537, 5, 750, 0, 0, 2536, 2535, 1, 0, 0, 0, 2536, 2537, 1, 0,
        0, 0, 2537, 2538, 1, 0, 0, 0, 2538, 2539, 3, 1416, 708, 0, 2539, 147, 1, 0, 0, 0, 2540, 2542,
        5, 23, 0, 0, 2541, 2543, 5, 750, 0, 0, 2542, 2541, 1, 0, 0, 0, 2542, 2543, 1, 0, 0, 0, 2543, 2544,
        1, 0, 0, 0, 2544, 2545, 3, 1416, 708, 0, 2545, 149, 1, 0, 0, 0, 2546, 2548, 5, 324, 0, 0, 2547,
        2549, 5, 750, 0, 0, 2548, 2547, 1, 0, 0, 0, 2548, 2549, 1, 0, 0, 0, 2549, 2550, 1, 0, 0, 0, 2550,
        2551, 3, 1416, 708, 0, 2551, 151, 1, 0, 0, 0, 2552, 2554, 5, 181, 0, 0, 2553, 2555, 5, 750,
        0, 0, 2554, 2553, 1, 0, 0, 0, 2554, 2555, 1, 0, 0, 0, 2555, 2556, 1, 0, 0, 0, 2556, 2557, 3, 1416,
        708, 0, 2557, 153, 1, 0, 0, 0, 2558, 2560, 5, 368, 0, 0, 2559, 2561, 5, 750, 0, 0, 2560, 2559,
        1, 0, 0, 0, 2560, 2561, 1, 0, 0, 0, 2561, 2562, 1, 0, 0, 0, 2562, 2563, 3, 1364, 682, 0, 2563,
        155, 1, 0, 0, 0, 2564, 2566, 5, 553, 0, 0, 2565, 2564, 1, 0, 0, 0, 2565, 2566, 1, 0, 0, 0, 2566,
        2567, 1, 0, 0, 0, 2567, 2569, 5, 163, 0, 0, 2568, 2570, 5, 750, 0, 0, 2569, 2568, 1, 0, 0, 0,
        2569, 2570, 1, 0, 0, 0, 2570, 2571, 1, 0, 0, 0, 2571, 2572, 3, 1318, 659, 0, 2572, 157, 1, 0,
        0, 0, 2573, 2574, 7, 12, 0, 0, 2574, 159, 1, 0, 0, 0, 2575, 2577, 5, 75, 0, 0, 2576, 2578, 5,
        750, 0, 0, 2577, 2576, 1, 0, 0, 0, 2577, 2578, 1, 0, 0, 0, 2578, 2579, 1, 0, 0, 0, 2579, 2580,
        3, 1388, 694, 0, 2580, 161, 1, 0, 0, 0, 2581, 2583, 5, 189, 0, 0, 2582, 2584, 5, 750, 0, 0, 2583,
        2582, 1, 0, 0, 0, 2583, 2584, 1, 0, 0, 0, 2584, 2585, 1, 0, 0, 0, 2585, 2586, 3, 1416, 708, 0,
        2586, 163, 1, 0, 0, 0, 2587, 2589, 5, 158, 0, 0, 2588, 2590, 5, 750, 0, 0, 2589, 2588, 1, 0,
        0, 0, 2589, 2590, 1, 0, 0, 0, 2590, 2591, 1, 0, 0, 0, 2591, 2592, 3, 1382, 691, 0, 2592, 165,
        1, 0, 0, 0, 2593, 2595, 5, 163, 0, 0, 2594, 2596, 5, 750, 0, 0, 2595, 2594, 1, 0, 0, 0, 2595,
        2596, 1, 0, 0, 0, 2596, 2597, 1, 0, 0, 0, 2597, 2598, 3, 1428, 714, 0, 2598, 167, 1, 0, 0, 0,
        2599, 2601, 3, 170, 85, 0, 2600, 2599, 1, 0, 0, 0, 2600, 2601, 1, 0, 0, 0, 2601, 2603, 1, 0,
        0, 0, 2602, 2604, 3, 1180, 590, 0, 2603, 2602, 1, 0, 0, 0, 2603, 2604, 1, 0, 0, 0, 2604, 2606,
        1, 0, 0, 0, 2605, 2607, 3, 174, 87, 0, 2606, 2605, 1, 0, 0, 0, 2606, 2607, 1, 0, 0, 0, 2607, 2608,
        1, 0, 0, 0, 2608, 2609, 5, 636, 0, 0, 2609, 2610, 3, 1296, 648, 0, 2610, 2611, 3, 72, 36, 0,
        2611, 169, 1, 0, 0, 0, 2612, 2613, 5, 394, 0, 0, 2613, 2615, 5, 458, 0, 0, 2614, 2616, 3, 172,
        86, 0, 2615, 2614, 1, 0, 0, 0, 2615, 2616, 1, 0, 0, 0, 2616, 2619, 1, 0, 0, 0, 2617, 2619, 3,
        172, 86, 0, 2618, 2612, 1, 0, 0, 0, 2618, 2617, 1, 0, 0, 0, 2619, 171, 1, 0, 0, 0, 2620, 2621,
        5, 9, 0, 0, 2621, 2622, 5, 750, 0, 0, 2622, 2623, 7, 13, 0, 0, 2623, 173, 1, 0, 0, 0, 2624, 2625,
        5, 537, 0, 0, 2625, 2626, 5, 496, 0, 0, 2626, 2627, 7, 10, 0, 0, 2627, 175, 1, 0, 0, 0, 2628,
        2630, 3, 1180, 590, 0, 2629, 2628, 1, 0, 0, 0, 2629, 2630, 1, 0, 0, 0, 2630, 2631, 1, 0, 0, 0,
        2631, 2633, 5, 594, 0, 0, 2632, 2634, 3, 1184, 592, 0, 2633, 2632, 1, 0, 0, 0, 2633, 2634,
        1, 0, 0, 0, 2634, 2635, 1, 0, 0, 0, 2635, 2636, 3, 1292, 646, 0, 2636, 2637, 7, 14, 0, 0, 2637,
        2638, 7, 15, 0, 0, 2638, 2639, 5, 383, 0, 0, 2639, 2640, 3, 1326, 663, 0, 2640, 2641, 5, 200,
        0, 0, 2641, 2642, 5, 153, 0, 0, 2642, 2644, 5, 487, 0, 0, 2643, 2645, 3, 178, 89, 0, 2644, 2643,
        1, 0, 0, 0, 2644, 2645, 1, 0, 0, 0, 2645, 2646, 1, 0, 0, 0, 2646, 2647, 3, 978, 489, 0, 2647,
        177, 1, 0, 0, 0, 2648, 2649, 7, 16, 0, 0, 2649, 2650, 3, 1410, 705, 0, 2650, 179, 1, 0, 0, 0,
        2651, 2653, 3, 1180, 590, 0, 2652, 2651, 1, 0, 0, 0, 2652, 2653, 1, 0, 0, 0, 2653, 2654, 1,
        0, 0, 0, 2654, 2656, 5, 170, 0, 0, 2655, 2657, 3, 1184, 592, 0, 2656, 2655, 1, 0, 0, 0, 2656,
        2657, 1, 0, 0, 0, 2657, 2658, 1, 0, 0, 0, 2658, 2659, 3, 1308, 654, 0, 2659, 2660, 5, 383, 0,
        0, 2660, 2661, 5, 490, 0, 0, 2661, 2668, 3, 1056, 528, 0, 2662, 2663, 5, 383, 0, 0, 2663, 2665,
        5, 79, 0, 0, 2664, 2666, 5, 371, 0, 0, 2665, 2664, 1, 0, 0, 0, 2665, 2666, 1, 0, 0, 0, 2666, 2667,
        1, 0, 0, 0, 2667, 2669, 5, 418, 0, 0, 2668, 2662, 1, 0, 0, 0, 2668, 2669, 1, 0, 0, 0, 2669, 2676,
        1, 0, 0, 0, 2670, 2677, 5, 156, 0, 0, 2671, 2674, 5, 140, 0, 0, 2672, 2673, 5, 383, 0, 0, 2673,
        2675, 3, 580, 290, 0, 2674, 2672, 1, 0, 0, 0, 2674, 2675, 1, 0, 0, 0, 2675, 2677, 1, 0, 0, 0,
        2676, 2670, 1, 0, 0, 0, 2676, 2671, 1, 0, 0, 0, 2676, 2677, 1, 0, 0, 0, 2677, 2680, 1, 0, 0, 0,
        2678, 2679, 5, 75, 0, 0, 2679, 2681, 3, 1388, 694, 0, 2680, 2678, 1, 0, 0, 0, 2680, 2681, 1,
        0, 0, 0, 2681, 2682, 1, 0, 0, 0, 2682, 2683, 5, 147, 0, 0, 2683, 2684, 3, 978, 489, 0, 2684,
        181, 1, 0, 0, 0, 2685, 2687, 5, 659, 0, 0, 2686, 2688, 3, 1184, 592, 0, 2687, 2686, 1, 0, 0,
        0, 2687, 2688, 1, 0, 0, 0, 2688, 2689, 1, 0, 0, 0, 2689, 2690, 3, 658, 329, 0, 2690, 183, 1,
        0, 0, 0, 2691, 2692, 5, 394, 0, 0, 2692, 2693, 5, 458, 0, 0, 2693, 2694, 5, 523, 0, 0, 2694,
        2695, 5, 718, 0, 0, 2695, 2696, 5, 710, 0, 0, 2696, 2700, 3, 1368, 684, 0, 2697, 2699, 3, 186,
        93, 0, 2698, 2697, 1, 0, 0, 0, 2699, 2702, 1, 0, 0, 0, 2700, 2698, 1, 0, 0, 0, 2700, 2701, 1,
        0, 0, 0, 2701, 2717, 1, 0, 0, 0, 2702, 2700, 1, 0, 0, 0, 2703, 2704, 5, 523, 0, 0, 2704, 2705,
        5, 718, 0, 0, 2705, 2707, 5, 710, 0, 0, 2706, 2708, 3, 1184, 592, 0, 2707, 2706, 1, 0, 0, 0,
        2707, 2708, 1, 0, 0, 0, 2708, 2709, 1, 0, 0, 0, 2709, 2713, 3, 1368, 684, 0, 2710, 2712, 3,
        186, 93, 0, 2711, 2710, 1, 0, 0, 0, 2712, 2715, 1, 0, 0, 0, 2713, 2711, 1, 0, 0, 0, 2713, 2714,
        1, 0, 0, 0, 2714, 2717, 1, 0, 0, 0, 2715, 2713, 1, 0, 0, 0, 2716, 2691, 1, 0, 0, 0, 2716, 2703,
        1, 0, 0, 0, 2717, 185, 1, 0, 0, 0, 2718, 2719, 5, 357, 0, 0, 2719, 2720, 5, 580, 0, 0, 2720, 2734,
        3, 1390, 695, 0, 2721, 2722, 5, 715, 0, 0, 2722, 2723, 5, 580, 0, 0, 2723, 2734, 3, 1390, 695,
        0, 2724, 2725, 5, 717, 0, 0, 2725, 2726, 3, 1390, 695, 0, 2726, 2727, 5, 230, 0, 0, 2727, 2728,
        5, 45, 0, 0, 2728, 2729, 3, 1368, 684, 0, 2729, 2734, 1, 0, 0, 0, 2730, 2731, 5, 716, 0, 0, 2731,
        2732, 5, 580, 0, 0, 2732, 2734, 3, 1390, 695, 0, 2733, 2718, 1, 0, 0, 0, 2733, 2721, 1, 0, 0,
        0, 2733, 2724, 1, 0, 0, 0, 2733, 2730, 1, 0, 0, 0, 2734, 187, 1, 0, 0, 0, 2735, 2752, 5, 148,
        0, 0, 2736, 2753, 3, 190, 95, 0, 2737, 2753, 3, 192, 96, 0, 2738, 2753, 3, 194, 97, 0, 2739,
        2753, 3, 196, 98, 0, 2740, 2753, 3, 198, 99, 0, 2741, 2753, 3, 200, 100, 0, 2742, 2753, 3,
        204, 102, 0, 2743, 2753, 3, 206, 103, 0, 2744, 2753, 3, 208, 104, 0, 2745, 2753, 3, 210, 105,
        0, 2746, 2753, 3, 212, 106, 0, 2747, 2753, 3, 214, 107, 0, 2748, 2749, 4, 94, 19, 0, 2749,
        2753, 3, 216, 108, 0, 2750, 2751, 4, 94, 20, 0, 2751, 2753, 3, 218, 109, 0, 2752, 2736, 1,
        0, 0, 0, 2752, 2737, 1, 0, 0, 0, 2752, 2738, 1, 0, 0, 0, 2752, 2739, 1, 0, 0, 0, 2752, 2740, 1,
        0, 0, 0, 2752, 2741, 1, 0, 0, 0, 2752, 2742, 1, 0, 0, 0, 2752, 2743, 1, 0, 0, 0, 2752, 2744, 1,
        0, 0, 0, 2752, 2745, 1, 0, 0, 0, 2752, 2746, 1, 0, 0, 0, 2752, 2747, 1, 0, 0, 0, 2752, 2748, 1,
        0, 0, 0, 2752, 2750, 1, 0, 0, 0, 2753, 189, 1, 0, 0, 0, 2754, 2756, 5, 109, 0, 0, 2755, 2757,
        3, 1182, 591, 0, 2756, 2755, 1, 0, 0, 0, 2756, 2757, 1, 0, 0, 0, 2757, 2758, 1, 0, 0, 0, 2758,
        2759, 3, 1282, 641, 0, 2759, 191, 1, 0, 0, 0, 2760, 2762, 5, 170, 0, 0, 2761, 2763, 3, 1182,
        591, 0, 2762, 2761, 1, 0, 0, 0, 2762, 2763, 1, 0, 0, 0, 2763, 2764, 1, 0, 0, 0, 2764, 2765, 3,
        1310, 655, 0, 2765, 193, 1, 0, 0, 0, 2766, 2768, 5, 206, 0, 0, 2767, 2769, 3, 1182, 591, 0,
        2768, 2767, 1, 0, 0, 0, 2768, 2769, 1, 0, 0, 0, 2769, 2770, 1, 0, 0, 0, 2770, 2771, 3, 1290,
        645, 0, 2771, 195, 1, 0, 0, 0, 2772, 2774, 5, 422, 0, 0, 2773, 2775, 3, 1182, 591, 0, 2774,
        2773, 1, 0, 0, 0, 2774, 2775, 1, 0, 0, 0, 2775, 2776, 1, 0, 0, 0, 2776, 2777, 3, 1286, 643, 0,
        2777, 197, 1, 0, 0, 0, 2778, 2780, 3, 1256, 628, 0, 2779, 2778, 1, 0, 0, 0, 2779, 2780, 1, 0,
        0, 0, 2780, 2781, 1, 0, 0, 0, 2781, 2782, 5, 236, 0, 0, 2782, 2783, 3, 1276, 638, 0, 2783, 2784,
        5, 383, 0, 0, 2784, 2786, 3, 1326, 663, 0, 2785, 2787, 3, 48, 24, 0, 2786, 2785, 1, 0, 0, 0,
        2786, 2787, 1, 0, 0, 0, 2787, 199, 1, 0, 0, 0, 2788, 2789, 5, 288, 0, 0, 2789, 2790, 5, 217,
        0, 0, 2790, 2801, 3, 1306, 653, 0, 2791, 2798, 3, 202, 101, 0, 2792, 2794, 5, 773, 0, 0, 2793,
        2792, 1, 0, 0, 0, 2793, 2794, 1, 0, 0, 0, 2794, 2795, 1, 0, 0, 0, 2795, 2797, 3, 202, 101, 0,
        2796, 2793, 1, 0, 0, 0, 2797, 2800, 1, 0, 0, 0, 2798, 2796, 1, 0, 0, 0, 2798, 2799, 1, 0, 0, 0,
        2799, 2802, 1, 0, 0, 0, 2800, 2798, 1, 0, 0, 0, 2801, 2791, 1, 0, 0, 0, 2801, 2802, 1, 0, 0, 0,
        2802, 201, 1, 0, 0, 0, 2803, 2806, 3, 158, 79, 0, 2804, 2806, 3, 156, 78, 0, 2805, 2803, 1,
        0, 0, 0, 2805, 2804, 1, 0, 0, 0, 2806, 203, 1, 0, 0, 0, 2807, 2809, 5, 503, 0, 0, 2808, 2810,
        3, 1182, 591, 0, 2809, 2808, 1, 0, 0, 0, 2809, 2810, 1, 0, 0, 0, 2810, 2811, 1, 0, 0, 0, 2811,
        2812, 3, 1316, 658, 0, 2812, 205, 1, 0, 0, 0, 2813, 2815, 5, 577, 0, 0, 2814, 2813, 1, 0, 0,
        0, 2814, 2815, 1, 0, 0, 0, 2815, 2816, 1, 0, 0, 0, 2816, 2818, 7, 17, 0, 0, 2817, 2819, 3, 1182,
        591, 0, 2818, 2817, 1, 0, 0, 0, 2818, 2819, 1, 0, 0, 0, 2819, 2820, 1, 0, 0, 0, 2820, 2822, 3,
        1328, 664, 0, 2821, 2823, 7, 2, 0, 0, 2822, 2821, 1, 0, 0, 0, 2822, 2823, 1, 0, 0, 0, 2823, 207,
        1, 0, 0, 0, 2824, 2825, 5, 572, 0, 0, 2825, 2836, 3, 1302, 651, 0, 2826, 2833, 3, 202, 101,
        0, 2827, 2829, 5, 773, 0, 0, 2828, 2827, 1, 0, 0, 0, 2828, 2829, 1, 0, 0, 0, 2829, 2830, 1, 0,
        0, 0, 2830, 2832, 3, 202, 101, 0, 2831, 2828, 1, 0, 0, 0, 2832, 2835, 1, 0, 0, 0, 2833, 2831,
        1, 0, 0, 0, 2833, 2834, 1, 0, 0, 0, 2834, 2837, 1, 0, 0, 0, 2835, 2833, 1, 0, 0, 0, 2836, 2826,
        1, 0, 0, 0, 2836, 2837, 1, 0, 0, 0, 2837, 209, 1, 0, 0, 0, 2838, 2840, 5, 594, 0, 0, 2839, 2841,
        3, 1182, 591, 0, 2840, 2839, 1, 0, 0, 0, 2840, 2841, 1, 0, 0, 0, 2841, 2842, 1, 0, 0, 0, 2842,
        2843, 3, 1294, 647, 0, 2843, 211, 1, 0, 0, 0, 2844, 2846, 5, 636, 0, 0, 2845, 2847, 3, 1182,
        591, 0, 2846, 2845, 1, 0, 0, 0, 2846, 2847, 1, 0, 0, 0, 2847, 2848, 1, 0, 0, 0, 2848, 2850, 3,
        1198, 599, 0, 2849, 2851, 7, 2, 0, 0, 2850, 2849, 1, 0, 0, 0, 2850, 2851, 1, 0, 0, 0, 2851, 213,
        1, 0, 0, 0, 2852, 2854, 5, 659, 0, 0, 2853, 2855, 3, 1182, 591, 0, 2854, 2853, 1, 0, 0, 0, 2854,
        2855, 1, 0, 0, 0, 2855, 2856, 1, 0, 0, 0, 2856, 2857, 3, 658, 329, 0, 2857, 215, 1, 0, 0, 0, 2858,
        2859, 5, 523, 0, 0, 2859, 2860, 5, 718, 0, 0, 2860, 2862, 5, 710, 0, 0, 2861, 2863, 3, 1182,
        591, 0, 2862, 2861, 1, 0, 0, 0, 2862, 2863, 1, 0, 0, 0, 2863, 2864, 1, 0, 0, 0, 2864, 2865, 3,
        1368, 684, 0, 2865, 217, 1, 0, 0, 0, 2866, 2867, 5, 605, 0, 0, 2867, 2868, 5, 572, 0, 0, 2868,
        2870, 3, 1302, 651, 0, 2869, 2871, 3, 60, 30, 0, 2870, 2869, 1, 0, 0, 0, 2870, 2871, 1, 0, 0,
        0, 2871, 219, 1, 0, 0, 0, 2872, 2873, 5, 453, 0, 0, 2873, 2874, 7, 17, 0, 0, 2874, 2879, 3, 222,
        111, 0, 2875, 2876, 5, 773, 0, 0, 2876, 2878, 3, 222, 111, 0, 2877, 2875, 1, 0, 0, 0, 2878,
        2881, 1, 0, 0, 0, 2879, 2877, 1, 0, 0, 0, 2879, 2880, 1, 0, 0, 0, 2880, 221, 1, 0, 0, 0, 2881,
        2879, 1, 0, 0, 0, 2882, 2883, 3, 1326, 663, 0, 2883, 2884, 5, 590, 0, 0, 2884, 2885, 3, 1320,
        660, 0, 2885, 223, 1, 0, 0, 0, 2886, 2888, 5, 597, 0, 0, 2887, 2889, 5, 574, 0, 0, 2888, 2887,
        1, 0, 0, 0, 2888, 2889, 1, 0, 0, 0, 2889, 2890, 1, 0, 0, 0, 2890, 2891, 3, 1326, 663, 0, 2891,
        225, 1, 0, 0, 0, 2892, 2893, 5, 234, 0, 0, 2893, 2894, 5, 574, 0, 0, 2894, 2895, 5, 203, 0, 0,
        2895, 2896, 3, 1392, 696, 0, 2896, 227, 1, 0, 0, 0, 2897, 2898, 5, 48, 0, 0, 2898, 2904, 3,
        1286, 643, 0, 2899, 2901, 5, 776, 0, 0, 2900, 2902, 3, 950, 475, 0, 2901, 2900, 1, 0, 0, 0,
        2901, 2902, 1, 0, 0, 0, 2902, 2903, 1, 0, 0, 0, 2903, 2905, 5, 777, 0, 0, 2904, 2899, 1, 0, 0,
        0, 2904, 2905, 1, 0, 0, 0, 2905, 229, 1, 0, 0, 0, 2906, 2908, 3, 332, 166, 0, 2907, 2906, 1,
        0, 0, 0, 2907, 2908, 1, 0, 0, 0, 2908, 2909, 1, 0, 0, 0, 2909, 2913, 5, 133, 0, 0, 2910, 2912,
        3, 234, 117, 0, 2911, 2910, 1, 0, 0, 0, 2912, 2915, 1, 0, 0, 0, 2913, 2911, 1, 0, 0, 0, 2913,
        2914, 1, 0, 0, 0, 2914, 2948, 1, 0, 0, 0, 2915, 2913, 1, 0, 0, 0, 2916, 2940, 5, 203, 0, 0, 2917,
        2918, 3, 1330, 665, 0, 2918, 2919, 5, 621, 0, 0, 2919, 2921, 3, 346, 173, 0, 2920, 2922, 3,
        370, 185, 0, 2921, 2920, 1, 0, 0, 0, 2921, 2922, 1, 0, 0, 0, 2922, 2941, 1, 0, 0, 0, 2923, 2926,
        3, 1326, 663, 0, 2924, 2925, 4, 115, 21, 0, 2925, 2927, 3, 412, 206, 0, 2926, 2924, 1, 0, 0,
        0, 2926, 2927, 1, 0, 0, 0, 2927, 2929, 1, 0, 0, 0, 2928, 2930, 3, 232, 116, 0, 2929, 2928, 1,
        0, 0, 0, 2929, 2930, 1, 0, 0, 0, 2930, 2932, 1, 0, 0, 0, 2931, 2933, 3, 370, 185, 0, 2932, 2931,
        1, 0, 0, 0, 2932, 2933, 1, 0, 0, 0, 2933, 2935, 1, 0, 0, 0, 2934, 2936, 3, 340, 170, 0, 2935,
        2934, 1, 0, 0, 0, 2935, 2936, 1, 0, 0, 0, 2936, 2938, 1, 0, 0, 0, 2937, 2939, 3, 298, 149, 0,
        2938, 2937, 1, 0, 0, 0, 2938, 2939, 1, 0, 0, 0, 2939, 2941, 1, 0, 0, 0, 2940, 2917, 1, 0, 0, 0,
        2940, 2923, 1, 0, 0, 0, 2941, 2949, 1, 0, 0, 0, 2942, 2943, 3, 1330, 665, 0, 2943, 2944, 5,
        203, 0, 0, 2944, 2946, 3, 346, 173, 0, 2945, 2947, 3, 370, 185, 0, 2946, 2945, 1, 0, 0, 0, 2946,
        2947, 1, 0, 0, 0, 2947, 2949, 1, 0, 0, 0, 2948, 2916, 1, 0, 0, 0, 2948, 2942, 1, 0, 0, 0, 2949,
        231, 1, 0, 0, 0, 2950, 2951, 5, 405, 0, 0, 2951, 2952, 5, 776, 0, 0, 2952, 2953, 3, 1352, 676,
        0, 2953, 2954, 5, 777, 0, 0, 2954, 233, 1, 0, 0, 0, 2955, 2956, 7, 18, 0, 0, 2956, 235, 1, 0,
        0, 0, 2957, 2958, 5, 147, 0, 0, 2958, 2959, 3, 364, 182, 0, 2959, 237, 1, 0, 0, 0, 2960, 2978,
        5, 219, 0, 0, 2961, 2962, 3, 1326, 663, 0, 2962, 2964, 5, 387, 0, 0, 2963, 2965, 3, 412, 206,
        0, 2964, 2963, 1, 0, 0, 0, 2964, 2965, 1, 0, 0, 0, 2965, 2979, 1, 0, 0, 0, 2966, 2976, 3, 1350,
        675, 0, 2967, 2977, 5, 66, 0, 0, 2968, 2969, 5, 435, 0, 0, 2969, 2971, 3, 240, 120, 0, 2970,
        2972, 3, 370, 185, 0, 2971, 2970, 1, 0, 0, 0, 2971, 2972, 1, 0, 0, 0, 2972, 2974, 1, 0, 0, 0,
        2973, 2975, 3, 296, 148, 0, 2974, 2973, 1, 0, 0, 0, 2974, 2975, 1, 0, 0, 0, 2975, 2977, 1, 0,
        0, 0, 2976, 2967, 1, 0, 0, 0, 2976, 2968, 1, 0, 0, 0, 2977, 2979, 1, 0, 0, 0, 2978, 2961, 1, 0,
        0, 0, 2978, 2966, 1, 0, 0, 0, 2979, 239, 1, 0, 0, 0, 2980, 2991, 7, 19, 0, 0, 2981, 2988, 3, 1350,
        675, 0, 2982, 2989, 7, 20, 0, 0, 2983, 2984, 7, 21, 0, 0, 2984, 2985, 5, 776, 0, 0, 2985, 2986,
        3, 256, 128, 0, 2986, 2987, 5, 777, 0, 0, 2987, 2989, 1, 0, 0, 0, 2988, 2982, 1, 0, 0, 0, 2988,
        2983, 1, 0, 0, 0, 2989, 2991, 1, 0, 0, 0, 2990, 2980, 1, 0, 0, 0, 2990, 2981, 1, 0, 0, 0, 2991,
        241, 1, 0, 0, 0, 2992, 2994, 5, 242, 0, 0, 2993, 2995, 3, 244, 122, 0, 2994, 2993, 1, 0, 0, 0,
        2994, 2995, 1, 0, 0, 0, 2995, 2997, 1, 0, 0, 0, 2996, 2998, 5, 232, 0, 0, 2997, 2996, 1, 0, 0,
        0, 2997, 2998, 1, 0, 0, 0, 2998, 3000, 1, 0, 0, 0, 2999, 3001, 5, 248, 0, 0, 3000, 2999, 1, 0,
        0, 0, 3000, 3001, 1, 0, 0, 0, 3001, 3002, 1, 0, 0, 0, 3002, 3004, 3, 1326, 663, 0, 3003, 3005,
        3, 1260, 630, 0, 3004, 3003, 1, 0, 0, 0, 3004, 3005, 1, 0, 0, 0, 3005, 3018, 1, 0, 0, 0, 3006,
        3009, 3, 246, 123, 0, 3007, 3008, 4, 121, 22, 0, 3008, 3010, 3, 258, 129, 0, 3009, 3007, 1,
        0, 0, 0, 3009, 3010, 1, 0, 0, 0, 3010, 3019, 1, 0, 0, 0, 3011, 3012, 5, 506, 0, 0, 3012, 3015,
        3, 1200, 600, 0, 3013, 3014, 4, 121, 23, 0, 3014, 3016, 3, 258, 129, 0, 3015, 3013, 1, 0, 0,
        0, 3015, 3016, 1, 0, 0, 0, 3016, 3019, 1, 0, 0, 0, 3017, 3019, 3, 252, 126, 0, 3018, 3006, 1,
        0, 0, 0, 3018, 3011, 1, 0, 0, 0, 3018, 3017, 1, 0, 0, 0, 3019, 3021, 1, 0, 0, 0, 3020, 3022, 3,
        260, 130, 0, 3021, 3020, 1, 0, 0, 0, 3021, 3022, 1, 0, 0, 0, 3022, 243, 1, 0, 0, 0, 3023, 3024,
        7, 22, 0, 0, 3024, 245, 1, 0, 0, 0, 3025, 3027, 5, 776, 0, 0, 3026, 3028, 3, 248, 124, 0, 3027,
        3026, 1, 0, 0, 0, 3027, 3028, 1, 0, 0, 0, 3028, 3029, 1, 0, 0, 0, 3029, 3031, 5, 777, 0, 0, 3030,
        3025, 1, 0, 0, 0, 3030, 3031, 1, 0, 0, 0, 3031, 3032, 1, 0, 0, 0, 3032, 3033, 3, 250, 125, 0,
        3033, 247, 1, 0, 0, 0, 3034, 3039, 3, 1272, 636, 0, 3035, 3036, 5, 773, 0, 0, 3036, 3038, 3,
        1272, 636, 0, 3037, 3035, 1, 0, 0, 0, 3038, 3041, 1, 0, 0, 0, 3039, 3037, 1, 0, 0, 0, 3039, 3040,
        1, 0, 0, 0, 3040, 249, 1, 0, 0, 0, 3041, 3039, 1, 0, 0, 0, 3042, 3043, 7, 23, 0, 0, 3043, 3044,
        3, 254, 127, 0, 3044, 251, 1, 0, 0, 0, 3045, 3053, 4, 126, 24, 0, 3046, 3054, 3, 96, 48, 0, 3047,
        3049, 5, 776, 0, 0, 3048, 3050, 3, 248, 124, 0, 3049, 3048, 1, 0, 0, 0, 3049, 3050, 1, 0, 0,
        0, 3050, 3051, 1, 0, 0, 0, 3051, 3052, 5, 777, 0, 0, 3052, 3054, 3, 98, 49, 0, 3053, 3046, 1,
        0, 0, 0, 3053, 3047, 1, 0, 0, 0, 3054, 3066, 1, 0, 0, 0, 3055, 3063, 4, 126, 25, 0, 3056, 3064,
        3, 98, 49, 0, 3057, 3059, 5, 776, 0, 0, 3058, 3060, 3, 248, 124, 0, 3059, 3058, 1, 0, 0, 0, 3059,
        3060, 1, 0, 0, 0, 3060, 3061, 1, 0, 0, 0, 3061, 3062, 5, 777, 0, 0, 3062, 3064, 3, 98, 49, 0,
        3063, 3056, 1, 0, 0, 0, 3063, 3057, 1, 0, 0, 0, 3064, 3066, 1, 0, 0, 0, 3065, 3045, 1, 0, 0, 0,
        3065, 3055, 1, 0, 0, 0, 3066, 253, 1, 0, 0, 0, 3067, 3069, 5, 776, 0, 0, 3068, 3070, 3, 256,
        128, 0, 3069, 3068, 1, 0, 0, 0, 3069, 3070, 1, 0, 0, 0, 3070, 3071, 1, 0, 0, 0, 3071, 3080, 5,
        777, 0, 0, 3072, 3073, 5, 773, 0, 0, 3073, 3075, 5, 776, 0, 0, 3074, 3076, 3, 256, 128, 0, 3075,
        3074, 1, 0, 0, 0, 3075, 3076, 1, 0, 0, 0, 3076, 3077, 1, 0, 0, 0, 3077, 3079, 5, 777, 0, 0, 3078,
        3072, 1, 0, 0, 0, 3079, 3082, 1, 0, 0, 0, 3080, 3078, 1, 0, 0, 0, 3080, 3081, 1, 0, 0, 0, 3081,
        255, 1, 0, 0, 0, 3082, 3080, 1, 0, 0, 0, 3083, 3086, 3, 862, 431, 0, 3084, 3086, 5, 128, 0, 0,
        3085, 3083, 1, 0, 0, 0, 3085, 3084, 1, 0, 0, 0, 3086, 3094, 1, 0, 0, 0, 3087, 3090, 5, 773, 0,
        0, 3088, 3091, 3, 862, 431, 0, 3089, 3091, 5, 128, 0, 0, 3090, 3088, 1, 0, 0, 0, 3090, 3089,
        1, 0, 0, 0, 3091, 3093, 1, 0, 0, 0, 3092, 3087, 1, 0, 0, 0, 3093, 3096, 1, 0, 0, 0, 3094, 3092,
        1, 0, 0, 0, 3094, 3095, 1, 0, 0, 0, 3095, 257, 1, 0, 0, 0, 3096, 3094, 1, 0, 0, 0, 3097, 3098,
        5, 17, 0, 0, 3098, 3100, 3, 1350, 675, 0, 3099, 3101, 3, 1268, 634, 0, 3100, 3099, 1, 0, 0,
        0, 3100, 3101, 1, 0, 0, 0, 3101, 259, 1, 0, 0, 0, 3102, 3103, 5, 383, 0, 0, 3103, 3104, 5, 151,
        0, 0, 3104, 3105, 5, 265, 0, 0, 3105, 3106, 5, 614, 0, 0, 3106, 3107, 3, 1200, 600, 0, 3107,
        261, 1, 0, 0, 0, 3108, 3109, 5, 281, 0, 0, 3109, 3111, 3, 264, 132, 0, 3110, 3112, 7, 24, 0,
        0, 3111, 3110, 1, 0, 0, 0, 3111, 3112, 1, 0, 0, 0, 3112, 3114, 1, 0, 0, 0, 3113, 3115, 5, 284,
        0, 0, 3114, 3113, 1, 0, 0, 0, 3114, 3115, 1, 0, 0, 0, 3115, 3116, 1, 0, 0, 0, 3116, 3117, 5, 237,
        0, 0, 3117, 3119, 3, 1388, 694, 0, 3118, 3120, 7, 8, 0, 0, 3119, 3118, 1, 0, 0, 0, 3119, 3120,
        1, 0, 0, 0, 3120, 3121, 1, 0, 0, 0, 3121, 3122, 5, 248, 0, 0, 3122, 3123, 5, 574, 0, 0, 3123,
        3125, 3, 1326, 663, 0, 3124, 3126, 3, 1260, 630, 0, 3125, 3124, 1, 0, 0, 0, 3125, 3126, 1,
        0, 0, 0, 3126, 3128, 1, 0, 0, 0, 3127, 3129, 3, 1204, 602, 0, 3128, 3127, 1, 0, 0, 0, 3128, 3129,
        1, 0, 0, 0, 3129, 3131, 1, 0, 0, 0, 3130, 3132, 3, 266, 133, 0, 3131, 3130, 1, 0, 0, 0, 3131,
        3132, 1, 0, 0, 0, 3132, 3134, 1, 0, 0, 0, 3133, 3135, 3, 1206, 603, 0, 3134, 3133, 1, 0, 0, 0,
        3134, 3135, 1, 0, 0, 0, 3135, 3137, 1, 0, 0, 0, 3136, 3138, 3, 1210, 605, 0, 3137, 3136, 1,
        0, 0, 0, 3137, 3138, 1, 0, 0, 0, 3138, 3139, 1, 0, 0, 0, 3139, 3140, 3, 268, 134, 0, 3140, 263,
        1, 0, 0, 0, 3141, 3142, 7, 25, 0, 0, 3142, 265, 1, 0, 0, 0, 3143, 3144, 5, 484, 0, 0, 3144, 3145,
        5, 230, 0, 0, 3145, 3146, 5, 45, 0, 0, 3146, 3147, 3, 1384, 692, 0, 3147, 267, 1, 0, 0, 0, 3148,
        3149, 5, 232, 0, 0, 3149, 3150, 5, 747, 0, 0, 3150, 3152, 7, 26, 0, 0, 3151, 3148, 1, 0, 0, 0,
        3151, 3152, 1, 0, 0, 0, 3152, 3154, 1, 0, 0, 0, 3153, 3155, 3, 270, 135, 0, 3154, 3153, 1, 0,
        0, 0, 3154, 3155, 1, 0, 0, 0, 3155, 3158, 1, 0, 0, 0, 3156, 3157, 5, 506, 0, 0, 3157, 3159, 3,
        1200, 600, 0, 3158, 3156, 1, 0, 0, 0, 3158, 3159, 1, 0, 0, 0, 3159, 269, 1, 0, 0, 0, 3160, 3162,
        5, 776, 0, 0, 3161, 3163, 3, 272, 136, 0, 3162, 3161, 1, 0, 0, 0, 3162, 3163, 1, 0, 0, 0, 3163,
        3164, 1, 0, 0, 0, 3164, 3165, 5, 777, 0, 0, 3165, 271, 1, 0, 0, 0, 3166, 3171, 3, 1270, 635,
        0, 3167, 3168, 5, 783, 0, 0, 3168, 3171, 3, 1410, 705, 0, 3169, 3171, 5, 785, 0, 0, 3170, 3166,
        1, 0, 0, 0, 3170, 3167, 1, 0, 0, 0, 3170, 3169, 1, 0, 0, 0, 3171, 3182, 1, 0, 0, 0, 3172, 3178,
        5, 773, 0, 0, 3173, 3179, 3, 1270, 635, 0, 3174, 3175, 5, 783, 0, 0, 3175, 3179, 3, 1410, 705,
        0, 3176, 3179, 5, 784, 0, 0, 3177, 3179, 5, 785, 0, 0, 3178, 3173, 1, 0, 0, 0, 3178, 3174, 1,
        0, 0, 0, 3178, 3176, 1, 0, 0, 0, 3178, 3177, 1, 0, 0, 0, 3179, 3181, 1, 0, 0, 0, 3180, 3172, 1,
        0, 0, 0, 3181, 3184, 1, 0, 0, 0, 3182, 3180, 1, 0, 0, 0, 3182, 3183, 1, 0, 0, 0, 3183, 273, 1,
        0, 0, 0, 3184, 3182, 1, 0, 0, 0, 3185, 3187, 5, 458, 0, 0, 3186, 3188, 7, 27, 0, 0, 3187, 3186,
        1, 0, 0, 0, 3187, 3188, 1, 0, 0, 0, 3188, 3190, 1, 0, 0, 0, 3189, 3191, 5, 248, 0, 0, 3190, 3189,
        1, 0, 0, 0, 3190, 3191, 1, 0, 0, 0, 3191, 3192, 1, 0, 0, 0, 3192, 3194, 3, 1326, 663, 0, 3193,
        3195, 3, 1260, 630, 0, 3194, 3193, 1, 0, 0, 0, 3194, 3195, 1, 0, 0, 0, 3195, 3200, 1, 0, 0, 0,
        3196, 3201, 3, 246, 123, 0, 3197, 3198, 5, 506, 0, 0, 3198, 3201, 3, 1200, 600, 0, 3199, 3201,
        3, 252, 126, 0, 3200, 3196, 1, 0, 0, 0, 3200, 3197, 1, 0, 0, 0, 3200, 3199, 1, 0, 0, 0, 3201,
        275, 1, 0, 0, 0, 3202, 3204, 3, 280, 140, 0, 3203, 3205, 3, 356, 178, 0, 3204, 3203, 1, 0, 0,
        0, 3204, 3205, 1, 0, 0, 0, 3205, 3208, 1, 0, 0, 0, 3206, 3208, 3, 278, 139, 0, 3207, 3202, 1,
        0, 0, 0, 3207, 3206, 1, 0, 0, 0, 3208, 277, 1, 0, 0, 0, 3209, 3210, 5, 776, 0, 0, 3210, 3211,
        3, 278, 139, 0, 3211, 3212, 5, 777, 0, 0, 3212, 3227, 1, 0, 0, 0, 3213, 3214, 3, 280, 140, 0,
        3214, 3216, 3, 304, 152, 0, 3215, 3217, 3, 356, 178, 0, 3216, 3215, 1, 0, 0, 0, 3216, 3217,
        1, 0, 0, 0, 3217, 3227, 1, 0, 0, 0, 3218, 3219, 3, 280, 140, 0, 3219, 3220, 3, 356, 178, 0, 3220,
        3221, 3, 304, 152, 0, 3221, 3227, 1, 0, 0, 0, 3222, 3223, 4, 139, 26, 0, 3223, 3224, 3, 286,
        143, 0, 3224, 3225, 3, 304, 152, 0, 3225, 3227, 1, 0, 0, 0, 3226, 3209, 1, 0, 0, 0, 3226, 3213,
        1, 0, 0, 0, 3226, 3218, 1, 0, 0, 0, 3226, 3222, 1, 0, 0, 0, 3227, 279, 1, 0, 0, 0, 3228, 3230,
        4, 140, 27, 0, 3229, 3231, 3, 332, 166, 0, 3230, 3229, 1, 0, 0, 0, 3230, 3231, 1, 0, 0, 0, 3231,
        3234, 1, 0, 0, 0, 3232, 3235, 3, 282, 141, 0, 3233, 3235, 3, 286, 143, 0, 3234, 3232, 1, 0,
        0, 0, 3234, 3233, 1, 0, 0, 0, 3235, 3237, 1, 0, 0, 0, 3236, 3238, 3, 340, 170, 0, 3237, 3236,
        1, 0, 0, 0, 3237, 3238, 1, 0, 0, 0, 3238, 3240, 1, 0, 0, 0, 3239, 3241, 3, 296, 148, 0, 3240,
        3239, 1, 0, 0, 0, 3240, 3241, 1, 0, 0, 0, 3241, 3254, 1, 0, 0, 0, 3242, 3244, 4, 140, 28, 0, 3243,
        3245, 3, 332, 166, 0, 3244, 3243, 1, 0, 0, 0, 3244, 3245, 1, 0, 0, 0, 3245, 3246, 1, 0, 0, 0,
        3246, 3248, 3, 284, 142, 0, 3247, 3249, 3, 340, 170, 0, 3248, 3247, 1, 0, 0, 0, 3248, 3249,
        1, 0, 0, 0, 3249, 3251, 1, 0, 0, 0, 3250, 3252, 3, 296, 148, 0, 3251, 3250, 1, 0, 0, 0, 3251,
        3252, 1, 0, 0, 0, 3252, 3254, 1, 0, 0, 0, 3253, 3228, 1, 0, 0, 0, 3253, 3242, 1, 0, 0, 0, 3254,
        281, 1, 0, 0, 0, 3255, 3266, 3, 288, 144, 0, 3256, 3257, 3, 286, 143, 0, 3257, 3259, 5, 608,
        0, 0, 3258, 3260, 3, 410, 205, 0, 3259, 3258, 1, 0, 0, 0, 3259, 3260, 1, 0, 0, 0, 3260, 3263,
        1, 0, 0, 0, 3261, 3264, 3, 288, 144, 0, 3262, 3264, 3, 286, 143, 0, 3263, 3261, 1, 0, 0, 0, 3263,
        3262, 1, 0, 0, 0, 3264, 3266, 1, 0, 0, 0, 3265, 3255, 1, 0, 0, 0, 3265, 3256, 1, 0, 0, 0, 3266,
        3277, 1, 0, 0, 0, 3267, 3269, 5, 608, 0, 0, 3268, 3270, 3, 410, 205, 0, 3269, 3268, 1, 0, 0,
        0, 3269, 3270, 1, 0, 0, 0, 3270, 3273, 1, 0, 0, 0, 3271, 3274, 3, 288, 144, 0, 3272, 3274, 3,
        286, 143, 0, 3273, 3271, 1, 0, 0, 0, 3273, 3272, 1, 0, 0, 0, 3274, 3276, 1, 0, 0, 0, 3275, 3267,
        1, 0, 0, 0, 3276, 3279, 1, 0, 0, 0, 3277, 3275, 1, 0, 0, 0, 3277, 3278, 1, 0, 0, 0, 3278, 283,
        1, 0, 0, 0, 3279, 3277, 1, 0, 0, 0, 3280, 3290, 3, 288, 144, 0, 3281, 3290, 3, 286, 143, 0, 3282,
        3283, 3, 282, 141, 0, 3283, 3285, 7, 28, 0, 0, 3284, 3286, 3, 410, 205, 0, 3285, 3284, 1, 0,
        0, 0, 3285, 3286, 1, 0, 0, 0, 3286, 3287, 1, 0, 0, 0, 3287, 3288, 3, 282, 141, 0, 3288, 3290,
        1, 0, 0, 0, 3289, 3280, 1, 0, 0, 0, 3289, 3281, 1, 0, 0, 0, 3289, 3282, 1, 0, 0, 0, 3290, 285,
        1, 0, 0, 0, 3291, 3294, 5, 776, 0, 0, 3292, 3295, 3, 286, 143, 0, 3293, 3295, 3, 98, 49, 0, 3294,
        3292, 1, 0, 0, 0, 3294, 3293, 1, 0, 0, 0, 3295, 3296, 1, 0, 0, 0, 3296, 3297, 5, 777, 0, 0, 3297,
        287, 1, 0, 0, 0, 3298, 3304, 3, 290, 145, 0, 3299, 3300, 4, 144, 29, 0, 3300, 3304, 3, 348,
        174, 0, 3301, 3302, 4, 144, 30, 0, 3302, 3304, 3, 350, 175, 0, 3303, 3298, 1, 0, 0, 0, 3303,
        3299, 1, 0, 0, 0, 3303, 3301, 1, 0, 0, 0, 3304, 289, 1, 0, 0, 0, 3305, 3309, 5, 497, 0, 0, 3306,
        3308, 3, 354, 177, 0, 3307, 3306, 1, 0, 0, 0, 3308, 3311, 1, 0, 0, 0, 3309, 3307, 1, 0, 0, 0,
        3309, 3310, 1, 0, 0, 0, 3310, 3312, 1, 0, 0, 0, 3311, 3309, 1, 0, 0, 0, 3312, 3314, 3, 364, 182,
        0, 3313, 3315, 3, 304, 152, 0, 3314, 3313, 1, 0, 0, 0, 3314, 3315, 1, 0, 0, 0, 3315, 3317, 1,
        0, 0, 0, 3316, 3318, 3, 344, 172, 0, 3317, 3316, 1, 0, 0, 0, 3317, 3318, 1, 0, 0, 0, 3318, 3320,
        1, 0, 0, 0, 3319, 3321, 3, 370, 185, 0, 3320, 3319, 1, 0, 0, 0, 3320, 3321, 1, 0, 0, 0, 3321,
        3323, 1, 0, 0, 0, 3322, 3324, 3, 336, 168, 0, 3323, 3322, 1, 0, 0, 0, 3323, 3324, 1, 0, 0, 0,
        3324, 3326, 1, 0, 0, 0, 3325, 3327, 3, 308, 154, 0, 3326, 3325, 1, 0, 0, 0, 3326, 3327, 1, 0,
        0, 0, 3327, 3329, 1, 0, 0, 0, 3328, 3330, 3, 310, 155, 0, 3329, 3328, 1, 0, 0, 0, 3329, 3330,
        1, 0, 0, 0, 3330, 291, 1, 0, 0, 0, 3331, 3332, 3, 286, 143, 0, 3332, 293, 1, 0, 0, 0, 3333, 3334,
        7, 29, 0, 0, 3334, 295, 1, 0, 0, 0, 3335, 3336, 5, 276, 0, 0, 3336, 3337, 3, 300, 150, 0, 3337,
        297, 1, 0, 0, 0, 3338, 3339, 5, 276, 0, 0, 3339, 3340, 3, 302, 151, 0, 3340, 299, 1, 0, 0, 0,
        3341, 3344, 3, 302, 151, 0, 3342, 3343, 7, 30, 0, 0, 3343, 3345, 3, 302, 151, 0, 3344, 3342,
        1, 0, 0, 0, 3344, 3345, 1, 0, 0, 0, 3345, 301, 1, 0, 0, 0, 3346, 3349, 3, 1350, 675, 0, 3347,
        3349, 7, 31, 0, 0, 3348, 3346, 1, 0, 0, 0, 3348, 3347, 1, 0, 0, 0, 3349, 303, 1, 0, 0, 0, 3350,
        3378, 5, 248, 0, 0, 3351, 3352, 5, 396, 0, 0, 3352, 3354, 3, 1382, 691, 0, 3353, 3355, 3, 1204,
        602, 0, 3354, 3353, 1, 0, 0, 0, 3354, 3355, 1, 0, 0, 0, 3355, 3357, 1, 0, 0, 0, 3356, 3358, 3,
        1206, 603, 0, 3357, 3356, 1, 0, 0, 0, 3357, 3358, 1, 0, 0, 0, 3358, 3360, 1, 0, 0, 0, 3359, 3361,
        3, 1210, 605, 0, 3360, 3359, 1, 0, 0, 0, 3360, 3361, 1, 0, 0, 0, 3361, 3379, 1, 0, 0, 0, 3362,
        3363, 5, 150, 0, 0, 3363, 3379, 3, 1382, 691, 0, 3364, 3367, 3, 1410, 705, 0, 3365, 3367,
        3, 932, 466, 0, 3366, 3364, 1, 0, 0, 0, 3366, 3365, 1, 0, 0, 0, 3367, 3375, 1, 0, 0, 0, 3368,
        3371, 5, 773, 0, 0, 3369, 3372, 3, 1410, 705, 0, 3370, 3372, 3, 932, 466, 0, 3371, 3369, 1,
        0, 0, 0, 3371, 3370, 1, 0, 0, 0, 3372, 3374, 1, 0, 0, 0, 3373, 3368, 1, 0, 0, 0, 3374, 3377, 1,
        0, 0, 0, 3375, 3373, 1, 0, 0, 0, 3375, 3376, 1, 0, 0, 0, 3376, 3379, 1, 0, 0, 0, 3377, 3375, 1,
        0, 0, 0, 3378, 3351, 1, 0, 0, 0, 3378, 3362, 1, 0, 0, 0, 3378, 3366, 1, 0, 0, 0, 3379, 305, 1,
        0, 0, 0, 3380, 3381, 5, 422, 0, 0, 3381, 3387, 5, 776, 0, 0, 3382, 3385, 5, 747, 0, 0, 3383,
        3384, 5, 773, 0, 0, 3384, 3386, 5, 747, 0, 0, 3385, 3383, 1, 0, 0, 0, 3385, 3386, 1, 0, 0, 0,
        3386, 3388, 1, 0, 0, 0, 3387, 3382, 1, 0, 0, 0, 3387, 3388, 1, 0, 0, 0, 3388, 3389, 1, 0, 0, 0,
        3389, 3390, 5, 777, 0, 0, 3390, 307, 1, 0, 0, 0, 3391, 3392, 5, 221, 0, 0, 3392, 3393, 3, 862,
        431, 0, 3393, 309, 1, 0, 0, 0, 3394, 3395, 5, 699, 0, 0, 3395, 3400, 3, 312, 156, 0, 3396, 3397,
        5, 773, 0, 0, 3397, 3399, 3, 312, 156, 0, 3398, 3396, 1, 0, 0, 0, 3399, 3402, 1, 0, 0, 0, 3400,
        3398, 1, 0, 0, 0, 3400, 3401, 1, 0, 0, 0, 3401, 311, 1, 0, 0, 0, 3402, 3400, 1, 0, 0, 0, 3403,
        3404, 3, 1346, 673, 0, 3404, 3405, 5, 17, 0, 0, 3405, 3406, 3, 314, 157, 0, 3406, 313, 1, 0,
        0, 0, 3407, 3408, 5, 776, 0, 0, 3408, 3409, 3, 316, 158, 0, 3409, 3410, 5, 777, 0, 0, 3410,
        315, 1, 0, 0, 0, 3411, 3413, 3, 1346, 673, 0, 3412, 3411, 1, 0, 0, 0, 3412, 3413, 1, 0, 0, 0,
        3413, 3417, 1, 0, 0, 0, 3414, 3415, 5, 405, 0, 0, 3415, 3416, 5, 45, 0, 0, 3416, 3418, 3, 968,
        484, 0, 3417, 3414, 1, 0, 0, 0, 3417, 3418, 1, 0, 0, 0, 3418, 3420, 1, 0, 0, 0, 3419, 3421, 3,
        340, 170, 0, 3420, 3419, 1, 0, 0, 0, 3420, 3421, 1, 0, 0, 0, 3421, 3423, 1, 0, 0, 0, 3422, 3424,
        3, 318, 159, 0, 3423, 3422, 1, 0, 0, 0, 3423, 3424, 1, 0, 0, 0, 3424, 317, 1, 0, 0, 0, 3425, 3426,
        3, 320, 160, 0, 3426, 3428, 3, 322, 161, 0, 3427, 3429, 3, 330, 165, 0, 3428, 3427, 1, 0, 0,
        0, 3428, 3429, 1, 0, 0, 0, 3429, 319, 1, 0, 0, 0, 3430, 3431, 7, 32, 0, 0, 3431, 321, 1, 0, 0,
        0, 3432, 3435, 3, 324, 162, 0, 3433, 3435, 3, 326, 163, 0, 3434, 3432, 1, 0, 0, 0, 3434, 3433,
        1, 0, 0, 0, 3435, 323, 1, 0, 0, 0, 3436, 3437, 5, 698, 0, 0, 3437, 3451, 5, 693, 0, 0, 3438, 3439,
        3, 1366, 683, 0, 3439, 3440, 5, 693, 0, 0, 3440, 3451, 1, 0, 0, 0, 3441, 3442, 5, 787, 0, 0,
        3442, 3451, 5, 693, 0, 0, 3443, 3444, 5, 247, 0, 0, 3444, 3445, 3, 862, 431, 0, 3445, 3446,
        3, 958, 479, 0, 3446, 3447, 5, 693, 0, 0, 3447, 3451, 1, 0, 0, 0, 3448, 3449, 5, 101, 0, 0, 3449,
        3451, 5, 487, 0, 0, 3450, 3436, 1, 0, 0, 0, 3450, 3438, 1, 0, 0, 0, 3450, 3441, 1, 0, 0, 0, 3450,
        3443, 1, 0, 0, 0, 3450, 3448, 1, 0, 0, 0, 3451, 325, 1, 0, 0, 0, 3452, 3453, 5, 30, 0, 0, 3453,
        3454, 3, 328, 164, 0, 3454, 3455, 5, 15, 0, 0, 3455, 3456, 3, 328, 164, 0, 3456, 327, 1, 0,
        0, 0, 3457, 3471, 3, 324, 162, 0, 3458, 3459, 5, 698, 0, 0, 3459, 3471, 5, 682, 0, 0, 3460,
        3461, 3, 1366, 683, 0, 3461, 3462, 5, 682, 0, 0, 3462, 3471, 1, 0, 0, 0, 3463, 3464, 5, 787,
        0, 0, 3464, 3471, 5, 682, 0, 0, 3465, 3466, 5, 247, 0, 0, 3466, 3467, 3, 862, 431, 0, 3467,
        3468, 3, 958, 479, 0, 3468, 3469, 5, 682, 0, 0, 3469, 3471, 1, 0, 0, 0, 3470, 3457, 1, 0, 0,
        0, 3470, 3458, 1, 0, 0, 0, 3470, 3460, 1, 0, 0, 0, 3470, 3463, 1, 0, 0, 0, 3470, 3465, 1, 0, 0,
        0, 3471, 329, 1, 0, 0, 0, 3472, 3479, 5, 680, 0, 0, 3473, 3474, 5, 101, 0, 0, 3474, 3480, 5,
        487, 0, 0, 3475, 3480, 5, 217, 0, 0, 3476, 3480, 5, 697, 0, 0, 3477, 3478, 5, 373, 0, 0, 3478,
        3480, 5, 690, 0, 0, 3479, 3473, 1, 0, 0, 0, 3479, 3475, 1, 0, 0, 0, 3479, 3476, 1, 0, 0, 0, 3479,
        3477, 1, 0, 0, 0, 3480, 331, 1, 0, 0, 0, 3481, 3483, 5, 645, 0, 0, 3482, 3484, 5, 665, 0, 0, 3483,
        3482, 1, 0, 0, 0, 3483, 3484, 1, 0, 0, 0, 3484, 3485, 1, 0, 0, 0, 3485, 3490, 3, 334, 167, 0,
        3486, 3487, 5, 773, 0, 0, 3487, 3489, 3, 334, 167, 0, 3488, 3486, 1, 0, 0, 0, 3489, 3492, 1,
        0, 0, 0, 3490, 3488, 1, 0, 0, 0, 3490, 3491, 1, 0, 0, 0, 3491, 333, 1, 0, 0, 0, 3492, 3490, 1,
        0, 0, 0, 3493, 3495, 3, 1350, 675, 0, 3494, 3496, 3, 1268, 634, 0, 3495, 3494, 1, 0, 0, 0, 3495,
        3496, 1, 0, 0, 0, 3496, 3497, 1, 0, 0, 0, 3497, 3498, 5, 17, 0, 0, 3498, 3499, 3, 292, 146, 0,
        3499, 335, 1, 0, 0, 0, 3500, 3501, 5, 217, 0, 0, 3501, 3502, 5, 45, 0, 0, 3502, 3504, 3, 968,
        484, 0, 3503, 3505, 3, 338, 169, 0, 3504, 3503, 1, 0, 0, 0, 3504, 3505, 1, 0, 0, 0, 3505, 337,
        1, 0, 0, 0, 3506, 3507, 5, 645, 0, 0, 3507, 3508, 5, 481, 0, 0, 3508, 339, 1, 0, 0, 0, 3509, 3510,
        5, 393, 0, 0, 3510, 3511, 5, 45, 0, 0, 3511, 3512, 3, 968, 484, 0, 3512, 341, 1, 0, 0, 0, 3513,
        3514, 7, 33, 0, 0, 3514, 343, 1, 0, 0, 0, 3515, 3518, 5, 203, 0, 0, 3516, 3519, 5, 149, 0, 0,
        3517, 3519, 3, 346, 173, 0, 3518, 3516, 1, 0, 0, 0, 3518, 3517, 1, 0, 0, 0, 3519, 345, 1, 0,
        0, 0, 3520, 3525, 3, 372, 186, 0, 3521, 3522, 5, 773, 0, 0, 3522, 3524, 3, 372, 186, 0, 3523,
        3521, 1, 0, 0, 0, 3524, 3527, 1, 0, 0, 0, 3525, 3523, 1, 0, 0, 0, 3525, 3526, 1, 0, 0, 0, 3526,
        347, 1, 0, 0, 0, 3527, 3525, 1, 0, 0, 0, 3528, 3529, 5, 626, 0, 0, 3529, 3534, 3, 352, 176, 0,
        3530, 3531, 5, 773, 0, 0, 3531, 3533, 3, 352, 176, 0, 3532, 3530, 1, 0, 0, 0, 3533, 3536, 1,
        0, 0, 0, 3534, 3532, 1, 0, 0, 0, 3534, 3535, 1, 0, 0, 0, 3535, 349, 1, 0, 0, 0, 3536, 3534, 1,
        0, 0, 0, 3537, 3538, 5, 574, 0, 0, 3538, 3539, 3, 1326, 663, 0, 3539, 351, 1, 0, 0, 0, 3540,
        3541, 5, 487, 0, 0, 3541, 3543, 5, 776, 0, 0, 3542, 3544, 3, 256, 128, 0, 3543, 3542, 1, 0,
        0, 0, 3543, 3544, 1, 0, 0, 0, 3544, 3545, 1, 0, 0, 0, 3545, 3546, 5, 777, 0, 0, 3546, 353, 1,
        0, 0, 0, 3547, 3550, 3, 294, 147, 0, 3548, 3550, 5, 535, 0, 0, 3549, 3547, 1, 0, 0, 0, 3549,
        3548, 1, 0, 0, 0, 3550, 355, 1, 0, 0, 0, 3551, 3553, 3, 358, 179, 0, 3552, 3551, 1, 0, 0, 0, 3553,
        3554, 1, 0, 0, 0, 3554, 3552, 1, 0, 0, 0, 3554, 3555, 1, 0, 0, 0, 3555, 357, 1, 0, 0, 0, 3556,
        3557, 5, 200, 0, 0, 3557, 3560, 3, 360, 180, 0, 3558, 3559, 5, 668, 0, 0, 3559, 3561, 3, 1330,
        665, 0, 3560, 3558, 1, 0, 0, 0, 3560, 3561, 1, 0, 0, 0, 3561, 3563, 1, 0, 0, 0, 3562, 3564, 3,
        362, 181, 0, 3563, 3562, 1, 0, 0, 0, 3563, 3564, 1, 0, 0, 0, 3564, 3570, 1, 0, 0, 0, 3565, 3566,
        5, 287, 0, 0, 3566, 3567, 5, 251, 0, 0, 3567, 3568, 5, 508, 0, 0, 3568, 3570, 5, 346, 0, 0, 3569,
        3556, 1, 0, 0, 0, 3569, 3565, 1, 0, 0, 0, 3570, 359, 1, 0, 0, 0, 3571, 3572, 7, 34, 0, 0, 3572,
        361, 1, 0, 0, 0, 3573, 3574, 5, 669, 0, 0, 3574, 3577, 5, 670, 0, 0, 3575, 3577, 5, 671, 0, 0,
        3576, 3573, 1, 0, 0, 0, 3576, 3575, 1, 0, 0, 0, 3577, 363, 1, 0, 0, 0, 3578, 3581, 3, 366, 183,
        0, 3579, 3581, 5, 760, 0, 0, 3580, 3578, 1, 0, 0, 0, 3580, 3579, 1, 0, 0, 0, 3581, 3586, 1, 0,
        0, 0, 3582, 3583, 5, 773, 0, 0, 3583, 3585, 3, 366, 183, 0, 3584, 3582, 1, 0, 0, 0, 3585, 3588,
        1, 0, 0, 0, 3586, 3584, 1, 0, 0, 0, 3586, 3587, 1, 0, 0, 0, 3587, 365, 1, 0, 0, 0, 3588, 3586,
        1, 0, 0, 0, 3589, 3595, 3, 1278, 639, 0, 3590, 3592, 3, 862, 431, 0, 3591, 3593, 3, 368, 184,
        0, 3592, 3591, 1, 0, 0, 0, 3592, 3593, 1, 0, 0, 0, 3593, 3595, 1, 0, 0, 0, 3594, 3589, 1, 0, 0,
        0, 3594, 3590, 1, 0, 0, 0, 3595, 367, 1, 0, 0, 0, 3596, 3598, 5, 17, 0, 0, 3597, 3596, 1, 0, 0,
        0, 3597, 3598, 1, 0, 0, 0, 3598, 3601, 1, 0, 0, 0, 3599, 3602, 3, 1350, 675, 0, 3600, 3602,
        3, 1382, 691, 0, 3601, 3599, 1, 0, 0, 0, 3601, 3600, 1, 0, 0, 0, 3602, 369, 1, 0, 0, 0, 3603,
        3604, 5, 643, 0, 0, 3604, 3605, 3, 862, 431, 0, 3605, 371, 1, 0, 0, 0, 3606, 3617, 3, 384, 192,
        0, 3607, 3611, 5, 778, 0, 0, 3608, 3609, 4, 186, 31, 0, 3609, 3612, 3, 1350, 675, 0, 3610,
        3612, 5, 732, 0, 0, 3611, 3608, 1, 0, 0, 0, 3611, 3610, 1, 0, 0, 0, 3612, 3613, 1, 0, 0, 0, 3613,
        3614, 3, 374, 187, 0, 3614, 3615, 5, 779, 0, 0, 3615, 3617, 1, 0, 0, 0, 3616, 3606, 1, 0, 0,
        0, 3616, 3607, 1, 0, 0, 0, 3617, 3621, 1, 0, 0, 0, 3618, 3620, 3, 376, 188, 0, 3619, 3618, 1,
        0, 0, 0, 3620, 3623, 1, 0, 0, 0, 3621, 3619, 1, 0, 0, 0, 3621, 3622, 1, 0, 0, 0, 3622, 373, 1,
        0, 0, 0, 3623, 3621, 1, 0, 0, 0, 3624, 3628, 3, 384, 192, 0, 3625, 3627, 3, 376, 188, 0, 3626,
        3625, 1, 0, 0, 0, 3627, 3630, 1, 0, 0, 0, 3628, 3626, 1, 0, 0, 0, 3628, 3629, 1, 0, 0, 0, 3629,
        375, 1, 0, 0, 0, 3630, 3628, 1, 0, 0, 0, 3631, 3632, 3, 380, 190, 0, 3632, 3637, 3, 372, 186,
        0, 3633, 3634, 5, 383, 0, 0, 3634, 3638, 3, 862, 431, 0, 3635, 3636, 5, 621, 0, 0, 3636, 3638,
        3, 1354, 677, 0, 3637, 3633, 1, 0, 0, 0, 3637, 3635, 1, 0, 0, 0, 3637, 3638, 1, 0, 0, 0, 3638,
        3651, 1, 0, 0, 0, 3639, 3640, 3, 382, 191, 0, 3640, 3645, 3, 372, 186, 0, 3641, 3642, 5, 383,
        0, 0, 3642, 3646, 3, 862, 431, 0, 3643, 3644, 5, 621, 0, 0, 3644, 3646, 3, 1354, 677, 0, 3645,
        3641, 1, 0, 0, 0, 3645, 3643, 1, 0, 0, 0, 3646, 3651, 1, 0, 0, 0, 3647, 3648, 3, 378, 189, 0,
        3648, 3649, 3, 384, 192, 0, 3649, 3651, 1, 0, 0, 0, 3650, 3631, 1, 0, 0, 0, 3650, 3639, 1, 0,
        0, 0, 3650, 3647, 1, 0, 0, 0, 3651, 377, 1, 0, 0, 0, 3652, 3654, 5, 359, 0, 0, 3653, 3655, 5,
        239, 0, 0, 3654, 3653, 1, 0, 0, 0, 3654, 3655, 1, 0, 0, 0, 3655, 3656, 1, 0, 0, 0, 3656, 3664,
        5, 261, 0, 0, 3657, 3658, 5, 359, 0, 0, 3658, 3660, 7, 35, 0, 0, 3659, 3661, 5, 395, 0, 0, 3660,
        3659, 1, 0, 0, 0, 3660, 3661, 1, 0, 0, 0, 3661, 3662, 1, 0, 0, 0, 3662, 3664, 5, 261, 0, 0, 3663,
        3652, 1, 0, 0, 0, 3663, 3657, 1, 0, 0, 0, 3664, 379, 1, 0, 0, 0, 3665, 3667, 7, 36, 0, 0, 3666,
        3665, 1, 0, 0, 0, 3666, 3667, 1, 0, 0, 0, 3667, 3668, 1, 0, 0, 0, 3668, 3671, 5, 261, 0, 0, 3669,
        3671, 5, 555, 0, 0, 3670, 3666, 1, 0, 0, 0, 3670, 3669, 1, 0, 0, 0, 3671, 381, 1, 0, 0, 0, 3672,
        3674, 7, 35, 0, 0, 3673, 3675, 5, 395, 0, 0, 3674, 3673, 1, 0, 0, 0, 3674, 3675, 1, 0, 0, 0, 3675,
        3676, 1, 0, 0, 0, 3676, 3677, 5, 261, 0, 0, 3677, 383, 1, 0, 0, 0, 3678, 3685, 3, 386, 193, 0,
        3679, 3685, 3, 388, 194, 0, 3680, 3685, 3, 390, 195, 0, 3681, 3685, 3, 392, 196, 0, 3682,
        3683, 4, 192, 32, 0, 3683, 3685, 3, 394, 197, 0, 3684, 3678, 1, 0, 0, 0, 3684, 3679, 1, 0, 0,
        0, 3684, 3680, 1, 0, 0, 0, 3684, 3681, 1, 0, 0, 0, 3684, 3682, 1, 0, 0, 0, 3685, 385, 1, 0, 0,
        0, 3686, 3688, 3, 1326, 663, 0, 3687, 3689, 3, 1260, 630, 0, 3688, 3687, 1, 0, 0, 0, 3688,
        3689, 1, 0, 0, 0, 3689, 3691, 1, 0, 0, 0, 3690, 3692, 3, 412, 206, 0, 3691, 3690, 1, 0, 0, 0,
        3691, 3692, 1, 0, 0, 0, 3692, 3694, 1, 0, 0, 0, 3693, 3695, 3, 414, 207, 0, 3694, 3693, 1, 0,
        0, 0, 3694, 3695, 1, 0, 0, 0, 3695, 387, 1, 0, 0, 0, 3696, 3699, 5, 776, 0, 0, 3697, 3700, 3,
        386, 193, 0, 3698, 3700, 3, 388, 194, 0, 3699, 3697, 1, 0, 0, 0, 3699, 3698, 1, 0, 0, 0, 3700,
        3701, 1, 0, 0, 0, 3701, 3702, 5, 777, 0, 0, 3702, 389, 1, 0, 0, 0, 3703, 3705, 3, 292, 146, 0,
        3704, 3706, 3, 412, 206, 0, 3705, 3704, 1, 0, 0, 0, 3705, 3706, 1, 0, 0, 0, 3706, 3708, 1, 0,
        0, 0, 3707, 3709, 3, 1268, 634, 0, 3708, 3707, 1, 0, 0, 0, 3708, 3709, 1, 0, 0, 0, 3709, 3720,
        1, 0, 0, 0, 3710, 3711, 4, 195, 33, 0, 3711, 3712, 5, 726, 0, 0, 3712, 3714, 3, 292, 146, 0,
        3713, 3715, 3, 412, 206, 0, 3714, 3713, 1, 0, 0, 0, 3714, 3715, 1, 0, 0, 0, 3715, 3717, 1, 0,
        0, 0, 3716, 3718, 3, 1268, 634, 0, 3717, 3716, 1, 0, 0, 0, 3717, 3718, 1, 0, 0, 0, 3718, 3720,
        1, 0, 0, 0, 3719, 3703, 1, 0, 0, 0, 3719, 3710, 1, 0, 0, 0, 3720, 391, 1, 0, 0, 0, 3721, 3724,
        5, 776, 0, 0, 3722, 3725, 3, 346, 173, 0, 3723, 3725, 3, 392, 196, 0, 3724, 3722, 1, 0, 0, 0,
        3724, 3723, 1, 0, 0, 0, 3725, 3726, 1, 0, 0, 0, 3726, 3727, 5, 777, 0, 0, 3727, 393, 1, 0, 0,
        0, 3728, 3729, 5, 701, 0, 0, 3729, 3730, 5, 776, 0, 0, 3730, 3731, 3, 862, 431, 0, 3731, 3732,
        5, 773, 0, 0, 3732, 3733, 3, 1382, 691, 0, 3733, 3734, 3, 396, 198, 0, 3734, 3736, 5, 777,
        0, 0, 3735, 3737, 3, 412, 206, 0, 3736, 3735, 1, 0, 0, 0, 3736, 3737, 1, 0, 0, 0, 3737, 395,
        1, 0, 0, 0, 3738, 3739, 5, 71, 0, 0, 3739, 3740, 5, 776, 0, 0, 3740, 3745, 3, 398, 199, 0, 3741,
        3742, 5, 773, 0, 0, 3742, 3744, 3, 398, 199, 0, 3743, 3741, 1, 0, 0, 0, 3744, 3747, 1, 0, 0,
        0, 3745, 3743, 1, 0, 0, 0, 3745, 3746, 1, 0, 0, 0, 3746, 3748, 1, 0, 0, 0, 3747, 3745, 1, 0, 0,
        0, 3748, 3749, 5, 777, 0, 0, 3749, 397, 1, 0, 0, 0, 3750, 3751, 3, 1350, 675, 0, 3751, 3752,
        5, 200, 0, 0, 3752, 3753, 5, 703, 0, 0, 3753, 3774, 1, 0, 0, 0, 3754, 3755, 3, 1350, 675, 0,
        3755, 3758, 3, 1114, 557, 0, 3756, 3757, 4, 199, 34, 0, 3757, 3759, 3, 1192, 596, 0, 3758,
        3756, 1, 0, 0, 0, 3758, 3759, 1, 0, 0, 0, 3759, 3761, 1, 0, 0, 0, 3760, 3762, 5, 174, 0, 0, 3761,
        3760, 1, 0, 0, 0, 3761, 3762, 1, 0, 0, 0, 3762, 3763, 1, 0, 0, 0, 3763, 3764, 5, 704, 0, 0, 3764,
        3766, 3, 1382, 691, 0, 3765, 3767, 3, 402, 201, 0, 3766, 3765, 1, 0, 0, 0, 3766, 3767, 1, 0,
        0, 0, 3767, 3774, 1, 0, 0, 0, 3768, 3769, 5, 702, 0, 0, 3769, 3770, 5, 704, 0, 0, 3770, 3771,
        3, 1382, 691, 0, 3771, 3772, 3, 396, 198, 0, 3772, 3774, 1, 0, 0, 0, 3773, 3750, 1, 0, 0, 0,
        3773, 3754, 1, 0, 0, 0, 3773, 3768, 1, 0, 0, 0, 3774, 399, 1, 0, 0, 0, 3775, 3777, 3, 404, 202,
        0, 3776, 3778, 3, 406, 203, 0, 3777, 3776, 1, 0, 0, 0, 3777, 3778, 1, 0, 0, 0, 3778, 3781, 1,
        0, 0, 0, 3779, 3781, 3, 406, 203, 0, 3780, 3775, 1, 0, 0, 0, 3780, 3779, 1, 0, 0, 0, 3781, 401,
        1, 0, 0, 0, 3782, 3787, 3, 400, 200, 0, 3783, 3784, 3, 406, 203, 0, 3784, 3785, 3, 404, 202,
        0, 3785, 3787, 1, 0, 0, 0, 3786, 3782, 1, 0, 0, 0, 3786, 3783, 1, 0, 0, 0, 3787, 403, 1, 0, 0,
        0, 3788, 3789, 3, 408, 204, 0, 3789, 3790, 5, 383, 0, 0, 3790, 3791, 5, 700, 0, 0, 3791, 405,
        1, 0, 0, 0, 3792, 3793, 3, 408, 204, 0, 3793, 3794, 5, 383, 0, 0, 3794, 3795, 5, 165, 0, 0, 3795,
        407, 1, 0, 0, 0, 3796, 3801, 5, 165, 0, 0, 3797, 3801, 5, 376, 0, 0, 3798, 3799, 5, 128, 0, 0,
        3799, 3801, 3, 1382, 691, 0, 3800, 3796, 1, 0, 0, 0, 3800, 3797, 1, 0, 0, 0, 3800, 3798, 1,
        0, 0, 0, 3801, 409, 1, 0, 0, 0, 3802, 3803, 7, 37, 0, 0, 3803, 411, 1, 0, 0, 0, 3804, 3808, 5,
        17, 0, 0, 3805, 3806, 4, 206, 35, 0, 3806, 3808, 5, 750, 0, 0, 3807, 3804, 1, 0, 0, 0, 3807,
        3805, 1, 0, 0, 0, 3807, 3808, 1, 0, 0, 0, 3808, 3809, 1, 0, 0, 0, 3809, 3810, 3, 1350, 675, 0,
        3810, 413, 1, 0, 0, 0, 3811, 3816, 3, 416, 208, 0, 3812, 3813, 5, 773, 0, 0, 3813, 3815, 3,
        416, 208, 0, 3814, 3812, 1, 0, 0, 0, 3815, 3818, 1, 0, 0, 0, 3816, 3814, 1, 0, 0, 0, 3816, 3817,
        1, 0, 0, 0, 3817, 415, 1, 0, 0, 0, 3818, 3816, 1, 0, 0, 0, 3819, 3820, 3, 418, 209, 0, 3820, 3822,
        3, 420, 210, 0, 3821, 3823, 3, 424, 212, 0, 3822, 3821, 1, 0, 0, 0, 3822, 3823, 1, 0, 0, 0, 3823,
        3824, 1, 0, 0, 0, 3824, 3825, 5, 776, 0, 0, 3825, 3826, 3, 426, 213, 0, 3826, 3827, 5, 777,
        0, 0, 3827, 3840, 1, 0, 0, 0, 3828, 3829, 5, 620, 0, 0, 3829, 3831, 3, 420, 210, 0, 3830, 3832,
        3, 424, 212, 0, 3831, 3830, 1, 0, 0, 0, 3831, 3832, 1, 0, 0, 0, 3832, 3833, 1, 0, 0, 0, 3833,
        3835, 5, 776, 0, 0, 3834, 3836, 3, 426, 213, 0, 3835, 3834, 1, 0, 0, 0, 3835, 3836, 1, 0, 0,
        0, 3836, 3837, 1, 0, 0, 0, 3837, 3838, 5, 777, 0, 0, 3838, 3840, 1, 0, 0, 0, 3839, 3819, 1, 0,
        0, 0, 3839, 3828, 1, 0, 0, 0, 3840, 417, 1, 0, 0, 0, 3841, 3842, 7, 38, 0, 0, 3842, 419, 1, 0,
        0, 0, 3843, 3844, 7, 39, 0, 0, 3844, 421, 1, 0, 0, 0, 3845, 3846, 5, 420, 0, 0, 3846, 3852, 5,
        265, 0, 0, 3847, 3849, 5, 609, 0, 0, 3848, 3850, 3, 420, 210, 0, 3849, 3848, 1, 0, 0, 0, 3849,
        3850, 1, 0, 0, 0, 3850, 3852, 1, 0, 0, 0, 3851, 3845, 1, 0, 0, 0, 3851, 3847, 1, 0, 0, 0, 3852,
        423, 1, 0, 0, 0, 3853, 3859, 5, 200, 0, 0, 3854, 3860, 5, 261, 0, 0, 3855, 3856, 5, 393, 0, 0,
        3856, 3860, 5, 45, 0, 0, 3857, 3858, 5, 217, 0, 0, 3858, 3860, 5, 45, 0, 0, 3859, 3854, 1, 0,
        0, 0, 3859, 3855, 1, 0, 0, 0, 3859, 3857, 1, 0, 0, 0, 3860, 425, 1, 0, 0, 0, 3861, 3866, 3, 428,
        214, 0, 3862, 3863, 5, 773, 0, 0, 3863, 3865, 3, 428, 214, 0, 3864, 3862, 1, 0, 0, 0, 3865,
        3868, 1, 0, 0, 0, 3866, 3864, 1, 0, 0, 0, 3866, 3867, 1, 0, 0, 0, 3867, 427, 1, 0, 0, 0, 3868,
        3866, 1, 0, 0, 0, 3869, 3872, 3, 1350, 675, 0, 3870, 3872, 5, 420, 0, 0, 3871, 3869, 1, 0, 0,
        0, 3871, 3870, 1, 0, 0, 0, 3872, 429, 1, 0, 0, 0, 3873, 3875, 3, 332, 166, 0, 3874, 3873, 1,
        0, 0, 0, 3874, 3875, 1, 0, 0, 0, 3875, 3876, 1, 0, 0, 0, 3876, 3878, 5, 614, 0, 0, 3877, 3879,
        5, 295, 0, 0, 3878, 3877, 1, 0, 0, 0, 3878, 3879, 1, 0, 0, 0, 3879, 3881, 1, 0, 0, 0, 3880, 3882,
        5, 232, 0, 0, 3881, 3880, 1, 0, 0, 0, 3881, 3882, 1, 0, 0, 0, 3882, 3883, 1, 0, 0, 0, 3883, 3884,
        3, 346, 173, 0, 3884, 3885, 5, 506, 0, 0, 3885, 3887, 3, 1200, 600, 0, 3886, 3888, 3, 370,
        185, 0, 3887, 3886, 1, 0, 0, 0, 3887, 3888, 1, 0, 0, 0, 3888, 3890, 1, 0, 0, 0, 3889, 3891, 3,
        340, 170, 0, 3890, 3889, 1, 0, 0, 0, 3890, 3891, 1, 0, 0, 0, 3891, 3893, 1, 0, 0, 0, 3892, 3894,
        3, 298, 149, 0, 3893, 3892, 1, 0, 0, 0, 3893, 3894, 1, 0, 0, 0, 3894, 431, 1, 0, 0, 0, 3895, 3900,
        3, 434, 217, 0, 3896, 3900, 3, 440, 220, 0, 3897, 3900, 3, 442, 221, 0, 3898, 3900, 3, 448,
        224, 0, 3899, 3895, 1, 0, 0, 0, 3899, 3896, 1, 0, 0, 0, 3899, 3897, 1, 0, 0, 0, 3899, 3898, 1,
        0, 0, 0, 3900, 433, 1, 0, 0, 0, 3901, 3902, 5, 543, 0, 0, 3902, 3906, 5, 592, 0, 0, 3903, 3905,
        3, 438, 219, 0, 3904, 3903, 1, 0, 0, 0, 3905, 3908, 1, 0, 0, 0, 3906, 3904, 1, 0, 0, 0, 3906,
        3907, 1, 0, 0, 0, 3907, 3927, 1, 0, 0, 0, 3908, 3906, 1, 0, 0, 0, 3909, 3911, 5, 77, 0, 0, 3910,
        3912, 5, 647, 0, 0, 3911, 3910, 1, 0, 0, 0, 3911, 3912, 1, 0, 0, 0, 3912, 3918, 1, 0, 0, 0, 3913,
        3915, 5, 15, 0, 0, 3914, 3916, 5, 373, 0, 0, 3915, 3914, 1, 0, 0, 0, 3915, 3916, 1, 0, 0, 0, 3916,
        3917, 1, 0, 0, 0, 3917, 3919, 5, 54, 0, 0, 3918, 3913, 1, 0, 0, 0, 3918, 3919, 1, 0, 0, 0, 3919,
        3924, 1, 0, 0, 0, 3920, 3922, 5, 373, 0, 0, 3921, 3920, 1, 0, 0, 0, 3921, 3922, 1, 0, 0, 0, 3922,
        3923, 1, 0, 0, 0, 3923, 3925, 5, 450, 0, 0, 3924, 3921, 1, 0, 0, 0, 3924, 3925, 1, 0, 0, 0, 3925,
        3927, 1, 0, 0, 0, 3926, 3901, 1, 0, 0, 0, 3926, 3909, 1, 0, 0, 0, 3927, 435, 1, 0, 0, 0, 3928,
        3930, 5, 29, 0, 0, 3929, 3931, 5, 647, 0, 0, 3930, 3929, 1, 0, 0, 0, 3930, 3931, 1, 0, 0, 0, 3931,
        437, 1, 0, 0, 0, 3932, 3933, 5, 645, 0, 0, 3933, 3934, 5, 85, 0, 0, 3934, 3938, 5, 517, 0, 0,
        3935, 3936, 5, 435, 0, 0, 3936, 3938, 7, 40, 0, 0, 3937, 3932, 1, 0, 0, 0, 3937, 3935, 1, 0,
        0, 0, 3938, 439, 1, 0, 0, 0, 3939, 3940, 5, 489, 0, 0, 3940, 3969, 3, 1350, 675, 0, 3941, 3943,
        5, 480, 0, 0, 3942, 3944, 5, 647, 0, 0, 3943, 3942, 1, 0, 0, 0, 3943, 3944, 1, 0, 0, 0, 3944,
        3963, 1, 0, 0, 0, 3945, 3947, 5, 590, 0, 0, 3946, 3948, 5, 489, 0, 0, 3947, 3946, 1, 0, 0, 0,
        3947, 3948, 1, 0, 0, 0, 3948, 3949, 1, 0, 0, 0, 3949, 3964, 3, 1350, 675, 0, 3950, 3952, 5,
        15, 0, 0, 3951, 3953, 5, 373, 0, 0, 3952, 3951, 1, 0, 0, 0, 3952, 3953, 1, 0, 0, 0, 3953, 3954,
        1, 0, 0, 0, 3954, 3956, 5, 54, 0, 0, 3955, 3950, 1, 0, 0, 0, 3955, 3956, 1, 0, 0, 0, 3956, 3961,
        1, 0, 0, 0, 3957, 3959, 5, 373, 0, 0, 3958, 3957, 1, 0, 0, 0, 3958, 3959, 1, 0, 0, 0, 3959, 3960,
        1, 0, 0, 0, 3960, 3962, 5, 450, 0, 0, 3961, 3958, 1, 0, 0, 0, 3961, 3962, 1, 0, 0, 0, 3962, 3964,
        1, 0, 0, 0, 3963, 3945, 1, 0, 0, 0, 3963, 3955, 1, 0, 0, 0, 3964, 3969, 1, 0, 0, 0, 3965, 3966,
        5, 450, 0, 0, 3966, 3967, 5, 489, 0, 0, 3967, 3969, 3, 1350, 675, 0, 3968, 3939, 1, 0, 0, 0,
        3968, 3941, 1, 0, 0, 0, 3968, 3965, 1, 0, 0, 0, 3969, 441, 1, 0, 0, 0, 3970, 3971, 5, 287, 0,
        0, 3971, 3972, 7, 17, 0, 0, 3972, 3977, 3, 444, 222, 0, 3973, 3974, 5, 773, 0, 0, 3974, 3976,
        3, 444, 222, 0, 3975, 3973, 1, 0, 0, 0, 3976, 3979, 1, 0, 0, 0, 3977, 3975, 1, 0, 0, 0, 3977,
        3978, 1, 0, 0, 0, 3978, 3987, 1, 0, 0, 0, 3979, 3977, 1, 0, 0, 0, 3980, 3981, 5, 287, 0, 0, 3981,
        3982, 5, 244, 0, 0, 3982, 3983, 5, 200, 0, 0, 3983, 3987, 5, 27, 0, 0, 3984, 3985, 5, 611, 0,
        0, 3985, 3987, 7, 41, 0, 0, 3986, 3970, 1, 0, 0, 0, 3986, 3980, 1, 0, 0, 0, 3986, 3984, 1, 0,
        0, 0, 3987, 443, 1, 0, 0, 0, 3988, 3990, 3, 1326, 663, 0, 3989, 3991, 3, 412, 206, 0, 3990,
        3989, 1, 0, 0, 0, 3990, 3991, 1, 0, 0, 0, 3991, 3992, 1, 0, 0, 0, 3992, 3993, 3, 446, 223, 0,
        3993, 445, 1, 0, 0, 0, 3994, 3996, 5, 435, 0, 0, 3995, 3997, 5, 284, 0, 0, 3996, 3995, 1, 0,
        0, 0, 3996, 3997, 1, 0, 0, 0, 3997, 4003, 1, 0, 0, 0, 3998, 4000, 5, 295, 0, 0, 3999, 3998, 1,
        0, 0, 0, 3999, 4000, 1, 0, 0, 0, 4000, 4001, 1, 0, 0, 0, 4001, 4003, 5, 649, 0, 0, 4002, 3994,
        1, 0, 0, 0, 4002, 3999, 1, 0, 0, 0, 4003, 447, 1, 0, 0, 0, 4004, 4033, 5, 651, 0, 0, 4005, 4006,
        7, 42, 0, 0, 4006, 4008, 3, 452, 226, 0, 4007, 4009, 7, 43, 0, 0, 4008, 4007, 1, 0, 0, 0, 4008,
        4009, 1, 0, 0, 0, 4009, 4034, 1, 0, 0, 0, 4010, 4011, 5, 159, 0, 0, 4011, 4017, 3, 452, 226,
        0, 4012, 4015, 5, 566, 0, 0, 4013, 4014, 5, 200, 0, 0, 4014, 4016, 5, 340, 0, 0, 4015, 4013,
        1, 0, 0, 0, 4015, 4016, 1, 0, 0, 0, 4016, 4018, 1, 0, 0, 0, 4017, 4012, 1, 0, 0, 0, 4017, 4018,
        1, 0, 0, 0, 4018, 4034, 1, 0, 0, 0, 4019, 4020, 5, 417, 0, 0, 4020, 4034, 3, 452, 226, 0, 4021,
        4022, 5, 77, 0, 0, 4022, 4025, 3, 452, 226, 0, 4023, 4024, 5, 384, 0, 0, 4024, 4026, 5, 407,
        0, 0, 4025, 4023, 1, 0, 0, 0, 4025, 4026, 1, 0, 0, 0, 4026, 4034, 1, 0, 0, 0, 4027, 4028, 5, 480,
        0, 0, 4028, 4034, 3, 452, 226, 0, 4029, 4031, 5, 439, 0, 0, 4030, 4032, 3, 450, 225, 0, 4031,
        4030, 1, 0, 0, 0, 4031, 4032, 1, 0, 0, 0, 4032, 4034, 1, 0, 0, 0, 4033, 4005, 1, 0, 0, 0, 4033,
        4010, 1, 0, 0, 0, 4033, 4019, 1, 0, 0, 0, 4033, 4021, 1, 0, 0, 0, 4033, 4027, 1, 0, 0, 0, 4033,
        4029, 1, 0, 0, 0, 4034, 449, 1, 0, 0, 0, 4035, 4036, 5, 94, 0, 0, 4036, 4037, 5, 652, 0, 0, 4037,
        451, 1, 0, 0, 0, 4038, 4045, 3, 1384, 692, 0, 4039, 4040, 5, 773, 0, 0, 4040, 4043, 3, 1384,
        692, 0, 4041, 4042, 5, 773, 0, 0, 4042, 4044, 3, 1362, 681, 0, 4043, 4041, 1, 0, 0, 0, 4043,
        4044, 1, 0, 0, 0, 4044, 4046, 1, 0, 0, 0, 4045, 4039, 1, 0, 0, 0, 4045, 4046, 1, 0, 0, 0, 4046,
        453, 1, 0, 0, 0, 4047, 4048, 5, 428, 0, 0, 4048, 4049, 7, 44, 0, 0, 4049, 4054, 5, 289, 0, 0,
        4050, 4051, 5, 590, 0, 0, 4051, 4055, 3, 1388, 694, 0, 4052, 4053, 5, 28, 0, 0, 4053, 4055,
        3, 862, 431, 0, 4054, 4050, 1, 0, 0, 0, 4054, 4052, 1, 0, 0, 0, 4055, 4079, 1, 0, 0, 0, 4056,
        4079, 3, 464, 232, 0, 4057, 4058, 5, 468, 0, 0, 4058, 4063, 3, 456, 228, 0, 4059, 4060, 5,
        773, 0, 0, 4060, 4062, 3, 456, 228, 0, 4061, 4059, 1, 0, 0, 0, 4062, 4065, 1, 0, 0, 0, 4063,
        4061, 1, 0, 0, 0, 4063, 4064, 1, 0, 0, 0, 4064, 4079, 1, 0, 0, 0, 4065, 4063, 1, 0, 0, 0, 4066,
        4067, 5, 468, 0, 0, 4067, 4071, 5, 658, 0, 0, 4068, 4069, 3, 1182, 591, 0, 4069, 4070, 3, 1350,
        675, 0, 4070, 4072, 1, 0, 0, 0, 4071, 4068, 1, 0, 0, 0, 4071, 4072, 1, 0, 0, 0, 4072, 4079, 1,
        0, 0, 0, 4073, 4079, 3, 550, 275, 0, 4074, 4079, 3, 552, 276, 0, 4075, 4079, 3, 536, 268, 0,
        4076, 4079, 3, 460, 230, 0, 4077, 4079, 3, 568, 284, 0, 4078, 4047, 1, 0, 0, 0, 4078, 4056,
        1, 0, 0, 0, 4078, 4057, 1, 0, 0, 0, 4078, 4066, 1, 0, 0, 0, 4078, 4073, 1, 0, 0, 0, 4078, 4074,
        1, 0, 0, 0, 4078, 4075, 1, 0, 0, 0, 4078, 4076, 1, 0, 0, 0, 4078, 4077, 1, 0, 0, 0, 4079, 455,
        1, 0, 0, 0, 4080, 4082, 5, 316, 0, 0, 4081, 4083, 3, 458, 229, 0, 4082, 4081, 1, 0, 0, 0, 4082,
        4083, 1, 0, 0, 0, 4083, 4092, 1, 0, 0, 0, 4084, 4086, 3, 580, 290, 0, 4085, 4087, 5, 10, 0, 0,
        4086, 4085, 1, 0, 0, 0, 4086, 4087, 1, 0, 0, 0, 4087, 4089, 1, 0, 0, 0, 4088, 4090, 3, 976, 488,
        0, 4089, 4088, 1, 0, 0, 0, 4089, 4090, 1, 0, 0, 0, 4090, 4092, 1, 0, 0, 0, 4091, 4080, 1, 0, 0,
        0, 4091, 4084, 1, 0, 0, 0, 4092, 457, 1, 0, 0, 0, 4093, 4098, 5, 590, 0, 0, 4094, 4095, 4, 229,
        36, 0, 4095, 4099, 3, 1364, 682, 0, 4096, 4097, 4, 229, 37, 0, 4097, 4099, 3, 1368, 684, 0,
        4098, 4094, 1, 0, 0, 0, 4098, 4096, 1, 0, 0, 0, 4099, 459, 1, 0, 0, 0, 4100, 4104, 5, 281, 0,
        0, 4101, 4105, 5, 112, 0, 0, 4102, 4103, 5, 574, 0, 0, 4103, 4105, 3, 1326, 663, 0, 4104, 4101,
        1, 0, 0, 0, 4104, 4102, 1, 0, 0, 0, 4105, 4106, 1, 0, 0, 0, 4106, 4107, 5, 203, 0, 0, 4107, 4108,
        5, 316, 0, 0, 4108, 461, 1, 0, 0, 0, 4109, 4114, 5, 316, 0, 0, 4110, 4111, 4, 231, 38, 0, 4111,
        4112, 5, 459, 0, 0, 4112, 4114, 5, 522, 0, 0, 4113, 4109, 1, 0, 0, 0, 4113, 4110, 1, 0, 0, 0,
        4114, 463, 1, 0, 0, 0, 4115, 4116, 5, 55, 0, 0, 4116, 4117, 3, 462, 231, 0, 4117, 4118, 5, 590,
        0, 0, 4118, 4120, 3, 466, 233, 0, 4119, 4121, 3, 976, 488, 0, 4120, 4119, 1, 0, 0, 0, 4120,
        4121, 1, 0, 0, 0, 4121, 465, 1, 0, 0, 0, 4122, 4127, 3, 468, 234, 0, 4123, 4124, 5, 773, 0, 0,
        4124, 4126, 3, 468, 234, 0, 4125, 4123, 1, 0, 0, 0, 4126, 4129, 1, 0, 0, 0, 4127, 4125, 1, 0,
        0, 0, 4127, 4128, 1, 0, 0, 0, 4128, 467, 1, 0, 0, 0, 4129, 4127, 1, 0, 0, 0, 4130, 4131, 3, 472,
        236, 0, 4131, 4132, 5, 750, 0, 0, 4132, 4133, 3, 1390, 695, 0, 4133, 4259, 1, 0, 0, 0, 4134,
        4135, 5, 729, 0, 0, 4135, 4136, 5, 750, 0, 0, 4136, 4259, 3, 1390, 695, 0, 4137, 4138, 3, 474,
        237, 0, 4138, 4139, 5, 750, 0, 0, 4139, 4140, 3, 1390, 695, 0, 4140, 4259, 1, 0, 0, 0, 4141,
        4142, 3, 476, 238, 0, 4142, 4143, 5, 750, 0, 0, 4143, 4144, 3, 1390, 695, 0, 4144, 4259, 1,
        0, 0, 0, 4145, 4146, 3, 478, 239, 0, 4146, 4147, 5, 750, 0, 0, 4147, 4148, 3, 1390, 695, 0,
        4148, 4259, 1, 0, 0, 0, 4149, 4150, 3, 480, 240, 0, 4150, 4151, 5, 750, 0, 0, 4151, 4152, 3,
        1362, 681, 0, 4152, 4259, 1, 0, 0, 0, 4153, 4154, 3, 482, 241, 0, 4154, 4155, 5, 750, 0, 0,
        4155, 4156, 3, 1362, 681, 0, 4156, 4259, 1, 0, 0, 0, 4157, 4158, 3, 484, 242, 0, 4158, 4159,
        5, 750, 0, 0, 4159, 4160, 3, 1362, 681, 0, 4160, 4259, 1, 0, 0, 0, 4161, 4162, 3, 486, 243,
        0, 4162, 4163, 5, 750, 0, 0, 4163, 4164, 3, 1362, 681, 0, 4164, 4259, 1, 0, 0, 0, 4165, 4166,
        3, 488, 244, 0, 4166, 4167, 5, 750, 0, 0, 4167, 4168, 3, 1362, 681, 0, 4168, 4259, 1, 0, 0,
        0, 4169, 4170, 3, 490, 245, 0, 4170, 4171, 5, 750, 0, 0, 4171, 4172, 3, 1390, 695, 0, 4172,
        4259, 1, 0, 0, 0, 4173, 4174, 3, 492, 246, 0, 4174, 4175, 5, 750, 0, 0, 4175, 4176, 3, 1390,
        695, 0, 4176, 4259, 1, 0, 0, 0, 4177, 4178, 3, 504, 252, 0, 4178, 4179, 5, 750, 0, 0, 4179,
        4180, 3, 1390, 695, 0, 4180, 4259, 1, 0, 0, 0, 4181, 4182, 3, 508, 254, 0, 4182, 4183, 5, 750,
        0, 0, 4183, 4184, 3, 1390, 695, 0, 4184, 4259, 1, 0, 0, 0, 4185, 4186, 3, 506, 253, 0, 4186,
        4187, 5, 750, 0, 0, 4187, 4188, 3, 526, 263, 0, 4188, 4259, 1, 0, 0, 0, 4189, 4190, 3, 494,
        247, 0, 4190, 4191, 5, 750, 0, 0, 4191, 4192, 3, 1390, 695, 0, 4192, 4259, 1, 0, 0, 0, 4193,
        4194, 3, 500, 250, 0, 4194, 4195, 5, 750, 0, 0, 4195, 4196, 3, 1390, 695, 0, 4196, 4259, 1,
        0, 0, 0, 4197, 4198, 3, 502, 251, 0, 4198, 4199, 5, 750, 0, 0, 4199, 4200, 3, 1362, 681, 0,
        4200, 4259, 1, 0, 0, 0, 4201, 4202, 3, 496, 248, 0, 4202, 4203, 5, 750, 0, 0, 4203, 4204, 3,
        1388, 694, 0, 4204, 4259, 1, 0, 0, 0, 4205, 4206, 3, 498, 249, 0, 4206, 4207, 5, 750, 0, 0,
        4207, 4208, 3, 1390, 695, 0, 4208, 4259, 1, 0, 0, 0, 4209, 4210, 3, 510, 255, 0, 4210, 4211,
        5, 750, 0, 0, 4211, 4212, 3, 1390, 695, 0, 4212, 4259, 1, 0, 0, 0, 4213, 4214, 3, 512, 256,
        0, 4214, 4215, 5, 750, 0, 0, 4215, 4216, 3, 1362, 681, 0, 4216, 4259, 1, 0, 0, 0, 4217, 4218,
        3, 514, 257, 0, 4218, 4219, 5, 750, 0, 0, 4219, 4220, 3, 1362, 681, 0, 4220, 4259, 1, 0, 0,
        0, 4221, 4222, 5, 233, 0, 0, 4222, 4223, 5, 750, 0, 0, 4223, 4259, 3, 534, 267, 0, 4224, 4225,
        3, 516, 258, 0, 4225, 4226, 5, 750, 0, 0, 4226, 4227, 3, 1382, 691, 0, 4227, 4259, 1, 0, 0,
        0, 4228, 4229, 3, 518, 259, 0, 4229, 4230, 5, 750, 0, 0, 4230, 4231, 3, 1362, 681, 0, 4231,
        4259, 1, 0, 0, 0, 4232, 4233, 3, 470, 235, 0, 4233, 4234, 5, 750, 0, 0, 4234, 4235, 3, 1362,
        681, 0, 4235, 4259, 1, 0, 0, 0, 4236, 4237, 5, 737, 0, 0, 4237, 4238, 5, 750, 0, 0, 4238, 4259,
        3, 520, 260, 0, 4239, 4240, 5, 739, 0, 0, 4240, 4241, 5, 750, 0, 0, 4241, 4259, 3, 1362, 681,
        0, 4242, 4243, 5, 742, 0, 0, 4243, 4244, 5, 750, 0, 0, 4244, 4259, 3, 522, 261, 0, 4245, 4246,
        4, 234, 39, 0, 4246, 4247, 5, 800, 0, 0, 4247, 4248, 5, 750, 0, 0, 4248, 4259, 3, 1364, 682,
        0, 4249, 4250, 4, 234, 40, 0, 4250, 4251, 5, 805, 0, 0, 4251, 4252, 5, 750, 0, 0, 4252, 4259,
        3, 524, 262, 0, 4253, 4254, 4, 234, 41, 0, 4254, 4255, 5, 843, 0, 0, 4255, 4256, 5, 750, 0,
        0, 4256, 4259, 3, 1364, 682, 0, 4257, 4259, 3, 528, 264, 0, 4258, 4130, 1, 0, 0, 0, 4258, 4134,
        1, 0, 0, 0, 4258, 4137, 1, 0, 0, 0, 4258, 4141, 1, 0, 0, 0, 4258, 4145, 1, 0, 0, 0, 4258, 4149,
        1, 0, 0, 0, 4258, 4153, 1, 0, 0, 0, 4258, 4157, 1, 0, 0, 0, 4258, 4161, 1, 0, 0, 0, 4258, 4165,
        1, 0, 0, 0, 4258, 4169, 1, 0, 0, 0, 4258, 4173, 1, 0, 0, 0, 4258, 4177, 1, 0, 0, 0, 4258, 4181,
        1, 0, 0, 0, 4258, 4185, 1, 0, 0, 0, 4258, 4189, 1, 0, 0, 0, 4258, 4193, 1, 0, 0, 0, 4258, 4197,
        1, 0, 0, 0, 4258, 4201, 1, 0, 0, 0, 4258, 4205, 1, 0, 0, 0, 4258, 4209, 1, 0, 0, 0, 4258, 4213,
        1, 0, 0, 0, 4258, 4217, 1, 0, 0, 0, 4258, 4221, 1, 0, 0, 0, 4258, 4224, 1, 0, 0, 0, 4258, 4228,
        1, 0, 0, 0, 4258, 4232, 1, 0, 0, 0, 4258, 4236, 1, 0, 0, 0, 4258, 4239, 1, 0, 0, 0, 4258, 4242,
        1, 0, 0, 0, 4258, 4245, 1, 0, 0, 0, 4258, 4249, 1, 0, 0, 0, 4258, 4253, 1, 0, 0, 0, 4258, 4257,
        1, 0, 0, 0, 4259, 469, 1, 0, 0, 0, 4260, 4261, 7, 45, 0, 0, 4261, 471, 1, 0, 0, 0, 4262, 4263,
        7, 46, 0, 0, 4263, 473, 1, 0, 0, 0, 4264, 4265, 7, 47, 0, 0, 4265, 475, 1, 0, 0, 0, 4266, 4267,
        7, 48, 0, 0, 4267, 477, 1, 0, 0, 0, 4268, 4269, 7, 49, 0, 0, 4269, 479, 1, 0, 0, 0, 4270, 4271,
        7, 50, 0, 0, 4271, 481, 1, 0, 0, 0, 4272, 4273, 7, 51, 0, 0, 4273, 483, 1, 0, 0, 0, 4274, 4275,
        7, 52, 0, 0, 4275, 485, 1, 0, 0, 0, 4276, 4277, 7, 53, 0, 0, 4277, 487, 1, 0, 0, 0, 4278, 4279,
        7, 54, 0, 0, 4279, 489, 1, 0, 0, 0, 4280, 4281, 7, 55, 0, 0, 4281, 491, 1, 0, 0, 0, 4282, 4283,
        7, 56, 0, 0, 4283, 493, 1, 0, 0, 0, 4284, 4285, 7, 57, 0, 0, 4285, 495, 1, 0, 0, 0, 4286, 4287,
        7, 58, 0, 0, 4287, 497, 1, 0, 0, 0, 4288, 4289, 7, 59, 0, 0, 4289, 499, 1, 0, 0, 0, 4290, 4291,
        7, 60, 0, 0, 4291, 501, 1, 0, 0, 0, 4292, 4293, 7, 61, 0, 0, 4293, 503, 1, 0, 0, 0, 4294, 4295,
        7, 62, 0, 0, 4295, 505, 1, 0, 0, 0, 4296, 4297, 7, 63, 0, 0, 4297, 507, 1, 0, 0, 0, 4298, 4299,
        7, 64, 0, 0, 4299, 509, 1, 0, 0, 0, 4300, 4301, 7, 65, 0, 0, 4301, 511, 1, 0, 0, 0, 4302, 4303,
        7, 66, 0, 0, 4303, 513, 1, 0, 0, 0, 4304, 4305, 7, 67, 0, 0, 4305, 515, 1, 0, 0, 0, 4306, 4307,
        7, 68, 0, 0, 4307, 517, 1, 0, 0, 0, 4308, 4309, 7, 69, 0, 0, 4309, 519, 1, 0, 0, 0, 4310, 4313,
        3, 1248, 624, 0, 4311, 4313, 5, 376, 0, 0, 4312, 4310, 1, 0, 0, 0, 4312, 4311, 1, 0, 0, 0, 4313,
        521, 1, 0, 0, 0, 4314, 4315, 7, 70, 0, 0, 4315, 523, 1, 0, 0, 0, 4316, 4320, 5, 744, 0, 0, 4317,
        4320, 5, 284, 0, 0, 4318, 4320, 3, 1382, 691, 0, 4319, 4316, 1, 0, 0, 0, 4319, 4317, 1, 0, 0,
        0, 4319, 4318, 1, 0, 0, 0, 4320, 525, 1, 0, 0, 0, 4321, 4324, 3, 1390, 695, 0, 4322, 4324, 5,
        376, 0, 0, 4323, 4321, 1, 0, 0, 0, 4323, 4322, 1, 0, 0, 0, 4324, 527, 1, 0, 0, 0, 4325, 4326,
        3, 530, 265, 0, 4326, 4327, 5, 750, 0, 0, 4327, 4328, 3, 1390, 695, 0, 4328, 4340, 1, 0, 0,
        0, 4329, 4330, 3, 532, 266, 0, 4330, 4331, 5, 750, 0, 0, 4331, 4332, 3, 1366, 683, 0, 4332,
        4340, 1, 0, 0, 0, 4333, 4334, 5, 447, 0, 0, 4334, 4335, 5, 750, 0, 0, 4335, 4340, 3, 1390, 695,
        0, 4336, 4337, 5, 448, 0, 0, 4337, 4338, 5, 750, 0, 0, 4338, 4340, 3, 1362, 681, 0, 4339, 4325,
        1, 0, 0, 0, 4339, 4329, 1, 0, 0, 0, 4339, 4333, 1, 0, 0, 0, 4339, 4336, 1, 0, 0, 0, 4340, 529,
        1, 0, 0, 0, 4341, 4342, 7, 71, 0, 0, 4342, 531, 1, 0, 0, 0, 4343, 4344, 7, 72, 0, 0, 4344, 533,
        1, 0, 0, 0, 4345, 4354, 5, 776, 0, 0, 4346, 4351, 3, 1362, 681, 0, 4347, 4348, 5, 773, 0, 0,
        4348, 4350, 3, 1362, 681, 0, 4349, 4347, 1, 0, 0, 0, 4350, 4353, 1, 0, 0, 0, 4351, 4349, 1,
        0, 0, 0, 4351, 4352, 1, 0, 0, 0, 4352, 4355, 1, 0, 0, 0, 4353, 4351, 1, 0, 0, 0, 4354, 4346, 1,
        0, 0, 0, 4354, 4355, 1, 0, 0, 0, 4355, 4356, 1, 0, 0, 0, 4356, 4357, 5, 777, 0, 0, 4357, 535,
        1, 0, 0, 0, 4358, 4359, 5, 55, 0, 0, 4359, 4360, 5, 459, 0, 0, 4360, 4361, 5, 190, 0, 0, 4361,
        4366, 3, 538, 269, 0, 4362, 4363, 5, 773, 0, 0, 4363, 4365, 3, 538, 269, 0, 4364, 4362, 1,
        0, 0, 0, 4365, 4368, 1, 0, 0, 0, 4366, 4364, 1, 0, 0, 0, 4366, 4367, 1, 0, 0, 0, 4367, 4370, 1,
        0, 0, 0, 4368, 4366, 1, 0, 0, 0, 4369, 4371, 3, 976, 488, 0, 4370, 4369, 1, 0, 0, 0, 4370, 4371,
        1, 0, 0, 0, 4371, 537, 1, 0, 0, 0, 4372, 4373, 5, 460, 0, 0, 4373, 4374, 5, 750, 0, 0, 4374, 4376,
        5, 776, 0, 0, 4375, 4377, 3, 540, 270, 0, 4376, 4375, 1, 0, 0, 0, 4376, 4377, 1, 0, 0, 0, 4377,
        4378, 1, 0, 0, 0, 4378, 4422, 5, 777, 0, 0, 4379, 4380, 5, 461, 0, 0, 4380, 4381, 5, 750, 0,
        0, 4381, 4383, 5, 776, 0, 0, 4382, 4384, 3, 540, 270, 0, 4383, 4382, 1, 0, 0, 0, 4383, 4384,
        1, 0, 0, 0, 4384, 4385, 1, 0, 0, 0, 4385, 4422, 5, 777, 0, 0, 4386, 4387, 5, 462, 0, 0, 4387,
        4388, 5, 750, 0, 0, 4388, 4390, 5, 776, 0, 0, 4389, 4391, 3, 542, 271, 0, 4390, 4389, 1, 0,
        0, 0, 4390, 4391, 1, 0, 0, 0, 4391, 4392, 1, 0, 0, 0, 4392, 4422, 5, 777, 0, 0, 4393, 4394, 5,
        463, 0, 0, 4394, 4395, 5, 750, 0, 0, 4395, 4397, 5, 776, 0, 0, 4396, 4398, 3, 542, 271, 0, 4397,
        4396, 1, 0, 0, 0, 4397, 4398, 1, 0, 0, 0, 4398, 4399, 1, 0, 0, 0, 4399, 4422, 5, 777, 0, 0, 4400,
        4401, 5, 464, 0, 0, 4401, 4402, 5, 750, 0, 0, 4402, 4404, 5, 776, 0, 0, 4403, 4405, 3, 544,
        272, 0, 4404, 4403, 1, 0, 0, 0, 4404, 4405, 1, 0, 0, 0, 4405, 4406, 1, 0, 0, 0, 4406, 4422, 5,
        777, 0, 0, 4407, 4408, 5, 465, 0, 0, 4408, 4409, 5, 750, 0, 0, 4409, 4411, 5, 776, 0, 0, 4410,
        4412, 3, 544, 272, 0, 4411, 4410, 1, 0, 0, 0, 4411, 4412, 1, 0, 0, 0, 4412, 4413, 1, 0, 0, 0,
        4413, 4422, 5, 777, 0, 0, 4414, 4415, 5, 466, 0, 0, 4415, 4416, 5, 750, 0, 0, 4416, 4418, 5,
        776, 0, 0, 4417, 4419, 3, 548, 274, 0, 4418, 4417, 1, 0, 0, 0, 4418, 4419, 1, 0, 0, 0, 4419,
        4420, 1, 0, 0, 0, 4420, 4422, 5, 777, 0, 0, 4421, 4372, 1, 0, 0, 0, 4421, 4379, 1, 0, 0, 0, 4421,
        4386, 1, 0, 0, 0, 4421, 4393, 1, 0, 0, 0, 4421, 4400, 1, 0, 0, 0, 4421, 4407, 1, 0, 0, 0, 4421,
        4414, 1, 0, 0, 0, 4422, 539, 1, 0, 0, 0, 4423, 4428, 3, 1282, 641, 0, 4424, 4425, 5, 773, 0,
        0, 4425, 4427, 3, 1282, 641, 0, 4426, 4424, 1, 0, 0, 0, 4427, 4430, 1, 0, 0, 0, 4428, 4426,
        1, 0, 0, 0, 4428, 4429, 1, 0, 0, 0, 4429, 541, 1, 0, 0, 0, 4430, 4428, 1, 0, 0, 0, 4431, 4436,
        3, 1322, 661, 0, 4432, 4433, 5, 773, 0, 0, 4433, 4435, 3, 1322, 661, 0, 4434, 4432, 1, 0, 0,
        0, 4435, 4438, 1, 0, 0, 0, 4436, 4434, 1, 0, 0, 0, 4436, 4437, 1, 0, 0, 0, 4437, 543, 1, 0, 0,
        0, 4438, 4436, 1, 0, 0, 0, 4439, 4444, 3, 546, 273, 0, 4440, 4441, 5, 773, 0, 0, 4441, 4443,
        3, 546, 273, 0, 4442, 4440, 1, 0, 0, 0, 4443, 4446, 1, 0, 0, 0, 4444, 4442, 1, 0, 0, 0, 4444,
        4445, 1, 0, 0, 0, 4445, 545, 1, 0, 0, 0, 4446, 4444, 1, 0, 0, 0, 4447, 4448, 3, 1390, 695, 0,
        4448, 547, 1, 0, 0, 0, 4449, 4454, 3, 1196, 598, 0, 4450, 4451, 5, 773, 0, 0, 4451, 4453, 3,
        1196, 598, 0, 4452, 4450, 1, 0, 0, 0, 4453, 4456, 1, 0, 0, 0, 4454, 4452, 1, 0, 0, 0, 4454, 4455,
        1, 0, 0, 0, 4455, 549, 1, 0, 0, 0, 4456, 4454, 1, 0, 0, 0, 4457, 4458, 5, 543, 0, 0, 4458, 4460,
        3, 580, 290, 0, 4459, 4461, 3, 564, 282, 0, 4460, 4459, 1, 0, 0, 0, 4460, 4461, 1, 0, 0, 0, 4461,
        4464, 1, 0, 0, 0, 4462, 4463, 5, 613, 0, 0, 4463, 4465, 3, 554, 277, 0, 4464, 4462, 1, 0, 0,
        0, 4464, 4465, 1, 0, 0, 0, 4465, 4467, 1, 0, 0, 0, 4466, 4468, 3, 556, 278, 0, 4467, 4466, 1,
        0, 0, 0, 4467, 4468, 1, 0, 0, 0, 4468, 4470, 1, 0, 0, 0, 4469, 4471, 3, 558, 279, 0, 4470, 4469,
        1, 0, 0, 0, 4470, 4471, 1, 0, 0, 0, 4471, 4473, 1, 0, 0, 0, 4472, 4474, 3, 560, 280, 0, 4473,
        4472, 1, 0, 0, 0, 4473, 4474, 1, 0, 0, 0, 4474, 4476, 1, 0, 0, 0, 4475, 4477, 3, 562, 281, 0,
        4476, 4475, 1, 0, 0, 0, 4476, 4477, 1, 0, 0, 0, 4477, 4479, 1, 0, 0, 0, 4478, 4480, 3, 976, 488,
        0, 4479, 4478, 1, 0, 0, 0, 4479, 4480, 1, 0, 0, 0, 4480, 551, 1, 0, 0, 0, 4481, 4482, 5, 552,
        0, 0, 4482, 4484, 3, 580, 290, 0, 4483, 4485, 3, 564, 282, 0, 4484, 4483, 1, 0, 0, 0, 4484,
        4485, 1, 0, 0, 0, 4485, 4487, 1, 0, 0, 0, 4486, 4488, 3, 976, 488, 0, 4487, 4486, 1, 0, 0, 0,
        4487, 4488, 1, 0, 0, 0, 4488, 553, 1, 0, 0, 0, 4489, 4495, 3, 528, 264, 0, 4490, 4491, 7, 73,
        0, 0, 4491, 4492, 5, 750, 0, 0, 4492, 4495, 3, 1384, 692, 0, 4493, 4495, 5, 529, 0, 0, 4494,
        4489, 1, 0, 0, 0, 4494, 4490, 1, 0, 0, 0, 4494, 4493, 1, 0, 0, 0, 4495, 4500, 1, 0, 0, 0, 4496,
        4497, 5, 773, 0, 0, 4497, 4499, 3, 528, 264, 0, 4498, 4496, 1, 0, 0, 0, 4499, 4502, 1, 0, 0,
        0, 4500, 4498, 1, 0, 0, 0, 4500, 4501, 1, 0, 0, 0, 4501, 555, 1, 0, 0, 0, 4502, 4500, 1, 0, 0,
        0, 4503, 4504, 5, 618, 0, 0, 4504, 4505, 5, 750, 0, 0, 4505, 4506, 3, 1384, 692, 0, 4506, 557,
        1, 0, 0, 0, 4507, 4508, 5, 406, 0, 0, 4508, 4509, 5, 750, 0, 0, 4509, 4510, 3, 1384, 692, 0,
        4510, 559, 1, 0, 0, 0, 4511, 4512, 5, 129, 0, 0, 4512, 4513, 5, 750, 0, 0, 4513, 4514, 3, 1384,
        692, 0, 4514, 561, 1, 0, 0, 0, 4515, 4516, 5, 409, 0, 0, 4516, 4517, 5, 750, 0, 0, 4517, 4518,
        3, 1384, 692, 0, 4518, 563, 1, 0, 0, 0, 4519, 4524, 3, 566, 283, 0, 4520, 4521, 5, 773, 0, 0,
        4521, 4523, 3, 566, 283, 0, 4522, 4520, 1, 0, 0, 0, 4523, 4526, 1, 0, 0, 0, 4524, 4522, 1, 0,
        0, 0, 4524, 4525, 1, 0, 0, 0, 4525, 565, 1, 0, 0, 0, 4526, 4524, 1, 0, 0, 0, 4527, 4528, 7, 74,
        0, 0, 4528, 567, 1, 0, 0, 0, 4529, 4531, 5, 543, 0, 0, 4530, 4532, 3, 570, 285, 0, 4531, 4530,
        1, 0, 0, 0, 4531, 4532, 1, 0, 0, 0, 4532, 4535, 1, 0, 0, 0, 4533, 4535, 5, 552, 0, 0, 4534, 4529,
        1, 0, 0, 0, 4534, 4533, 1, 0, 0, 0, 4535, 4536, 1, 0, 0, 0, 4536, 4537, 5, 210, 0, 0, 4537, 569,
        1, 0, 0, 0, 4538, 4543, 3, 572, 286, 0, 4539, 4540, 5, 773, 0, 0, 4540, 4542, 3, 572, 286, 0,
        4541, 4539, 1, 0, 0, 0, 4542, 4545, 1, 0, 0, 0, 4543, 4541, 1, 0, 0, 0, 4543, 4544, 1, 0, 0, 0,
        4544, 571, 1, 0, 0, 0, 4545, 4543, 1, 0, 0, 0, 4546, 4550, 3, 574, 287, 0, 4547, 4550, 3, 576,
        288, 0, 4548, 4550, 3, 578, 289, 0, 4549, 4546, 1, 0, 0, 0, 4549, 4547, 1, 0, 0, 0, 4549, 4548,
        1, 0, 0, 0, 4550, 573, 1, 0, 0, 0, 4551, 4552, 5, 618, 0, 0, 4552, 4553, 5, 750, 0, 0, 4553, 4554,
        3, 1390, 695, 0, 4554, 575, 1, 0, 0, 0, 4555, 4556, 5, 406, 0, 0, 4556, 4557, 5, 750, 0, 0, 4557,
        4558, 3, 1390, 695, 0, 4558, 577, 1, 0, 0, 0, 4559, 4560, 5, 129, 0, 0, 4560, 4561, 5, 750,
        0, 0, 4561, 4562, 3, 1390, 695, 0, 4562, 579, 1, 0, 0, 0, 4563, 4564, 7, 75, 0, 0, 4564, 581,
        1, 0, 0, 0, 4565, 4566, 5, 417, 0, 0, 4566, 4567, 3, 1350, 675, 0, 4567, 4570, 5, 203, 0, 0,
        4568, 4571, 3, 1388, 694, 0, 4569, 4571, 3, 932, 466, 0, 4570, 4568, 1, 0, 0, 0, 4570, 4569,
        1, 0, 0, 0, 4571, 4577, 1, 0, 0, 0, 4572, 4577, 3, 584, 292, 0, 4573, 4574, 7, 76, 0, 0, 4574,
        4575, 5, 417, 0, 0, 4575, 4577, 3, 1350, 675, 0, 4576, 4565, 1, 0, 0, 0, 4576, 4572, 1, 0, 0,
        0, 4576, 4573, 1, 0, 0, 0, 4577, 583, 1, 0, 0, 0, 4578, 4579, 5, 173, 0, 0, 4579, 4582, 3, 1350,
        675, 0, 4580, 4581, 5, 621, 0, 0, 4581, 4583, 3, 586, 293, 0, 4582, 4580, 1, 0, 0, 0, 4582,
        4583, 1, 0, 0, 0, 4583, 585, 1, 0, 0, 0, 4584, 4589, 3, 932, 466, 0, 4585, 4586, 5, 773, 0, 0,
        4586, 4588, 3, 932, 466, 0, 4587, 4585, 1, 0, 0, 0, 4588, 4591, 1, 0, 0, 0, 4589, 4587, 1, 0,
        0, 0, 4589, 4590, 1, 0, 0, 0, 4590, 587, 1, 0, 0, 0, 4591, 4589, 1, 0, 0, 0, 4592, 4617, 5, 677,
        0, 0, 4593, 4594, 5, 284, 0, 0, 4594, 4595, 5, 112, 0, 0, 4595, 4597, 5, 139, 0, 0, 4596, 4598,
        3, 1420, 710, 0, 4597, 4596, 1, 0, 0, 0, 4597, 4598, 1, 0, 0, 0, 4598, 4599, 1, 0, 0, 0, 4599,
        4618, 3, 1382, 691, 0, 4600, 4603, 5, 676, 0, 0, 4601, 4602, 5, 200, 0, 0, 4602, 4604, 5, 459,
        0, 0, 4603, 4601, 1, 0, 0, 0, 4603, 4604, 1, 0, 0, 0, 4604, 4618, 1, 0, 0, 0, 4605, 4606, 4, 294,
        42, 0, 4606, 4607, 5, 244, 0, 0, 4607, 4608, 5, 203, 0, 0, 4608, 4609, 3, 1250, 625, 0, 4609,
        4610, 5, 775, 0, 0, 4610, 4611, 3, 1362, 681, 0, 4611, 4612, 5, 230, 0, 0, 4612, 4613, 5, 45,
        0, 0, 4613, 4615, 3, 1382, 691, 0, 4614, 4616, 3, 590, 295, 0, 4615, 4614, 1, 0, 0, 0, 4615,
        4616, 1, 0, 0, 0, 4616, 4618, 1, 0, 0, 0, 4617, 4593, 1, 0, 0, 0, 4617, 4600, 1, 0, 0, 0, 4617,
        4605, 1, 0, 0, 0, 4618, 589, 1, 0, 0, 0, 4619, 4630, 3, 592, 296, 0, 4620, 4621, 5, 112, 0, 0,
        4621, 4623, 5, 139, 0, 0, 4622, 4624, 3, 1420, 710, 0, 4623, 4622, 1, 0, 0, 0, 4623, 4624,
        1, 0, 0, 0, 4624, 4625, 1, 0, 0, 0, 4625, 4627, 3, 1382, 691, 0, 4626, 4628, 3, 592, 296, 0,
        4627, 4626, 1, 0, 0, 0, 4627, 4628, 1, 0, 0, 0, 4628, 4630, 1, 0, 0, 0, 4629, 4619, 1, 0, 0, 0,
        4629, 4620, 1, 0, 0, 0, 4630, 591, 1, 0, 0, 0, 4631, 4633, 5, 467, 0, 0, 4632, 4634, 5, 373,
        0, 0, 4633, 4632, 1, 0, 0, 0, 4633, 4634, 1, 0, 0, 0, 4634, 4635, 1, 0, 0, 0, 4635, 4636, 5, 539,
        0, 0, 4636, 593, 1, 0, 0, 0, 4637, 4645, 3, 596, 298, 0, 4638, 4645, 3, 606, 303, 0, 4639, 4645,
        3, 622, 311, 0, 4640, 4645, 3, 624, 312, 0, 4641, 4645, 3, 638, 319, 0, 4642, 4645, 3, 640,
        320, 0, 4643, 4645, 3, 656, 328, 0, 4644, 4637, 1, 0, 0, 0, 4644, 4638, 1, 0, 0, 0, 4644, 4639,
        1, 0, 0, 0, 4644, 4640, 1, 0, 0, 0, 4644, 4641, 1, 0, 0, 0, 4644, 4642, 1, 0, 0, 0, 4644, 4643,
        1, 0, 0, 0, 4645, 595, 1, 0, 0, 0, 4646, 4647, 5, 11, 0, 0, 4647, 4649, 5, 618, 0, 0, 4648, 4650,
        3, 1182, 591, 0, 4649, 4648, 1, 0, 0, 0, 4649, 4650, 1, 0, 0, 0, 4650, 4691, 1, 0, 0, 0, 4651,
        4652, 4, 298, 43, 0, 4652, 4656, 3, 1216, 608, 0, 4653, 4654, 4, 298, 44, 0, 4654, 4656, 3,
        598, 299, 0, 4655, 4651, 1, 0, 0, 0, 4655, 4653, 1, 0, 0, 0, 4656, 4657, 1, 0, 0, 0, 4657, 4658,
        3, 608, 304, 0, 4658, 4692, 1, 0, 0, 0, 4659, 4676, 3, 604, 302, 0, 4660, 4663, 3, 1226, 613,
        0, 4661, 4663, 3, 1224, 612, 0, 4662, 4660, 1, 0, 0, 0, 4662, 4661, 1, 0, 0, 0, 4663, 4665,
        1, 0, 0, 0, 4664, 4666, 3, 1246, 623, 0, 4665, 4664, 1, 0, 0, 0, 4665, 4666, 1, 0, 0, 0, 4666,
        4668, 1, 0, 0, 0, 4667, 4669, 3, 1238, 619, 0, 4668, 4667, 1, 0, 0, 0, 4668, 4669, 1, 0, 0, 0,
        4669, 4677, 1, 0, 0, 0, 4670, 4671, 5, 141, 0, 0, 4671, 4672, 5, 728, 0, 0, 4672, 4677, 5, 406,
        0, 0, 4673, 4675, 3, 1242, 621, 0, 4674, 4673, 1, 0, 0, 0, 4674, 4675, 1, 0, 0, 0, 4675, 4677,
        1, 0, 0, 0, 4676, 4662, 1, 0, 0, 0, 4676, 4670, 1, 0, 0, 0, 4676, 4674, 1, 0, 0, 0, 4677, 4692,
        1, 0, 0, 0, 4678, 4689, 3, 1250, 625, 0, 4679, 4680, 5, 128, 0, 0, 4680, 4684, 5, 659, 0, 0,
        4681, 4685, 5, 10, 0, 0, 4682, 4685, 5, 369, 0, 0, 4683, 4685, 3, 658, 329, 0, 4684, 4681,
        1, 0, 0, 0, 4684, 4682, 1, 0, 0, 0, 4684, 4683, 1, 0, 0, 0, 4685, 4690, 1, 0, 0, 0, 4686, 4688,
        3, 1242, 621, 0, 4687, 4686, 1, 0, 0, 0, 4687, 4688, 1, 0, 0, 0, 4688, 4690, 1, 0, 0, 0, 4689,
        4679, 1, 0, 0, 0, 4689, 4687, 1, 0, 0, 0, 4690, 4692, 1, 0, 0, 0, 4691, 4655, 1, 0, 0, 0, 4691,
        4659, 1, 0, 0, 0, 4691, 4678, 1, 0, 0, 0, 4692, 597, 1, 0, 0, 0, 4693, 4698, 3, 600, 300, 0, 4694,
        4695, 5, 773, 0, 0, 4695, 4697, 3, 600, 300, 0, 4696, 4694, 1, 0, 0, 0, 4697, 4700, 1, 0, 0,
        0, 4698, 4696, 1, 0, 0, 0, 4698, 4699, 1, 0, 0, 0, 4699, 599, 1, 0, 0, 0, 4700, 4698, 1, 0, 0,
        0, 4701, 4702, 4, 300, 45, 0, 4702, 4777, 3, 602, 301, 0, 4703, 4704, 4, 300, 46, 0, 4704,
        4774, 3, 1250, 625, 0, 4705, 4714, 3, 1224, 612, 0, 4706, 4707, 5, 458, 0, 0, 4707, 4709,
        3, 1382, 691, 0, 4708, 4710, 3, 1238, 619, 0, 4709, 4708, 1, 0, 0, 0, 4709, 4710, 1, 0, 0, 0,
        4710, 4715, 1, 0, 0, 0, 4711, 4713, 3, 1238, 619, 0, 4712, 4711, 1, 0, 0, 0, 4712, 4713, 1,
        0, 0, 0, 4713, 4715, 1, 0, 0, 0, 4714, 4706, 1, 0, 0, 0, 4714, 4712, 1, 0, 0, 0, 4715, 4775, 1,
        0, 0, 0, 4716, 4725, 3, 1226, 613, 0, 4717, 4719, 3, 1238, 619, 0, 4718, 4717, 1, 0, 0, 0, 4718,
        4719, 1, 0, 0, 0, 4719, 4726, 1, 0, 0, 0, 4720, 4721, 5, 458, 0, 0, 4721, 4723, 3, 1382, 691,
        0, 4722, 4724, 3, 1238, 619, 0, 4723, 4722, 1, 0, 0, 0, 4723, 4724, 1, 0, 0, 0, 4724, 4726,
        1, 0, 0, 0, 4725, 4718, 1, 0, 0, 0, 4725, 4720, 1, 0, 0, 0, 4726, 4775, 1, 0, 0, 0, 4727, 4775,
        3, 1228, 614, 0, 4728, 4730, 3, 1230, 615, 0, 4729, 4731, 3, 1238, 619, 0, 4730, 4729, 1,
        0, 0, 0, 4730, 4731, 1, 0, 0, 0, 4731, 4775, 1, 0, 0, 0, 4732, 4741, 3, 1232, 616, 0, 4733, 4734,
        5, 458, 0, 0, 4734, 4736, 3, 1382, 691, 0, 4735, 4737, 3, 1238, 619, 0, 4736, 4735, 1, 0, 0,
        0, 4736, 4737, 1, 0, 0, 0, 4737, 4742, 1, 0, 0, 0, 4738, 4740, 3, 1238, 619, 0, 4739, 4738,
        1, 0, 0, 0, 4739, 4740, 1, 0, 0, 0, 4740, 4742, 1, 0, 0, 0, 4741, 4733, 1, 0, 0, 0, 4741, 4739,
        1, 0, 0, 0, 4742, 4775, 1, 0, 0, 0, 4743, 4745, 3, 1234, 617, 0, 4744, 4746, 3, 1238, 619, 0,
        4745, 4744, 1, 0, 0, 0, 4745, 4746, 1, 0, 0, 0, 4746, 4775, 1, 0, 0, 0, 4747, 4749, 3, 1240,
        620, 0, 4748, 4747, 1, 0, 0, 0, 4748, 4749, 1, 0, 0, 0, 4749, 4775, 1, 0, 0, 0, 4750, 4751, 5,
        4, 0, 0, 4751, 4752, 3, 1244, 622, 0, 4752, 4757, 3, 1222, 611, 0, 4753, 4754, 5, 4, 0, 0, 4754,
        4755, 3, 1244, 622, 0, 4755, 4756, 3, 1222, 611, 0, 4756, 4758, 1, 0, 0, 0, 4757, 4753, 1,
        0, 0, 0, 4757, 4758, 1, 0, 0, 0, 4758, 4775, 1, 0, 0, 0, 4759, 4760, 5, 348, 0, 0, 4760, 4761,
        3, 1244, 622, 0, 4761, 4766, 3, 1222, 611, 0, 4762, 4763, 5, 348, 0, 0, 4763, 4764, 3, 1244,
        622, 0, 4764, 4765, 3, 1222, 611, 0, 4765, 4767, 1, 0, 0, 0, 4766, 4762, 1, 0, 0, 0, 4766, 4767,
        1, 0, 0, 0, 4767, 4775, 1, 0, 0, 0, 4768, 4769, 5, 148, 0, 0, 4769, 4772, 3, 1244, 622, 0, 4770,
        4771, 5, 148, 0, 0, 4771, 4773, 3, 1244, 622, 0, 4772, 4770, 1, 0, 0, 0, 4772, 4773, 1, 0, 0,
        0, 4773, 4775, 1, 0, 0, 0, 4774, 4705, 1, 0, 0, 0, 4774, 4716, 1, 0, 0, 0, 4774, 4727, 1, 0, 0,
        0, 4774, 4728, 1, 0, 0, 0, 4774, 4732, 1, 0, 0, 0, 4774, 4743, 1, 0, 0, 0, 4774, 4748, 1, 0, 0,
        0, 4774, 4750, 1, 0, 0, 0, 4774, 4759, 1, 0, 0, 0, 4774, 4768, 1, 0, 0, 0, 4775, 4777, 1, 0, 0,
        0, 4776, 4701, 1, 0, 0, 0, 4776, 4703, 1, 0, 0, 0, 4777, 601, 1, 0, 0, 0, 4778, 4779, 3, 1250,
        625, 0, 4779, 4780, 5, 230, 0, 0, 4780, 4800, 5, 45, 0, 0, 4781, 4782, 3, 1384, 692, 0, 4782,
        4783, 5, 458, 0, 0, 4783, 4785, 3, 1384, 692, 0, 4784, 4786, 3, 1238, 619, 0, 4785, 4784,
        1, 0, 0, 0, 4785, 4786, 1, 0, 0, 0, 4786, 4801, 1, 0, 0, 0, 4787, 4789, 3, 1384, 692, 0, 4788,
        4790, 3, 1238, 619, 0, 4789, 4788, 1, 0, 0, 0, 4789, 4790, 1, 0, 0, 0, 4790, 4801, 1, 0, 0, 0,
        4791, 4792, 5, 734, 0, 0, 4792, 4795, 5, 406, 0, 0, 4793, 4794, 5, 458, 0, 0, 4794, 4796, 3,
        1384, 692, 0, 4795, 4793, 1, 0, 0, 0, 4795, 4796, 1, 0, 0, 0, 4796, 4798, 1, 0, 0, 0, 4797, 4799,
        3, 1238, 619, 0, 4798, 4797, 1, 0, 0, 0, 4798, 4799, 1, 0, 0, 0, 4799, 4801, 1, 0, 0, 0, 4800,
        4781, 1, 0, 0, 0, 4800, 4787, 1, 0, 0, 0, 4800, 4791, 1, 0, 0, 0, 4801, 4836, 1, 0, 0, 0, 4802,
        4803, 3, 1250, 625, 0, 4803, 4804, 5, 230, 0, 0, 4804, 4805, 5, 645, 0, 0, 4805, 4829, 3, 1410,
        705, 0, 4806, 4807, 5, 45, 0, 0, 4807, 4808, 3, 1384, 692, 0, 4808, 4809, 5, 458, 0, 0, 4809,
        4811, 3, 1384, 692, 0, 4810, 4812, 3, 1238, 619, 0, 4811, 4810, 1, 0, 0, 0, 4811, 4812, 1,
        0, 0, 0, 4812, 4830, 1, 0, 0, 0, 4813, 4814, 5, 17, 0, 0, 4814, 4816, 3, 1386, 693, 0, 4815,
        4817, 3, 1238, 619, 0, 4816, 4815, 1, 0, 0, 0, 4816, 4817, 1, 0, 0, 0, 4817, 4830, 1, 0, 0, 0,
        4818, 4819, 5, 45, 0, 0, 4819, 4821, 3, 1384, 692, 0, 4820, 4822, 3, 1238, 619, 0, 4821, 4820,
        1, 0, 0, 0, 4821, 4822, 1, 0, 0, 0, 4822, 4830, 1, 0, 0, 0, 4823, 4824, 5, 45, 0, 0, 4824, 4825,
        5, 734, 0, 0, 4825, 4827, 5, 406, 0, 0, 4826, 4828, 3, 1238, 619, 0, 4827, 4826, 1, 0, 0, 0,
        4827, 4828, 1, 0, 0, 0, 4828, 4830, 1, 0, 0, 0, 4829, 4806, 1, 0, 0, 0, 4829, 4813, 1, 0, 0, 0,
        4829, 4818, 1, 0, 0, 0, 4829, 4823, 1, 0, 0, 0, 4829, 4830, 1, 0, 0, 0, 4830, 4836, 1, 0, 0, 0,
        4831, 4833, 3, 1250, 625, 0, 4832, 4834, 3, 1240, 620, 0, 4833, 4832, 1, 0, 0, 0, 4833, 4834,
        1, 0, 0, 0, 4834, 4836, 1, 0, 0, 0, 4835, 4778, 1, 0, 0, 0, 4835, 4802, 1, 0, 0, 0, 4835, 4831,
        1, 0, 0, 0, 4836, 603, 1, 0, 0, 0, 4837, 4838, 5, 618, 0, 0, 4838, 4839, 3, 1418, 709, 0, 4839,
        605, 1, 0, 0, 0, 4840, 4841, 5, 97, 0, 0, 4841, 4843, 5, 618, 0, 0, 4842, 4844, 3, 1184, 592,
        0, 4843, 4842, 1, 0, 0, 0, 4843, 4844, 1, 0, 0, 0, 4844, 4845, 1, 0, 0, 0, 4845, 4847, 3, 1216,
        608, 0, 4846, 4848, 3, 612, 306, 0, 4847, 4846, 1, 0, 0, 0, 4847, 4848, 1, 0, 0, 0, 4848, 4849,
        1, 0, 0, 0, 4849, 4850, 3, 608, 304, 0, 4850, 607, 1, 0, 0, 0, 4851, 4853, 3, 614, 307, 0, 4852,
        4851, 1, 0, 0, 0, 4852, 4853, 1, 0, 0, 0, 4853, 4855, 1, 0, 0, 0, 4854, 4856, 3, 616, 308, 0,
        4855, 4854, 1, 0, 0, 0, 4855, 4856, 1, 0, 0, 0, 4856, 4860, 1, 0, 0, 0, 4857, 4859, 3, 618, 309,
        0, 4858, 4857, 1, 0, 0, 0, 4859, 4862, 1, 0, 0, 0, 4860, 4858, 1, 0, 0, 0, 4860, 4861, 1, 0, 0,
        0, 4861, 4865, 1, 0, 0, 0, 4862, 4860, 1, 0, 0, 0, 4863, 4864, 4, 304, 47, 0, 4864, 4866, 3,
        610, 305, 0, 4865, 4863, 1, 0, 0, 0, 4865, 4866, 1, 0, 0, 0, 4866, 609, 1, 0, 0, 0, 4867, 4868,
        5, 797, 0, 0, 4868, 4872, 3, 1382, 691, 0, 4869, 4870, 5, 75, 0, 0, 4870, 4872, 3, 1382, 691,
        0, 4871, 4867, 1, 0, 0, 0, 4871, 4869, 1, 0, 0, 0, 4872, 611, 1, 0, 0, 0, 4873, 4874, 5, 128,
        0, 0, 4874, 4875, 5, 659, 0, 0, 4875, 4876, 3, 658, 329, 0, 4876, 613, 1, 0, 0, 0, 4877, 4880,
        5, 467, 0, 0, 4878, 4881, 3, 650, 325, 0, 4879, 4881, 7, 77, 0, 0, 4880, 4878, 1, 0, 0, 0, 4880,
        4879, 1, 0, 0, 0, 4881, 615, 1, 0, 0, 0, 4882, 4891, 5, 645, 0, 0, 4883, 4884, 5, 322, 0, 0, 4884,
        4892, 3, 1362, 681, 0, 4885, 4886, 5, 327, 0, 0, 4886, 4892, 3, 1362, 681, 0, 4887, 4888,
        5, 321, 0, 0, 4888, 4892, 3, 1362, 681, 0, 4889, 4890, 5, 328, 0, 0, 4890, 4892, 3, 1362, 681,
        0, 4891, 4883, 1, 0, 0, 0, 4891, 4885, 1, 0, 0, 0, 4891, 4887, 1, 0, 0, 0, 4891, 4889, 1, 0, 0,
        0, 4892, 4893, 1, 0, 0, 0, 4893, 4891, 1, 0, 0, 0, 4893, 4894, 1, 0, 0, 0, 4894, 617, 1, 0, 0,
        0, 4895, 4896, 5, 2, 0, 0, 4896, 4936, 7, 78, 0, 0, 4897, 4926, 5, 406, 0, 0, 4898, 4905, 5,
        177, 0, 0, 4899, 4900, 5, 247, 0, 0, 4900, 4901, 3, 1364, 682, 0, 4901, 4902, 5, 122, 0, 0,
        4902, 4906, 1, 0, 0, 0, 4903, 4906, 5, 365, 0, 0, 4904, 4906, 5, 128, 0, 0, 4905, 4899, 1, 0,
        0, 0, 4905, 4903, 1, 0, 0, 0, 4905, 4904, 1, 0, 0, 0, 4905, 4906, 1, 0, 0, 0, 4906, 4927, 1, 0,
        0, 0, 4907, 4910, 5, 705, 0, 0, 4908, 4911, 3, 1364, 682, 0, 4909, 4911, 5, 128, 0, 0, 4910,
        4908, 1, 0, 0, 0, 4910, 4909, 1, 0, 0, 0, 4911, 4927, 1, 0, 0, 0, 4912, 4913, 5, 706, 0, 0, 4913,
        4918, 5, 247, 0, 0, 4914, 4915, 3, 1364, 682, 0, 4915, 4916, 5, 122, 0, 0, 4916, 4919, 1, 0,
        0, 0, 4917, 4919, 5, 128, 0, 0, 4918, 4914, 1, 0, 0, 0, 4918, 4917, 1, 0, 0, 0, 4919, 4927, 1,
        0, 0, 0, 4920, 4921, 4, 309, 48, 0, 4921, 4922, 5, 467, 0, 0, 4922, 4924, 5, 101, 0, 0, 4923,
        4925, 7, 79, 0, 0, 4924, 4923, 1, 0, 0, 0, 4924, 4925, 1, 0, 0, 0, 4925, 4927, 1, 0, 0, 0, 4926,
        4898, 1, 0, 0, 0, 4926, 4907, 1, 0, 0, 0, 4926, 4912, 1, 0, 0, 0, 4926, 4920, 1, 0, 0, 0, 4927,
        4936, 1, 0, 0, 0, 4928, 4929, 5, 741, 0, 0, 4929, 4936, 3, 1364, 682, 0, 4930, 4933, 5, 740,
        0, 0, 4931, 4934, 3, 1364, 682, 0, 4932, 4934, 5, 698, 0, 0, 4933, 4931, 1, 0, 0, 0, 4933, 4932,
        1, 0, 0, 0, 4934, 4936, 1, 0, 0, 0, 4935, 4895, 1, 0, 0, 0, 4935, 4897, 1, 0, 0, 0, 4935, 4928,
        1, 0, 0, 0, 4935, 4930, 1, 0, 0, 0, 4936, 619, 1, 0, 0, 0, 4937, 4943, 1, 0, 0, 0, 4938, 4939,
        5, 797, 0, 0, 4939, 4943, 3, 1382, 691, 0, 4940, 4941, 5, 75, 0, 0, 4941, 4943, 3, 1382, 691,
        0, 4942, 4937, 1, 0, 0, 0, 4942, 4938, 1, 0, 0, 0, 4942, 4940, 1, 0, 0, 0, 4943, 621, 1, 0, 0,
        0, 4944, 4945, 5, 148, 0, 0, 4945, 4947, 5, 618, 0, 0, 4946, 4948, 3, 1182, 591, 0, 4947, 4946,
        1, 0, 0, 0, 4947, 4948, 1, 0, 0, 0, 4948, 4949, 1, 0, 0, 0, 4949, 4950, 3, 1214, 607, 0, 4950,
        623, 1, 0, 0, 0, 4951, 4993, 5, 215, 0, 0, 4952, 4953, 3, 644, 322, 0, 4953, 4954, 5, 590, 0,
        0, 4954, 4958, 3, 1214, 607, 0, 4955, 4956, 5, 645, 0, 0, 4956, 4957, 5, 660, 0, 0, 4957, 4959,
        5, 391, 0, 0, 4958, 4955, 1, 0, 0, 0, 4958, 4959, 1, 0, 0, 0, 4959, 4994, 1, 0, 0, 0, 4960, 4966,
        3, 644, 322, 0, 4961, 4963, 5, 10, 0, 0, 4962, 4964, 5, 421, 0, 0, 4963, 4962, 1, 0, 0, 0, 4963,
        4964, 1, 0, 0, 0, 4964, 4966, 1, 0, 0, 0, 4965, 4960, 1, 0, 0, 0, 4965, 4961, 1, 0, 0, 0, 4966,
        4967, 1, 0, 0, 0, 4967, 4969, 5, 383, 0, 0, 4968, 4970, 3, 642, 321, 0, 4969, 4968, 1, 0, 0,
        0, 4969, 4970, 1, 0, 0, 0, 4970, 4971, 1, 0, 0, 0, 4971, 4972, 3, 648, 324, 0, 4972, 4973, 5,
        590, 0, 0, 4973, 4975, 3, 626, 313, 0, 4974, 4976, 3, 636, 318, 0, 4975, 4974, 1, 0, 0, 0, 4975,
        4976, 1, 0, 0, 0, 4976, 4978, 1, 0, 0, 0, 4977, 4979, 3, 628, 314, 0, 4978, 4977, 1, 0, 0, 0,
        4978, 4979, 1, 0, 0, 0, 4979, 4981, 1, 0, 0, 0, 4980, 4982, 3, 634, 317, 0, 4981, 4980, 1, 0,
        0, 0, 4981, 4982, 1, 0, 0, 0, 4982, 4994, 1, 0, 0, 0, 4983, 4984, 5, 427, 0, 0, 4984, 4985, 5,
        383, 0, 0, 4985, 4986, 3, 1250, 625, 0, 4986, 4987, 5, 590, 0, 0, 4987, 4991, 3, 626, 313,
        0, 4988, 4989, 5, 645, 0, 0, 4989, 4990, 5, 215, 0, 0, 4990, 4992, 5, 391, 0, 0, 4991, 4988,
        1, 0, 0, 0, 4991, 4992, 1, 0, 0, 0, 4992, 4994, 1, 0, 0, 0, 4993, 4952, 1, 0, 0, 0, 4993, 4965,
        1, 0, 0, 0, 4993, 4983, 1, 0, 0, 0, 4994, 625, 1, 0, 0, 0, 4995, 4996, 4, 313, 49, 0, 4996, 5000,
        3, 1216, 608, 0, 4997, 4998, 4, 313, 50, 0, 4998, 5000, 3, 1214, 607, 0, 4999, 4995, 1, 0,
        0, 0, 4999, 4997, 1, 0, 0, 0, 5000, 627, 1, 0, 0, 0, 5001, 5002, 4, 314, 51, 0, 5002, 5004, 5,
        645, 0, 0, 5003, 5005, 3, 654, 327, 0, 5004, 5003, 1, 0, 0, 0, 5005, 5006, 1, 0, 0, 0, 5006,
        5004, 1, 0, 0, 0, 5006, 5007, 1, 0, 0, 0, 5007, 5013, 1, 0, 0, 0, 5008, 5009, 4, 314, 52, 0, 5009,
        5010, 5, 645, 0, 0, 5010, 5011, 5, 215, 0, 0, 5011, 5013, 5, 391, 0, 0, 5012, 5001, 1, 0, 0,
        0, 5012, 5008, 1, 0, 0, 0, 5013, 629, 1, 0, 0, 0, 5014, 5015, 5, 663, 0, 0, 5015, 5016, 3, 658,
        329, 0, 5016, 631, 1, 0, 0, 0, 5017, 5018, 5, 645, 0, 0, 5018, 5026, 5, 659, 0, 0, 5019, 5027,
        3, 658, 329, 0, 5020, 5022, 5, 10, 0, 0, 5021, 5023, 3, 630, 315, 0, 5022, 5021, 1, 0, 0, 0,
        5022, 5023, 1, 0, 0, 0, 5023, 5027, 1, 0, 0, 0, 5024, 5027, 5, 369, 0, 0, 5025, 5027, 5, 128,
        0, 0, 5026, 5019, 1, 0, 0, 0, 5026, 5020, 1, 0, 0, 0, 5026, 5024, 1, 0, 0, 0, 5026, 5025, 1, 0,
        0, 0, 5027, 633, 1, 0, 0, 0, 5028, 5029, 5, 17, 0, 0, 5029, 5031, 5, 618, 0, 0, 5030, 5032, 3,
        632, 316, 0, 5031, 5030, 1, 0, 0, 0, 5031, 5032, 1, 0, 0, 0, 5032, 635, 1, 0, 0, 0, 5033, 5034,
        4, 318, 53, 0, 5034, 5035, 3, 614, 307, 0, 5035, 637, 1, 0, 0, 0, 5036, 5037, 5, 453, 0, 0, 5037,
        5038, 5, 618, 0, 0, 5038, 5039, 3, 1250, 625, 0, 5039, 5040, 5, 590, 0, 0, 5040, 5048, 3, 1250,
        625, 0, 5041, 5042, 5, 773, 0, 0, 5042, 5043, 3, 1250, 625, 0, 5043, 5044, 5, 590, 0, 0, 5044,
        5045, 3, 1250, 625, 0, 5045, 5047, 1, 0, 0, 0, 5046, 5041, 1, 0, 0, 0, 5047, 5050, 1, 0, 0, 0,
        5048, 5046, 1, 0, 0, 0, 5048, 5049, 1, 0, 0, 0, 5049, 639, 1, 0, 0, 0, 5050, 5048, 1, 0, 0, 0,
        5051, 5054, 5, 477, 0, 0, 5052, 5053, 4, 320, 54, 0, 5053, 5055, 3, 1182, 591, 0, 5054, 5052,
        1, 0, 0, 0, 5054, 5055, 1, 0, 0, 0, 5055, 5091, 1, 0, 0, 0, 5056, 5057, 3, 644, 322, 0, 5057,
        5058, 5, 203, 0, 0, 5058, 5059, 3, 1214, 607, 0, 5059, 5092, 1, 0, 0, 0, 5060, 5061, 3, 644,
        322, 0, 5061, 5063, 5, 383, 0, 0, 5062, 5064, 3, 642, 321, 0, 5063, 5062, 1, 0, 0, 0, 5063,
        5064, 1, 0, 0, 0, 5064, 5065, 1, 0, 0, 0, 5065, 5066, 3, 648, 324, 0, 5066, 5067, 5, 203, 0,
        0, 5067, 5068, 3, 1214, 607, 0, 5068, 5092, 1, 0, 0, 0, 5069, 5071, 5, 10, 0, 0, 5070, 5072,
        5, 421, 0, 0, 5071, 5070, 1, 0, 0, 0, 5071, 5072, 1, 0, 0, 0, 5072, 5081, 1, 0, 0, 0, 5073, 5075,
        5, 383, 0, 0, 5074, 5076, 3, 642, 321, 0, 5075, 5074, 1, 0, 0, 0, 5075, 5076, 1, 0, 0, 0, 5076,
        5077, 1, 0, 0, 0, 5077, 5082, 3, 648, 324, 0, 5078, 5079, 5, 773, 0, 0, 5079, 5080, 5, 215,
        0, 0, 5080, 5082, 5, 391, 0, 0, 5081, 5073, 1, 0, 0, 0, 5081, 5078, 1, 0, 0, 0, 5082, 5083, 1,
        0, 0, 0, 5083, 5084, 5, 203, 0, 0, 5084, 5092, 3, 1214, 607, 0, 5085, 5086, 5, 427, 0, 0, 5086,
        5087, 5, 383, 0, 0, 5087, 5088, 3, 1250, 625, 0, 5088, 5089, 5, 203, 0, 0, 5089, 5090, 3, 1214,
        607, 0, 5090, 5092, 1, 0, 0, 0, 5091, 5056, 1, 0, 0, 0, 5091, 5060, 1, 0, 0, 0, 5091, 5069, 1,
        0, 0, 0, 5091, 5085, 1, 0, 0, 0, 5092, 5095, 1, 0, 0, 0, 5093, 5094, 4, 320, 55, 0, 5094, 5096,
        3, 1186, 593, 0, 5095, 5093, 1, 0, 0, 0, 5095, 5096, 1, 0, 0, 0, 5096, 641, 1, 0, 0, 0, 5097,
        5098, 7, 80, 0, 0, 5098, 643, 1, 0, 0, 0, 5099, 5104, 3, 646, 323, 0, 5100, 5101, 5, 773, 0,
        0, 5101, 5103, 3, 646, 323, 0, 5102, 5100, 1, 0, 0, 0, 5103, 5106, 1, 0, 0, 0, 5104, 5102, 1,
        0, 0, 0, 5104, 5105, 1, 0, 0, 0, 5105, 645, 1, 0, 0, 0, 5106, 5104, 1, 0, 0, 0, 5107, 5109, 3,
        1414, 707, 0, 5108, 5110, 3, 1268, 634, 0, 5109, 5108, 1, 0, 0, 0, 5109, 5110, 1, 0, 0, 0, 5110,
        5118, 1, 0, 0, 0, 5111, 5115, 3, 1414, 707, 0, 5112, 5116, 5, 784, 0, 0, 5113, 5114, 5, 783,
        0, 0, 5114, 5116, 3, 1410, 705, 0, 5115, 5112, 1, 0, 0, 0, 5115, 5113, 1, 0, 0, 0, 5116, 5118,
        1, 0, 0, 0, 5117, 5107, 1, 0, 0, 0, 5117, 5111, 1, 0, 0, 0, 5118, 5150, 1, 0, 0, 0, 5119, 5121,
        7, 81, 0, 0, 5120, 5122, 3, 1268, 634, 0, 5121, 5120, 1, 0, 0, 0, 5121, 5122, 1, 0, 0, 0, 5122,
        5150, 1, 0, 0, 0, 5123, 5150, 7, 82, 0, 0, 5124, 5125, 5, 215, 0, 0, 5125, 5150, 5, 391, 0, 0,
        5126, 5127, 5, 509, 0, 0, 5127, 5150, 5, 110, 0, 0, 5128, 5132, 5, 97, 0, 0, 5129, 5130, 5,
        577, 0, 0, 5130, 5133, 5, 571, 0, 0, 5131, 5133, 7, 83, 0, 0, 5132, 5129, 1, 0, 0, 0, 5132, 5131,
        1, 0, 0, 0, 5132, 5133, 1, 0, 0, 0, 5133, 5150, 1, 0, 0, 0, 5134, 5135, 5, 287, 0, 0, 5135, 5150,
        5, 571, 0, 0, 5136, 5139, 5, 459, 0, 0, 5137, 5140, 5, 65, 0, 0, 5138, 5140, 3, 580, 290, 0,
        5139, 5137, 1, 0, 0, 0, 5139, 5138, 1, 0, 0, 0, 5140, 5150, 1, 0, 0, 0, 5141, 5142, 5, 509, 0,
        0, 5142, 5150, 5, 636, 0, 0, 5143, 5145, 5, 11, 0, 0, 5144, 5146, 5, 483, 0, 0, 5145, 5144,
        1, 0, 0, 0, 5145, 5146, 1, 0, 0, 0, 5146, 5150, 1, 0, 0, 0, 5147, 5148, 7, 84, 0, 0, 5148, 5150,
        5, 659, 0, 0, 5149, 5117, 1, 0, 0, 0, 5149, 5119, 1, 0, 0, 0, 5149, 5123, 1, 0, 0, 0, 5149, 5124,
        1, 0, 0, 0, 5149, 5126, 1, 0, 0, 0, 5149, 5128, 1, 0, 0, 0, 5149, 5134, 1, 0, 0, 0, 5149, 5136,
        1, 0, 0, 0, 5149, 5141, 1, 0, 0, 0, 5149, 5143, 1, 0, 0, 0, 5149, 5147, 1, 0, 0, 0, 5150, 647,
        1, 0, 0, 0, 5151, 5154, 5, 760, 0, 0, 5152, 5153, 5, 772, 0, 0, 5153, 5155, 5, 760, 0, 0, 5154,
        5152, 1, 0, 0, 0, 5154, 5155, 1, 0, 0, 0, 5155, 5168, 1, 0, 0, 0, 5156, 5159, 3, 1282, 641, 0,
        5157, 5158, 5, 772, 0, 0, 5158, 5160, 5, 760, 0, 0, 5159, 5157, 1, 0, 0, 0, 5159, 5160, 1, 0,
        0, 0, 5160, 5168, 1, 0, 0, 0, 5161, 5168, 3, 1326, 663, 0, 5162, 5163, 4, 324, 56, 0, 5163,
        5164, 3, 1282, 641, 0, 5164, 5165, 5, 772, 0, 0, 5165, 5166, 3, 1326, 663, 0, 5166, 5168,
        1, 0, 0, 0, 5167, 5151, 1, 0, 0, 0, 5167, 5156, 1, 0, 0, 0, 5167, 5161, 1, 0, 0, 0, 5167, 5162,
        1, 0, 0, 0, 5168, 649, 1, 0, 0, 0, 5169, 5176, 3, 652, 326, 0, 5170, 5172, 5, 15, 0, 0, 5171,
        5170, 1, 0, 0, 0, 5171, 5172, 1, 0, 0, 0, 5172, 5173, 1, 0, 0, 0, 5173, 5175, 3, 652, 326, 0,
        5174, 5171, 1, 0, 0, 0, 5175, 5178, 1, 0, 0, 0, 5176, 5174, 1, 0, 0, 0, 5176, 5177, 1, 0, 0, 0,
        5177, 651, 1, 0, 0, 0, 5178, 5176, 1, 0, 0, 0, 5179, 5180, 5, 63, 0, 0, 5180, 5186, 3, 1384,
        692, 0, 5181, 5182, 5, 259, 0, 0, 5182, 5186, 3, 1384, 692, 0, 5183, 5184, 5, 559, 0, 0, 5184,
        5186, 3, 1384, 692, 0, 5185, 5179, 1, 0, 0, 0, 5185, 5181, 1, 0, 0, 0, 5185, 5183, 1, 0, 0, 0,
        5186, 653, 1, 0, 0, 0, 5187, 5188, 5, 215, 0, 0, 5188, 5198, 5, 391, 0, 0, 5189, 5190, 5, 322,
        0, 0, 5190, 5198, 3, 1362, 681, 0, 5191, 5192, 5, 327, 0, 0, 5192, 5198, 3, 1362, 681, 0, 5193,
        5194, 5, 321, 0, 0, 5194, 5198, 3, 1362, 681, 0, 5195, 5196, 5, 328, 0, 0, 5196, 5198, 3, 1362,
        681, 0, 5197, 5187, 1, 0, 0, 0, 5197, 5189, 1, 0, 0, 0, 5197, 5191, 1, 0, 0, 0, 5197, 5193, 1,
        0, 0, 0, 5197, 5195, 1, 0, 0, 0, 5198, 655, 1, 0, 0, 0, 5199, 5200, 5, 506, 0, 0, 5200, 5201,
        5, 659, 0, 0, 5201, 5223, 3, 658, 329, 0, 5202, 5203, 5, 506, 0, 0, 5203, 5204, 5, 659, 0, 0,
        5204, 5223, 7, 85, 0, 0, 5205, 5206, 5, 506, 0, 0, 5206, 5207, 5, 128, 0, 0, 5207, 5211, 5,
        659, 0, 0, 5208, 5212, 3, 658, 329, 0, 5209, 5212, 5, 369, 0, 0, 5210, 5212, 5, 10, 0, 0, 5211,
        5208, 1, 0, 0, 0, 5211, 5209, 1, 0, 0, 0, 5211, 5210, 1, 0, 0, 0, 5212, 5213, 1, 0, 0, 0, 5213,
        5214, 5, 590, 0, 0, 5214, 5223, 3, 658, 329, 0, 5215, 5216, 5, 506, 0, 0, 5216, 5217, 5, 659,
        0, 0, 5217, 5220, 5, 10, 0, 0, 5218, 5219, 5, 663, 0, 0, 5219, 5221, 3, 658, 329, 0, 5220, 5218,
        1, 0, 0, 0, 5220, 5221, 1, 0, 0, 0, 5221, 5223, 1, 0, 0, 0, 5222, 5199, 1, 0, 0, 0, 5222, 5202,
        1, 0, 0, 0, 5222, 5205, 1, 0, 0, 0, 5222, 5215, 1, 0, 0, 0, 5223, 657, 1, 0, 0, 0, 5224, 5229,
        3, 660, 330, 0, 5225, 5226, 5, 773, 0, 0, 5226, 5228, 3, 660, 330, 0, 5227, 5225, 1, 0, 0, 0,
        5228, 5231, 1, 0, 0, 0, 5229, 5227, 1, 0, 0, 0, 5229, 5230, 1, 0, 0, 0, 5230, 659, 1, 0, 0, 0,
        5231, 5229, 1, 0, 0, 0, 5232, 5234, 3, 1414, 707, 0, 5233, 5235, 3, 932, 466, 0, 5234, 5233,
        1, 0, 0, 0, 5234, 5235, 1, 0, 0, 0, 5235, 661, 1, 0, 0, 0, 5236, 5238, 5, 14, 0, 0, 5237, 5239,
        3, 1258, 629, 0, 5238, 5237, 1, 0, 0, 0, 5238, 5239, 1, 0, 0, 0, 5239, 5240, 1, 0, 0, 0, 5240,
        5241, 5, 574, 0, 0, 5241, 5243, 3, 1328, 664, 0, 5242, 5244, 3, 664, 332, 0, 5243, 5242, 1,
        0, 0, 0, 5243, 5244, 1, 0, 0, 0, 5244, 5279, 1, 0, 0, 0, 5245, 5246, 5, 62, 0, 0, 5246, 5247,
        5, 574, 0, 0, 5247, 5251, 3, 1328, 664, 0, 5248, 5250, 3, 666, 333, 0, 5249, 5248, 1, 0, 0,
        0, 5250, 5253, 1, 0, 0, 0, 5251, 5249, 1, 0, 0, 0, 5251, 5252, 1, 0, 0, 0, 5252, 5279, 1, 0, 0,
        0, 5253, 5251, 1, 0, 0, 0, 5254, 5255, 5, 61, 0, 0, 5255, 5256, 5, 574, 0, 0, 5256, 5258, 3,
        1328, 664, 0, 5257, 5259, 7, 86, 0, 0, 5258, 5257, 1, 0, 0, 0, 5258, 5259, 1, 0, 0, 0, 5259,
        5279, 1, 0, 0, 0, 5260, 5262, 5, 388, 0, 0, 5261, 5263, 3, 1258, 629, 0, 5262, 5261, 1, 0, 0,
        0, 5262, 5263, 1, 0, 0, 0, 5263, 5264, 1, 0, 0, 0, 5264, 5265, 5, 574, 0, 0, 5265, 5279, 3, 1328,
        664, 0, 5266, 5268, 5, 455, 0, 0, 5267, 5269, 3, 1258, 629, 0, 5268, 5267, 1, 0, 0, 0, 5268,
        5269, 1, 0, 0, 0, 5269, 5270, 1, 0, 0, 0, 5270, 5271, 5, 574, 0, 0, 5271, 5275, 3, 1328, 664,
        0, 5272, 5274, 3, 668, 334, 0, 5273, 5272, 1, 0, 0, 0, 5274, 5277, 1, 0, 0, 0, 5275, 5273, 1,
        0, 0, 0, 5275, 5276, 1, 0, 0, 0, 5276, 5279, 1, 0, 0, 0, 5277, 5275, 1, 0, 0, 0, 5278, 5236, 1,
        0, 0, 0, 5278, 5245, 1, 0, 0, 0, 5278, 5254, 1, 0, 0, 0, 5278, 5260, 1, 0, 0, 0, 5278, 5266, 1,
        0, 0, 0, 5279, 663, 1, 0, 0, 0, 5280, 5281, 5, 614, 0, 0, 5281, 5282, 5, 674, 0, 0, 5282, 5283,
        5, 383, 0, 0, 5283, 5291, 3, 1352, 676, 0, 5284, 5285, 5, 645, 0, 0, 5285, 5286, 5, 747, 0,
        0, 5286, 5292, 5, 675, 0, 0, 5287, 5288, 4, 332, 57, 0, 5288, 5289, 5, 621, 0, 0, 5289, 5290,
        5, 112, 0, 0, 5290, 5292, 3, 1382, 691, 0, 5291, 5284, 1, 0, 0, 0, 5291, 5287, 1, 0, 0, 0, 5291,
        5292, 1, 0, 0, 0, 5292, 5298, 1, 0, 0, 0, 5293, 5294, 5, 148, 0, 0, 5294, 5295, 5, 674, 0, 0,
        5295, 5296, 5, 383, 0, 0, 5296, 5298, 3, 1352, 676, 0, 5297, 5280, 1, 0, 0, 0, 5297, 5293,
        1, 0, 0, 0, 5298, 665, 1, 0, 0, 0, 5299, 5300, 5, 200, 0, 0, 5300, 5303, 5, 615, 0, 0, 5301, 5303,
        7, 87, 0, 0, 5302, 5299, 1, 0, 0, 0, 5302, 5301, 1, 0, 0, 0, 5303, 667, 1, 0, 0, 0, 5304, 5305,
        7, 88, 0, 0, 5305, 669, 1, 0, 0, 0, 5306, 5307, 5, 245, 0, 0, 5307, 5308, 5, 410, 0, 0, 5308,
        5309, 3, 1350, 675, 0, 5309, 5310, 5, 520, 0, 0, 5310, 5311, 3, 1382, 691, 0, 5311, 5329,
        1, 0, 0, 0, 5312, 5313, 5, 245, 0, 0, 5313, 5314, 5, 664, 0, 0, 5314, 5329, 3, 1392, 696, 0,
        5315, 5316, 5, 607, 0, 0, 5316, 5317, 5, 410, 0, 0, 5317, 5329, 3, 1340, 670, 0, 5318, 5319,
        5, 607, 0, 0, 5319, 5320, 5, 664, 0, 0, 5320, 5325, 3, 1342, 671, 0, 5321, 5322, 5, 773, 0,
        0, 5322, 5324, 3, 1342, 671, 0, 5323, 5321, 1, 0, 0, 0, 5324, 5327, 1, 0, 0, 0, 5325, 5323,
        1, 0, 0, 0, 5325, 5326, 1, 0, 0, 0, 5326, 5329, 1, 0, 0, 0, 5327, 5325, 1, 0, 0, 0, 5328, 5306,
        1, 0, 0, 0, 5328, 5312, 1, 0, 0, 0, 5328, 5315, 1, 0, 0, 0, 5328, 5318, 1, 0, 0, 0, 5329, 671,
        1, 0, 0, 0, 5330, 5331, 5, 506, 0, 0, 5331, 5332, 3, 674, 337, 0, 5332, 673, 1, 0, 0, 0, 5333,
        5334, 3, 684, 342, 0, 5334, 5335, 3, 682, 341, 0, 5335, 5384, 1, 0, 0, 0, 5336, 5337, 5, 592,
        0, 0, 5337, 5384, 3, 676, 338, 0, 5338, 5339, 3, 1422, 711, 0, 5339, 5340, 3, 690, 345, 0,
        5340, 5384, 1, 0, 0, 0, 5341, 5344, 5, 406, 0, 0, 5342, 5343, 5, 200, 0, 0, 5343, 5345, 3, 1250,
        625, 0, 5344, 5342, 1, 0, 0, 0, 5344, 5345, 1, 0, 0, 0, 5345, 5346, 1, 0, 0, 0, 5346, 5367, 3,
        1420, 710, 0, 5347, 5349, 3, 1384, 692, 0, 5348, 5350, 3, 1246, 623, 0, 5349, 5348, 1, 0,
        0, 0, 5349, 5350, 1, 0, 0, 0, 5350, 5352, 1, 0, 0, 0, 5351, 5353, 3, 1238, 619, 0, 5352, 5351,
        1, 0, 0, 0, 5352, 5353, 1, 0, 0, 0, 5353, 5368, 1, 0, 0, 0, 5354, 5356, 3, 1384, 692, 0, 5355,
        5357, 3, 1246, 623, 0, 5356, 5355, 1, 0, 0, 0, 5356, 5357, 1, 0, 0, 0, 5357, 5359, 1, 0, 0, 0,
        5358, 5360, 3, 1238, 619, 0, 5359, 5358, 1, 0, 0, 0, 5359, 5360, 1, 0, 0, 0, 5360, 5368, 1,
        0, 0, 0, 5361, 5362, 4, 337, 58, 0, 5362, 5363, 5, 406, 0, 0, 5363, 5364, 5, 776, 0, 0, 5364,
        5365, 3, 1384, 692, 0, 5365, 5366, 5, 777, 0, 0, 5366, 5368, 1, 0, 0, 0, 5367, 5347, 1, 0, 0,
        0, 5367, 5354, 1, 0, 0, 0, 5367, 5361, 1, 0, 0, 0, 5368, 5384, 1, 0, 0, 0, 5369, 5370, 4, 337,
        59, 0, 5370, 5373, 5, 406, 0, 0, 5371, 5372, 5, 200, 0, 0, 5372, 5374, 3, 1250, 625, 0, 5373,
        5371, 1, 0, 0, 0, 5373, 5374, 1, 0, 0, 0, 5374, 5375, 1, 0, 0, 0, 5375, 5376, 5, 590, 0, 0, 5376,
        5378, 5, 734, 0, 0, 5377, 5379, 3, 1246, 623, 0, 5378, 5377, 1, 0, 0, 0, 5378, 5379, 1, 0, 0,
        0, 5379, 5381, 1, 0, 0, 0, 5380, 5382, 3, 1238, 619, 0, 5381, 5380, 1, 0, 0, 0, 5381, 5382,
        1, 0, 0, 0, 5382, 5384, 1, 0, 0, 0, 5383, 5333, 1, 0, 0, 0, 5383, 5336, 1, 0, 0, 0, 5383, 5338,
        1, 0, 0, 0, 5383, 5341, 1, 0, 0, 0, 5383, 5369, 1, 0, 0, 0, 5384, 675, 1, 0, 0, 0, 5385, 5387,
        3, 678, 339, 0, 5386, 5388, 3, 680, 340, 0, 5387, 5386, 1, 0, 0, 0, 5387, 5388, 1, 0, 0, 0, 5388,
        5395, 1, 0, 0, 0, 5389, 5392, 3, 680, 340, 0, 5390, 5391, 5, 773, 0, 0, 5391, 5393, 3, 678,
        339, 0, 5392, 5390, 1, 0, 0, 0, 5392, 5393, 1, 0, 0, 0, 5393, 5395, 1, 0, 0, 0, 5394, 5385, 1,
        0, 0, 0, 5394, 5389, 1, 0, 0, 0, 5395, 677, 1, 0, 0, 0, 5396, 5397, 5, 435, 0, 0, 5397, 5398,
        7, 40, 0, 0, 5398, 679, 1, 0, 0, 0, 5399, 5400, 5, 258, 0, 0, 5400, 5406, 5, 274, 0, 0, 5401,
        5402, 5, 456, 0, 0, 5402, 5407, 5, 435, 0, 0, 5403, 5404, 5, 435, 0, 0, 5404, 5407, 7, 89, 0,
        0, 5405, 5407, 5, 500, 0, 0, 5406, 5401, 1, 0, 0, 0, 5406, 5403, 1, 0, 0, 0, 5406, 5405, 1, 0,
        0, 0, 5407, 681, 1, 0, 0, 0, 5408, 5409, 5, 773, 0, 0, 5409, 5411, 3, 686, 343, 0, 5410, 5408,
        1, 0, 0, 0, 5411, 5414, 1, 0, 0, 0, 5412, 5410, 1, 0, 0, 0, 5412, 5413, 1, 0, 0, 0, 5413, 683,
        1, 0, 0, 0, 5414, 5412, 1, 0, 0, 0, 5415, 5416, 3, 938, 469, 0, 5416, 5417, 3, 1420, 710, 0,
        5417, 5418, 3, 694, 347, 0, 5418, 5445, 1, 0, 0, 0, 5419, 5445, 3, 1204, 602, 0, 5420, 5421,
        3, 932, 466, 0, 5421, 5422, 3, 1420, 710, 0, 5422, 5423, 3, 862, 431, 0, 5423, 5445, 1, 0,
        0, 0, 5424, 5426, 5, 785, 0, 0, 5425, 5427, 3, 1426, 713, 0, 5426, 5425, 1, 0, 0, 0, 5426, 5427,
        1, 0, 0, 0, 5427, 5428, 1, 0, 0, 0, 5428, 5429, 3, 938, 469, 0, 5429, 5430, 3, 1420, 710, 0,
        5430, 5431, 3, 694, 347, 0, 5431, 5445, 1, 0, 0, 0, 5432, 5442, 5, 356, 0, 0, 5433, 5434, 3,
        1420, 710, 0, 5434, 5435, 3, 862, 431, 0, 5435, 5443, 1, 0, 0, 0, 5436, 5438, 3, 1136, 568,
        0, 5437, 5439, 3, 1192, 596, 0, 5438, 5437, 1, 0, 0, 0, 5438, 5439, 1, 0, 0, 0, 5439, 5443,
        1, 0, 0, 0, 5440, 5441, 4, 342, 60, 0, 5441, 5443, 5, 128, 0, 0, 5442, 5433, 1, 0, 0, 0, 5442,
        5436, 1, 0, 0, 0, 5442, 5440, 1, 0, 0, 0, 5443, 5445, 1, 0, 0, 0, 5444, 5415, 1, 0, 0, 0, 5444,
        5419, 1, 0, 0, 0, 5444, 5420, 1, 0, 0, 0, 5444, 5424, 1, 0, 0, 0, 5444, 5432, 1, 0, 0, 0, 5445,
        685, 1, 0, 0, 0, 5446, 5447, 3, 1422, 711, 0, 5447, 5448, 3, 938, 469, 0, 5448, 5449, 3, 1420,
        710, 0, 5449, 5450, 3, 694, 347, 0, 5450, 5453, 1, 0, 0, 0, 5451, 5453, 3, 684, 342, 0, 5452,
        5446, 1, 0, 0, 0, 5452, 5451, 1, 0, 0, 0, 5453, 687, 1, 0, 0, 0, 5454, 5456, 5, 785, 0, 0, 5455,
        5457, 3, 1426, 713, 0, 5456, 5455, 1, 0, 0, 0, 5456, 5457, 1, 0, 0, 0, 5457, 5458, 1, 0, 0, 0,
        5458, 5459, 3, 938, 469, 0, 5459, 689, 1, 0, 0, 0, 5460, 5461, 3, 692, 346, 0, 5461, 5462,
        3, 682, 341, 0, 5462, 5466, 1, 0, 0, 0, 5463, 5464, 5, 592, 0, 0, 5464, 5466, 3, 676, 338, 0,
        5465, 5460, 1, 0, 0, 0, 5465, 5463, 1, 0, 0, 0, 5466, 691, 1, 0, 0, 0, 5467, 5468, 3, 938, 469,
        0, 5468, 5469, 3, 1420, 710, 0, 5469, 5470, 3, 694, 347, 0, 5470, 693, 1, 0, 0, 0, 5471, 5479,
        3, 862, 431, 0, 5472, 5479, 5, 128, 0, 0, 5473, 5479, 5, 383, 0, 0, 5474, 5479, 5, 10, 0, 0,
        5475, 5479, 5, 32, 0, 0, 5476, 5479, 5, 487, 0, 0, 5477, 5479, 5, 710, 0, 0, 5478, 5471, 1,
        0, 0, 0, 5478, 5472, 1, 0, 0, 0, 5478, 5473, 1, 0, 0, 0, 5478, 5474, 1, 0, 0, 0, 5478, 5475, 1,
        0, 0, 0, 5478, 5476, 1, 0, 0, 0, 5478, 5477, 1, 0, 0, 0, 5479, 695, 1, 0, 0, 0, 5480, 5481, 5,
        509, 0, 0, 5481, 5483, 5, 110, 0, 0, 5482, 5484, 3, 1254, 627, 0, 5483, 5482, 1, 0, 0, 0, 5483,
        5484, 1, 0, 0, 0, 5484, 697, 1, 0, 0, 0, 5485, 5487, 5, 509, 0, 0, 5486, 5488, 3, 784, 392, 0,
        5487, 5486, 1, 0, 0, 0, 5487, 5488, 1, 0, 0, 0, 5488, 5489, 1, 0, 0, 0, 5489, 5491, 5, 571, 0,
        0, 5490, 5492, 3, 790, 395, 0, 5491, 5490, 1, 0, 0, 0, 5491, 5492, 1, 0, 0, 0, 5492, 5494, 1,
        0, 0, 0, 5493, 5495, 3, 1254, 627, 0, 5494, 5493, 1, 0, 0, 0, 5494, 5495, 1, 0, 0, 0, 5495, 699,
        1, 0, 0, 0, 5496, 5498, 5, 509, 0, 0, 5497, 5499, 5, 204, 0, 0, 5498, 5497, 1, 0, 0, 0, 5498,
        5499, 1, 0, 0, 0, 5499, 5500, 1, 0, 0, 0, 5500, 5502, 5, 593, 0, 0, 5501, 5503, 3, 790, 395,
        0, 5502, 5501, 1, 0, 0, 0, 5502, 5503, 1, 0, 0, 0, 5503, 5505, 1, 0, 0, 0, 5504, 5506, 3, 1254,
        627, 0, 5505, 5504, 1, 0, 0, 0, 5505, 5506, 1, 0, 0, 0, 5506, 701, 1, 0, 0, 0, 5507, 5508, 5,
        509, 0, 0, 5508, 5510, 5, 169, 0, 0, 5509, 5511, 3, 790, 395, 0, 5510, 5509, 1, 0, 0, 0, 5510,
        5511, 1, 0, 0, 0, 5511, 5513, 1, 0, 0, 0, 5512, 5514, 3, 1254, 627, 0, 5513, 5512, 1, 0, 0, 0,
        5513, 5514, 1, 0, 0, 0, 5514, 703, 1, 0, 0, 0, 5515, 5516, 5, 509, 0, 0, 5516, 5517, 5, 574,
        0, 0, 5517, 5519, 5, 547, 0, 0, 5518, 5520, 3, 790, 395, 0, 5519, 5518, 1, 0, 0, 0, 5519, 5520,
        1, 0, 0, 0, 5520, 5522, 1, 0, 0, 0, 5521, 5523, 3, 1254, 627, 0, 5522, 5521, 1, 0, 0, 0, 5522,
        5523, 1, 0, 0, 0, 5523, 705, 1, 0, 0, 0, 5524, 5525, 5, 509, 0, 0, 5525, 5526, 5, 387, 0, 0, 5526,
        5528, 5, 571, 0, 0, 5527, 5529, 3, 790, 395, 0, 5528, 5527, 1, 0, 0, 0, 5528, 5529, 1, 0, 0,
        0, 5529, 5531, 1, 0, 0, 0, 5530, 5532, 3, 1254, 627, 0, 5531, 5530, 1, 0, 0, 0, 5531, 5532,
        1, 0, 0, 0, 5532, 707, 1, 0, 0, 0, 5533, 5534, 5, 509, 0, 0, 5534, 5535, 5, 408, 0, 0, 5535, 709,
        1, 0, 0, 0, 5536, 5537, 5, 509, 0, 0, 5537, 5538, 5, 163, 0, 0, 5538, 5539, 3, 786, 393, 0, 5539,
        5540, 5, 289, 0, 0, 5540, 711, 1, 0, 0, 0, 5541, 5542, 5, 509, 0, 0, 5542, 5543, 5, 163, 0, 0,
        5543, 5544, 3, 786, 393, 0, 5544, 5545, 5, 354, 0, 0, 5545, 713, 1, 0, 0, 0, 5546, 5547, 5,
        509, 0, 0, 5547, 5548, 5, 163, 0, 0, 5548, 5549, 3, 786, 393, 0, 5549, 5550, 5, 547, 0, 0, 5550,
        715, 1, 0, 0, 0, 5551, 5553, 5, 509, 0, 0, 5552, 5554, 3, 784, 392, 0, 5553, 5552, 1, 0, 0, 0,
        5553, 5554, 1, 0, 0, 0, 5554, 5555, 1, 0, 0, 0, 5555, 5556, 5, 71, 0, 0, 5556, 5557, 7, 90, 0,
        0, 5557, 5559, 3, 1326, 663, 0, 5558, 5560, 3, 790, 395, 0, 5559, 5558, 1, 0, 0, 0, 5559, 5560,
        1, 0, 0, 0, 5560, 5562, 1, 0, 0, 0, 5561, 5563, 3, 1254, 627, 0, 5562, 5561, 1, 0, 0, 0, 5562,
        5563, 1, 0, 0, 0, 5563, 717, 1, 0, 0, 0, 5564, 5565, 5, 509, 0, 0, 5565, 5566, 7, 44, 0, 0, 5566,
        5567, 5, 289, 0, 0, 5567, 719, 1, 0, 0, 0, 5568, 5573, 5, 509, 0, 0, 5569, 5570, 3, 580, 290,
        0, 5570, 5571, 5, 225, 0, 0, 5571, 5574, 1, 0, 0, 0, 5572, 5574, 5, 804, 0, 0, 5573, 5569, 1,
        0, 0, 0, 5573, 5572, 1, 0, 0, 0, 5574, 721, 1, 0, 0, 0, 5575, 5576, 5, 509, 0, 0, 5576, 5577,
        5, 33, 0, 0, 5577, 5580, 5, 169, 0, 0, 5578, 5579, 5, 251, 0, 0, 5579, 5581, 3, 1384, 692, 0,
        5580, 5578, 1, 0, 0, 0, 5580, 5581, 1, 0, 0, 0, 5581, 5584, 1, 0, 0, 0, 5582, 5583, 5, 203, 0,
        0, 5583, 5585, 3, 1366, 683, 0, 5584, 5582, 1, 0, 0, 0, 5584, 5585, 1, 0, 0, 0, 5585, 5587,
        1, 0, 0, 0, 5586, 5588, 3, 296, 148, 0, 5587, 5586, 1, 0, 0, 0, 5587, 5588, 1, 0, 0, 0, 5588,
        5590, 1, 0, 0, 0, 5589, 5591, 3, 976, 488, 0, 5590, 5589, 1, 0, 0, 0, 5590, 5591, 1, 0, 0, 0,
        5591, 723, 1, 0, 0, 0, 5592, 5593, 5, 509, 0, 0, 5593, 5594, 5, 446, 0, 0, 5594, 5597, 5, 169,
        0, 0, 5595, 5596, 5, 251, 0, 0, 5596, 5598, 3, 1384, 692, 0, 5597, 5595, 1, 0, 0, 0, 5597, 5598,
        1, 0, 0, 0, 5598, 5601, 1, 0, 0, 0, 5599, 5600, 5, 203, 0, 0, 5600, 5602, 3, 1366, 683, 0, 5601,
        5599, 1, 0, 0, 0, 5601, 5602, 1, 0, 0, 0, 5602, 5604, 1, 0, 0, 0, 5603, 5605, 3, 296, 148, 0,
        5604, 5603, 1, 0, 0, 0, 5604, 5605, 1, 0, 0, 0, 5605, 5607, 1, 0, 0, 0, 5606, 5608, 3, 976, 488,
        0, 5607, 5606, 1, 0, 0, 0, 5607, 5608, 1, 0, 0, 0, 5608, 725, 1, 0, 0, 0, 5609, 5611, 5, 509,
        0, 0, 5610, 5612, 5, 180, 0, 0, 5611, 5610, 1, 0, 0, 0, 5611, 5612, 1, 0, 0, 0, 5612, 5613, 1,
        0, 0, 0, 5613, 5614, 7, 91, 0, 0, 5614, 5615, 3, 788, 394, 0, 5615, 5617, 3, 1326, 663, 0, 5616,
        5618, 3, 790, 395, 0, 5617, 5616, 1, 0, 0, 0, 5617, 5618, 1, 0, 0, 0, 5618, 5620, 1, 0, 0, 0,
        5619, 5621, 3, 370, 185, 0, 5620, 5619, 1, 0, 0, 0, 5620, 5621, 1, 0, 0, 0, 5621, 727, 1, 0,
        0, 0, 5622, 5624, 5, 509, 0, 0, 5623, 5625, 5, 553, 0, 0, 5624, 5623, 1, 0, 0, 0, 5624, 5625,
        1, 0, 0, 0, 5625, 5626, 1, 0, 0, 0, 5626, 5627, 5, 162, 0, 0, 5627, 729, 1, 0, 0, 0, 5628, 5629,
        5, 509, 0, 0, 5629, 5630, 5, 95, 0, 0, 5630, 5631, 5, 776, 0, 0, 5631, 5632, 5, 760, 0, 0, 5632,
        5633, 5, 777, 0, 0, 5633, 5634, 5, 639, 0, 0, 5634, 731, 1, 0, 0, 0, 5635, 5636, 5, 509, 0, 0,
        5636, 5637, 5, 95, 0, 0, 5637, 5638, 5, 776, 0, 0, 5638, 5639, 5, 760, 0, 0, 5639, 5640, 5,
        777, 0, 0, 5640, 5641, 5, 166, 0, 0, 5641, 733, 1, 0, 0, 0, 5642, 5643, 5, 509, 0, 0, 5643, 5645,
        5, 639, 0, 0, 5644, 5646, 3, 296, 148, 0, 5645, 5644, 1, 0, 0, 0, 5645, 5646, 1, 0, 0, 0, 5646,
        735, 1, 0, 0, 0, 5647, 5648, 5, 509, 0, 0, 5648, 5650, 5, 166, 0, 0, 5649, 5651, 3, 296, 148,
        0, 5650, 5649, 1, 0, 0, 0, 5650, 5651, 1, 0, 0, 0, 5651, 737, 1, 0, 0, 0, 5652, 5653, 5, 509,
        0, 0, 5653, 5654, 5, 426, 0, 0, 5654, 739, 1, 0, 0, 0, 5655, 5656, 5, 509, 0, 0, 5656, 5658,
        5, 425, 0, 0, 5657, 5659, 3, 792, 396, 0, 5658, 5657, 1, 0, 0, 0, 5658, 5659, 1, 0, 0, 0, 5659,
        5663, 1, 0, 0, 0, 5660, 5661, 5, 200, 0, 0, 5661, 5662, 5, 430, 0, 0, 5662, 5664, 5, 747, 0,
        0, 5663, 5660, 1, 0, 0, 0, 5663, 5664, 1, 0, 0, 0, 5664, 5666, 1, 0, 0, 0, 5665, 5667, 3, 296,
        148, 0, 5666, 5665, 1, 0, 0, 0, 5666, 5667, 1, 0, 0, 0, 5667, 741, 1, 0, 0, 0, 5668, 5670, 5,
        509, 0, 0, 5669, 5671, 3, 1422, 711, 0, 5670, 5669, 1, 0, 0, 0, 5670, 5671, 1, 0, 0, 0, 5671,
        5672, 1, 0, 0, 0, 5672, 5674, 5, 547, 0, 0, 5673, 5675, 3, 1254, 627, 0, 5674, 5673, 1, 0, 0,
        0, 5674, 5675, 1, 0, 0, 0, 5675, 743, 1, 0, 0, 0, 5676, 5678, 5, 509, 0, 0, 5677, 5679, 5, 204,
        0, 0, 5678, 5677, 1, 0, 0, 0, 5678, 5679, 1, 0, 0, 0, 5679, 5680, 1, 0, 0, 0, 5680, 5681, 5, 424,
        0, 0, 5681, 745, 1, 0, 0, 0, 5682, 5684, 5, 509, 0, 0, 5683, 5685, 3, 1422, 711, 0, 5684, 5683,
        1, 0, 0, 0, 5684, 5685, 1, 0, 0, 0, 5685, 5686, 1, 0, 0, 0, 5686, 5688, 5, 631, 0, 0, 5687, 5689,
        3, 1254, 627, 0, 5688, 5687, 1, 0, 0, 0, 5688, 5689, 1, 0, 0, 0, 5689, 747, 1, 0, 0, 0, 5690,
        5691, 5, 509, 0, 0, 5691, 5693, 3, 952, 476, 0, 5692, 5694, 3, 1254, 627, 0, 5693, 5692, 1,
        0, 0, 0, 5693, 5694, 1, 0, 0, 0, 5694, 749, 1, 0, 0, 0, 5695, 5696, 5, 509, 0, 0, 5696, 5698,
        5, 70, 0, 0, 5697, 5699, 3, 1254, 627, 0, 5698, 5697, 1, 0, 0, 0, 5698, 5699, 1, 0, 0, 0, 5699,
        751, 1, 0, 0, 0, 5700, 5701, 5, 509, 0, 0, 5701, 5702, 5, 421, 0, 0, 5702, 753, 1, 0, 0, 0, 5703,
        5704, 5, 509, 0, 0, 5704, 5711, 5, 216, 0, 0, 5705, 5706, 5, 200, 0, 0, 5706, 5709, 3, 1250,
        625, 0, 5707, 5708, 5, 621, 0, 0, 5708, 5710, 3, 1214, 607, 0, 5709, 5707, 1, 0, 0, 0, 5709,
        5710, 1, 0, 0, 0, 5710, 5712, 1, 0, 0, 0, 5711, 5705, 1, 0, 0, 0, 5711, 5712, 1, 0, 0, 0, 5712,
        755, 1, 0, 0, 0, 5713, 5714, 5, 509, 0, 0, 5714, 5715, 5, 97, 0, 0, 5715, 5717, 5, 109, 0, 0,
        5716, 5718, 3, 1184, 592, 0, 5717, 5716, 1, 0, 0, 0, 5717, 5718, 1, 0, 0, 0, 5718, 5719, 1,
        0, 0, 0, 5719, 5720, 3, 1282, 641, 0, 5720, 757, 1, 0, 0, 0, 5721, 5722, 5, 509, 0, 0, 5722,
        5723, 5, 97, 0, 0, 5723, 5724, 5, 574, 0, 0, 5724, 5725, 3, 1326, 663, 0, 5725, 759, 1, 0, 0,
        0, 5726, 5727, 5, 509, 0, 0, 5727, 5728, 5, 97, 0, 0, 5728, 5729, 5, 636, 0, 0, 5729, 5730,
        3, 1298, 649, 0, 5730, 761, 1, 0, 0, 0, 5731, 5732, 5, 509, 0, 0, 5732, 5733, 5, 316, 0, 0, 5733,
        5734, 5, 547, 0, 0, 5734, 763, 1, 0, 0, 0, 5735, 5736, 5, 509, 0, 0, 5736, 5737, 3, 580, 290,
        0, 5737, 5739, 5, 547, 0, 0, 5738, 5740, 3, 976, 488, 0, 5739, 5738, 1, 0, 0, 0, 5739, 5740,
        1, 0, 0, 0, 5740, 765, 1, 0, 0, 0, 5741, 5742, 5, 509, 0, 0, 5742, 5743, 5, 97, 0, 0, 5743, 5744,
        5, 422, 0, 0, 5744, 5745, 3, 1286, 643, 0, 5745, 767, 1, 0, 0, 0, 5746, 5747, 5, 509, 0, 0, 5747,
        5748, 5, 97, 0, 0, 5748, 5749, 5, 206, 0, 0, 5749, 5750, 3, 1290, 645, 0, 5750, 769, 1, 0, 0,
        0, 5751, 5752, 5, 509, 0, 0, 5752, 5753, 5, 97, 0, 0, 5753, 5754, 5, 594, 0, 0, 5754, 5755,
        3, 1294, 647, 0, 5755, 771, 1, 0, 0, 0, 5756, 5757, 5, 509, 0, 0, 5757, 5758, 5, 97, 0, 0, 5758,
        5759, 5, 422, 0, 0, 5759, 5761, 5, 547, 0, 0, 5760, 5762, 3, 1254, 627, 0, 5761, 5760, 1, 0,
        0, 0, 5761, 5762, 1, 0, 0, 0, 5762, 773, 1, 0, 0, 0, 5763, 5764, 5, 509, 0, 0, 5764, 5765, 5,
        97, 0, 0, 5765, 5766, 5, 206, 0, 0, 5766, 5768, 5, 547, 0, 0, 5767, 5769, 3, 1254, 627, 0, 5768,
        5767, 1, 0, 0, 0, 5768, 5769, 1, 0, 0, 0, 5769, 775, 1, 0, 0, 0, 5770, 5771, 5, 509, 0, 0, 5771,
        5772, 5, 97, 0, 0, 5772, 5773, 5, 422, 0, 0, 5773, 5774, 5, 68, 0, 0, 5774, 5775, 3, 1286, 643,
        0, 5775, 777, 1, 0, 0, 0, 5776, 5777, 5, 509, 0, 0, 5777, 5778, 5, 97, 0, 0, 5778, 5779, 5, 206,
        0, 0, 5779, 5780, 5, 68, 0, 0, 5780, 5781, 3, 1290, 645, 0, 5781, 779, 1, 0, 0, 0, 5782, 5783,
        5, 509, 0, 0, 5783, 5784, 5, 97, 0, 0, 5784, 5785, 5, 170, 0, 0, 5785, 5786, 3, 1310, 655, 0,
        5786, 781, 1, 0, 0, 0, 5787, 5788, 5, 509, 0, 0, 5788, 5789, 5, 97, 0, 0, 5789, 5790, 5, 618,
        0, 0, 5790, 5791, 3, 1250, 625, 0, 5791, 783, 1, 0, 0, 0, 5792, 5798, 5, 204, 0, 0, 5793, 5795,
        5, 180, 0, 0, 5794, 5796, 5, 204, 0, 0, 5795, 5794, 1, 0, 0, 0, 5795, 5796, 1, 0, 0, 0, 5796,
        5798, 1, 0, 0, 0, 5797, 5792, 1, 0, 0, 0, 5797, 5793, 1, 0, 0, 0, 5798, 785, 1, 0, 0, 0, 5799,
        5802, 3, 1318, 659, 0, 5800, 5802, 5, 10, 0, 0, 5801, 5799, 1, 0, 0, 0, 5801, 5800, 1, 0, 0,
        0, 5802, 787, 1, 0, 0, 0, 5803, 5804, 7, 90, 0, 0, 5804, 789, 1, 0, 0, 0, 5805, 5806, 3, 788,
        394, 0, 5806, 5807, 3, 1350, 675, 0, 5807, 791, 1, 0, 0, 0, 5808, 5813, 3, 794, 397, 0, 5809,
        5810, 5, 773, 0, 0, 5810, 5812, 3, 794, 397, 0, 5811, 5809, 1, 0, 0, 0, 5812, 5815, 1, 0, 0,
        0, 5813, 5811, 1, 0, 0, 0, 5813, 5814, 1, 0, 0, 0, 5814, 793, 1, 0, 0, 0, 5815, 5813, 1, 0, 0,
        0, 5816, 5817, 5, 40, 0, 0, 5817, 5824, 5, 255, 0, 0, 5818, 5819, 5, 91, 0, 0, 5819, 5824, 5,
        568, 0, 0, 5820, 5821, 5, 400, 0, 0, 5821, 5824, 5, 185, 0, 0, 5822, 5824, 7, 92, 0, 0, 5823,
        5816, 1, 0, 0, 0, 5823, 5818, 1, 0, 0, 0, 5823, 5820, 1, 0, 0, 0, 5823, 5822, 1, 0, 0, 0, 5824,
        795, 1, 0, 0, 0, 5825, 5826, 5, 33, 0, 0, 5826, 5862, 3, 1388, 694, 0, 5827, 5828, 5, 47, 0,
        0, 5828, 5829, 5, 236, 0, 0, 5829, 5830, 3, 798, 399, 0, 5830, 5833, 5, 251, 0, 0, 5831, 5834,
        3, 1350, 675, 0, 5832, 5834, 5, 128, 0, 0, 5833, 5831, 1, 0, 0, 0, 5833, 5832, 1, 0, 0, 0, 5834,
        5862, 1, 0, 0, 0, 5835, 5837, 5, 196, 0, 0, 5836, 5838, 3, 1258, 629, 0, 5837, 5836, 1, 0, 0,
        0, 5837, 5838, 1, 0, 0, 0, 5838, 5848, 1, 0, 0, 0, 5839, 5849, 3, 816, 408, 0, 5840, 5845, 3,
        812, 406, 0, 5841, 5842, 5, 773, 0, 0, 5842, 5844, 3, 812, 406, 0, 5843, 5841, 1, 0, 0, 0, 5844,
        5847, 1, 0, 0, 0, 5845, 5843, 1, 0, 0, 0, 5845, 5846, 1, 0, 0, 0, 5846, 5849, 1, 0, 0, 0, 5847,
        5845, 1, 0, 0, 0, 5848, 5839, 1, 0, 0, 0, 5848, 5840, 1, 0, 0, 0, 5849, 5862, 1, 0, 0, 0, 5850,
        5852, 5, 266, 0, 0, 5851, 5853, 7, 93, 0, 0, 5852, 5851, 1, 0, 0, 0, 5852, 5853, 1, 0, 0, 0, 5853,
        5854, 1, 0, 0, 0, 5854, 5862, 3, 862, 431, 0, 5855, 5856, 5, 281, 0, 0, 5856, 5857, 5, 236,
        0, 0, 5857, 5858, 5, 248, 0, 0, 5858, 5859, 5, 47, 0, 0, 5859, 5862, 3, 820, 410, 0, 5860, 5862,
        5, 510, 0, 0, 5861, 5825, 1, 0, 0, 0, 5861, 5827, 1, 0, 0, 0, 5861, 5835, 1, 0, 0, 0, 5861, 5850,
        1, 0, 0, 0, 5861, 5855, 1, 0, 0, 0, 5861, 5860, 1, 0, 0, 0, 5862, 797, 1, 0, 0, 0, 5863, 5866,
        3, 800, 400, 0, 5864, 5866, 3, 804, 402, 0, 5865, 5863, 1, 0, 0, 0, 5865, 5864, 1, 0, 0, 0, 5866,
        799, 1, 0, 0, 0, 5867, 5872, 3, 802, 401, 0, 5868, 5869, 5, 773, 0, 0, 5869, 5871, 3, 802, 401,
        0, 5870, 5868, 1, 0, 0, 0, 5871, 5874, 1, 0, 0, 0, 5872, 5870, 1, 0, 0, 0, 5872, 5873, 1, 0, 0,
        0, 5873, 801, 1, 0, 0, 0, 5874, 5872, 1, 0, 0, 0, 5875, 5877, 3, 1326, 663, 0, 5876, 5878, 3,
        806, 403, 0, 5877, 5876, 1, 0, 0, 0, 5877, 5878, 1, 0, 0, 0, 5878, 803, 1, 0, 0, 0, 5879, 5880,
        3, 1326, 663, 0, 5880, 5881, 5, 405, 0, 0, 5881, 5882, 5, 776, 0, 0, 5882, 5883, 3, 54, 27,
        0, 5883, 5885, 5, 777, 0, 0, 5884, 5886, 3, 806, 403, 0, 5885, 5884, 1, 0, 0, 0, 5885, 5886,
        1, 0, 0, 0, 5886, 805, 1, 0, 0, 0, 5887, 5888, 3, 420, 210, 0, 5888, 5890, 5, 776, 0, 0, 5889,
        5891, 3, 810, 405, 0, 5890, 5889, 1, 0, 0, 0, 5890, 5891, 1, 0, 0, 0, 5891, 5892, 1, 0, 0, 0,
        5892, 5893, 5, 777, 0, 0, 5893, 807, 1, 0, 0, 0, 5894, 5897, 3, 1350, 675, 0, 5895, 5897, 5,
        420, 0, 0, 5896, 5894, 1, 0, 0, 0, 5896, 5895, 1, 0, 0, 0, 5897, 809, 1, 0, 0, 0, 5898, 5903,
        3, 808, 404, 0, 5899, 5900, 5, 773, 0, 0, 5900, 5902, 3, 808, 404, 0, 5901, 5899, 1, 0, 0, 0,
        5902, 5905, 1, 0, 0, 0, 5903, 5901, 1, 0, 0, 0, 5903, 5904, 1, 0, 0, 0, 5904, 811, 1, 0, 0, 0,
        5905, 5903, 1, 0, 0, 0, 5906, 5918, 7, 94, 0, 0, 5907, 5909, 3, 814, 407, 0, 5908, 5907, 1,
        0, 0, 0, 5908, 5909, 1, 0, 0, 0, 5909, 5910, 1, 0, 0, 0, 5910, 5918, 5, 289, 0, 0, 5911, 5912,
        5, 445, 0, 0, 5912, 5914, 5, 289, 0, 0, 5913, 5915, 3, 976, 488, 0, 5914, 5913, 1, 0, 0, 0, 5914,
        5915, 1, 0, 0, 0, 5915, 5918, 1, 0, 0, 0, 5916, 5918, 5, 389, 0, 0, 5917, 5906, 1, 0, 0, 0, 5917,
        5908, 1, 0, 0, 0, 5917, 5911, 1, 0, 0, 0, 5917, 5916, 1, 0, 0, 0, 5918, 813, 1, 0, 0, 0, 5919,
        5920, 7, 95, 0, 0, 5920, 815, 1, 0, 0, 0, 5921, 5929, 7, 17, 0, 0, 5922, 5923, 5, 645, 0, 0, 5923,
        5924, 5, 435, 0, 0, 5924, 5930, 5, 287, 0, 0, 5925, 5927, 3, 1352, 676, 0, 5926, 5928, 3, 818,
        409, 0, 5927, 5926, 1, 0, 0, 0, 5927, 5928, 1, 0, 0, 0, 5928, 5930, 1, 0, 0, 0, 5929, 5922, 1,
        0, 0, 0, 5929, 5925, 1, 0, 0, 0, 5929, 5930, 1, 0, 0, 0, 5930, 817, 1, 0, 0, 0, 5931, 5932, 5,
        200, 0, 0, 5932, 5937, 5, 179, 0, 0, 5933, 5934, 5, 645, 0, 0, 5934, 5935, 5, 435, 0, 0, 5935,
        5937, 5, 287, 0, 0, 5936, 5931, 1, 0, 0, 0, 5936, 5933, 1, 0, 0, 0, 5937, 819, 1, 0, 0, 0, 5938,
        5939, 3, 1326, 663, 0, 5939, 5941, 3, 826, 413, 0, 5940, 5942, 3, 806, 403, 0, 5941, 5940,
        1, 0, 0, 0, 5941, 5942, 1, 0, 0, 0, 5942, 5945, 1, 0, 0, 0, 5943, 5944, 5, 232, 0, 0, 5944, 5946,
        5, 270, 0, 0, 5945, 5943, 1, 0, 0, 0, 5945, 5946, 1, 0, 0, 0, 5946, 5949, 1, 0, 0, 0, 5947, 5949,
        3, 822, 411, 0, 5948, 5938, 1, 0, 0, 0, 5948, 5947, 1, 0, 0, 0, 5949, 821, 1, 0, 0, 0, 5950, 5955,
        3, 824, 412, 0, 5951, 5952, 5, 773, 0, 0, 5952, 5954, 3, 824, 412, 0, 5953, 5951, 1, 0, 0, 0,
        5954, 5957, 1, 0, 0, 0, 5955, 5953, 1, 0, 0, 0, 5955, 5956, 1, 0, 0, 0, 5956, 823, 1, 0, 0, 0,
        5957, 5955, 1, 0, 0, 0, 5958, 5960, 3, 1326, 663, 0, 5959, 5961, 3, 806, 403, 0, 5960, 5959,
        1, 0, 0, 0, 5960, 5961, 1, 0, 0, 0, 5961, 5964, 1, 0, 0, 0, 5962, 5963, 5, 232, 0, 0, 5963, 5965,
        5, 270, 0, 0, 5964, 5962, 1, 0, 0, 0, 5964, 5965, 1, 0, 0, 0, 5965, 825, 1, 0, 0, 0, 5966, 5967,
        5, 405, 0, 0, 5967, 5968, 5, 776, 0, 0, 5968, 5969, 3, 54, 27, 0, 5969, 5970, 5, 777, 0, 0, 5970,
        827, 1, 0, 0, 0, 5971, 5976, 3, 830, 415, 0, 5972, 5976, 3, 840, 420, 0, 5973, 5976, 3, 842,
        421, 0, 5974, 5976, 3, 846, 423, 0, 5975, 5971, 1, 0, 0, 0, 5975, 5972, 1, 0, 0, 0, 5975, 5973,
        1, 0, 0, 0, 5975, 5974, 1, 0, 0, 0, 5976, 829, 1, 0, 0, 0, 5977, 5978, 5, 97, 0, 0, 5978, 5979,
        5, 709, 0, 0, 5979, 5980, 5, 217, 0, 0, 5980, 5981, 3, 1350, 675, 0, 5981, 5983, 5, 599, 0,
        0, 5982, 5984, 3, 1420, 710, 0, 5983, 5982, 1, 0, 0, 0, 5983, 5984, 1, 0, 0, 0, 5984, 5985,
        1, 0, 0, 0, 5985, 5987, 7, 96, 0, 0, 5986, 5988, 3, 832, 416, 0, 5987, 5986, 1, 0, 0, 0, 5987,
        5988, 1, 0, 0, 0, 5988, 5990, 1, 0, 0, 0, 5989, 5991, 3, 836, 418, 0, 5990, 5989, 1, 0, 0, 0,
        5990, 5991, 1, 0, 0, 0, 5991, 5993, 1, 0, 0, 0, 5992, 5994, 3, 838, 419, 0, 5993, 5992, 1, 0,
        0, 0, 5993, 5994, 1, 0, 0, 0, 5994, 831, 1, 0, 0, 0, 5995, 5997, 5, 711, 0, 0, 5996, 5998, 3,
        1420, 710, 0, 5997, 5996, 1, 0, 0, 0, 5997, 5998, 1, 0, 0, 0, 5998, 5999, 1, 0, 0, 0, 5999, 6006,
        3, 834, 417, 0, 6000, 6002, 5, 773, 0, 0, 6001, 6000, 1, 0, 0, 0, 6001, 6002, 1, 0, 0, 0, 6002,
        6003, 1, 0, 0, 0, 6003, 6005, 3, 834, 417, 0, 6004, 6001, 1, 0, 0, 0, 6005, 6008, 1, 0, 0, 0,
        6006, 6004, 1, 0, 0, 0, 6006, 6007, 1, 0, 0, 0, 6007, 833, 1, 0, 0, 0, 6008, 6006, 1, 0, 0, 0,
        6009, 6012, 5, 747, 0, 0, 6010, 6011, 5, 759, 0, 0, 6011, 6013, 5, 747, 0, 0, 6012, 6010, 1,
        0, 0, 0, 6012, 6013, 1, 0, 0, 0, 6013, 835, 1, 0, 0, 0, 6014, 6016, 5, 708, 0, 0, 6015, 6017,
        3, 1420, 710, 0, 6016, 6015, 1, 0, 0, 0, 6016, 6017, 1, 0, 0, 0, 6017, 6018, 1, 0, 0, 0, 6018,
        6019, 5, 747, 0, 0, 6019, 837, 1, 0, 0, 0, 6020, 6021, 7, 7, 0, 0, 6021, 839, 1, 0, 0, 0, 6022,
        6023, 5, 11, 0, 0, 6023, 6024, 5, 709, 0, 0, 6024, 6025, 5, 217, 0, 0, 6025, 6027, 3, 1344,
        672, 0, 6026, 6028, 3, 832, 416, 0, 6027, 6026, 1, 0, 0, 0, 6027, 6028, 1, 0, 0, 0, 6028, 6030,
        1, 0, 0, 0, 6029, 6031, 3, 836, 418, 0, 6030, 6029, 1, 0, 0, 0, 6030, 6031, 1, 0, 0, 0, 6031,
        6033, 1, 0, 0, 0, 6032, 6034, 3, 838, 419, 0, 6033, 6032, 1, 0, 0, 0, 6033, 6034, 1, 0, 0, 0,
        6034, 6036, 1, 0, 0, 0, 6035, 6037, 5, 198, 0, 0, 6036, 6035, 1, 0, 0, 0, 6036, 6037, 1, 0, 0,
        0, 6037, 841, 1, 0, 0, 0, 6038, 6039, 5, 506, 0, 0, 6039, 6040, 5, 709, 0, 0, 6040, 6041, 5,
        217, 0, 0, 6041, 6044, 3, 1350, 675, 0, 6042, 6043, 5, 200, 0, 0, 6043, 6045, 3, 844, 422,
        0, 6044, 6042, 1, 0, 0, 0, 6044, 6045, 1, 0, 0, 0, 6045, 843, 1, 0, 0, 0, 6046, 6053, 3, 1364,
        682, 0, 6047, 6049, 5, 773, 0, 0, 6048, 6047, 1, 0, 0, 0, 6048, 6049, 1, 0, 0, 0, 6049, 6050,
        1, 0, 0, 0, 6050, 6052, 3, 1364, 682, 0, 6051, 6048, 1, 0, 0, 0, 6052, 6055, 1, 0, 0, 0, 6053,
        6051, 1, 0, 0, 0, 6053, 6054, 1, 0, 0, 0, 6054, 845, 1, 0, 0, 0, 6055, 6053, 1, 0, 0, 0, 6056,
        6057, 5, 148, 0, 0, 6057, 6058, 5, 709, 0, 0, 6058, 6059, 5, 217, 0, 0, 6059, 6061, 3, 1344,
        672, 0, 6060, 6062, 5, 198, 0, 0, 6061, 6060, 1, 0, 0, 0, 6061, 6062, 1, 0, 0, 0, 6062, 847,
        1, 0, 0, 0, 6063, 6070, 3, 850, 425, 0, 6064, 6070, 3, 852, 426, 0, 6065, 6070, 3, 856, 428,
        0, 6066, 6070, 3, 858, 429, 0, 6067, 6068, 4, 424, 61, 0, 6068, 6070, 3, 860, 430, 0, 6069,
        6063, 1, 0, 0, 0, 6069, 6064, 1, 0, 0, 0, 6069, 6065, 1, 0, 0, 0, 6069, 6066, 1, 0, 0, 0, 6069,
        6067, 1, 0, 0, 0, 6070, 849, 1, 0, 0, 0, 6071, 6072, 7, 97, 0, 0, 6072, 6075, 3, 1326, 663, 0,
        6073, 6076, 3, 1384, 692, 0, 6074, 6076, 3, 1270, 635, 0, 6075, 6073, 1, 0, 0, 0, 6075, 6074,
        1, 0, 0, 0, 6075, 6076, 1, 0, 0, 0, 6076, 851, 1, 0, 0, 0, 6077, 6089, 7, 97, 0, 0, 6078, 6090,
        5, 180, 0, 0, 6079, 6080, 5, 201, 0, 0, 6080, 6081, 5, 750, 0, 0, 6081, 6090, 3, 1410, 705,
        0, 6082, 6083, 4, 426, 62, 0, 6083, 6090, 5, 14, 0, 0, 6084, 6085, 4, 426, 63, 0, 6085, 6086,
        5, 14, 0, 0, 6086, 6087, 5, 201, 0, 0, 6087, 6088, 5, 750, 0, 0, 6088, 6090, 3, 1410, 705, 0,
        6089, 6078, 1, 0, 0, 0, 6089, 6079, 1, 0, 0, 0, 6089, 6082, 1, 0, 0, 0, 6089, 6084, 1, 0, 0, 0,
        6089, 6090, 1, 0, 0, 0, 6090, 6091, 1, 0, 0, 0, 6091, 6092, 3, 854, 427, 0, 6092, 853, 1, 0,
        0, 0, 6093, 6102, 3, 276, 138, 0, 6094, 6102, 3, 230, 115, 0, 6095, 6102, 3, 242, 121, 0, 6096,
        6102, 3, 274, 137, 0, 6097, 6102, 3, 430, 215, 0, 6098, 6099, 5, 200, 0, 0, 6099, 6100, 5,
        84, 0, 0, 6100, 6102, 3, 1364, 682, 0, 6101, 6093, 1, 0, 0, 0, 6101, 6094, 1, 0, 0, 0, 6101,
        6095, 1, 0, 0, 0, 6101, 6096, 1, 0, 0, 0, 6101, 6097, 1, 0, 0, 0, 6101, 6098, 1, 0, 0, 0, 6102,
        855, 1, 0, 0, 0, 6103, 6104, 5, 222, 0, 0, 6104, 6105, 3, 1410, 705, 0, 6105, 857, 1, 0, 0, 0,
        6106, 6107, 5, 620, 0, 0, 6107, 6108, 3, 1282, 641, 0, 6108, 859, 1, 0, 0, 0, 6109, 6110, 5,
        714, 0, 0, 6110, 861, 1, 0, 0, 0, 6111, 6112, 6, 431, -1, 0, 6112, 6118, 3, 864, 432, 0, 6113,
        6115, 5, 257, 0, 0, 6114, 6116, 3, 954, 477, 0, 6115, 6114, 1, 0, 0, 0, 6115, 6116, 1, 0, 0,
        0, 6116, 6117, 1, 0, 0, 0, 6117, 6119, 7, 98, 0, 0, 6118, 6113, 1, 0, 0, 0, 6118, 6119, 1, 0,
        0, 0, 6119, 6123, 1, 0, 0, 0, 6120, 6121, 5, 371, 0, 0, 6121, 6123, 3, 862, 431, 4, 6122, 6111,
        1, 0, 0, 0, 6122, 6120, 1, 0, 0, 0, 6123, 6135, 1, 0, 0, 0, 6124, 6125, 10, 3, 0, 0, 6125, 6126,
        7, 99, 0, 0, 6126, 6134, 3, 862, 431, 4, 6127, 6128, 10, 2, 0, 0, 6128, 6129, 5, 654, 0, 0, 6129,
        6134, 3, 862, 431, 3, 6130, 6131, 10, 1, 0, 0, 6131, 6132, 7, 100, 0, 0, 6132, 6134, 3, 862,
        431, 2, 6133, 6124, 1, 0, 0, 0, 6133, 6127, 1, 0, 0, 0, 6133, 6130, 1, 0, 0, 0, 6134, 6137, 1,
        0, 0, 0, 6135, 6133, 1, 0, 0, 0, 6135, 6136, 1, 0, 0, 0, 6136, 863, 1, 0, 0, 0, 6137, 6135, 1,
        0, 0, 0, 6138, 6139, 6, 432, -1, 0, 6139, 6140, 3, 868, 434, 0, 6140, 6158, 1, 0, 0, 0, 6141,
        6142, 10, 3, 0, 0, 6142, 6144, 5, 257, 0, 0, 6143, 6145, 3, 954, 477, 0, 6144, 6143, 1, 0, 0,
        0, 6144, 6145, 1, 0, 0, 0, 6145, 6146, 1, 0, 0, 0, 6146, 6157, 5, 376, 0, 0, 6147, 6148, 10,
        2, 0, 0, 6148, 6149, 3, 866, 433, 0, 6149, 6150, 3, 868, 434, 0, 6150, 6157, 1, 0, 0, 0, 6151,
        6152, 10, 1, 0, 0, 6152, 6153, 3, 866, 433, 0, 6153, 6154, 7, 101, 0, 0, 6154, 6155, 3, 292,
        146, 0, 6155, 6157, 1, 0, 0, 0, 6156, 6141, 1, 0, 0, 0, 6156, 6147, 1, 0, 0, 0, 6156, 6151, 1,
        0, 0, 0, 6157, 6160, 1, 0, 0, 0, 6158, 6156, 1, 0, 0, 0, 6158, 6159, 1, 0, 0, 0, 6159, 865, 1,
        0, 0, 0, 6160, 6158, 1, 0, 0, 0, 6161, 6162, 7, 102, 0, 0, 6162, 867, 1, 0, 0, 0, 6163, 6177,
        3, 872, 436, 0, 6164, 6166, 3, 954, 477, 0, 6165, 6164, 1, 0, 0, 0, 6165, 6166, 1, 0, 0, 0, 6166,
        6167, 1, 0, 0, 0, 6167, 6178, 3, 870, 435, 0, 6168, 6169, 4, 434, 70, 0, 6169, 6171, 5, 733,
        0, 0, 6170, 6172, 5, 668, 0, 0, 6171, 6170, 1, 0, 0, 0, 6171, 6172, 1, 0, 0, 0, 6172, 6173, 1,
        0, 0, 0, 6173, 6178, 3, 966, 483, 0, 6174, 6175, 5, 521, 0, 0, 6175, 6176, 5, 275, 0, 0, 6176,
        6178, 3, 872, 436, 0, 6177, 6165, 1, 0, 0, 0, 6177, 6168, 1, 0, 0, 0, 6177, 6174, 1, 0, 0, 0,
        6177, 6178, 1, 0, 0, 0, 6178, 869, 1, 0, 0, 0, 6179, 6185, 5, 251, 0, 0, 6180, 6186, 3, 292,
        146, 0, 6181, 6182, 5, 776, 0, 0, 6182, 6183, 3, 950, 475, 0, 6183, 6184, 5, 777, 0, 0, 6184,
        6186, 1, 0, 0, 0, 6185, 6180, 1, 0, 0, 0, 6185, 6181, 1, 0, 0, 0, 6186, 6201, 1, 0, 0, 0, 6187,
        6188, 5, 30, 0, 0, 6188, 6189, 3, 872, 436, 0, 6189, 6190, 5, 15, 0, 0, 6190, 6191, 3, 868,
        434, 0, 6191, 6201, 1, 0, 0, 0, 6192, 6193, 5, 275, 0, 0, 6193, 6196, 3, 874, 437, 0, 6194,
        6195, 5, 168, 0, 0, 6195, 6197, 3, 874, 437, 0, 6196, 6194, 1, 0, 0, 0, 6196, 6197, 1, 0, 0,
        0, 6197, 6201, 1, 0, 0, 0, 6198, 6199, 5, 444, 0, 0, 6199, 6201, 3, 872, 436, 0, 6200, 6179,
        1, 0, 0, 0, 6200, 6187, 1, 0, 0, 0, 6200, 6192, 1, 0, 0, 0, 6200, 6198, 1, 0, 0, 0, 6201, 871,
        1, 0, 0, 0, 6202, 6203, 6, 436, -1, 0, 6203, 6204, 3, 874, 437, 0, 6204, 6231, 1, 0, 0, 0, 6205,
        6206, 10, 7, 0, 0, 6206, 6207, 5, 769, 0, 0, 6207, 6230, 3, 872, 436, 8, 6208, 6209, 10, 6,
        0, 0, 6209, 6210, 7, 103, 0, 0, 6210, 6230, 3, 872, 436, 7, 6211, 6212, 10, 5, 0, 0, 6212, 6213,
        7, 104, 0, 0, 6213, 6230, 3, 872, 436, 6, 6214, 6215, 10, 3, 0, 0, 6215, 6216, 7, 105, 0, 0,
        6216, 6230, 3, 872, 436, 4, 6217, 6218, 10, 2, 0, 0, 6218, 6219, 5, 768, 0, 0, 6219, 6230,
        3, 872, 436, 3, 6220, 6221, 10, 1, 0, 0, 6221, 6222, 5, 771, 0, 0, 6222, 6230, 3, 872, 436,
        2, 6223, 6224, 10, 4, 0, 0, 6224, 6225, 7, 104, 0, 0, 6225, 6226, 5, 247, 0, 0, 6226, 6227,
        3, 862, 431, 0, 6227, 6228, 3, 958, 479, 0, 6228, 6230, 1, 0, 0, 0, 6229, 6205, 1, 0, 0, 0, 6229,
        6208, 1, 0, 0, 0, 6229, 6211, 1, 0, 0, 0, 6229, 6214, 1, 0, 0, 0, 6229, 6217, 1, 0, 0, 0, 6229,
        6220, 1, 0, 0, 0, 6229, 6223, 1, 0, 0, 0, 6230, 6233, 1, 0, 0, 0, 6231, 6229, 1, 0, 0, 0, 6231,
        6232, 1, 0, 0, 0, 6232, 873, 1, 0, 0, 0, 6233, 6231, 1, 0, 0, 0, 6234, 6235, 6, 437, -1, 0, 6235,
        6237, 3, 1270, 635, 0, 6236, 6238, 3, 878, 439, 0, 6237, 6236, 1, 0, 0, 0, 6237, 6238, 1, 0,
        0, 0, 6238, 6357, 1, 0, 0, 0, 6239, 6357, 3, 906, 453, 0, 6240, 6357, 3, 926, 463, 0, 6241,
        6357, 3, 1376, 688, 0, 6242, 6357, 5, 787, 0, 0, 6243, 6357, 3, 936, 468, 0, 6244, 6357, 3,
        934, 467, 0, 6245, 6357, 3, 880, 440, 0, 6246, 6357, 3, 882, 441, 0, 6247, 6357, 3, 884, 442,
        0, 6248, 6249, 7, 106, 0, 0, 6249, 6357, 3, 874, 437, 15, 6250, 6251, 3, 956, 478, 0, 6251,
        6252, 3, 874, 437, 14, 6252, 6357, 1, 0, 0, 0, 6253, 6255, 5, 487, 0, 0, 6254, 6253, 1, 0, 0,
        0, 6254, 6255, 1, 0, 0, 0, 6255, 6256, 1, 0, 0, 0, 6256, 6257, 5, 776, 0, 0, 6257, 6258, 3, 950,
        475, 0, 6258, 6259, 5, 777, 0, 0, 6259, 6357, 1, 0, 0, 0, 6260, 6262, 5, 174, 0, 0, 6261, 6260,
        1, 0, 0, 0, 6261, 6262, 1, 0, 0, 0, 6262, 6263, 1, 0, 0, 0, 6263, 6357, 3, 292, 146, 0, 6264,
        6265, 5, 778, 0, 0, 6265, 6266, 3, 1350, 675, 0, 6266, 6267, 3, 862, 431, 0, 6267, 6268, 5,
        779, 0, 0, 6268, 6357, 1, 0, 0, 0, 6269, 6270, 5, 320, 0, 0, 6270, 6271, 3, 900, 450, 0, 6271,
        6272, 5, 7, 0, 0, 6272, 6273, 5, 776, 0, 0, 6273, 6275, 3, 872, 436, 0, 6274, 6276, 3, 904,
        452, 0, 6275, 6274, 1, 0, 0, 0, 6275, 6276, 1, 0, 0, 0, 6276, 6277, 1, 0, 0, 0, 6277, 6278, 5,
        777, 0, 0, 6278, 6357, 1, 0, 0, 0, 6279, 6280, 5, 32, 0, 0, 6280, 6357, 3, 874, 437, 9, 6281,
        6282, 5, 52, 0, 0, 6282, 6283, 5, 776, 0, 0, 6283, 6286, 3, 862, 431, 0, 6284, 6285, 5, 21,
        0, 0, 6285, 6287, 5, 284, 0, 0, 6286, 6284, 1, 0, 0, 0, 6286, 6287, 1, 0, 0, 0, 6287, 6288, 1,
        0, 0, 0, 6288, 6289, 5, 17, 0, 0, 6289, 6291, 3, 948, 474, 0, 6290, 6292, 3, 876, 438, 0, 6291,
        6290, 1, 0, 0, 0, 6291, 6292, 1, 0, 0, 0, 6292, 6293, 1, 0, 0, 0, 6293, 6294, 5, 777, 0, 0, 6294,
        6357, 1, 0, 0, 0, 6295, 6296, 5, 52, 0, 0, 6296, 6297, 5, 776, 0, 0, 6297, 6298, 3, 862, 431,
        0, 6298, 6299, 5, 21, 0, 0, 6299, 6300, 5, 586, 0, 0, 6300, 6302, 5, 801, 0, 0, 6301, 6303,
        5, 247, 0, 0, 6302, 6301, 1, 0, 0, 0, 6302, 6303, 1, 0, 0, 0, 6303, 6304, 1, 0, 0, 0, 6304, 6305,
        3, 1382, 691, 0, 6305, 6306, 5, 17, 0, 0, 6306, 6307, 5, 113, 0, 0, 6307, 6308, 3, 1132, 566,
        0, 6308, 6309, 5, 777, 0, 0, 6309, 6357, 1, 0, 0, 0, 6310, 6312, 5, 51, 0, 0, 6311, 6313, 3,
        862, 431, 0, 6312, 6311, 1, 0, 0, 0, 6312, 6313, 1, 0, 0, 0, 6313, 6317, 1, 0, 0, 0, 6314, 6315,
        3, 942, 471, 0, 6315, 6316, 3, 944, 472, 0, 6316, 6318, 1, 0, 0, 0, 6317, 6314, 1, 0, 0, 0, 6318,
        6319, 1, 0, 0, 0, 6319, 6317, 1, 0, 0, 0, 6319, 6320, 1, 0, 0, 0, 6320, 6322, 1, 0, 0, 0, 6321,
        6323, 3, 946, 473, 0, 6322, 6321, 1, 0, 0, 0, 6322, 6323, 1, 0, 0, 0, 6323, 6324, 1, 0, 0, 0,
        6324, 6325, 5, 159, 0, 0, 6325, 6357, 1, 0, 0, 0, 6326, 6327, 5, 94, 0, 0, 6327, 6328, 5, 776,
        0, 0, 6328, 6329, 3, 862, 431, 0, 6329, 6330, 5, 773, 0, 0, 6330, 6331, 3, 948, 474, 0, 6331,
        6332, 5, 777, 0, 0, 6332, 6357, 1, 0, 0, 0, 6333, 6334, 5, 94, 0, 0, 6334, 6335, 5, 776, 0, 0,
        6335, 6336, 3, 862, 431, 0, 6336, 6337, 5, 621, 0, 0, 6337, 6338, 3, 1136, 568, 0, 6338, 6339,
        5, 777, 0, 0, 6339, 6357, 1, 0, 0, 0, 6340, 6341, 5, 128, 0, 0, 6341, 6342, 5, 776, 0, 0, 6342,
        6343, 3, 1358, 679, 0, 6343, 6344, 5, 777, 0, 0, 6344, 6357, 1, 0, 0, 0, 6345, 6346, 5, 626,
        0, 0, 6346, 6347, 5, 776, 0, 0, 6347, 6348, 3, 1358, 679, 0, 6348, 6349, 5, 777, 0, 0, 6349,
        6357, 1, 0, 0, 0, 6350, 6351, 5, 247, 0, 0, 6351, 6352, 3, 862, 431, 0, 6352, 6353, 3, 958,
        479, 0, 6353, 6354, 5, 758, 0, 0, 6354, 6355, 3, 862, 431, 0, 6355, 6357, 1, 0, 0, 0, 6356,
        6234, 1, 0, 0, 0, 6356, 6239, 1, 0, 0, 0, 6356, 6240, 1, 0, 0, 0, 6356, 6241, 1, 0, 0, 0, 6356,
        6242, 1, 0, 0, 0, 6356, 6243, 1, 0, 0, 0, 6356, 6244, 1, 0, 0, 0, 6356, 6245, 1, 0, 0, 0, 6356,
        6246, 1, 0, 0, 0, 6356, 6247, 1, 0, 0, 0, 6356, 6248, 1, 0, 0, 0, 6356, 6250, 1, 0, 0, 0, 6356,
        6254, 1, 0, 0, 0, 6356, 6261, 1, 0, 0, 0, 6356, 6264, 1, 0, 0, 0, 6356, 6269, 1, 0, 0, 0, 6356,
        6279, 1, 0, 0, 0, 6356, 6281, 1, 0, 0, 0, 6356, 6295, 1, 0, 0, 0, 6356, 6310, 1, 0, 0, 0, 6356,
        6326, 1, 0, 0, 0, 6356, 6333, 1, 0, 0, 0, 6356, 6340, 1, 0, 0, 0, 6356, 6345, 1, 0, 0, 0, 6356,
        6350, 1, 0, 0, 0, 6357, 6366, 1, 0, 0, 0, 6358, 6359, 10, 16, 0, 0, 6359, 6360, 5, 746, 0, 0,
        6360, 6365, 3, 874, 437, 17, 6361, 6362, 10, 24, 0, 0, 6362, 6363, 5, 69, 0, 0, 6363, 6365,
        3, 1410, 705, 0, 6364, 6358, 1, 0, 0, 0, 6364, 6361, 1, 0, 0, 0, 6365, 6368, 1, 0, 0, 0, 6366,
        6364, 1, 0, 0, 0, 6366, 6367, 1, 0, 0, 0, 6367, 875, 1, 0, 0, 0, 6368, 6366, 1, 0, 0, 0, 6369,
        6370, 4, 438, 80, 0, 6370, 6371, 5, 731, 0, 0, 6371, 877, 1, 0, 0, 0, 6372, 6373, 5, 781, 0,
        0, 6373, 6377, 3, 1382, 691, 0, 6374, 6375, 5, 782, 0, 0, 6375, 6377, 3, 1382, 691, 0, 6376,
        6372, 1, 0, 0, 0, 6376, 6374, 1, 0, 0, 0, 6377, 879, 1, 0, 0, 0, 6378, 6379, 5, 26, 0, 0, 6379,
        6381, 5, 776, 0, 0, 6380, 6382, 5, 143, 0, 0, 6381, 6380, 1, 0, 0, 0, 6381, 6382, 1, 0, 0, 0,
        6382, 6383, 1, 0, 0, 0, 6383, 6384, 3, 898, 449, 0, 6384, 6386, 5, 777, 0, 0, 6385, 6387, 3,
        886, 443, 0, 6386, 6385, 1, 0, 0, 0, 6386, 6387, 1, 0, 0, 0, 6387, 6464, 1, 0, 0, 0, 6388, 6389,
        7, 107, 0, 0, 6389, 6390, 5, 776, 0, 0, 6390, 6391, 3, 898, 449, 0, 6391, 6393, 5, 777, 0, 0,
        6392, 6394, 3, 886, 443, 0, 6393, 6392, 1, 0, 0, 0, 6393, 6394, 1, 0, 0, 0, 6394, 6464, 1, 0,
        0, 0, 6395, 6464, 3, 896, 448, 0, 6396, 6397, 5, 833, 0, 0, 6397, 6399, 5, 776, 0, 0, 6398,
        6400, 5, 143, 0, 0, 6399, 6398, 1, 0, 0, 0, 6399, 6400, 1, 0, 0, 0, 6400, 6401, 1, 0, 0, 0, 6401,
        6402, 3, 898, 449, 0, 6402, 6404, 5, 777, 0, 0, 6403, 6405, 3, 886, 443, 0, 6404, 6403, 1,
        0, 0, 0, 6404, 6405, 1, 0, 0, 0, 6405, 6464, 1, 0, 0, 0, 6406, 6407, 5, 95, 0, 0, 6407, 6415,
        5, 776, 0, 0, 6408, 6410, 5, 10, 0, 0, 6409, 6408, 1, 0, 0, 0, 6409, 6410, 1, 0, 0, 0, 6410, 6411,
        1, 0, 0, 0, 6411, 6416, 5, 760, 0, 0, 6412, 6416, 3, 898, 449, 0, 6413, 6414, 5, 143, 0, 0, 6414,
        6416, 3, 950, 475, 0, 6415, 6409, 1, 0, 0, 0, 6415, 6412, 1, 0, 0, 0, 6415, 6413, 1, 0, 0, 0,
        6416, 6417, 1, 0, 0, 0, 6417, 6419, 5, 777, 0, 0, 6418, 6420, 3, 886, 443, 0, 6419, 6418, 1,
        0, 0, 0, 6419, 6420, 1, 0, 0, 0, 6420, 6464, 1, 0, 0, 0, 6421, 6422, 7, 108, 0, 0, 6422, 6424,
        5, 776, 0, 0, 6423, 6425, 5, 143, 0, 0, 6424, 6423, 1, 0, 0, 0, 6424, 6425, 1, 0, 0, 0, 6425,
        6426, 1, 0, 0, 0, 6426, 6427, 3, 898, 449, 0, 6427, 6429, 5, 777, 0, 0, 6428, 6430, 3, 886,
        443, 0, 6429, 6428, 1, 0, 0, 0, 6429, 6430, 1, 0, 0, 0, 6430, 6464, 1, 0, 0, 0, 6431, 6432, 7,
        109, 0, 0, 6432, 6433, 5, 776, 0, 0, 6433, 6434, 3, 898, 449, 0, 6434, 6436, 5, 777, 0, 0, 6435,
        6437, 3, 886, 443, 0, 6436, 6435, 1, 0, 0, 0, 6436, 6437, 1, 0, 0, 0, 6437, 6464, 1, 0, 0, 0,
        6438, 6439, 5, 564, 0, 0, 6439, 6440, 5, 776, 0, 0, 6440, 6441, 5, 143, 0, 0, 6441, 6442, 3,
        898, 449, 0, 6442, 6444, 5, 777, 0, 0, 6443, 6445, 3, 886, 443, 0, 6444, 6443, 1, 0, 0, 0, 6444,
        6445, 1, 0, 0, 0, 6445, 6464, 1, 0, 0, 0, 6446, 6447, 5, 218, 0, 0, 6447, 6449, 5, 776, 0, 0,
        6448, 6450, 5, 143, 0, 0, 6449, 6448, 1, 0, 0, 0, 6449, 6450, 1, 0, 0, 0, 6450, 6451, 1, 0, 0,
        0, 6451, 6453, 3, 950, 475, 0, 6452, 6454, 3, 340, 170, 0, 6453, 6452, 1, 0, 0, 0, 6453, 6454,
        1, 0, 0, 0, 6454, 6457, 1, 0, 0, 0, 6455, 6456, 5, 499, 0, 0, 6456, 6458, 3, 1384, 692, 0, 6457,
        6455, 1, 0, 0, 0, 6457, 6458, 1, 0, 0, 0, 6458, 6459, 1, 0, 0, 0, 6459, 6461, 5, 777, 0, 0, 6460,
        6462, 3, 886, 443, 0, 6461, 6460, 1, 0, 0, 0, 6461, 6462, 1, 0, 0, 0, 6462, 6464, 1, 0, 0, 0,
        6463, 6378, 1, 0, 0, 0, 6463, 6388, 1, 0, 0, 0, 6463, 6395, 1, 0, 0, 0, 6463, 6396, 1, 0, 0, 0,
        6463, 6406, 1, 0, 0, 0, 6463, 6421, 1, 0, 0, 0, 6463, 6431, 1, 0, 0, 0, 6463, 6438, 1, 0, 0, 0,
        6463, 6446, 1, 0, 0, 0, 6464, 881, 1, 0, 0, 0, 6465, 6466, 5, 672, 0, 0, 6466, 6467, 5, 776,
        0, 0, 6467, 6468, 3, 950, 475, 0, 6468, 6469, 5, 777, 0, 0, 6469, 883, 1, 0, 0, 0, 6470, 6471,
        7, 110, 0, 0, 6471, 6472, 3, 1418, 709, 0, 6472, 6473, 3, 886, 443, 0, 6473, 6521, 1, 0, 0,
        0, 6474, 6482, 5, 688, 0, 0, 6475, 6476, 4, 442, 81, 0, 6476, 6483, 3, 966, 483, 0, 6477, 6478,
        4, 442, 82, 0, 6478, 6479, 5, 776, 0, 0, 6479, 6480, 3, 890, 445, 0, 6480, 6481, 5, 777, 0,
        0, 6481, 6483, 1, 0, 0, 0, 6482, 6475, 1, 0, 0, 0, 6482, 6477, 1, 0, 0, 0, 6483, 6484, 1, 0, 0,
        0, 6484, 6485, 3, 886, 443, 0, 6485, 6521, 1, 0, 0, 0, 6486, 6487, 7, 111, 0, 0, 6487, 6488,
        5, 776, 0, 0, 6488, 6490, 3, 862, 431, 0, 6489, 6491, 3, 888, 444, 0, 6490, 6489, 1, 0, 0, 0,
        6490, 6491, 1, 0, 0, 0, 6491, 6492, 1, 0, 0, 0, 6492, 6494, 5, 777, 0, 0, 6493, 6495, 3, 894,
        447, 0, 6494, 6493, 1, 0, 0, 0, 6494, 6495, 1, 0, 0, 0, 6495, 6496, 1, 0, 0, 0, 6496, 6497, 3,
        886, 443, 0, 6497, 6521, 1, 0, 0, 0, 6498, 6499, 7, 112, 0, 0, 6499, 6501, 3, 964, 482, 0, 6500,
        6502, 3, 894, 447, 0, 6501, 6500, 1, 0, 0, 0, 6501, 6502, 1, 0, 0, 0, 6502, 6503, 1, 0, 0, 0,
        6503, 6504, 3, 886, 443, 0, 6504, 6521, 1, 0, 0, 0, 6505, 6506, 5, 687, 0, 0, 6506, 6507, 5,
        776, 0, 0, 6507, 6508, 3, 862, 431, 0, 6508, 6509, 5, 773, 0, 0, 6509, 6510, 3, 874, 437, 0,
        6510, 6513, 5, 777, 0, 0, 6511, 6512, 5, 203, 0, 0, 6512, 6514, 7, 113, 0, 0, 6513, 6511, 1,
        0, 0, 0, 6513, 6514, 1, 0, 0, 0, 6514, 6516, 1, 0, 0, 0, 6515, 6517, 3, 894, 447, 0, 6516, 6515,
        1, 0, 0, 0, 6516, 6517, 1, 0, 0, 0, 6517, 6518, 1, 0, 0, 0, 6518, 6519, 3, 886, 443, 0, 6519,
        6521, 1, 0, 0, 0, 6520, 6470, 1, 0, 0, 0, 6520, 6474, 1, 0, 0, 0, 6520, 6486, 1, 0, 0, 0, 6520,
        6498, 1, 0, 0, 0, 6520, 6505, 1, 0, 0, 0, 6521, 885, 1, 0, 0, 0, 6522, 6525, 5, 691, 0, 0, 6523,
        6526, 3, 1346, 673, 0, 6524, 6526, 3, 314, 157, 0, 6525, 6523, 1, 0, 0, 0, 6525, 6524, 1, 0,
        0, 0, 6526, 887, 1, 0, 0, 0, 6527, 6535, 5, 773, 0, 0, 6528, 6531, 4, 444, 83, 0, 6529, 6532,
        3, 1366, 683, 0, 6530, 6532, 5, 787, 0, 0, 6531, 6529, 1, 0, 0, 0, 6531, 6530, 1, 0, 0, 0, 6532,
        6536, 1, 0, 0, 0, 6533, 6534, 4, 444, 84, 0, 6534, 6536, 3, 890, 445, 0, 6535, 6528, 1, 0, 0,
        0, 6535, 6533, 1, 0, 0, 0, 6536, 6539, 1, 0, 0, 0, 6537, 6538, 5, 773, 0, 0, 6538, 6540, 3, 862,
        431, 0, 6539, 6537, 1, 0, 0, 0, 6539, 6540, 1, 0, 0, 0, 6540, 889, 1, 0, 0, 0, 6541, 6544, 3,
        1400, 700, 0, 6542, 6544, 3, 892, 446, 0, 6543, 6541, 1, 0, 0, 0, 6543, 6542, 1, 0, 0, 0, 6544,
        891, 1, 0, 0, 0, 6545, 6550, 5, 787, 0, 0, 6546, 6550, 3, 1350, 675, 0, 6547, 6548, 5, 783,
        0, 0, 6548, 6550, 3, 1410, 705, 0, 6549, 6545, 1, 0, 0, 0, 6549, 6546, 1, 0, 0, 0, 6549, 6547,
        1, 0, 0, 0, 6550, 893, 1, 0, 0, 0, 6551, 6552, 7, 114, 0, 0, 6552, 6553, 5, 689, 0, 0, 6553, 895,
        1, 0, 0, 0, 6554, 6555, 5, 667, 0, 0, 6555, 6556, 5, 776, 0, 0, 6556, 6557, 3, 898, 449, 0, 6557,
        6559, 5, 777, 0, 0, 6558, 6560, 3, 886, 443, 0, 6559, 6558, 1, 0, 0, 0, 6559, 6560, 1, 0, 0,
        0, 6560, 6571, 1, 0, 0, 0, 6561, 6562, 5, 666, 0, 0, 6562, 6563, 5, 776, 0, 0, 6563, 6564, 3,
        898, 449, 0, 6564, 6565, 5, 773, 0, 0, 6565, 6566, 3, 898, 449, 0, 6566, 6568, 5, 777, 0, 0,
        6567, 6569, 3, 886, 443, 0, 6568, 6567, 1, 0, 0, 0, 6568, 6569, 1, 0, 0, 0, 6569, 6571, 1, 0,
        0, 0, 6570, 6554, 1, 0, 0, 0, 6570, 6561, 1, 0, 0, 0, 6571, 897, 1, 0, 0, 0, 6572, 6574, 5, 10,
        0, 0, 6573, 6572, 1, 0, 0, 0, 6573, 6574, 1, 0, 0, 0, 6574, 6575, 1, 0, 0, 0, 6575, 6576, 3, 862,
        431, 0, 6576, 899, 1, 0, 0, 0, 6577, 6583, 3, 902, 451, 0, 6578, 6579, 5, 776, 0, 0, 6579, 6580,
        3, 902, 451, 0, 6580, 6581, 5, 777, 0, 0, 6581, 6583, 1, 0, 0, 0, 6582, 6577, 1, 0, 0, 0, 6582,
        6578, 1, 0, 0, 0, 6583, 901, 1, 0, 0, 0, 6584, 6589, 3, 1358, 679, 0, 6585, 6586, 5, 773, 0,
        0, 6586, 6588, 3, 1358, 679, 0, 6587, 6585, 1, 0, 0, 0, 6588, 6591, 1, 0, 0, 0, 6589, 6587,
        1, 0, 0, 0, 6589, 6590, 1, 0, 0, 0, 6590, 903, 1, 0, 0, 0, 6591, 6589, 1, 0, 0, 0, 6592, 6593,
        5, 251, 0, 0, 6593, 6594, 5, 41, 0, 0, 6594, 6608, 5, 346, 0, 0, 6595, 6596, 5, 251, 0, 0, 6596,
        6597, 5, 359, 0, 0, 6597, 6598, 5, 267, 0, 0, 6598, 6602, 5, 346, 0, 0, 6599, 6600, 5, 645,
        0, 0, 6600, 6601, 5, 430, 0, 0, 6601, 6603, 5, 176, 0, 0, 6602, 6599, 1, 0, 0, 0, 6602, 6603,
        1, 0, 0, 0, 6603, 6608, 1, 0, 0, 0, 6604, 6605, 5, 645, 0, 0, 6605, 6606, 5, 430, 0, 0, 6606,
        6608, 5, 176, 0, 0, 6607, 6592, 1, 0, 0, 0, 6607, 6595, 1, 0, 0, 0, 6607, 6604, 1, 0, 0, 0, 6608,
        905, 1, 0, 0, 0, 6609, 6610, 5, 60, 0, 0, 6610, 6611, 5, 776, 0, 0, 6611, 6614, 3, 950, 475,
        0, 6612, 6613, 5, 621, 0, 0, 6613, 6615, 3, 1136, 568, 0, 6614, 6612, 1, 0, 0, 0, 6614, 6615,
        1, 0, 0, 0, 6615, 6616, 1, 0, 0, 0, 6616, 6617, 5, 777, 0, 0, 6617, 6883, 1, 0, 0, 0, 6618, 6620,
        5, 105, 0, 0, 6619, 6621, 3, 1418, 709, 0, 6620, 6619, 1, 0, 0, 0, 6620, 6621, 1, 0, 0, 0, 6621,
        6883, 1, 0, 0, 0, 6622, 6623, 5, 116, 0, 0, 6623, 6883, 3, 964, 482, 0, 6624, 6625, 5, 122,
        0, 0, 6625, 6883, 3, 964, 482, 0, 6626, 6627, 5, 229, 0, 0, 6627, 6883, 3, 964, 482, 0, 6628,
        6629, 5, 242, 0, 0, 6629, 6630, 5, 776, 0, 0, 6630, 6631, 3, 862, 431, 0, 6631, 6632, 5, 773,
        0, 0, 6632, 6633, 3, 862, 431, 0, 6633, 6634, 5, 773, 0, 0, 6634, 6635, 3, 862, 431, 0, 6635,
        6636, 5, 773, 0, 0, 6636, 6637, 3, 862, 431, 0, 6637, 6638, 5, 777, 0, 0, 6638, 6883, 1, 0,
        0, 0, 6639, 6640, 5, 247, 0, 0, 6640, 6641, 5, 776, 0, 0, 6641, 6644, 3, 862, 431, 0, 6642,
        6643, 5, 773, 0, 0, 6643, 6645, 3, 862, 431, 0, 6644, 6642, 1, 0, 0, 0, 6645, 6646, 1, 0, 0,
        0, 6646, 6644, 1, 0, 0, 0, 6646, 6647, 1, 0, 0, 0, 6647, 6648, 1, 0, 0, 0, 6648, 6649, 5, 777,
        0, 0, 6649, 6883, 1, 0, 0, 0, 6650, 6651, 5, 795, 0, 0, 6651, 6652, 5, 776, 0, 0, 6652, 6653,
        3, 874, 437, 0, 6653, 6654, 5, 773, 0, 0, 6654, 6656, 3, 1388, 694, 0, 6655, 6657, 3, 908,
        454, 0, 6656, 6655, 1, 0, 0, 0, 6656, 6657, 1, 0, 0, 0, 6657, 6658, 1, 0, 0, 0, 6658, 6659, 3,
        400, 200, 0, 6659, 6660, 5, 777, 0, 0, 6660, 6883, 1, 0, 0, 0, 6661, 6662, 5, 272, 0, 0, 6662,
        6663, 5, 776, 0, 0, 6663, 6664, 3, 862, 431, 0, 6664, 6665, 5, 773, 0, 0, 6665, 6666, 3, 862,
        431, 0, 6666, 6667, 5, 777, 0, 0, 6667, 6883, 1, 0, 0, 0, 6668, 6669, 5, 343, 0, 0, 6669, 6883,
        3, 964, 482, 0, 6670, 6671, 5, 350, 0, 0, 6671, 6883, 3, 964, 482, 0, 6672, 6673, 5, 478, 0,
        0, 6673, 6674, 5, 776, 0, 0, 6674, 6675, 3, 862, 431, 0, 6675, 6676, 5, 773, 0, 0, 6676, 6677,
        3, 862, 431, 0, 6677, 6678, 5, 777, 0, 0, 6678, 6883, 1, 0, 0, 0, 6679, 6680, 5, 495, 0, 0, 6680,
        6883, 3, 964, 482, 0, 6681, 6682, 5, 586, 0, 0, 6682, 6883, 3, 964, 482, 0, 6683, 6684, 5,
        583, 0, 0, 6684, 6685, 5, 776, 0, 0, 6685, 6688, 3, 862, 431, 0, 6686, 6687, 5, 773, 0, 0, 6687,
        6689, 3, 862, 431, 0, 6688, 6686, 1, 0, 0, 0, 6688, 6689, 1, 0, 0, 0, 6689, 6690, 1, 0, 0, 0,
        6690, 6691, 5, 777, 0, 0, 6691, 6883, 1, 0, 0, 0, 6692, 6883, 3, 922, 461, 0, 6693, 6883, 3,
        604, 302, 0, 6694, 6695, 5, 626, 0, 0, 6695, 6883, 3, 964, 482, 0, 6696, 6697, 5, 656, 0, 0,
        6697, 6883, 3, 964, 482, 0, 6698, 6699, 7, 115, 0, 0, 6699, 6700, 5, 776, 0, 0, 6700, 6701,
        3, 862, 431, 0, 6701, 6707, 5, 773, 0, 0, 6702, 6708, 3, 862, 431, 0, 6703, 6704, 5, 247, 0,
        0, 6704, 6705, 3, 862, 431, 0, 6705, 6706, 3, 958, 479, 0, 6706, 6708, 1, 0, 0, 0, 6707, 6702,
        1, 0, 0, 0, 6707, 6703, 1, 0, 0, 0, 6708, 6709, 1, 0, 0, 0, 6709, 6710, 5, 777, 0, 0, 6710, 6883,
        1, 0, 0, 0, 6711, 6713, 5, 100, 0, 0, 6712, 6714, 3, 1418, 709, 0, 6713, 6712, 1, 0, 0, 0, 6713,
        6714, 1, 0, 0, 0, 6714, 6883, 1, 0, 0, 0, 6715, 6717, 5, 108, 0, 0, 6716, 6718, 3, 912, 456,
        0, 6717, 6716, 1, 0, 0, 0, 6717, 6718, 1, 0, 0, 0, 6718, 6883, 1, 0, 0, 0, 6719, 6720, 7, 116,
        0, 0, 6720, 6721, 5, 776, 0, 0, 6721, 6722, 3, 862, 431, 0, 6722, 6723, 5, 773, 0, 0, 6723,
        6724, 5, 247, 0, 0, 6724, 6725, 3, 862, 431, 0, 6725, 6726, 3, 958, 479, 0, 6726, 6727, 5,
        777, 0, 0, 6727, 6883, 1, 0, 0, 0, 6728, 6729, 5, 182, 0, 0, 6729, 6730, 5, 776, 0, 0, 6730,
        6731, 3, 958, 479, 0, 6731, 6732, 5, 203, 0, 0, 6732, 6733, 3, 862, 431, 0, 6733, 6734, 5,
        777, 0, 0, 6734, 6883, 1, 0, 0, 0, 6735, 6736, 5, 213, 0, 0, 6736, 6737, 5, 776, 0, 0, 6737,
        6738, 3, 920, 460, 0, 6738, 6739, 5, 773, 0, 0, 6739, 6740, 3, 862, 431, 0, 6740, 6741, 5,
        777, 0, 0, 6741, 6883, 1, 0, 0, 0, 6742, 6744, 5, 372, 0, 0, 6743, 6745, 3, 912, 456, 0, 6744,
        6743, 1, 0, 0, 0, 6744, 6745, 1, 0, 0, 0, 6745, 6883, 1, 0, 0, 0, 6746, 6747, 5, 414, 0, 0, 6747,
        6748, 5, 776, 0, 0, 6748, 6749, 3, 872, 436, 0, 6749, 6750, 5, 251, 0, 0, 6750, 6751, 3, 862,
        431, 0, 6751, 6752, 5, 777, 0, 0, 6752, 6883, 1, 0, 0, 0, 6753, 6883, 3, 924, 462, 0, 6754,
        6756, 5, 569, 0, 0, 6755, 6757, 3, 912, 456, 0, 6756, 6755, 1, 0, 0, 0, 6756, 6757, 1, 0, 0,
        0, 6757, 6883, 1, 0, 0, 0, 6758, 6759, 7, 117, 0, 0, 6759, 6760, 5, 776, 0, 0, 6760, 6761, 3,
        960, 480, 0, 6761, 6762, 5, 773, 0, 0, 6762, 6763, 3, 862, 431, 0, 6763, 6764, 5, 773, 0, 0,
        6764, 6765, 3, 862, 431, 0, 6765, 6766, 5, 777, 0, 0, 6766, 6883, 1, 0, 0, 0, 6767, 6769, 5,
        622, 0, 0, 6768, 6770, 3, 1418, 709, 0, 6769, 6768, 1, 0, 0, 0, 6769, 6770, 1, 0, 0, 0, 6770,
        6883, 1, 0, 0, 0, 6771, 6773, 5, 624, 0, 0, 6772, 6774, 3, 912, 456, 0, 6773, 6772, 1, 0, 0,
        0, 6773, 6774, 1, 0, 0, 0, 6774, 6883, 1, 0, 0, 0, 6775, 6777, 5, 623, 0, 0, 6776, 6778, 3, 912,
        456, 0, 6777, 6776, 1, 0, 0, 0, 6777, 6778, 1, 0, 0, 0, 6778, 6883, 1, 0, 0, 0, 6779, 6780, 5,
        19, 0, 0, 6780, 6883, 3, 964, 482, 0, 6781, 6782, 5, 58, 0, 0, 6782, 6883, 3, 964, 482, 0, 6783,
        6784, 5, 67, 0, 0, 6784, 6883, 3, 962, 481, 0, 6785, 6786, 5, 70, 0, 0, 6786, 6883, 3, 964,
        482, 0, 6787, 6788, 5, 109, 0, 0, 6788, 6883, 3, 1418, 709, 0, 6789, 6790, 5, 231, 0, 0, 6790,
        6791, 5, 776, 0, 0, 6791, 6792, 3, 862, 431, 0, 6792, 6793, 5, 773, 0, 0, 6793, 6794, 3, 862,
        431, 0, 6794, 6795, 5, 773, 0, 0, 6795, 6796, 3, 862, 431, 0, 6796, 6797, 5, 777, 0, 0, 6797,
        6883, 1, 0, 0, 0, 6798, 6799, 5, 201, 0, 0, 6799, 6800, 5, 776, 0, 0, 6800, 6801, 3, 862, 431,
        0, 6801, 6802, 5, 773, 0, 0, 6802, 6805, 3, 862, 431, 0, 6803, 6804, 5, 773, 0, 0, 6804, 6806,
        3, 862, 431, 0, 6805, 6803, 1, 0, 0, 0, 6805, 6806, 1, 0, 0, 0, 6806, 6807, 1, 0, 0, 0, 6807,
        6808, 5, 777, 0, 0, 6808, 6883, 1, 0, 0, 0, 6809, 6810, 5, 337, 0, 0, 6810, 6883, 3, 964, 482,
        0, 6811, 6812, 5, 349, 0, 0, 6812, 6813, 5, 776, 0, 0, 6813, 6814, 3, 862, 431, 0, 6814, 6815,
        5, 773, 0, 0, 6815, 6816, 3, 862, 431, 0, 6816, 6817, 5, 777, 0, 0, 6817, 6883, 1, 0, 0, 0, 6818,
        6819, 4, 453, 85, 0, 6819, 6820, 5, 406, 0, 0, 6820, 6883, 3, 964, 482, 0, 6821, 6822, 5, 429,
        0, 0, 6822, 6883, 3, 964, 482, 0, 6823, 6824, 5, 457, 0, 0, 6824, 6825, 5, 776, 0, 0, 6825,
        6826, 3, 862, 431, 0, 6826, 6827, 5, 773, 0, 0, 6827, 6828, 3, 862, 431, 0, 6828, 6829, 5,
        777, 0, 0, 6829, 6883, 1, 0, 0, 0, 6830, 6831, 5, 458, 0, 0, 6831, 6832, 5, 776, 0, 0, 6832,
        6833, 3, 862, 431, 0, 6833, 6834, 5, 773, 0, 0, 6834, 6835, 3, 862, 431, 0, 6835, 6836, 5,
        773, 0, 0, 6836, 6837, 3, 862, 431, 0, 6837, 6838, 5, 777, 0, 0, 6838, 6883, 1, 0, 0, 0, 6839,
        6840, 5, 476, 0, 0, 6840, 6883, 3, 964, 482, 0, 6841, 6842, 5, 485, 0, 0, 6842, 6883, 3, 1418,
        709, 0, 6843, 6844, 5, 597, 0, 0, 6844, 6845, 5, 776, 0, 0, 6845, 6846, 3, 862, 431, 0, 6846,
        6847, 5, 773, 0, 0, 6847, 6848, 3, 862, 431, 0, 6848, 6849, 5, 777, 0, 0, 6849, 6883, 1, 0,
        0, 0, 6850, 6851, 5, 640, 0, 0, 6851, 6852, 5, 776, 0, 0, 6852, 6855, 3, 862, 431, 0, 6853,
        6854, 5, 773, 0, 0, 6854, 6856, 3, 862, 431, 0, 6855, 6853, 1, 0, 0, 0, 6855, 6856, 1, 0, 0,
        0, 6856, 6857, 1, 0, 0, 0, 6857, 6858, 5, 777, 0, 0, 6858, 6883, 1, 0, 0, 0, 6859, 6860, 5, 641,
        0, 0, 6860, 6861, 5, 776, 0, 0, 6861, 6877, 3, 862, 431, 0, 6862, 6863, 5, 17, 0, 0, 6863, 6864,
        5, 60, 0, 0, 6864, 6866, 3, 1130, 565, 0, 6865, 6862, 1, 0, 0, 0, 6865, 6866, 1, 0, 0, 0, 6866,
        6878, 1, 0, 0, 0, 6867, 6868, 5, 17, 0, 0, 6868, 6869, 5, 32, 0, 0, 6869, 6878, 3, 1130, 565,
        0, 6870, 6871, 5, 773, 0, 0, 6871, 6872, 3, 1362, 681, 0, 6872, 6873, 5, 773, 0, 0, 6873, 6874,
        3, 1362, 681, 0, 6874, 6875, 5, 773, 0, 0, 6875, 6876, 3, 1362, 681, 0, 6876, 6878, 1, 0, 0,
        0, 6877, 6865, 1, 0, 0, 0, 6877, 6867, 1, 0, 0, 0, 6877, 6870, 1, 0, 0, 0, 6878, 6879, 1, 0, 0,
        0, 6879, 6880, 5, 777, 0, 0, 6880, 6883, 1, 0, 0, 0, 6881, 6883, 3, 910, 455, 0, 6882, 6609,
        1, 0, 0, 0, 6882, 6618, 1, 0, 0, 0, 6882, 6622, 1, 0, 0, 0, 6882, 6624, 1, 0, 0, 0, 6882, 6626,
        1, 0, 0, 0, 6882, 6628, 1, 0, 0, 0, 6882, 6639, 1, 0, 0, 0, 6882, 6650, 1, 0, 0, 0, 6882, 6661,
        1, 0, 0, 0, 6882, 6668, 1, 0, 0, 0, 6882, 6670, 1, 0, 0, 0, 6882, 6672, 1, 0, 0, 0, 6882, 6679,
        1, 0, 0, 0, 6882, 6681, 1, 0, 0, 0, 6882, 6683, 1, 0, 0, 0, 6882, 6692, 1, 0, 0, 0, 6882, 6693,
        1, 0, 0, 0, 6882, 6694, 1, 0, 0, 0, 6882, 6696, 1, 0, 0, 0, 6882, 6698, 1, 0, 0, 0, 6882, 6711,
        1, 0, 0, 0, 6882, 6715, 1, 0, 0, 0, 6882, 6719, 1, 0, 0, 0, 6882, 6728, 1, 0, 0, 0, 6882, 6735,
        1, 0, 0, 0, 6882, 6742, 1, 0, 0, 0, 6882, 6746, 1, 0, 0, 0, 6882, 6753, 1, 0, 0, 0, 6882, 6754,
        1, 0, 0, 0, 6882, 6758, 1, 0, 0, 0, 6882, 6767, 1, 0, 0, 0, 6882, 6771, 1, 0, 0, 0, 6882, 6775,
        1, 0, 0, 0, 6882, 6779, 1, 0, 0, 0, 6882, 6781, 1, 0, 0, 0, 6882, 6783, 1, 0, 0, 0, 6882, 6785,
        1, 0, 0, 0, 6882, 6787, 1, 0, 0, 0, 6882, 6789, 1, 0, 0, 0, 6882, 6798, 1, 0, 0, 0, 6882, 6809,
        1, 0, 0, 0, 6882, 6811, 1, 0, 0, 0, 6882, 6818, 1, 0, 0, 0, 6882, 6821, 1, 0, 0, 0, 6882, 6823,
        1, 0, 0, 0, 6882, 6830, 1, 0, 0, 0, 6882, 6839, 1, 0, 0, 0, 6882, 6841, 1, 0, 0, 0, 6882, 6843,
        1, 0, 0, 0, 6882, 6850, 1, 0, 0, 0, 6882, 6859, 1, 0, 0, 0, 6882, 6881, 1, 0, 0, 0, 6883, 907,
        1, 0, 0, 0, 6884, 6885, 5, 794, 0, 0, 6885, 6886, 3, 948, 474, 0, 6886, 909, 1, 0, 0, 0, 6887,
        6888, 5, 211, 0, 0, 6888, 6890, 5, 776, 0, 0, 6889, 6891, 3, 950, 475, 0, 6890, 6889, 1, 0,
        0, 0, 6890, 6891, 1, 0, 0, 0, 6891, 6892, 1, 0, 0, 0, 6892, 6911, 5, 777, 0, 0, 6893, 6894, 5,
        279, 0, 0, 6894, 6911, 3, 962, 481, 0, 6895, 6896, 5, 351, 0, 0, 6896, 6911, 3, 962, 481, 0,
        6897, 6898, 5, 352, 0, 0, 6898, 6911, 3, 962, 481, 0, 6899, 6900, 5, 353, 0, 0, 6900, 6911,
        3, 962, 481, 0, 6901, 6902, 5, 411, 0, 0, 6902, 6903, 5, 776, 0, 0, 6903, 6904, 3, 862, 431,
        0, 6904, 6905, 5, 773, 0, 0, 6905, 6906, 3, 862, 431, 0, 6906, 6907, 5, 777, 0, 0, 6907, 6911,
        1, 0, 0, 0, 6908, 6909, 5, 412, 0, 0, 6909, 6911, 3, 962, 481, 0, 6910, 6887, 1, 0, 0, 0, 6910,
        6893, 1, 0, 0, 0, 6910, 6895, 1, 0, 0, 0, 6910, 6897, 1, 0, 0, 0, 6910, 6899, 1, 0, 0, 0, 6910,
        6901, 1, 0, 0, 0, 6910, 6908, 1, 0, 0, 0, 6911, 911, 1, 0, 0, 0, 6912, 6914, 5, 776, 0, 0, 6913,
        6915, 3, 914, 457, 0, 6914, 6913, 1, 0, 0, 0, 6914, 6915, 1, 0, 0, 0, 6915, 6916, 1, 0, 0, 0,
        6916, 6917, 5, 777, 0, 0, 6917, 913, 1, 0, 0, 0, 6918, 6919, 5, 747, 0, 0, 6919, 915, 1, 0, 0,
        0, 6920, 6933, 5, 274, 0, 0, 6921, 6922, 3, 1364, 682, 0, 6922, 6923, 5, 759, 0, 0, 6923, 6924,
        3, 1364, 682, 0, 6924, 6934, 1, 0, 0, 0, 6925, 6930, 3, 918, 459, 0, 6926, 6927, 5, 773, 0,
        0, 6927, 6929, 3, 918, 459, 0, 6928, 6926, 1, 0, 0, 0, 6929, 6932, 1, 0, 0, 0, 6930, 6928, 1,
        0, 0, 0, 6930, 6931, 1, 0, 0, 0, 6931, 6934, 1, 0, 0, 0, 6932, 6930, 1, 0, 0, 0, 6933, 6921, 1,
        0, 0, 0, 6933, 6925, 1, 0, 0, 0, 6934, 917, 1, 0, 0, 0, 6935, 6941, 3, 1364, 682, 0, 6936, 6938,
        7, 33, 0, 0, 6937, 6939, 5, 476, 0, 0, 6938, 6937, 1, 0, 0, 0, 6938, 6939, 1, 0, 0, 0, 6939, 6942,
        1, 0, 0, 0, 6940, 6942, 5, 476, 0, 0, 6941, 6936, 1, 0, 0, 0, 6941, 6940, 1, 0, 0, 0, 6941, 6942,
        1, 0, 0, 0, 6942, 919, 1, 0, 0, 0, 6943, 6944, 7, 118, 0, 0, 6944, 921, 1, 0, 0, 0, 6945, 6946,
        5, 595, 0, 0, 6946, 6970, 5, 776, 0, 0, 6947, 6950, 3, 862, 431, 0, 6948, 6949, 5, 203, 0, 0,
        6949, 6951, 3, 862, 431, 0, 6950, 6948, 1, 0, 0, 0, 6950, 6951, 1, 0, 0, 0, 6951, 6971, 1, 0,
        0, 0, 6952, 6954, 5, 269, 0, 0, 6953, 6955, 3, 862, 431, 0, 6954, 6953, 1, 0, 0, 0, 6954, 6955,
        1, 0, 0, 0, 6955, 6956, 1, 0, 0, 0, 6956, 6957, 5, 203, 0, 0, 6957, 6971, 3, 862, 431, 0, 6958,
        6960, 5, 591, 0, 0, 6959, 6961, 3, 862, 431, 0, 6960, 6959, 1, 0, 0, 0, 6960, 6961, 1, 0, 0,
        0, 6961, 6962, 1, 0, 0, 0, 6962, 6963, 5, 203, 0, 0, 6963, 6971, 3, 862, 431, 0, 6964, 6966,
        5, 43, 0, 0, 6965, 6967, 3, 862, 431, 0, 6966, 6965, 1, 0, 0, 0, 6966, 6967, 1, 0, 0, 0, 6967,
        6968, 1, 0, 0, 0, 6968, 6969, 5, 203, 0, 0, 6969, 6971, 3, 862, 431, 0, 6970, 6947, 1, 0, 0,
        0, 6970, 6952, 1, 0, 0, 0, 6970, 6958, 1, 0, 0, 0, 6970, 6964, 1, 0, 0, 0, 6971, 6972, 1, 0, 0,
        0, 6972, 6973, 5, 777, 0, 0, 6973, 923, 1, 0, 0, 0, 6974, 6975, 5, 563, 0, 0, 6975, 6976, 5,
        776, 0, 0, 6976, 6989, 3, 862, 431, 0, 6977, 6978, 5, 773, 0, 0, 6978, 6981, 3, 862, 431, 0,
        6979, 6980, 5, 773, 0, 0, 6980, 6982, 3, 862, 431, 0, 6981, 6979, 1, 0, 0, 0, 6981, 6982, 1,
        0, 0, 0, 6982, 6990, 1, 0, 0, 0, 6983, 6984, 5, 203, 0, 0, 6984, 6987, 3, 862, 431, 0, 6985,
        6986, 5, 200, 0, 0, 6986, 6988, 3, 862, 431, 0, 6987, 6985, 1, 0, 0, 0, 6987, 6988, 1, 0, 0,
        0, 6988, 6990, 1, 0, 0, 0, 6989, 6977, 1, 0, 0, 0, 6989, 6983, 1, 0, 0, 0, 6990, 6991, 1, 0, 0,
        0, 6991, 6992, 5, 777, 0, 0, 6992, 925, 1, 0, 0, 0, 6993, 6994, 3, 1348, 674, 0, 6994, 6996,
        5, 776, 0, 0, 6995, 6997, 3, 928, 464, 0, 6996, 6995, 1, 0, 0, 0, 6996, 6997, 1, 0, 0, 0, 6997,
        6998, 1, 0, 0, 0, 6998, 6999, 5, 777, 0, 0, 6999, 7008, 1, 0, 0, 0, 7000, 7001, 3, 1356, 678,
        0, 7001, 7003, 5, 776, 0, 0, 7002, 7004, 3, 950, 475, 0, 7003, 7002, 1, 0, 0, 0, 7003, 7004,
        1, 0, 0, 0, 7004, 7005, 1, 0, 0, 0, 7005, 7006, 5, 777, 0, 0, 7006, 7008, 1, 0, 0, 0, 7007, 6993,
        1, 0, 0, 0, 7007, 7000, 1, 0, 0, 0, 7008, 927, 1, 0, 0, 0, 7009, 7014, 3, 930, 465, 0, 7010, 7011,
        5, 773, 0, 0, 7011, 7013, 3, 930, 465, 0, 7012, 7010, 1, 0, 0, 0, 7013, 7016, 1, 0, 0, 0, 7014,
        7012, 1, 0, 0, 0, 7014, 7015, 1, 0, 0, 0, 7015, 929, 1, 0, 0, 0, 7016, 7014, 1, 0, 0, 0, 7017,
        7019, 3, 862, 431, 0, 7018, 7020, 3, 368, 184, 0, 7019, 7018, 1, 0, 0, 0, 7019, 7020, 1, 0,
        0, 0, 7020, 931, 1, 0, 0, 0, 7021, 7022, 5, 783, 0, 0, 7022, 7025, 3, 1410, 705, 0, 7023, 7025,
        5, 784, 0, 0, 7024, 7021, 1, 0, 0, 0, 7024, 7023, 1, 0, 0, 0, 7025, 933, 1, 0, 0, 0, 7026, 7027,
        3, 932, 466, 0, 7027, 7028, 5, 751, 0, 0, 7028, 7029, 3, 862, 431, 0, 7029, 935, 1, 0, 0, 0,
        7030, 7037, 3, 932, 466, 0, 7031, 7033, 5, 785, 0, 0, 7032, 7034, 3, 1424, 712, 0, 7033, 7032,
        1, 0, 0, 0, 7033, 7034, 1, 0, 0, 0, 7034, 7035, 1, 0, 0, 0, 7035, 7037, 3, 940, 470, 0, 7036,
        7030, 1, 0, 0, 0, 7036, 7031, 1, 0, 0, 0, 7037, 937, 1, 0, 0, 0, 7038, 7039, 4, 469, 86, 0, 7039,
        7041, 3, 1350, 675, 0, 7040, 7042, 3, 1360, 680, 0, 7041, 7040, 1, 0, 0, 0, 7041, 7042, 1,
        0, 0, 0, 7042, 7049, 1, 0, 0, 0, 7043, 7044, 4, 469, 87, 0, 7044, 7046, 3, 1412, 706, 0, 7045,
        7047, 3, 1360, 680, 0, 7046, 7045, 1, 0, 0, 0, 7046, 7047, 1, 0, 0, 0, 7047, 7049, 1, 0, 0, 0,
        7048, 7038, 1, 0, 0, 0, 7048, 7043, 1, 0, 0, 0, 7049, 7053, 1, 0, 0, 0, 7050, 7051, 5, 128, 0,
        0, 7051, 7053, 3, 1360, 680, 0, 7052, 7048, 1, 0, 0, 0, 7052, 7050, 1, 0, 0, 0, 7053, 939, 1,
        0, 0, 0, 7054, 7056, 3, 1410, 705, 0, 7055, 7057, 3, 1360, 680, 0, 7056, 7055, 1, 0, 0, 0, 7056,
        7057, 1, 0, 0, 0, 7057, 941, 1, 0, 0, 0, 7058, 7059, 5, 642, 0, 0, 7059, 7060, 3, 862, 431, 0,
        7060, 943, 1, 0, 0, 0, 7061, 7062, 5, 582, 0, 0, 7062, 7063, 3, 862, 431, 0, 7063, 945, 1, 0,
        0, 0, 7064, 7065, 5, 154, 0, 0, 7065, 7066, 3, 862, 431, 0, 7066, 947, 1, 0, 0, 0, 7067, 7069,
        5, 32, 0, 0, 7068, 7070, 3, 1120, 560, 0, 7069, 7068, 1, 0, 0, 0, 7069, 7070, 1, 0, 0, 0, 7070,
        7116, 1, 0, 0, 0, 7071, 7073, 5, 60, 0, 0, 7072, 7074, 3, 1120, 560, 0, 7073, 7072, 1, 0, 0,
        0, 7073, 7074, 1, 0, 0, 0, 7074, 7076, 1, 0, 0, 0, 7075, 7077, 3, 1124, 562, 0, 7076, 7075,
        1, 0, 0, 0, 7076, 7077, 1, 0, 0, 0, 7077, 7116, 1, 0, 0, 0, 7078, 7080, 3, 1116, 558, 0, 7079,
        7081, 3, 1120, 560, 0, 7080, 7079, 1, 0, 0, 0, 7080, 7081, 1, 0, 0, 0, 7081, 7116, 1, 0, 0, 0,
        7082, 7084, 5, 512, 0, 0, 7083, 7085, 5, 249, 0, 0, 7084, 7083, 1, 0, 0, 0, 7084, 7085, 1, 0,
        0, 0, 7085, 7116, 1, 0, 0, 0, 7086, 7088, 5, 612, 0, 0, 7087, 7089, 5, 249, 0, 0, 7088, 7087,
        1, 0, 0, 0, 7088, 7089, 1, 0, 0, 0, 7089, 7116, 1, 0, 0, 0, 7090, 7116, 5, 116, 0, 0, 7091, 7092,
        4, 474, 88, 0, 7092, 7116, 5, 656, 0, 0, 7093, 7095, 5, 586, 0, 0, 7094, 7096, 3, 1132, 566,
        0, 7095, 7094, 1, 0, 0, 0, 7095, 7096, 1, 0, 0, 0, 7096, 7116, 1, 0, 0, 0, 7097, 7099, 5, 113,
        0, 0, 7098, 7100, 3, 1132, 566, 0, 7099, 7098, 1, 0, 0, 0, 7099, 7100, 1, 0, 0, 0, 7100, 7116,
        1, 0, 0, 0, 7101, 7103, 5, 126, 0, 0, 7102, 7104, 3, 1404, 702, 0, 7103, 7102, 1, 0, 0, 0, 7103,
        7104, 1, 0, 0, 0, 7104, 7116, 1, 0, 0, 0, 7105, 7116, 5, 262, 0, 0, 7106, 7107, 4, 474, 89, 0,
        7107, 7116, 3, 1118, 559, 0, 7108, 7109, 4, 474, 90, 0, 7109, 7111, 5, 195, 0, 0, 7110, 7112,
        3, 1406, 703, 0, 7111, 7110, 1, 0, 0, 0, 7111, 7112, 1, 0, 0, 0, 7112, 7116, 1, 0, 0, 0, 7113,
        7114, 4, 474, 91, 0, 7114, 7116, 7, 119, 0, 0, 7115, 7067, 1, 0, 0, 0, 7115, 7071, 1, 0, 0, 0,
        7115, 7078, 1, 0, 0, 0, 7115, 7082, 1, 0, 0, 0, 7115, 7086, 1, 0, 0, 0, 7115, 7090, 1, 0, 0, 0,
        7115, 7091, 1, 0, 0, 0, 7115, 7093, 1, 0, 0, 0, 7115, 7097, 1, 0, 0, 0, 7115, 7101, 1, 0, 0, 0,
        7115, 7105, 1, 0, 0, 0, 7115, 7106, 1, 0, 0, 0, 7115, 7108, 1, 0, 0, 0, 7115, 7113, 1, 0, 0, 0,
        7116, 949, 1, 0, 0, 0, 7117, 7122, 3, 862, 431, 0, 7118, 7119, 5, 773, 0, 0, 7119, 7121, 3,
        862, 431, 0, 7120, 7118, 1, 0, 0, 0, 7121, 7124, 1, 0, 0, 0, 7122, 7120, 1, 0, 0, 0, 7122, 7123,
        1, 0, 0, 0, 7123, 951, 1, 0, 0, 0, 7124, 7122, 1, 0, 0, 0, 7125, 7126, 5, 60, 0, 0, 7126, 7129,
        5, 506, 0, 0, 7127, 7129, 5, 58, 0, 0, 7128, 7125, 1, 0, 0, 0, 7128, 7127, 1, 0, 0, 0, 7129, 953,
        1, 0, 0, 0, 7130, 7131, 7, 120, 0, 0, 7131, 955, 1, 0, 0, 0, 7132, 7133, 7, 121, 0, 0, 7133, 957,
        1, 0, 0, 0, 7134, 7137, 3, 960, 480, 0, 7135, 7137, 7, 122, 0, 0, 7136, 7134, 1, 0, 0, 0, 7136,
        7135, 1, 0, 0, 0, 7137, 959, 1, 0, 0, 0, 7138, 7139, 7, 123, 0, 0, 7139, 961, 1, 0, 0, 0, 7140,
        7141, 5, 776, 0, 0, 7141, 7142, 3, 950, 475, 0, 7142, 7143, 5, 777, 0, 0, 7143, 963, 1, 0, 0,
        0, 7144, 7145, 5, 776, 0, 0, 7145, 7146, 3, 862, 431, 0, 7146, 7147, 5, 777, 0, 0, 7147, 965,
        1, 0, 0, 0, 7148, 7149, 5, 776, 0, 0, 7149, 7150, 3, 874, 437, 0, 7150, 7151, 5, 777, 0, 0, 7151,
        967, 1, 0, 0, 0, 7152, 7157, 3, 970, 485, 0, 7153, 7154, 5, 773, 0, 0, 7154, 7156, 3, 970, 485,
        0, 7155, 7153, 1, 0, 0, 0, 7156, 7159, 1, 0, 0, 0, 7157, 7155, 1, 0, 0, 0, 7157, 7158, 1, 0, 0,
        0, 7158, 969, 1, 0, 0, 0, 7159, 7157, 1, 0, 0, 0, 7160, 7162, 3, 862, 431, 0, 7161, 7163, 3,
        342, 171, 0, 7162, 7161, 1, 0, 0, 0, 7162, 7163, 1, 0, 0, 0, 7163, 971, 1, 0, 0, 0, 7164, 7169,
        3, 974, 487, 0, 7165, 7166, 5, 773, 0, 0, 7166, 7168, 3, 974, 487, 0, 7167, 7165, 1, 0, 0, 0,
        7168, 7171, 1, 0, 0, 0, 7169, 7167, 1, 0, 0, 0, 7169, 7170, 1, 0, 0, 0, 7170, 973, 1, 0, 0, 0,
        7171, 7169, 1, 0, 0, 0, 7172, 7173, 3, 862, 431, 0, 7173, 975, 1, 0, 0, 0, 7174, 7175, 5, 200,
        0, 0, 7175, 7176, 5, 57, 0, 0, 7176, 7177, 3, 1390, 695, 0, 7177, 977, 1, 0, 0, 0, 7178, 7192,
        3, 2, 1, 0, 7179, 7192, 3, 980, 490, 0, 7180, 7192, 3, 982, 491, 0, 7181, 7192, 3, 990, 495,
        0, 7182, 7192, 3, 994, 497, 0, 7183, 7192, 3, 996, 498, 0, 7184, 7192, 3, 1002, 501, 0, 7185,
        7192, 3, 1004, 502, 0, 7186, 7192, 3, 1032, 516, 0, 7187, 7192, 3, 1030, 515, 0, 7188, 7192,
        3, 1050, 525, 0, 7189, 7192, 3, 1054, 527, 0, 7190, 7192, 3, 1052, 526, 0, 7191, 7178, 1,
        0, 0, 0, 7191, 7179, 1, 0, 0, 0, 7191, 7180, 1, 0, 0, 0, 7191, 7181, 1, 0, 0, 0, 7191, 7182, 1,
        0, 0, 0, 7191, 7183, 1, 0, 0, 0, 7191, 7184, 1, 0, 0, 0, 7191, 7185, 1, 0, 0, 0, 7191, 7186, 1,
        0, 0, 0, 7191, 7187, 1, 0, 0, 0, 7191, 7188, 1, 0, 0, 0, 7191, 7189, 1, 0, 0, 0, 7191, 7190, 1,
        0, 0, 0, 7192, 979, 1, 0, 0, 0, 7193, 7194, 5, 475, 0, 0, 7194, 7195, 3, 862, 431, 0, 7195, 981,
        1, 0, 0, 0, 7196, 7197, 5, 231, 0, 0, 7197, 7198, 3, 984, 492, 0, 7198, 7199, 5, 159, 0, 0, 7199,
        7200, 5, 231, 0, 0, 7200, 983, 1, 0, 0, 0, 7201, 7202, 3, 862, 431, 0, 7202, 7207, 3, 986, 493,
        0, 7203, 7204, 5, 155, 0, 0, 7204, 7208, 3, 984, 492, 0, 7205, 7206, 5, 154, 0, 0, 7206, 7208,
        3, 988, 494, 0, 7207, 7203, 1, 0, 0, 0, 7207, 7205, 1, 0, 0, 0, 7207, 7208, 1, 0, 0, 0, 7208,
        985, 1, 0, 0, 0, 7209, 7210, 5, 582, 0, 0, 7210, 7211, 3, 988, 494, 0, 7211, 987, 1, 0, 0, 0,
        7212, 7213, 3, 978, 489, 0, 7213, 7214, 5, 774, 0, 0, 7214, 7216, 1, 0, 0, 0, 7215, 7212, 1,
        0, 0, 0, 7216, 7217, 1, 0, 0, 0, 7217, 7215, 1, 0, 0, 0, 7217, 7218, 1, 0, 0, 0, 7218, 989, 1,
        0, 0, 0, 7219, 7221, 5, 51, 0, 0, 7220, 7222, 3, 862, 431, 0, 7221, 7220, 1, 0, 0, 0, 7221, 7222,
        1, 0, 0, 0, 7222, 7226, 1, 0, 0, 0, 7223, 7224, 3, 942, 471, 0, 7224, 7225, 3, 986, 493, 0, 7225,
        7227, 1, 0, 0, 0, 7226, 7223, 1, 0, 0, 0, 7227, 7228, 1, 0, 0, 0, 7228, 7226, 1, 0, 0, 0, 7228,
        7229, 1, 0, 0, 0, 7229, 7231, 1, 0, 0, 0, 7230, 7232, 3, 992, 496, 0, 7231, 7230, 1, 0, 0, 0,
        7231, 7232, 1, 0, 0, 0, 7232, 7233, 1, 0, 0, 0, 7233, 7234, 5, 159, 0, 0, 7234, 7235, 5, 51,
        0, 0, 7235, 991, 1, 0, 0, 0, 7236, 7237, 5, 154, 0, 0, 7237, 7238, 3, 988, 494, 0, 7238, 993,
        1, 0, 0, 0, 7239, 7240, 3, 998, 499, 0, 7240, 7242, 3, 1000, 500, 0, 7241, 7243, 3, 1336, 668,
        0, 7242, 7241, 1, 0, 0, 0, 7242, 7243, 1, 0, 0, 0, 7243, 995, 1, 0, 0, 0, 7244, 7245, 3, 1000,
        500, 0, 7245, 997, 1, 0, 0, 0, 7246, 7247, 3, 1334, 667, 0, 7247, 7248, 5, 775, 0, 0, 7248,
        999, 1, 0, 0, 0, 7249, 7251, 5, 29, 0, 0, 7250, 7252, 3, 1012, 506, 0, 7251, 7250, 1, 0, 0, 0,
        7251, 7252, 1, 0, 0, 0, 7252, 7254, 1, 0, 0, 0, 7253, 7255, 3, 988, 494, 0, 7254, 7253, 1, 0,
        0, 0, 7254, 7255, 1, 0, 0, 0, 7255, 7256, 1, 0, 0, 0, 7256, 7257, 5, 159, 0, 0, 7257, 1001, 1,
        0, 0, 0, 7258, 7259, 3, 998, 499, 0, 7259, 7261, 3, 1004, 502, 0, 7260, 7262, 3, 1336, 668,
        0, 7261, 7260, 1, 0, 0, 0, 7261, 7262, 1, 0, 0, 0, 7262, 1003, 1, 0, 0, 0, 7263, 7267, 3, 1006,
        503, 0, 7264, 7267, 3, 1008, 504, 0, 7265, 7267, 3, 1010, 505, 0, 7266, 7263, 1, 0, 0, 0, 7266,
        7264, 1, 0, 0, 0, 7266, 7265, 1, 0, 0, 0, 7267, 1005, 1, 0, 0, 0, 7268, 7269, 5, 294, 0, 0, 7269,
        7270, 3, 988, 494, 0, 7270, 7271, 5, 159, 0, 0, 7271, 7272, 5, 294, 0, 0, 7272, 1007, 1, 0,
        0, 0, 7273, 7274, 5, 644, 0, 0, 7274, 7275, 3, 862, 431, 0, 7275, 7276, 5, 147, 0, 0, 7276,
        7277, 3, 988, 494, 0, 7277, 7278, 5, 159, 0, 0, 7278, 7279, 5, 644, 0, 0, 7279, 1009, 1, 0,
        0, 0, 7280, 7281, 5, 457, 0, 0, 7281, 7282, 3, 988, 494, 0, 7282, 7283, 5, 613, 0, 0, 7283,
        7284, 3, 862, 431, 0, 7284, 7285, 5, 159, 0, 0, 7285, 7286, 5, 457, 0, 0, 7286, 1011, 1, 0,
        0, 0, 7287, 7288, 3, 1014, 507, 0, 7288, 7289, 5, 774, 0, 0, 7289, 7291, 1, 0, 0, 0, 7290, 7287,
        1, 0, 0, 0, 7291, 7292, 1, 0, 0, 0, 7292, 7290, 1, 0, 0, 0, 7292, 7293, 1, 0, 0, 0, 7293, 1013,
        1, 0, 0, 0, 7294, 7299, 3, 1016, 508, 0, 7295, 7299, 3, 1018, 509, 0, 7296, 7299, 3, 1024,
        512, 0, 7297, 7299, 3, 1028, 514, 0, 7298, 7294, 1, 0, 0, 0, 7298, 7295, 1, 0, 0, 0, 7298, 7296,
        1, 0, 0, 0, 7298, 7297, 1, 0, 0, 0, 7299, 1015, 1, 0, 0, 0, 7300, 7301, 5, 127, 0, 0, 7301, 7302,
        3, 1352, 676, 0, 7302, 7304, 3, 1114, 557, 0, 7303, 7305, 3, 1192, 596, 0, 7304, 7303, 1,
        0, 0, 0, 7304, 7305, 1, 0, 0, 0, 7305, 7308, 1, 0, 0, 0, 7306, 7307, 5, 128, 0, 0, 7307, 7309,
        3, 862, 431, 0, 7308, 7306, 1, 0, 0, 0, 7308, 7309, 1, 0, 0, 0, 7309, 1017, 1, 0, 0, 0, 7310,
        7311, 5, 127, 0, 0, 7311, 7312, 3, 1350, 675, 0, 7312, 7313, 5, 83, 0, 0, 7313, 7314, 5, 200,
        0, 0, 7314, 7315, 3, 1020, 510, 0, 7315, 1019, 1, 0, 0, 0, 7316, 7319, 3, 1362, 681, 0, 7317,
        7319, 3, 1022, 511, 0, 7318, 7316, 1, 0, 0, 0, 7318, 7317, 1, 0, 0, 0, 7319, 1021, 1, 0, 0, 0,
        7320, 7322, 5, 526, 0, 0, 7321, 7323, 5, 627, 0, 0, 7322, 7321, 1, 0, 0, 0, 7322, 7323, 1, 0,
        0, 0, 7323, 7324, 1, 0, 0, 0, 7324, 7325, 3, 1388, 694, 0, 7325, 1023, 1, 0, 0, 0, 7326, 7327,
        5, 127, 0, 0, 7327, 7328, 7, 124, 0, 0, 7328, 7329, 5, 219, 0, 0, 7329, 7330, 5, 200, 0, 0, 7330,
        7335, 3, 1026, 513, 0, 7331, 7332, 5, 773, 0, 0, 7332, 7334, 3, 1026, 513, 0, 7333, 7331,
        1, 0, 0, 0, 7334, 7337, 1, 0, 0, 0, 7335, 7333, 1, 0, 0, 0, 7335, 7336, 1, 0, 0, 0, 7336, 7338,
        1, 0, 0, 0, 7337, 7335, 1, 0, 0, 0, 7338, 7339, 3, 978, 489, 0, 7339, 1025, 1, 0, 0, 0, 7340,
        7348, 3, 1020, 510, 0, 7341, 7348, 3, 1350, 675, 0, 7342, 7348, 5, 527, 0, 0, 7343, 7344,
        3, 954, 477, 0, 7344, 7345, 5, 202, 0, 0, 7345, 7348, 1, 0, 0, 0, 7346, 7348, 5, 525, 0, 0, 7347,
        7340, 1, 0, 0, 0, 7347, 7341, 1, 0, 0, 0, 7347, 7342, 1, 0, 0, 0, 7347, 7343, 1, 0, 0, 0, 7347,
        7346, 1, 0, 0, 0, 7348, 1027, 1, 0, 0, 0, 7349, 7350, 5, 127, 0, 0, 7350, 7351, 3, 1350, 675,
        0, 7351, 7352, 5, 106, 0, 0, 7352, 7353, 5, 200, 0, 0, 7353, 7354, 3, 276, 138, 0, 7354, 1029,
        1, 0, 0, 0, 7355, 7356, 5, 260, 0, 0, 7356, 7357, 3, 1336, 668, 0, 7357, 1031, 1, 0, 0, 0, 7358,
        7359, 5, 271, 0, 0, 7359, 7360, 3, 1336, 668, 0, 7360, 1033, 1, 0, 0, 0, 7361, 7363, 5, 207,
        0, 0, 7362, 7364, 7, 125, 0, 0, 7363, 7362, 1, 0, 0, 0, 7363, 7364, 1, 0, 0, 0, 7364, 7365, 1,
        0, 0, 0, 7365, 7384, 5, 138, 0, 0, 7366, 7371, 3, 1038, 519, 0, 7367, 7368, 5, 773, 0, 0, 7368,
        7370, 3, 1038, 519, 0, 7369, 7367, 1, 0, 0, 0, 7370, 7373, 1, 0, 0, 0, 7371, 7369, 1, 0, 0, 0,
        7371, 7372, 1, 0, 0, 0, 7372, 7385, 1, 0, 0, 0, 7373, 7371, 1, 0, 0, 0, 7374, 7375, 5, 83, 0,
        0, 7375, 7376, 3, 1036, 518, 0, 7376, 7381, 3, 1040, 520, 0, 7377, 7378, 5, 773, 0, 0, 7378,
        7380, 3, 1040, 520, 0, 7379, 7377, 1, 0, 0, 0, 7380, 7383, 1, 0, 0, 0, 7381, 7379, 1, 0, 0, 0,
        7381, 7382, 1, 0, 0, 0, 7382, 7385, 1, 0, 0, 0, 7383, 7381, 1, 0, 0, 0, 7384, 7366, 1, 0, 0, 0,
        7384, 7374, 1, 0, 0, 0, 7385, 1035, 1, 0, 0, 0, 7386, 7390, 3, 1374, 687, 0, 7387, 7390, 3,
        936, 468, 0, 7388, 7390, 3, 1356, 678, 0, 7389, 7386, 1, 0, 0, 0, 7389, 7387, 1, 0, 0, 0, 7389,
        7388, 1, 0, 0, 0, 7390, 1037, 1, 0, 0, 0, 7391, 7394, 3, 932, 466, 0, 7392, 7394, 3, 1350, 675,
        0, 7393, 7391, 1, 0, 0, 0, 7393, 7392, 1, 0, 0, 0, 7394, 7395, 1, 0, 0, 0, 7395, 7396, 5, 750,
        0, 0, 7396, 7397, 7, 126, 0, 0, 7397, 1039, 1, 0, 0, 0, 7398, 7401, 3, 932, 466, 0, 7399, 7401,
        3, 1350, 675, 0, 7400, 7398, 1, 0, 0, 0, 7400, 7399, 1, 0, 0, 0, 7401, 7402, 1, 0, 0, 0, 7402,
        7405, 5, 750, 0, 0, 7403, 7406, 3, 1042, 521, 0, 7404, 7406, 5, 473, 0, 0, 7405, 7403, 1, 0,
        0, 0, 7405, 7404, 1, 0, 0, 0, 7406, 1041, 1, 0, 0, 0, 7407, 7408, 7, 127, 0, 0, 7408, 1043, 1,
        0, 0, 0, 7409, 7412, 5, 511, 0, 0, 7410, 7413, 3, 1350, 675, 0, 7411, 7413, 3, 1022, 511, 0,
        7412, 7410, 1, 0, 0, 0, 7412, 7411, 1, 0, 0, 0, 7413, 7423, 1, 0, 0, 0, 7414, 7415, 5, 506, 0,
        0, 7415, 7420, 3, 1048, 524, 0, 7416, 7417, 5, 773, 0, 0, 7417, 7419, 3, 1048, 524, 0, 7418,
        7416, 1, 0, 0, 0, 7419, 7422, 1, 0, 0, 0, 7420, 7418, 1, 0, 0, 0, 7420, 7421, 1, 0, 0, 0, 7421,
        7424, 1, 0, 0, 0, 7422, 7420, 1, 0, 0, 0, 7423, 7414, 1, 0, 0, 0, 7423, 7424, 1, 0, 0, 0, 7424,
        1045, 1, 0, 0, 0, 7425, 7428, 5, 469, 0, 0, 7426, 7429, 3, 1350, 675, 0, 7427, 7429, 3, 1022,
        511, 0, 7428, 7426, 1, 0, 0, 0, 7428, 7427, 1, 0, 0, 0, 7428, 7429, 1, 0, 0, 0, 7429, 7439, 1,
        0, 0, 0, 7430, 7431, 5, 506, 0, 0, 7431, 7436, 3, 1048, 524, 0, 7432, 7433, 5, 773, 0, 0, 7433,
        7435, 3, 1048, 524, 0, 7434, 7432, 1, 0, 0, 0, 7435, 7438, 1, 0, 0, 0, 7436, 7434, 1, 0, 0, 0,
        7436, 7437, 1, 0, 0, 0, 7437, 7440, 1, 0, 0, 0, 7438, 7436, 1, 0, 0, 0, 7439, 7430, 1, 0, 0, 0,
        7439, 7440, 1, 0, 0, 0, 7440, 1047, 1, 0, 0, 0, 7441, 7442, 3, 1042, 521, 0, 7442, 7443, 5,
        750, 0, 0, 7443, 7444, 3, 1036, 518, 0, 7444, 1049, 1, 0, 0, 0, 7445, 7446, 5, 387, 0, 0, 7446,
        7447, 3, 1350, 675, 0, 7447, 1051, 1, 0, 0, 0, 7448, 7449, 5, 66, 0, 0, 7449, 7450, 3, 1350,
        675, 0, 7450, 1053, 1, 0, 0, 0, 7451, 7456, 5, 186, 0, 0, 7452, 7454, 5, 367, 0, 0, 7453, 7452,
        1, 0, 0, 0, 7453, 7454, 1, 0, 0, 0, 7454, 7455, 1, 0, 0, 0, 7455, 7457, 5, 203, 0, 0, 7456, 7453,
        1, 0, 0, 0, 7456, 7457, 1, 0, 0, 0, 7457, 7458, 1, 0, 0, 0, 7458, 7459, 3, 1350, 675, 0, 7459,
        7460, 5, 248, 0, 0, 7460, 7461, 3, 1352, 676, 0, 7461, 1055, 1, 0, 0, 0, 7462, 7463, 5, 21,
        0, 0, 7463, 7476, 3, 862, 431, 0, 7464, 7465, 5, 171, 0, 0, 7465, 7466, 3, 862, 431, 0, 7466,
        7469, 3, 958, 479, 0, 7467, 7468, 5, 542, 0, 0, 7468, 7470, 3, 862, 431, 0, 7469, 7467, 1,
        0, 0, 0, 7469, 7470, 1, 0, 0, 0, 7470, 7473, 1, 0, 0, 0, 7471, 7472, 5, 160, 0, 0, 7472, 7474,
        3, 862, 431, 0, 7473, 7471, 1, 0, 0, 0, 7473, 7474, 1, 0, 0, 0, 7474, 7476, 1, 0, 0, 0, 7475,
        7462, 1, 0, 0, 0, 7475, 7464, 1, 0, 0, 0, 7476, 1057, 1, 0, 0, 0, 7477, 7478, 3, 1264, 632, 0,
        7478, 7480, 3, 1070, 535, 0, 7479, 7481, 3, 1060, 530, 0, 7480, 7479, 1, 0, 0, 0, 7480, 7481,
        1, 0, 0, 0, 7481, 1059, 1, 0, 0, 0, 7482, 7483, 4, 530, 92, 0, 7483, 7486, 3, 1062, 531, 0, 7484,
        7486, 3, 1084, 542, 0, 7485, 7482, 1, 0, 0, 0, 7485, 7484, 1, 0, 0, 0, 7486, 1061, 1, 0, 0, 0,
        7487, 7488, 5, 62, 0, 0, 7488, 7489, 3, 964, 482, 0, 7489, 1063, 1, 0, 0, 0, 7490, 7492, 5,
        371, 0, 0, 7491, 7490, 1, 0, 0, 0, 7491, 7492, 1, 0, 0, 0, 7492, 7493, 1, 0, 0, 0, 7493, 7494,
        5, 730, 0, 0, 7494, 1065, 1, 0, 0, 0, 7495, 7497, 7, 39, 0, 0, 7496, 7498, 3, 116, 58, 0, 7497,
        7496, 1, 0, 0, 0, 7497, 7498, 1, 0, 0, 0, 7498, 7499, 1, 0, 0, 0, 7499, 7503, 3, 1096, 548, 0,
        7500, 7502, 3, 1100, 550, 0, 7501, 7500, 1, 0, 0, 0, 7502, 7505, 1, 0, 0, 0, 7503, 7501, 1,
        0, 0, 0, 7503, 7504, 1, 0, 0, 0, 7504, 7571, 1, 0, 0, 0, 7505, 7503, 1, 0, 0, 0, 7506, 7508, 5,
        205, 0, 0, 7507, 7509, 3, 420, 210, 0, 7508, 7507, 1, 0, 0, 0, 7508, 7509, 1, 0, 0, 0, 7509,
        7511, 1, 0, 0, 0, 7510, 7512, 3, 1274, 637, 0, 7511, 7510, 1, 0, 0, 0, 7511, 7512, 1, 0, 0, 0,
        7512, 7513, 1, 0, 0, 0, 7513, 7517, 3, 1096, 548, 0, 7514, 7516, 3, 1108, 554, 0, 7515, 7514,
        1, 0, 0, 0, 7516, 7519, 1, 0, 0, 0, 7517, 7515, 1, 0, 0, 0, 7517, 7518, 1, 0, 0, 0, 7518, 7571,
        1, 0, 0, 0, 7519, 7517, 1, 0, 0, 0, 7520, 7522, 5, 523, 0, 0, 7521, 7523, 3, 420, 210, 0, 7522,
        7521, 1, 0, 0, 0, 7522, 7523, 1, 0, 0, 0, 7523, 7525, 1, 0, 0, 0, 7524, 7526, 3, 1274, 637, 0,
        7525, 7524, 1, 0, 0, 0, 7525, 7526, 1, 0, 0, 0, 7526, 7527, 1, 0, 0, 0, 7527, 7531, 3, 1096,
        548, 0, 7528, 7530, 3, 1110, 555, 0, 7529, 7528, 1, 0, 0, 0, 7530, 7533, 1, 0, 0, 0, 7531, 7529,
        1, 0, 0, 0, 7531, 7532, 1, 0, 0, 0, 7532, 7571, 1, 0, 0, 0, 7533, 7531, 1, 0, 0, 0, 7534, 7536,
        3, 1068, 534, 0, 7535, 7534, 1, 0, 0, 0, 7535, 7536, 1, 0, 0, 0, 7536, 7568, 1, 0, 0, 0, 7537,
        7538, 5, 420, 0, 0, 7538, 7544, 5, 265, 0, 0, 7539, 7541, 5, 609, 0, 0, 7540, 7542, 3, 420,
        210, 0, 7541, 7540, 1, 0, 0, 0, 7541, 7542, 1, 0, 0, 0, 7542, 7544, 1, 0, 0, 0, 7543, 7537, 1,
        0, 0, 0, 7543, 7539, 1, 0, 0, 0, 7544, 7546, 1, 0, 0, 0, 7545, 7547, 3, 116, 58, 0, 7546, 7545,
        1, 0, 0, 0, 7546, 7547, 1, 0, 0, 0, 7547, 7548, 1, 0, 0, 0, 7548, 7552, 3, 1096, 548, 0, 7549,
        7551, 3, 1100, 550, 0, 7550, 7549, 1, 0, 0, 0, 7551, 7554, 1, 0, 0, 0, 7552, 7550, 1, 0, 0, 0,
        7552, 7553, 1, 0, 0, 0, 7553, 7569, 1, 0, 0, 0, 7554, 7552, 1, 0, 0, 0, 7555, 7556, 5, 199, 0,
        0, 7556, 7558, 5, 265, 0, 0, 7557, 7559, 3, 1274, 637, 0, 7558, 7557, 1, 0, 0, 0, 7558, 7559,
        1, 0, 0, 0, 7559, 7560, 1, 0, 0, 0, 7560, 7561, 3, 1088, 544, 0, 7561, 7562, 3, 1084, 542, 0,
        7562, 7569, 1, 0, 0, 0, 7563, 7566, 3, 1062, 531, 0, 7564, 7565, 4, 533, 93, 0, 7565, 7567,
        3, 1064, 532, 0, 7566, 7564, 1, 0, 0, 0, 7566, 7567, 1, 0, 0, 0, 7567, 7569, 1, 0, 0, 0, 7568,
        7543, 1, 0, 0, 0, 7568, 7555, 1, 0, 0, 0, 7568, 7563, 1, 0, 0, 0, 7569, 7571, 1, 0, 0, 0, 7570,
        7495, 1, 0, 0, 0, 7570, 7506, 1, 0, 0, 0, 7570, 7520, 1, 0, 0, 0, 7570, 7535, 1, 0, 0, 0, 7571,
        1067, 1, 0, 0, 0, 7572, 7574, 5, 86, 0, 0, 7573, 7575, 3, 1350, 675, 0, 7574, 7573, 1, 0, 0,
        0, 7574, 7575, 1, 0, 0, 0, 7575, 1069, 1, 0, 0, 0, 7576, 7601, 3, 1114, 557, 0, 7577, 7579,
        3, 1072, 536, 0, 7578, 7577, 1, 0, 0, 0, 7579, 7582, 1, 0, 0, 0, 7580, 7578, 1, 0, 0, 0, 7580,
        7581, 1, 0, 0, 0, 7581, 7602, 1, 0, 0, 0, 7582, 7580, 1, 0, 0, 0, 7583, 7585, 3, 1192, 596, 0,
        7584, 7583, 1, 0, 0, 0, 7584, 7585, 1, 0, 0, 0, 7585, 7588, 1, 0, 0, 0, 7586, 7587, 5, 209, 0,
        0, 7587, 7589, 5, 12, 0, 0, 7588, 7586, 1, 0, 0, 0, 7588, 7589, 1, 0, 0, 0, 7589, 7590, 1, 0,
        0, 0, 7590, 7591, 5, 17, 0, 0, 7591, 7593, 3, 964, 482, 0, 7592, 7594, 7, 128, 0, 0, 7593, 7592,
        1, 0, 0, 0, 7593, 7594, 1, 0, 0, 0, 7594, 7598, 1, 0, 0, 0, 7595, 7597, 3, 1072, 536, 0, 7596,
        7595, 1, 0, 0, 0, 7597, 7600, 1, 0, 0, 0, 7598, 7596, 1, 0, 0, 0, 7598, 7599, 1, 0, 0, 0, 7599,
        7602, 1, 0, 0, 0, 7600, 7598, 1, 0, 0, 0, 7601, 7580, 1, 0, 0, 0, 7601, 7584, 1, 0, 0, 0, 7602,
        1071, 1, 0, 0, 0, 7603, 7605, 5, 371, 0, 0, 7604, 7603, 1, 0, 0, 0, 7604, 7605, 1, 0, 0, 0, 7605,
        7606, 1, 0, 0, 0, 7606, 7672, 3, 1398, 699, 0, 7607, 7608, 4, 536, 94, 0, 7608, 7609, 5, 371,
        0, 0, 7609, 7672, 5, 720, 0, 0, 7610, 7621, 5, 128, 0, 0, 7611, 7612, 4, 536, 95, 0, 7612, 7622,
        3, 1370, 685, 0, 7613, 7614, 4, 536, 96, 0, 7614, 7622, 3, 1080, 540, 0, 7615, 7617, 5, 372,
        0, 0, 7616, 7618, 3, 912, 456, 0, 7617, 7616, 1, 0, 0, 0, 7617, 7618, 1, 0, 0, 0, 7618, 7622,
        1, 0, 0, 0, 7619, 7620, 4, 536, 97, 0, 7620, 7622, 3, 964, 482, 0, 7621, 7611, 1, 0, 0, 0, 7621,
        7613, 1, 0, 0, 0, 7621, 7615, 1, 0, 0, 0, 7621, 7619, 1, 0, 0, 0, 7622, 7672, 1, 0, 0, 0, 7623,
        7624, 5, 383, 0, 0, 7624, 7625, 5, 614, 0, 0, 7625, 7627, 5, 372, 0, 0, 7626, 7628, 3, 912,
        456, 0, 7627, 7626, 1, 0, 0, 0, 7627, 7628, 1, 0, 0, 0, 7628, 7672, 1, 0, 0, 0, 7629, 7672, 5,
        24, 0, 0, 7630, 7631, 5, 501, 0, 0, 7631, 7632, 5, 128, 0, 0, 7632, 7672, 5, 627, 0, 0, 7633,
        7635, 5, 420, 0, 0, 7634, 7633, 1, 0, 0, 0, 7634, 7635, 1, 0, 0, 0, 7635, 7636, 1, 0, 0, 0, 7636,
        7672, 5, 265, 0, 0, 7637, 7639, 5, 609, 0, 0, 7638, 7640, 5, 265, 0, 0, 7639, 7638, 1, 0, 0,
        0, 7639, 7640, 1, 0, 0, 0, 7640, 7672, 1, 0, 0, 0, 7641, 7642, 5, 75, 0, 0, 7642, 7672, 3, 1388,
        694, 0, 7643, 7672, 3, 1192, 596, 0, 7644, 7645, 5, 74, 0, 0, 7645, 7672, 3, 1074, 537, 0,
        7646, 7647, 5, 553, 0, 0, 7647, 7672, 3, 1076, 538, 0, 7648, 7649, 5, 707, 0, 0, 7649, 7672,
        3, 1368, 684, 0, 7650, 7652, 4, 536, 98, 0, 7651, 7653, 3, 1068, 534, 0, 7652, 7651, 1, 0,
        0, 0, 7652, 7653, 1, 0, 0, 0, 7653, 7654, 1, 0, 0, 0, 7654, 7672, 3, 1062, 531, 0, 7655, 7656,
        4, 536, 99, 0, 7656, 7672, 3, 1064, 532, 0, 7657, 7658, 4, 536, 100, 0, 7658, 7660, 5, 798,
        0, 0, 7659, 7661, 5, 750, 0, 0, 7660, 7659, 1, 0, 0, 0, 7660, 7661, 1, 0, 0, 0, 7661, 7662, 1,
        0, 0, 0, 7662, 7672, 3, 1428, 714, 0, 7663, 7664, 4, 536, 101, 0, 7664, 7666, 5, 799, 0, 0,
        7665, 7667, 5, 750, 0, 0, 7666, 7665, 1, 0, 0, 0, 7666, 7667, 1, 0, 0, 0, 7667, 7668, 1, 0, 0,
        0, 7668, 7672, 3, 1428, 714, 0, 7669, 7670, 4, 536, 102, 0, 7670, 7672, 3, 1104, 552, 0, 7671,
        7604, 1, 0, 0, 0, 7671, 7607, 1, 0, 0, 0, 7671, 7610, 1, 0, 0, 0, 7671, 7623, 1, 0, 0, 0, 7671,
        7629, 1, 0, 0, 0, 7671, 7630, 1, 0, 0, 0, 7671, 7634, 1, 0, 0, 0, 7671, 7637, 1, 0, 0, 0, 7671,
        7641, 1, 0, 0, 0, 7671, 7643, 1, 0, 0, 0, 7671, 7644, 1, 0, 0, 0, 7671, 7646, 1, 0, 0, 0, 7671,
        7648, 1, 0, 0, 0, 7671, 7650, 1, 0, 0, 0, 7671, 7655, 1, 0, 0, 0, 7671, 7657, 1, 0, 0, 0, 7671,
        7663, 1, 0, 0, 0, 7671, 7669, 1, 0, 0, 0, 7672, 1073, 1, 0, 0, 0, 7673, 7674, 7, 129, 0, 0, 7674,
        1075, 1, 0, 0, 0, 7675, 7676, 7, 130, 0, 0, 7676, 1077, 1, 0, 0, 0, 7677, 7678, 5, 372, 0, 0,
        7678, 7679, 3, 1134, 567, 0, 7679, 1079, 1, 0, 0, 0, 7680, 7683, 3, 1078, 539, 0, 7681, 7683,
        3, 1372, 686, 0, 7682, 7680, 1, 0, 0, 0, 7682, 7681, 1, 0, 0, 0, 7683, 1081, 1, 0, 0, 0, 7684,
        7686, 5, 609, 0, 0, 7685, 7687, 5, 265, 0, 0, 7686, 7685, 1, 0, 0, 0, 7686, 7687, 1, 0, 0, 0,
        7687, 7699, 1, 0, 0, 0, 7688, 7689, 5, 75, 0, 0, 7689, 7699, 3, 1384, 692, 0, 7690, 7692, 3,
        954, 477, 0, 7691, 7690, 1, 0, 0, 0, 7691, 7692, 1, 0, 0, 0, 7692, 7693, 1, 0, 0, 0, 7693, 7699,
        5, 376, 0, 0, 7694, 7696, 5, 420, 0, 0, 7695, 7694, 1, 0, 0, 0, 7695, 7696, 1, 0, 0, 0, 7696,
        7697, 1, 0, 0, 0, 7697, 7699, 5, 265, 0, 0, 7698, 7684, 1, 0, 0, 0, 7698, 7688, 1, 0, 0, 0, 7698,
        7691, 1, 0, 0, 0, 7698, 7695, 1, 0, 0, 0, 7699, 1083, 1, 0, 0, 0, 7700, 7701, 5, 443, 0, 0, 7701,
        7703, 3, 1326, 663, 0, 7702, 7704, 3, 1354, 677, 0, 7703, 7702, 1, 0, 0, 0, 7703, 7704, 1,
        0, 0, 0, 7704, 7707, 1, 0, 0, 0, 7705, 7706, 5, 320, 0, 0, 7706, 7708, 7, 131, 0, 0, 7707, 7705,
        1, 0, 0, 0, 7707, 7708, 1, 0, 0, 0, 7708, 7725, 1, 0, 0, 0, 7709, 7710, 5, 383, 0, 0, 7710, 7711,
        5, 614, 0, 0, 7711, 7715, 3, 1086, 543, 0, 7712, 7713, 5, 383, 0, 0, 7713, 7714, 5, 133, 0,
        0, 7714, 7716, 3, 1086, 543, 0, 7715, 7712, 1, 0, 0, 0, 7715, 7716, 1, 0, 0, 0, 7716, 7726,
        1, 0, 0, 0, 7717, 7718, 5, 383, 0, 0, 7718, 7719, 5, 133, 0, 0, 7719, 7723, 3, 1086, 543, 0,
        7720, 7721, 5, 383, 0, 0, 7721, 7722, 5, 614, 0, 0, 7722, 7724, 3, 1086, 543, 0, 7723, 7720,
        1, 0, 0, 0, 7723, 7724, 1, 0, 0, 0, 7724, 7726, 1, 0, 0, 0, 7725, 7709, 1, 0, 0, 0, 7725, 7717,
        1, 0, 0, 0, 7725, 7726, 1, 0, 0, 0, 7726, 1085, 1, 0, 0, 0, 7727, 7735, 7, 2, 0, 0, 7728, 7729,
        5, 506, 0, 0, 7729, 7735, 3, 1398, 699, 0, 7730, 7731, 5, 506, 0, 0, 7731, 7735, 5, 128, 0,
        0, 7732, 7733, 5, 373, 0, 0, 7733, 7735, 5, 3, 0, 0, 7734, 7727, 1, 0, 0, 0, 7734, 7728, 1, 0,
        0, 0, 7734, 7730, 1, 0, 0, 0, 7734, 7732, 1, 0, 0, 0, 7735, 1087, 1, 0, 0, 0, 7736, 7737, 5, 776,
        0, 0, 7737, 7742, 3, 1090, 545, 0, 7738, 7739, 5, 773, 0, 0, 7739, 7741, 3, 1090, 545, 0, 7740,
        7738, 1, 0, 0, 0, 7741, 7744, 1, 0, 0, 0, 7742, 7740, 1, 0, 0, 0, 7742, 7743, 1, 0, 0, 0, 7743,
        7745, 1, 0, 0, 0, 7744, 7742, 1, 0, 0, 0, 7745, 7746, 5, 777, 0, 0, 7746, 1089, 1, 0, 0, 0, 7747,
        7749, 3, 1350, 675, 0, 7748, 7750, 3, 1120, 560, 0, 7749, 7748, 1, 0, 0, 0, 7749, 7750, 1,
        0, 0, 0, 7750, 7752, 1, 0, 0, 0, 7751, 7753, 3, 342, 171, 0, 7752, 7751, 1, 0, 0, 0, 7752, 7753,
        1, 0, 0, 0, 7753, 1091, 1, 0, 0, 0, 7754, 7755, 5, 776, 0, 0, 7755, 7760, 3, 1094, 547, 0, 7756,
        7757, 5, 773, 0, 0, 7757, 7759, 3, 1094, 547, 0, 7758, 7756, 1, 0, 0, 0, 7759, 7762, 1, 0, 0,
        0, 7760, 7758, 1, 0, 0, 0, 7760, 7761, 1, 0, 0, 0, 7761, 7763, 1, 0, 0, 0, 7762, 7760, 1, 0, 0,
        0, 7763, 7764, 5, 777, 0, 0, 7764, 1093, 1, 0, 0, 0, 7765, 7771, 3, 1090, 545, 0, 7766, 7768,
        3, 964, 482, 0, 7767, 7769, 3, 342, 171, 0, 7768, 7767, 1, 0, 0, 0, 7768, 7769, 1, 0, 0, 0, 7769,
        7771, 1, 0, 0, 0, 7770, 7765, 1, 0, 0, 0, 7770, 7766, 1, 0, 0, 0, 7771, 1095, 1, 0, 0, 0, 7772,
        7773, 4, 548, 103, 0, 7773, 7777, 3, 1092, 546, 0, 7774, 7775, 4, 548, 104, 0, 7775, 7777,
        3, 1088, 544, 0, 7776, 7772, 1, 0, 0, 0, 7776, 7774, 1, 0, 0, 0, 7777, 1097, 1, 0, 0, 0, 7778,
        7779, 7, 132, 0, 0, 7779, 1099, 1, 0, 0, 0, 7780, 7783, 3, 1102, 551, 0, 7781, 7783, 3, 1106,
        553, 0, 7782, 7780, 1, 0, 0, 0, 7782, 7781, 1, 0, 0, 0, 7783, 1101, 1, 0, 0, 0, 7784, 7786, 5,
        264, 0, 0, 7785, 7787, 5, 750, 0, 0, 7786, 7785, 1, 0, 0, 0, 7786, 7787, 1, 0, 0, 0, 7787, 7788,
        1, 0, 0, 0, 7788, 7805, 3, 1362, 681, 0, 7789, 7790, 5, 75, 0, 0, 7790, 7805, 3, 1388, 694,
        0, 7791, 7805, 3, 1104, 552, 0, 7792, 7793, 4, 551, 105, 0, 7793, 7795, 5, 798, 0, 0, 7794,
        7796, 5, 750, 0, 0, 7795, 7794, 1, 0, 0, 0, 7795, 7796, 1, 0, 0, 0, 7796, 7797, 1, 0, 0, 0, 7797,
        7805, 3, 1428, 714, 0, 7798, 7799, 4, 551, 106, 0, 7799, 7801, 5, 799, 0, 0, 7800, 7802, 5,
        750, 0, 0, 7801, 7800, 1, 0, 0, 0, 7801, 7802, 1, 0, 0, 0, 7802, 7803, 1, 0, 0, 0, 7803, 7805,
        3, 1428, 714, 0, 7804, 7784, 1, 0, 0, 0, 7804, 7789, 1, 0, 0, 0, 7804, 7791, 1, 0, 0, 0, 7804,
        7792, 1, 0, 0, 0, 7804, 7798, 1, 0, 0, 0, 7805, 1103, 1, 0, 0, 0, 7806, 7807, 7, 133, 0, 0, 7807,
        1105, 1, 0, 0, 0, 7808, 7809, 7, 134, 0, 0, 7809, 7810, 3, 1098, 549, 0, 7810, 1107, 1, 0, 0,
        0, 7811, 7816, 3, 1102, 551, 0, 7812, 7813, 5, 645, 0, 0, 7813, 7814, 5, 401, 0, 0, 7814, 7816,
        3, 1350, 675, 0, 7815, 7811, 1, 0, 0, 0, 7815, 7812, 1, 0, 0, 0, 7816, 1109, 1, 0, 0, 0, 7817,
        7818, 3, 1102, 551, 0, 7818, 1111, 1, 0, 0, 0, 7819, 7820, 3, 1114, 557, 0, 7820, 7821, 5,
        0, 0, 1, 7821, 1113, 1, 0, 0, 0, 7822, 7824, 7, 135, 0, 0, 7823, 7825, 3, 1120, 560, 0, 7824,
        7823, 1, 0, 0, 0, 7824, 7825, 1, 0, 0, 0, 7825, 7827, 1, 0, 0, 0, 7826, 7828, 3, 1122, 561, 0,
        7827, 7826, 1, 0, 0, 0, 7827, 7828, 1, 0, 0, 0, 7828, 7969, 1, 0, 0, 0, 7829, 7835, 5, 437, 0,
        0, 7830, 7832, 5, 146, 0, 0, 7831, 7833, 5, 416, 0, 0, 7832, 7831, 1, 0, 0, 0, 7832, 7833, 1,
        0, 0, 0, 7833, 7835, 1, 0, 0, 0, 7834, 7829, 1, 0, 0, 0, 7834, 7830, 1, 0, 0, 0, 7835, 7837, 1,
        0, 0, 0, 7836, 7838, 3, 1408, 704, 0, 7837, 7836, 1, 0, 0, 0, 7837, 7838, 1, 0, 0, 0, 7838, 7840,
        1, 0, 0, 0, 7839, 7841, 3, 1122, 561, 0, 7840, 7839, 1, 0, 0, 0, 7840, 7841, 1, 0, 0, 0, 7841,
        7969, 1, 0, 0, 0, 7842, 7844, 7, 136, 0, 0, 7843, 7845, 3, 1404, 702, 0, 7844, 7843, 1, 0, 0,
        0, 7844, 7845, 1, 0, 0, 0, 7845, 7847, 1, 0, 0, 0, 7846, 7848, 3, 1122, 561, 0, 7847, 7846,
        1, 0, 0, 0, 7847, 7848, 1, 0, 0, 0, 7848, 7969, 1, 0, 0, 0, 7849, 7851, 5, 37, 0, 0, 7850, 7852,
        3, 1120, 560, 0, 7851, 7850, 1, 0, 0, 0, 7851, 7852, 1, 0, 0, 0, 7852, 7969, 1, 0, 0, 0, 7853,
        7969, 7, 137, 0, 0, 7854, 7856, 5, 60, 0, 0, 7855, 7857, 3, 1120, 560, 0, 7856, 7855, 1, 0,
        0, 0, 7856, 7857, 1, 0, 0, 0, 7857, 7859, 1, 0, 0, 0, 7858, 7860, 3, 1124, 562, 0, 7859, 7858,
        1, 0, 0, 0, 7859, 7860, 1, 0, 0, 0, 7860, 7969, 1, 0, 0, 0, 7861, 7863, 3, 1116, 558, 0, 7862,
        7864, 3, 1120, 560, 0, 7863, 7862, 1, 0, 0, 0, 7863, 7864, 1, 0, 0, 0, 7864, 7866, 1, 0, 0, 0,
        7865, 7867, 5, 32, 0, 0, 7866, 7865, 1, 0, 0, 0, 7866, 7867, 1, 0, 0, 0, 7867, 7969, 1, 0, 0,
        0, 7868, 7870, 5, 32, 0, 0, 7869, 7871, 3, 1120, 560, 0, 7870, 7869, 1, 0, 0, 0, 7870, 7871,
        1, 0, 0, 0, 7871, 7969, 1, 0, 0, 0, 7872, 7873, 5, 60, 0, 0, 7873, 7876, 5, 633, 0, 0, 7874, 7876,
        5, 629, 0, 0, 7875, 7872, 1, 0, 0, 0, 7875, 7874, 1, 0, 0, 0, 7876, 7877, 1, 0, 0, 0, 7877, 7879,
        3, 1120, 560, 0, 7878, 7880, 3, 1124, 562, 0, 7879, 7878, 1, 0, 0, 0, 7879, 7880, 1, 0, 0, 0,
        7880, 7969, 1, 0, 0, 0, 7881, 7882, 5, 358, 0, 0, 7882, 7892, 5, 629, 0, 0, 7883, 7892, 5, 379,
        0, 0, 7884, 7885, 5, 361, 0, 0, 7885, 7892, 5, 629, 0, 0, 7886, 7887, 5, 358, 0, 0, 7887, 7888,
        5, 60, 0, 0, 7888, 7892, 5, 633, 0, 0, 7889, 7890, 5, 361, 0, 0, 7890, 7892, 5, 633, 0, 0, 7891,
        7881, 1, 0, 0, 0, 7891, 7883, 1, 0, 0, 0, 7891, 7884, 1, 0, 0, 0, 7891, 7886, 1, 0, 0, 0, 7891,
        7889, 1, 0, 0, 0, 7892, 7893, 1, 0, 0, 0, 7893, 7895, 3, 1120, 560, 0, 7894, 7896, 5, 32, 0,
        0, 7895, 7894, 1, 0, 0, 0, 7895, 7896, 1, 0, 0, 0, 7896, 7969, 1, 0, 0, 0, 7897, 7898, 5, 628,
        0, 0, 7898, 7969, 3, 1120, 560, 0, 7899, 7901, 5, 656, 0, 0, 7900, 7902, 3, 1120, 560, 0, 7901,
        7900, 1, 0, 0, 0, 7901, 7902, 1, 0, 0, 0, 7902, 7904, 1, 0, 0, 0, 7903, 7905, 3, 1122, 561, 0,
        7904, 7903, 1, 0, 0, 0, 7904, 7905, 1, 0, 0, 0, 7905, 7969, 1, 0, 0, 0, 7906, 7969, 5, 116, 0,
        0, 7907, 7909, 5, 586, 0, 0, 7908, 7910, 3, 1132, 566, 0, 7909, 7908, 1, 0, 0, 0, 7909, 7910,
        1, 0, 0, 0, 7910, 7969, 1, 0, 0, 0, 7911, 7913, 5, 583, 0, 0, 7912, 7914, 3, 1132, 566, 0, 7913,
        7912, 1, 0, 0, 0, 7913, 7914, 1, 0, 0, 0, 7914, 7969, 1, 0, 0, 0, 7915, 7917, 5, 113, 0, 0, 7916,
        7918, 3, 1132, 566, 0, 7917, 7916, 1, 0, 0, 0, 7917, 7918, 1, 0, 0, 0, 7918, 7969, 1, 0, 0, 0,
        7919, 7969, 5, 587, 0, 0, 7920, 7922, 5, 39, 0, 0, 7921, 7923, 3, 1120, 560, 0, 7922, 7921,
        1, 0, 0, 0, 7922, 7923, 1, 0, 0, 0, 7923, 7969, 1, 0, 0, 0, 7924, 7969, 7, 138, 0, 0, 7925, 7926,
        5, 293, 0, 0, 7926, 7969, 5, 628, 0, 0, 7927, 7931, 5, 293, 0, 0, 7928, 7929, 5, 60, 0, 0, 7929,
        7932, 5, 633, 0, 0, 7930, 7932, 5, 629, 0, 0, 7931, 7928, 1, 0, 0, 0, 7931, 7930, 1, 0, 0, 0,
        7931, 7932, 1, 0, 0, 0, 7932, 7934, 1, 0, 0, 0, 7933, 7935, 3, 1124, 562, 0, 7934, 7933, 1,
        0, 0, 0, 7934, 7935, 1, 0, 0, 0, 7935, 7969, 1, 0, 0, 0, 7936, 7938, 5, 589, 0, 0, 7937, 7939,
        3, 1124, 562, 0, 7938, 7937, 1, 0, 0, 0, 7938, 7939, 1, 0, 0, 0, 7939, 7969, 1, 0, 0, 0, 7940,
        7942, 5, 580, 0, 0, 7941, 7943, 3, 1120, 560, 0, 7942, 7941, 1, 0, 0, 0, 7942, 7943, 1, 0, 0,
        0, 7943, 7945, 1, 0, 0, 0, 7944, 7946, 3, 1124, 562, 0, 7945, 7944, 1, 0, 0, 0, 7945, 7946,
        1, 0, 0, 0, 7946, 7969, 1, 0, 0, 0, 7947, 7949, 5, 332, 0, 0, 7948, 7950, 3, 1124, 562, 0, 7949,
        7948, 1, 0, 0, 0, 7949, 7950, 1, 0, 0, 0, 7950, 7969, 1, 0, 0, 0, 7951, 7953, 5, 291, 0, 0, 7952,
        7954, 3, 1124, 562, 0, 7953, 7952, 1, 0, 0, 0, 7953, 7954, 1, 0, 0, 0, 7954, 7969, 1, 0, 0, 0,
        7955, 7956, 5, 164, 0, 0, 7956, 7958, 3, 1380, 690, 0, 7957, 7959, 3, 1124, 562, 0, 7958,
        7957, 1, 0, 0, 0, 7958, 7959, 1, 0, 0, 0, 7959, 7969, 1, 0, 0, 0, 7960, 7961, 5, 506, 0, 0, 7961,
        7963, 3, 1380, 690, 0, 7962, 7964, 3, 1124, 562, 0, 7963, 7962, 1, 0, 0, 0, 7963, 7964, 1,
        0, 0, 0, 7964, 7969, 1, 0, 0, 0, 7965, 7969, 5, 501, 0, 0, 7966, 7969, 5, 262, 0, 0, 7967, 7969,
        7, 139, 0, 0, 7968, 7822, 1, 0, 0, 0, 7968, 7834, 1, 0, 0, 0, 7968, 7842, 1, 0, 0, 0, 7968, 7849,
        1, 0, 0, 0, 7968, 7853, 1, 0, 0, 0, 7968, 7854, 1, 0, 0, 0, 7968, 7861, 1, 0, 0, 0, 7968, 7868,
        1, 0, 0, 0, 7968, 7875, 1, 0, 0, 0, 7968, 7891, 1, 0, 0, 0, 7968, 7897, 1, 0, 0, 0, 7968, 7899,
        1, 0, 0, 0, 7968, 7906, 1, 0, 0, 0, 7968, 7907, 1, 0, 0, 0, 7968, 7911, 1, 0, 0, 0, 7968, 7915,
        1, 0, 0, 0, 7968, 7919, 1, 0, 0, 0, 7968, 7920, 1, 0, 0, 0, 7968, 7924, 1, 0, 0, 0, 7968, 7925,
        1, 0, 0, 0, 7968, 7927, 1, 0, 0, 0, 7968, 7936, 1, 0, 0, 0, 7968, 7940, 1, 0, 0, 0, 7968, 7947,
        1, 0, 0, 0, 7968, 7951, 1, 0, 0, 0, 7968, 7955, 1, 0, 0, 0, 7968, 7960, 1, 0, 0, 0, 7968, 7965,
        1, 0, 0, 0, 7968, 7966, 1, 0, 0, 0, 7968, 7967, 1, 0, 0, 0, 7969, 1115, 1, 0, 0, 0, 7970, 7974,
        5, 361, 0, 0, 7971, 7972, 5, 358, 0, 0, 7972, 7974, 5, 60, 0, 0, 7973, 7970, 1, 0, 0, 0, 7973,
        7971, 1, 0, 0, 0, 7974, 1117, 1, 0, 0, 0, 7975, 7981, 5, 437, 0, 0, 7976, 7978, 5, 146, 0, 0,
        7977, 7979, 5, 416, 0, 0, 7978, 7977, 1, 0, 0, 0, 7978, 7979, 1, 0, 0, 0, 7979, 7981, 1, 0, 0,
        0, 7980, 7975, 1, 0, 0, 0, 7980, 7976, 1, 0, 0, 0, 7981, 1119, 1, 0, 0, 0, 7982, 7985, 5, 776,
        0, 0, 7983, 7986, 3, 1368, 684, 0, 7984, 7986, 5, 790, 0, 0, 7985, 7983, 1, 0, 0, 0, 7985, 7984,
        1, 0, 0, 0, 7986, 7987, 1, 0, 0, 0, 7987, 7988, 5, 777, 0, 0, 7988, 1121, 1, 0, 0, 0, 7989, 7991,
        7, 140, 0, 0, 7990, 7989, 1, 0, 0, 0, 7991, 7992, 1, 0, 0, 0, 7992, 7990, 1, 0, 0, 0, 7992, 7993,
        1, 0, 0, 0, 7993, 1123, 1, 0, 0, 0, 7994, 8009, 3, 1126, 563, 0, 7995, 8009, 3, 1128, 564, 0,
        7996, 8009, 5, 46, 0, 0, 7997, 7998, 3, 952, 476, 0, 7998, 8000, 3, 1136, 568, 0, 7999, 8001,
        5, 32, 0, 0, 8000, 7999, 1, 0, 0, 0, 8000, 8001, 1, 0, 0, 0, 8001, 8009, 1, 0, 0, 0, 8002, 8006,
        5, 32, 0, 0, 8003, 8004, 3, 952, 476, 0, 8004, 8005, 3, 1136, 568, 0, 8005, 8007, 1, 0, 0, 0,
        8006, 8003, 1, 0, 0, 0, 8006, 8007, 1, 0, 0, 0, 8007, 8009, 1, 0, 0, 0, 8008, 7994, 1, 0, 0, 0,
        8008, 7995, 1, 0, 0, 0, 8008, 7996, 1, 0, 0, 0, 8008, 7997, 1, 0, 0, 0, 8008, 8002, 1, 0, 0, 0,
        8009, 1125, 1, 0, 0, 0, 8010, 8012, 5, 19, 0, 0, 8011, 8013, 5, 32, 0, 0, 8012, 8011, 1, 0, 0,
        0, 8012, 8013, 1, 0, 0, 0, 8013, 8017, 1, 0, 0, 0, 8014, 8015, 5, 32, 0, 0, 8015, 8017, 5, 19,
        0, 0, 8016, 8010, 1, 0, 0, 0, 8016, 8014, 1, 0, 0, 0, 8017, 1127, 1, 0, 0, 0, 8018, 8020, 5, 606,
        0, 0, 8019, 8021, 5, 32, 0, 0, 8020, 8019, 1, 0, 0, 0, 8020, 8021, 1, 0, 0, 0, 8021, 8025, 1,
        0, 0, 0, 8022, 8023, 5, 32, 0, 0, 8023, 8025, 5, 606, 0, 0, 8024, 8018, 1, 0, 0, 0, 8024, 8022,
        1, 0, 0, 0, 8025, 1129, 1, 0, 0, 0, 8026, 8027, 5, 776, 0, 0, 8027, 8028, 3, 1364, 682, 0, 8028,
        8029, 5, 777, 0, 0, 8029, 1131, 1, 0, 0, 0, 8030, 8031, 5, 776, 0, 0, 8031, 8032, 5, 747, 0,
        0, 8032, 8033, 5, 777, 0, 0, 8033, 1133, 1, 0, 0, 0, 8034, 8040, 1, 0, 0, 0, 8035, 8040, 3, 1418,
        709, 0, 8036, 8037, 5, 776, 0, 0, 8037, 8038, 5, 747, 0, 0, 8038, 8040, 5, 777, 0, 0, 8039,
        8034, 1, 0, 0, 0, 8039, 8035, 1, 0, 0, 0, 8039, 8036, 1, 0, 0, 0, 8040, 1135, 1, 0, 0, 0, 8041,
        8046, 3, 1410, 705, 0, 8042, 8046, 5, 32, 0, 0, 8043, 8044, 4, 568, 107, 0, 8044, 8046, 5,
        128, 0, 0, 8045, 8041, 1, 0, 0, 0, 8045, 8042, 1, 0, 0, 0, 8045, 8043, 1, 0, 0, 0, 8046, 1137,
        1, 0, 0, 0, 8047, 8053, 3, 1410, 705, 0, 8048, 8049, 4, 569, 108, 0, 8049, 8053, 5, 128, 0,
        0, 8050, 8051, 4, 569, 109, 0, 8051, 8053, 5, 32, 0, 0, 8052, 8047, 1, 0, 0, 0, 8052, 8048,
        1, 0, 0, 0, 8052, 8050, 1, 0, 0, 0, 8053, 1139, 1, 0, 0, 0, 8054, 8061, 3, 1148, 574, 0, 8055,
        8057, 5, 773, 0, 0, 8056, 8055, 1, 0, 0, 0, 8056, 8057, 1, 0, 0, 0, 8057, 8058, 1, 0, 0, 0, 8058,
        8060, 3, 1148, 574, 0, 8059, 8056, 1, 0, 0, 0, 8060, 8063, 1, 0, 0, 0, 8061, 8059, 1, 0, 0, 0,
        8061, 8062, 1, 0, 0, 0, 8062, 1141, 1, 0, 0, 0, 8063, 8061, 1, 0, 0, 0, 8064, 8066, 3, 1140,
        570, 0, 8065, 8067, 3, 1144, 572, 0, 8066, 8065, 1, 0, 0, 0, 8066, 8067, 1, 0, 0, 0, 8067, 8070,
        1, 0, 0, 0, 8068, 8070, 3, 1144, 572, 0, 8069, 8064, 1, 0, 0, 0, 8069, 8068, 1, 0, 0, 0, 8070,
        1143, 1, 0, 0, 0, 8071, 8073, 3, 1158, 579, 0, 8072, 8074, 3, 92, 46, 0, 8073, 8072, 1, 0, 0,
        0, 8073, 8074, 1, 0, 0, 0, 8074, 8077, 1, 0, 0, 0, 8075, 8077, 3, 92, 46, 0, 8076, 8071, 1, 0,
        0, 0, 8076, 8075, 1, 0, 0, 0, 8077, 1145, 1, 0, 0, 0, 8078, 8080, 3, 1148, 574, 0, 8079, 8078,
        1, 0, 0, 0, 8080, 8081, 1, 0, 0, 0, 8081, 8079, 1, 0, 0, 0, 8081, 8082, 1, 0, 0, 0, 8082, 1147,
        1, 0, 0, 0, 8083, 8085, 5, 163, 0, 0, 8084, 8086, 5, 750, 0, 0, 8085, 8084, 1, 0, 0, 0, 8085,
        8086, 1, 0, 0, 0, 8086, 8087, 1, 0, 0, 0, 8087, 8224, 3, 1318, 659, 0, 8088, 8089, 4, 574, 110,
        0, 8089, 8091, 5, 721, 0, 0, 8090, 8092, 3, 1420, 710, 0, 8091, 8090, 1, 0, 0, 0, 8091, 8092,
        1, 0, 0, 0, 8092, 8095, 1, 0, 0, 0, 8093, 8096, 5, 376, 0, 0, 8094, 8096, 3, 1410, 705, 0, 8095,
        8093, 1, 0, 0, 0, 8095, 8094, 1, 0, 0, 0, 8096, 8224, 1, 0, 0, 0, 8097, 8099, 5, 323, 0, 0, 8098,
        8100, 5, 750, 0, 0, 8099, 8098, 1, 0, 0, 0, 8099, 8100, 1, 0, 0, 0, 8100, 8101, 1, 0, 0, 0, 8101,
        8224, 3, 1366, 683, 0, 8102, 8104, 5, 344, 0, 0, 8103, 8105, 5, 750, 0, 0, 8104, 8103, 1, 0,
        0, 0, 8104, 8105, 1, 0, 0, 0, 8105, 8106, 1, 0, 0, 0, 8106, 8224, 3, 1366, 683, 0, 8107, 8109,
        5, 25, 0, 0, 8108, 8110, 5, 750, 0, 0, 8109, 8108, 1, 0, 0, 0, 8109, 8110, 1, 0, 0, 0, 8110, 8111,
        1, 0, 0, 0, 8111, 8224, 3, 1366, 683, 0, 8112, 8114, 5, 406, 0, 0, 8113, 8115, 5, 750, 0, 0,
        8114, 8113, 1, 0, 0, 0, 8114, 8115, 1, 0, 0, 0, 8115, 8116, 1, 0, 0, 0, 8116, 8224, 3, 1382,
        691, 0, 8117, 8119, 5, 75, 0, 0, 8118, 8120, 5, 750, 0, 0, 8119, 8118, 1, 0, 0, 0, 8119, 8120,
        1, 0, 0, 0, 8120, 8121, 1, 0, 0, 0, 8121, 8224, 3, 1382, 691, 0, 8122, 8124, 5, 81, 0, 0, 8123,
        8125, 5, 750, 0, 0, 8124, 8123, 1, 0, 0, 0, 8124, 8125, 1, 0, 0, 0, 8125, 8126, 1, 0, 0, 0, 8126,
        8224, 3, 1384, 692, 0, 8127, 8129, 5, 158, 0, 0, 8128, 8130, 5, 750, 0, 0, 8129, 8128, 1, 0,
        0, 0, 8129, 8130, 1, 0, 0, 0, 8130, 8131, 1, 0, 0, 0, 8131, 8224, 3, 1384, 692, 0, 8132, 8134,
        5, 24, 0, 0, 8133, 8135, 5, 750, 0, 0, 8134, 8133, 1, 0, 0, 0, 8134, 8135, 1, 0, 0, 0, 8135, 8136,
        1, 0, 0, 0, 8136, 8224, 3, 1366, 683, 0, 8137, 8139, 5, 399, 0, 0, 8138, 8140, 5, 750, 0, 0,
        8139, 8138, 1, 0, 0, 0, 8139, 8140, 1, 0, 0, 0, 8140, 8141, 1, 0, 0, 0, 8141, 8224, 3, 1150,
        575, 0, 8142, 8144, 7, 141, 0, 0, 8143, 8145, 5, 750, 0, 0, 8144, 8143, 1, 0, 0, 0, 8144, 8145,
        1, 0, 0, 0, 8145, 8146, 1, 0, 0, 0, 8146, 8224, 3, 1150, 575, 0, 8147, 8149, 7, 142, 0, 0, 8148,
        8150, 5, 750, 0, 0, 8149, 8148, 1, 0, 0, 0, 8149, 8150, 1, 0, 0, 0, 8150, 8151, 1, 0, 0, 0, 8151,
        8224, 3, 1362, 681, 0, 8152, 8154, 5, 132, 0, 0, 8153, 8155, 5, 750, 0, 0, 8154, 8153, 1, 0,
        0, 0, 8154, 8155, 1, 0, 0, 0, 8155, 8156, 1, 0, 0, 0, 8156, 8224, 3, 1362, 681, 0, 8157, 8159,
        5, 486, 0, 0, 8158, 8160, 5, 750, 0, 0, 8159, 8158, 1, 0, 0, 0, 8159, 8160, 1, 0, 0, 0, 8160,
        8161, 1, 0, 0, 0, 8161, 8224, 7, 143, 0, 0, 8162, 8164, 5, 608, 0, 0, 8163, 8165, 5, 750, 0,
        0, 8164, 8163, 1, 0, 0, 0, 8164, 8165, 1, 0, 0, 0, 8165, 8166, 1, 0, 0, 0, 8166, 8167, 5, 776,
        0, 0, 8167, 8168, 3, 1328, 664, 0, 8168, 8169, 5, 777, 0, 0, 8169, 8224, 1, 0, 0, 0, 8170, 8224,
        3, 1156, 578, 0, 8171, 8224, 3, 1152, 576, 0, 8172, 8174, 5, 243, 0, 0, 8173, 8175, 5, 750,
        0, 0, 8174, 8173, 1, 0, 0, 0, 8174, 8175, 1, 0, 0, 0, 8175, 8176, 1, 0, 0, 0, 8176, 8224, 7, 144,
        0, 0, 8177, 8178, 5, 112, 0, 0, 8178, 8180, 5, 139, 0, 0, 8179, 8181, 5, 750, 0, 0, 8180, 8179,
        1, 0, 0, 0, 8180, 8181, 1, 0, 0, 0, 8181, 8182, 1, 0, 0, 0, 8182, 8224, 3, 1384, 692, 0, 8183,
        8184, 5, 236, 0, 0, 8184, 8186, 5, 139, 0, 0, 8185, 8187, 5, 750, 0, 0, 8186, 8185, 1, 0, 0,
        0, 8186, 8187, 1, 0, 0, 0, 8187, 8188, 1, 0, 0, 0, 8188, 8224, 3, 1384, 692, 0, 8189, 8191,
        5, 572, 0, 0, 8190, 8192, 5, 750, 0, 0, 8191, 8190, 1, 0, 0, 0, 8191, 8192, 1, 0, 0, 0, 8192,
        8193, 1, 0, 0, 0, 8193, 8224, 3, 1350, 675, 0, 8194, 8195, 5, 553, 0, 0, 8195, 8224, 7, 145,
        0, 0, 8196, 8198, 5, 84, 0, 0, 8197, 8199, 5, 750, 0, 0, 8198, 8197, 1, 0, 0, 0, 8198, 8199,
        1, 0, 0, 0, 8199, 8200, 1, 0, 0, 0, 8200, 8224, 3, 1384, 692, 0, 8201, 8203, 5, 264, 0, 0, 8202,
        8204, 5, 750, 0, 0, 8203, 8202, 1, 0, 0, 0, 8203, 8204, 1, 0, 0, 0, 8204, 8205, 1, 0, 0, 0, 8205,
        8224, 3, 1366, 683, 0, 8206, 8207, 4, 574, 111, 0, 8207, 8208, 5, 543, 0, 0, 8208, 8224, 5,
        592, 0, 0, 8209, 8210, 4, 574, 112, 0, 8210, 8212, 5, 798, 0, 0, 8211, 8213, 5, 750, 0, 0, 8212,
        8211, 1, 0, 0, 0, 8212, 8213, 1, 0, 0, 0, 8213, 8214, 1, 0, 0, 0, 8214, 8224, 3, 1428, 714, 0,
        8215, 8216, 4, 574, 113, 0, 8216, 8218, 5, 799, 0, 0, 8217, 8219, 5, 750, 0, 0, 8218, 8217,
        1, 0, 0, 0, 8218, 8219, 1, 0, 0, 0, 8219, 8220, 1, 0, 0, 0, 8220, 8224, 3, 1428, 714, 0, 8221,
        8222, 4, 574, 114, 0, 8222, 8224, 3, 148, 74, 0, 8223, 8083, 1, 0, 0, 0, 8223, 8088, 1, 0, 0,
        0, 8223, 8097, 1, 0, 0, 0, 8223, 8102, 1, 0, 0, 0, 8223, 8107, 1, 0, 0, 0, 8223, 8112, 1, 0, 0,
        0, 8223, 8117, 1, 0, 0, 0, 8223, 8122, 1, 0, 0, 0, 8223, 8127, 1, 0, 0, 0, 8223, 8132, 1, 0, 0,
        0, 8223, 8137, 1, 0, 0, 0, 8223, 8142, 1, 0, 0, 0, 8223, 8147, 1, 0, 0, 0, 8223, 8152, 1, 0, 0,
        0, 8223, 8157, 1, 0, 0, 0, 8223, 8162, 1, 0, 0, 0, 8223, 8170, 1, 0, 0, 0, 8223, 8171, 1, 0, 0,
        0, 8223, 8172, 1, 0, 0, 0, 8223, 8177, 1, 0, 0, 0, 8223, 8183, 1, 0, 0, 0, 8223, 8189, 1, 0, 0,
        0, 8223, 8194, 1, 0, 0, 0, 8223, 8196, 1, 0, 0, 0, 8223, 8201, 1, 0, 0, 0, 8223, 8206, 1, 0, 0,
        0, 8223, 8209, 1, 0, 0, 0, 8223, 8215, 1, 0, 0, 0, 8223, 8221, 1, 0, 0, 0, 8224, 1149, 1, 0, 0,
        0, 8225, 8228, 3, 1362, 681, 0, 8226, 8228, 5, 128, 0, 0, 8227, 8225, 1, 0, 0, 0, 8227, 8226,
        1, 0, 0, 0, 8228, 1151, 1, 0, 0, 0, 8229, 8231, 5, 128, 0, 0, 8230, 8229, 1, 0, 0, 0, 8230, 8231,
        1, 0, 0, 0, 8231, 8232, 1, 0, 0, 0, 8232, 8234, 5, 69, 0, 0, 8233, 8235, 5, 750, 0, 0, 8234, 8233,
        1, 0, 0, 0, 8234, 8235, 1, 0, 0, 0, 8235, 8236, 1, 0, 0, 0, 8236, 8237, 3, 1138, 569, 0, 8237,
        1153, 1, 0, 0, 0, 8238, 8240, 5, 128, 0, 0, 8239, 8238, 1, 0, 0, 0, 8239, 8240, 1, 0, 0, 0, 8240,
        8241, 1, 0, 0, 0, 8241, 8243, 5, 158, 0, 0, 8242, 8244, 5, 750, 0, 0, 8243, 8242, 1, 0, 0, 0,
        8243, 8244, 1, 0, 0, 0, 8244, 8245, 1, 0, 0, 0, 8245, 8246, 3, 1382, 691, 0, 8246, 1155, 1,
        0, 0, 0, 8247, 8249, 5, 128, 0, 0, 8248, 8247, 1, 0, 0, 0, 8248, 8249, 1, 0, 0, 0, 8249, 8250,
        1, 0, 0, 0, 8250, 8252, 3, 952, 476, 0, 8251, 8253, 5, 750, 0, 0, 8252, 8251, 1, 0, 0, 0, 8252,
        8253, 1, 0, 0, 0, 8253, 8254, 1, 0, 0, 0, 8254, 8255, 3, 1136, 568, 0, 8255, 1157, 1, 0, 0, 0,
        8256, 8257, 5, 405, 0, 0, 8257, 8258, 5, 45, 0, 0, 8258, 8261, 3, 1160, 580, 0, 8259, 8260,
        5, 404, 0, 0, 8260, 8262, 3, 1364, 682, 0, 8261, 8259, 1, 0, 0, 0, 8261, 8262, 1, 0, 0, 0, 8262,
        8264, 1, 0, 0, 0, 8263, 8265, 3, 1162, 581, 0, 8264, 8263, 1, 0, 0, 0, 8264, 8265, 1, 0, 0, 0,
        8265, 8267, 1, 0, 0, 0, 8266, 8268, 3, 1166, 583, 0, 8267, 8266, 1, 0, 0, 0, 8267, 8268, 1,
        0, 0, 0, 8268, 1159, 1, 0, 0, 0, 8269, 8271, 5, 277, 0, 0, 8270, 8269, 1, 0, 0, 0, 8270, 8271,
        1, 0, 0, 0, 8271, 8272, 1, 0, 0, 0, 8272, 8274, 5, 265, 0, 0, 8273, 8275, 3, 1164, 582, 0, 8274,
        8273, 1, 0, 0, 0, 8274, 8275, 1, 0, 0, 0, 8275, 8276, 1, 0, 0, 0, 8276, 8278, 5, 776, 0, 0, 8277,
        8279, 3, 1352, 676, 0, 8278, 8277, 1, 0, 0, 0, 8278, 8279, 1, 0, 0, 0, 8279, 8280, 1, 0, 0, 0,
        8280, 8303, 5, 777, 0, 0, 8281, 8283, 5, 277, 0, 0, 8282, 8281, 1, 0, 0, 0, 8282, 8283, 1, 0,
        0, 0, 8283, 8284, 1, 0, 0, 0, 8284, 8285, 5, 220, 0, 0, 8285, 8286, 5, 776, 0, 0, 8286, 8287,
        3, 872, 436, 0, 8287, 8288, 5, 777, 0, 0, 8288, 8303, 1, 0, 0, 0, 8289, 8300, 7, 146, 0, 0, 8290,
        8291, 5, 776, 0, 0, 8291, 8292, 3, 872, 436, 0, 8292, 8293, 5, 777, 0, 0, 8293, 8301, 1, 0,
        0, 0, 8294, 8295, 5, 71, 0, 0, 8295, 8297, 5, 776, 0, 0, 8296, 8298, 3, 1352, 676, 0, 8297,
        8296, 1, 0, 0, 0, 8297, 8298, 1, 0, 0, 0, 8298, 8299, 1, 0, 0, 0, 8299, 8301, 5, 777, 0, 0, 8300,
        8290, 1, 0, 0, 0, 8300, 8294, 1, 0, 0, 0, 8301, 8303, 1, 0, 0, 0, 8302, 8270, 1, 0, 0, 0, 8302,
        8282, 1, 0, 0, 0, 8302, 8289, 1, 0, 0, 0, 8303, 1161, 1, 0, 0, 0, 8304, 8305, 5, 561, 0, 0, 8305,
        8307, 5, 45, 0, 0, 8306, 8308, 5, 277, 0, 0, 8307, 8306, 1, 0, 0, 0, 8307, 8308, 1, 0, 0, 0, 8308,
        8319, 1, 0, 0, 0, 8309, 8310, 5, 220, 0, 0, 8310, 8311, 5, 776, 0, 0, 8311, 8312, 3, 872, 436,
        0, 8312, 8313, 5, 777, 0, 0, 8313, 8320, 1, 0, 0, 0, 8314, 8316, 5, 265, 0, 0, 8315, 8317, 3,
        1164, 582, 0, 8316, 8315, 1, 0, 0, 0, 8316, 8317, 1, 0, 0, 0, 8317, 8318, 1, 0, 0, 0, 8318, 8320,
        3, 1354, 677, 0, 8319, 8309, 1, 0, 0, 0, 8319, 8314, 1, 0, 0, 0, 8320, 8323, 1, 0, 0, 0, 8321,
        8322, 5, 560, 0, 0, 8322, 8324, 3, 1364, 682, 0, 8323, 8321, 1, 0, 0, 0, 8323, 8324, 1, 0, 0,
        0, 8324, 1163, 1, 0, 0, 0, 8325, 8326, 5, 9, 0, 0, 8326, 8327, 5, 750, 0, 0, 8327, 8328, 3, 1364,
        682, 0, 8328, 1165, 1, 0, 0, 0, 8329, 8330, 5, 776, 0, 0, 8330, 8335, 3, 1168, 584, 0, 8331,
        8332, 5, 773, 0, 0, 8332, 8334, 3, 1168, 584, 0, 8333, 8331, 1, 0, 0, 0, 8334, 8337, 1, 0, 0,
        0, 8335, 8333, 1, 0, 0, 0, 8335, 8336, 1, 0, 0, 0, 8336, 8338, 1, 0, 0, 0, 8337, 8335, 1, 0, 0,
        0, 8338, 8339, 5, 777, 0, 0, 8339, 1167, 1, 0, 0, 0, 8340, 8341, 5, 405, 0, 0, 8341, 8352, 3,
        1350, 675, 0, 8342, 8343, 5, 626, 0, 0, 8343, 8344, 5, 273, 0, 0, 8344, 8347, 5, 581, 0, 0,
        8345, 8348, 3, 1176, 588, 0, 8346, 8348, 5, 329, 0, 0, 8347, 8345, 1, 0, 0, 0, 8347, 8346,
        1, 0, 0, 0, 8348, 8353, 1, 0, 0, 0, 8349, 8350, 5, 626, 0, 0, 8350, 8351, 5, 251, 0, 0, 8351,
        8353, 3, 1170, 585, 0, 8352, 8342, 1, 0, 0, 0, 8352, 8349, 1, 0, 0, 0, 8352, 8353, 1, 0, 0, 0,
        8353, 8357, 1, 0, 0, 0, 8354, 8356, 3, 1172, 586, 0, 8355, 8354, 1, 0, 0, 0, 8356, 8359, 1,
        0, 0, 0, 8357, 8355, 1, 0, 0, 0, 8357, 8358, 1, 0, 0, 0, 8358, 8371, 1, 0, 0, 0, 8359, 8357, 1,
        0, 0, 0, 8360, 8361, 5, 776, 0, 0, 8361, 8366, 3, 1174, 587, 0, 8362, 8363, 5, 773, 0, 0, 8363,
        8365, 3, 1174, 587, 0, 8364, 8362, 1, 0, 0, 0, 8365, 8368, 1, 0, 0, 0, 8366, 8364, 1, 0, 0, 0,
        8366, 8367, 1, 0, 0, 0, 8367, 8369, 1, 0, 0, 0, 8368, 8366, 1, 0, 0, 0, 8369, 8370, 5, 777, 0,
        0, 8370, 8372, 1, 0, 0, 0, 8371, 8360, 1, 0, 0, 0, 8371, 8372, 1, 0, 0, 0, 8372, 1169, 1, 0, 0,
        0, 8373, 8386, 3, 1176, 588, 0, 8374, 8375, 5, 776, 0, 0, 8375, 8380, 3, 1176, 588, 0, 8376,
        8377, 5, 773, 0, 0, 8377, 8379, 3, 1176, 588, 0, 8378, 8376, 1, 0, 0, 0, 8379, 8382, 1, 0, 0,
        0, 8380, 8378, 1, 0, 0, 0, 8380, 8381, 1, 0, 0, 0, 8381, 8383, 1, 0, 0, 0, 8382, 8380, 1, 0, 0,
        0, 8383, 8384, 5, 777, 0, 0, 8384, 8386, 1, 0, 0, 0, 8385, 8373, 1, 0, 0, 0, 8385, 8374, 1, 0,
        0, 0, 8386, 1171, 1, 0, 0, 0, 8387, 8389, 5, 572, 0, 0, 8388, 8390, 5, 750, 0, 0, 8389, 8388,
        1, 0, 0, 0, 8389, 8390, 1, 0, 0, 0, 8390, 8391, 1, 0, 0, 0, 8391, 8422, 3, 1350, 675, 0, 8392,
        8394, 5, 553, 0, 0, 8393, 8392, 1, 0, 0, 0, 8393, 8394, 1, 0, 0, 0, 8394, 8395, 1, 0, 0, 0, 8395,
        8397, 5, 163, 0, 0, 8396, 8398, 5, 750, 0, 0, 8397, 8396, 1, 0, 0, 0, 8397, 8398, 1, 0, 0, 0,
        8398, 8399, 1, 0, 0, 0, 8399, 8422, 3, 1318, 659, 0, 8400, 8402, 5, 368, 0, 0, 8401, 8403,
        5, 750, 0, 0, 8402, 8401, 1, 0, 0, 0, 8402, 8403, 1, 0, 0, 0, 8403, 8404, 1, 0, 0, 0, 8404, 8422,
        3, 1364, 682, 0, 8405, 8407, 7, 147, 0, 0, 8406, 8408, 5, 750, 0, 0, 8407, 8406, 1, 0, 0, 0,
        8407, 8408, 1, 0, 0, 0, 8408, 8409, 1, 0, 0, 0, 8409, 8422, 3, 1364, 682, 0, 8410, 8411, 7,
        148, 0, 0, 8411, 8413, 5, 139, 0, 0, 8412, 8414, 5, 750, 0, 0, 8413, 8412, 1, 0, 0, 0, 8413,
        8414, 1, 0, 0, 0, 8414, 8415, 1, 0, 0, 0, 8415, 8422, 3, 1388, 694, 0, 8416, 8418, 5, 75, 0,
        0, 8417, 8419, 5, 750, 0, 0, 8418, 8417, 1, 0, 0, 0, 8418, 8419, 1, 0, 0, 0, 8419, 8420, 1, 0,
        0, 0, 8420, 8422, 3, 1388, 694, 0, 8421, 8387, 1, 0, 0, 0, 8421, 8393, 1, 0, 0, 0, 8421, 8400,
        1, 0, 0, 0, 8421, 8405, 1, 0, 0, 0, 8421, 8410, 1, 0, 0, 0, 8421, 8416, 1, 0, 0, 0, 8422, 1173,
        1, 0, 0, 0, 8423, 8424, 5, 561, 0, 0, 8424, 8428, 3, 1410, 705, 0, 8425, 8427, 3, 1172, 586,
        0, 8426, 8425, 1, 0, 0, 0, 8427, 8430, 1, 0, 0, 0, 8428, 8426, 1, 0, 0, 0, 8428, 8429, 1, 0, 0,
        0, 8429, 1175, 1, 0, 0, 0, 8430, 8428, 1, 0, 0, 0, 8431, 8432, 5, 776, 0, 0, 8432, 8437, 3, 1178,
        589, 0, 8433, 8434, 5, 773, 0, 0, 8434, 8436, 3, 1178, 589, 0, 8435, 8433, 1, 0, 0, 0, 8436,
        8439, 1, 0, 0, 0, 8437, 8435, 1, 0, 0, 0, 8437, 8438, 1, 0, 0, 0, 8438, 8440, 1, 0, 0, 0, 8439,
        8437, 1, 0, 0, 0, 8440, 8441, 5, 777, 0, 0, 8441, 1177, 1, 0, 0, 0, 8442, 8445, 3, 872, 436,
        0, 8443, 8445, 5, 329, 0, 0, 8444, 8442, 1, 0, 0, 0, 8444, 8443, 1, 0, 0, 0, 8445, 1179, 1, 0,
        0, 0, 8446, 8447, 5, 130, 0, 0, 8447, 8448, 5, 750, 0, 0, 8448, 8449, 3, 1250, 625, 0, 8449,
        1181, 1, 0, 0, 0, 8450, 8451, 5, 231, 0, 0, 8451, 8452, 5, 174, 0, 0, 8452, 1183, 1, 0, 0, 0,
        8453, 8454, 5, 231, 0, 0, 8454, 8455, 3, 954, 477, 0, 8455, 8456, 5, 174, 0, 0, 8456, 1185,
        1, 0, 0, 0, 8457, 8458, 5, 232, 0, 0, 8458, 8459, 5, 610, 0, 0, 8459, 8460, 5, 618, 0, 0, 8460,
        1187, 1, 0, 0, 0, 8461, 8463, 7, 149, 0, 0, 8462, 8461, 1, 0, 0, 0, 8462, 8463, 1, 0, 0, 0, 8463,
        8464, 1, 0, 0, 0, 8464, 8465, 3, 1190, 595, 0, 8465, 1189, 1, 0, 0, 0, 8466, 8467, 3, 1332,
        666, 0, 8467, 8468, 3, 1194, 597, 0, 8468, 1191, 1, 0, 0, 0, 8469, 8470, 5, 69, 0, 0, 8470,
        8471, 3, 1138, 569, 0, 8471, 1193, 1, 0, 0, 0, 8472, 8474, 3, 1114, 557, 0, 8473, 8475, 3,
        1192, 596, 0, 8474, 8473, 1, 0, 0, 0, 8474, 8475, 1, 0, 0, 0, 8475, 1195, 1, 0, 0, 0, 8476, 8477,
        5, 776, 0, 0, 8477, 8478, 3, 1282, 641, 0, 8478, 8479, 5, 773, 0, 0, 8479, 8480, 3, 1282, 641,
        0, 8480, 8481, 5, 777, 0, 0, 8481, 1197, 1, 0, 0, 0, 8482, 8487, 3, 1298, 649, 0, 8483, 8484,
        5, 773, 0, 0, 8484, 8486, 3, 1298, 649, 0, 8485, 8483, 1, 0, 0, 0, 8486, 8489, 1, 0, 0, 0, 8487,
        8485, 1, 0, 0, 0, 8487, 8488, 1, 0, 0, 0, 8488, 1199, 1, 0, 0, 0, 8489, 8487, 1, 0, 0, 0, 8490,
        8495, 3, 1202, 601, 0, 8491, 8492, 5, 773, 0, 0, 8492, 8494, 3, 1202, 601, 0, 8493, 8491,
        1, 0, 0, 0, 8494, 8497, 1, 0, 0, 0, 8495, 8493, 1, 0, 0, 0, 8495, 8496, 1, 0, 0, 0, 8496, 1201,
        1, 0, 0, 0, 8497, 8495, 1, 0, 0, 0, 8498, 8499, 3, 1270, 635, 0, 8499, 8502, 5, 750, 0, 0, 8500,
        8503, 3, 862, 431, 0, 8501, 8503, 5, 128, 0, 0, 8502, 8500, 1, 0, 0, 0, 8502, 8501, 1, 0, 0,
        0, 8503, 1203, 1, 0, 0, 0, 8504, 8505, 3, 952, 476, 0, 8505, 8506, 3, 1136, 568, 0, 8506, 1205,
        1, 0, 0, 0, 8507, 8509, 5, 71, 0, 0, 8508, 8510, 3, 1208, 604, 0, 8509, 8508, 1, 0, 0, 0, 8510,
        8511, 1, 0, 0, 0, 8511, 8509, 1, 0, 0, 0, 8511, 8512, 1, 0, 0, 0, 8512, 1207, 1, 0, 0, 0, 8513,
        8514, 5, 579, 0, 0, 8514, 8515, 5, 45, 0, 0, 8515, 8526, 3, 1384, 692, 0, 8516, 8518, 5, 392,
        0, 0, 8517, 8516, 1, 0, 0, 0, 8517, 8518, 1, 0, 0, 0, 8518, 8519, 1, 0, 0, 0, 8519, 8520, 5, 157,
        0, 0, 8520, 8521, 5, 45, 0, 0, 8521, 8526, 3, 1384, 692, 0, 8522, 8523, 5, 167, 0, 0, 8523,
        8524, 5, 45, 0, 0, 8524, 8526, 3, 1384, 692, 0, 8525, 8513, 1, 0, 0, 0, 8525, 8517, 1, 0, 0,
        0, 8525, 8522, 1, 0, 0, 0, 8526, 1209, 1, 0, 0, 0, 8527, 8529, 5, 278, 0, 0, 8528, 8530, 3, 1212,
        606, 0, 8529, 8528, 1, 0, 0, 0, 8530, 8531, 1, 0, 0, 0, 8531, 8529, 1, 0, 0, 0, 8531, 8532, 1,
        0, 0, 0, 8532, 1211, 1, 0, 0, 0, 8533, 8534, 7, 150, 0, 0, 8534, 8535, 5, 45, 0, 0, 8535, 8536,
        3, 1384, 692, 0, 8536, 1213, 1, 0, 0, 0, 8537, 8542, 3, 1250, 625, 0, 8538, 8539, 5, 773, 0,
        0, 8539, 8541, 3, 1250, 625, 0, 8540, 8538, 1, 0, 0, 0, 8541, 8544, 1, 0, 0, 0, 8542, 8540,
        1, 0, 0, 0, 8542, 8543, 1, 0, 0, 0, 8543, 1215, 1, 0, 0, 0, 8544, 8542, 1, 0, 0, 0, 8545, 8550,
        3, 1218, 609, 0, 8546, 8547, 5, 773, 0, 0, 8547, 8549, 3, 1218, 609, 0, 8548, 8546, 1, 0, 0,
        0, 8549, 8552, 1, 0, 0, 0, 8550, 8548, 1, 0, 0, 0, 8550, 8551, 1, 0, 0, 0, 8551, 1217, 1, 0, 0,
        0, 8552, 8550, 1, 0, 0, 0, 8553, 8563, 3, 1250, 625, 0, 8554, 8556, 3, 1222, 611, 0, 8555,
        8557, 3, 1220, 610, 0, 8556, 8555, 1, 0, 0, 0, 8556, 8557, 1, 0, 0, 0, 8557, 8564, 1, 0, 0, 0,
        8558, 8560, 3, 1228, 614, 0, 8559, 8561, 3, 1236, 618, 0, 8560, 8559, 1, 0, 0, 0, 8560, 8561,
        1, 0, 0, 0, 8561, 8564, 1, 0, 0, 0, 8562, 8564, 3, 1220, 610, 0, 8563, 8554, 1, 0, 0, 0, 8563,
        8558, 1, 0, 0, 0, 8563, 8562, 1, 0, 0, 0, 8563, 8564, 1, 0, 0, 0, 8564, 1219, 1, 0, 0, 0, 8565,
        8566, 5, 15, 0, 0, 8566, 8569, 3, 1222, 611, 0, 8567, 8568, 5, 15, 0, 0, 8568, 8570, 3, 1222,
        611, 0, 8569, 8567, 1, 0, 0, 0, 8569, 8570, 1, 0, 0, 0, 8570, 1221, 1, 0, 0, 0, 8571, 8578, 3,
        1224, 612, 0, 8572, 8578, 3, 1226, 613, 0, 8573, 8578, 3, 1228, 614, 0, 8574, 8578, 3, 1230,
        615, 0, 8575, 8578, 3, 1232, 616, 0, 8576, 8578, 3, 1234, 617, 0, 8577, 8571, 1, 0, 0, 0, 8577,
        8572, 1, 0, 0, 0, 8577, 8573, 1, 0, 0, 0, 8577, 8574, 1, 0, 0, 0, 8577, 8575, 1, 0, 0, 0, 8577,
        8576, 1, 0, 0, 0, 8578, 1223, 1, 0, 0, 0, 8579, 8580, 5, 230, 0, 0, 8580, 8581, 5, 45, 0, 0, 8581,
        8582, 3, 1382, 691, 0, 8582, 1225, 1, 0, 0, 0, 8583, 8584, 5, 230, 0, 0, 8584, 8585, 5, 45,
        0, 0, 8585, 8586, 5, 734, 0, 0, 8586, 8587, 5, 406, 0, 0, 8587, 1227, 1, 0, 0, 0, 8588, 8589,
        5, 230, 0, 0, 8589, 8590, 5, 645, 0, 0, 8590, 8591, 3, 1410, 705, 0, 8591, 1229, 1, 0, 0, 0,
        8592, 8593, 5, 230, 0, 0, 8593, 8594, 5, 645, 0, 0, 8594, 8595, 3, 1410, 705, 0, 8595, 8596,
        5, 17, 0, 0, 8596, 8597, 3, 1386, 693, 0, 8597, 1231, 1, 0, 0, 0, 8598, 8599, 5, 230, 0, 0, 8599,
        8600, 5, 645, 0, 0, 8600, 8601, 3, 1410, 705, 0, 8601, 8602, 5, 45, 0, 0, 8602, 8603, 3, 1382,
        691, 0, 8603, 1233, 1, 0, 0, 0, 8604, 8605, 5, 230, 0, 0, 8605, 8606, 5, 645, 0, 0, 8606, 8607,
        3, 1410, 705, 0, 8607, 8608, 5, 45, 0, 0, 8608, 8609, 5, 734, 0, 0, 8609, 8610, 5, 406, 0, 0,
        8610, 1235, 1, 0, 0, 0, 8611, 8612, 5, 841, 0, 0, 8612, 8616, 5, 835, 0, 0, 8613, 8617, 3, 1226,
        613, 0, 8614, 8617, 3, 1230, 615, 0, 8615, 8617, 3, 1224, 612, 0, 8616, 8613, 1, 0, 0, 0, 8616,
        8614, 1, 0, 0, 0, 8616, 8615, 1, 0, 0, 0, 8617, 1237, 1, 0, 0, 0, 8618, 8619, 5, 727, 0, 0, 8619,
        8620, 5, 101, 0, 0, 8620, 8621, 5, 406, 0, 0, 8621, 1239, 1, 0, 0, 0, 8622, 8623, 5, 141, 0,
        0, 8623, 8624, 5, 728, 0, 0, 8624, 8625, 5, 406, 0, 0, 8625, 1241, 1, 0, 0, 0, 8626, 8627, 3,
        1244, 622, 0, 8627, 8628, 5, 838, 0, 0, 8628, 8629, 5, 839, 0, 0, 8629, 8642, 1, 0, 0, 0, 8630,
        8631, 3, 1244, 622, 0, 8631, 8632, 5, 840, 0, 0, 8632, 8642, 1, 0, 0, 0, 8633, 8634, 3, 1244,
        622, 0, 8634, 8635, 5, 837, 0, 0, 8635, 8636, 5, 839, 0, 0, 8636, 8637, 5, 506, 0, 0, 8637,
        8638, 5, 842, 0, 0, 8638, 8639, 5, 17, 0, 0, 8639, 8640, 3, 1386, 693, 0, 8640, 8642, 1, 0,
        0, 0, 8641, 8626, 1, 0, 0, 0, 8641, 8630, 1, 0, 0, 0, 8641, 8633, 1, 0, 0, 0, 8642, 1243, 1, 0,
        0, 0, 8643, 8644, 3, 1394, 697, 0, 8644, 8645, 5, 836, 0, 0, 8645, 1245, 1, 0, 0, 0, 8646, 8647,
        5, 458, 0, 0, 8647, 8648, 3, 1384, 692, 0, 8648, 1247, 1, 0, 0, 0, 8649, 8651, 3, 1410, 705,
        0, 8650, 8652, 3, 932, 466, 0, 8651, 8650, 1, 0, 0, 0, 8651, 8652, 1, 0, 0, 0, 8652, 1249, 1,
        0, 0, 0, 8653, 8659, 3, 1248, 624, 0, 8654, 8656, 5, 105, 0, 0, 8655, 8657, 3, 1418, 709, 0,
        8656, 8655, 1, 0, 0, 0, 8656, 8657, 1, 0, 0, 0, 8657, 8659, 1, 0, 0, 0, 8658, 8653, 1, 0, 0, 0,
        8658, 8654, 1, 0, 0, 0, 8659, 1251, 1, 0, 0, 0, 8660, 8661, 5, 275, 0, 0, 8661, 8662, 3, 1382,
        691, 0, 8662, 1253, 1, 0, 0, 0, 8663, 8666, 3, 1252, 626, 0, 8664, 8666, 3, 370, 185, 0, 8665,
        8663, 1, 0, 0, 0, 8665, 8664, 1, 0, 0, 0, 8666, 1255, 1, 0, 0, 0, 8667, 8668, 7, 151, 0, 0, 8668,
        1257, 1, 0, 0, 0, 8669, 8670, 7, 152, 0, 0, 8670, 1259, 1, 0, 0, 0, 8671, 8672, 5, 405, 0, 0,
        8672, 8673, 3, 1354, 677, 0, 8673, 1261, 1, 0, 0, 0, 8674, 8680, 3, 1360, 680, 0, 8675, 8677,
        3, 1356, 678, 0, 8676, 8678, 3, 1360, 680, 0, 8677, 8676, 1, 0, 0, 0, 8677, 8678, 1, 0, 0, 0,
        8678, 8680, 1, 0, 0, 0, 8679, 8674, 1, 0, 0, 0, 8679, 8675, 1, 0, 0, 0, 8680, 1263, 1, 0, 0, 0,
        8681, 8682, 3, 1350, 675, 0, 8682, 1265, 1, 0, 0, 0, 8683, 8684, 3, 1350, 675, 0, 8684, 1267,
        1, 0, 0, 0, 8685, 8686, 5, 776, 0, 0, 8686, 8691, 3, 1266, 633, 0, 8687, 8688, 5, 773, 0, 0,
        8688, 8690, 3, 1266, 633, 0, 8689, 8687, 1, 0, 0, 0, 8690, 8693, 1, 0, 0, 0, 8691, 8689, 1,
        0, 0, 0, 8691, 8692, 1, 0, 0, 0, 8692, 8694, 1, 0, 0, 0, 8693, 8691, 1, 0, 0, 0, 8694, 8695, 5,
        777, 0, 0, 8695, 1269, 1, 0, 0, 0, 8696, 8697, 3, 1262, 631, 0, 8697, 1271, 1, 0, 0, 0, 8698,
        8701, 3, 1270, 635, 0, 8699, 8701, 3, 1278, 639, 0, 8700, 8698, 1, 0, 0, 0, 8700, 8699, 1,
        0, 0, 0, 8701, 1273, 1, 0, 0, 0, 8702, 8703, 3, 1350, 675, 0, 8703, 1275, 1, 0, 0, 0, 8704, 8705,
        3, 1262, 631, 0, 8705, 1277, 1, 0, 0, 0, 8706, 8707, 3, 1350, 675, 0, 8707, 8711, 5, 772, 0,
        0, 8708, 8709, 3, 1350, 675, 0, 8709, 8710, 5, 772, 0, 0, 8710, 8712, 1, 0, 0, 0, 8711, 8708,
        1, 0, 0, 0, 8711, 8712, 1, 0, 0, 0, 8712, 8713, 1, 0, 0, 0, 8713, 8714, 5, 760, 0, 0, 8714, 1279,
        1, 0, 0, 0, 8715, 8716, 3, 1350, 675, 0, 8716, 1281, 1, 0, 0, 0, 8717, 8718, 3, 1350, 675, 0,
        8718, 1283, 1, 0, 0, 0, 8719, 8720, 3, 1356, 678, 0, 8720, 1285, 1, 0, 0, 0, 8721, 8722, 3,
        1356, 678, 0, 8722, 1287, 1, 0, 0, 0, 8723, 8724, 3, 1356, 678, 0, 8724, 1289, 1, 0, 0, 0, 8725,
        8726, 3, 1356, 678, 0, 8726, 1291, 1, 0, 0, 0, 8727, 8728, 3, 1356, 678, 0, 8728, 1293, 1,
        0, 0, 0, 8729, 8730, 3, 1356, 678, 0, 8730, 1295, 1, 0, 0, 0, 8731, 8734, 3, 1356, 678, 0, 8732,
        8734, 3, 1360, 680, 0, 8733, 8731, 1, 0, 0, 0, 8733, 8732, 1, 0, 0, 0, 8734, 1297, 1, 0, 0, 0,
        8735, 8738, 3, 1356, 678, 0, 8736, 8738, 3, 1360, 680, 0, 8737, 8735, 1, 0, 0, 0, 8737, 8736,
        1, 0, 0, 0, 8738, 1299, 1, 0, 0, 0, 8739, 8740, 3, 1350, 675, 0, 8740, 1301, 1, 0, 0, 0, 8741,
        8742, 3, 1350, 675, 0, 8742, 1303, 1, 0, 0, 0, 8743, 8744, 3, 1350, 675, 0, 8744, 1305, 1,
        0, 0, 0, 8745, 8746, 3, 1350, 675, 0, 8746, 1307, 1, 0, 0, 0, 8747, 8748, 3, 1356, 678, 0, 8748,
        1309, 1, 0, 0, 0, 8749, 8750, 3, 1356, 678, 0, 8750, 1311, 1, 0, 0, 0, 8751, 8752, 3, 1350,
        675, 0, 8752, 1313, 1, 0, 0, 0, 8753, 8754, 3, 1410, 705, 0, 8754, 1315, 1, 0, 0, 0, 8755, 8756,
        3, 1410, 705, 0, 8756, 1317, 1, 0, 0, 0, 8757, 8758, 3, 1410, 705, 0, 8758, 1319, 1, 0, 0, 0,
        8759, 8762, 3, 1356, 678, 0, 8760, 8762, 3, 1360, 680, 0, 8761, 8759, 1, 0, 0, 0, 8761, 8760,
        1, 0, 0, 0, 8762, 1321, 1, 0, 0, 0, 8763, 8764, 3, 1282, 641, 0, 8764, 8765, 3, 1360, 680, 0,
        8765, 1323, 1, 0, 0, 0, 8766, 8774, 3, 1350, 675, 0, 8767, 8768, 5, 772, 0, 0, 8768, 8775,
        5, 760, 0, 0, 8769, 8772, 3, 1360, 680, 0, 8770, 8771, 5, 772, 0, 0, 8771, 8773, 5, 760, 0,
        0, 8772, 8770, 1, 0, 0, 0, 8772, 8773, 1, 0, 0, 0, 8773, 8775, 1, 0, 0, 0, 8774, 8767, 1, 0, 0,
        0, 8774, 8769, 1, 0, 0, 0, 8774, 8775, 1, 0, 0, 0, 8775, 1325, 1, 0, 0, 0, 8776, 8779, 3, 1356,
        678, 0, 8777, 8779, 3, 1360, 680, 0, 8778, 8776, 1, 0, 0, 0, 8778, 8777, 1, 0, 0, 0, 8779, 1327,
        1, 0, 0, 0, 8780, 8785, 3, 1326, 663, 0, 8781, 8782, 5, 773, 0, 0, 8782, 8784, 3, 1326, 663,
        0, 8783, 8781, 1, 0, 0, 0, 8784, 8787, 1, 0, 0, 0, 8785, 8783, 1, 0, 0, 0, 8785, 8786, 1, 0, 0,
        0, 8786, 1329, 1, 0, 0, 0, 8787, 8785, 1, 0, 0, 0, 8788, 8793, 3, 1324, 662, 0, 8789, 8790,
        5, 773, 0, 0, 8790, 8792, 3, 1324, 662, 0, 8791, 8789, 1, 0, 0, 0, 8792, 8795, 1, 0, 0, 0, 8793,
        8791, 1, 0, 0, 0, 8793, 8794, 1, 0, 0, 0, 8794, 1331, 1, 0, 0, 0, 8795, 8793, 1, 0, 0, 0, 8796,
        8797, 3, 1350, 675, 0, 8797, 1333, 1, 0, 0, 0, 8798, 8801, 3, 1348, 674, 0, 8799, 8801, 3,
        1436, 718, 0, 8800, 8798, 1, 0, 0, 0, 8800, 8799, 1, 0, 0, 0, 8801, 1335, 1, 0, 0, 0, 8802, 8803,
        3, 1334, 667, 0, 8803, 1337, 1, 0, 0, 0, 8804, 8807, 3, 1348, 674, 0, 8805, 8807, 3, 1442,
        721, 0, 8806, 8804, 1, 0, 0, 0, 8806, 8805, 1, 0, 0, 0, 8807, 1339, 1, 0, 0, 0, 8808, 8809, 3,
        1350, 675, 0, 8809, 1341, 1, 0, 0, 0, 8810, 8811, 3, 1382, 691, 0, 8811, 1343, 1, 0, 0, 0, 8812,
        8813, 3, 1350, 675, 0, 8813, 1345, 1, 0, 0, 0, 8814, 8815, 3, 1350, 675, 0, 8815, 1347, 1,
        0, 0, 0, 8816, 8820, 7, 153, 0, 0, 8817, 8818, 4, 674, 115, 0, 8818, 8820, 5, 851, 0, 0, 8819,
        8816, 1, 0, 0, 0, 8819, 8817, 1, 0, 0, 0, 8820, 1349, 1, 0, 0, 0, 8821, 8824, 3, 1348, 674, 0,
        8822, 8824, 3, 1430, 715, 0, 8823, 8821, 1, 0, 0, 0, 8823, 8822, 1, 0, 0, 0, 8824, 1351, 1,
        0, 0, 0, 8825, 8830, 3, 1350, 675, 0, 8826, 8827, 5, 773, 0, 0, 8827, 8829, 3, 1350, 675, 0,
        8828, 8826, 1, 0, 0, 0, 8829, 8832, 1, 0, 0, 0, 8830, 8828, 1, 0, 0, 0, 8830, 8831, 1, 0, 0, 0,
        8831, 1353, 1, 0, 0, 0, 8832, 8830, 1, 0, 0, 0, 8833, 8834, 5, 776, 0, 0, 8834, 8835, 3, 1352,
        676, 0, 8835, 8836, 5, 777, 0, 0, 8836, 1355, 1, 0, 0, 0, 8837, 8839, 3, 1350, 675, 0, 8838,
        8840, 3, 1360, 680, 0, 8839, 8838, 1, 0, 0, 0, 8839, 8840, 1, 0, 0, 0, 8840, 1357, 1, 0, 0, 0,
        8841, 8846, 3, 1350, 675, 0, 8842, 8844, 3, 1360, 680, 0, 8843, 8845, 3, 1360, 680, 0, 8844,
        8843, 1, 0, 0, 0, 8844, 8845, 1, 0, 0, 0, 8845, 8847, 1, 0, 0, 0, 8846, 8842, 1, 0, 0, 0, 8846,
        8847, 1, 0, 0, 0, 8847, 1359, 1, 0, 0, 0, 8848, 8849, 5, 772, 0, 0, 8849, 8850, 3, 1350, 675,
        0, 8850, 1361, 1, 0, 0, 0, 8851, 8852, 7, 154, 0, 0, 8852, 1363, 1, 0, 0, 0, 8853, 8854, 7, 155,
        0, 0, 8854, 1365, 1, 0, 0, 0, 8855, 8856, 7, 156, 0, 0, 8856, 1367, 1, 0, 0, 0, 8857, 8863, 5,
        747, 0, 0, 8858, 8859, 4, 684, 116, 0, 8859, 8863, 5, 788, 0, 0, 8860, 8863, 5, 749, 0, 0, 8861,
        8863, 5, 748, 0, 0, 8862, 8857, 1, 0, 0, 0, 8862, 8858, 1, 0, 0, 0, 8862, 8860, 1, 0, 0, 0, 8862,
        8861, 1, 0, 0, 0, 8863, 1369, 1, 0, 0, 0, 8864, 8870, 3, 1374, 687, 0, 8865, 8866, 5, 758, 0,
        0, 8866, 8870, 3, 1362, 681, 0, 8867, 8868, 5, 759, 0, 0, 8868, 8870, 3, 1362, 681, 0, 8869,
        8864, 1, 0, 0, 0, 8869, 8865, 1, 0, 0, 0, 8869, 8867, 1, 0, 0, 0, 8870, 1371, 1, 0, 0, 0, 8871,
        8875, 3, 1370, 685, 0, 8872, 8873, 4, 686, 117, 0, 8873, 8875, 3, 1378, 689, 0, 8874, 8871,
        1, 0, 0, 0, 8874, 8872, 1, 0, 0, 0, 8875, 1373, 1, 0, 0, 0, 8876, 8886, 3, 1388, 694, 0, 8877,
        8886, 3, 1394, 697, 0, 8878, 8886, 3, 1402, 701, 0, 8879, 8886, 3, 1398, 699, 0, 8880, 8886,
        3, 1396, 698, 0, 8881, 8883, 5, 847, 0, 0, 8882, 8881, 1, 0, 0, 0, 8882, 8883, 1, 0, 0, 0, 8883,
        8884, 1, 0, 0, 0, 8884, 8886, 7, 157, 0, 0, 8885, 8876, 1, 0, 0, 0, 8885, 8877, 1, 0, 0, 0, 8885,
        8878, 1, 0, 0, 0, 8885, 8879, 1, 0, 0, 0, 8885, 8880, 1, 0, 0, 0, 8885, 8882, 1, 0, 0, 0, 8886,
        1375, 1, 0, 0, 0, 8887, 8891, 3, 1374, 687, 0, 8888, 8889, 4, 688, 118, 0, 8889, 8891, 3, 1378,
        689, 0, 8890, 8887, 1, 0, 0, 0, 8890, 8888, 1, 0, 0, 0, 8891, 1377, 1, 0, 0, 0, 8892, 8893, 5,
        376, 0, 0, 8893, 1379, 1, 0, 0, 0, 8894, 8895, 5, 776, 0, 0, 8895, 8900, 3, 1384, 692, 0, 8896,
        8897, 5, 773, 0, 0, 8897, 8899, 3, 1384, 692, 0, 8898, 8896, 1, 0, 0, 0, 8899, 8902, 1, 0, 0,
        0, 8900, 8898, 1, 0, 0, 0, 8900, 8901, 1, 0, 0, 0, 8901, 8903, 1, 0, 0, 0, 8902, 8900, 1, 0, 0,
        0, 8903, 8904, 5, 777, 0, 0, 8904, 1381, 1, 0, 0, 0, 8905, 8909, 5, 852, 0, 0, 8906, 8907, 4,
        691, 119, 0, 8907, 8909, 5, 851, 0, 0, 8908, 8905, 1, 0, 0, 0, 8908, 8906, 1, 0, 0, 0, 8909,
        1383, 1, 0, 0, 0, 8910, 8914, 3, 1382, 691, 0, 8911, 8914, 5, 788, 0, 0, 8912, 8914, 5, 789,
        0, 0, 8913, 8910, 1, 0, 0, 0, 8913, 8911, 1, 0, 0, 0, 8913, 8912, 1, 0, 0, 0, 8914, 1385, 1, 0,
        0, 0, 8915, 8919, 3, 1382, 691, 0, 8916, 8917, 4, 693, 120, 0, 8917, 8919, 5, 788, 0, 0, 8918,
        8915, 1, 0, 0, 0, 8918, 8916, 1, 0, 0, 0, 8919, 1387, 1, 0, 0, 0, 8920, 8922, 5, 847, 0, 0, 8921,
        8920, 1, 0, 0, 0, 8921, 8922, 1, 0, 0, 0, 8922, 8923, 1, 0, 0, 0, 8923, 8926, 3, 1382, 691, 0,
        8924, 8926, 5, 849, 0, 0, 8925, 8921, 1, 0, 0, 0, 8925, 8924, 1, 0, 0, 0, 8926, 8930, 1, 0, 0,
        0, 8927, 8929, 3, 1382, 691, 0, 8928, 8927, 1, 0, 0, 0, 8929, 8932, 1, 0, 0, 0, 8930, 8928,
        1, 0, 0, 0, 8930, 8931, 1, 0, 0, 0, 8931, 1389, 1, 0, 0, 0, 8932, 8930, 1, 0, 0, 0, 8933, 8934,
        3, 1382, 691, 0, 8934, 1391, 1, 0, 0, 0, 8935, 8940, 3, 1382, 691, 0, 8936, 8937, 5, 773, 0,
        0, 8937, 8939, 3, 1382, 691, 0, 8938, 8936, 1, 0, 0, 0, 8939, 8942, 1, 0, 0, 0, 8940, 8938,
        1, 0, 0, 0, 8940, 8941, 1, 0, 0, 0, 8941, 1393, 1, 0, 0, 0, 8942, 8940, 1, 0, 0, 0, 8943, 8947,
        3, 1400, 700, 0, 8944, 8947, 5, 790, 0, 0, 8945, 8947, 5, 791, 0, 0, 8946, 8943, 1, 0, 0, 0,
        8946, 8944, 1, 0, 0, 0, 8946, 8945, 1, 0, 0, 0, 8947, 1395, 1, 0, 0, 0, 8948, 8949, 7, 158, 0,
        0, 8949, 1397, 1, 0, 0, 0, 8950, 8951, 7, 159, 0, 0, 8951, 1399, 1, 0, 0, 0, 8952, 8953, 7, 160,
        0, 0, 8953, 1401, 1, 0, 0, 0, 8954, 8955, 5, 116, 0, 0, 8955, 8961, 5, 852, 0, 0, 8956, 8957,
        5, 586, 0, 0, 8957, 8961, 5, 852, 0, 0, 8958, 8959, 5, 583, 0, 0, 8959, 8961, 5, 852, 0, 0, 8960,
        8954, 1, 0, 0, 0, 8960, 8956, 1, 0, 0, 0, 8960, 8958, 1, 0, 0, 0, 8961, 1403, 1, 0, 0, 0, 8962,
        8965, 3, 1120, 560, 0, 8963, 8965, 3, 1408, 704, 0, 8964, 8962, 1, 0, 0, 0, 8964, 8963, 1,
        0, 0, 0, 8965, 1405, 1, 0, 0, 0, 8966, 8967, 3, 1408, 704, 0, 8967, 1407, 1, 0, 0, 0, 8968, 8969,
        5, 776, 0, 0, 8969, 8970, 5, 747, 0, 0, 8970, 8971, 5, 773, 0, 0, 8971, 8972, 5, 747, 0, 0, 8972,
        8973, 5, 777, 0, 0, 8973, 1409, 1, 0, 0, 0, 8974, 8977, 3, 1350, 675, 0, 8975, 8977, 3, 1382,
        691, 0, 8976, 8974, 1, 0, 0, 0, 8976, 8975, 1, 0, 0, 0, 8977, 1411, 1, 0, 0, 0, 8978, 8981, 3,
        1348, 674, 0, 8979, 8981, 3, 1444, 722, 0, 8980, 8978, 1, 0, 0, 0, 8980, 8979, 1, 0, 0, 0, 8981,
        1413, 1, 0, 0, 0, 8982, 8985, 3, 1338, 669, 0, 8983, 8985, 3, 1382, 691, 0, 8984, 8982, 1,
        0, 0, 0, 8984, 8983, 1, 0, 0, 0, 8985, 1415, 1, 0, 0, 0, 8986, 8989, 3, 1368, 684, 0, 8987, 8989,
        3, 1348, 674, 0, 8988, 8986, 1, 0, 0, 0, 8988, 8987, 1, 0, 0, 0, 8989, 1417, 1, 0, 0, 0, 8990,
        8991, 5, 776, 0, 0, 8991, 8992, 5, 777, 0, 0, 8992, 1419, 1, 0, 0, 0, 8993, 8994, 7, 161, 0,
        0, 8994, 1421, 1, 0, 0, 0, 8995, 8996, 7, 162, 0, 0, 8996, 1423, 1, 0, 0, 0, 8997, 8998, 5, 214,
        0, 0, 8998, 9004, 5, 772, 0, 0, 8999, 9000, 5, 284, 0, 0, 9000, 9004, 5, 772, 0, 0, 9001, 9002,
        5, 502, 0, 0, 9002, 9004, 5, 772, 0, 0, 9003, 8997, 1, 0, 0, 0, 9003, 8999, 1, 0, 0, 0, 9003,
        9001, 1, 0, 0, 0, 9004, 1425, 1, 0, 0, 0, 9005, 9006, 7, 162, 0, 0, 9006, 9007, 5, 772, 0, 0,
        9007, 1427, 1, 0, 0, 0, 9008, 9009, 3, 1382, 691, 0, 9009, 1429, 1, 0, 0, 0, 9010, 9017, 4,
        715, 121, 0, 9011, 9018, 3, 1436, 718, 0, 9012, 9018, 3, 1448, 724, 0, 9013, 9018, 5, 173,
        0, 0, 9014, 9018, 5, 510, 0, 0, 9015, 9016, 4, 715, 122, 0, 9016, 9018, 5, 714, 0, 0, 9017,
        9011, 1, 0, 0, 0, 9017, 9012, 1, 0, 0, 0, 9017, 9013, 1, 0, 0, 0, 9017, 9014, 1, 0, 0, 0, 9017,
        9015, 1, 0, 0, 0, 9018, 9027, 1, 0, 0, 0, 9019, 9025, 3, 1440, 720, 0, 9020, 9025, 3, 1432,
        716, 0, 9021, 9025, 3, 1434, 717, 0, 9022, 9025, 3, 1438, 719, 0, 9023, 9025, 3, 1446, 723,
        0, 9024, 9019, 1, 0, 0, 0, 9024, 9020, 1, 0, 0, 0, 9024, 9021, 1, 0, 0, 0, 9024, 9022, 1, 0, 0,
        0, 9024, 9023, 1, 0, 0, 0, 9025, 9027, 1, 0, 0, 0, 9026, 9010, 1, 0, 0, 0, 9026, 9024, 1, 0, 0,
        0, 9027, 1431, 1, 0, 0, 0, 9028, 9029, 7, 163, 0, 0, 9029, 1433, 1, 0, 0, 0, 9030, 9031, 7, 164,
        0, 0, 9031, 1435, 1, 0, 0, 0, 9032, 9043, 4, 718, 123, 0, 9033, 9044, 3, 1450, 725, 0, 9034,
        9044, 5, 170, 0, 0, 9035, 9044, 5, 188, 0, 0, 9036, 9044, 5, 369, 0, 0, 9037, 9044, 5, 423,
        0, 0, 9038, 9044, 5, 427, 0, 0, 9039, 9044, 5, 451, 0, 0, 9040, 9044, 5, 459, 0, 0, 9041, 9044,
        5, 709, 0, 0, 9042, 9044, 5, 565, 0, 0, 9043, 9033, 1, 0, 0, 0, 9043, 9034, 1, 0, 0, 0, 9043,
        9035, 1, 0, 0, 0, 9043, 9036, 1, 0, 0, 0, 9043, 9037, 1, 0, 0, 0, 9043, 9038, 1, 0, 0, 0, 9043,
        9039, 1, 0, 0, 0, 9043, 9040, 1, 0, 0, 0, 9043, 9041, 1, 0, 0, 0, 9043, 9042, 1, 0, 0, 0, 9044,
        9051, 1, 0, 0, 0, 9045, 9049, 3, 1440, 720, 0, 9046, 9049, 3, 1438, 719, 0, 9047, 9049, 3,
        1446, 723, 0, 9048, 9045, 1, 0, 0, 0, 9048, 9046, 1, 0, 0, 0, 9048, 9047, 1, 0, 0, 0, 9049, 9051,
        1, 0, 0, 0, 9050, 9032, 1, 0, 0, 0, 9050, 9048, 1, 0, 0, 0, 9051, 1437, 1, 0, 0, 0, 9052, 9053,
        7, 165, 0, 0, 9053, 1439, 1, 0, 0, 0, 9054, 9058, 7, 166, 0, 0, 9055, 9056, 4, 720, 124, 0, 9056,
        9058, 7, 167, 0, 0, 9057, 9054, 1, 0, 0, 0, 9057, 9055, 1, 0, 0, 0, 9058, 1441, 1, 0, 0, 0, 9059,
        9062, 4, 721, 125, 0, 9060, 9063, 3, 1450, 725, 0, 9061, 9063, 3, 1448, 724, 0, 9062, 9060,
        1, 0, 0, 0, 9062, 9061, 1, 0, 0, 0, 9063, 9070, 1, 0, 0, 0, 9064, 9068, 3, 1440, 720, 0, 9065,
        9068, 3, 1434, 717, 0, 9066, 9068, 3, 1446, 723, 0, 9067, 9064, 1, 0, 0, 0, 9067, 9065, 1,
        0, 0, 0, 9067, 9066, 1, 0, 0, 0, 9068, 9070, 1, 0, 0, 0, 9069, 9059, 1, 0, 0, 0, 9069, 9067, 1,
        0, 0, 0, 9070, 1443, 1, 0, 0, 0, 9071, 9076, 3, 1440, 720, 0, 9072, 9076, 3, 1432, 716, 0, 9073,
        9076, 3, 1434, 717, 0, 9074, 9076, 3, 1438, 719, 0, 9075, 9071, 1, 0, 0, 0, 9075, 9072, 1,
        0, 0, 0, 9075, 9073, 1, 0, 0, 0, 9075, 9074, 1, 0, 0, 0, 9076, 1445, 1, 0, 0, 0, 9077, 9078, 7,
        162, 0, 0, 9078, 1447, 1, 0, 0, 0, 9079, 9080, 7, 168, 0, 0, 9080, 1449, 1, 0, 0, 0, 9081, 9085,
        7, 169, 0, 0, 9082, 9083, 4, 725, 126, 0, 9083, 9085, 5, 660, 0, 0, 9084, 9081, 1, 0, 0, 0, 9084,
        9082, 1, 0, 0, 0, 9085, 1451, 1, 0, 0, 0, 1166, 1454, 1457, 1459, 1536, 1544, 1549, 1559,
        1566, 1572, 1575, 1578, 1585, 1590, 1593, 1598, 1604, 1606, 1610, 1614, 1623, 1627, 1632,
        1638, 1645, 1650, 1655, 1662, 1665, 1671, 1674, 1681, 1691, 1696, 1701, 1709, 1715, 1719,
        1724, 1733, 1739, 1745, 1751, 1760, 1766, 1775, 1787, 1791, 1797, 1801, 1807, 1811, 1816,
        1819, 1825, 1831, 1837, 1841, 1846, 1850, 1854, 1870, 1878, 1886, 1893, 1920, 1935, 1938,
        1944, 1949, 1955, 1960, 1964, 1969, 1973, 1977, 1981, 1985, 1989, 1991, 2001, 2009, 2016,
        2024, 2028, 2033, 2040, 2045, 2050, 2060, 2064, 2069, 2072, 2075, 2078, 2085, 2092, 2096,
        2121, 2123, 2131, 2133, 2153, 2157, 2163, 2170, 2173, 2177, 2184, 2187, 2196, 2203, 2208,
        2211, 2216, 2223, 2226, 2230, 2236, 2239, 2244, 2248, 2257, 2260, 2266, 2272, 2276, 2285,
        2288, 2296, 2302, 2306, 2316, 2319, 2324, 2343, 2346, 2349, 2355, 2358, 2360, 2366, 2376,
        2386, 2389, 2392, 2396, 2404, 2417, 2421, 2426, 2435, 2452, 2471, 2480, 2483, 2491, 2496,
        2500, 2507, 2512, 2526, 2530, 2536, 2542, 2548, 2554, 2560, 2565, 2569, 2577, 2583, 2589,
        2595, 2600, 2603, 2606, 2615, 2618, 2629, 2633, 2644, 2652, 2656, 2665, 2668, 2674, 2676,
        2680, 2687, 2700, 2707, 2713, 2716, 2733, 2752, 2756, 2762, 2768, 2774, 2779, 2786, 2793,
        2798, 2801, 2805, 2809, 2814, 2818, 2822, 2828, 2833, 2836, 2840, 2846, 2850, 2854, 2862,
        2870, 2879, 2888, 2901, 2904, 2907, 2913, 2921, 2926, 2929, 2932, 2935, 2938, 2940, 2946,
        2948, 2964, 2971, 2974, 2976, 2978, 2988, 2990, 2994, 2997, 3000, 3004, 3009, 3015, 3018,
        3021, 3027, 3030, 3039, 3049, 3053, 3059, 3063, 3065, 3069, 3075, 3080, 3085, 3090, 3094,
        3100, 3111, 3114, 3119, 3125, 3128, 3131, 3134, 3137, 3151, 3154, 3158, 3162, 3170, 3178,
        3182, 3187, 3190, 3194, 3200, 3204, 3207, 3216, 3226, 3230, 3234, 3237, 3240, 3244, 3248,
        3251, 3253, 3259, 3263, 3265, 3269, 3273, 3277, 3285, 3289, 3294, 3303, 3309, 3314, 3317,
        3320, 3323, 3326, 3329, 3344, 3348, 3354, 3357, 3360, 3366, 3371, 3375, 3378, 3385, 3387,
        3400, 3412, 3417, 3420, 3423, 3428, 3434, 3450, 3470, 3479, 3483, 3490, 3495, 3504, 3518,
        3525, 3534, 3543, 3549, 3554, 3560, 3563, 3569, 3576, 3580, 3586, 3592, 3594, 3597, 3601,
        3611, 3616, 3621, 3628, 3637, 3645, 3650, 3654, 3660, 3663, 3666, 3670, 3674, 3684, 3688,
        3691, 3694, 3699, 3705, 3708, 3714, 3717, 3719, 3724, 3736, 3745, 3758, 3761, 3766, 3773,
        3777, 3780, 3786, 3800, 3807, 3816, 3822, 3831, 3835, 3839, 3849, 3851, 3859, 3866, 3871,
        3874, 3878, 3881, 3887, 3890, 3893, 3899, 3906, 3911, 3915, 3918, 3921, 3924, 3926, 3930,
        3937, 3943, 3947, 3952, 3955, 3958, 3961, 3963, 3968, 3977, 3986, 3990, 3996, 3999, 4002,
        4008, 4015, 4017, 4025, 4031, 4033, 4043, 4045, 4054, 4063, 4071, 4078, 4082, 4086, 4089,
        4091, 4098, 4104, 4113, 4120, 4127, 4258, 4312, 4319, 4323, 4339, 4351, 4354, 4366, 4370,
        4376, 4383, 4390, 4397, 4404, 4411, 4418, 4421, 4428, 4436, 4444, 4454, 4460, 4464, 4467,
        4470, 4473, 4476, 4479, 4484, 4487, 4494, 4500, 4524, 4531, 4534, 4543, 4549, 4570, 4576,
        4582, 4589, 4597, 4603, 4615, 4617, 4623, 4627, 4629, 4633, 4644, 4649, 4655, 4662, 4665,
        4668, 4674, 4676, 4684, 4687, 4689, 4691, 4698, 4709, 4712, 4714, 4718, 4723, 4725, 4730,
        4736, 4739, 4741, 4745, 4748, 4757, 4766, 4772, 4774, 4776, 4785, 4789, 4795, 4798, 4800,
        4811, 4816, 4821, 4827, 4829, 4833, 4835, 4843, 4847, 4852, 4855, 4860, 4865, 4871, 4880,
        4891, 4893, 4905, 4910, 4918, 4924, 4926, 4933, 4935, 4942, 4947, 4958, 4963, 4965, 4969,
        4975, 4978, 4981, 4991, 4993, 4999, 5006, 5012, 5022, 5026, 5031, 5048, 5054, 5063, 5071,
        5075, 5081, 5091, 5095, 5104, 5109, 5115, 5117, 5121, 5132, 5139, 5145, 5149, 5154, 5159,
        5167, 5171, 5176, 5185, 5197, 5211, 5220, 5222, 5229, 5234, 5238, 5243, 5251, 5258, 5262,
        5268, 5275, 5278, 5291, 5297, 5302, 5325, 5328, 5344, 5349, 5352, 5356, 5359, 5367, 5373,
        5378, 5381, 5383, 5387, 5392, 5394, 5406, 5412, 5426, 5438, 5442, 5444, 5452, 5456, 5465,
        5478, 5483, 5487, 5491, 5494, 5498, 5502, 5505, 5510, 5513, 5519, 5522, 5528, 5531, 5553,
        5559, 5562, 5573, 5580, 5584, 5587, 5590, 5597, 5601, 5604, 5607, 5611, 5617, 5620, 5624,
        5645, 5650, 5658, 5663, 5666, 5670, 5674, 5678, 5684, 5688, 5693, 5698, 5709, 5711, 5717,
        5739, 5761, 5768, 5795, 5797, 5801, 5813, 5823, 5833, 5837, 5845, 5848, 5852, 5861, 5865,
        5872, 5877, 5885, 5890, 5896, 5903, 5908, 5914, 5917, 5927, 5929, 5936, 5941, 5945, 5948,
        5955, 5960, 5964, 5975, 5983, 5987, 5990, 5993, 5997, 6001, 6006, 6012, 6016, 6027, 6030,
        6033, 6036, 6044, 6048, 6053, 6061, 6069, 6075, 6089, 6101, 6115, 6118, 6122, 6133, 6135,
        6144, 6156, 6158, 6165, 6171, 6177, 6185, 6196, 6200, 6229, 6231, 6237, 6254, 6261, 6275,
        6286, 6291, 6302, 6312, 6319, 6322, 6356, 6364, 6366, 6376, 6381, 6386, 6393, 6399, 6404,
        6409, 6415, 6419, 6424, 6429, 6436, 6444, 6449, 6453, 6457, 6461, 6463, 6482, 6490, 6494,
        6501, 6513, 6516, 6520, 6525, 6531, 6535, 6539, 6543, 6549, 6559, 6568, 6570, 6573, 6582,
        6589, 6602, 6607, 6614, 6620, 6646, 6656, 6688, 6707, 6713, 6717, 6744, 6756, 6769, 6773,
        6777, 6805, 6855, 6865, 6877, 6882, 6890, 6910, 6914, 6930, 6933, 6938, 6941, 6950, 6954,
        6960, 6966, 6970, 6981, 6987, 6989, 6996, 7003, 7007, 7014, 7019, 7024, 7033, 7036, 7041,
        7046, 7048, 7052, 7056, 7069, 7073, 7076, 7080, 7084, 7088, 7095, 7099, 7103, 7111, 7115,
        7122, 7128, 7136, 7157, 7162, 7169, 7191, 7207, 7217, 7221, 7228, 7231, 7242, 7251, 7254,
        7261, 7266, 7292, 7298, 7304, 7308, 7318, 7322, 7335, 7347, 7363, 7371, 7381, 7384, 7389,
        7393, 7400, 7405, 7412, 7420, 7423, 7428, 7436, 7439, 7453, 7456, 7469, 7473, 7475, 7480,
        7485, 7491, 7497, 7503, 7508, 7511, 7517, 7522, 7525, 7531, 7535, 7541, 7543, 7546, 7552,
        7558, 7566, 7568, 7570, 7574, 7580, 7584, 7588, 7593, 7598, 7601, 7604, 7617, 7621, 7627,
        7634, 7639, 7652, 7660, 7666, 7671, 7682, 7686, 7691, 7695, 7698, 7703, 7707, 7715, 7723,
        7725, 7734, 7742, 7749, 7752, 7760, 7768, 7770, 7776, 7782, 7786, 7795, 7801, 7804, 7815,
        7824, 7827, 7832, 7834, 7837, 7840, 7844, 7847, 7851, 7856, 7859, 7863, 7866, 7870, 7875,
        7879, 7891, 7895, 7901, 7904, 7909, 7913, 7917, 7922, 7931, 7934, 7938, 7942, 7945, 7949,
        7953, 7958, 7963, 7968, 7973, 7978, 7980, 7985, 7992, 8000, 8006, 8008, 8012, 8016, 8020,
        8024, 8039, 8045, 8052, 8056, 8061, 8066, 8069, 8073, 8076, 8081, 8085, 8091, 8095, 8099,
        8104, 8109, 8114, 8119, 8124, 8129, 8134, 8139, 8144, 8149, 8154, 8159, 8164, 8174, 8180,
        8186, 8191, 8198, 8203, 8212, 8218, 8223, 8227, 8230, 8234, 8239, 8243, 8248, 8252, 8261,
        8264, 8267, 8270, 8274, 8278, 8282, 8297, 8300, 8302, 8307, 8316, 8319, 8323, 8335, 8347,
        8352, 8357, 8366, 8371, 8380, 8385, 8389, 8393, 8397, 8402, 8407, 8413, 8418, 8421, 8428,
        8437, 8444, 8462, 8474, 8487, 8495, 8502, 8511, 8517, 8525, 8531, 8542, 8550, 8556, 8560,
        8563, 8569, 8577, 8616, 8641, 8651, 8656, 8658, 8665, 8677, 8679, 8691, 8700, 8711, 8733,
        8737, 8761, 8772, 8774, 8778, 8785, 8793, 8800, 8806, 8819, 8823, 8830, 8839, 8844, 8846,
        8862, 8869, 8874, 8882, 8885, 8890, 8900, 8908, 8913, 8918, 8921, 8925, 8930, 8940, 8946,
        8960, 8964, 8976, 8980, 8984, 8988, 9003, 9017, 9024, 9026, 9043, 9048, 9050, 9057, 9062,
        9067, 9069, 9075, 9084]);

    private static readonly vocabulary = new Vocabulary(MySQLParser.literalNames, MySQLParser.symbolicNames, []);

    public override getVocabulary(): Vocabulary {
        return MySQLParser.vocabulary;
    }

    private static __ATN: ATN;
    public getATN(): ATN {
        if (!MySQLParser.__ATN) {
            MySQLParser.__ATN = new ATNDeserializer().deserialize(MySQLParser._serializedATN);
        }

        return MySQLParser.__ATN;
    }

}

export class QueryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public simpleStatement(): SimpleStatementContext {
        return this.getRuleContext(MySQLParser.RULE_simpleStatement, 0) as SimpleStatementContext;
    }
    public beginWork(): BeginWorkContext {
        return this.getRuleContext(MySQLParser.RULE_beginWork, 0) as BeginWorkContext;
    }
    public SEMICOLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_query;
    }
}


export class SimpleStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterStatement(): AlterStatementContext {
        return this.getRuleContext(MySQLParser.RULE_alterStatement, 0) as AlterStatementContext;
    }
    public createStatement(): CreateStatementContext {
        return this.getRuleContext(MySQLParser.RULE_createStatement, 0) as CreateStatementContext;
    }
    public dropStatement(): DropStatementContext {
        return this.getRuleContext(MySQLParser.RULE_dropStatement, 0) as DropStatementContext;
    }
    public renameTableStatement(): RenameTableStatementContext {
        return this.getRuleContext(MySQLParser.RULE_renameTableStatement, 0) as RenameTableStatementContext;
    }
    public truncateTableStatement(): TruncateTableStatementContext {
        return this.getRuleContext(MySQLParser.RULE_truncateTableStatement, 0) as TruncateTableStatementContext;
    }
    public importStatement(): ImportStatementContext {
        return this.getRuleContext(MySQLParser.RULE_importStatement, 0) as ImportStatementContext;
    }
    public callStatement(): CallStatementContext {
        return this.getRuleContext(MySQLParser.RULE_callStatement, 0) as CallStatementContext;
    }
    public deleteStatement(): DeleteStatementContext {
        return this.getRuleContext(MySQLParser.RULE_deleteStatement, 0) as DeleteStatementContext;
    }
    public doStatement(): DoStatementContext {
        return this.getRuleContext(MySQLParser.RULE_doStatement, 0) as DoStatementContext;
    }
    public handlerStatement(): HandlerStatementContext {
        return this.getRuleContext(MySQLParser.RULE_handlerStatement, 0) as HandlerStatementContext;
    }
    public insertStatement(): InsertStatementContext {
        return this.getRuleContext(MySQLParser.RULE_insertStatement, 0) as InsertStatementContext;
    }
    public loadStatement(): LoadStatementContext {
        return this.getRuleContext(MySQLParser.RULE_loadStatement, 0) as LoadStatementContext;
    }
    public replaceStatement(): ReplaceStatementContext {
        return this.getRuleContext(MySQLParser.RULE_replaceStatement, 0) as ReplaceStatementContext;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0) as SelectStatementContext;
    }
    public updateStatement(): UpdateStatementContext {
        return this.getRuleContext(MySQLParser.RULE_updateStatement, 0) as UpdateStatementContext;
    }
    public transactionOrLockingStatement(): TransactionOrLockingStatementContext {
        return this.getRuleContext(MySQLParser.RULE_transactionOrLockingStatement, 0) as TransactionOrLockingStatementContext;
    }
    public replicationStatement(): ReplicationStatementContext {
        return this.getRuleContext(MySQLParser.RULE_replicationStatement, 0) as ReplicationStatementContext;
    }
    public preparedStatement(): PreparedStatementContext {
        return this.getRuleContext(MySQLParser.RULE_preparedStatement, 0) as PreparedStatementContext;
    }
    public cloneStatement(): CloneStatementContext {
        return this.getRuleContext(MySQLParser.RULE_cloneStatement, 0) as CloneStatementContext;
    }
    public accountManagementStatement(): AccountManagementStatementContext {
        return this.getRuleContext(MySQLParser.RULE_accountManagementStatement, 0) as AccountManagementStatementContext;
    }
    public tableAdministrationStatement(): TableAdministrationStatementContext {
        return this.getRuleContext(MySQLParser.RULE_tableAdministrationStatement, 0) as TableAdministrationStatementContext;
    }
    public installUninstallStatement(): InstallUninstallStatementContext {
        return this.getRuleContext(MySQLParser.RULE_installUninstallStatement, 0) as InstallUninstallStatementContext;
    }
    public setStatement(): SetStatementContext {
        return this.getRuleContext(MySQLParser.RULE_setStatement, 0) as SetStatementContext;
    }
    public showDatabasesStatement(): ShowDatabasesStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showDatabasesStatement, 0) as ShowDatabasesStatementContext;
    }
    public showTablesStatement(): ShowTablesStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showTablesStatement, 0) as ShowTablesStatementContext;
    }
    public showTriggersStatement(): ShowTriggersStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showTriggersStatement, 0) as ShowTriggersStatementContext;
    }
    public showEventsStatement(): ShowEventsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showEventsStatement, 0) as ShowEventsStatementContext;
    }
    public showTableStatusStatement(): ShowTableStatusStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showTableStatusStatement, 0) as ShowTableStatusStatementContext;
    }
    public showOpenTablesStatement(): ShowOpenTablesStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showOpenTablesStatement, 0) as ShowOpenTablesStatementContext;
    }
    public showPluginsStatement(): ShowPluginsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showPluginsStatement, 0) as ShowPluginsStatementContext;
    }
    public showEngineLogsStatement(): ShowEngineLogsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showEngineLogsStatement, 0) as ShowEngineLogsStatementContext;
    }
    public showEngineMutexStatement(): ShowEngineMutexStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showEngineMutexStatement, 0) as ShowEngineMutexStatementContext;
    }
    public showEngineStatusStatement(): ShowEngineStatusStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showEngineStatusStatement, 0) as ShowEngineStatusStatementContext;
    }
    public showColumnsStatement(): ShowColumnsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showColumnsStatement, 0) as ShowColumnsStatementContext;
    }
    public showBinaryLogsStatement(): ShowBinaryLogsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showBinaryLogsStatement, 0) as ShowBinaryLogsStatementContext;
    }
    public showReplicasStatement(): ShowReplicasStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showReplicasStatement, 0) as ShowReplicasStatementContext;
    }
    public showBinlogEventsStatement(): ShowBinlogEventsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showBinlogEventsStatement, 0) as ShowBinlogEventsStatementContext;
    }
    public showRelaylogEventsStatement(): ShowRelaylogEventsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showRelaylogEventsStatement, 0) as ShowRelaylogEventsStatementContext;
    }
    public showKeysStatement(): ShowKeysStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showKeysStatement, 0) as ShowKeysStatementContext;
    }
    public showEnginesStatement(): ShowEnginesStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showEnginesStatement, 0) as ShowEnginesStatementContext;
    }
    public showCountWarningsStatement(): ShowCountWarningsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCountWarningsStatement, 0) as ShowCountWarningsStatementContext;
    }
    public showCountErrorsStatement(): ShowCountErrorsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCountErrorsStatement, 0) as ShowCountErrorsStatementContext;
    }
    public showWarningsStatement(): ShowWarningsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showWarningsStatement, 0) as ShowWarningsStatementContext;
    }
    public showErrorsStatement(): ShowErrorsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showErrorsStatement, 0) as ShowErrorsStatementContext;
    }
    public showProfilesStatement(): ShowProfilesStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showProfilesStatement, 0) as ShowProfilesStatementContext;
    }
    public showProfileStatement(): ShowProfileStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showProfileStatement, 0) as ShowProfileStatementContext;
    }
    public showStatusStatement(): ShowStatusStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showStatusStatement, 0) as ShowStatusStatementContext;
    }
    public showProcessListStatement(): ShowProcessListStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showProcessListStatement, 0) as ShowProcessListStatementContext;
    }
    public showVariablesStatement(): ShowVariablesStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showVariablesStatement, 0) as ShowVariablesStatementContext;
    }
    public showCharacterSetStatement(): ShowCharacterSetStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCharacterSetStatement, 0) as ShowCharacterSetStatementContext;
    }
    public showCollationStatement(): ShowCollationStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCollationStatement, 0) as ShowCollationStatementContext;
    }
    public showPrivilegesStatement(): ShowPrivilegesStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showPrivilegesStatement, 0) as ShowPrivilegesStatementContext;
    }
    public showGrantsStatement(): ShowGrantsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showGrantsStatement, 0) as ShowGrantsStatementContext;
    }
    public showCreateDatabaseStatement(): ShowCreateDatabaseStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateDatabaseStatement, 0) as ShowCreateDatabaseStatementContext;
    }
    public showCreateTableStatement(): ShowCreateTableStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateTableStatement, 0) as ShowCreateTableStatementContext;
    }
    public showCreateViewStatement(): ShowCreateViewStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateViewStatement, 0) as ShowCreateViewStatementContext;
    }
    public showMasterStatusStatement(): ShowMasterStatusStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showMasterStatusStatement, 0) as ShowMasterStatusStatementContext;
    }
    public showReplicaStatusStatement(): ShowReplicaStatusStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showReplicaStatusStatement, 0) as ShowReplicaStatusStatementContext;
    }
    public showCreateProcedureStatement(): ShowCreateProcedureStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureStatement, 0) as ShowCreateProcedureStatementContext;
    }
    public showCreateFunctionStatement(): ShowCreateFunctionStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionStatement, 0) as ShowCreateFunctionStatementContext;
    }
    public showCreateTriggerStatement(): ShowCreateTriggerStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateTriggerStatement, 0) as ShowCreateTriggerStatementContext;
    }
    public showCreateProcedureStatusStatement(): ShowCreateProcedureStatusStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureStatusStatement, 0) as ShowCreateProcedureStatusStatementContext;
    }
    public showCreateFunctionStatusStatement(): ShowCreateFunctionStatusStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionStatusStatement, 0) as ShowCreateFunctionStatusStatementContext;
    }
    public showCreateProcedureCodeStatement(): ShowCreateProcedureCodeStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateProcedureCodeStatement, 0) as ShowCreateProcedureCodeStatementContext;
    }
    public showCreateFunctionCodeStatement(): ShowCreateFunctionCodeStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateFunctionCodeStatement, 0) as ShowCreateFunctionCodeStatementContext;
    }
    public showCreateEventStatement(): ShowCreateEventStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateEventStatement, 0) as ShowCreateEventStatementContext;
    }
    public showCreateUserStatement(): ShowCreateUserStatementContext {
        return this.getRuleContext(MySQLParser.RULE_showCreateUserStatement, 0) as ShowCreateUserStatementContext;
    }
    public resourceGroupManagement(): ResourceGroupManagementContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupManagement, 0) as ResourceGroupManagementContext;
    }
    public otherAdministrativeStatement(): OtherAdministrativeStatementContext {
        return this.getRuleContext(MySQLParser.RULE_otherAdministrativeStatement, 0) as OtherAdministrativeStatementContext;
    }
    public utilityStatement(): UtilityStatementContext {
        return this.getRuleContext(MySQLParser.RULE_utilityStatement, 0) as UtilityStatementContext;
    }
    public getDiagnosticsStatement(): GetDiagnosticsStatementContext {
        return this.getRuleContext(MySQLParser.RULE_getDiagnosticsStatement, 0) as GetDiagnosticsStatementContext;
    }
    public signalStatement(): SignalStatementContext {
        return this.getRuleContext(MySQLParser.RULE_signalStatement, 0) as SignalStatementContext;
    }
    public resignalStatement(): ResignalStatementContext {
        return this.getRuleContext(MySQLParser.RULE_resignalStatement, 0) as ResignalStatementContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleStatement;
    }
}


export class AlterStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public alterTable(): AlterTableContext {
        return this.getRuleContext(MySQLParser.RULE_alterTable, 0) as AlterTableContext;
    }
    public alterDatabase(): AlterDatabaseContext {
        return this.getRuleContext(MySQLParser.RULE_alterDatabase, 0) as AlterDatabaseContext;
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0) as ProcedureRefContext;
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0) as FunctionRefContext;
    }
    public alterView(): AlterViewContext {
        return this.getRuleContext(MySQLParser.RULE_alterView, 0) as AlterViewContext;
    }
    public alterEvent(): AlterEventContext {
        return this.getRuleContext(MySQLParser.RULE_alterEvent, 0) as AlterEventContext;
    }
    public alterTablespace(): AlterTablespaceContext {
        return this.getRuleContext(MySQLParser.RULE_alterTablespace, 0) as AlterTablespaceContext;
    }
    public alterUndoTablespace(): AlterUndoTablespaceContext {
        return this.getRuleContext(MySQLParser.RULE_alterUndoTablespace, 0) as AlterUndoTablespaceContext;
    }
    public alterLogfileGroup(): AlterLogfileGroupContext {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroup, 0) as AlterLogfileGroupContext;
    }
    public alterServer(): AlterServerContext {
        return this.getRuleContext(MySQLParser.RULE_alterServer, 0) as AlterServerContext;
    }
    public alterInstanceStatement(): AlterInstanceStatementContext {
        return this.getRuleContext(MySQLParser.RULE_alterInstanceStatement, 0) as AlterInstanceStatementContext;
    }
    public routineAlterOptions(): RoutineAlterOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_routineAlterOptions, 0) as RoutineAlterOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterStatement;
    }
}


export class AlterDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0) as SchemaRefContext;
    }
    public alterDatabaseOption_list(): Vector<AlterDatabaseOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterDatabaseOption) as Vector<AlterDatabaseOptionContext>;
    }
    public alterDatabaseOption(i: number): AlterDatabaseOptionContext {
        return this.getRuleContext(MySQLParser.RULE_alterDatabaseOption, i) as AlterDatabaseOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterDatabase;
    }
}


export class AlterDatabaseOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public createDatabaseOption(): CreateDatabaseOptionContext {
        return this.getRuleContext(MySQLParser.RULE_createDatabaseOption, 0) as CreateDatabaseOptionContext;
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public ternaryOption(): TernaryOptionContext {
        return this.getRuleContext(MySQLParser.RULE_ternaryOption, 0) as TernaryOptionContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterDatabaseOption;
    }
}


export class AlterEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0) as EventRefContext;
    }
    public definerClause(): DefinerClauseContext {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0) as DefinerClauseContext;
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public schedule(): ScheduleContext {
        return this.getRuleContext(MySQLParser.RULE_schedule, 0) as ScheduleContext;
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0) as CompoundStatementContext;
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(MySQLParser.RULE_replica, 0) as ReplicaContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterEvent;
    }
}


export class AlterLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0) as LogfileGroupRefContext;
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroupOptions, 0) as AlterLogfileGroupOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroup;
    }
}


export class AlterLogfileGroupOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterLogfileGroupOption_list(): Vector<AlterLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterLogfileGroupOption) as Vector<AlterLogfileGroupOptionContext>;
    }
    public alterLogfileGroupOption(i: number): AlterLogfileGroupOptionContext {
        return this.getRuleContext(MySQLParser.RULE_alterLogfileGroupOption, i) as AlterLogfileGroupOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroupOptions;
    }
}


export class AlterLogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0) as TsOptionInitialSizeContext;
    }
    public tsOptionEngine(): TsOptionEngineContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0) as TsOptionEngineContext;
    }
    public tsOptionWait(): TsOptionWaitContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0) as TsOptionWaitContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLogfileGroupOption;
    }
}


export class AlterServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverRef(): ServerRefContext {
        return this.getRuleContext(MySQLParser.RULE_serverRef, 0) as ServerRefContext;
    }
    public serverOptions(): ServerOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_serverOptions, 0) as ServerOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterServer;
    }
}


export class AlterTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public onlineOption(): OnlineOptionContext {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0) as OnlineOptionContext;
    }
    public alterTableActions(): AlterTableActionsContext {
        return this.getRuleContext(MySQLParser.RULE_alterTableActions, 0) as AlterTableActionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTable;
    }
}


export class AlterTableActionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterCommandList(): AlterCommandListContext {
        return this.getRuleContext(MySQLParser.RULE_alterCommandList, 0) as AlterCommandListContext;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(MySQLParser.RULE_partitionClause, 0) as PartitionClauseContext;
    }
    public removePartitioning(): RemovePartitioningContext {
        return this.getRuleContext(MySQLParser.RULE_removePartitioning, 0) as RemovePartitioningContext;
    }
    public standaloneAlterCommands(): StandaloneAlterCommandsContext {
        return this.getRuleContext(MySQLParser.RULE_standaloneAlterCommands, 0) as StandaloneAlterCommandsContext;
    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifierList, 0) as AlterCommandsModifierListContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTableActions;
    }
}


export class AlterCommandListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterCommandsModifierList(): AlterCommandsModifierListContext {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifierList, 0) as AlterCommandsModifierListContext;
    }
    public alterList(): AlterListContext {
        return this.getRuleContext(MySQLParser.RULE_alterList, 0) as AlterListContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandList;
    }
}


export class AlterCommandsModifierListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterCommandsModifier_list(): Vector<AlterCommandsModifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterCommandsModifier) as Vector<AlterCommandsModifierContext>;
    }
    public alterCommandsModifier(i: number): AlterCommandsModifierContext {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifier, i) as AlterCommandsModifierContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandsModifierList;
    }
}


export class StandaloneAlterCommandsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public alterPartition(): AlterPartitionContext {
        return this.getRuleContext(MySQLParser.RULE_alterPartition, 0) as AlterPartitionContext;
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_standaloneAlterCommands;
    }
}


export class AlterPartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public partitionDefinitions(): PartitionDefinitionsContext {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinitions, 0) as PartitionDefinitionsContext;
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public noWriteToBinLog_list(): Vector<NoWriteToBinLogContext> {
        return this.getRuleContexts(MySQLParser.RULE_noWriteToBinLog) as Vector<NoWriteToBinLogContext>;
    }
    public noWriteToBinLog(i: number): NoWriteToBinLogContext {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, i) as NoWriteToBinLogContext;
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0) as AllOrPartitionNameListContext;
    }
    public OPTIMIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public checkOption_list(): Vector<CheckOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_checkOption) as Vector<CheckOptionContext>;
    }
    public checkOption(i: number): CheckOptionContext {
        return this.getRuleContext(MySQLParser.RULE_checkOption, i) as CheckOptionContext;
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public repairType_list(): Vector<RepairTypeContext> {
        return this.getRuleContexts(MySQLParser.RULE_repairType) as Vector<RepairTypeContext>;
    }
    public repairType(i: number): RepairTypeContext {
        return this.getRuleContext(MySQLParser.RULE_repairType, i) as RepairTypeContext;
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public EXCHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public withValidation(): WithValidationContext {
        return this.getRuleContext(MySQLParser.RULE_withValidation, 0) as WithValidationContext;
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterPartition;
    }
}


export class AlterListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterListItem_list(): Vector<AlterListItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterListItem) as Vector<AlterListItemContext>;
    }
    public alterListItem(i: number): AlterListItemContext {
        return this.getRuleContext(MySQLParser.RULE_alterListItem, i) as AlterListItemContext;
    }
    public createTableOptionsSpaceSeparated_list(): Vector<CreateTableOptionsSpaceSeparatedContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOptionsSpaceSeparated) as Vector<CreateTableOptionsSpaceSeparatedContext>;
    }
    public createTableOptionsSpaceSeparated(i: number): CreateTableOptionsSpaceSeparatedContext {
        return this.getRuleContext(MySQLParser.RULE_createTableOptionsSpaceSeparated, i) as CreateTableOptionsSpaceSeparatedContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public alterCommandsModifier_list(): Vector<AlterCommandsModifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterCommandsModifier) as Vector<AlterCommandsModifierContext>;
    }
    public alterCommandsModifier(i: number): AlterCommandsModifierContext {
        return this.getRuleContext(MySQLParser.RULE_alterCommandsModifier, i) as AlterCommandsModifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterList;
    }
}


export class AlterCommandsModifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext {
        return this.getRuleContext(MySQLParser.RULE_alterAlgorithmOption, 0) as AlterAlgorithmOptionContext;
    }
    public alterLockOption(): AlterLockOptionContext {
        return this.getRuleContext(MySQLParser.RULE_alterLockOption, 0) as AlterLockOptionContext;
    }
    public withValidation(): WithValidationContext {
        return this.getRuleContext(MySQLParser.RULE_withValidation, 0) as WithValidationContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterCommandsModifier;
    }
}


export class AlterListItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public fieldDefinition(): FieldDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_fieldDefinition, 0) as FieldDefinitionContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public tableElementList(): TableElementListContext {
        return this.getRuleContext(MySQLParser.RULE_tableElementList, 0) as TableElementListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COLUMN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_SYMBOL, 0);
    }
    public checkOrReferences(): CheckOrReferencesContext {
        return this.getRuleContext(MySQLParser.RULE_checkOrReferences, 0) as CheckOrReferencesContext;
    }
    public place(): PlaceContext {
        return this.getRuleContext(MySQLParser.RULE_place, 0) as PlaceContext;
    }
    public tableConstraintDef(): TableConstraintDefContext {
        return this.getRuleContext(MySQLParser.RULE_tableConstraintDef, 0) as TableConstraintDefContext;
    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public columnInternalRef(): ColumnInternalRefContext {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRef, 0) as ColumnInternalRefContext;
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0) as KeyOrIndexContext;
    }
    public indexRef(): IndexRefContext {
        return this.getRuleContext(MySQLParser.RULE_indexRef, 0) as IndexRefContext;
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public CONSTRAINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
    }
    public restrict(): RestrictContext {
        return this.getRuleContext(MySQLParser.RULE_restrict, 0) as RestrictContext;
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public visibility(): VisibilityContext {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0) as VisibilityContext;
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0) as ExprWithParenthesesContext;
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext {
        return this.getRuleContext(MySQLParser.RULE_signedLiteralOrNull, 0) as SignedLiteralOrNullContext;
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0) as ConstraintEnforcementContext;
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0) as TableNameContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public indexName(): IndexNameContext {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0) as IndexNameContext;
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public charset(): CharsetContext {
        return this.getRuleContext(MySQLParser.RULE_charset, 0) as CharsetContext;
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0) as CharsetNameContext;
    }
    public collate(): CollateContext {
        return this.getRuleContext(MySQLParser.RULE_collate, 0) as CollateContext;
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public alterOrderList(): AlterOrderListContext {
        return this.getRuleContext(MySQLParser.RULE_alterOrderList, 0) as AlterOrderListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterListItem;
    }
}


export class PlaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_place;
    }
}


export class RestrictContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_restrict;
    }
}


export class AlterOrderListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier) as Vector<IdentifierContext>;
    }
    public identifier(i: number): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, i) as IdentifierContext;
    }
    public direction_list(): Vector<DirectionContext> {
        return this.getRuleContexts(MySQLParser.RULE_direction) as Vector<DirectionContext>;
    }
    public direction(i: number): DirectionContext {
        return this.getRuleContext(MySQLParser.RULE_direction, i) as DirectionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterOrderList;
    }
}


export class AlterAlgorithmOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterAlgorithmOption;
    }
}


export class AlterLockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterLockOption;
    }
}


export class IndexLockAndAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterAlgorithmOption(): AlterAlgorithmOptionContext {
        return this.getRuleContext(MySQLParser.RULE_alterAlgorithmOption, 0) as AlterAlgorithmOptionContext;
    }
    public alterLockOption(): AlterLockOptionContext {
        return this.getRuleContext(MySQLParser.RULE_alterLockOption, 0) as AlterLockOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexLockAndAlgorithm;
    }
}


export class WithValidationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public VALIDATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public WITHOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withValidation;
    }
}


export class RemovePartitioningContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_removePartitioning;
    }
}


export class AllOrPartitionNameListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_allOrPartitionNameList;
    }
}


export class AlterTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0) as TablespaceRefContext;
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public alterTablespaceOptions(): AlterTablespaceOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_alterTablespaceOptions, 0) as AlterTablespaceOptionsContext;
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespace;
    }
}


export class AlterUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0) as TablespaceRefContext;
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0) as UndoTableSpaceOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUndoTablespace;
    }
}


export class UndoTableSpaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public undoTableSpaceOption_list(): Vector<UndoTableSpaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_undoTableSpaceOption) as Vector<UndoTableSpaceOptionContext>;
    }
    public undoTableSpaceOption(i: number): UndoTableSpaceOptionContext {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOption, i) as UndoTableSpaceOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_undoTableSpaceOptions;
    }
}


export class UndoTableSpaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tsOptionEngine(): TsOptionEngineContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0) as TsOptionEngineContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_undoTableSpaceOption;
    }
}


export class AlterTablespaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterTablespaceOption_list(): Vector<AlterTablespaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterTablespaceOption) as Vector<AlterTablespaceOptionContext>;
    }
    public alterTablespaceOption(i: number): AlterTablespaceOptionContext {
        return this.getRuleContext(MySQLParser.RULE_alterTablespaceOption, i) as AlterTablespaceOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespaceOptions;
    }
}


export class AlterTablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0) as SizeNumberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0) as TsOptionAutoextendSizeContext;
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0) as TsOptionMaxSizeContext;
    }
    public tsOptionEngine(): TsOptionEngineContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0) as TsOptionEngineContext;
    }
    public tsOptionWait(): TsOptionWaitContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0) as TsOptionWaitContext;
    }
    public tsOptionEncryption(): TsOptionEncryptionContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEncryption, 0) as TsOptionEncryptionContext;
    }
    public tsOptionEngineAttribute(): TsOptionEngineAttributeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngineAttribute, 0) as TsOptionEngineAttributeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterTablespaceOption;
    }
}


export class ChangeTablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0) as SizeNumberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0) as TsOptionAutoextendSizeContext;
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0) as TsOptionMaxSizeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeTablespaceOption;
    }
}


export class AlterViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(MySQLParser.RULE_viewRef, 0) as ViewRefContext;
    }
    public viewTail(): ViewTailContext {
        return this.getRuleContext(MySQLParser.RULE_viewTail, 0) as ViewTailContext;
    }
    public viewAlgorithm(): ViewAlgorithmContext {
        return this.getRuleContext(MySQLParser.RULE_viewAlgorithm, 0) as ViewAlgorithmContext;
    }
    public definerClause(): DefinerClauseContext {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0) as DefinerClauseContext;
    }
    public viewSuid(): ViewSuidContext {
        return this.getRuleContext(MySQLParser.RULE_viewSuid, 0) as ViewSuidContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterView;
    }
}


export class ViewTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public viewQueryBlock(): ViewQueryBlockContext {
        return this.getRuleContext(MySQLParser.RULE_viewQueryBlock, 0) as ViewQueryBlockContext;
    }
    public columnInternalRefList(): ColumnInternalRefListContext {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0) as ColumnInternalRefListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewTail;
    }
}


export class ViewQueryBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0) as QueryExpressionWithOptLockingClausesContext;
    }
    public viewCheckOption(): ViewCheckOptionContext {
        return this.getRuleContext(MySQLParser.RULE_viewCheckOption, 0) as ViewCheckOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewQueryBlock;
    }
}


export class ViewCheckOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewCheckOption;
    }
}


export class AlterInstanceStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public TLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TLS_SYMBOL, 0);
    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier) as Vector<IdentifierContext>;
    }
    public identifier(i: number): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, i) as IdentifierContext;
    }
    public KEYRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYRING_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterInstanceStatement;
    }
}


export class CreateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public createDatabase(): CreateDatabaseContext {
        return this.getRuleContext(MySQLParser.RULE_createDatabase, 0) as CreateDatabaseContext;
    }
    public createTable(): CreateTableContext {
        return this.getRuleContext(MySQLParser.RULE_createTable, 0) as CreateTableContext;
    }
    public createFunction(): CreateFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_createFunction, 0) as CreateFunctionContext;
    }
    public createProcedure(): CreateProcedureContext {
        return this.getRuleContext(MySQLParser.RULE_createProcedure, 0) as CreateProcedureContext;
    }
    public createUdf(): CreateUdfContext {
        return this.getRuleContext(MySQLParser.RULE_createUdf, 0) as CreateUdfContext;
    }
    public createLogfileGroup(): CreateLogfileGroupContext {
        return this.getRuleContext(MySQLParser.RULE_createLogfileGroup, 0) as CreateLogfileGroupContext;
    }
    public createView(): CreateViewContext {
        return this.getRuleContext(MySQLParser.RULE_createView, 0) as CreateViewContext;
    }
    public createTrigger(): CreateTriggerContext {
        return this.getRuleContext(MySQLParser.RULE_createTrigger, 0) as CreateTriggerContext;
    }
    public createIndex(): CreateIndexContext {
        return this.getRuleContext(MySQLParser.RULE_createIndex, 0) as CreateIndexContext;
    }
    public createServer(): CreateServerContext {
        return this.getRuleContext(MySQLParser.RULE_createServer, 0) as CreateServerContext;
    }
    public createTablespace(): CreateTablespaceContext {
        return this.getRuleContext(MySQLParser.RULE_createTablespace, 0) as CreateTablespaceContext;
    }
    public createEvent(): CreateEventContext {
        return this.getRuleContext(MySQLParser.RULE_createEvent, 0) as CreateEventContext;
    }
    public createRole(): CreateRoleContext {
        return this.getRuleContext(MySQLParser.RULE_createRole, 0) as CreateRoleContext;
    }
    public createSpatialReference(): CreateSpatialReferenceContext {
        return this.getRuleContext(MySQLParser.RULE_createSpatialReference, 0) as CreateSpatialReferenceContext;
    }
    public createUndoTablespace(): CreateUndoTablespaceContext {
        return this.getRuleContext(MySQLParser.RULE_createUndoTablespace, 0) as CreateUndoTablespaceContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createStatement;
    }
}


export class CreateDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaName(): SchemaNameContext {
        return this.getRuleContext(MySQLParser.RULE_schemaName, 0) as SchemaNameContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public createDatabaseOption_list(): Vector<CreateDatabaseOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createDatabaseOption) as Vector<CreateDatabaseOptionContext>;
    }
    public createDatabaseOption(i: number): CreateDatabaseOptionContext {
        return this.getRuleContext(MySQLParser.RULE_createDatabaseOption, i) as CreateDatabaseOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createDatabase;
    }
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public defaultCharset(): DefaultCharsetContext {
        return this.getRuleContext(MySQLParser.RULE_defaultCharset, 0) as DefaultCharsetContext;
    }
    public defaultCollation(): DefaultCollationContext {
        return this.getRuleContext(MySQLParser.RULE_defaultCollation, 0) as DefaultCollationContext;
    }
    public defaultEncryption(): DefaultEncryptionContext {
        return this.getRuleContext(MySQLParser.RULE_defaultEncryption, 0) as DefaultEncryptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createDatabaseOption;
    }
}


export class CreateTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0) as TableNameContext;
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public tableElementList(): TableElementListContext {
        return this.getRuleContext(MySQLParser.RULE_tableElementList, 0) as TableElementListContext;
    }
    public createTableOptionsEtc(): CreateTableOptionsEtcContext {
        return this.getRuleContext(MySQLParser.RULE_createTableOptionsEtc, 0) as CreateTableOptionsEtcContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTable;
    }
}


export class TableElementListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableElement_list(): Vector<TableElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableElement) as Vector<TableElementContext>;
    }
    public tableElement(i: number): TableElementContext {
        return this.getRuleContext(MySQLParser.RULE_tableElement, i) as TableElementContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableElementList;
    }
}


export class TableElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_columnDefinition, 0) as ColumnDefinitionContext;
    }
    public tableConstraintDef(): TableConstraintDefContext {
        return this.getRuleContext(MySQLParser.RULE_tableConstraintDef, 0) as TableConstraintDefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableElement;
    }
}


export class DuplicateAsQeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public asCreateQueryExpression(): AsCreateQueryExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_asCreateQueryExpression, 0) as AsCreateQueryExpressionContext;
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_duplicateAsQe;
    }
}


export class AsCreateQueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0) as QueryExpressionWithOptLockingClausesContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_asCreateQueryExpression;
    }
}


export class QueryExpressionOrParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryExpression(): QueryExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0) as QueryExpressionContext;
    }
    public lockingClauseList(): LockingClauseListContext {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0) as LockingClauseListContext;
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0) as QueryExpressionParensContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionOrParens;
    }
}


export class QueryExpressionWithOptLockingClausesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryExpression(): QueryExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0) as QueryExpressionContext;
    }
    public lockingClauseList(): LockingClauseListContext {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0) as LockingClauseListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionWithOptLockingClauses;
    }
}


export class CreateRoutineContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public createProcedure(): CreateProcedureContext {
        return this.getRuleContext(MySQLParser.RULE_createProcedure, 0) as CreateProcedureContext;
    }
    public createFunction(): CreateFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_createFunction, 0) as CreateFunctionContext;
    }
    public createUdf(): CreateUdfContext {
        return this.getRuleContext(MySQLParser.RULE_createUdf, 0) as CreateUdfContext;
    }
    public SEMICOLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createRoutine;
    }
}


export class CreateProcedureContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureName(): ProcedureNameContext {
        return this.getRuleContext(MySQLParser.RULE_procedureName, 0) as ProcedureNameContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0) as CompoundStatementContext;
    }
    public definerClause(): DefinerClauseContext {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0) as DefinerClauseContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public procedureParameter_list(): Vector<ProcedureParameterContext> {
        return this.getRuleContexts(MySQLParser.RULE_procedureParameter) as Vector<ProcedureParameterContext>;
    }
    public procedureParameter(i: number): ProcedureParameterContext {
        return this.getRuleContext(MySQLParser.RULE_procedureParameter, i) as ProcedureParameterContext;
    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption) as Vector<RoutineCreateOptionContext>;
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i) as RoutineCreateOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createProcedure;
    }
}


export class CreateFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(MySQLParser.RULE_functionName, 0) as FunctionNameContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public typeWithOptCollate(): TypeWithOptCollateContext {
        return this.getRuleContext(MySQLParser.RULE_typeWithOptCollate, 0) as TypeWithOptCollateContext;
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0) as CompoundStatementContext;
    }
    public definerClause(): DefinerClauseContext {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0) as DefinerClauseContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public functionParameter_list(): Vector<FunctionParameterContext> {
        return this.getRuleContexts(MySQLParser.RULE_functionParameter) as Vector<FunctionParameterContext>;
    }
    public functionParameter(i: number): FunctionParameterContext {
        return this.getRuleContext(MySQLParser.RULE_functionParameter, i) as FunctionParameterContext;
    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption) as Vector<RoutineCreateOptionContext>;
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i) as RoutineCreateOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createFunction;
    }
}


export class CreateUdfContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public udfName(): UdfNameContext {
        return this.getRuleContext(MySQLParser.RULE_udfName, 0) as UdfNameContext;
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUdf;
    }
}


export class RoutineCreateOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public routineOption(): RoutineOptionContext {
        return this.getRuleContext(MySQLParser.RULE_routineOption, 0) as RoutineOptionContext;
    }
    public DETERMINISTIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineCreateOption;
    }
}


export class RoutineAlterOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public routineCreateOption_list(): Vector<RoutineCreateOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_routineCreateOption) as Vector<RoutineCreateOptionContext>;
    }
    public routineCreateOption(i: number): RoutineCreateOptionContext {
        return this.getRuleContext(MySQLParser.RULE_routineCreateOption, i) as RoutineCreateOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineAlterOptions;
    }
}


export class RoutineOptionContext extends ParserRuleContext {
    public _option!: Token;
    public _security!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public SQL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public READS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READS_SYMBOL, 0);
    }
    public MODIFIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFIES_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_routineOption;
    }
}


export class CreateIndexContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public createIndexTarget(): CreateIndexTargetContext {
        return this.getRuleContext(MySQLParser.RULE_createIndexTarget, 0) as CreateIndexTargetContext;
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public indexName(): IndexNameContext {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0) as IndexNameContext;
    }
    public onlineOption(): OnlineOptionContext {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0) as OnlineOptionContext;
    }
    public FULLTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
        return this.getRuleContext(MySQLParser.RULE_indexLockAndAlgorithm, 0) as IndexLockAndAlgorithmContext;
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public indexOption_list(): Vector<IndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexOption) as Vector<IndexOptionContext>;
    }
    public indexOption(i: number): IndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_indexOption, i) as IndexOptionContext;
    }
    public fulltextIndexOption_list(): Vector<FulltextIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_fulltextIndexOption) as Vector<FulltextIndexOptionContext>;
    }
    public fulltextIndexOption(i: number): FulltextIndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_fulltextIndexOption, i) as FulltextIndexOptionContext;
    }
    public spatialIndexOption_list(): Vector<SpatialIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_spatialIndexOption) as Vector<SpatialIndexOptionContext>;
    }
    public spatialIndexOption(i: number): SpatialIndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_spatialIndexOption, i) as SpatialIndexOptionContext;
    }
    public indexTypeClause(): IndexTypeClauseContext {
        return this.getRuleContext(MySQLParser.RULE_indexTypeClause, 0) as IndexTypeClauseContext;
    }
    public indexNameAndType(): IndexNameAndTypeContext {
        return this.getRuleContext(MySQLParser.RULE_indexNameAndType, 0) as IndexNameAndTypeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createIndex;
    }
}


export class IndexNameAndTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public indexName(): IndexNameContext {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0) as IndexNameContext;
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public indexType(): IndexTypeContext {
        return this.getRuleContext(MySQLParser.RULE_indexType, 0) as IndexTypeContext;
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexNameAndType;
    }
}


export class CreateIndexTargetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public keyListVariants(): KeyListVariantsContext {
        return this.getRuleContext(MySQLParser.RULE_keyListVariants, 0) as KeyListVariantsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createIndexTarget;
    }
}


export class CreateLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupName(): LogfileGroupNameContext {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupName, 0) as LogfileGroupNameContext;
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public logfileGroupOptions(): LogfileGroupOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupOptions, 0) as LogfileGroupOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createLogfileGroup;
    }
}


export class LogfileGroupOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public logfileGroupOption_list(): Vector<LogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_logfileGroupOption) as Vector<LogfileGroupOptionContext>;
    }
    public logfileGroupOption(i: number): LogfileGroupOptionContext {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupOption, i) as LogfileGroupOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupOptions;
    }
}


export class LogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0) as TsOptionInitialSizeContext;
    }
    public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionUndoRedoBufferSize, 0) as TsOptionUndoRedoBufferSizeContext;
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionNodegroup, 0) as TsOptionNodegroupContext;
    }
    public tsOptionEngine(): TsOptionEngineContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0) as TsOptionEngineContext;
    }
    public tsOptionWait(): TsOptionWaitContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0) as TsOptionWaitContext;
    }
    public tsOptionComment(): TsOptionCommentContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionComment, 0) as TsOptionCommentContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupOption;
    }
}


export class CreateServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverName(): ServerNameContext {
        return this.getRuleContext(MySQLParser.RULE_serverName, 0) as ServerNameContext;
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public serverOptions(): ServerOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_serverOptions, 0) as ServerOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createServer;
    }
}


export class ServerOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public serverOption_list(): Vector<ServerOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_serverOption) as Vector<ServerOptionContext>;
    }
    public serverOption(i: number): ServerOptionContext {
        return this.getRuleContext(MySQLParser.RULE_serverOption, i) as ServerOptionContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverOptions;
    }
}


export class ServerOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverOption;
    }
}


export class CreateTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceName(): TablespaceNameContext {
        return this.getRuleContext(MySQLParser.RULE_tablespaceName, 0) as TablespaceNameContext;
    }
    public tsDataFileName(): TsDataFileNameContext {
        return this.getRuleContext(MySQLParser.RULE_tsDataFileName, 0) as TsDataFileNameContext;
    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0) as LogfileGroupRefContext;
    }
    public tablespaceOptions(): TablespaceOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_tablespaceOptions, 0) as TablespaceOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTablespace;
    }
}


export class CreateUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceName(): TablespaceNameContext {
        return this.getRuleContext(MySQLParser.RULE_tablespaceName, 0) as TablespaceNameContext;
    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public tsDataFile(): TsDataFileContext {
        return this.getRuleContext(MySQLParser.RULE_tsDataFile, 0) as TsDataFileContext;
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0) as UndoTableSpaceOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUndoTablespace;
    }
}


export class TsDataFileNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, 0);
    }
    public tsDataFile(): TsDataFileContext {
        return this.getRuleContext(MySQLParser.RULE_tsDataFile, 0) as TsDataFileContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsDataFileName;
    }
}


export class TsDataFileContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsDataFile;
    }
}


export class TablespaceOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tablespaceOption_list(): Vector<TablespaceOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_tablespaceOption) as Vector<TablespaceOptionContext>;
    }
    public tablespaceOption(i: number): TablespaceOptionContext {
        return this.getRuleContext(MySQLParser.RULE_tablespaceOption, i) as TablespaceOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceOptions;
    }
}


export class TablespaceOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tsOptionInitialSize(): TsOptionInitialSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionInitialSize, 0) as TsOptionInitialSizeContext;
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0) as TsOptionAutoextendSizeContext;
    }
    public tsOptionMaxSize(): TsOptionMaxSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionMaxSize, 0) as TsOptionMaxSizeContext;
    }
    public tsOptionExtentSize(): TsOptionExtentSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionExtentSize, 0) as TsOptionExtentSizeContext;
    }
    public tsOptionNodegroup(): TsOptionNodegroupContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionNodegroup, 0) as TsOptionNodegroupContext;
    }
    public tsOptionEngine(): TsOptionEngineContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0) as TsOptionEngineContext;
    }
    public tsOptionWait(): TsOptionWaitContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0) as TsOptionWaitContext;
    }
    public tsOptionComment(): TsOptionCommentContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionComment, 0) as TsOptionCommentContext;
    }
    public tsOptionFileblockSize(): TsOptionFileblockSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionFileblockSize, 0) as TsOptionFileblockSizeContext;
    }
    public tsOptionEncryption(): TsOptionEncryptionContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEncryption, 0) as TsOptionEncryptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceOption;
    }
}


export class TsOptionInitialSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0) as SizeNumberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionInitialSize;
    }
}


export class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0) as SizeNumberContext;
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionUndoRedoBufferSize;
    }
}


export class TsOptionAutoextendSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0) as SizeNumberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionAutoextendSize;
    }
}


export class TsOptionMaxSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0) as SizeNumberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionMaxSize;
    }
}


export class TsOptionExtentSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0) as SizeNumberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionExtentSize;
    }
}


export class TsOptionNodegroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionNodegroup;
    }
}


export class TsOptionEngineContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineRef(): EngineRefContext {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0) as EngineRefContext;
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEngine;
    }
}


export class TsOptionWaitContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionWait;
    }
}


export class TsOptionCommentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionComment;
    }
}


export class TsOptionFileblockSizeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public sizeNumber(): SizeNumberContext {
        return this.getRuleContext(MySQLParser.RULE_sizeNumber, 0) as SizeNumberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionFileblockSize;
    }
}


export class TsOptionEncryptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEncryption;
    }
}


export class TsOptionEngineAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0) as JsonAttributeContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tsOptionEngineAttribute;
    }
}


export class CreateViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(MySQLParser.RULE_viewName, 0) as ViewNameContext;
    }
    public viewTail(): ViewTailContext {
        return this.getRuleContext(MySQLParser.RULE_viewTail, 0) as ViewTailContext;
    }
    public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext {
        return this.getRuleContext(MySQLParser.RULE_viewReplaceOrAlgorithm, 0) as ViewReplaceOrAlgorithmContext;
    }
    public definerClause(): DefinerClauseContext {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0) as DefinerClauseContext;
    }
    public viewSuid(): ViewSuidContext {
        return this.getRuleContext(MySQLParser.RULE_viewSuid, 0) as ViewSuidContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createView;
    }
}


export class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public viewAlgorithm(): ViewAlgorithmContext {
        return this.getRuleContext(MySQLParser.RULE_viewAlgorithm, 0) as ViewAlgorithmContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewReplaceOrAlgorithm;
    }
}


export class ViewAlgorithmContext extends ParserRuleContext {
    public _algorithm!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewAlgorithm;
    }
}


export class ViewSuidContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SQL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewSuid;
    }
}


export class CreateTriggerContext extends ParserRuleContext {
    public _timing!: Token;
    public _event!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerName(): TriggerNameContext {
        return this.getRuleContext(MySQLParser.RULE_triggerName, 0) as TriggerNameContext;
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public EACH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EACH_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0) as CompoundStatementContext;
    }
    public BEFORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public definerClause(): DefinerClauseContext {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0) as DefinerClauseContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext {
        return this.getRuleContext(MySQLParser.RULE_triggerFollowsPrecedesClause, 0) as TriggerFollowsPrecedesClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTrigger;
    }
}


export class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
    public _ordering!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerFollowsPrecedesClause;
    }
}


export class CreateEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventName(): EventNameContext {
        return this.getRuleContext(MySQLParser.RULE_eventName, 0) as EventNameContext;
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public schedule(): ScheduleContext {
        return this.getRuleContext(MySQLParser.RULE_schedule, 0) as ScheduleContext;
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0) as CompoundStatementContext;
    }
    public definerClause(): DefinerClauseContext {
        return this.getRuleContext(MySQLParser.RULE_definerClause, 0) as DefinerClauseContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(MySQLParser.RULE_replica, 0) as ReplicaContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createEvent;
    }
}


export class CreateRoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0) as RoleListContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createRole;
    }
}


export class CreateSpatialReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0) as Real_ulonglong_numberContext;
    }
    public srsAttribute_list(): Vector<SrsAttributeContext> {
        return this.getRuleContexts(MySQLParser.RULE_srsAttribute) as Vector<SrsAttributeContext>;
    }
    public srsAttribute(i: number): SrsAttributeContext {
        return this.getRuleContext(MySQLParser.RULE_srsAttribute, i) as SrsAttributeContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createSpatialReference;
    }
}


export class SrsAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public DEFINITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0) as Real_ulonglong_numberContext;
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_srsAttribute;
    }
}


export class DropStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public dropDatabase(): DropDatabaseContext {
        return this.getRuleContext(MySQLParser.RULE_dropDatabase, 0) as DropDatabaseContext;
    }
    public dropEvent(): DropEventContext {
        return this.getRuleContext(MySQLParser.RULE_dropEvent, 0) as DropEventContext;
    }
    public dropFunction(): DropFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_dropFunction, 0) as DropFunctionContext;
    }
    public dropProcedure(): DropProcedureContext {
        return this.getRuleContext(MySQLParser.RULE_dropProcedure, 0) as DropProcedureContext;
    }
    public dropIndex(): DropIndexContext {
        return this.getRuleContext(MySQLParser.RULE_dropIndex, 0) as DropIndexContext;
    }
    public dropLogfileGroup(): DropLogfileGroupContext {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroup, 0) as DropLogfileGroupContext;
    }
    public dropServer(): DropServerContext {
        return this.getRuleContext(MySQLParser.RULE_dropServer, 0) as DropServerContext;
    }
    public dropTable(): DropTableContext {
        return this.getRuleContext(MySQLParser.RULE_dropTable, 0) as DropTableContext;
    }
    public dropTableSpace(): DropTableSpaceContext {
        return this.getRuleContext(MySQLParser.RULE_dropTableSpace, 0) as DropTableSpaceContext;
    }
    public dropTrigger(): DropTriggerContext {
        return this.getRuleContext(MySQLParser.RULE_dropTrigger, 0) as DropTriggerContext;
    }
    public dropView(): DropViewContext {
        return this.getRuleContext(MySQLParser.RULE_dropView, 0) as DropViewContext;
    }
    public dropRole(): DropRoleContext {
        return this.getRuleContext(MySQLParser.RULE_dropRole, 0) as DropRoleContext;
    }
    public dropSpatialReference(): DropSpatialReferenceContext {
        return this.getRuleContext(MySQLParser.RULE_dropSpatialReference, 0) as DropSpatialReferenceContext;
    }
    public dropUndoTablespace(): DropUndoTablespaceContext {
        return this.getRuleContext(MySQLParser.RULE_dropUndoTablespace, 0) as DropUndoTablespaceContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropStatement;
    }
}


export class DropDatabaseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0) as SchemaRefContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropDatabase;
    }
}


export class DropEventContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0) as EventRefContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropEvent;
    }
}


export class DropFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0) as FunctionRefContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropFunction;
    }
}


export class DropProcedureContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0) as ProcedureRefContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropProcedure;
    }
}


export class DropIndexContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public indexRef(): IndexRefContext {
        return this.getRuleContext(MySQLParser.RULE_indexRef, 0) as IndexRefContext;
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public onlineOption(): OnlineOptionContext {
        return this.getRuleContext(MySQLParser.RULE_onlineOption, 0) as OnlineOptionContext;
    }
    public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
        return this.getRuleContext(MySQLParser.RULE_indexLockAndAlgorithm, 0) as IndexLockAndAlgorithmContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropIndex;
    }
}


export class DropLogfileGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public logfileGroupRef(): LogfileGroupRefContext {
        return this.getRuleContext(MySQLParser.RULE_logfileGroupRef, 0) as LogfileGroupRefContext;
    }
    public dropLogfileGroupOption_list(): Vector<DropLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_dropLogfileGroupOption) as Vector<DropLogfileGroupOptionContext>;
    }
    public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroupOption, i) as DropLogfileGroupOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropLogfileGroup;
    }
}


export class DropLogfileGroupOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tsOptionWait(): TsOptionWaitContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionWait, 0) as TsOptionWaitContext;
    }
    public tsOptionEngine(): TsOptionEngineContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionEngine, 0) as TsOptionEngineContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropLogfileGroupOption;
    }
}


export class DropServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public serverRef(): ServerRefContext {
        return this.getRuleContext(MySQLParser.RULE_serverRef, 0) as ServerRefContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropServer;
    }
}


export class DropTableContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRefList(): TableRefListContext {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0) as TableRefListContext;
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTable;
    }
}


export class DropTableSpaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0) as TablespaceRefContext;
    }
    public dropLogfileGroupOption_list(): Vector<DropLogfileGroupOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_dropLogfileGroupOption) as Vector<DropLogfileGroupOptionContext>;
    }
    public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext {
        return this.getRuleContext(MySQLParser.RULE_dropLogfileGroupOption, i) as DropLogfileGroupOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTableSpace;
    }
}


export class DropTriggerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerRef(): TriggerRefContext {
        return this.getRuleContext(MySQLParser.RULE_triggerRef, 0) as TriggerRefContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropTrigger;
    }
}


export class DropViewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRefList(): ViewRefListContext {
        return this.getRuleContext(MySQLParser.RULE_viewRefList, 0) as ViewRefListContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropView;
    }
}


export class DropRoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0) as RoleListContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropRole;
    }
}


export class DropSpatialReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0) as Real_ulonglong_numberContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropSpatialReference;
    }
}


export class DropUndoTablespaceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public tablespaceRef(): TablespaceRefContext {
        return this.getRuleContext(MySQLParser.RULE_tablespaceRef, 0) as TablespaceRefContext;
    }
    public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_undoTableSpaceOptions, 0) as UndoTableSpaceOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropUndoTablespace;
    }
}


export class RenameTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public renamePair_list(): Vector<RenamePairContext> {
        return this.getRuleContexts(MySQLParser.RULE_renamePair) as Vector<RenamePairContext>;
    }
    public renamePair(i: number): RenamePairContext {
        return this.getRuleContext(MySQLParser.RULE_renamePair, i) as RenamePairContext;
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renameTableStatement;
    }
}


export class RenamePairContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(MySQLParser.RULE_tableName, 0) as TableNameContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renamePair;
    }
}


export class TruncateTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_truncateTableStatement;
    }
}


export class ImportStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public textStringLiteralList(): TextStringLiteralListContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteralList, 0) as TextStringLiteralListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_importStatement;
    }
}


export class CallStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CALL_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0) as ProcedureRefContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_callStatement;
    }
}


export class DeleteStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public tableAliasRefList(): TableAliasRefListContext {
        return this.getRuleContext(MySQLParser.RULE_tableAliasRefList, 0) as TableAliasRefListContext;
    }
    public tableReferenceList(): TableReferenceListContext {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0) as TableReferenceListContext;
    }
    public withClause(): WithClauseContext {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0) as WithClauseContext;
    }
    public deleteStatementOption_list(): Vector<DeleteStatementOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_deleteStatementOption) as Vector<DeleteStatementOptionContext>;
    }
    public deleteStatementOption(i: number): DeleteStatementOptionContext {
        return this.getRuleContext(MySQLParser.RULE_deleteStatementOption, i) as DeleteStatementOptionContext;
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0) as WhereClauseContext;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0) as TableAliasContext;
    }
    public partitionDelete(): PartitionDeleteContext {
        return this.getRuleContext(MySQLParser.RULE_partitionDelete, 0) as PartitionDeleteContext;
    }
    public orderClause(): OrderClauseContext {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0) as OrderClauseContext;
    }
    public simpleLimitClause(): SimpleLimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_simpleLimitClause, 0) as SimpleLimitClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteStatement;
    }
}


export class PartitionDeleteContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDelete;
    }
}


export class DeleteStatementOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteStatementOption;
    }
}


export class DoStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public selectItemList(): SelectItemListContext {
        return this.getRuleContext(MySQLParser.RULE_selectItemList, 0) as SelectItemListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_doStatement;
    }
}


export class HandlerStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public handlerReadOrScan(): HandlerReadOrScanContext {
        return this.getRuleContext(MySQLParser.RULE_handlerReadOrScan, 0) as HandlerReadOrScanContext;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0) as TableAliasContext;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0) as WhereClauseContext;
    }
    public limitClause(): LimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0) as LimitClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerStatement;
    }
}


export class HandlerReadOrScanContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public values(): ValuesContext {
        return this.getRuleContext(MySQLParser.RULE_values, 0) as ValuesContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public LESS_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
    }
    public GREATER_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
    }
    public LESS_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
    }
    public GREATER_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerReadOrScan;
    }
}


export class InsertStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public insertFromConstructor(): InsertFromConstructorContext {
        return this.getRuleContext(MySQLParser.RULE_insertFromConstructor, 0) as InsertFromConstructorContext;
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0) as UpdateListContext;
    }
    public insertQueryExpression(): InsertQueryExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_insertQueryExpression, 0) as InsertQueryExpressionContext;
    }
    public insertLockOption(): InsertLockOptionContext {
        return this.getRuleContext(MySQLParser.RULE_insertLockOption, 0) as InsertLockOptionContext;
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0) as UsePartitionContext;
    }
    public insertUpdateList(): InsertUpdateListContext {
        return this.getRuleContext(MySQLParser.RULE_insertUpdateList, 0) as InsertUpdateListContext;
    }
    public valuesReference(): ValuesReferenceContext {
        return this.getRuleContext(MySQLParser.RULE_valuesReference, 0) as ValuesReferenceContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertStatement;
    }
}


export class InsertLockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public DELAYED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
    }
    public HIGH_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertLockOption;
    }
}


export class InsertFromConstructorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public insertValues(): InsertValuesContext {
        return this.getRuleContext(MySQLParser.RULE_insertValues, 0) as InsertValuesContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fields(): FieldsContext {
        return this.getRuleContext(MySQLParser.RULE_fields, 0) as FieldsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertFromConstructor;
    }
}


export class FieldsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public insertIdentifier_list(): Vector<InsertIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_insertIdentifier) as Vector<InsertIdentifierContext>;
    }
    public insertIdentifier(i: number): InsertIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_insertIdentifier, i) as InsertIdentifierContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fields;
    }
}


export class InsertValuesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public valueList(): ValueListContext {
        return this.getRuleContext(MySQLParser.RULE_valueList, 0) as ValueListContext;
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertValues;
    }
}


export class InsertQueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryExpressionOrParens(): QueryExpressionOrParensContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionOrParens, 0) as QueryExpressionOrParensContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0) as QueryExpressionWithOptLockingClausesContext;
    }
    public fields(): FieldsContext {
        return this.getRuleContext(MySQLParser.RULE_fields, 0) as FieldsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertQueryExpression;
    }
}


export class ValueListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.OPEN_PAR_SYMBOL);
    }
    public OPEN_PAR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
    }
    public CLOSE_PAR_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.CLOSE_PAR_SYMBOL);
    }
    public CLOSE_PAR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
    }
    public values_list(): Vector<ValuesContext> {
        return this.getRuleContexts(MySQLParser.RULE_values) as Vector<ValuesContext>;
    }
    public values(i: number): ValuesContext {
        return this.getRuleContext(MySQLParser.RULE_values, i) as ValuesContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_valueList;
    }
}


export class ValuesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public DEFAULT_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.DEFAULT_SYMBOL);
    }
    public DEFAULT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_values;
    }
}


export class ValuesReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public columnInternalRefList(): ColumnInternalRefListContext {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0) as ColumnInternalRefListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_valuesReference;
    }
}


export class InsertUpdateListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public updateList(): UpdateListContext {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0) as UpdateListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertUpdateList;
    }
}


export class LoadStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public dataOrXml(): DataOrXmlContext {
        return this.getRuleContext(MySQLParser.RULE_dataOrXml, 0) as DataOrXmlContext;
    }
    public INFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INFILE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public loadDataFileTail(): LoadDataFileTailContext {
        return this.getRuleContext(MySQLParser.RULE_loadDataFileTail, 0) as LoadDataFileTailContext;
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0) as UsePartitionContext;
    }
    public charsetClause(): CharsetClauseContext {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0) as CharsetClauseContext;
    }
    public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext {
        return this.getRuleContext(MySQLParser.RULE_xmlRowsIdentifiedBy, 0) as XmlRowsIdentifiedByContext;
    }
    public fieldsClause(): FieldsClauseContext {
        return this.getRuleContext(MySQLParser.RULE_fieldsClause, 0) as FieldsClauseContext;
    }
    public linesClause(): LinesClauseContext {
        return this.getRuleContext(MySQLParser.RULE_linesClause, 0) as LinesClauseContext;
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadStatement;
    }
}


export class DataOrXmlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataOrXml;
    }
}


export class XmlRowsIdentifiedByContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xmlRowsIdentifiedBy;
    }
}


export class LoadDataFileTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public loadDataFileTargetList(): LoadDataFileTargetListContext {
        return this.getRuleContext(MySQLParser.RULE_loadDataFileTargetList, 0) as LoadDataFileTargetListContext;
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0) as UpdateListContext;
    }
    public LINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINES_SYMBOL, 0);
    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadDataFileTail;
    }
}


export class LoadDataFileTargetListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fieldOrVariableList(): FieldOrVariableListContext {
        return this.getRuleContext(MySQLParser.RULE_fieldOrVariableList, 0) as FieldOrVariableListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loadDataFileTargetList;
    }
}


export class FieldOrVariableListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public columnRef_list(): Vector<ColumnRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnRef) as Vector<ColumnRefContext>;
    }
    public columnRef(i: number): ColumnRefContext {
        return this.getRuleContext(MySQLParser.RULE_columnRef, i) as ColumnRefContext;
    }
    public AT_SIGN_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.AT_SIGN_SYMBOL);
    }
    public AT_SIGN_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, i);
    }
    public textOrIdentifier_list(): Vector<TextOrIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_textOrIdentifier) as Vector<TextOrIdentifierContext>;
    }
    public textOrIdentifier(i: number): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, i) as TextOrIdentifierContext;
    }
    public AT_AT_SIGN_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.AT_AT_SIGN_SYMBOL);
    }
    public AT_AT_SIGN_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public AT_TEXT_SUFFIX_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.AT_TEXT_SUFFIX);
    }
    public AT_TEXT_SUFFIX(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldOrVariableList;
    }
}


export class ReplaceStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public insertFromConstructor(): InsertFromConstructorContext {
        return this.getRuleContext(MySQLParser.RULE_insertFromConstructor, 0) as InsertFromConstructorContext;
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0) as UpdateListContext;
    }
    public insertQueryExpression(): InsertQueryExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_insertQueryExpression, 0) as InsertQueryExpressionContext;
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public usePartition(): UsePartitionContext {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0) as UsePartitionContext;
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public DELAYED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replaceStatement;
    }
}


export class SelectStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryExpression(): QueryExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0) as QueryExpressionContext;
    }
    public lockingClauseList(): LockingClauseListContext {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0) as LockingClauseListContext;
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext {
        return this.getRuleContext(MySQLParser.RULE_selectStatementWithInto, 0) as SelectStatementWithIntoContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectStatement;
    }
}


export class SelectStatementWithIntoContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public selectStatementWithInto(): SelectStatementWithIntoContext {
        return this.getRuleContext(MySQLParser.RULE_selectStatementWithInto, 0) as SelectStatementWithIntoContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public queryExpression(): QueryExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpression, 0) as QueryExpressionContext;
    }
    public intoClause(): IntoClauseContext {
        return this.getRuleContext(MySQLParser.RULE_intoClause, 0) as IntoClauseContext;
    }
    public lockingClauseList(): LockingClauseListContext {
        return this.getRuleContext(MySQLParser.RULE_lockingClauseList, 0) as LockingClauseListContext;
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0) as QueryExpressionParensContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectStatementWithInto;
    }
}


export class QueryExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryExpressionBody(): QueryExpressionBodyContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionBody, 0) as QueryExpressionBodyContext;
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0) as QueryExpressionParensContext;
    }
    public withClause(): WithClauseContext {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0) as WithClauseContext;
    }
    public orderClause(): OrderClauseContext {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0) as OrderClauseContext;
    }
    public limitClause(): LimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0) as LimitClauseContext;
    }
    public queryExpressionBodyNew(): QueryExpressionBodyNewContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionBodyNew, 0) as QueryExpressionBodyNewContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpression;
    }
}


export class QueryExpressionBodyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryPrimary_list(): Vector<QueryPrimaryContext> {
        return this.getRuleContexts(MySQLParser.RULE_queryPrimary) as Vector<QueryPrimaryContext>;
    }
    public queryPrimary(i: number): QueryPrimaryContext {
        return this.getRuleContext(MySQLParser.RULE_queryPrimary, i) as QueryPrimaryContext;
    }
    public queryExpressionParens_list(): Vector<QueryExpressionParensContext> {
        return this.getRuleContexts(MySQLParser.RULE_queryExpressionParens) as Vector<QueryExpressionParensContext>;
    }
    public queryExpressionParens(i: number): QueryExpressionParensContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, i) as QueryExpressionParensContext;
    }
    public UNION_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.UNION_SYMBOL);
    }
    public UNION_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.UNION_SYMBOL, i);
    }
    public unionOption_list(): Vector<UnionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_unionOption) as Vector<UnionOptionContext>;
    }
    public unionOption(i: number): UnionOptionContext {
        return this.getRuleContext(MySQLParser.RULE_unionOption, i) as UnionOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionBody;
    }
}


export class QueryExpressionBodyNewContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryPrimary(): QueryPrimaryContext {
        return this.getRuleContext(MySQLParser.RULE_queryPrimary, 0) as QueryPrimaryContext;
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0) as QueryExpressionParensContext;
    }
    public queryExpressionBody_list(): Vector<QueryExpressionBodyContext> {
        return this.getRuleContexts(MySQLParser.RULE_queryExpressionBody) as Vector<QueryExpressionBodyContext>;
    }
    public queryExpressionBody(i: number): QueryExpressionBodyContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionBody, i) as QueryExpressionBodyContext;
    }
    public UNION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNION_SYMBOL, 0);
    }
    public EXCEPT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
    }
    public INTERSECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERSECT_SYMBOL, 0);
    }
    public unionOption(): UnionOptionContext {
        return this.getRuleContext(MySQLParser.RULE_unionOption, 0) as UnionOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionBodyNew;
    }
}


export class QueryExpressionParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public queryExpressionParens(): QueryExpressionParensContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0) as QueryExpressionParensContext;
    }
    public queryExpressionWithOptLockingClauses(): QueryExpressionWithOptLockingClausesContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionWithOptLockingClauses, 0) as QueryExpressionWithOptLockingClausesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryExpressionParens;
    }
}


export class QueryPrimaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public querySpecification(): QuerySpecificationContext {
        return this.getRuleContext(MySQLParser.RULE_querySpecification, 0) as QuerySpecificationContext;
    }
    public tableValueConstructor(): TableValueConstructorContext {
        return this.getRuleContext(MySQLParser.RULE_tableValueConstructor, 0) as TableValueConstructorContext;
    }
    public explicitTable(): ExplicitTableContext {
        return this.getRuleContext(MySQLParser.RULE_explicitTable, 0) as ExplicitTableContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_queryPrimary;
    }
}


export class QuerySpecificationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SELECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
    }
    public selectItemList(): SelectItemListContext {
        return this.getRuleContext(MySQLParser.RULE_selectItemList, 0) as SelectItemListContext;
    }
    public selectOption_list(): Vector<SelectOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_selectOption) as Vector<SelectOptionContext>;
    }
    public selectOption(i: number): SelectOptionContext {
        return this.getRuleContext(MySQLParser.RULE_selectOption, i) as SelectOptionContext;
    }
    public intoClause(): IntoClauseContext {
        return this.getRuleContext(MySQLParser.RULE_intoClause, 0) as IntoClauseContext;
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(MySQLParser.RULE_fromClause, 0) as FromClauseContext;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0) as WhereClauseContext;
    }
    public groupByClause(): GroupByClauseContext {
        return this.getRuleContext(MySQLParser.RULE_groupByClause, 0) as GroupByClauseContext;
    }
    public havingClause(): HavingClauseContext {
        return this.getRuleContext(MySQLParser.RULE_havingClause, 0) as HavingClauseContext;
    }
    public windowClause(): WindowClauseContext {
        return this.getRuleContext(MySQLParser.RULE_windowClause, 0) as WindowClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_querySpecification;
    }
}


export class SubqueryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public queryExpressionParens(): QueryExpressionParensContext {
        return this.getRuleContext(MySQLParser.RULE_queryExpressionParens, 0) as QueryExpressionParensContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subquery;
    }
}


export class QuerySpecOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public STRAIGHT_JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
    }
    public HIGH_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
    }
    public SQL_SMALL_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0);
    }
    public SQL_BIG_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_CALC_FOUND_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_querySpecOption;
    }
}


export class LimitClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LIMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
    }
    public limitOptions(): LimitOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_limitOptions, 0) as LimitOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitClause;
    }
}


export class SimpleLimitClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LIMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
    }
    public limitOption(): LimitOptionContext {
        return this.getRuleContext(MySQLParser.RULE_limitOption, 0) as LimitOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleLimitClause;
    }
}


export class LimitOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public limitOption_list(): Vector<LimitOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_limitOption) as Vector<LimitOptionContext>;
    }
    public limitOption(i: number): LimitOptionContext {
        return this.getRuleContext(MySQLParser.RULE_limitOption, i) as LimitOptionContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitOptions;
    }
}


export class LimitOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_limitOption;
    }
}


export class IntoClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public OUTFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTFILE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public textOrIdentifier_list(): Vector<TextOrIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_textOrIdentifier) as Vector<TextOrIdentifierContext>;
    }
    public textOrIdentifier(i: number): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, i) as TextOrIdentifierContext;
    }
    public userVariable_list(): Vector<UserVariableContext> {
        return this.getRuleContexts(MySQLParser.RULE_userVariable) as Vector<UserVariableContext>;
    }
    public userVariable(i: number): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, i) as UserVariableContext;
    }
    public charsetClause(): CharsetClauseContext {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0) as CharsetClauseContext;
    }
    public fieldsClause(): FieldsClauseContext {
        return this.getRuleContext(MySQLParser.RULE_fieldsClause, 0) as FieldsClauseContext;
    }
    public linesClause(): LinesClauseContext {
        return this.getRuleContext(MySQLParser.RULE_linesClause, 0) as LinesClauseContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_intoClause;
    }
}


export class ProcedureAnalyseClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureAnalyseClause;
    }
}


export class HavingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public HAVING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HAVING_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_havingClause;
    }
}


export class WindowClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WINDOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WINDOW_SYMBOL, 0);
    }
    public windowDefinition_list(): Vector<WindowDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_windowDefinition) as Vector<WindowDefinitionContext>;
    }
    public windowDefinition(i: number): WindowDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_windowDefinition, i) as WindowDefinitionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowClause;
    }
}


export class WindowDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public windowName(): WindowNameContext {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0) as WindowNameContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public windowSpec(): WindowSpecContext {
        return this.getRuleContext(MySQLParser.RULE_windowSpec, 0) as WindowSpecContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowDefinition;
    }
}


export class WindowSpecContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public windowSpecDetails(): WindowSpecDetailsContext {
        return this.getRuleContext(MySQLParser.RULE_windowSpecDetails, 0) as WindowSpecDetailsContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowSpec;
    }
}


export class WindowSpecDetailsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public windowName(): WindowNameContext {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0) as WindowNameContext;
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0) as OrderListContext;
    }
    public orderClause(): OrderClauseContext {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0) as OrderClauseContext;
    }
    public windowFrameClause(): WindowFrameClauseContext {
        return this.getRuleContext(MySQLParser.RULE_windowFrameClause, 0) as WindowFrameClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowSpecDetails;
    }
}


export class WindowFrameClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public windowFrameUnits(): WindowFrameUnitsContext {
        return this.getRuleContext(MySQLParser.RULE_windowFrameUnits, 0) as WindowFrameUnitsContext;
    }
    public windowFrameExtent(): WindowFrameExtentContext {
        return this.getRuleContext(MySQLParser.RULE_windowFrameExtent, 0) as WindowFrameExtentContext;
    }
    public windowFrameExclusion(): WindowFrameExclusionContext {
        return this.getRuleContext(MySQLParser.RULE_windowFrameExclusion, 0) as WindowFrameExclusionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameClause;
    }
}


export class WindowFrameUnitsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
    }
    public RANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
    }
    public GROUPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUPS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameUnits;
    }
}


export class WindowFrameExtentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public windowFrameStart(): WindowFrameStartContext {
        return this.getRuleContext(MySQLParser.RULE_windowFrameStart, 0) as WindowFrameStartContext;
    }
    public windowFrameBetween(): WindowFrameBetweenContext {
        return this.getRuleContext(MySQLParser.RULE_windowFrameBetween, 0) as WindowFrameBetweenContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameExtent;
    }
}


export class WindowFrameStartContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0) as Ulonglong_numberContext;
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(MySQLParser.RULE_interval, 0) as IntervalContext;
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameStart;
    }
}


export class WindowFrameBetweenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public BETWEEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
    }
    public windowFrameBound_list(): Vector<WindowFrameBoundContext> {
        return this.getRuleContexts(MySQLParser.RULE_windowFrameBound) as Vector<WindowFrameBoundContext>;
    }
    public windowFrameBound(i: number): WindowFrameBoundContext {
        return this.getRuleContext(MySQLParser.RULE_windowFrameBound, i) as WindowFrameBoundContext;
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameBetween;
    }
}


export class WindowFrameBoundContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public windowFrameStart(): WindowFrameStartContext {
        return this.getRuleContext(MySQLParser.RULE_windowFrameStart, 0) as WindowFrameStartContext;
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0) as Ulonglong_numberContext;
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(MySQLParser.RULE_interval, 0) as IntervalContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameBound;
    }
}


export class WindowFrameExclusionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFrameExclusion;
    }
}


export class WithClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public commonTableExpression_list(): Vector<CommonTableExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_commonTableExpression) as Vector<CommonTableExpressionContext>;
    }
    public commonTableExpression(i: number): CommonTableExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_commonTableExpression, i) as CommonTableExpressionContext;
    }
    public RECURSIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECURSIVE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withClause;
    }
}


export class CommonTableExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0) as SubqueryContext;
    }
    public columnInternalRefList(): ColumnInternalRefListContext {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0) as ColumnInternalRefListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_commonTableExpression;
    }
}


export class GroupByClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0) as OrderListContext;
    }
    public olapOption(): OlapOptionContext {
        return this.getRuleContext(MySQLParser.RULE_olapOption, 0) as OlapOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupByClause;
    }
}


export class OlapOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_olapOption;
    }
}


export class OrderClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public orderList(): OrderListContext {
        return this.getRuleContext(MySQLParser.RULE_orderList, 0) as OrderListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderClause;
    }
}


export class DirectionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ASC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASC_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_direction;
    }
}


export class FromClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public DUAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUAL_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0) as TableReferenceListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fromClause;
    }
}


export class TableReferenceListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableReference_list(): Vector<TableReferenceContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableReference) as Vector<TableReferenceContext>;
    }
    public tableReference(i: number): TableReferenceContext {
        return this.getRuleContext(MySQLParser.RULE_tableReference, i) as TableReferenceContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReferenceList;
    }
}


export class TableValueConstructorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public rowValueExplicit_list(): Vector<RowValueExplicitContext> {
        return this.getRuleContexts(MySQLParser.RULE_rowValueExplicit) as Vector<RowValueExplicitContext>;
    }
    public rowValueExplicit(i: number): RowValueExplicitContext {
        return this.getRuleContext(MySQLParser.RULE_rowValueExplicit, i) as RowValueExplicitContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableValueConstructor;
    }
}


export class ExplicitTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explicitTable;
    }
}


export class RowValueExplicitContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public values(): ValuesContext {
        return this.getRuleContext(MySQLParser.RULE_values, 0) as ValuesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rowValueExplicit;
    }
}


export class SelectOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public querySpecOption(): QuerySpecOptionContext {
        return this.getRuleContext(MySQLParser.RULE_querySpecOption, 0) as QuerySpecOptionContext;
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectOption;
    }
}


export class LockingClauseListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public lockingClause_list(): Vector<LockingClauseContext> {
        return this.getRuleContexts(MySQLParser.RULE_lockingClause) as Vector<LockingClauseContext>;
    }
    public lockingClause(i: number): LockingClauseContext {
        return this.getRuleContext(MySQLParser.RULE_lockingClause, i) as LockingClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockingClauseList;
    }
}


export class LockingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public lockStrengh(): LockStrenghContext {
        return this.getRuleContext(MySQLParser.RULE_lockStrengh, 0) as LockStrenghContext;
    }
    public OF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OF_SYMBOL, 0);
    }
    public tableAliasRefList(): TableAliasRefListContext {
        return this.getRuleContext(MySQLParser.RULE_tableAliasRefList, 0) as TableAliasRefListContext;
    }
    public lockedRowAction(): LockedRowActionContext {
        return this.getRuleContext(MySQLParser.RULE_lockedRowAction, 0) as LockedRowActionContext;
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockingClause;
    }
}


export class LockStrenghContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockStrengh;
    }
}


export class LockedRowActionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockedRowAction;
    }
}


export class SelectItemListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public selectItem_list(): Vector<SelectItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_selectItem) as Vector<SelectItemContext>;
    }
    public selectItem(i: number): SelectItemContext {
        return this.getRuleContext(MySQLParser.RULE_selectItem, i) as SelectItemContext;
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectItemList;
    }
}


export class SelectItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableWild(): TableWildContext {
        return this.getRuleContext(MySQLParser.RULE_tableWild, 0) as TableWildContext;
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public selectAlias(): SelectAliasContext {
        return this.getRuleContext(MySQLParser.RULE_selectAlias, 0) as SelectAliasContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectItem;
    }
}


export class SelectAliasContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_selectAlias;
    }
}


export class WhereClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WHERE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WHERE_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whereClause;
    }
}


export class TableReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableFactor(): TableFactorContext {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0) as TableFactorContext;
    }
    public OPEN_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
    }
    public escapedTableReference(): EscapedTableReferenceContext {
        return this.getRuleContext(MySQLParser.RULE_escapedTableReference, 0) as EscapedTableReferenceContext;
    }
    public CLOSE_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
    }
    public joinedTable_list(): Vector<JoinedTableContext> {
        return this.getRuleContexts(MySQLParser.RULE_joinedTable) as Vector<JoinedTableContext>;
    }
    public joinedTable(i: number): JoinedTableContext {
        return this.getRuleContext(MySQLParser.RULE_joinedTable, i) as JoinedTableContext;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public OJ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OJ_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReference;
    }
}


export class EscapedTableReferenceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableFactor(): TableFactorContext {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0) as TableFactorContext;
    }
    public joinedTable_list(): Vector<JoinedTableContext> {
        return this.getRuleContexts(MySQLParser.RULE_joinedTable) as Vector<JoinedTableContext>;
    }
    public joinedTable(i: number): JoinedTableContext {
        return this.getRuleContext(MySQLParser.RULE_joinedTable, i) as JoinedTableContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_escapedTableReference;
    }
}


export class JoinedTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public innerJoinType(): InnerJoinTypeContext {
        return this.getRuleContext(MySQLParser.RULE_innerJoinType, 0) as InnerJoinTypeContext;
    }
    public tableReference(): TableReferenceContext {
        return this.getRuleContext(MySQLParser.RULE_tableReference, 0) as TableReferenceContext;
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0) as IdentifierListWithParenthesesContext;
    }
    public outerJoinType(): OuterJoinTypeContext {
        return this.getRuleContext(MySQLParser.RULE_outerJoinType, 0) as OuterJoinTypeContext;
    }
    public naturalJoinType(): NaturalJoinTypeContext {
        return this.getRuleContext(MySQLParser.RULE_naturalJoinType, 0) as NaturalJoinTypeContext;
    }
    public tableFactor(): TableFactorContext {
        return this.getRuleContext(MySQLParser.RULE_tableFactor, 0) as TableFactorContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_joinedTable;
    }
}


export class NaturalJoinTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NATURAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public INNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INNER_SYMBOL, 0);
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public OUTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_naturalJoinType;
    }
}


export class InnerJoinTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public INNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INNER_SYMBOL, 0);
    }
    public CROSS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CROSS_SYMBOL, 0);
    }
    public STRAIGHT_JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_innerJoinType;
    }
}


export class OuterJoinTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public OUTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_outerJoinType;
    }
}


export class TableFactorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public singleTable(): SingleTableContext {
        return this.getRuleContext(MySQLParser.RULE_singleTable, 0) as SingleTableContext;
    }
    public singleTableParens(): SingleTableParensContext {
        return this.getRuleContext(MySQLParser.RULE_singleTableParens, 0) as SingleTableParensContext;
    }
    public derivedTable(): DerivedTableContext {
        return this.getRuleContext(MySQLParser.RULE_derivedTable, 0) as DerivedTableContext;
    }
    public tableReferenceListParens(): TableReferenceListParensContext {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceListParens, 0) as TableReferenceListParensContext;
    }
    public tableFunction(): TableFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_tableFunction, 0) as TableFunctionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableFactor;
    }
}


export class SingleTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public usePartition(): UsePartitionContext {
        return this.getRuleContext(MySQLParser.RULE_usePartition, 0) as UsePartitionContext;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0) as TableAliasContext;
    }
    public indexHintList(): IndexHintListContext {
        return this.getRuleContext(MySQLParser.RULE_indexHintList, 0) as IndexHintListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_singleTable;
    }
}


export class SingleTableParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public singleTable(): SingleTableContext {
        return this.getRuleContext(MySQLParser.RULE_singleTable, 0) as SingleTableContext;
    }
    public singleTableParens(): SingleTableParensContext {
        return this.getRuleContext(MySQLParser.RULE_singleTableParens, 0) as SingleTableParensContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_singleTableParens;
    }
}


export class DerivedTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0) as SubqueryContext;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0) as TableAliasContext;
    }
    public columnInternalRefList(): ColumnInternalRefListContext {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0) as ColumnInternalRefListContext;
    }
    public LATERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LATERAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_derivedTable;
    }
}


export class TableReferenceListParensContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0) as TableReferenceListContext;
    }
    public tableReferenceListParens(): TableReferenceListParensContext {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceListParens, 0) as TableReferenceListParensContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableReferenceListParens;
    }
}


export class TableFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public JSON_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public columnsClause(): ColumnsClauseContext {
        return this.getRuleContext(MySQLParser.RULE_columnsClause, 0) as ColumnsClauseContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0) as TableAliasContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableFunction;
    }
}


export class ColumnsClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public jtColumn_list(): Vector<JtColumnContext> {
        return this.getRuleContexts(MySQLParser.RULE_jtColumn) as Vector<JtColumnContext>;
    }
    public jtColumn(i: number): JtColumnContext {
        return this.getRuleContext(MySQLParser.RULE_jtColumn, i) as JtColumnContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnsClause;
    }
}


export class JtColumnContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0) as DataTypeContext;
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public collate(): CollateContext {
        return this.getRuleContext(MySQLParser.RULE_collate, 0) as CollateContext;
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public onEmptyOrErrorJsonTable(): OnEmptyOrErrorJsonTableContext {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrErrorJsonTable, 0) as OnEmptyOrErrorJsonTableContext;
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public columnsClause(): ColumnsClauseContext {
        return this.getRuleContext(MySQLParser.RULE_columnsClause, 0) as ColumnsClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jtColumn;
    }
}


export class OnEmptyOrErrorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public onEmpty(): OnEmptyContext {
        return this.getRuleContext(MySQLParser.RULE_onEmpty, 0) as OnEmptyContext;
    }
    public onError(): OnErrorContext {
        return this.getRuleContext(MySQLParser.RULE_onError, 0) as OnErrorContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmptyOrError;
    }
}


export class OnEmptyOrErrorJsonTableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public onEmptyOrError(): OnEmptyOrErrorContext {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrError, 0) as OnEmptyOrErrorContext;
    }
    public onError(): OnErrorContext {
        return this.getRuleContext(MySQLParser.RULE_onError, 0) as OnErrorContext;
    }
    public onEmpty(): OnEmptyContext {
        return this.getRuleContext(MySQLParser.RULE_onEmpty, 0) as OnEmptyContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmptyOrErrorJsonTable;
    }
}


export class OnEmptyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public jsonOnResponse(): JsonOnResponseContext {
        return this.getRuleContext(MySQLParser.RULE_jsonOnResponse, 0) as JsonOnResponseContext;
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public EMPTY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EMPTY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onEmpty;
    }
}


export class OnErrorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public jsonOnResponse(): JsonOnResponseContext {
        return this.getRuleContext(MySQLParser.RULE_jsonOnResponse, 0) as JsonOnResponseContext;
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onError;
    }
}


export class JsonOnResponseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonOnResponse;
    }
}


export class UnionOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unionOption;
    }
}


export class TableAliasContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAlias;
    }
}


export class IndexHintListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public indexHint_list(): Vector<IndexHintContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexHint) as Vector<IndexHintContext>;
    }
    public indexHint(i: number): IndexHintContext {
        return this.getRuleContext(MySQLParser.RULE_indexHint, i) as IndexHintContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintList;
    }
}


export class IndexHintContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public indexHintType(): IndexHintTypeContext {
        return this.getRuleContext(MySQLParser.RULE_indexHintType, 0) as IndexHintTypeContext;
    }
    public keyOrIndex(): KeyOrIndexContext {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0) as KeyOrIndexContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public indexList(): IndexListContext {
        return this.getRuleContext(MySQLParser.RULE_indexList, 0) as IndexListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public indexHintClause(): IndexHintClauseContext {
        return this.getRuleContext(MySQLParser.RULE_indexHintClause, 0) as IndexHintClauseContext;
    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHint;
    }
}


export class IndexHintTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintType;
    }
}


export class KeyOrIndexContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyOrIndex;
    }
}


export class ConstraintKeyTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0) as KeyOrIndexContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintKeyType;
    }
}


export class IndexHintClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public ORDER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexHintClause;
    }
}


export class IndexListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public indexListElement_list(): Vector<IndexListElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexListElement) as Vector<IndexListElementContext>;
    }
    public indexListElement(i: number): IndexListElementContext {
        return this.getRuleContext(MySQLParser.RULE_indexListElement, i) as IndexListElementContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexList;
    }
}


export class IndexListElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexListElement;
    }
}


export class UpdateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public tableReferenceList(): TableReferenceListContext {
        return this.getRuleContext(MySQLParser.RULE_tableReferenceList, 0) as TableReferenceListContext;
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public updateList(): UpdateListContext {
        return this.getRuleContext(MySQLParser.RULE_updateList, 0) as UpdateListContext;
    }
    public withClause(): WithClauseContext {
        return this.getRuleContext(MySQLParser.RULE_withClause, 0) as WithClauseContext;
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0) as WhereClauseContext;
    }
    public orderClause(): OrderClauseContext {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0) as OrderClauseContext;
    }
    public simpleLimitClause(): SimpleLimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_simpleLimitClause, 0) as SimpleLimitClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateStatement;
    }
}


export class TransactionOrLockingStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public transactionStatement(): TransactionStatementContext {
        return this.getRuleContext(MySQLParser.RULE_transactionStatement, 0) as TransactionStatementContext;
    }
    public savepointStatement(): SavepointStatementContext {
        return this.getRuleContext(MySQLParser.RULE_savepointStatement, 0) as SavepointStatementContext;
    }
    public lockStatement(): LockStatementContext {
        return this.getRuleContext(MySQLParser.RULE_lockStatement, 0) as LockStatementContext;
    }
    public xaStatement(): XaStatementContext {
        return this.getRuleContext(MySQLParser.RULE_xaStatement, 0) as XaStatementContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionOrLockingStatement;
    }
}


export class TransactionStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public startTransactionOptionList_list(): Vector<StartTransactionOptionListContext> {
        return this.getRuleContexts(MySQLParser.RULE_startTransactionOptionList) as Vector<StartTransactionOptionListContext>;
    }
    public startTransactionOptionList(i: number): StartTransactionOptionListContext {
        return this.getRuleContext(MySQLParser.RULE_startTransactionOptionList, i) as StartTransactionOptionListContext;
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public RELEASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
    }
    public NO_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.NO_SYMBOL);
    }
    public NO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionStatement;
    }
}


export class BeginWorkContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_beginWork;
    }
}


export class StartTransactionOptionListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startTransactionOptionList;
    }
}


export class SavepointStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public RELEASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
    }
    public NO_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.NO_SYMBOL);
    }
    public NO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_savepointStatement;
    }
}


export class LockStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public lockItem_list(): Vector<LockItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_lockItem) as Vector<LockItemContext>;
    }
    public lockItem(i: number): LockItemContext {
        return this.getRuleContext(MySQLParser.RULE_lockItem, i) as LockItemContext;
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public UNLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockStatement;
    }
}


export class LockItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public lockOption(): LockOptionContext {
        return this.getRuleContext(MySQLParser.RULE_lockOption, 0) as LockOptionContext;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(MySQLParser.RULE_tableAlias, 0) as TableAliasContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockItem;
    }
}


export class LockOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public LOW_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lockOption;
    }
}


export class XaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public xid(): XidContext {
        return this.getRuleContext(MySQLParser.RULE_xid, 0) as XidContext;
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public xaConvert(): XaConvertContext {
        return this.getRuleContext(MySQLParser.RULE_xaConvert, 0) as XaConvertContext;
    }
    public JOIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xaStatement;
    }
}


export class XaConvertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xaConvert;
    }
}


export class XidContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString) as Vector<TextStringContext>;
    }
    public textString(i: number): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, i) as TextStringContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_xid;
    }
}


export class ReplicationStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PURGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PURGE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public BEFORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public changeSource(): ChangeSourceContext {
        return this.getRuleContext(MySQLParser.RULE_changeSource, 0) as ChangeSourceContext;
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public resetOption_list(): Vector<ResetOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_resetOption) as Vector<ResetOptionContext>;
    }
    public resetOption(i: number): ResetOptionContext {
        return this.getRuleContext(MySQLParser.RULE_resetOption, i) as ResetOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public startReplicaStatement(): StartReplicaStatementContext {
        return this.getRuleContext(MySQLParser.RULE_startReplicaStatement, 0) as StartReplicaStatementContext;
    }
    public stopReplicaStatement(): StopReplicaStatementContext {
        return this.getRuleContext(MySQLParser.RULE_stopReplicaStatement, 0) as StopReplicaStatementContext;
    }
    public changeReplication(): ChangeReplicationContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplication, 0) as ChangeReplicationContext;
    }
    public replicationLoad(): ReplicationLoadContext {
        return this.getRuleContext(MySQLParser.RULE_replicationLoad, 0) as ReplicationLoadContext;
    }
    public groupReplication(): GroupReplicationContext {
        return this.getRuleContext(MySQLParser.RULE_groupReplication, 0) as GroupReplicationContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicationStatement;
    }
}


export class ResetOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public sourceResetOptions(): SourceResetOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_sourceResetOptions, 0) as SourceResetOptionsContext;
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(MySQLParser.RULE_replica, 0) as ReplicaContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resetOption;
    }
}


export class SourceResetOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0) as Real_ulonglong_numberContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceResetOptions;
    }
}


export class ReplicationLoadContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicationLoad;
    }
}


export class ChangeReplicationSourceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSource;
    }
}


export class ChangeSourceContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public changeReplicationSource(): ChangeReplicationSourceContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSource, 0) as ChangeReplicationSourceContext;
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public sourceDefinitions(): SourceDefinitionsContext {
        return this.getRuleContext(MySQLParser.RULE_sourceDefinitions, 0) as SourceDefinitionsContext;
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeSource;
    }
}


export class SourceDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public sourceDefinition_list(): Vector<SourceDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_sourceDefinition) as Vector<SourceDefinitionContext>;
    }
    public sourceDefinition(i: number): SourceDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_sourceDefinition, i) as SourceDefinitionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceDefinitions;
    }
}


export class SourceDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public changeReplicationSourceHost(): ChangeReplicationSourceHostContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceHost, 0) as ChangeReplicationSourceHostContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public NETWORK_NAMESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
    }
    public changeReplicationSourceBind(): ChangeReplicationSourceBindContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceBind, 0) as ChangeReplicationSourceBindContext;
    }
    public changeReplicationSourceUser(): ChangeReplicationSourceUserContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceUser, 0) as ChangeReplicationSourceUserContext;
    }
    public changeReplicationSourcePassword(): ChangeReplicationSourcePasswordContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePassword, 0) as ChangeReplicationSourcePasswordContext;
    }
    public changeReplicationSourcePort(): ChangeReplicationSourcePortContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePort, 0) as ChangeReplicationSourcePortContext;
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public changeReplicationSourceConnectRetry(): ChangeReplicationSourceConnectRetryContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceConnectRetry, 0) as ChangeReplicationSourceConnectRetryContext;
    }
    public changeReplicationSourceRetryCount(): ChangeReplicationSourceRetryCountContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceRetryCount, 0) as ChangeReplicationSourceRetryCountContext;
    }
    public changeReplicationSourceDelay(): ChangeReplicationSourceDelayContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceDelay, 0) as ChangeReplicationSourceDelayContext;
    }
    public changeReplicationSourceSSL(): ChangeReplicationSourceSSLContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSL, 0) as ChangeReplicationSourceSSLContext;
    }
    public changeReplicationSourceSSLCA(): ChangeReplicationSourceSSLCAContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCA, 0) as ChangeReplicationSourceSSLCAContext;
    }
    public changeReplicationSourceSSLCApath(): ChangeReplicationSourceSSLCApathContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCApath, 0) as ChangeReplicationSourceSSLCApathContext;
    }
    public changeReplicationSourceTLSVersion(): ChangeReplicationSourceTLSVersionContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceTLSVersion, 0) as ChangeReplicationSourceTLSVersionContext;
    }
    public changeReplicationSourceSSLCert(): ChangeReplicationSourceSSLCertContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCert, 0) as ChangeReplicationSourceSSLCertContext;
    }
    public changeReplicationSourceTLSCiphersuites(): ChangeReplicationSourceTLSCiphersuitesContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceTLSCiphersuites, 0) as ChangeReplicationSourceTLSCiphersuitesContext;
    }
    public sourceTlsCiphersuitesDef(): SourceTlsCiphersuitesDefContext {
        return this.getRuleContext(MySQLParser.RULE_sourceTlsCiphersuitesDef, 0) as SourceTlsCiphersuitesDefContext;
    }
    public changeReplicationSourceSSLCipher(): ChangeReplicationSourceSSLCipherContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCipher, 0) as ChangeReplicationSourceSSLCipherContext;
    }
    public changeReplicationSourceSSLKey(): ChangeReplicationSourceSSLKeyContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLKey, 0) as ChangeReplicationSourceSSLKeyContext;
    }
    public changeReplicationSourceSSLVerifyServerCert(): ChangeReplicationSourceSSLVerifyServerCertContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert, 0) as ChangeReplicationSourceSSLVerifyServerCertContext;
    }
    public changeReplicationSourceSSLCLR(): ChangeReplicationSourceSSLCLRContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCLR, 0) as ChangeReplicationSourceSSLCLRContext;
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public changeReplicationSourceSSLCLRpath(): ChangeReplicationSourceSSLCLRpathContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceSSLCLRpath, 0) as ChangeReplicationSourceSSLCLRpathContext;
    }
    public changeReplicationSourcePublicKey(): ChangeReplicationSourcePublicKeyContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourcePublicKey, 0) as ChangeReplicationSourcePublicKeyContext;
    }
    public changeReplicationSourceGetSourcePublicKey(): ChangeReplicationSourceGetSourcePublicKeyContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey, 0) as ChangeReplicationSourceGetSourcePublicKeyContext;
    }
    public changeReplicationSourceHeartbeatPeriod(): ChangeReplicationSourceHeartbeatPeriodContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod, 0) as ChangeReplicationSourceHeartbeatPeriodContext;
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public serverIdList(): ServerIdListContext {
        return this.getRuleContext(MySQLParser.RULE_serverIdList, 0) as ServerIdListContext;
    }
    public changeReplicationSourceCompressionAlgorithm(): ChangeReplicationSourceCompressionAlgorithmContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm, 0) as ChangeReplicationSourceCompressionAlgorithmContext;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public changeReplicationSourceZstdCompressionLevel(): ChangeReplicationSourceZstdCompressionLevelContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel, 0) as ChangeReplicationSourceZstdCompressionLevelContext;
    }
    public changeReplicationSourceAutoPosition(): ChangeReplicationSourceAutoPositionContext {
        return this.getRuleContext(MySQLParser.RULE_changeReplicationSourceAutoPosition, 0) as ChangeReplicationSourceAutoPositionContext;
    }
    public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
    }
    public privilegeCheckDef(): PrivilegeCheckDefContext {
        return this.getRuleContext(MySQLParser.RULE_privilegeCheckDef, 0) as PrivilegeCheckDefContext;
    }
    public REQUIRE_ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
    }
    public REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
    }
    public tablePrimaryKeyCheckDef(): TablePrimaryKeyCheckDefContext {
        return this.getRuleContext(MySQLParser.RULE_tablePrimaryKeyCheckDef, 0) as TablePrimaryKeyCheckDefContext;
    }
    public SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0);
    }
    public assignGtidsToAnonymousTransactionsDefinition(): AssignGtidsToAnonymousTransactionsDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition, 0) as AssignGtidsToAnonymousTransactionsDefinitionContext;
    }
    public GTID_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GTID_ONLY_SYMBOL, 0);
    }
    public sourceFileDef(): SourceFileDefContext {
        return this.getRuleContext(MySQLParser.RULE_sourceFileDef, 0) as SourceFileDefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceDefinition;
    }
}


export class ChangeReplicationSourceAutoPositionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public SOURCE_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceAutoPosition;
    }
}


export class ChangeReplicationSourceHostContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public SOURCE_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceHost;
    }
}


export class ChangeReplicationSourceBindContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0);
    }
    public SOURCE_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceBind;
    }
}


export class ChangeReplicationSourceUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public SOURCE_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_USER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceUser;
    }
}


export class ChangeReplicationSourcePasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public SOURCE_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePassword;
    }
}


export class ChangeReplicationSourcePortContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public SOURCE_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePort;
    }
}


export class ChangeReplicationSourceConnectRetryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public SOURCE_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceConnectRetry;
    }
}


export class ChangeReplicationSourceRetryCountContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public SOURCE_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceRetryCount;
    }
}


export class ChangeReplicationSourceDelayContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public SOURCE_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceDelay;
    }
}


export class ChangeReplicationSourceSSLContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public SOURCE_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSL;
    }
}


export class ChangeReplicationSourceSSLCAContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public SOURCE_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCA;
    }
}


export class ChangeReplicationSourceSSLCApathContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCApath;
    }
}


export class ChangeReplicationSourceSSLCipherContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public SOURCE_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCipher;
    }
}


export class ChangeReplicationSourceSSLCLRContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public SOURCE_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCLR;
    }
}


export class ChangeReplicationSourceSSLCLRpathContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCLRpath;
    }
}


export class ChangeReplicationSourceSSLKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public SOURCE_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLKey;
    }
}


export class ChangeReplicationSourceSSLVerifyServerCertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLVerifyServerCert;
    }
}


export class ChangeReplicationSourceTLSVersionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public SOURCE_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceTLSVersion;
    }
}


export class ChangeReplicationSourceTLSCiphersuitesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public SOURCE_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceTLSCiphersuites;
    }
}


export class ChangeReplicationSourceSSLCertContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceSSLCert;
    }
}


export class ChangeReplicationSourcePublicKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public SOURCE_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourcePublicKey;
    }
}


export class ChangeReplicationSourceGetSourcePublicKeyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
    }
    public GET_SOURCE_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceGetSourcePublicKey;
    }
}


export class ChangeReplicationSourceHeartbeatPeriodContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public SOURCE_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceHeartbeatPeriod;
    }
}


export class ChangeReplicationSourceCompressionAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public SOURCE_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceCompressionAlgorithm;
    }
}


export class ChangeReplicationSourceZstdCompressionLevelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplicationSourceZstdCompressionLevel;
    }
}


export class PrivilegeCheckDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public userIdentifierOrText(): UserIdentifierOrTextContext {
        return this.getRuleContext(MySQLParser.RULE_userIdentifierOrText, 0) as UserIdentifierOrTextContext;
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_privilegeCheckDef;
    }
}


export class TablePrimaryKeyCheckDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public STREAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablePrimaryKeyCheckDef;
    }
}


export class AssignGtidsToAnonymousTransactionsDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignGtidsToAnonymousTransactionsDefinition;
    }
}


export class SourceTlsCiphersuitesDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceTlsCiphersuitesDef;
    }
}


export class SourceFileDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public sourceLogFile(): SourceLogFileContext {
        return this.getRuleContext(MySQLParser.RULE_sourceLogFile, 0) as SourceLogFileContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public sourceLogPos(): SourceLogPosContext {
        return this.getRuleContext(MySQLParser.RULE_sourceLogPos, 0) as SourceLogPosContext;
    }
    public ulonglong_number(): Ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0) as Ulonglong_numberContext;
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceFileDef;
    }
}


export class SourceLogFileContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public SOURCE_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceLogFile;
    }
}


export class SourceLogPosContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public SOURCE_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sourceLogPos;
    }
}


export class ServerIdListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number) as Vector<Ulong_numberContext>;
    }
    public ulong_number(i: number): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i) as Ulong_numberContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverIdList;
    }
}


export class ChangeReplicationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public filterDefinition_list(): Vector<FilterDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterDefinition) as Vector<FilterDefinitionContext>;
    }
    public filterDefinition(i: number): FilterDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_filterDefinition, i) as FilterDefinitionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_changeReplication;
    }
}


export class FilterDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public filterDbList(): FilterDbListContext {
        return this.getRuleContext(MySQLParser.RULE_filterDbList, 0) as FilterDbListContext;
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public filterTableList(): FilterTableListContext {
        return this.getRuleContext(MySQLParser.RULE_filterTableList, 0) as FilterTableListContext;
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public filterStringList(): FilterStringListContext {
        return this.getRuleContext(MySQLParser.RULE_filterStringList, 0) as FilterStringListContext;
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public filterDbPairList(): FilterDbPairListContext {
        return this.getRuleContext(MySQLParser.RULE_filterDbPairList, 0) as FilterDbPairListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDefinition;
    }
}


export class FilterDbListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public schemaRef_list(): Vector<SchemaRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaRef) as Vector<SchemaRefContext>;
    }
    public schemaRef(i: number): SchemaRefContext {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, i) as SchemaRefContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDbList;
    }
}


export class FilterTableListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public filterTableRef_list(): Vector<FilterTableRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterTableRef) as Vector<FilterTableRefContext>;
    }
    public filterTableRef(i: number): FilterTableRefContext {
        return this.getRuleContext(MySQLParser.RULE_filterTableRef, i) as FilterTableRefContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterTableList;
    }
}


export class FilterStringListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public filterWildDbTableString_list(): Vector<FilterWildDbTableStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_filterWildDbTableString) as Vector<FilterWildDbTableStringContext>;
    }
    public filterWildDbTableString(i: number): FilterWildDbTableStringContext {
        return this.getRuleContext(MySQLParser.RULE_filterWildDbTableString, i) as FilterWildDbTableStringContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterStringList;
    }
}


export class FilterWildDbTableStringContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterWildDbTableString;
    }
}


export class FilterDbPairListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public schemaIdentifierPair_list(): Vector<SchemaIdentifierPairContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaIdentifierPair) as Vector<SchemaIdentifierPairContext>;
    }
    public schemaIdentifierPair(i: number): SchemaIdentifierPairContext {
        return this.getRuleContext(MySQLParser.RULE_schemaIdentifierPair, i) as SchemaIdentifierPairContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterDbPairList;
    }
}


export class StartReplicaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(MySQLParser.RULE_replica, 0) as ReplicaContext;
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOptions, 0) as ReplicaThreadOptionsContext;
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public replicaUntil(): ReplicaUntilContext {
        return this.getRuleContext(MySQLParser.RULE_replicaUntil, 0) as ReplicaUntilContext;
    }
    public userOption(): UserOptionContext {
        return this.getRuleContext(MySQLParser.RULE_userOption, 0) as UserOptionContext;
    }
    public passwordOption(): PasswordOptionContext {
        return this.getRuleContext(MySQLParser.RULE_passwordOption, 0) as PasswordOptionContext;
    }
    public defaultAuthOption(): DefaultAuthOptionContext {
        return this.getRuleContext(MySQLParser.RULE_defaultAuthOption, 0) as DefaultAuthOptionContext;
    }
    public pluginDirOption(): PluginDirOptionContext {
        return this.getRuleContext(MySQLParser.RULE_pluginDirOption, 0) as PluginDirOptionContext;
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startReplicaStatement;
    }
}


export class StopReplicaStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(MySQLParser.RULE_replica, 0) as ReplicaContext;
    }
    public replicaThreadOptions(): ReplicaThreadOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOptions, 0) as ReplicaThreadOptionsContext;
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stopReplicaStatement;
    }
}


export class ReplicaUntilContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public sourceFileDef_list(): Vector<SourceFileDefContext> {
        return this.getRuleContexts(MySQLParser.RULE_sourceFileDef) as Vector<SourceFileDefContext>;
    }
    public sourceFileDef(i: number): SourceFileDefContext {
        return this.getRuleContext(MySQLParser.RULE_sourceFileDef, i) as SourceFileDefContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaUntil;
    }
}


export class UserOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userOption;
    }
}


export class PasswordOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_passwordOption;
    }
}


export class DefaultAuthOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultAuthOption;
    }
}


export class PluginDirOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pluginDirOption;
    }
}


export class ReplicaThreadOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public replicaThreadOption_list(): Vector<ReplicaThreadOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_replicaThreadOption) as Vector<ReplicaThreadOptionContext>;
    }
    public replicaThreadOption(i: number): ReplicaThreadOptionContext {
        return this.getRuleContext(MySQLParser.RULE_replicaThreadOption, i) as ReplicaThreadOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaThreadOptions;
    }
}


export class ReplicaThreadOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replicaThreadOption;
    }
}


export class GroupReplicationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public groupReplicationStartOptions(): GroupReplicationStartOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationStartOptions, 0) as GroupReplicationStartOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplication;
    }
}


export class GroupReplicationStartOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public groupReplicationStartOption_list(): Vector<GroupReplicationStartOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_groupReplicationStartOption) as Vector<GroupReplicationStartOptionContext>;
    }
    public groupReplicationStartOption(i: number): GroupReplicationStartOptionContext {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationStartOption, i) as GroupReplicationStartOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationStartOptions;
    }
}


export class GroupReplicationStartOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public groupReplicationUser(): GroupReplicationUserContext {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationUser, 0) as GroupReplicationUserContext;
    }
    public groupReplicationPassword(): GroupReplicationPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationPassword, 0) as GroupReplicationPasswordContext;
    }
    public groupReplicationPluginAuth(): GroupReplicationPluginAuthContext {
        return this.getRuleContext(MySQLParser.RULE_groupReplicationPluginAuth, 0) as GroupReplicationPluginAuthContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationStartOption;
    }
}


export class GroupReplicationUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationUser;
    }
}


export class GroupReplicationPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationPassword;
    }
}


export class GroupReplicationPluginAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupReplicationPluginAuth;
    }
}


export class ReplicaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public REPLICA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replica;
    }
}


export class PreparedStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0) as UserVariableContext;
    }
    public executeStatement(): ExecuteStatementContext {
        return this.getRuleContext(MySQLParser.RULE_executeStatement, 0) as ExecuteStatementContext;
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preparedStatement;
    }
}


export class ExecuteStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public executeVarList(): ExecuteVarListContext {
        return this.getRuleContext(MySQLParser.RULE_executeVarList, 0) as ExecuteVarListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_executeStatement;
    }
}


export class ExecuteVarListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public userVariable_list(): Vector<UserVariableContext> {
        return this.getRuleContexts(MySQLParser.RULE_userVariable) as Vector<UserVariableContext>;
    }
    public userVariable(i: number): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, i) as UserVariableContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_executeVarList;
    }
}


export class CloneStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public REMOTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public COLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLON_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public dataDirSSL(): DataDirSSLContext {
        return this.getRuleContext(MySQLParser.RULE_dataDirSSL, 0) as DataDirSSLContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cloneStatement;
    }
}


export class DataDirSSLContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ssl(): SslContext {
        return this.getRuleContext(MySQLParser.RULE_ssl, 0) as SslContext;
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataDirSSL;
    }
}


export class SslContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SSL_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ssl;
    }
}


export class AccountManagementStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterUserStatement(): AlterUserStatementContext {
        return this.getRuleContext(MySQLParser.RULE_alterUserStatement, 0) as AlterUserStatementContext;
    }
    public createUserStatement(): CreateUserStatementContext {
        return this.getRuleContext(MySQLParser.RULE_createUserStatement, 0) as CreateUserStatementContext;
    }
    public dropUserStatement(): DropUserStatementContext {
        return this.getRuleContext(MySQLParser.RULE_dropUserStatement, 0) as DropUserStatementContext;
    }
    public grantStatement(): GrantStatementContext {
        return this.getRuleContext(MySQLParser.RULE_grantStatement, 0) as GrantStatementContext;
    }
    public renameUserStatement(): RenameUserStatementContext {
        return this.getRuleContext(MySQLParser.RULE_renameUserStatement, 0) as RenameUserStatementContext;
    }
    public revokeStatement(): RevokeStatementContext {
        return this.getRuleContext(MySQLParser.RULE_revokeStatement, 0) as RevokeStatementContext;
    }
    public setRoleStatement(): SetRoleStatementContext {
        return this.getRuleContext(MySQLParser.RULE_setRoleStatement, 0) as SetRoleStatementContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_accountManagementStatement;
    }
}


export class AlterUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public createUserTail(): CreateUserTailContext {
        return this.getRuleContext(MySQLParser.RULE_createUserTail, 0) as CreateUserTailContext;
    }
    public userFunction(): UserFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_userFunction, 0) as UserFunctionContext;
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public createUserList(): CreateUserListContext {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0) as CreateUserListContext;
    }
    public alterUserList(): AlterUserListContext {
        return this.getRuleContext(MySQLParser.RULE_alterUserList, 0) as AlterUserListContext;
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0) as IdentifiedByRandomPasswordContext;
    }
    public identifiedByPassword(): IdentifiedByPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0) as IdentifiedByPasswordContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0) as RoleListContext;
    }
    public replacePassword(): ReplacePasswordContext {
        return this.getRuleContext(MySQLParser.RULE_replacePassword, 0) as ReplacePasswordContext;
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0) as RetainCurrentPasswordContext;
    }
    public userRegistration(): UserRegistrationContext {
        return this.getRuleContext(MySQLParser.RULE_userRegistration, 0) as UserRegistrationContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUserStatement;
    }
}


export class AlterUserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public alterUser_list(): Vector<AlterUserContext> {
        return this.getRuleContexts(MySQLParser.RULE_alterUser) as Vector<AlterUserContext>;
    }
    public alterUser(i: number): AlterUserContext {
        return this.getRuleContext(MySQLParser.RULE_alterUser, i) as AlterUserContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUserList;
    }
}


export class AlterUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public oldAlterUser(): OldAlterUserContext {
        return this.getRuleContext(MySQLParser.RULE_oldAlterUser, 0) as OldAlterUserContext;
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public identifiedByPassword(): IdentifiedByPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0) as IdentifiedByPasswordContext;
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0) as IdentifiedByRandomPasswordContext;
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0) as IdentifiedWithPluginContext;
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0) as IdentifiedWithPluginAsAuthContext;
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByPassword, 0) as IdentifiedWithPluginByPasswordContext;
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByRandomPassword, 0) as IdentifiedWithPluginByRandomPasswordContext;
    }
    public ADD_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.ADD_SYMBOL);
    }
    public ADD_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ADD_SYMBOL, i);
    }
    public factor_list(): Vector<FactorContext> {
        return this.getRuleContexts(MySQLParser.RULE_factor) as Vector<FactorContext>;
    }
    public factor(i: number): FactorContext {
        return this.getRuleContext(MySQLParser.RULE_factor, i) as FactorContext;
    }
    public identification_list(): Vector<IdentificationContext> {
        return this.getRuleContexts(MySQLParser.RULE_identification) as Vector<IdentificationContext>;
    }
    public identification(i: number): IdentificationContext {
        return this.getRuleContext(MySQLParser.RULE_identification, i) as IdentificationContext;
    }
    public MODIFY_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.MODIFY_SYMBOL);
    }
    public MODIFY_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, i);
    }
    public DROP_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.DROP_SYMBOL);
    }
    public DROP_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, i);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0) as RetainCurrentPasswordContext;
    }
    public discardOldPassword(): DiscardOldPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_discardOldPassword, 0) as DiscardOldPasswordContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterUser;
    }
}


export class OldAlterUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString) as Vector<TextStringContext>;
    }
    public textString(i: number): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, i) as TextStringContext;
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0) as RetainCurrentPasswordContext;
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0) as TextStringHashContext;
    }
    public discardOldPassword(): DiscardOldPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_discardOldPassword, 0) as DiscardOldPasswordContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_oldAlterUser;
    }
}


export class UserFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0) as ParenthesesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userFunction;
    }
}


export class CreateUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public createUserList(): CreateUserListContext {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0) as CreateUserListContext;
    }
    public createUserTail(): CreateUserTailContext {
        return this.getRuleContext(MySQLParser.RULE_createUserTail, 0) as CreateUserTailContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public defaultRoleClause(): DefaultRoleClauseContext {
        return this.getRuleContext(MySQLParser.RULE_defaultRoleClause, 0) as DefaultRoleClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserStatement;
    }
}


export class CreateUserTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public requireClause(): RequireClauseContext {
        return this.getRuleContext(MySQLParser.RULE_requireClause, 0) as RequireClauseContext;
    }
    public connectOptions(): ConnectOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_connectOptions, 0) as ConnectOptionsContext;
    }
    public accountLockPasswordExpireOptions_list(): Vector<AccountLockPasswordExpireOptionsContext> {
        return this.getRuleContexts(MySQLParser.RULE_accountLockPasswordExpireOptions) as Vector<AccountLockPasswordExpireOptionsContext>;
    }
    public accountLockPasswordExpireOptions(i: number): AccountLockPasswordExpireOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_accountLockPasswordExpireOptions, i) as AccountLockPasswordExpireOptionsContext;
    }
    public userAttributes(): UserAttributesContext {
        return this.getRuleContext(MySQLParser.RULE_userAttributes, 0) as UserAttributesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserTail;
    }
}


export class UserAttributesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userAttributes;
    }
}


export class DefaultRoleClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0) as RoleListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultRoleClause;
    }
}


export class RequireClauseContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public requireList(): RequireListContext {
        return this.getRuleContext(MySQLParser.RULE_requireList, 0) as RequireListContext;
    }
    public SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SSL_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireClause;
    }
}


export class ConnectOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number) as Vector<Ulong_numberContext>;
    }
    public ulong_number(i: number): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i) as Ulong_numberContext;
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
    }
    public MAX_USER_CONNECTIONS_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_connectOptions;
    }
}


export class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public UNLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public EXPIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public REQUIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
    }
    public PASSWORD_LOCK_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_accountLockPasswordExpireOptions;
    }
}


export class UserAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userAttribute;
    }
}


export class DropUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public userList(): UserListContext {
        return this.getRuleContext(MySQLParser.RULE_userList, 0) as UserListContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropUserStatement;
    }
}


export class GrantStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GRANT_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.GRANT_SYMBOL);
    }
    public GRANT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, i);
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilegesList, 0) as RoleOrPrivilegesListContext;
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public userList(): UserListContext {
        return this.getRuleContext(MySQLParser.RULE_userList, 0) as UserListContext;
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public grantIdentifier(): GrantIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_grantIdentifier, 0) as GrantIdentifierContext;
    }
    public grantTargetList(): GrantTargetListContext {
        return this.getRuleContext(MySQLParser.RULE_grantTargetList, 0) as GrantTargetListContext;
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public aclType(): AclTypeContext {
        return this.getRuleContext(MySQLParser.RULE_aclType, 0) as AclTypeContext;
    }
    public versionedRequireClause(): VersionedRequireClauseContext {
        return this.getRuleContext(MySQLParser.RULE_versionedRequireClause, 0) as VersionedRequireClauseContext;
    }
    public grantOptions(): GrantOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_grantOptions, 0) as GrantOptionsContext;
    }
    public grantAs(): GrantAsContext {
        return this.getRuleContext(MySQLParser.RULE_grantAs, 0) as GrantAsContext;
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantStatement;
    }
}


export class GrantTargetListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public createUserList(): CreateUserListContext {
        return this.getRuleContext(MySQLParser.RULE_createUserList, 0) as CreateUserListContext;
    }
    public userList(): UserListContext {
        return this.getRuleContext(MySQLParser.RULE_userList, 0) as UserListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantTargetList;
    }
}


export class GrantOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public grantOption_list(): Vector<GrantOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_grantOption) as Vector<GrantOptionContext>;
    }
    public grantOption(i: number): GrantOptionContext {
        return this.getRuleContext(MySQLParser.RULE_grantOption, i) as GrantOptionContext;
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantOptions;
    }
}


export class ExceptRoleListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EXCEPT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0) as RoleListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exceptRoleList;
    }
}


export class WithRolesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList(): RoleListContext {
        return this.getRuleContext(MySQLParser.RULE_roleList, 0) as RoleListContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public exceptRoleList(): ExceptRoleListContext {
        return this.getRuleContext(MySQLParser.RULE_exceptRoleList, 0) as ExceptRoleListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_withRoles;
    }
}


export class GrantAsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public withRoles(): WithRolesContext {
        return this.getRuleContext(MySQLParser.RULE_withRoles, 0) as WithRolesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantAs;
    }
}


export class VersionedRequireClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public requireClause(): RequireClauseContext {
        return this.getRuleContext(MySQLParser.RULE_requireClause, 0) as RequireClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_versionedRequireClause;
    }
}


export class RenameUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RENAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public user_list(): Vector<UserContext> {
        return this.getRuleContexts(MySQLParser.RULE_user) as Vector<UserContext>;
    }
    public user(i: number): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, i) as UserContext;
    }
    public TO_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.TO_SYMBOL);
    }
    public TO_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, i);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_renameUserStatement;
    }
}


export class RevokeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REVOKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVOKE_SYMBOL, 0);
    }
    public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilegesList, 0) as RoleOrPrivilegesListContext;
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public userList(): UserListContext {
        return this.getRuleContext(MySQLParser.RULE_userList, 0) as UserListContext;
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public grantIdentifier(): GrantIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_grantIdentifier, 0) as GrantIdentifierContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public ifExists(): IfExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifExists, 0) as IfExistsContext;
    }
    public ignoreUnknownUser(): IgnoreUnknownUserContext {
        return this.getRuleContext(MySQLParser.RULE_ignoreUnknownUser, 0) as IgnoreUnknownUserContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public aclType(): AclTypeContext {
        return this.getRuleContext(MySQLParser.RULE_aclType, 0) as AclTypeContext;
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_revokeStatement;
    }
}


export class AclTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_aclType;
    }
}


export class RoleOrPrivilegesListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public roleOrPrivilege_list(): Vector<RoleOrPrivilegeContext> {
        return this.getRuleContexts(MySQLParser.RULE_roleOrPrivilege) as Vector<RoleOrPrivilegeContext>;
    }
    public roleOrPrivilege(i: number): RoleOrPrivilegeContext {
        return this.getRuleContext(MySQLParser.RULE_roleOrPrivilege, i) as RoleOrPrivilegeContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrPrivilegesList;
    }
}


export class RoleOrPrivilegeContext extends ParserRuleContext {
    public _object!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifierOrText, 0) as RoleIdentifierOrTextContext;
    }
    public AT_TEXT_SUFFIX(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public columnInternalRefList(): ColumnInternalRefListContext {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRefList, 0) as ColumnInternalRefListContext;
    }
    public SELECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public REFERENCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public USAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USAGE_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public DATABASES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(MySQLParser.RULE_replica, 0) as ReplicaContext;
    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrPrivilege;
    }
}


export class GrantIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MULT_OPERATOR_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.MULT_OPERATOR);
    }
    public MULT_OPERATOR(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, i);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0) as SchemaRefContext;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantIdentifier;
    }
}


export class RequireListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public requireListElement_list(): Vector<RequireListElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_requireListElement) as Vector<RequireListElementContext>;
    }
    public requireListElement(i: number): RequireListElementContext {
        return this.getRuleContext(MySQLParser.RULE_requireListElement, i) as RequireListElementContext;
    }
    public AND_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.AND_SYMBOL);
    }
    public AND_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireList;
    }
}


export class RequireListElementContext extends ParserRuleContext {
    public _element!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_requireListElement;
    }
}


export class GrantOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
    }
    public GRANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_grantOption;
    }
}


export class SetRoleStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public roleList_list(): Vector<RoleListContext> {
        return this.getRuleContexts(MySQLParser.RULE_roleList) as Vector<RoleListContext>;
    }
    public roleList(i: number): RoleListContext {
        return this.getRuleContext(MySQLParser.RULE_roleList, i) as RoleListContext;
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public EXCEPT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setRoleStatement;
    }
}


export class RoleListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public role_list(): Vector<RoleContext> {
        return this.getRuleContexts(MySQLParser.RULE_role) as Vector<RoleContext>;
    }
    public role(i: number): RoleContext {
        return this.getRuleContext(MySQLParser.RULE_role, i) as RoleContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleList;
    }
}


export class RoleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public roleIdentifierOrText(): RoleIdentifierOrTextContext {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifierOrText, 0) as RoleIdentifierOrTextContext;
    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0) as UserVariableContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_role;
    }
}


export class TableAdministrationStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRefList(): TableRefListContext {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0) as TableRefListContext;
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public noWriteToBinLog(): NoWriteToBinLogContext {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, 0) as NoWriteToBinLogContext;
    }
    public histogram(): HistogramContext {
        return this.getRuleContext(MySQLParser.RULE_histogram, 0) as HistogramContext;
    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public checkOption_list(): Vector<CheckOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_checkOption) as Vector<CheckOptionContext>;
    }
    public checkOption(i: number): CheckOptionContext {
        return this.getRuleContext(MySQLParser.RULE_checkOption, i) as CheckOptionContext;
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public OPTIMIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public repairType_list(): Vector<RepairTypeContext> {
        return this.getRuleContexts(MySQLParser.RULE_repairType) as Vector<RepairTypeContext>;
    }
    public repairType(i: number): RepairTypeContext {
        return this.getRuleContext(MySQLParser.RULE_repairType, i) as RepairTypeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAdministrationStatement;
    }
}


export class HistogramContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_histogram;
    }
}


export class CheckOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkOption;
    }
}


export class RepairTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_repairType;
    }
}


export class InstallUninstallStatementContext extends ParserRuleContext {
    public _action!: Token;
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public textStringLiteralList(): TextStringLiteralListContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteralList, 0) as TextStringLiteralListContext;
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public pluginRef(): PluginRefContext {
        return this.getRuleContext(MySQLParser.RULE_pluginRef, 0) as PluginRefContext;
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public componentRef_list(): Vector<ComponentRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_componentRef) as Vector<ComponentRefContext>;
    }
    public componentRef(i: number): ComponentRefContext {
        return this.getRuleContext(MySQLParser.RULE_componentRef, i) as ComponentRefContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_installUninstallStatement;
    }
}


export class SetStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public startOptionValueList(): StartOptionValueListContext {
        return this.getRuleContext(MySQLParser.RULE_startOptionValueList, 0) as StartOptionValueListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setStatement;
    }
}


export class StartOptionValueListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
        return this.getRuleContext(MySQLParser.RULE_optionValueNoOptionType, 0) as OptionValueNoOptionTypeContext;
    }
    public optionValueListContinued(): OptionValueListContinuedContext {
        return this.getRuleContext(MySQLParser.RULE_optionValueListContinued, 0) as OptionValueListContinuedContext;
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext {
        return this.getRuleContext(MySQLParser.RULE_transactionCharacteristics, 0) as TransactionCharacteristicsContext;
    }
    public optionType(): OptionTypeContext {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0) as OptionTypeContext;
    }
    public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext {
        return this.getRuleContext(MySQLParser.RULE_startOptionValueListFollowingOptionType, 0) as StartOptionValueListFollowingOptionTypeContext;
    }
    public PASSWORD_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.PASSWORD_SYMBOL);
    }
    public PASSWORD_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, i);
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public replacePassword(): ReplacePasswordContext {
        return this.getRuleContext(MySQLParser.RULE_replacePassword, 0) as ReplacePasswordContext;
    }
    public retainCurrentPassword(): RetainCurrentPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_retainCurrentPassword, 0) as RetainCurrentPasswordContext;
    }
    public TO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TO_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startOptionValueList;
    }
}


export class TransactionCharacteristicsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public transactionAccessMode(): TransactionAccessModeContext {
        return this.getRuleContext(MySQLParser.RULE_transactionAccessMode, 0) as TransactionAccessModeContext;
    }
    public isolationLevel(): IsolationLevelContext {
        return this.getRuleContext(MySQLParser.RULE_isolationLevel, 0) as IsolationLevelContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionCharacteristics;
    }
}


export class TransactionAccessModeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_transactionAccessMode;
    }
}


export class IsolationLevelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_isolationLevel;
    }
}


export class OptionValueListContinuedContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public optionValue_list(): Vector<OptionValueContext> {
        return this.getRuleContexts(MySQLParser.RULE_optionValue) as Vector<OptionValueContext>;
    }
    public optionValue(i: number): OptionValueContext {
        return this.getRuleContext(MySQLParser.RULE_optionValue, i) as OptionValueContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueListContinued;
    }
}


export class OptionValueNoOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public lvalueVariable(): LvalueVariableContext {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0) as LvalueVariableContext;
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public setExprOrDefault(): SetExprOrDefaultContext {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0) as SetExprOrDefaultContext;
    }
    public charsetClause(): CharsetClauseContext {
        return this.getRuleContext(MySQLParser.RULE_charsetClause, 0) as CharsetClauseContext;
    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0) as UserVariableContext;
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public setVarIdentType(): SetVarIdentTypeContext {
        return this.getRuleContext(MySQLParser.RULE_setVarIdentType, 0) as SetVarIdentTypeContext;
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0) as CharsetNameContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public collate(): CollateContext {
        return this.getRuleContext(MySQLParser.RULE_collate, 0) as CollateContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueNoOptionType;
    }
}


export class OptionValueContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public optionType(): OptionTypeContext {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0) as OptionTypeContext;
    }
    public lvalueVariable(): LvalueVariableContext {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0) as LvalueVariableContext;
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public setExprOrDefault(): SetExprOrDefaultContext {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0) as SetExprOrDefaultContext;
    }
    public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
        return this.getRuleContext(MySQLParser.RULE_optionValueNoOptionType, 0) as OptionValueNoOptionTypeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValue;
    }
}


export class SetSystemVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public lvalueVariable(): LvalueVariableContext {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0) as LvalueVariableContext;
    }
    public setVarIdentType(): SetVarIdentTypeContext {
        return this.getRuleContext(MySQLParser.RULE_setVarIdentType, 0) as SetVarIdentTypeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setSystemVariable;
    }
}


export class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext {
        return this.getRuleContext(MySQLParser.RULE_optionValueFollowingOptionType, 0) as OptionValueFollowingOptionTypeContext;
    }
    public optionValueListContinued(): OptionValueListContinuedContext {
        return this.getRuleContext(MySQLParser.RULE_optionValueListContinued, 0) as OptionValueListContinuedContext;
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public transactionCharacteristics(): TransactionCharacteristicsContext {
        return this.getRuleContext(MySQLParser.RULE_transactionCharacteristics, 0) as TransactionCharacteristicsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_startOptionValueListFollowingOptionType;
    }
}


export class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public lvalueVariable(): LvalueVariableContext {
        return this.getRuleContext(MySQLParser.RULE_lvalueVariable, 0) as LvalueVariableContext;
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public setExprOrDefault(): SetExprOrDefaultContext {
        return this.getRuleContext(MySQLParser.RULE_setExprOrDefault, 0) as SetExprOrDefaultContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionValueFollowingOptionType;
    }
}


export class SetExprOrDefaultContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setExprOrDefault;
    }
}


export class ShowDatabasesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public DATABASES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showDatabasesStatement;
    }
}


export class ShowTablesStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public showCommandType(): ShowCommandTypeContext {
        return this.getRuleContext(MySQLParser.RULE_showCommandType, 0) as ShowCommandTypeContext;
    }
    public inDb(): InDbContext {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0) as InDbContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTablesStatement;
    }
}


export class ShowTriggersStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public inDb(): InDbContext {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0) as InDbContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTriggersStatement;
    }
}


export class ShowEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public inDb(): InDbContext {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0) as InDbContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEventsStatement;
    }
}


export class ShowTableStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public inDb(): InDbContext {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0) as InDbContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showTableStatusStatement;
    }
}


export class ShowOpenTablesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public inDb(): InDbContext {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0) as InDbContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showOpenTablesStatement;
    }
}


export class ShowPluginsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showPluginsStatement;
    }
}


export class ShowEngineLogsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0) as EngineOrAllContext;
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineLogsStatement;
    }
}


export class ShowEngineMutexStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0) as EngineOrAllContext;
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineMutexStatement;
    }
}


export class ShowEngineStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public engineOrAll(): EngineOrAllContext {
        return this.getRuleContext(MySQLParser.RULE_engineOrAll, 0) as EngineOrAllContext;
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEngineStatusStatement;
    }
}


export class ShowColumnsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public showCommandType(): ShowCommandTypeContext {
        return this.getRuleContext(MySQLParser.RULE_showCommandType, 0) as ShowCommandTypeContext;
    }
    public inDb(): InDbContext {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0) as InDbContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showColumnsStatement;
    }
}


export class ShowBinaryLogsStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showBinaryLogsStatement;
    }
}


export class ShowReplicasStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(MySQLParser.RULE_replica, 0) as ReplicaContext;
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public REPLICAS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICAS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showReplicasStatement;
    }
}


export class ShowBinlogEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0) as Ulonglong_numberContext;
    }
    public limitClause(): LimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0) as LimitClauseContext;
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showBinlogEventsStatement;
    }
}


export class ShowRelaylogEventsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public ulonglong_number(): Ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0) as Ulonglong_numberContext;
    }
    public limitClause(): LimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0) as LimitClauseContext;
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showRelaylogEventsStatement;
    }
}


export class ShowKeysStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public fromOrIn(): FromOrInContext {
        return this.getRuleContext(MySQLParser.RULE_fromOrIn, 0) as FromOrInContext;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public inDb(): InDbContext {
        return this.getRuleContext(MySQLParser.RULE_inDb, 0) as InDbContext;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0) as WhereClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showKeysStatement;
    }
}


export class ShowEnginesStatementContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showEnginesStatement;
    }
}


export class ShowCountWarningsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCountWarningsStatement;
    }
}


export class ShowCountErrorsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCountErrorsStatement;
    }
}


export class ShowWarningsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public limitClause(): LimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0) as LimitClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showWarningsStatement;
    }
}


export class ShowErrorsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public limitClause(): LimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0) as LimitClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showErrorsStatement;
    }
}


export class ShowProfilesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProfilesStatement;
    }
}


export class ShowProfileStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public profileDefinitions(): ProfileDefinitionsContext {
        return this.getRuleContext(MySQLParser.RULE_profileDefinitions, 0) as ProfileDefinitionsContext;
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public limitClause(): LimitClauseContext {
        return this.getRuleContext(MySQLParser.RULE_limitClause, 0) as LimitClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProfileStatement;
    }
}


export class ShowStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public optionType(): OptionTypeContext {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0) as OptionTypeContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showStatusStatement;
    }
}


export class ShowProcessListStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showProcessListStatement;
    }
}


export class ShowVariablesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public optionType(): OptionTypeContext {
        return this.getRuleContext(MySQLParser.RULE_optionType, 0) as OptionTypeContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showVariablesStatement;
    }
}


export class ShowCharacterSetStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public charset(): CharsetContext {
        return this.getRuleContext(MySQLParser.RULE_charset, 0) as CharsetContext;
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCharacterSetStatement;
    }
}


export class ShowCollationStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCollationStatement;
    }
}


export class ShowPrivilegesStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showPrivilegesStatement;
    }
}


export class ShowGrantsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public userList(): UserListContext {
        return this.getRuleContext(MySQLParser.RULE_userList, 0) as UserListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showGrantsStatement;
    }
}


export class ShowCreateDatabaseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0) as SchemaRefContext;
    }
    public ifNotExists(): IfNotExistsContext {
        return this.getRuleContext(MySQLParser.RULE_ifNotExists, 0) as IfNotExistsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateDatabaseStatement;
    }
}


export class ShowCreateTableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateTableStatement;
    }
}


export class ShowCreateViewStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(MySQLParser.RULE_viewRef, 0) as ViewRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateViewStatement;
    }
}


export class ShowMasterStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showMasterStatusStatement;
    }
}


export class ShowReplicaStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public replica(): ReplicaContext {
        return this.getRuleContext(MySQLParser.RULE_replica, 0) as ReplicaContext;
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showReplicaStatusStatement;
    }
}


export class ShowCreateProcedureStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0) as ProcedureRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureStatement;
    }
}


export class ShowCreateFunctionStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0) as FunctionRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionStatement;
    }
}


export class ShowCreateTriggerStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public TRIGGER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
    }
    public triggerRef(): TriggerRefContext {
        return this.getRuleContext(MySQLParser.RULE_triggerRef, 0) as TriggerRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateTriggerStatement;
    }
}


export class ShowCreateProcedureStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureStatusStatement;
    }
}


export class ShowCreateFunctionStatusStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public likeOrWhere(): LikeOrWhereContext {
        return this.getRuleContext(MySQLParser.RULE_likeOrWhere, 0) as LikeOrWhereContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionStatusStatement;
    }
}


export class ShowCreateProcedureCodeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public PROCEDURE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public procedureRef(): ProcedureRefContext {
        return this.getRuleContext(MySQLParser.RULE_procedureRef, 0) as ProcedureRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateProcedureCodeStatement;
    }
}


export class ShowCreateFunctionCodeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public FUNCTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public functionRef(): FunctionRefContext {
        return this.getRuleContext(MySQLParser.RULE_functionRef, 0) as FunctionRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateFunctionCodeStatement;
    }
}


export class ShowCreateEventStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public eventRef(): EventRefContext {
        return this.getRuleContext(MySQLParser.RULE_eventRef, 0) as EventRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateEventStatement;
    }
}


export class ShowCreateUserStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SHOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCreateUserStatement;
    }
}


export class ShowCommandTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_showCommandType;
    }
}


export class EngineOrAllContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public engineRef(): EngineRefContext {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0) as EngineRefContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_engineOrAll;
    }
}


export class FromOrInContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fromOrIn;
    }
}


export class InDbContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public fromOrIn(): FromOrInContext {
        return this.getRuleContext(MySQLParser.RULE_fromOrIn, 0) as FromOrInContext;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inDb;
    }
}


export class ProfileDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public profileDefinition_list(): Vector<ProfileDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_profileDefinition) as Vector<ProfileDefinitionContext>;
    }
    public profileDefinition(i: number): ProfileDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_profileDefinition, i) as ProfileDefinitionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_profileDefinitions;
    }
}


export class ProfileDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_profileDefinition;
    }
}


export class OtherAdministrativeStatementContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public keyCacheListOrParts(): KeyCacheListOrPartsContext {
        return this.getRuleContext(MySQLParser.RULE_keyCacheListOrParts, 0) as KeyCacheListOrPartsContext;
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public flushTables(): FlushTablesContext {
        return this.getRuleContext(MySQLParser.RULE_flushTables, 0) as FlushTablesContext;
    }
    public flushOption_list(): Vector<FlushOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_flushOption) as Vector<FlushOptionContext>;
    }
    public flushOption(i: number): FlushOptionContext {
        return this.getRuleContext(MySQLParser.RULE_flushOption, i) as FlushOptionContext;
    }
    public noWriteToBinLog(): NoWriteToBinLogContext {
        return this.getRuleContext(MySQLParser.RULE_noWriteToBinLog, 0) as NoWriteToBinLogContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public KILL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KILL_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public preloadTail(): PreloadTailContext {
        return this.getRuleContext(MySQLParser.RULE_preloadTail, 0) as PreloadTailContext;
    }
    public LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_otherAdministrativeStatement;
    }
}


export class KeyCacheListOrPartsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public keyCacheList(): KeyCacheListContext {
        return this.getRuleContext(MySQLParser.RULE_keyCacheList, 0) as KeyCacheListContext;
    }
    public assignToKeycachePartition(): AssignToKeycachePartitionContext {
        return this.getRuleContext(MySQLParser.RULE_assignToKeycachePartition, 0) as AssignToKeycachePartitionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyCacheListOrParts;
    }
}


export class KeyCacheListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public assignToKeycache_list(): Vector<AssignToKeycacheContext> {
        return this.getRuleContexts(MySQLParser.RULE_assignToKeycache) as Vector<AssignToKeycacheContext>;
    }
    public assignToKeycache(i: number): AssignToKeycacheContext {
        return this.getRuleContext(MySQLParser.RULE_assignToKeycache, i) as AssignToKeycacheContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyCacheList;
    }
}


export class AssignToKeycacheContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public cacheKeyList(): CacheKeyListContext {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0) as CacheKeyListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignToKeycache;
    }
}


export class AssignToKeycachePartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0) as AllOrPartitionNameListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public cacheKeyList(): CacheKeyListContext {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0) as CacheKeyListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_assignToKeycachePartition;
    }
}


export class CacheKeyListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public keyOrIndex(): KeyOrIndexContext {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0) as KeyOrIndexContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public keyUsageList(): KeyUsageListContext {
        return this.getRuleContext(MySQLParser.RULE_keyUsageList, 0) as KeyUsageListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cacheKeyList;
    }
}


export class KeyUsageElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyUsageElement;
    }
}


export class KeyUsageListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public keyUsageElement_list(): Vector<KeyUsageElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyUsageElement) as Vector<KeyUsageElementContext>;
    }
    public keyUsageElement(i: number): KeyUsageElementContext {
        return this.getRuleContext(MySQLParser.RULE_keyUsageElement, i) as KeyUsageElementContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyUsageList;
    }
}


export class FlushOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public logType(): LogTypeContext {
        return this.getRuleContext(MySQLParser.RULE_logType, 0) as LogTypeContext;
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public channel(): ChannelContext {
        return this.getRuleContext(MySQLParser.RULE_channel, 0) as ChannelContext;
    }
    public OPTIMIZER_COSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushOption;
    }
}


export class LogTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logType;
    }
}


export class FlushTablesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
    public flushTablesOptions(): FlushTablesOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_flushTablesOptions, 0) as FlushTablesOptionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushTables;
    }
}


export class FlushTablesOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public READ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_SYMBOL, 0);
    }
    public LOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_flushTablesOptions;
    }
}


export class PreloadTailContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public adminPartition(): AdminPartitionContext {
        return this.getRuleContext(MySQLParser.RULE_adminPartition, 0) as AdminPartitionContext;
    }
    public cacheKeyList(): CacheKeyListContext {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0) as CacheKeyListContext;
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public preloadList(): PreloadListContext {
        return this.getRuleContext(MySQLParser.RULE_preloadList, 0) as PreloadListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadTail;
    }
}


export class PreloadListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public preloadKeys_list(): Vector<PreloadKeysContext> {
        return this.getRuleContexts(MySQLParser.RULE_preloadKeys) as Vector<PreloadKeysContext>;
    }
    public preloadKeys(i: number): PreloadKeysContext {
        return this.getRuleContext(MySQLParser.RULE_preloadKeys, i) as PreloadKeysContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadList;
    }
}


export class PreloadKeysContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public cacheKeyList(): CacheKeyListContext {
        return this.getRuleContext(MySQLParser.RULE_cacheKeyList, 0) as CacheKeyListContext;
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_preloadKeys;
    }
}


export class AdminPartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public allOrPartitionNameList(): AllOrPartitionNameListContext {
        return this.getRuleContext(MySQLParser.RULE_allOrPartitionNameList, 0) as AllOrPartitionNameListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_adminPartition;
    }
}


export class ResourceGroupManagementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public createResourceGroup(): CreateResourceGroupContext {
        return this.getRuleContext(MySQLParser.RULE_createResourceGroup, 0) as CreateResourceGroupContext;
    }
    public alterResourceGroup(): AlterResourceGroupContext {
        return this.getRuleContext(MySQLParser.RULE_alterResourceGroup, 0) as AlterResourceGroupContext;
    }
    public setResourceGroup(): SetResourceGroupContext {
        return this.getRuleContext(MySQLParser.RULE_setResourceGroup, 0) as SetResourceGroupContext;
    }
    public dropResourceGroup(): DropResourceGroupContext {
        return this.getRuleContext(MySQLParser.RULE_dropResourceGroup, 0) as DropResourceGroupContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupManagement;
    }
}


export class CreateResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CREATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public SYSTEM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupVcpuList, 0) as ResourceGroupVcpuListContext;
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupPriority, 0) as ResourceGroupPriorityContext;
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupEnableDisable, 0) as ResourceGroupEnableDisableContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createResourceGroup;
    }
}


export class ResourceGroupVcpuListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public vcpuNumOrRange_list(): Vector<VcpuNumOrRangeContext> {
        return this.getRuleContexts(MySQLParser.RULE_vcpuNumOrRange) as Vector<VcpuNumOrRangeContext>;
    }
    public vcpuNumOrRange(i: number): VcpuNumOrRangeContext {
        return this.getRuleContext(MySQLParser.RULE_vcpuNumOrRange, i) as VcpuNumOrRangeContext;
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupVcpuList;
    }
}


export class VcpuNumOrRangeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_vcpuNumOrRange;
    }
}


export class ResourceGroupPriorityContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupPriority;
    }
}


export class ResourceGroupEnableDisableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupEnableDisable;
    }
}


export class AlterResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ALTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public resourceGroupRef(): ResourceGroupRefContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupRef, 0) as ResourceGroupRefContext;
    }
    public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupVcpuList, 0) as ResourceGroupVcpuListContext;
    }
    public resourceGroupPriority(): ResourceGroupPriorityContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupPriority, 0) as ResourceGroupPriorityContext;
    }
    public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupEnableDisable, 0) as ResourceGroupEnableDisableContext;
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_alterResourceGroup;
    }
}


export class SetResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public threadIdList(): ThreadIdListContext {
        return this.getRuleContext(MySQLParser.RULE_threadIdList, 0) as ThreadIdListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setResourceGroup;
    }
}


export class ThreadIdListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public real_ulong_number_list(): Vector<Real_ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_real_ulong_number) as Vector<Real_ulong_numberContext>;
    }
    public real_ulong_number(i: number): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, i) as Real_ulong_numberContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_threadIdList;
    }
}


export class DropResourceGroupContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DROP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DROP_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public GROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
    }
    public resourceGroupRef(): ResourceGroupRefContext {
        return this.getRuleContext(MySQLParser.RULE_resourceGroupRef, 0) as ResourceGroupRefContext;
    }
    public FORCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dropResourceGroup;
    }
}


export class UtilityStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public describeStatement(): DescribeStatementContext {
        return this.getRuleContext(MySQLParser.RULE_describeStatement, 0) as DescribeStatementContext;
    }
    public explainStatement(): ExplainStatementContext {
        return this.getRuleContext(MySQLParser.RULE_explainStatement, 0) as ExplainStatementContext;
    }
    public helpCommand(): HelpCommandContext {
        return this.getRuleContext(MySQLParser.RULE_helpCommand, 0) as HelpCommandContext;
    }
    public useCommand(): UseCommandContext {
        return this.getRuleContext(MySQLParser.RULE_useCommand, 0) as UseCommandContext;
    }
    public restartServer(): RestartServerContext {
        return this.getRuleContext(MySQLParser.RULE_restartServer, 0) as RestartServerContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_utilityStatement;
    }
}


export class DescribeStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public EXPLAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
    }
    public DESCRIBE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0) as ColumnRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_describeStatement;
    }
}


export class ExplainStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public explainableStatement(): ExplainableStatementContext {
        return this.getRuleContext(MySQLParser.RULE_explainableStatement, 0) as ExplainableStatementContext;
    }
    public EXPLAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
    }
    public DESCRIBE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public ANALYZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explainStatement;
    }
}


export class ExplainableStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0) as SelectStatementContext;
    }
    public deleteStatement(): DeleteStatementContext {
        return this.getRuleContext(MySQLParser.RULE_deleteStatement, 0) as DeleteStatementContext;
    }
    public insertStatement(): InsertStatementContext {
        return this.getRuleContext(MySQLParser.RULE_insertStatement, 0) as InsertStatementContext;
    }
    public replaceStatement(): ReplaceStatementContext {
        return this.getRuleContext(MySQLParser.RULE_replaceStatement, 0) as ReplaceStatementContext;
    }
    public updateStatement(): UpdateStatementContext {
        return this.getRuleContext(MySQLParser.RULE_updateStatement, 0) as UpdateStatementContext;
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_explainableStatement;
    }
}


export class HelpCommandContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_helpCommand;
    }
}


export class UseCommandContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public USE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_SYMBOL, 0);
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0) as SchemaRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_useCommand;
    }
}


export class RestartServerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_restartServer;
    }
}


export class ExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_expr;
    }
    public override copyFrom(ctx: ExprContext): void {
        super.copyFrom(ctx);
    }
}
export class ExprOrContext extends ExprContext {
    public _op!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OR_SYMBOL, 0);
    }
    public LOGICAL_OR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0);
    }
}
export class ExprNotContext extends ExprContext {
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
}
export class ExprIsContext extends ExprContext {
    public _type_!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0) as BoolPriContext;
    }
    public IS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IS_SYMBOL, 0);
    }
    public TRUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
    }
    public FALSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public notRule(): NotRuleContext {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0) as NotRuleContext;
    }
}
export class ExprAndContext extends ExprContext {
    public _op!: Token;
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public LOGICAL_AND_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0);
    }
}
export class ExprXorContext extends ExprContext {
    constructor(ctx: ExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public XOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XOR_SYMBOL, 0);
    }
}


export class BoolPriContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_boolPri;
    }
    public override copyFrom(ctx: BoolPriContext): void {
        super.copyFrom(ctx);
    }
}
export class PrimaryExprPredicateContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0) as PredicateContext;
    }
}
export class PrimaryExprCompareContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0) as BoolPriContext;
    }
    public compOp(): CompOpContext {
        return this.getRuleContext(MySQLParser.RULE_compOp, 0) as CompOpContext;
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0) as PredicateContext;
    }
}
export class PrimaryExprAllAnyContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0) as BoolPriContext;
    }
    public compOp(): CompOpContext {
        return this.getRuleContext(MySQLParser.RULE_compOp, 0) as CompOpContext;
    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0) as SubqueryContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
}
export class PrimaryExprIsNullContext extends BoolPriContext {
    constructor(ctx: BoolPriContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public boolPri(): BoolPriContext {
        return this.getRuleContext(MySQLParser.RULE_boolPri, 0) as BoolPriContext;
    }
    public IS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IS_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public notRule(): NotRuleContext {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0) as NotRuleContext;
    }
}


export class CompOpContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public NULL_SAFE_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0);
    }
    public GREATER_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
    }
    public GREATER_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
    }
    public LESS_OR_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
    }
    public LESS_THAN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
    }
    public NOT_EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compOp;
    }
}


export class PredicateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public bitExpr_list(): Vector<BitExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_bitExpr) as Vector<BitExprContext>;
    }
    public bitExpr(i: number): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, i) as BitExprContext;
    }
    public predicateOperations(): PredicateOperationsContext {
        return this.getRuleContext(MySQLParser.RULE_predicateOperations, 0) as PredicateOperationsContext;
    }
    public MEMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExprWithParentheses, 0) as SimpleExprWithParenthesesContext;
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public notRule(): NotRuleContext {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0) as NotRuleContext;
    }
    public OF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OF_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_predicate;
    }
}


export class PredicateOperationsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_predicateOperations;
    }
    public override copyFrom(ctx: PredicateOperationsContext): void {
        super.copyFrom(ctx);
    }
}
export class PredicateExprRegexContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REGEXP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGEXP_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0) as BitExprContext;
    }
}
export class PredicateExprBetweenContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0) as BitExprContext;
    }
    public AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, 0);
    }
    public predicate(): PredicateContext {
        return this.getRuleContext(MySQLParser.RULE_predicate, 0) as PredicateContext;
    }
}
export class PredicateExprInContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0) as SubqueryContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
}
export class PredicateExprLikeContext extends PredicateOperationsContext {
    constructor(ctx: PredicateOperationsContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public simpleExpr_list(): Vector<SimpleExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleExpr) as Vector<SimpleExprContext>;
    }
    public simpleExpr(i: number): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, i) as SimpleExprContext;
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
}


export class BitExprContext extends ParserRuleContext {
    public _op!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0) as SimpleExprContext;
    }
    public bitExpr_list(): Vector<BitExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_bitExpr) as Vector<BitExprContext>;
    }
    public bitExpr(i: number): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, i) as BitExprContext;
    }
    public BITWISE_XOR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public DIV_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.DIV_OPERATOR, 0);
    }
    public MOD_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_OPERATOR, 0);
    }
    public DIV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIV_SYMBOL, 0);
    }
    public MOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_SYMBOL, 0);
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public SHIFT_LEFT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0);
    }
    public SHIFT_RIGHT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0);
    }
    public BITWISE_AND_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0);
    }
    public BITWISE_OR_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(MySQLParser.RULE_interval, 0) as IntervalContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_bitExpr;
    }
}


export class SimpleExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleExpr;
    }
    public override copyFrom(ctx: SimpleExprContext): void {
        super.copyFrom(ctx);
    }
}
export class SimpleExprConvertContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public castType(): CastTypeContext {
        return this.getRuleContext(MySQLParser.RULE_castType, 0) as CastTypeContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
}
export class SimpleExprCastContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CAST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public castType(): CastTypeContext {
        return this.getRuleContext(MySQLParser.RULE_castType, 0) as CastTypeContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public arrayCast(): ArrayCastContext {
        return this.getRuleContext(MySQLParser.RULE_arrayCast, 0) as ArrayCastContext;
    }
}
export class SimpleExprUnaryContext extends SimpleExprContext {
    public _op!: Token;
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0) as SimpleExprContext;
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public BITWISE_NOT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0);
    }
}
export class SimpleExpressionRValueContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemOrUserVariable, 0) as RvalueSystemOrUserVariableContext;
    }
}
export class SimpleExprOdbcContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public CLOSE_CURLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
    }
}
export class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public runtimeFunctionCall(): RuntimeFunctionCallContext {
        return this.getRuleContext(MySQLParser.RULE_runtimeFunctionCall, 0) as RuntimeFunctionCallContext;
    }
}
export class SimpleExprFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionCall(): FunctionCallContext {
        return this.getRuleContext(MySQLParser.RULE_functionCall, 0) as FunctionCallContext;
    }
}
export class SimpleExprCollateContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0) as SimpleExprContext;
    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
}
export class SimpleExprMatchContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
    }
    public identListArg(): IdentListArgContext {
        return this.getRuleContext(MySQLParser.RULE_identListArg, 0) as IdentListArgContext;
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0) as BitExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fulltextOptions(): FulltextOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_fulltextOptions, 0) as FulltextOptionsContext;
    }
}
export class SimpleExprWindowingFunctionContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowFunctionCall(): WindowFunctionCallContext {
        return this.getRuleContext(MySQLParser.RULE_windowFunctionCall, 0) as WindowFunctionCallContext;
    }
}
export class SimpleExprBinaryContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0) as SimpleExprContext;
    }
}
export class SimpleExprColumnRefContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0) as ColumnRefContext;
    }
    public jsonOperator(): JsonOperatorContext {
        return this.getRuleContext(MySQLParser.RULE_jsonOperator, 0) as JsonOperatorContext;
    }
}
export class SimpleExprParamMarkerContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
}
export class SimpleExprSumContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sumExpr(): SumExprContext {
        return this.getRuleContext(MySQLParser.RULE_sumExpr, 0) as SumExprContext;
    }
}
export class SimpleExprCastTimeContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CAST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public ZONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ZONE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0) as TypeDatetimePrecisionContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
}
export class SimpleExprConvertUsingContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONVERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0) as CharsetNameContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
}
export class SimpleExprSubQueryContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public subquery(): SubqueryContext {
        return this.getRuleContext(MySQLParser.RULE_subquery, 0) as SubqueryContext;
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
}
export class SimpleExprGroupingOperationContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingOperation(): GroupingOperationContext {
        return this.getRuleContext(MySQLParser.RULE_groupingOperation, 0) as GroupingOperationContext;
    }
}
export class SimpleExprNotContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public not2Rule(): Not2RuleContext {
        return this.getRuleContext(MySQLParser.RULE_not2Rule, 0) as Not2RuleContext;
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0) as SimpleExprContext;
    }
}
export class SimpleExprValuesContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleIdentifier(): SimpleIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, 0) as SimpleIdentifierContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
}
export class SimpleExprUserVariableAssignmentContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public inExpressionUserVariableAssignment(): InExpressionUserVariableAssignmentContext {
        return this.getRuleContext(MySQLParser.RULE_inExpressionUserVariableAssignment, 0) as InExpressionUserVariableAssignmentContext;
    }
}
export class SimpleExprDefaultContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleIdentifier(): SimpleIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, 0) as SimpleIdentifierContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
}
export class SimpleExprListContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public ROW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_SYMBOL, 0);
    }
}
export class SimpleExprIntervalContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(MySQLParser.RULE_interval, 0) as IntervalContext;
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
}
export class SimpleExprCaseContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASE_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public whenExpression_list(): Vector<WhenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_whenExpression) as Vector<WhenExpressionContext>;
    }
    public whenExpression(i: number): WhenExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_whenExpression, i) as WhenExpressionContext;
    }
    public thenExpression_list(): Vector<ThenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_thenExpression) as Vector<ThenExpressionContext>;
    }
    public thenExpression(i: number): ThenExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_thenExpression, i) as ThenExpressionContext;
    }
    public elseExpression(): ElseExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_elseExpression, 0) as ElseExpressionContext;
    }
}
export class SimpleExprConcatContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public simpleExpr_list(): Vector<SimpleExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleExpr) as Vector<SimpleExprContext>;
    }
    public simpleExpr(i: number): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, i) as SimpleExprContext;
    }
    public CONCAT_PIPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0);
    }
}
export class SimpleExprLiteralContext extends SimpleExprContext {
    constructor(ctx: SimpleExprContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literalOrNull(): LiteralOrNullContext {
        return this.getRuleContext(MySQLParser.RULE_literalOrNull, 0) as LiteralOrNullContext;
    }
}


export class ArrayCastContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ARRAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_arrayCast;
    }
}


export class JsonOperatorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public JSON_SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public JSON_UNQUOTED_SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonOperator;
    }
}


export class SumExprContext extends ParserRuleContext {
    public _name!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public inSumExpr(): InSumExprContext {
        return this.getRuleContext(MySQLParser.RULE_inSumExpr, 0) as InSumExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public DISTINCT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
    }
    public windowingClause(): WindowingClauseContext {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0) as WindowingClauseContext;
    }
    public BIT_AND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_AND_SYMBOL, 0);
    }
    public BIT_OR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_OR_SYMBOL, 0);
    }
    public BIT_XOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_XOR_SYMBOL, 0);
    }
    public jsonFunction(): JsonFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_jsonFunction, 0) as JsonFunctionContext;
    }
    public ST_COLLECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ST_COLLECT_SYMBOL, 0);
    }
    public COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public MIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_SYMBOL, 0);
    }
    public MAX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SYMBOL, 0);
    }
    public STD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STD_SYMBOL, 0);
    }
    public VARIANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIANCE_SYMBOL, 0);
    }
    public STDDEV_SAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0);
    }
    public VAR_SAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0);
    }
    public SUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUM_SYMBOL, 0);
    }
    public GROUP_CONCAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0);
    }
    public orderClause(): OrderClauseContext {
        return this.getRuleContext(MySQLParser.RULE_orderClause, 0) as OrderClauseContext;
    }
    public SEPARATOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SEPARATOR_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sumExpr;
    }
}


export class GroupingOperationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GROUPING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUPING_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupingOperation;
    }
}


export class WindowFunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public parentheses(): ParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0) as ParenthesesContext;
    }
    public windowingClause(): WindowingClauseContext {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0) as WindowingClauseContext;
    }
    public ROW_NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0);
    }
    public RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANK_SYMBOL, 0);
    }
    public DENSE_RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0);
    }
    public CUME_DIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CUME_DIST_SYMBOL, 0);
    }
    public PERCENT_RANK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0);
    }
    public NTILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NTILE_SYMBOL, 0);
    }
    public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExprWithParentheses, 0) as SimpleExprWithParenthesesContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public stableInteger(): StableIntegerContext {
        return this.getRuleContext(MySQLParser.RULE_stableInteger, 0) as StableIntegerContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public LEAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAD_SYMBOL, 0);
    }
    public LAG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAG_SYMBOL, 0);
    }
    public leadLagInfo(): LeadLagInfoContext {
        return this.getRuleContext(MySQLParser.RULE_leadLagInfo, 0) as LeadLagInfoContext;
    }
    public nullTreatment(): NullTreatmentContext {
        return this.getRuleContext(MySQLParser.RULE_nullTreatment, 0) as NullTreatmentContext;
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0) as ExprWithParenthesesContext;
    }
    public FIRST_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0);
    }
    public LAST_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0);
    }
    public NTH_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0) as SimpleExprContext;
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowFunctionCall;
    }
}


export class WindowingClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OVER_SYMBOL, 0);
    }
    public windowName(): WindowNameContext {
        return this.getRuleContext(MySQLParser.RULE_windowName, 0) as WindowNameContext;
    }
    public windowSpec(): WindowSpecContext {
        return this.getRuleContext(MySQLParser.RULE_windowSpec, 0) as WindowSpecContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowingClause;
    }
}


export class LeadLagInfoContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public stableInteger(): StableIntegerContext {
        return this.getRuleContext(MySQLParser.RULE_stableInteger, 0) as StableIntegerContext;
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public ulonglong_number(): Ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0) as Ulonglong_numberContext;
    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_leadLagInfo;
    }
}


export class StableIntegerContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public int64Literal(): Int64LiteralContext {
        return this.getRuleContext(MySQLParser.RULE_int64Literal, 0) as Int64LiteralContext;
    }
    public paramOrVar(): ParamOrVarContext {
        return this.getRuleContext(MySQLParser.RULE_paramOrVar, 0) as ParamOrVarContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stableInteger;
    }
}


export class ParamOrVarContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PARAM_MARKER(): TerminalNode | null {
        return this.getToken(MySQLParser.PARAM_MARKER, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_paramOrVar;
    }
}


export class NullTreatmentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullTreatment;
    }
}


export class JsonFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public JSON_ARRAYAGG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public inSumExpr_list(): Vector<InSumExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_inSumExpr) as Vector<InSumExprContext>;
    }
    public inSumExpr(i: number): InSumExprContext {
        return this.getRuleContext(MySQLParser.RULE_inSumExpr, i) as InSumExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public windowingClause(): WindowingClauseContext {
        return this.getRuleContext(MySQLParser.RULE_windowingClause, 0) as WindowingClauseContext;
    }
    public JSON_OBJECTAGG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonFunction;
    }
}


export class InSumExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public ALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inSumExpr;
    }
}


export class IdentListArgContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identList(): IdentListContext {
        return this.getRuleContext(MySQLParser.RULE_identList, 0) as IdentListContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identListArg;
    }
}


export class IdentListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public simpleIdentifier_list(): Vector<SimpleIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_simpleIdentifier) as Vector<SimpleIdentifierContext>;
    }
    public simpleIdentifier(i: number): SimpleIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_simpleIdentifier, i) as SimpleIdentifierContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identList;
    }
}


export class FulltextOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public NATURAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fulltextOptions;
    }
}


export class RuntimeFunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0) as CharsetNameContext;
    }
    public CURRENT_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0) as ParenthesesContext;
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0) as ExprWithParenthesesContext;
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public INSERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public INTERVAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
    }
    public JSON_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_VALUE_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0) as SimpleExprContext;
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public onEmptyOrError(): OnEmptyOrErrorContext {
        return this.getRuleContext(MySQLParser.RULE_onEmptyOrError, 0) as OnEmptyOrErrorContext;
    }
    public returningType(): ReturningTypeContext {
        return this.getRuleContext(MySQLParser.RULE_returningType, 0) as ReturningTypeContext;
    }
    public LEFT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public RIGHT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public trimFunction(): TrimFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_trimFunction, 0) as TrimFunctionContext;
    }
    public userFunction(): UserFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_userFunction, 0) as UserFunctionContext;
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(MySQLParser.RULE_interval, 0) as IntervalContext;
    }
    public CURDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURDATE_SYMBOL, 0);
    }
    public CURTIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURTIME_SYMBOL, 0);
    }
    public timeFunctionParameters(): TimeFunctionParametersContext {
        return this.getRuleContext(MySQLParser.RULE_timeFunctionParameters, 0) as TimeFunctionParametersContext;
    }
    public DATE_ADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_ADD_SYMBOL, 0);
    }
    public DATE_SUB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SUB_SYMBOL, 0);
    }
    public EXTRACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTRACT_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public dateTimeTtype(): DateTimeTtypeContext {
        return this.getRuleContext(MySQLParser.RULE_dateTimeTtype, 0) as DateTimeTtypeContext;
    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POSITION_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0) as BitExprContext;
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public substringFunction(): SubstringFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_substringFunction, 0) as SubstringFunctionContext;
    }
    public SYSDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SYSDATE_SYMBOL, 0);
    }
    public intervalTimeStamp(): IntervalTimeStampContext {
        return this.getRuleContext(MySQLParser.RULE_intervalTimeStamp, 0) as IntervalTimeStampContext;
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public UTC_DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_DATE_SYMBOL, 0);
    }
    public UTC_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_TIME_SYMBOL, 0);
    }
    public UTC_TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprListWithParentheses, 0) as ExprListWithParenthesesContext;
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public DATABASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MOD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public REPEAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEAT_SYMBOL, 0);
    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public wsNumCodepoints(): WsNumCodepointsContext {
        return this.getRuleContext(MySQLParser.RULE_wsNumCodepoints, 0) as WsNumCodepointsContext;
    }
    public ulong_number_list(): Vector<Ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_ulong_number) as Vector<Ulong_numberContext>;
    }
    public ulong_number(i: number): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, i) as Ulong_numberContext;
    }
    public geometryFunction(): GeometryFunctionContext {
        return this.getRuleContext(MySQLParser.RULE_geometryFunction, 0) as GeometryFunctionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_runtimeFunctionCall;
    }
}


export class ReturningTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RETURNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNING_SYMBOL, 0);
    }
    public castType(): CastTypeContext {
        return this.getRuleContext(MySQLParser.RULE_castType, 0) as CastTypeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_returningType;
    }
}


export class GeometryFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public exprListWithParentheses(): ExprListWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprListWithParentheses, 0) as ExprListWithParenthesesContext;
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_geometryFunction;
    }
}


export class TimeFunctionParametersContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public fractionalPrecision(): FractionalPrecisionContext {
        return this.getRuleContext(MySQLParser.RULE_fractionalPrecision, 0) as FractionalPrecisionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_timeFunctionParameters;
    }
}


export class FractionalPrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fractionalPrecision;
    }
}


export class WeightStringLevelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public real_ulong_number_list(): Vector<Real_ulong_numberContext> {
        return this.getRuleContexts(MySQLParser.RULE_real_ulong_number) as Vector<Real_ulong_numberContext>;
    }
    public real_ulong_number(i: number): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, i) as Real_ulong_numberContext;
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public weightStringLevelListItem_list(): Vector<WeightStringLevelListItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_weightStringLevelListItem) as Vector<WeightStringLevelListItemContext>;
    }
    public weightStringLevelListItem(i: number): WeightStringLevelListItemContext {
        return this.getRuleContext(MySQLParser.RULE_weightStringLevelListItem, i) as WeightStringLevelListItemContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_weightStringLevels;
    }
}


export class WeightStringLevelListItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ASC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASC_SYMBOL, 0);
    }
    public DESC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESC_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_weightStringLevelListItem;
    }
}


export class DateTimeTtypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dateTimeTtype;
    }
}


export class TrimFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TRIM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIM_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public LEADING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEADING_SYMBOL, 0);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public TRAILING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRAILING_SYMBOL, 0);
    }
    public BOTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOTH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_trimFunction;
    }
}


export class SubstringFunctionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SUBSTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBSTRING_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_substringFunction;
    }
}


export class FunctionCallContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public pureIdentifier(): PureIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0) as PureIdentifierContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public udfExprList(): UdfExprListContext {
        return this.getRuleContext(MySQLParser.RULE_udfExprList, 0) as UdfExprListContext;
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionCall;
    }
}


export class UdfExprListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public udfExpr_list(): Vector<UdfExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_udfExpr) as Vector<UdfExprContext>;
    }
    public udfExpr(i: number): UdfExprContext {
        return this.getRuleContext(MySQLParser.RULE_udfExpr, i) as UdfExprContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfExprList;
    }
}


export class UdfExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public selectAlias(): SelectAliasContext {
        return this.getRuleContext(MySQLParser.RULE_selectAlias, 0) as SelectAliasContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfExpr;
    }
}


export class UserVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public AT_TEXT_SUFFIX(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userVariable;
    }
}


export class InExpressionUserVariableAssignmentContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0) as UserVariableContext;
    }
    public ASSIGN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_inExpressionUserVariableAssignment;
    }
}


export class RvalueSystemOrUserVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0) as UserVariableContext;
    }
    public AT_AT_SIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
    }
    public rvalueSystemVariable(): RvalueSystemVariableContext {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemVariable, 0) as RvalueSystemVariableContext;
    }
    public rvalueSystemVariableType(): RvalueSystemVariableTypeContext {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemVariableType, 0) as RvalueSystemVariableTypeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemOrUserVariable;
    }
}


export class LvalueVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public lValueIdentifier(): LValueIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_lValueIdentifier, 0) as LValueIdentifierContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lvalueVariable;
    }
}


export class RvalueSystemVariableContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemVariable;
    }
}


export class WhenExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WHEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WHEN_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whenExpression;
    }
}


export class ThenExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public THEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THEN_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_thenExpression;
    }
}


export class ElseExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_elseExpression;
    }
}


export class CastTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public fieldLength(): FieldLengthContext {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0) as FieldLengthContext;
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext {
        return this.getRuleContext(MySQLParser.RULE_charsetWithOptBinary, 0) as CharsetWithOptBinaryContext;
    }
    public nchar(): NcharContext {
        return this.getRuleContext(MySQLParser.RULE_nchar, 0) as NcharContext;
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public UNSIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0) as TypeDatetimePrecisionContext;
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public floatOptions(): FloatOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_floatOptions, 0) as FloatOptionsContext;
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public realType(): RealTypeContext {
        return this.getRuleContext(MySQLParser.RULE_realType, 0) as RealTypeContext;
    }
    public FLOAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
    }
    public standardFloatOptions(): StandardFloatOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_standardFloatOptions, 0) as StandardFloatOptionsContext;
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_castType;
    }
}


export class ExprListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprList;
    }
}


export class CharsetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charset;
    }
}


export class NotRuleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public NOT2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_notRule;
    }
}


export class Not2RuleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOGICAL_NOT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0);
    }
    public NOT2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_not2Rule;
    }
}


export class IntervalContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public intervalTimeStamp(): IntervalTimeStampContext {
        return this.getRuleContext(MySQLParser.RULE_intervalTimeStamp, 0) as IntervalTimeStampContext;
    }
    public SECOND_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0);
    }
    public MINUTE_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0);
    }
    public MINUTE_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0);
    }
    public HOUR_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0);
    }
    public HOUR_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0);
    }
    public HOUR_MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0);
    }
    public DAY_MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0);
    }
    public DAY_SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0);
    }
    public DAY_MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0);
    }
    public DAY_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0);
    }
    public YEAR_MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_interval;
    }
}


export class IntervalTimeStampContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_intervalTimeStamp;
    }
}


export class ExprListWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public exprList(): ExprListContext {
        return this.getRuleContext(MySQLParser.RULE_exprList, 0) as ExprListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprListWithParentheses;
    }
}


export class ExprWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_exprWithParentheses;
    }
}


export class SimpleExprWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public simpleExpr(): SimpleExprContext {
        return this.getRuleContext(MySQLParser.RULE_simpleExpr, 0) as SimpleExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleExprWithParentheses;
    }
}


export class OrderListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public orderExpression_list(): Vector<OrderExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_orderExpression) as Vector<OrderExpressionContext>;
    }
    public orderExpression(i: number): OrderExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_orderExpression, i) as OrderExpressionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderList;
    }
}


export class OrderExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public direction(): DirectionContext {
        return this.getRuleContext(MySQLParser.RULE_direction, 0) as DirectionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_orderExpression;
    }
}


export class GroupListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public groupingExpression_list(): Vector<GroupingExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_groupingExpression) as Vector<GroupingExpressionContext>;
    }
    public groupingExpression(i: number): GroupingExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_groupingExpression, i) as GroupingExpressionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupList;
    }
}


export class GroupingExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_groupingExpression;
    }
}


export class ChannelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public textStringNoLinebreak(): TextStringNoLinebreakContext {
        return this.getRuleContext(MySQLParser.RULE_textStringNoLinebreak, 0) as TextStringNoLinebreakContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_channel;
    }
}


export class CompoundStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public simpleStatement(): SimpleStatementContext {
        return this.getRuleContext(MySQLParser.RULE_simpleStatement, 0) as SimpleStatementContext;
    }
    public returnStatement(): ReturnStatementContext {
        return this.getRuleContext(MySQLParser.RULE_returnStatement, 0) as ReturnStatementContext;
    }
    public ifStatement(): IfStatementContext {
        return this.getRuleContext(MySQLParser.RULE_ifStatement, 0) as IfStatementContext;
    }
    public caseStatement(): CaseStatementContext {
        return this.getRuleContext(MySQLParser.RULE_caseStatement, 0) as CaseStatementContext;
    }
    public labeledBlock(): LabeledBlockContext {
        return this.getRuleContext(MySQLParser.RULE_labeledBlock, 0) as LabeledBlockContext;
    }
    public unlabeledBlock(): UnlabeledBlockContext {
        return this.getRuleContext(MySQLParser.RULE_unlabeledBlock, 0) as UnlabeledBlockContext;
    }
    public labeledControl(): LabeledControlContext {
        return this.getRuleContext(MySQLParser.RULE_labeledControl, 0) as LabeledControlContext;
    }
    public unlabeledControl(): UnlabeledControlContext {
        return this.getRuleContext(MySQLParser.RULE_unlabeledControl, 0) as UnlabeledControlContext;
    }
    public leaveStatement(): LeaveStatementContext {
        return this.getRuleContext(MySQLParser.RULE_leaveStatement, 0) as LeaveStatementContext;
    }
    public iterateStatement(): IterateStatementContext {
        return this.getRuleContext(MySQLParser.RULE_iterateStatement, 0) as IterateStatementContext;
    }
    public cursorOpen(): CursorOpenContext {
        return this.getRuleContext(MySQLParser.RULE_cursorOpen, 0) as CursorOpenContext;
    }
    public cursorFetch(): CursorFetchContext {
        return this.getRuleContext(MySQLParser.RULE_cursorFetch, 0) as CursorFetchContext;
    }
    public cursorClose(): CursorCloseContext {
        return this.getRuleContext(MySQLParser.RULE_cursorClose, 0) as CursorCloseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compoundStatement;
    }
}


export class ReturnStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RETURN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURN_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_returnStatement;
    }
}


export class IfStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IF_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.IF_SYMBOL);
    }
    public IF_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, i);
    }
    public ifBody(): IfBodyContext {
        return this.getRuleContext(MySQLParser.RULE_ifBody, 0) as IfBodyContext;
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifStatement;
    }
}


export class IfBodyContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public thenStatement(): ThenStatementContext {
        return this.getRuleContext(MySQLParser.RULE_thenStatement, 0) as ThenStatementContext;
    }
    public ELSEIF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSEIF_SYMBOL, 0);
    }
    public ifBody(): IfBodyContext {
        return this.getRuleContext(MySQLParser.RULE_ifBody, 0) as IfBodyContext;
    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0) as CompoundStatementListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifBody;
    }
}


export class ThenStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public THEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THEN_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0) as CompoundStatementListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_thenStatement;
    }
}


export class CompoundStatementListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public compoundStatement_list(): Vector<CompoundStatementContext> {
        return this.getRuleContexts(MySQLParser.RULE_compoundStatement) as Vector<CompoundStatementContext>;
    }
    public compoundStatement(i: number): CompoundStatementContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, i) as CompoundStatementContext;
    }
    public SEMICOLON_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    }
    public SEMICOLON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_compoundStatementList;
    }
}


export class CaseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CASE_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.CASE_SYMBOL);
    }
    public CASE_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.CASE_SYMBOL, i);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public whenExpression_list(): Vector<WhenExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_whenExpression) as Vector<WhenExpressionContext>;
    }
    public whenExpression(i: number): WhenExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_whenExpression, i) as WhenExpressionContext;
    }
    public thenStatement_list(): Vector<ThenStatementContext> {
        return this.getRuleContexts(MySQLParser.RULE_thenStatement) as Vector<ThenStatementContext>;
    }
    public thenStatement(i: number): ThenStatementContext {
        return this.getRuleContext(MySQLParser.RULE_thenStatement, i) as ThenStatementContext;
    }
    public elseStatement(): ElseStatementContext {
        return this.getRuleContext(MySQLParser.RULE_elseStatement, 0) as ElseStatementContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_caseStatement;
    }
}


export class ElseStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ELSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0) as CompoundStatementListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_elseStatement;
    }
}


export class LabeledBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public label(): LabelContext {
        return this.getRuleContext(MySQLParser.RULE_label, 0) as LabelContext;
    }
    public beginEndBlock(): BeginEndBlockContext {
        return this.getRuleContext(MySQLParser.RULE_beginEndBlock, 0) as BeginEndBlockContext;
    }
    public labelRef(): LabelRefContext {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0) as LabelRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labeledBlock;
    }
}


export class UnlabeledBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public beginEndBlock(): BeginEndBlockContext {
        return this.getRuleContext(MySQLParser.RULE_beginEndBlock, 0) as BeginEndBlockContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unlabeledBlock;
    }
}


export class LabelContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public labelIdentifier(): LabelIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_labelIdentifier, 0) as LabelIdentifierContext;
    }
    public COLON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_label;
    }
}


export class BeginEndBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public spDeclarations(): SpDeclarationsContext {
        return this.getRuleContext(MySQLParser.RULE_spDeclarations, 0) as SpDeclarationsContext;
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0) as CompoundStatementListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_beginEndBlock;
    }
}


export class LabeledControlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public label(): LabelContext {
        return this.getRuleContext(MySQLParser.RULE_label, 0) as LabelContext;
    }
    public unlabeledControl(): UnlabeledControlContext {
        return this.getRuleContext(MySQLParser.RULE_unlabeledControl, 0) as UnlabeledControlContext;
    }
    public labelRef(): LabelRefContext {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0) as LabelRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labeledControl;
    }
}


export class UnlabeledControlContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public loopBlock(): LoopBlockContext {
        return this.getRuleContext(MySQLParser.RULE_loopBlock, 0) as LoopBlockContext;
    }
    public whileDoBlock(): WhileDoBlockContext {
        return this.getRuleContext(MySQLParser.RULE_whileDoBlock, 0) as WhileDoBlockContext;
    }
    public repeatUntilBlock(): RepeatUntilBlockContext {
        return this.getRuleContext(MySQLParser.RULE_repeatUntilBlock, 0) as RepeatUntilBlockContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unlabeledControl;
    }
}


export class LoopBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOOP_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.LOOP_SYMBOL);
    }
    public LOOP_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.LOOP_SYMBOL, i);
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0) as CompoundStatementListContext;
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_loopBlock;
    }
}


export class WhileDoBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public WHILE_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.WHILE_SYMBOL);
    }
    public WHILE_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.WHILE_SYMBOL, i);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0) as CompoundStatementListContext;
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_whileDoBlock;
    }
}


export class RepeatUntilBlockContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REPEAT_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.REPEAT_SYMBOL);
    }
    public REPEAT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.REPEAT_SYMBOL, i);
    }
    public compoundStatementList(): CompoundStatementListContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatementList, 0) as CompoundStatementListContext;
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_repeatUntilBlock;
    }
}


export class SpDeclarationsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public spDeclaration_list(): Vector<SpDeclarationContext> {
        return this.getRuleContexts(MySQLParser.RULE_spDeclaration) as Vector<SpDeclarationContext>;
    }
    public spDeclaration(i: number): SpDeclarationContext {
        return this.getRuleContext(MySQLParser.RULE_spDeclaration, i) as SpDeclarationContext;
    }
    public SEMICOLON_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
    }
    public SEMICOLON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spDeclarations;
    }
}


export class SpDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public variableDeclaration(): VariableDeclarationContext {
        return this.getRuleContext(MySQLParser.RULE_variableDeclaration, 0) as VariableDeclarationContext;
    }
    public conditionDeclaration(): ConditionDeclarationContext {
        return this.getRuleContext(MySQLParser.RULE_conditionDeclaration, 0) as ConditionDeclarationContext;
    }
    public handlerDeclaration(): HandlerDeclarationContext {
        return this.getRuleContext(MySQLParser.RULE_handlerDeclaration, 0) as HandlerDeclarationContext;
    }
    public cursorDeclaration(): CursorDeclarationContext {
        return this.getRuleContext(MySQLParser.RULE_cursorDeclaration, 0) as CursorDeclarationContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spDeclaration;
    }
}


export class VariableDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0) as DataTypeContext;
    }
    public collate(): CollateContext {
        return this.getRuleContext(MySQLParser.RULE_collate, 0) as CollateContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_variableDeclaration;
    }
}


export class ConditionDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public CONDITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public spCondition(): SpConditionContext {
        return this.getRuleContext(MySQLParser.RULE_spCondition, 0) as SpConditionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_conditionDeclaration;
    }
}


export class SpConditionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public sqlstate(): SqlstateContext {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0) as SqlstateContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spCondition;
    }
}


export class SqlstateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sqlstate;
    }
}


export class HandlerDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public handlerCondition_list(): Vector<HandlerConditionContext> {
        return this.getRuleContexts(MySQLParser.RULE_handlerCondition) as Vector<HandlerConditionContext>;
    }
    public handlerCondition(i: number): HandlerConditionContext {
        return this.getRuleContext(MySQLParser.RULE_handlerCondition, i) as HandlerConditionContext;
    }
    public compoundStatement(): CompoundStatementContext {
        return this.getRuleContext(MySQLParser.RULE_compoundStatement, 0) as CompoundStatementContext;
    }
    public CONTINUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTINUE_SYMBOL, 0);
    }
    public EXIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXIT_SYMBOL, 0);
    }
    public UNDO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerDeclaration;
    }
}


export class HandlerConditionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public spCondition(): SpConditionContext {
        return this.getRuleContext(MySQLParser.RULE_spCondition, 0) as SpConditionContext;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public SQLWARNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLWARNING_SYMBOL, 0);
    }
    public notRule(): NotRuleContext {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0) as NotRuleContext;
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public SQLEXCEPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_handlerCondition;
    }
}


export class CursorDeclarationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DECLARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public CURSOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_SYMBOL, 0);
    }
    public FOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOR_SYMBOL, 0);
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(MySQLParser.RULE_selectStatement, 0) as SelectStatementContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorDeclaration;
    }
}


export class IterateStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ITERATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ITERATE_SYMBOL, 0);
    }
    public labelRef(): LabelRefContext {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0) as LabelRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_iterateStatement;
    }
}


export class LeaveStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LEAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVE_SYMBOL, 0);
    }
    public labelRef(): LabelRefContext {
        return this.getRuleContext(MySQLParser.RULE_labelRef, 0) as LabelRefContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_leaveStatement;
    }
}


export class GetDiagnosticsStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public statementInformationItem_list(): Vector<StatementInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_statementInformationItem) as Vector<StatementInformationItemContext>;
    }
    public statementInformationItem(i: number): StatementInformationItemContext {
        return this.getRuleContext(MySQLParser.RULE_statementInformationItem, i) as StatementInformationItemContext;
    }
    public CONDITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
    }
    public signalAllowedExpr(): SignalAllowedExprContext {
        return this.getRuleContext(MySQLParser.RULE_signalAllowedExpr, 0) as SignalAllowedExprContext;
    }
    public conditionInformationItem_list(): Vector<ConditionInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_conditionInformationItem) as Vector<ConditionInformationItemContext>;
    }
    public conditionInformationItem(i: number): ConditionInformationItemContext {
        return this.getRuleContext(MySQLParser.RULE_conditionInformationItem, i) as ConditionInformationItemContext;
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_getDiagnosticsStatement;
    }
}


export class SignalAllowedExprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public literal(): LiteralContext {
        return this.getRuleContext(MySQLParser.RULE_literal, 0) as LiteralContext;
    }
    public rvalueSystemOrUserVariable(): RvalueSystemOrUserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_rvalueSystemOrUserVariable, 0) as RvalueSystemOrUserVariableContext;
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalAllowedExpr;
    }
}


export class StatementInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0) as UserVariableContext;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_statementInformationItem;
    }
}


export class ConditionInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0) as UserVariableContext;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public signalInformationItemName(): SignalInformationItemNameContext {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItemName, 0) as SignalInformationItemNameContext;
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_conditionInformationItem;
    }
}


export class SignalInformationItemNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalInformationItemName;
    }
}


export class SignalStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SIGNAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNAL_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public sqlstate(): SqlstateContext {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0) as SqlstateContext;
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public signalInformationItem_list(): Vector<SignalInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_signalInformationItem) as Vector<SignalInformationItemContext>;
    }
    public signalInformationItem(i: number): SignalInformationItemContext {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItem, i) as SignalInformationItemContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalStatement;
    }
}


export class ResignalStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RESIGNAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESIGNAL_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public sqlstate(): SqlstateContext {
        return this.getRuleContext(MySQLParser.RULE_sqlstate, 0) as SqlstateContext;
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public signalInformationItem_list(): Vector<SignalInformationItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_signalInformationItem) as Vector<SignalInformationItemContext>;
    }
    public signalInformationItem(i: number): SignalInformationItemContext {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItem, i) as SignalInformationItemContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resignalStatement;
    }
}


export class SignalInformationItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public signalInformationItemName(): SignalInformationItemNameContext {
        return this.getRuleContext(MySQLParser.RULE_signalInformationItemName, 0) as SignalInformationItemNameContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public signalAllowedExpr(): SignalAllowedExprContext {
        return this.getRuleContext(MySQLParser.RULE_signalAllowedExpr, 0) as SignalAllowedExprContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signalInformationItem;
    }
}


export class CursorOpenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorOpen;
    }
}


export class CursorCloseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorClose;
    }
}


export class CursorFetchContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FETCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FETCH_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public INTO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INTO_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
    public FROM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FROM_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_cursorFetch;
    }
}


export class ScheduleContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public expr_list(): Vector<ExprContext> {
        return this.getRuleContexts(MySQLParser.RULE_expr) as Vector<ExprContext>;
    }
    public expr(i: number): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, i) as ExprContext;
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(MySQLParser.RULE_interval, 0) as IntervalContext;
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schedule;
    }
}


export class ColumnDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(MySQLParser.RULE_columnName, 0) as ColumnNameContext;
    }
    public fieldDefinition(): FieldDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_fieldDefinition, 0) as FieldDefinitionContext;
    }
    public checkOrReferences(): CheckOrReferencesContext {
        return this.getRuleContext(MySQLParser.RULE_checkOrReferences, 0) as CheckOrReferencesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnDefinition;
    }
}


export class CheckOrReferencesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public checkConstraint(): CheckConstraintContext {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0) as CheckConstraintContext;
    }
    public references(): ReferencesContext {
        return this.getRuleContext(MySQLParser.RULE_references, 0) as ReferencesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkOrReferences;
    }
}


export class CheckConstraintContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0) as ExprWithParenthesesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_checkConstraint;
    }
}


export class ConstraintEnforcementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ENFORCED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintEnforcement;
    }
}


export class TableConstraintDefContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public keyListVariants(): KeyListVariantsContext {
        return this.getRuleContext(MySQLParser.RULE_keyListVariants, 0) as KeyListVariantsContext;
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public indexNameAndType(): IndexNameAndTypeContext {
        return this.getRuleContext(MySQLParser.RULE_indexNameAndType, 0) as IndexNameAndTypeContext;
    }
    public indexOption_list(): Vector<IndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_indexOption) as Vector<IndexOptionContext>;
    }
    public indexOption(i: number): IndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_indexOption, i) as IndexOptionContext;
    }
    public FULLTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
    }
    public keyOrIndex(): KeyOrIndexContext {
        return this.getRuleContext(MySQLParser.RULE_keyOrIndex, 0) as KeyOrIndexContext;
    }
    public indexName(): IndexNameContext {
        return this.getRuleContext(MySQLParser.RULE_indexName, 0) as IndexNameContext;
    }
    public fulltextIndexOption_list(): Vector<FulltextIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_fulltextIndexOption) as Vector<FulltextIndexOptionContext>;
    }
    public fulltextIndexOption(i: number): FulltextIndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_fulltextIndexOption, i) as FulltextIndexOptionContext;
    }
    public SPATIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
    }
    public spatialIndexOption_list(): Vector<SpatialIndexOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_spatialIndexOption) as Vector<SpatialIndexOptionContext>;
    }
    public spatialIndexOption(i: number): SpatialIndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_spatialIndexOption, i) as SpatialIndexOptionContext;
    }
    public keyList(): KeyListContext {
        return this.getRuleContext(MySQLParser.RULE_keyList, 0) as KeyListContext;
    }
    public references(): ReferencesContext {
        return this.getRuleContext(MySQLParser.RULE_references, 0) as ReferencesContext;
    }
    public checkConstraint(): CheckConstraintContext {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0) as CheckConstraintContext;
    }
    public constraintName(): ConstraintNameContext {
        return this.getRuleContext(MySQLParser.RULE_constraintName, 0) as ConstraintNameContext;
    }
    public FOREIGN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public constraintEnforcement(): ConstraintEnforcementContext {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0) as ConstraintEnforcementContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableConstraintDef;
    }
}


export class ConstraintNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public CONSTRAINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_constraintName;
    }
}


export class FieldDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0) as DataTypeContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0) as ExprWithParenthesesContext;
    }
    public columnAttribute_list(): Vector<ColumnAttributeContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnAttribute) as Vector<ColumnAttributeContext>;
    }
    public columnAttribute(i: number): ColumnAttributeContext {
        return this.getRuleContext(MySQLParser.RULE_columnAttribute, i) as ColumnAttributeContext;
    }
    public collate(): CollateContext {
        return this.getRuleContext(MySQLParser.RULE_collate, 0) as CollateContext;
    }
    public GENERATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERATED_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public VIRTUAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIRTUAL_SYMBOL, 0);
    }
    public STORED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldDefinition;
    }
}


export class ColumnAttributeContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public nullLiteral(): NullLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0) as NullLiteralContext;
    }
    public NOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOT_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public signedLiteral(): SignedLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_signedLiteral, 0) as SignedLiteralContext;
    }
    public nowOrSignedLiteral(): NowOrSignedLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_nowOrSignedLiteral, 0) as NowOrSignedLiteralContext;
    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0) as ExprWithParenthesesContext;
    }
    public timeFunctionParameters(): TimeFunctionParametersContext {
        return this.getRuleContext(MySQLParser.RULE_timeFunctionParameters, 0) as TimeFunctionParametersContext;
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public ON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public collate(): CollateContext {
        return this.getRuleContext(MySQLParser.RULE_collate, 0) as CollateContext;
    }
    public columnFormat(): ColumnFormatContext {
        return this.getRuleContext(MySQLParser.RULE_columnFormat, 0) as ColumnFormatContext;
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public storageMedia(): StorageMediaContext {
        return this.getRuleContext(MySQLParser.RULE_storageMedia, 0) as StorageMediaContext;
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0) as Real_ulonglong_numberContext;
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public checkConstraint(): CheckConstraintContext {
        return this.getRuleContext(MySQLParser.RULE_checkConstraint, 0) as CheckConstraintContext;
    }
    public constraintName(): ConstraintNameContext {
        return this.getRuleContext(MySQLParser.RULE_constraintName, 0) as ConstraintNameContext;
    }
    public constraintEnforcement(): ConstraintEnforcementContext {
        return this.getRuleContext(MySQLParser.RULE_constraintEnforcement, 0) as ConstraintEnforcementContext;
    }
    public jsonAttribute(): JsonAttributeContext {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0) as JsonAttributeContext;
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public visibility(): VisibilityContext {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0) as VisibilityContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnAttribute;
    }
}


export class ColumnFormatContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnFormat;
    }
}


export class StorageMediaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_storageMedia;
    }
}


export class NowContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOW_SYMBOL, 0);
    }
    public functionDatetimePrecision(): FunctionDatetimePrecisionContext {
        return this.getRuleContext(MySQLParser.RULE_functionDatetimePrecision, 0) as FunctionDatetimePrecisionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_now;
    }
}


export class NowOrSignedLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public now(): NowContext {
        return this.getRuleContext(MySQLParser.RULE_now, 0) as NowContext;
    }
    public signedLiteralOrNull(): SignedLiteralOrNullContext {
        return this.getRuleContext(MySQLParser.RULE_signedLiteralOrNull, 0) as SignedLiteralOrNullContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nowOrSignedLiteral;
    }
}


export class GcolAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UNIQUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public notRule(): NotRuleContext {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0) as NotRuleContext;
    }
    public PRIMARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_gcolAttribute;
    }
}


export class ReferencesContext extends ParserRuleContext {
    public _match!: Token;
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REFERENCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, 0) as TableRefContext;
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0) as IdentifierListWithParenthesesContext;
    }
    public MATCH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
    }
    public ON_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.ON_SYMBOL);
    }
    public ON_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ON_SYMBOL, i);
    }
    public deleteOption_list(): Vector<DeleteOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_deleteOption) as Vector<DeleteOptionContext>;
    }
    public deleteOption(i: number): DeleteOptionContext {
        return this.getRuleContext(MySQLParser.RULE_deleteOption, i) as DeleteOptionContext;
    }
    public UPDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
    }
    public DELETE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_references;
    }
}


export class DeleteOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RESTRICT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
    }
    public CASCADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public nullLiteral(): NullLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0) as NullLiteralContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_deleteOption;
    }
}


export class KeyListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public keyPart_list(): Vector<KeyPartContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyPart) as Vector<KeyPartContext>;
    }
    public keyPart(i: number): KeyPartContext {
        return this.getRuleContext(MySQLParser.RULE_keyPart, i) as KeyPartContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyList;
    }
}


export class KeyPartContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public fieldLength(): FieldLengthContext {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0) as FieldLengthContext;
    }
    public direction(): DirectionContext {
        return this.getRuleContext(MySQLParser.RULE_direction, 0) as DirectionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyPart;
    }
}


export class KeyListWithExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public keyPartOrExpression_list(): Vector<KeyPartOrExpressionContext> {
        return this.getRuleContexts(MySQLParser.RULE_keyPartOrExpression) as Vector<KeyPartOrExpressionContext>;
    }
    public keyPartOrExpression(i: number): KeyPartOrExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_keyPartOrExpression, i) as KeyPartOrExpressionContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyListWithExpression;
    }
}


export class KeyPartOrExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public keyPart(): KeyPartContext {
        return this.getRuleContext(MySQLParser.RULE_keyPart, 0) as KeyPartContext;
    }
    public exprWithParentheses(): ExprWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_exprWithParentheses, 0) as ExprWithParenthesesContext;
    }
    public direction(): DirectionContext {
        return this.getRuleContext(MySQLParser.RULE_direction, 0) as DirectionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyPartOrExpression;
    }
}


export class KeyListVariantsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public keyListWithExpression(): KeyListWithExpressionContext {
        return this.getRuleContext(MySQLParser.RULE_keyListWithExpression, 0) as KeyListWithExpressionContext;
    }
    public keyList(): KeyListContext {
        return this.getRuleContext(MySQLParser.RULE_keyList, 0) as KeyListContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_keyListVariants;
    }
}


export class IndexTypeContext extends ParserRuleContext {
    public _algorithm!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexType;
    }
}


export class IndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public commonIndexOption(): CommonIndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0) as CommonIndexOptionContext;
    }
    public indexTypeClause(): IndexTypeClauseContext {
        return this.getRuleContext(MySQLParser.RULE_indexTypeClause, 0) as IndexTypeClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexOption;
    }
}


export class CommonIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public visibility(): VisibilityContext {
        return this.getRuleContext(MySQLParser.RULE_visibility, 0) as VisibilityContext;
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0) as JsonAttributeContext;
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_commonIndexOption;
    }
}


export class VisibilityContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_visibility;
    }
}


export class IndexTypeClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public indexType(): IndexTypeContext {
        return this.getRuleContext(MySQLParser.RULE_indexType, 0) as IndexTypeContext;
    }
    public USING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USING_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexTypeClause;
    }
}


export class FulltextIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public commonIndexOption(): CommonIndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0) as CommonIndexOptionContext;
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fulltextIndexOption;
    }
}


export class SpatialIndexOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public commonIndexOption(): CommonIndexOptionContext {
        return this.getRuleContext(MySQLParser.RULE_commonIndexOption, 0) as CommonIndexOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_spatialIndexOption;
    }
}


export class DataTypeDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0) as DataTypeContext;
    }
    public EOF(): TerminalNode | null {
        return this.getToken(MySQLParser.EOF, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataTypeDefinition;
    }
}


export class DataTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_SYMBOL, 0);
    }
    public TINYINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYINT_SYMBOL, 0);
    }
    public SMALLINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SMALLINT_SYMBOL, 0);
    }
    public MEDIUMINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0);
    }
    public BIGINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIGINT_SYMBOL, 0);
    }
    public fieldLength(): FieldLengthContext {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0) as FieldLengthContext;
    }
    public fieldOptions(): FieldOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_fieldOptions, 0) as FieldOptionsContext;
    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DOUBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
    }
    public precision(): PrecisionContext {
        return this.getRuleContext(MySQLParser.RULE_precision, 0) as PrecisionContext;
    }
    public PRECISION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
    }
    public FLOAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
    }
    public DECIMAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
    }
    public NUMERIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMERIC_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public floatOptions(): FloatOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_floatOptions, 0) as FloatOptionsContext;
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public charsetWithOptBinary(): CharsetWithOptBinaryContext {
        return this.getRuleContext(MySQLParser.RULE_charsetWithOptBinary, 0) as CharsetWithOptBinaryContext;
    }
    public nchar(): NcharContext {
        return this.getRuleContext(MySQLParser.RULE_nchar, 0) as NcharContext;
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public VARYING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARYING_SYMBOL, 0);
    }
    public VARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARCHAR_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public VARBINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARBINARY_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public typeDatetimePrecision(): TypeDatetimePrecisionContext {
        return this.getRuleContext(MySQLParser.RULE_typeDatetimePrecision, 0) as TypeDatetimePrecisionContext;
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public TINYBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYBLOB_SYMBOL, 0);
    }
    public BLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOB_SYMBOL, 0);
    }
    public MEDIUMBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0);
    }
    public LONGBLOB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONGBLOB_SYMBOL, 0);
    }
    public LONG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_SYMBOL, 0);
    }
    public TINYTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TINYTEXT_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public MEDIUMTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0);
    }
    public LONGTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LONGTEXT_SYMBOL, 0);
    }
    public stringList(): StringListContext {
        return this.getRuleContext(MySQLParser.RULE_stringList, 0) as StringListContext;
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dataType;
    }
}


export class NcharContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public CHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nchar;
    }
}


export class RealTypeContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REAL_SYMBOL, 0);
    }
    public DOUBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
    }
    public PRECISION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_realType;
    }
}


export class FieldLengthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0) as Real_ulonglong_numberContext;
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldLength;
    }
}


export class FieldOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SIGNED_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.SIGNED_SYMBOL);
    }
    public SIGNED_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, i);
    }
    public UNSIGNED_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.UNSIGNED_SYMBOL);
    }
    public UNSIGNED_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, i);
    }
    public ZEROFILL_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.ZEROFILL_SYMBOL);
    }
    public ZEROFILL_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.ZEROFILL_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldOptions;
    }
}


export class CharsetWithOptBinaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ascii(): AsciiContext {
        return this.getRuleContext(MySQLParser.RULE_ascii, 0) as AsciiContext;
    }
    public unicode(): UnicodeContext {
        return this.getRuleContext(MySQLParser.RULE_unicode, 0) as UnicodeContext;
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public charset(): CharsetContext {
        return this.getRuleContext(MySQLParser.RULE_charset, 0) as CharsetContext;
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0) as CharsetNameContext;
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetWithOptBinary;
    }
}


export class AsciiContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ascii;
    }
}


export class UnicodeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_unicode;
    }
}


export class WsNumCodepointsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_wsNumCodepoints;
    }
}


export class TypeDatetimePrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_typeDatetimePrecision;
    }
}


export class FunctionDatetimePrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public parentheses(): ParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0) as ParenthesesContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionDatetimePrecision;
    }
}


export class CharsetNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetName;
    }
}


export class CollationNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public BINARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_collationName;
    }
}


export class CreateTableOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public createTableOption_list(): Vector<CreateTableOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOption) as Vector<CreateTableOptionContext>;
    }
    public createTableOption(i: number): CreateTableOptionContext {
        return this.getRuleContext(MySQLParser.RULE_createTableOption, i) as CreateTableOptionContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptions;
    }
}


export class CreateTableOptionsEtcContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public createTableOptions(): CreateTableOptionsContext {
        return this.getRuleContext(MySQLParser.RULE_createTableOptions, 0) as CreateTableOptionsContext;
    }
    public createPartitioningEtc(): CreatePartitioningEtcContext {
        return this.getRuleContext(MySQLParser.RULE_createPartitioningEtc, 0) as CreatePartitioningEtcContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptionsEtc;
    }
}


export class CreatePartitioningEtcContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(MySQLParser.RULE_partitionClause, 0) as PartitionClauseContext;
    }
    public duplicateAsQe(): DuplicateAsQeContext {
        return this.getRuleContext(MySQLParser.RULE_duplicateAsQe, 0) as DuplicateAsQeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createPartitioningEtc;
    }
}


export class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public createTableOption_list(): Vector<CreateTableOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_createTableOption) as Vector<CreateTableOptionContext>;
    }
    public createTableOption(i: number): CreateTableOptionContext {
        return this.getRuleContext(MySQLParser.RULE_createTableOption, i) as CreateTableOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOptionsSpaceSeparated;
    }
}


export class CreateTableOptionContext extends ParserRuleContext {
    public _option!: Token;
    public _format!: Token;
    public _method!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public engineRef(): EngineRefContext {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0) as EngineRefContext;
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public equal(): EqualContext {
        return this.getRuleContext(MySQLParser.RULE_equal, 0) as EqualContext;
    }
    public ulonglong_number(): Ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulonglong_number, 0) as Ulonglong_numberContext;
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public ternaryOption(): TernaryOptionContext {
        return this.getRuleContext(MySQLParser.RULE_ternaryOption, 0) as TernaryOptionContext;
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public tableRefList(): TableRefListContext {
        return this.getRuleContext(MySQLParser.RULE_tableRefList, 0) as TableRefListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public UNION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNION_SYMBOL, 0);
    }
    public defaultCharset(): DefaultCharsetContext {
        return this.getRuleContext(MySQLParser.RULE_defaultCharset, 0) as DefaultCharsetContext;
    }
    public defaultCollation(): DefaultCollationContext {
        return this.getRuleContext(MySQLParser.RULE_defaultCollation, 0) as DefaultCollationContext;
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public jsonAttribute(): JsonAttributeContext {
        return this.getRuleContext(MySQLParser.RULE_jsonAttribute, 0) as JsonAttributeContext;
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
        return this.getRuleContext(MySQLParser.RULE_tsOptionAutoextendSize, 0) as TsOptionAutoextendSizeContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createTableOption;
    }
}


export class TernaryOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ternaryOption;
    }
}


export class DefaultCollationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public collationName(): CollationNameContext {
        return this.getRuleContext(MySQLParser.RULE_collationName, 0) as CollationNameContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultCollation;
    }
}


export class DefaultEncryptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultEncryption;
    }
}


export class DefaultCharsetContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public charset(): CharsetContext {
        return this.getRuleContext(MySQLParser.RULE_charset, 0) as CharsetContext;
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0) as CharsetNameContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_defaultCharset;
    }
}


export class PartitionClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public partitionTypeDef(): PartitionTypeDefContext {
        return this.getRuleContext(MySQLParser.RULE_partitionTypeDef, 0) as PartitionTypeDefContext;
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public subPartitions(): SubPartitionsContext {
        return this.getRuleContext(MySQLParser.RULE_subPartitions, 0) as SubPartitionsContext;
    }
    public partitionDefinitions(): PartitionDefinitionsContext {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinitions, 0) as PartitionDefinitionsContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionClause;
    }
}


export class PartitionTypeDefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionTypeDef;
    }
    public override copyFrom(ctx: PartitionTypeDefContext): void {
        super.copyFrom(ctx);
    }
}
export class PartitionDefRangeListContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0) as BitExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
}
export class PartitionDefKeyContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
        return this.getRuleContext(MySQLParser.RULE_partitionKeyAlgorithm, 0) as PartitionKeyAlgorithmContext;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
}
export class PartitionDefHashContext extends PartitionTypeDefContext {
    constructor(ctx: PartitionTypeDefContext) {
        super(ctx.getParent() as ParserRuleContext, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0) as BitExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
}


export class SubPartitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0) as BitExprContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0) as IdentifierListWithParenthesesContext;
    }
    public LINEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
        return this.getRuleContext(MySQLParser.RULE_partitionKeyAlgorithm, 0) as PartitionKeyAlgorithmContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subPartitions;
    }
}


export class PartitionKeyAlgorithmContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionKeyAlgorithm;
    }
}


export class PartitionDefinitionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public partitionDefinition_list(): Vector<PartitionDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionDefinition) as Vector<PartitionDefinitionContext>;
    }
    public partitionDefinition(i: number): PartitionDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_partitionDefinition, i) as PartitionDefinitionContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDefinitions;
    }
}


export class PartitionDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public VALUES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public partitionValuesIn(): PartitionValuesInContext {
        return this.getRuleContext(MySQLParser.RULE_partitionValuesIn, 0) as PartitionValuesInContext;
    }
    public partitionOption_list(): Vector<PartitionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionOption) as Vector<PartitionOptionContext>;
    }
    public partitionOption(i: number): PartitionOptionContext {
        return this.getRuleContext(MySQLParser.RULE_partitionOption, i) as PartitionOptionContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public subpartitionDefinition_list(): Vector<SubpartitionDefinitionContext> {
        return this.getRuleContexts(MySQLParser.RULE_subpartitionDefinition) as Vector<SubpartitionDefinitionContext>;
    }
    public subpartitionDefinition(i: number): SubpartitionDefinitionContext {
        return this.getRuleContext(MySQLParser.RULE_subpartitionDefinition, i) as SubpartitionDefinitionContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public partitionValueItemListParen(): PartitionValueItemListParenContext {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItemListParen, 0) as PartitionValueItemListParenContext;
    }
    public MAXVALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionDefinition;
    }
}


export class PartitionValuesInContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public partitionValueItemListParen_list(): Vector<PartitionValueItemListParenContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionValueItemListParen) as Vector<PartitionValueItemListParenContext>;
    }
    public partitionValueItemListParen(i: number): PartitionValueItemListParenContext {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItemListParen, i) as PartitionValueItemListParenContext;
    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValuesIn;
    }
}


export class PartitionOptionContext extends ParserRuleContext {
    public _option!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public engineRef(): EngineRefContext {
        return this.getRuleContext(MySQLParser.RULE_engineRef, 0) as EngineRefContext;
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public real_ulong_number(): Real_ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulong_number, 0) as Real_ulong_numberContext;
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public INDEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionOption;
    }
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public partitionOption_list(): Vector<PartitionOptionContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionOption) as Vector<PartitionOptionContext>;
    }
    public partitionOption(i: number): PartitionOptionContext {
        return this.getRuleContext(MySQLParser.RULE_partitionOption, i) as PartitionOptionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_subpartitionDefinition;
    }
}


export class PartitionValueItemListParenContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public partitionValueItem_list(): Vector<PartitionValueItemContext> {
        return this.getRuleContexts(MySQLParser.RULE_partitionValueItem) as Vector<PartitionValueItemContext>;
    }
    public partitionValueItem(i: number): PartitionValueItemContext {
        return this.getRuleContext(MySQLParser.RULE_partitionValueItem, i) as PartitionValueItemContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValueItemListParen;
    }
}


export class PartitionValueItemContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public bitExpr(): BitExprContext {
        return this.getRuleContext(MySQLParser.RULE_bitExpr, 0) as BitExprContext;
    }
    public MAXVALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_partitionValueItem;
    }
}


export class DefinerClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_definerClause;
    }
}


export class IfExistsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifExists;
    }
}


export class IfNotExistsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IF_SYMBOL, 0);
    }
    public notRule(): NotRuleContext {
        return this.getRuleContext(MySQLParser.RULE_notRule, 0) as NotRuleContext;
    }
    public EXISTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ifNotExists;
    }
}


export class IgnoreUnknownUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IGNORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ignoreUnknownUser;
    }
}


export class ProcedureParameterContext extends ParserRuleContext {
    public _type_!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public functionParameter(): FunctionParameterContext {
        return this.getRuleContext(MySQLParser.RULE_functionParameter, 0) as FunctionParameterContext;
    }
    public IN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IN_SYMBOL, 0);
    }
    public OUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OUT_SYMBOL, 0);
    }
    public INOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INOUT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureParameter;
    }
}


export class FunctionParameterContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public parameterName(): ParameterNameContext {
        return this.getRuleContext(MySQLParser.RULE_parameterName, 0) as ParameterNameContext;
    }
    public typeWithOptCollate(): TypeWithOptCollateContext {
        return this.getRuleContext(MySQLParser.RULE_typeWithOptCollate, 0) as TypeWithOptCollateContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionParameter;
    }
}


export class CollateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public COLLATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
    }
    public collationName(): CollationNameContext {
        return this.getRuleContext(MySQLParser.RULE_collationName, 0) as CollationNameContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_collate;
    }
}


export class TypeWithOptCollateContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(MySQLParser.RULE_dataType, 0) as DataTypeContext;
    }
    public collate(): CollateContext {
        return this.getRuleContext(MySQLParser.RULE_collate, 0) as CollateContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_typeWithOptCollate;
    }
}


export class SchemaIdentifierPairContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public schemaRef_list(): Vector<SchemaRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_schemaRef) as Vector<SchemaRefContext>;
    }
    public schemaRef(i: number): SchemaRefContext {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, i) as SchemaRefContext;
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaIdentifierPair;
    }
}


export class ViewRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public viewRef_list(): Vector<ViewRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_viewRef) as Vector<ViewRefContext>;
    }
    public viewRef(i: number): ViewRefContext {
        return this.getRuleContext(MySQLParser.RULE_viewRef, i) as ViewRefContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewRefList;
    }
}


export class UpdateListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public updateElement_list(): Vector<UpdateElementContext> {
        return this.getRuleContexts(MySQLParser.RULE_updateElement) as Vector<UpdateElementContext>;
    }
    public updateElement(i: number): UpdateElementContext {
        return this.getRuleContext(MySQLParser.RULE_updateElement, i) as UpdateElementContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateList;
    }
}


export class UpdateElementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0) as ColumnRefContext;
    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public expr(): ExprContext {
        return this.getRuleContext(MySQLParser.RULE_expr, 0) as ExprContext;
    }
    public DEFAULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_updateElement;
    }
}


export class CharsetClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public charset(): CharsetContext {
        return this.getRuleContext(MySQLParser.RULE_charset, 0) as CharsetContext;
    }
    public charsetName(): CharsetNameContext {
        return this.getRuleContext(MySQLParser.RULE_charsetName, 0) as CharsetNameContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_charsetClause;
    }
}


export class FieldsClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public fieldTerm_list(): Vector<FieldTermContext> {
        return this.getRuleContexts(MySQLParser.RULE_fieldTerm) as Vector<FieldTermContext>;
    }
    public fieldTerm(i: number): FieldTermContext {
        return this.getRuleContext(MySQLParser.RULE_fieldTerm, i) as FieldTermContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldsClause;
    }
}


export class FieldTermContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TERMINATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public ENCLOSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCLOSED_SYMBOL, 0);
    }
    public OPTIONALLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0);
    }
    public ESCAPED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPED_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldTerm;
    }
}


export class LinesClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINES_SYMBOL, 0);
    }
    public lineTerm_list(): Vector<LineTermContext> {
        return this.getRuleContexts(MySQLParser.RULE_lineTerm) as Vector<LineTermContext>;
    }
    public lineTerm(i: number): LineTermContext {
        return this.getRuleContext(MySQLParser.RULE_lineTerm, i) as LineTermContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_linesClause;
    }
}


export class LineTermContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public TERMINATED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
    }
    public STARTING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTING_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lineTerm;
    }
}


export class UserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public user_list(): Vector<UserContext> {
        return this.getRuleContexts(MySQLParser.RULE_user) as Vector<UserContext>;
    }
    public user(i: number): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, i) as UserContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userList;
    }
}


export class CreateUserListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public createUser_list(): Vector<CreateUserContext> {
        return this.getRuleContexts(MySQLParser.RULE_createUser) as Vector<CreateUserContext>;
    }
    public createUser(i: number): CreateUserContext {
        return this.getRuleContext(MySQLParser.RULE_createUser, i) as CreateUserContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserList;
    }
}


export class CreateUserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public user(): UserContext {
        return this.getRuleContext(MySQLParser.RULE_user, 0) as UserContext;
    }
    public identification(): IdentificationContext {
        return this.getRuleContext(MySQLParser.RULE_identification, 0) as IdentificationContext;
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0) as IdentifiedWithPluginContext;
    }
    public createUserWithMfa(): CreateUserWithMfaContext {
        return this.getRuleContext(MySQLParser.RULE_createUserWithMfa, 0) as CreateUserWithMfaContext;
    }
    public initialAuth(): InitialAuthContext {
        return this.getRuleContext(MySQLParser.RULE_initialAuth, 0) as InitialAuthContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUser;
    }
}


export class CreateUserWithMfaContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public AND_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.AND_SYMBOL);
    }
    public AND_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.AND_SYMBOL, i);
    }
    public identification_list(): Vector<IdentificationContext> {
        return this.getRuleContexts(MySQLParser.RULE_identification) as Vector<IdentificationContext>;
    }
    public identification(i: number): IdentificationContext {
        return this.getRuleContext(MySQLParser.RULE_identification, i) as IdentificationContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_createUserWithMfa;
    }
}


export class IdentificationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifiedByPassword(): IdentifiedByPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0) as IdentifiedByPasswordContext;
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0) as IdentifiedByRandomPasswordContext;
    }
    public identifiedWithPlugin(): IdentifiedWithPluginContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPlugin, 0) as IdentifiedWithPluginContext;
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0) as IdentifiedWithPluginAsAuthContext;
    }
    public identifiedWithPluginByPassword(): IdentifiedWithPluginByPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByPassword, 0) as IdentifiedWithPluginByPasswordContext;
    }
    public identifiedWithPluginByRandomPassword(): IdentifiedWithPluginByRandomPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginByRandomPassword, 0) as IdentifiedWithPluginByRandomPasswordContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identification;
    }
}


export class IdentifiedByPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedByPassword;
    }
}


export class IdentifiedByRandomPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedByRandomPassword;
    }
}


export class IdentifiedWithPluginContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPlugin;
    }
}


export class IdentifiedWithPluginAsAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0) as TextStringHashContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginAsAuth;
    }
}


export class IdentifiedWithPluginByPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginByPassword;
    }
}


export class IdentifiedWithPluginByRandomPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public WITH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITH_SYMBOL, 0);
    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public BY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BY_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifiedWithPluginByRandomPassword;
    }
}


export class InitialAuthContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INITIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SYMBOL, 0);
    }
    public AUTHENTICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0);
    }
    public identifiedByRandomPassword(): IdentifiedByRandomPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedByRandomPassword, 0) as IdentifiedByRandomPasswordContext;
    }
    public identifiedWithPluginAsAuth(): IdentifiedWithPluginAsAuthContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedWithPluginAsAuth, 0) as IdentifiedWithPluginAsAuthContext;
    }
    public identifiedByPassword(): IdentifiedByPasswordContext {
        return this.getRuleContext(MySQLParser.RULE_identifiedByPassword, 0) as IdentifiedByPasswordContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_initialAuth;
    }
}


export class RetainCurrentPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_retainCurrentPassword;
    }
}


export class DiscardOldPasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_discardOldPassword;
    }
}


export class UserRegistrationContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public factor(): FactorContext {
        return this.getRuleContext(MySQLParser.RULE_factor, 0) as FactorContext;
    }
    public INITIATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIATE_SYMBOL, 0);
    }
    public REGISTRATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGISTRATION_SYMBOL, 0);
    }
    public UNREGISTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNREGISTER_SYMBOL, 0);
    }
    public FINISH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FINISH_SYMBOL, 0);
    }
    public SET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SET_SYMBOL, 0);
    }
    public CHALLENGE_RESPONSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0);
    }
    public AS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AS_SYMBOL, 0);
    }
    public textStringHash(): TextStringHashContext {
        return this.getRuleContext(MySQLParser.RULE_textStringHash, 0) as TextStringHashContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userRegistration;
    }
}


export class FactorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public numLiteral(): NumLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_numLiteral, 0) as NumLiteralContext;
    }
    public FACTOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FACTOR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_factor;
    }
}


export class ReplacePasswordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public REPLACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
    }
    public textString(): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, 0) as TextStringContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_replacePassword;
    }
}


export class UserIdentifierOrTextContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public userVariable(): UserVariableContext {
        return this.getRuleContext(MySQLParser.RULE_userVariable, 0) as UserVariableContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_userIdentifierOrText;
    }
}


export class UserContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public userIdentifierOrText(): UserIdentifierOrTextContext {
        return this.getRuleContext(MySQLParser.RULE_userIdentifierOrText, 0) as UserIdentifierOrTextContext;
    }
    public CURRENT_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
    }
    public parentheses(): ParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_parentheses, 0) as ParenthesesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_user;
    }
}


export class LikeClauseContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LIKE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_likeClause;
    }
}


export class LikeOrWhereContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public likeClause(): LikeClauseContext {
        return this.getRuleContext(MySQLParser.RULE_likeClause, 0) as LikeClauseContext;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(MySQLParser.RULE_whereClause, 0) as WhereClauseContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_likeOrWhere;
    }
}


export class OnlineOptionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ONLINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLINE_SYMBOL, 0);
    }
    public OFFLINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFLINE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_onlineOption;
    }
}


export class NoWriteToBinLogContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public NO_WRITE_TO_BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_noWriteToBinLog;
    }
}


export class UsePartitionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierListWithParentheses, 0) as IdentifierListWithParenthesesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_usePartition;
    }
}


export class FieldIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_fieldIdentifier;
    }
}


export class ColumnNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnName;
    }
}


export class ColumnInternalRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnInternalRef;
    }
}


export class ColumnInternalRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public columnInternalRef_list(): Vector<ColumnInternalRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_columnInternalRef) as Vector<ColumnInternalRefContext>;
    }
    public columnInternalRef(i: number): ColumnInternalRefContext {
        return this.getRuleContext(MySQLParser.RULE_columnInternalRef, i) as ColumnInternalRefContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnInternalRefList;
    }
}


export class ColumnRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public fieldIdentifier(): FieldIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_fieldIdentifier, 0) as FieldIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_columnRef;
    }
}


export class InsertIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(MySQLParser.RULE_columnRef, 0) as ColumnRefContext;
    }
    public tableWild(): TableWildContext {
        return this.getRuleContext(MySQLParser.RULE_tableWild, 0) as TableWildContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_insertIdentifier;
    }
}


export class IndexNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexName;
    }
}


export class IndexRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public fieldIdentifier(): FieldIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_fieldIdentifier, 0) as FieldIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_indexRef;
    }
}


export class TableWildContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier) as Vector<IdentifierContext>;
    }
    public identifier(i: number): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, i) as IdentifierContext;
    }
    public DOT_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.DOT_SYMBOL);
    }
    public DOT_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, i);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableWild;
    }
}


export class SchemaNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaName;
    }
}


export class SchemaRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_schemaRef;
    }
}


export class ProcedureNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureName;
    }
}


export class ProcedureRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_procedureRef;
    }
}


export class FunctionNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionName;
    }
}


export class FunctionRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_functionRef;
    }
}


export class TriggerNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerName;
    }
}


export class TriggerRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_triggerRef;
    }
}


export class ViewNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewName;
    }
}


export class ViewRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_viewRef;
    }
}


export class TablespaceNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceName;
    }
}


export class TablespaceRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tablespaceRef;
    }
}


export class LogfileGroupNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupName;
    }
}


export class LogfileGroupRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_logfileGroupRef;
    }
}


export class EventNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_eventName;
    }
}


export class EventRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_eventRef;
    }
}


export class UdfNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_udfName;
    }
}


export class ServerNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverName;
    }
}


export class ServerRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_serverRef;
    }
}


export class EngineRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textOrIdentifier(): TextOrIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_textOrIdentifier, 0) as TextOrIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_engineRef;
    }
}


export class TableNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableName;
    }
}


export class FilterTableRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(MySQLParser.RULE_schemaRef, 0) as SchemaRefContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_filterTableRef;
    }
}


export class TableRefWithWildcardContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public MULT_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MULT_OPERATOR, 0);
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRefWithWildcard;
    }
}


export class TableRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public qualifiedIdentifier(): QualifiedIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_qualifiedIdentifier, 0) as QualifiedIdentifierContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRef;
    }
}


export class TableRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRef_list(): Vector<TableRefContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableRef) as Vector<TableRefContext>;
    }
    public tableRef(i: number): TableRefContext {
        return this.getRuleContext(MySQLParser.RULE_tableRef, i) as TableRefContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableRefList;
    }
}


export class TableAliasRefListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public tableRefWithWildcard_list(): Vector<TableRefWithWildcardContext> {
        return this.getRuleContexts(MySQLParser.RULE_tableRefWithWildcard) as Vector<TableRefWithWildcardContext>;
    }
    public tableRefWithWildcard(i: number): TableRefWithWildcardContext {
        return this.getRuleContext(MySQLParser.RULE_tableRefWithWildcard, i) as TableRefWithWildcardContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_tableAliasRefList;
    }
}


export class ParameterNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_parameterName;
    }
}


export class LabelIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public pureIdentifier(): PureIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0) as PureIdentifierContext;
    }
    public labelKeyword(): LabelKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_labelKeyword, 0) as LabelKeywordContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelIdentifier;
    }
}


export class LabelRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public labelIdentifier(): LabelIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_labelIdentifier, 0) as LabelIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelRef;
    }
}


export class RoleIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public pureIdentifier(): PureIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0) as PureIdentifierContext;
    }
    public roleKeyword(): RoleKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_roleKeyword, 0) as RoleKeywordContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleIdentifier;
    }
}


export class PluginRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pluginRef;
    }
}


export class ComponentRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_componentRef;
    }
}


export class ResourceGroupRefContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_resourceGroupRef;
    }
}


export class WindowNameContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_windowName;
    }
}


export class PureIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public IDENTIFIER(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIER, 0);
    }
    public BACK_TICK_QUOTED_ID(): TerminalNode | null {
        return this.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0);
    }
    public DOUBLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_pureIdentifier;
    }
}


export class IdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public pureIdentifier(): PureIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0) as PureIdentifierContext;
    }
    public identifierKeyword(): IdentifierKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeyword, 0) as IdentifierKeywordContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifier;
    }
}


export class IdentifierListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier_list(): Vector<IdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_identifier) as Vector<IdentifierContext>;
    }
    public identifier(i: number): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, i) as IdentifierContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierList;
    }
}


export class IdentifierListWithParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(MySQLParser.RULE_identifierList, 0) as IdentifierListContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierListWithParentheses;
    }
}


export class QualifiedIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public dotIdentifier(): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, 0) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_qualifiedIdentifier;
    }
}


export class SimpleIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public dotIdentifier_list(): Vector<DotIdentifierContext> {
        return this.getRuleContexts(MySQLParser.RULE_dotIdentifier) as Vector<DotIdentifierContext>;
    }
    public dotIdentifier(i: number): DotIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_dotIdentifier, i) as DotIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_simpleIdentifier;
    }
}


export class DotIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_dotIdentifier;
    }
}


export class Ulong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ulong_number;
    }
}


export class Real_ulong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_real_ulong_number;
    }
}


export class Ulonglong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_ulonglong_number;
    }
}


export class Real_ulonglong_numberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_real_ulonglong_number;
    }
}


export class SignedLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public literal(): LiteralContext {
        return this.getRuleContext(MySQLParser.RULE_literal, 0) as LiteralContext;
    }
    public PLUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
    }
    public ulong_number(): Ulong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_ulong_number, 0) as Ulong_numberContext;
    }
    public MINUS_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signedLiteral;
    }
}


export class SignedLiteralOrNullContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public signedLiteral(): SignedLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_signedLiteral, 0) as SignedLiteralContext;
    }
    public nullAsLiteral(): NullAsLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_nullAsLiteral, 0) as NullAsLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_signedLiteralOrNull;
    }
}


export class LiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textLiteral(): TextLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textLiteral, 0) as TextLiteralContext;
    }
    public numLiteral(): NumLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_numLiteral, 0) as NumLiteralContext;
    }
    public temporalLiteral(): TemporalLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_temporalLiteral, 0) as TemporalLiteralContext;
    }
    public nullLiteral(): NullLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_nullLiteral, 0) as NullLiteralContext;
    }
    public boolLiteral(): BoolLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_boolLiteral, 0) as BoolLiteralContext;
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public BIN_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.BIN_NUMBER, 0);
    }
    public UNDERSCORE_CHARSET(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_literal;
    }
}


export class LiteralOrNullContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public literal(): LiteralContext {
        return this.getRuleContext(MySQLParser.RULE_literal, 0) as LiteralContext;
    }
    public nullAsLiteral(): NullAsLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_nullAsLiteral, 0) as NullAsLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_literalOrNull;
    }
}


export class NullAsLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullAsLiteral;
    }
}


export class StringListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public textString_list(): Vector<TextStringContext> {
        return this.getRuleContexts(MySQLParser.RULE_textString) as Vector<TextStringContext>;
    }
    public textString(i: number): TextStringContext {
        return this.getRuleContext(MySQLParser.RULE_textString, i) as TextStringContext;
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_stringList;
    }
}


export class TextStringLiteralContext extends ParserRuleContext {
    public _value!: Token;
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public SINGLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
    }
    public DOUBLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringLiteral;
    }
}


export class TextStringContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public BIN_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.BIN_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textString;
    }
}


export class TextStringHashContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public HEX_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.HEX_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringHash;
    }
}


export class TextLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringLiteral_list(): Vector<TextStringLiteralContext> {
        return this.getRuleContexts(MySQLParser.RULE_textStringLiteral) as Vector<TextStringLiteralContext>;
    }
    public textStringLiteral(i: number): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, i) as TextStringLiteralContext;
    }
    public NCHAR_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_TEXT, 0);
    }
    public UNDERSCORE_CHARSET(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textLiteral;
    }
}


export class TextStringNoLinebreakContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringNoLinebreak;
    }
}


export class TextStringLiteralListContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringLiteral_list(): Vector<TextStringLiteralContext> {
        return this.getRuleContexts(MySQLParser.RULE_textStringLiteral) as Vector<TextStringLiteralContext>;
    }
    public textStringLiteral(i: number): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, i) as TextStringLiteralContext;
    }
    public COMMA_SYMBOL_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.COMMA_SYMBOL);
    }
    public COMMA_SYMBOL(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textStringLiteralList;
    }
}


export class NumLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public int64Literal(): Int64LiteralContext {
        return this.getRuleContext(MySQLParser.RULE_int64Literal, 0) as Int64LiteralContext;
    }
    public DECIMAL_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
    }
    public FLOAT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_numLiteral;
    }
}


export class BoolLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public TRUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
    }
    public FALSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_boolLiteral;
    }
}


export class NullLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public NULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL_SYMBOL, 0);
    }
    public NULL2_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULL2_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_nullLiteral;
    }
}


export class Int64LiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public INT_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, 0);
    }
    public LONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.LONG_NUMBER, 0);
    }
    public ULONGLONG_NUMBER(): TerminalNode | null {
        return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_int64Literal;
    }
}


export class TemporalLiteralContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public SINGLE_QUOTED_TEXT(): TerminalNode | null {
        return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_temporalLiteral;
    }
}


export class FloatOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public fieldLength(): FieldLengthContext {
        return this.getRuleContext(MySQLParser.RULE_fieldLength, 0) as FieldLengthContext;
    }
    public precision(): PrecisionContext {
        return this.getRuleContext(MySQLParser.RULE_precision, 0) as PrecisionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_floatOptions;
    }
}


export class StandardFloatOptionsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public precision(): PrecisionContext {
        return this.getRuleContext(MySQLParser.RULE_precision, 0) as PrecisionContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_standardFloatOptions;
    }
}


export class PrecisionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public INT_NUMBER_list(): Vector<TerminalNode> {
        return this.getTokens(MySQLParser.INT_NUMBER);
    }
    public INT_NUMBER(i: number): TerminalNode | null {
        return this.getToken(MySQLParser.INT_NUMBER, i);
    }
    public COMMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_precision;
    }
}


export class TextOrIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_identifier, 0) as IdentifierContext;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_textOrIdentifier;
    }
}


export class LValueIdentifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public pureIdentifier(): PureIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0) as PureIdentifierContext;
    }
    public lValueKeyword(): LValueKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_lValueKeyword, 0) as LValueKeywordContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lValueIdentifier;
    }
}


export class RoleIdentifierOrTextContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public roleIdentifier(): RoleIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_roleIdentifier, 0) as RoleIdentifierContext;
    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleIdentifierOrText;
    }
}


export class SizeNumberContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public real_ulonglong_number(): Real_ulonglong_numberContext {
        return this.getRuleContext(MySQLParser.RULE_real_ulonglong_number, 0) as Real_ulonglong_numberContext;
    }
    public pureIdentifier(): PureIdentifierContext {
        return this.getRuleContext(MySQLParser.RULE_pureIdentifier, 0) as PureIdentifierContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_sizeNumber;
    }
}


export class ParenthesesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public OPEN_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
    }
    public CLOSE_PAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_parentheses;
    }
}


export class EqualContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EQUAL_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
    }
    public ASSIGN_OPERATOR(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_equal;
    }
}


export class OptionTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_optionType;
    }
}


export class RvalueSystemVariableTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_rvalueSystemVariableType;
    }
}


export class SetVarIdentTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public DOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DOT_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_setVarIdentType;
    }
}


export class JsonAttributeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public textStringLiteral(): TextStringLiteralContext {
        return this.getRuleContext(MySQLParser.RULE_textStringLiteral, 0) as TextStringLiteralContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_jsonAttribute;
    }
}


export class IdentifierKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public labelKeyword(): LabelKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_labelKeyword, 0) as LabelKeywordContext;
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_roleOrIdentifierKeyword, 0) as RoleOrIdentifierKeywordContext;
    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0) as IdentifierKeywordsUnambiguousContext;
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels, 0) as IdentifierKeywordsAmbiguous1RolesAndLabelsContext;
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0) as IdentifierKeywordsAmbiguous2LabelsContext;
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0) as IdentifierKeywordsAmbiguous3RolesContext;
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0) as IdentifierKeywordsAmbiguous4SystemVariablesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeyword;
    }
}


export class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EXECUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
    }
    public RESTART_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
    }
    public SHUTDOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels;
    }
}


export class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public IMPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous2Labels;
    }
}


export class LabelKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_roleOrLabelKeyword, 0) as RoleOrLabelKeywordContext;
    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0) as IdentifierKeywordsUnambiguousContext;
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0) as IdentifierKeywordsAmbiguous3RolesContext;
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0) as IdentifierKeywordsAmbiguous4SystemVariablesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_labelKeyword;
    }
}


export class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public EVENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
    }
    public FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_SYMBOL, 0);
    }
    public NONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NONE_SYMBOL, 0);
    }
    public PROCESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
    }
    public PROXY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
    }
    public RELOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
    }
    public REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
    }
    public RESOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous3Roles;
    }
}


export class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ATTRIBUTE_SYMBOL, 0);
    }
    public AUTHENTICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTHENTICATION_SYMBOL, 0);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public CHALLENGE_RESPONSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHALLENGE_RESPONSE_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public DEFINITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public ENFORCED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public EXCHANGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public EXPIRE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public FACTOR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FACTOR_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public FINISH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FINISH_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
    }
    public GET_SOURCE_PUBLIC_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public GTID_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GTID_ONLY_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public INITIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SYMBOL, 0);
    }
    public INITIATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIATE_SYMBOL, 0);
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public JSON_VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_VALUE_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public KEYRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEYRING_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public LOCKS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public NETWORK_NAMESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public NDBCLUSTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public NEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEW_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public OJ_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OJ_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public READ_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public REFERENCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
    }
    public REGISTRATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REGISTRATION_SYMBOL, 0);
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public REPLICAS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICAS_SYMBOL, 0);
    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICA_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public RESTORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public RETURNING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNING_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public SOURCE_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_AUTO_POSITION_SYMBOL, 0);
    }
    public SOURCE_BIND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_BIND_SYMBOL, 0);
    }
    public SOURCE_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0);
    }
    public SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0);
    }
    public SOURCE_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_CONNECT_RETRY_SYMBOL, 0);
    }
    public SOURCE_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_DELAY_SYMBOL, 0);
    }
    public SOURCE_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public SOURCE_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_HOST_SYMBOL, 0);
    }
    public SOURCE_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_FILE_SYMBOL, 0);
    }
    public SOURCE_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_LOG_POS_SYMBOL, 0);
    }
    public SOURCE_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PASSWORD_SYMBOL, 0);
    }
    public SOURCE_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PORT_SYMBOL, 0);
    }
    public SOURCE_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public SOURCE_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_RETRY_COUNT_SYMBOL, 0);
    }
    public SOURCE_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CAPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CA_SYMBOL, 0);
    }
    public SOURCE_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CERT_SYMBOL, 0);
    }
    public SOURCE_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CIPHER_SYMBOL, 0);
    }
    public SOURCE_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRLPATH_SYMBOL, 0);
    }
    public SOURCE_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_CRL_SYMBOL, 0);
    }
    public SOURCE_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_KEY_SYMBOL, 0);
    }
    public SOURCE_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_SYMBOL, 0);
    }
    public SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SOURCE_TLS_CIPHERSUITES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0);
    }
    public SOURCE_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_TLS_VERSION_SYMBOL, 0);
    }
    public SOURCE_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_USER_SYMBOL, 0);
    }
    public SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public ST_COLLECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ST_COLLECT_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TLS_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public TYPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public UNREGISTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNREGISTER_SYMBOL, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public VALIDATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public WITHOUT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ZONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ZONE_SYMBOL, 0);
    }
    public ARRAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
    }
    public FAILED_LOGIN_ATTEMPTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
    }
    public MEMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
    }
    public OFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFF_SYMBOL, 0);
    }
    public PASSWORD_LOCK_TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
    }
    public RANDOM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
    }
    public REQUIRE_ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
    }
    public REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
    }
    public STREAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsUnambiguous;
    }
}


export class RoleKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_roleOrLabelKeyword, 0) as RoleOrLabelKeywordContext;
    }
    public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
        return this.getRuleContext(MySQLParser.RULE_roleOrIdentifierKeyword, 0) as RoleOrIdentifierKeywordContext;
    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0) as IdentifierKeywordsUnambiguousContext;
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0) as IdentifierKeywordsAmbiguous2LabelsContext;
    }
    public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables, 0) as IdentifierKeywordsAmbiguous4SystemVariablesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleKeyword;
    }
}


export class LValueKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsUnambiguous, 0) as IdentifierKeywordsUnambiguousContext;
    }
    public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels, 0) as IdentifierKeywordsAmbiguous1RolesAndLabelsContext;
    }
    public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous2Labels, 0) as IdentifierKeywordsAmbiguous2LabelsContext;
    }
    public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
        return this.getRuleContext(MySQLParser.RULE_identifierKeywordsAmbiguous3Roles, 0) as IdentifierKeywordsAmbiguous3RolesContext;
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_lValueKeyword;
    }
}


export class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public PERSIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
    }
    public PERSIST_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables;
    }
}


export class RoleOrIdentifierKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ACCOUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
    }
    public ASCII_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
    }
    public ALWAYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
    }
    public BACKUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
    }
    public BEGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
    }
    public BYTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
    }
    public CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
    }
    public CHARSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
    }
    public CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
    }
    public CLONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
    }
    public CLOSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
    }
    public COMMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
    }
    public COMMIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
    }
    public CONTAINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
    }
    public DEALLOCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
    }
    public DO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DO_SYMBOL, 0);
    }
    public END_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.END_SYMBOL, 0);
    }
    public FLUSH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
    }
    public FOLLOWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
    }
    public FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
    }
    public GROUP_REPLICATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
    }
    public HANDLER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
    }
    public HELP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HELP_SYMBOL, 0);
    }
    public HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOST_SYMBOL, 0);
    }
    public INSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
    }
    public INVISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
    }
    public LANGUAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
    }
    public NO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_SYMBOL, 0);
    }
    public OPEN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
    }
    public OPTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
    }
    public OWNER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
    }
    public PARSER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
    }
    public PARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
    }
    public PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PORT_SYMBOL, 0);
    }
    public PRECEDES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
    }
    public PREPARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
    }
    public REMOVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
    }
    public REPAIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
    }
    public RESET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESET_SYMBOL, 0);
    }
    public RESTORE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
    }
    public ROLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
    }
    public ROLLBACK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
    }
    public SAVEPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
    }
    public SECONDARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
    }
    public SECONDARY_ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
    }
    public SECONDARY_LOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
    }
    public SECONDARY_UNLOAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
    }
    public SECURITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
    }
    public SERVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
    }
    public SIGNED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
    }
    public SOCKET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
    }
    public SLAVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
    }
    public SONAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
    }
    public START_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.START_SYMBOL, 0);
    }
    public STOP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STOP_SYMBOL, 0);
    }
    public TRUNCATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
    }
    public UNICODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
    }
    public UNINSTALL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
    }
    public UPGRADE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
    }
    public VISIBLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
    }
    public WRAPPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
    }
    public XA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XA_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrIdentifierKeyword;
    }
}


export class RoleOrLabelKeywordContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | null, invokingState?: number) {
        super(parent, invokingState);

    }
    public ACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
    }
    public ACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
    }
    public ADDDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
    }
    public AFTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
    }
    public AGAINST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
    }
    public AGGREGATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
    }
    public ALGORITHM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
    }
    public ANY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ANY_SYMBOL, 0);
    }
    public AT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AT_SYMBOL, 0);
    }
    public AUTO_INCREMENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
    }
    public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
    }
    public AVG_ROW_LENGTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
    }
    public AVG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.AVG_SYMBOL, 0);
    }
    public BINLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
    }
    public BIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BIT_SYMBOL, 0);
    }
    public BLOCK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
    }
    public BOOL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
    }
    public BOOLEAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
    }
    public BTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
    }
    public BUCKETS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
    }
    public CASCADED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
    }
    public CATALOG_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
    }
    public CHAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
    }
    public CHANGED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
    }
    public CHANNEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
    }
    public CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
    }
    public CLIENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
    }
    public CLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
    }
    public COALESCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
    }
    public CODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CODE_SYMBOL, 0);
    }
    public COLLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
    }
    public COLUMN_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
    }
    public COLUMN_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
    }
    public COLUMNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
    }
    public COMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
    }
    public COMPACT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
    }
    public COMPLETION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
    }
    public COMPONENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
    }
    public COMPRESSED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
    }
    public COMPRESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
    }
    public CONCURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
    }
    public CONNECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
    }
    public CONSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
    }
    public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
    }
    public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
    }
    public CONSTRAINT_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
    }
    public CONTEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
    }
    public CPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CPU_SYMBOL, 0);
    }
    public CURRENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
    }
    public CURSOR_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
    }
    public DATA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATA_SYMBOL, 0);
    }
    public DATAFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
    }
    public DATETIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
    }
    public DATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DATE_SYMBOL, 0);
    }
    public DAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DAY_SYMBOL, 0);
    }
    public DEFAULT_AUTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
    }
    public DEFINER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
    }
    public DELAY_KEY_WRITE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
    }
    public DESCRIPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
    }
    public DIAGNOSTICS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
    }
    public DIRECTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
    }
    public DISABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
    }
    public DISCARD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
    }
    public DISK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DISK_SYMBOL, 0);
    }
    public DUMPFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
    }
    public DUPLICATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
    }
    public DYNAMIC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
    }
    public ENCRYPTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
    }
    public ENDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
    }
    public ENUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
    }
    public ENGINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
    }
    public ENGINES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
    }
    public ENGINE_ATTRIBUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENGINE_ATTRIBUTE_SYMBOL, 0);
    }
    public ERROR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
    }
    public ERRORS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
    }
    public ESCAPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
    }
    public EVENTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
    }
    public EVERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
    }
    public EXCLUDE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
    }
    public EXPANSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
    }
    public EXPORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
    }
    public EXTENDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
    }
    public EXTENT_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
    }
    public FAULTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
    }
    public FAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FAST_SYMBOL, 0);
    }
    public FOLLOWING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
    }
    public FOUND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
    }
    public ENABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
    }
    public FULL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FULL_SYMBOL, 0);
    }
    public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
    }
    public FILTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
    }
    public FIRST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
    }
    public FIXED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
    }
    public GENERAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
    }
    public GEOMETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
    }
    public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
    }
    public GET_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
    }
    public GRANTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
    }
    public GLOBAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
    }
    public HASH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HASH_SYMBOL, 0);
    }
    public HISTOGRAM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
    }
    public HISTORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
    }
    public HOSTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
    }
    public HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
    }
    public IDENTIFIED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
    }
    public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
    }
    public INVOKER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
    }
    public INDEXES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
    }
    public INITIAL_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
    }
    public INSTANCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
    }
    public INACTIVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
    }
    public IO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IO_SYMBOL, 0);
    }
    public IPC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.IPC_SYMBOL, 0);
    }
    public ISOLATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
    }
    public ISSUER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
    }
    public INSERT_METHOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
    }
    public JSON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.JSON_SYMBOL, 0);
    }
    public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
    }
    public LAST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LAST_SYMBOL, 0);
    }
    public LEAVES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
    }
    public LESS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LESS_SYMBOL, 0);
    }
    public LEVEL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
    }
    public LINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
    }
    public LIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LIST_SYMBOL, 0);
    }
    public LOCAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
    }
    public LOCKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
    }
    public LOCKS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
    }
    public LOGFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
    }
    public LOGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
    }
    public MAX_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
    }
    public MASTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
    }
    public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
    }
    public MASTER_HOST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
    }
    public MASTER_PORT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
    }
    public MASTER_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
    }
    public MASTER_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
    }
    public MASTER_USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
    }
    public MASTER_PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
    }
    public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
    }
    public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
    }
    public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
    }
    public MASTER_DELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
    }
    public MASTER_SSL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
    }
    public MASTER_SSL_CA_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
    }
    public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
    }
    public MASTER_TLS_VERSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
    }
    public MASTER_SSL_CERT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
    }
    public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
    }
    public MASTER_SSL_CRL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
    }
    public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
    }
    public MASTER_SSL_KEY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
    }
    public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
    }
    public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
    }
    public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
    }
    public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
    }
    public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
    }
    public MEDIUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
    }
    public MEMORY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
    }
    public MERGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
    }
    public MESSAGE_TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
    }
    public MICROSECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
    }
    public MIGRATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
    }
    public MINUTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
    }
    public MIN_ROWS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
    }
    public MODIFY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
    }
    public MODE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MODE_SYMBOL, 0);
    }
    public MONTH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
    }
    public MULTILINESTRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
    }
    public MULTIPOINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
    }
    public MULTIPOLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
    }
    public MUTEX_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
    }
    public MYSQL_ERRNO_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
    }
    public NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAME_SYMBOL, 0);
    }
    public NAMES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
    }
    public NATIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
    }
    public NCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
    }
    public NDBCLUSTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
    }
    public NESTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
    }
    public NEVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
    }
    public NEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
    }
    public NEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NEW_SYMBOL, 0);
    }
    public NO_WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
    }
    public NODEGROUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
    }
    public NULLS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
    }
    public NOWAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
    }
    public NUMBER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
    }
    public NVARCHAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
    }
    public OFFSET_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
    }
    public OLD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OLD_SYMBOL, 0);
    }
    public ONE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ONE_SYMBOL, 0);
    }
    public OPTIONAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
    }
    public ORDINALITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
    }
    public ORGANIZATION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
    }
    public OTHERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
    }
    public PACK_KEYS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
    }
    public PAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
    }
    public PARTIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
    }
    public PARTITIONING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
    }
    public PARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
    }
    public PASSWORD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
    }
    public PATH_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PATH_SYMBOL, 0);
    }
    public PHASE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
    }
    public PLUGIN_DIR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
    }
    public PLUGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
    }
    public PLUGINS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
    }
    public POINT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POINT_SYMBOL, 0);
    }
    public POLYGON_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
    }
    public PRECEDING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
    }
    public PRESERVE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
    }
    public PREV_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PREV_SYMBOL, 0);
    }
    public THREAD_PRIORITY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
    }
    public PRIVILEGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
    }
    public PROCESSLIST_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
    }
    public PROFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
    }
    public PROFILES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
    }
    public QUARTER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
    }
    public QUERY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
    }
    public QUICK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
    }
    public READ_ONLY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
    }
    public REBUILD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
    }
    public RECOVER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
    }
    public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public REDUNDANT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
    }
    public RELAY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
    }
    public RELAYLOG_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
    }
    public RELAY_LOG_FILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
    }
    public RELAY_LOG_POS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
    }
    public RELAY_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
    }
    public REMOTE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
    }
    public REORGANIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
    }
    public REPEATABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
    }
    public REPLICATE_DO_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
    }
    public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
    }
    public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
    }
    public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
    }
    public USER_RESOURCES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
    }
    public RESPECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
    }
    public RESUME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
    }
    public RETAIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
    }
    public RETURNED_SQLSTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
    }
    public RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
    }
    public REUSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
    }
    public REVERSE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
    }
    public ROLLUP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
    }
    public ROTATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
    }
    public ROUTINE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
    }
    public ROW_COUNT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
    }
    public ROW_FORMAT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
    }
    public RTREE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
    }
    public SCHEDULE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
    }
    public SCHEMA_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
    }
    public SECOND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
    }
    public SERIAL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
    }
    public SERIALIZABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
    }
    public SESSION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
    }
    public SHARE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
    }
    public SIMPLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
    }
    public SKIP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
    }
    public SLOW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
    }
    public SNAPSHOT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
    }
    public SOUNDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
    }
    public SOURCE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
    }
    public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
    }
    public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
    }
    public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
    }
    public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
    }
    public SQL_NO_CACHE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
    }
    public SQL_THREAD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
    }
    public SRID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SRID_SYMBOL, 0);
    }
    public STACKED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
    }
    public STARTS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
    }
    public STATS_AUTO_RECALC_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
    }
    public STATS_PERSISTENT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
    }
    public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
    }
    public STATUS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
    }
    public STORAGE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
    }
    public STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.STRING_SYMBOL, 0);
    }
    public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
    }
    public SUBDATE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
    }
    public SUBJECT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
    }
    public SUBPARTITION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
    }
    public SUBPARTITIONS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
    }
    public SUPER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
    }
    public SUSPEND_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
    }
    public SWAPS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
    }
    public SWITCHES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
    }
    public TABLE_NAME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
    }
    public TABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
    }
    public TABLE_CHECKSUM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
    }
    public TABLESPACE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
    }
    public TEMPORARY_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
    }
    public TEMPTABLE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
    }
    public TEXT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
    }
    public THAN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.THAN_SYMBOL, 0);
    }
    public TIES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIES_SYMBOL, 0);
    }
    public TRANSACTION_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
    }
    public TRIGGERS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
    }
    public TIMESTAMP_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
    }
    public TIMESTAMPADD_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPADD_SYMBOL, 0);
    }
    public TIMESTAMPDIFF_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIMESTAMPDIFF_SYMBOL, 0);
    }
    public TIME_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TIME_SYMBOL, 0);
    }
    public TYPES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
    }
    public TYPE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
    }
    public UDF_RETURNS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0);
    }
    public UNBOUNDED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
    }
    public UNCOMMITTED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
    }
    public UNDEFINED_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
    }
    public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
    }
    public UNDOFILE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
    }
    public UNKNOWN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
    }
    public UNTIL_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
    }
    public USER_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USER_SYMBOL, 0);
    }
    public USE_FRM_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
    }
    public VARIABLES_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
    }
    public VCPU_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
    }
    public VIEW_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
    }
    public VALUE_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
    }
    public WARNINGS_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
    }
    public WAIT_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
    }
    public WEEK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
    }
    public WORK_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WORK_SYMBOL, 0);
    }
    public WEIGHT_STRING_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
    }
    public X509_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.X509_SYMBOL, 0);
    }
    public XID_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XID_SYMBOL, 0);
    }
    public XML_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.XML_SYMBOL, 0);
    }
    public YEAR_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
    }
    public ADMIN_SYMBOL(): TerminalNode | null {
        return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
    }
    public override getRuleIndex(): number {
        return MySQLParser.RULE_roleOrLabelKeyword;
    }
}
